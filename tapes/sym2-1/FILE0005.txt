./  ADD  SSI=81850025,NAME=IFNX1A
         JHEAD 'EDIT PHASE',                                           X00010001
               PHASEID=X1A,                                            X00040000
               LEVEL=10                                                 00060000
*                                                                       00080000
*FUNCTION/OPERATION-                                                    00100000
*   THIS PHASE TRANSLATES, SCANS AND EDITS SOURCE STATEMENTS, COPY      00120000
*   CODE, AND SYSTEM MACROS INTO EDITED TEXT.                           00140000
*                                                                       00160000
*   IT CALLS DIRECTORY ROUTINES, 'DRUTENT', TO BUILD MACRO NAME         00180000
*   DIRECTORY, VARIABLE SYMBOL DIRECTORIES, SEQUENCE SYMBOL DIRECTORIES 00200000
*   AND OPEN CODE ORDINARY SYMBOL DIRECTORY. ON ABNORMAL RETURN         00220000
*   FROM DIRECTORY ROUTINES, 'CONCODE' IS SET TO A NON-ZERO VALUE       00240000
*   SIGNIFYING THE TYPE OF ERROR DETECTED. THE VALUE IS THEN USED       00260000
*   TO BRANCH TO THE APPROPRIATE ERROR ROUTINE TO LOG THE ERROR.        00280000
*   (SEE DIRECTORY ROUTINE PROLOG FOR FURTHER EXPLANATION.)             00300000
*                                                                       00320000
*   INPUT CONTROL ROUTINE, 'RDSRC', IS CALLED AT APPROPRIATE TIME TO    00340000
*   BRING IN SOURCE RECORDS FROM SYSTEM INPUT, OR FROM MACRO LIBRARY    00360000
*   IF IN COPY CODE OR SYSTEM MACRO EDITING.                            00380000
*                                                                       00400000
*   'PROCNXT' ROUTINE EDITS NAME FIELD AND OPERATION FIELD, CLASSIFIES  00420000
*   THE TYPE OF THE INPUT RECORD, PREPARING TO PASS CONTROL TO THE      00440000
*   APPROPRIATE ROUTINES FOR FURTHER PROCESSING OF THE RECORD BASED     00460000
*   ON THE OPERATION CODE.                                              00480000
*                                                                       00500000
*   WHEN A MACRO PROTOTYPE RECORD IS ENCOUNTERED,  CONTROL IS           00520000
*   PASSED TO PROTOTYPE SCANNER, 'PROSCN', WHICH MAKES SYNTAX CHECKS    00540000
*   ON ALL SYMBOLIC PARAMETERS.                                         00560000
*                                                                       00580000
*   AS END OF OPERAND OR STATEMENT IS DETECTED,  'WRAPFLD' ROUTINE      00600000
*   IS CALLED TO WRAP UP THE BUILDING OF THE EDITED TEXT RECORD.        00620000
*   CONTROL IS THEN PASSED BACK TO THE CALLER IF END OF OPERAND,        00640000
*   OR IT EXITS TO 'READNEXT' IF END OF STATEMENT.                      00660000
*                                                                       00680000
*                                                                       00700000
*ENTRY POINT-                                                           00720000
*        EDITENT                                                        00740000
*                                                                       00760000
*                                                                       00780000
*INPUT-                                                                 00800000
*   SYSTEM INPUT - SOURCE STATEMENTS.                                   00820000
*                                                                       00840000
*   MACRO LIBRARY - COPY CODE AND SYSTEM MACRO DEFINITIONS.             00860000
*                                                                       00880000
*   INPUT RECORDS ARE OBTAINED THROUGH INPUT CONTROL ROUTINE IN         00900000
*   80-BYTE CARD FORMAT WITH REGISTER 'RETADR' POINTS TO THE FIRST      00920000
*   BYTE OF THE RECORD OBTAINED. THE RECORD IS THEN MOVED TO WORK       00940000
*   BUFFER FOR PROCESSING. THE ADDRESS OF THE WORK BUFFER IS SAVED      00960000
*   IN 'INPUT'.                                                         00980000
*                                                                       01000000
*                                                                       01020000
*OUTPUT-                                                                01040000
*   FILE 1 - SOURCE STATEMENT EDITED TEXT AND ASSOCIATED ERROR RECORDS, 01060000
*   AND MACRO DEFINITION EDITED TEXT AND ASSOCIATED ERROR RECORDS.      01080000
*                                                                       01100000
*   FILE 2 - TEXT SEGMENT DICTIONARY FILE FOR EACH MACRO DEFINITION.    01120000
*            TEXT SEGMENT DICTIONARY FILE FOR OPEN CODE                 01140000
*                                                                       01160000
*   FILE 3 - DEFINITION FILE AND MACRO DEFINITION DIRECTORY             01180000
*   (SEE DIRECTORY ROUTINE PROLOG FOR FURTHER DETAILS.)                 01200000
*                                                                       01220000
*                                                                       01240000
*EXTERNAL ROUTINES-                                                     01260000
*   DRUTENT - CALLED TO BUILD VARIOUS DIRECTORIES.                      01280000
*             AT ENTRY. 'DINDEX' (R9) HAS DIRECTORY ROUTINE INDEX.      01300000
*             IN THE CASE OF SYMBOL ENTRY.                              01320000
*                       'PARM' (R10) POINTS TO THE SYMBOL TO BE ENTERED 01340000
*                       OR SEARCHED, AND                                01360000
*                       'PARAM2' (R11) CONTAINS THE MOVE LENGTH OF THE  01380000
*                       SYMBOL TO BE ENTERED OR SEARCHED.               01400000
*                                                                       01420000
*              LINKAGE IS...                                            01440000
*              LA    DINDEX,XXX  WHERE XXX IS DIRECTORY ROUTINE INDEX   01460000
*              .     .     .     .                                      01480000
*              L     LINK,DENTRY                                        01500000
*              BAL   RETURN,D0(DINDEX,LINK)                             01520000
*                                                                       01540000
*   PFIXRI -  CALLED TO INITIALIZE POSTFIXER ROUTINE.                   01560000
*                                                                       01580000
*              LINKAGE IS...                                            01600000
*              L     PARAM2,ADPINIT                                     01620000
*              BALR  RETURN,PARAM2                                      01640000
*                                                                       01660000
*                                                                       01680000
*   PFIXRN -  CALLED TO PLACE ALL OPERATORS IN AN EXPRESSION INTO       01700000
*             APPROPRIATE ARRANGEMENT IN A META TEXT FIELD              01720000
*             AT ENTRY, 'PARM' (R10) CONTAINS THE OPERATOR TO BE        01740000
*                       ENTERED.                                        01760000
*                                                                       01780000
*              LINKAGE IS...                                            01800000
*              L     PARAM2,ADPSTR                                      01820000
*              BALR  RETURN,PARAM2                                      01840000
*                                                                       01860000
*                                                                       01880000
*EXITS, NORMAL-                                                         01900000
*   EXIT TO CONTROLLER WITH ZERO VALUE IN REGISTER 10.                  01920000
*                                                                       01940000
*EXITS, ERROR-                                                          01960000
*   EXIT TO CONTROLLER WITH NON-ZERO VALUE IN REGISTER 10.              01980000
*                                                                       02000000
*                                                                       02020000
*TABLE/WORK AREAS-                                                      02040000
*   INPUT/OUTPUT BUFFERS ARE DYNAMICALLY LOCATED ABOVE THE EXECUTABLE   02060000
*   CODE OF THE EDIT PHASE WITH REGISTER 'RETADR' POINTS TO THE NEXT    02080000
*   INPUT RECORD TO BE PROCESSED, OR TO THE NEXT AVAILABLE OUTPUT       02100000
*   BUFFER LOCATION AT RETURN FROM INPUT/OUTPUT CONTROL ROUTINE.        02120000
*                                                                       02140000
*   A 264-BYTE INPUT WORK BUFFER, POINTED TO BY ADDRESS CONSTANT        02160000
*   'INPUT', CONTAINS THE RECORD TO BE EDITED. THE WORK BUFFER MAY      02180000
*   CONTAIN UP TO TWO CONTINUATION CARDS WITH THEIR PRE-BEGIN(POST-END  02200000
*   STRINGS STRIPPED AND COLLECTED AT THE TAILEND PORTION OF THE WORK   02220000
*   BUFFER. ADDRESS CONSTANT 'DSTGBGN' POINTS TO THE BEGINNING OF THE   02240000
*   STRING COLLECTION AREA.                                             02260000
*                                                                       02280000
*                                                                       02300000
*ATTRIBUTES-                                                            02320000
*   REFRESHABLE                                                         02340000
*                                                                       02360000
*                                                                       02380000
*NOTES- N/A                                                             02400000
*                                                                       02420000
         SPACE 5                                                        02440000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   02460000
         COPY JCOMMON                                                   02480000
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE  02500000
         COPY  JERMSGCD                                                 02520000
         PRINT ON                       WE'LL PRINT THE REST            02540000
         EJECT                                                          02560000
         COPY  EDSECT                                                   02580000
         EJECT                                                          02600000
*************************                                               02620000
*   INPUT WORK BUFFER   *                                               02640000
*************************                                               02660000
INPFMT   DSECT                          ADDRESSED BY REG. 'INPTR'       02680000
         USING INPFMT,INPTR                                             02700000
INPNAME  EQU   *                        NAME FIELD                      02720000
         ORG   INPNAME                                                  02740000
INPOP    EQU   *                        OPERATION FIELD                 02760000
         ORG   INPNAME                                                  02780000
INPOPR   EQU   *                        OPERAND FIELD                   02800000
         ORG   INPNAME                                                  02820000
INPCOMM  EQU   *                        COMMENTS FIELD                  02840000
         ORG   INPNAME                                                  02860000
INPCTFLG EQU   *                        CONTINUATION FLAG               02880000
POSTEND  EQU   INPCTFLG                 POST-END STRING                 02900000
         ORG   INPNAME                                                  02920000
PREBGN   EQU   *                        PRE-BEGIN STRING                02940000
         ORG   INPNAME                                                  02960000
INPCNT   EQU   *                        CONTINUATION FIELD              02980000
ENDIPT   EQU   PREBGN+79                                                03000000
******************************                                          03020000
*   STRING COLLECTION AREA   *                                          03040000
******************************                                          03060000
STGAREA  DSECT ,                        STRING COLLECTION AREA          03080000
         USING STGAREA,DSTGPTR                                          03100000
SCCNT    EQU   *                        STRING COUNT                    03120000
         ORG   SCCNT                                                    03140000
SOPTR    EQU   *                        STRING OUTPUT LOCATION          03160000
SOLEN    EQU   SOPTR+1                  STRING LENGTH                   03180000
SDATA    EQU   SOLEN+1                  STRING                          03200000
***********************************************                         03220000
*   RSTACK-RECURSIVE STACK USED BY SCANNERS   *                         03240000
***********************************************                         03260000
DRSTK    DSECT                                                          03280000
         USING DRSTK,R14                                                03300000
BDRSTK   EQU   *                        RSTACK BEGIN                    03320000
RSTKRTN  DS    CL2                      RETURN ADDRESS                  03340000
RSTKATR  DS    X                        ATTRSV SAVED                    03360000
RSTKFLG  DS    X                        MCALL SAVED                     03380000
RSTKSTP  DS    CL4                      MTBLNDX SAVED                   03400000
RSTKVST  EQU   RSTKSTP                  FLGBYT SAVED                    03420000
EDRSTK   EQU   *                                                        03440000
***********************************************                         03460000
*   CSTK-RECURSIVE STACK USED BY INNER COPY   *                         03480000
***********************************************                         03500000
DCSTK    DSECT                                                          03520000
         USING DCSTK,PARM                                               03540000
CSTKNOTE DS    CL(L'JNOTEVAL)           NOTED ADDRESS                   03560000
CSTKSW   DS    C                        SWITCH1 SAVE AREA               03580000
CSTKMEM  DS    CL8                      NOTED MEMBER                    03590001
EDCSTK   EQU   *                                                        03600000
***********************************                                     03620000
*   EDITED TEXT RECORD FORMAT 1   *                                     03640000
***********************************                                     03660000
         USING JTEXT,INDEXO                                             03680000
         USING JTEXTA,INDEXP                                            03700000
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE     03720000
         COPY JTEXT                                                     03740000
         PRINT ON                       DON'T PRINT JTEXT COPY CODE     03760000
         SPACE 3                                                        03780000
******************************************                              03800000
*        PARAMETER RECORD FORMATS        *                              03820000
******************************************                              03840000
MPROTO   DSECT                                                          03860000
         USING MPROTO,INDEXP                                            03880000
HDF      DSW   MPSB,                    SUBOPERAND                     H03900000
               MPSBL,                   LAST SUBOPERAND                H03920000
               MPSBF,                   FIRST SUBOPERAND               H03940000
               OPNDPRM,                 PASSED PARAMETER               H03960000
               OPNDOMT,                 OMITTED OPERAND                H03980000
               OPNDORD,                 ORDINARY SYMBOL                H04000000
               OPNDTRM,                 SELF-DEFINING TERM             H04020000
               OPNDSTR                  CHARCTER STRING                 04040000
*   HEADER DATA AREA FORMAT                                             04060000
         ORG   HDF                      .                               04080000
MPHFLG   DS    C                        HEADER DATA FLAG                04100000
MPHP     DS    CL4                      VALUE/POINTER AREA              04120000
         ORG   MPHP                     .                               04140000
MPOSRP   DS    CL3                      ORDINARY SYMBOL REF POINTER     04160000
         ORG   MPHP                     .                               04180000
MPSDTV   DS    CL4                      SDT BINARY VALUE                04200000
         ORG                                                            04220000
MPHDL    EQU   *-MPHFLG                 *****                           04240000
         SPACE 3                                                        04260000
*   META TEXT FORMAT                                                    04280000
MPMT     DSECT                                                          04300000
         USING MPMT,R14                                                 04320000
MPMCFLG  DS    C                        CHAR STG FLAG (SEE JTMFLG)      04340000
MPMCLNG  DS    C                        CHAR STG LENGTH                 04360000
MPMCSTG  EQU   *                        CHAR STRING                     04380000
         ORG   MPMCFLG                  .                               04400000
MPVSRP   DS    CL6                      VARIABLE SYM REF PTR ETC        04420000
         ORG   MPMCFLG                  .                               04440000
MPKEYF   DS    C                        KEYWORD PARAM OPERATOR (=)      04460000
         ORG   MPMCFLG                  .                               04480000
MPEMT    DS    C                        STATEMENT TERMINATOR FLAG       04500000
         DROP  INDEXP,R14                                               04520000
         SPACE 3                                                        04540000
*******************************                                         04560000
*   META TEXT FIELD FORMATS   *                                         04580000
*******************************                                         04600000
         COPY  JTMTXT                                                   04620000
         EJECT                                                          04640000
         COPY  JERRCD                                                   04660000
JERRHL   EQU   JEDATA-JERECL                                            04680000
STACKREC DSECT                                                          04700000
LAST     DS    0H                       LAST STACK ENTRY                04720000
LASTOP   DS    C                        OPERATOR                        04740000
LASTBIND DS    C                        BINDING FACTOR                  04760000
         EJECT                                                          04780000
**********************                                                  04800000
*   SYMBOL EQUATES   *                                                  04820000
**********************                                                  04840000
*                                                                       04860000
BASE1    EQU   8                        PRIMARY BASE REGISTER           04880000
BASE2    EQU   7                        SECONDARY BASE REGISTER         04900000
BASE3    EQU   7                        THIRD BASE REGISTER             04920000
BASE4    EQU   7                                                        04930000
COMR     EQU   13                       COMMON AREA BASE REGISTER       04940000
MODCOMM  EQU   2                        MODULE COMMON AREA BASE         04960000
TRTN     EQU   0                        SCRATCH REGISTER                04980000
RCNT     EQU   0                                                        05000000
STGLOC   EQU   TRTN                     STRING LOCATION CONVEYER        05020000
TLINK    EQU   1                        LOCAL LINKAGE                   05040000
CGOTO    EQU   1                        GO-TO REGISTER                  05060000
WORK2    EQU   3                                                        05080000
GSPTR    EQU   3                                                        05100000
SLNREG   EQU   3                        SOURCE LENGTH REGISTER          05120000
BEGREG   EQU   4                        BEGIN COLUMN REGISTER           05140000
INDEXP   EQU   4                        VARIABLE PORTION O/P BUF INDEX  05160000
INDEXO   EQU   5                        FIXED PORTION O/P BUF INDEX     05180000
CNTREG   EQU   5                        CONTINUATION CHAR. COLUMN REG.  05200000
INPTR    EQU   6                        INPUT WORK BUFFER POINTER       05220000
RETURN   EQU   9                        RETURN LINKAGE REGISTER         05240000
DSTGPTR  EQU   9                        DESTINATION POINTER             05260000
SEQREG   EQU   9                        SEQ FIELD BEGIN REGISTER        05280000
DINDEX   EQU   9                        INDEX REG FOR D ENTRY ROUTINE   05300000
PARAM1   EQU   10                       PARAMETER REGISTER              05320000
PARM     EQU   PARAM1                   INDEX TO DIRECOTY ROUTINES      05340000
SQLREG   EQU   10                       SEQ FIELD LENGTH REGISTER       05360000
SRCPTR   EQU   10                       SOURCE RECORD POINTER           05380000
PARAM2   EQU   11                       PARAMETER REGISTER              05400000
RETADR   EQU   PARAM2                   TEMPORARY RETURN LINKAGE        05420000
LINK     EQU   12                       TARGET LINKAGE REGISTER         05440000
CBGREG   EQU   12                       CONT FIELD BEGIN REGISTER       05460000
SRCEND   EQU   12                       SOURCE RECORD END POS. CONVEYER 05480000
TWKREG1  EQU   14                                                       05500000
TWKREG2  EQU   15                                                       05520000
MTBLNDX  EQU   5                        MTABLE INDEX REGISTER           05540000
MTBLENT  EQU   12                       ABSOLUTE ROUTINE ADDRESS PTR    05560000
*                                                                       05580000
ALLOFF   EQU   X'00'                                                    05600000
LBITS    EQU   JF                       LENGTH BITS MASK                05620000
BNE      EQU   7                                                        05640000
BHI      EQU   2                                                        05660000
BLO      EQU   4                                                        05680000
BZ       EQU   8                                                        05700000
BEQ      EQU   8                                                        05720000
BMX      EQU   4                                                        05740000
BONE     EQU   1                                                        05760000
LICTL    EQU   66                                                       05780000
SEVENTY  EQU   70                                                       05800000
CRDLN    EQU   80                       SOURCE RECORD LENGTH            05820000
SLTLEN   EQU   3                                                        05840000
INVALV   EQU   31                                                       05860000
SPECHAR  EQU   JTBLTRT+JALFAMAX+1       SPECIAL CHARACTER START         05880000
JTBLALFA EQU   JTBLTRT+JA                                               05900000
HICHR    EQU   JPERIOD                  HIGHEST ASSEMBLER CHARACTER     05920000
XSDT     EQU   JTMSDT+0                 X TYPE SDT TYPE NUMBER          05940000
BSDT     EQU   JTMSDT+1                 B TYPE SDT TYPE NUMBER          05960000
CSDT     EQU   JTMSDT+2                 C TYPE SDT TYPE NUMBER          05980000
DSDT     EQU   JTMSDT+3                 D TYPE SDT TYPE NUMBER          06000000
DENTLNG  EQU   6                        MT TERM/POINTER LENGTH          06020000
STMASK   EQU   X'C0'                    MCALL STAUS MASK                06040000
DMCHIN   EQU   X'40'                    IOCID MASK FOR V.S.OP OCDE      06060000
XDMSLS   EQU   VTYP2+VSLS+VSNS          MASK FOR UNSUBSCRIPTED SYSLIST  06080000
RFLGLOC  EQU   (EDRSTK-BDRSTK)*2        INDEX TO 2ND LEVEL IN RSTACK    06100000
MISTGL   EQU   30                       MI STRING LENGTH  (STANDARD)    06120000
STSTGL   EQU   71                       ST STRING LENGTH  (STANDARD)    06140000
MISTGP   EQU   5+1                      MI STG POINTER LENGTH           06160000
STSTGP   EQU   5*3+1                    ST STG POINTER LENGTH           06180000
MAXCNTL  EQU   79                       1ST CARD MAX DATA AREA W/ CONT. 06200000
MAXCNT   EQU   255                                                      06220000
PRMLEN   EQU   3                        PARAMETER POINTER LENGTH        06240000
MTHDLEN  EQU   9                        MT HEADER DATA LENGTH           06260000
SZMI     EQU   562                      MI/PROTO SIZE **TEMP**          06280000
SZCNT    EQU   784                      STATEMENT W/ CONTIN    @AY11229 06300006
SZNORM   EQU   296                      STATEMENT W/O CONTINUATIONS     06320000
SZCMT    EQU   116                      COMMENTS STATEMENT SIZE         06340000
TSRCLN2  EQU   TSRCLN+2                 TRUE SSOURCE DATA LENGTH        06360000
TCNTLN2  EQU   TCNTLN+2                 TRUE CONTINUATION DATA LENGTH   06380000
RTNSV1   EQU   OCPTRSV                  RETURN POINTER SAVE AREA        06400000
RLAST    EQU   R15                                                      06420000
HIBIND   EQU   13                       UNLUCKY 13                      06440000
         EJECT                                                          06460000
*******************************                                         06480000
*   DIRECTORY ROUTINE INDEX   *                                         06500000
*******************************                                         06520000
PHASENT  EQU   0                                                        06540000
MACRENT  EQU   2                                                        06560000
MACREND  EQU   4                                                        06580000
OPENENT  EQU   6                                                        06600000
OPENEND  EQU   8                                                        06620000
VARBSYMR EQU   10                                                       06640000
SEQSYMBR EQU   12                                                       06660000
SEQSYMBD EQU   14                                                       06680000
ORDSYMBR EQU   16                                                       06700000
ORDSYMBD EQU   18                                                       06720000
VARBSYMD EQU   20                                                       06740000
OPERCODE EQU   22                                                       06760000
OPSYNBLD EQU   24                                                       06780000
         USING JTEXTA,INDEXP                                            06800000
         USING DRSTK,R14                                                06820000
         EJECT                                                          06840000
         JCSECT (X1A00=CS0)                                             06860000
* VS1 RELEASE 2 CHANGES                                                 06870002
*A883100-883120                                                 OX00217 06872001
* VS1 RELEASE 2.6 CHANGES                                               06876002
*C173100                                                        OX00224 06876401
*A457500                                                        OX00224 06876801
*A843900-843920                                                 OX00225 06878001
*C891200                                                        OX00225 06878401
*A301970-301994                                                 OX00403 06878801
*C302000                                                        OX00403 06879201
*C333400                                                        OX00404 06879601
*A674500                                                        OX00405 06879701
*A345900-345920,500100                                          OX00406 06879801
*D521600                                                        OX00406 06879901
*A847300                                                        OX00409 06880701
*C274800                                                        OX00410 06882701
*A457520-457540,459700-459740                                   OX00411 06884701
*D737600                                                        OX00081 06885102
*A741900                                                        OX00081 06885502
* VS1 RELEASE 3 CHANGES                                                 06887503
*A169700                                                        OX00095 06889503
*D170600                                                        OX00095 06889903
*C978500                                                        OX00095 06893203
*A978700-978760,979920                                          OX00095 06895203
* VS1 RELEASE 3.1 CHANGES                                               06895631
*D872600                                                        OX01771 06896002
*A835100,868900,872500-872700,875700-875760                     OX01771 06896402
*A644924                                                        OY01713 06896502
*D644960                                                        OY01713 06896602
*A131500-131560                                                 OX02266 06896731
*D847300                                                        OX02973 06896831
*A848300                                                        OX02973 06896931
*A334700-334740                                                 OX02957 06897031
*A142220-142260                                                 OX02976 06897131
*A128900-128980                                                 OX04102 06897231
*D131500-131560                                                 OX04102 06897331
*A866300,868500,868820,868920,876260-876796                     OX04106 06897431
*C876800                                                        OX04106 06897531
*D875800-876600                                                 OX04106 06897631
*C458400,558400,558600                                          OX05801 06897731
*A459620,558500,558520                                          OX05801 06897831
*A335100-335180                                                 OY04852 06897931
*C453800                                                        OY06129 06898031
*D335100-335180                                                 OY06129 06898131
*A453700,453720                                                 OY06129 06898231
* VS1 RELEASE 040 CHANGES                                               06898331
*A993620                                                       @XA04142 06898431
*A676925,676926                                                @XA05837 06898531
*A843300-843340,843820                                         @OZ01697 06898604
*A461920-461980,173150,173820-173996                           @OX06626 06898704
*C458800,460200,558400,558600                                  @OX06626 06898904
*D558500-558520                                                @OX06626 06903904
*A093700,174900                                                @OX07247 06904004
*A075700,076300,076900,077300,263900,266700,646100-646160      @OX07230 06904105
*A423100-423188                                                @OY04864 06904205
*A423700                                                       @OX07300 06904305
*C423800                                                       @OX07300 06904405
*A088500-088540                                                @OY08021 06904505
*A301954-301968                                                @OX08858 06904605
*D301970                                                       @OX08858 06904705
*A098500,299540                                                @OY08060 06904805
*A806500-806560                                                @OX07290 06904905
*A093620,093640,093720                                         @OX01364 06905005
*A829700,831900,826600,827300-827360,975685,975687             @OZ06551 06905106
*C827400,976586                                                @OZ06551 06905206
*A335100                                                       @OX10953 06905306
*D142000                                                       @AX11012 06905706
*A141820                                                       @AX11012 06906106
*C827300,975686,826050,827340,827360                           @AX12896 06906506
*A827220                                                       @AX12896 06906606
*D826700                                                       @AX12896 06906706
*C063000                                                       @AY11229 06906906
*A911620-911755,903900-903980                                  @AY11215 06907006
*C674600                                                       @AX12923 06917006
*A093660,093680                                                @AZ10910 06917106
*A071700                                                       @AY14007 06917200
*A122900                                                       @AX16038 06917300
*A559100-559140,558900,129220,879900                           @AZ13722 06917400
*C558400,558600                                                @AZ13722 06917500
*A826070,826104,826108,827240,827260                           @AY14037 06919500
*C827200,827220                                                @AY14037 06921500
*A421700,421720                                                @AX16943 06921600
*D088500-088520                                                @AY16252 06922600
*A173200                                                       @AY16256 06923300
*C173500                                                       @AY16256 06924000
*C826104                                                       @AZ19665 06924200
*A826110,826113                                                @AZ19665 06924900
*A301910                                                       @AY19080 06925600
*D838660,838720                                                @AZ24557 06926300
*C911620,911705                                                @AZ24557 06927000
*A911900-911930                                                @AZ24557 06927700
*C173820,173900,173960,173984                                  @AZ26008 06927800
*A173981                                                       @AZ26008 06927900
*C828600                                                       @AX19887 06928000
*A828700-828740                                                @AX19887 06928100
         JMODID                                                         06928400
         SPACE 3                                                        06929804
****************************                                            06934904
*   PHASE INITIALIZATION   *                                            06940000
****************************                                            06960000
EDITENT  JSAVE  BASE=NO                                                 06980000
         JENTRY (X1A01=EDITENT)                                         07000000
         BALR  BASE2,D0                 SET BASE VALUE                  07020000
         USING *,BASE2                                                  07040000
         LA    PARAM1,(ENDEDSCT-EDSCTGO+7)/8 GET EDSECT SIZE            07060000
         JGETCORE DBL=(R10)             GET CORE FOR MOD COMMON AREA    07080000
         LR    MODCOMM,PARAM1           SET UP MOD COMMON AREA BASE     07100000
         XC    VSFLG(SEQSVT+40-VSFLG),VSFLG  CLEAR EDSECT CONSTANTS     07120000
         XC    EDSCTGO(BITFF),EDSCTGO                                   07140000
         MVC   TBGLN(L'TBGLN*6),STDPARM                                 07160000
         XC    PARML,PARML              INITT AREA WITH ZEROS  @AY14007 07170000
         LA    TWKREG1,RSTACK-(EDRSTK-BDRSTK)                           07180000
         ST    TWKREG1,RAVSP            POINTER                         07200000
         LA    TWKREG1,CSTK             CSTK POINTERS INITIALIZATION    07220000
         ST    TWKREG1,NRSTK                                            07240000
         ST    TWKREG1,BCSTK                                            07260000
         ST    TWKREG1,CSTKADR                                          07280000
         LA    TWKREG1,CSTKX                                            07300000
         ST    TWKREG1,NCSTK                                            07320000
         XC    ERRCNT(D5),ERRCNT                                        07340000
         LA    TWKREG1,ERRSTK           INITIALIZE ERROR MSG            07360000
         ST    TWKREG1,AERRSTK          STACK ADDRESS AND               07380000
         ST    TWKREG1,ESTKNDX          INDEX                           07400000
         MVC   DNTERR(ENDDNTL),SEVERR   INIT DSECT TO LOG ERRORS        07420000
         MVI   DERRCD,D0                INITIALIZE ERROR CODE TO ZERO   07440000
*                                                                       07460000
         JGETCORE DBL=63                                                07480000
         ST    PARAM1,DSTGBGN           SET STRING AREA POINTER         07500000
         LA    TWKREG1,MISTGL(,PARAM1)  GET STRING AREA LENGTH          07520000
         ST    TWKREG1,MINPUT           COMPUTEMI DATA POINTER          07540000
         ST    TWKREG1,MINPSTD          AND SAVE                        07560000
         ST    TWKREG1,MINPADJ          SAVE FOR ICTL          @OX07230 07570005
         LA    TWKREG2,STSTGL(,PARAM1)  COMPUTE OTHER DATA POINTER      07580000
         ST    TWKREG2,INPUT            AND                             07600000
         ST    TWKREG2,STNPSTD              SAVE                        07620000
         ST    TWKREG2,STNPADJ          SAVE FOR ICTL          @OX07230 07630005
         SR    TWKREG2,TWKREG1          COMPUTE DIFFERENCE              07640000
         STH   TWKREG2,MINDIF           BETWEEN MINPUT AND INPUT        07660000
         STH   TWKREG2,SVMINDIF         SAVE STANDARD BUFF DIF          07680000
         STH   TWKREG2,MINDFADJ         SAVE FOR ICTL          @OX07230 07690005
         LA    PARAM2,D0(PARAM1,PARAM2)                                 07700000
         ST    PARAM2,SVENDWKA          SAVE STANDARD WORK AREA END     07720000
         ST    PARAM2,ENDWKADJ          SAVE FOR ICTL          @OX07230 07730005
         ST    PARAM2,ENDWKA            END OF DATA AREA PLUS 1         07740000
         XC    JTBLTRT(L'JTBLTRT),JTBLTRT ZERO OUT TRT TABLE            07760000
         LM    BASE2,BASE1,USEBAS                                       07780000
         USING SETBAS,BASE1                                             07800000
SETBAS   EQU   *                                                        07840000
         JEXTRN (X1J01=DRUTENT)                                         07860000
         LA    RLAST,STACK              GET ADDR OF OPERATOR STACK      07880000
         ST    RLAST,SVLAST             AND SAVE IN MOVEABLE POINTER    07900000
         ST    RLAST,ALAST              AND ALSO AS STOPPER             07920000
         USING STACKREC,RLAST                                           07940000
         MVI   LASTOP,JTMSTRM           PUT EXPRESSION TERMINATOR WITH  07960000
         MVI   LASTBIND,HIBIND          BINDING FACTOR INTO STACK       07980000
         DROP  RLAST                                                    08000000
         SET   SFSTCD,ON                INDICATE FIRST CARD             08020000
         SET   SPGRMD,ON                INDICATE PROC'G PRG'R MACRO     08040000
         B     READNEXT                 GO TO READ NEXT STATEMENT       08060000
         USING IFNX1A30,BASE4                                           08080000
SEVERR   EQU   *                        MOVED TO COMMON FOR X1J ERRORS  08086000
         BAL   TLINK,NSNAPERR           LOG ERROR WITH SNAP SHOT        08092000
         DC    AL2(2)                   PADDING TO CALCULATE RETURN     08100000
         DC    AL1(SEV0)                SEVERITY CODE                   08120000
         DC    AL1(ERR0)                ERROR CODE                      08140000
         BR    RETURN                   RETURN TO CALLER                08160000
         USING CS2,BASE2                                                08170000
USEBAS   DC    A(CS2,SETBAS)                                            08180000
STDPARM  DC    A(0,71,56,0-1,8)         STANDARD ICTL PARAMS            08200000
F70      DC    A(70)                    COLUMN 71 DISPLACEMENT          08220000
         EJECT                                                          08240000
*********************************************************************** 08260000
*   READNEXT ROUTINE IS ENTERED EACH TIME A NEW STATEMENT IS TO BE      08280000
*   READ. ITS FUNCTION IS TO PROVIDE A LINKAGE TO INPUT CONTROL         08300000
*   ROUTINE.                                                            08320000
*********************************************************************** 08340000
READNEXT L     LINK,ARDSRC              POINT TO RDSRC                  08360000
         BALR  RETURN,LINK              LINK TO READ SOURCE ROUTINE     08380000
         DC    AL2(RFSTCRD-RFSTCRD)     READ FIRST CARD OF STATEMENT    08400000
         SET  SMISCN,OFF     RESET NO V.T. OUTPUT SWITCH                08410000
         GOIF  SINEOF,OFF=PROCIN        PROCEED IF NOT END OF FILE      08420000
         GOIF  SFSTCD,OFF=EOFRTN                                        08440000
NODATA   EQU   *                                                        08460000
         MVI   DDNDX1,PHASENT           SET UP INDEX FOR BR TO DIR RTN  08480000
         BAL   R3,DIR10                 ISSUE MESSAGES                  08500000
         L     BASE4,CS4ADDR            CHANGE BASE FOR CSECT 4         08520000
         L     LINK,APGRMAC             GET ADDR OF PGRMAC              08522000
         BR    LINK                     BR TO CLOSE FILES               08524000
PROCIN0  XC    JTRLI,JTRLI              CANCEL REC W/NO V.T.            08530000
PROCIN   EQU   *                                                        08540000
         BAL   RETURN,PUTLSIZ           GET O/P BUFFER                  08560000
         BAL   RETURN,HDINIT            INITIALIZE HEADER               08580000
         GOIF SMISCN,ON=PNXT12         GO PUT OUT PR ONLY RECORD        08590000
         EJECT                                                          08600000
*********************************************************************** 08620000
*   PROCNXT ROUTINE IS ENTERED EACH TIME A NEW STATEMENT IN THE         08640000
*   INPUT WORK BUFFER IS TO BE EDITED. IT CALLS GSCAN TO EDIT NAME      08660000
*   AND OPERATION FIELDS INTO OUTPUT BUFFER. IT THEN FANS OUT TO        08680000
*   OPERAND PROCESSORS BASED ON THE TYPES OF OPERATION CODE.            08700000
*   (THERE ARE THREE DISTINCTIVE GROUPINGS OF OPERATION CODES. THEY     08720000
*   ARE PROTOTYPE, MACRO INSTRUCTIONS, AND MACHINE/ASSEMBLER OPERATION  08740000
*   CODES.) COMMENTS STATEMENTS ARE EDITED AS COMMENTS FIELD IN         08760000
*   ASSEMBLER OP STATEMENTS.                                            08780000
*********************************************************************** 08800000
         SPACE 3                                                        08820000
PROCNXT  EQU   *                                                        08840000
PROCN01  EQU   *                                               @OY08021 08854005
         CLI   INPNAME,JBLANK           TEST IF THERE IS NAME FIELD     08860000
         BNE   PROCN10                  YES, THERE IS A NAME            08880000
PROCN02  EQU   *                                                        08900000
         BAL   TLINK,SKPBLK             GO FIND OP CODE                 08906000
         GOIF  SFSTCD,OFF=PNXT299       BR IF NOT FIRST CARD            08912000
PROCN05  EQU   *                                                        08920000
         GOIF  SNOFND,ON=NOICTL         BR IF OP CODE NOT FOUND         08960000
         CLC   D0(L'ICTLX,INPTR),ICTLX  TEST IF ICTL STATEMENT          08980000
         BNE   NOICTL                   BRANCH IF NOT ICTL              09000000
         GOIF  SNMFND,OFF=PROCN07       PROC ICTL IF NO NAME            09020000
         BAL   RETURN,NAMERR            NAME DISALLOWED ON ICTL         09040000
         B     PROCN07                  CONT TO PROCESS ICTL OPERAND    09060000
NOICTL   GOIF  SNMFND,ON=PNXT299        BR IF OP CODE NOT ICTL ON 1ST   09080000
         B     PNXT29                   NO NAME ON FIRST CARD, NON-ICTL 09100000
PROCN07  EQU   *                                                        09120000
         LA    INPTR,L'ICTLX(,INPTR)    BUMP OVER ICTL                  09140000
         ST    INPTR,FPTRSV             DUMMY UP SCAN RESULTS           09160000
         ST    INDEXP,OFPTRSV                                           09180000
         MVI   IOCID,IOCTYP+BIT1                                        09200000
         MVI   OCSAVE,JTICTL                                            09220000
         SET   JPSOP,ON                                                 09240000
         SET   SICTL,ON                 INDICATE ICTL STATEMENT         09260000
         B     TBLOPS                   GO PROCESS OPERAND              09280000
ICTLX    DS    0CL5                                                     09300000
         DC    AL1(JI,JC,JT,JL,JBLANK)  INTERNAL ICTL OP                09320000
         DS    0H                                                       09340000
PROCN10  EQU   *                                                        09360000
         CLI   INPNAME,JASTER           COMMENTS QUERY         @OX10364 09362005
         BE    PROCN15                  BR IF COMMENT CARD     @OX10364 09364005
         CLC   DOTSTAR,INPNAME          HIDENT COMMENT QUERY   @AZ10910 09366006
         BE    PROCN15                  BR IF SO               @AZ10910 09368006
         GOIF  SXMCRO,ON=SSEQ46         BR IF ERR IFO085       @OX07247 09370004
PROCN15  EQU   *                                               @OX10364 09372005
         GOIF  SFSTCD,OFF=PROCN20                                       09380000
         MVI   DDNDX1,PHASENT           SET UP INDEX FOR BR TO DIR RTN  09400000
         BAL   R3,DIR10                 INITIALIZE DIRECTORIES          09420000
PROCN20  EQU   *                                                        09440000
         CLI   INPNAME,JASTER           COULD IT BE COMMENTS STMT       09460000
         BE    PNXT11                   BRANCH IF YES                   09480000
         CLC   INPNAME(L'DOTSTAR),DOTSTAR                               09500000
         BNE   PNXT20                   BRANCH IF NOT COMMENTS AT ALL   09520000
         EJECT                                                          09540000
*****************************************                               09560000
*        EDIT COMMENTS STATEMENT        *                               09580000
*****************************************                               09600000
PNXT10   EQU   *                                                        09620000
         MVI   OCSAVE,JTHCMNT           VIRTUAL TEXT SUPPRESSION CTRL   09640000
         SET   SDTCMT,ON                INDICATE '.*' TYPE COMMENTS     09680000
         B     PNXT13                   BYPASS NEXT                     09686000
PNXT12   SET   SMISCN,OFF               RESET NO V.T. OUTPUT SWITCH     09692000
PNXT11   SET   STRCMT,ON                INDICATE '*' TYPE COMMENTS      09700000
         MVI   OCSAVE,JTCMNT            VIRTUAL TEXT SUPPRESSION CTRL   09720000
PNXT13   EQU   *                                                        09740000
         L     INPTR,ENDATA                                             09760000
         L     LINK,ARDSRC05            POINT TO RDSRC05                09780000
         BALR  RETURN,LINK              READ ALL CONTINUATIONS          09800000
         DC    AL2(RALLCNT-RFSTCRD)     READ ALL VALID CONTINUATIONS    09820000
         L     INPTR,INPUT                                              09840000
PNXT15   EQU   *                                               @OY08060 09850005
         MVC   JTFLGA(D4),PUTFLG        INSERT COMMENTS FLAGS AND IOC   09860000
         GOIF  SXPRTO,ON=BADPRTO        LOG ERROR IF EXPECTING PROTO    09880000
         CLI   OCSAVE,JTHCMNT           TEST IF .* TYPE COMMENT         09900000
         BNE   WRAPFLD                  BRANCH IF NOT                   09920000
         MVI   JTIOP1,JTHCMNT           INDICATE HIDDEN COMMENTS        09940000
         SET   JPRONLY,OFF              .* TYPE CMNT, RESET PRINT ONLY  09950000
         GOIF  SMDEF,ON=WRAPFLD         .* TYPE MUST BE IN MACRO DEF    09960000
         BAL   TLINK,ABSERR             '.*'-TYPE COMMENTS ARE          09980000
         DC    AL1(6*16+SEV17)          DISALLOWED IN OPEN CODE         10000000
         DC    AL1(ERR17)               LOG ERR AND STOP EDIT ON STMT   10020000
         EJECT                                                          10040000
PNXT20   EQU   *                                                        10060000
         SET   SNMFND,ON                INDICATE NAME FOUND             10080000
         SET   SENAME,ON                                                10100000
         SET   SKPNAME,ON               INDICATE SKIPPING NAME FIELD    10120000
         BAL   RETURN,GSCAN             SKIP NAME FIELD                 10140000
         SET   SKPNAME,OFF                                              10160000
         SET   SENAME,OFF                                               10180000
         B     PROCN02                  1ST CD HAS NAME, CK IF ICTL     10200000
         SPACE 3                                                        10300000
PNXT29   EQU   *                                                        10320000
         MVI   DDNDX1,PHASENT           SET UP INDEX FOR BR TO DIR RTN  10340000
         BAL   R3,DIR10                 INITIALIZE DIRECTORIES          10360000
         SPACE 3                                                        10380000
PNXT299  EQU   *                                                        10382000
         CLI   INPOP,JAMPER             IS OP CODE FIELD A V. S.        10384000
         BNE   PNXT30                   BR IF NOT VARIABLE SYMBOL       10386000
         GOIF  SPGRMD,OFF=PNXT30        BR IF NOT IN PRGR MACS          10388000
         GOIF  SMDEF,ON=PNXT30          BR IF IN MACRO DEF              10390000
         MVI   DDNDX1,OPENENT           SET TO INITIALIZE OPEN CODE     10392000
         BAL   R3,DIR10                 GO DO IT                        10394000
         SET   (SPGRMD,SOPNCD),FLIP     OUT OF PRGMR MACS, NOW OPEN CD  10396000
         EJECT                                                          10400000
*****************************************                               10420000
*        PROCESS OPERATION FIELD        *                               10440000
*****************************************                               10460000
PNXT30   EQU   *                                                        10480000
         SET   SEOPCD,ON                INDICATE EDITING OP CODE        10500000
         GOIF  SNOFND,ON=NOPCD          OP FIELD NOT FOUND, LOG ERROR   10540000
         BAL   RETURN,GSCAN             SCAN OPERATION FIELD            10560000
         LCR   TWKREG1,INDEXO           GET OUTPUT ABSOLUTE ADDRESS     10580000
         A     TWKREG1,OFPTRSV          COMPUTE RELATIVE ADDRESS        10600000
         STH   TWKREG1,JTOCP            INSERT OP CODE FIELD REL ADDR   10620000
         ST    INPTR,OPNDPTR            REMEMBER WHERE TO COME BACK     10640000
         C     R1,ENDATA                OP CODE MUST BE FOLLOWED BY BLK 10646000
         BNL   INVOP                    BR FOR ERROR IF NOT             10652000
         GOIF  (ROSYM,RVSYM),NONE=INVOP LOG ERROR IF INVALID            10660000
         GOIF  RVSYM,ON=PUTOC10         BRANCH IF OP CODE A V.S.        10680000
         TM    DERRCD,BITFF             TEST IF ERROR FOUND IN D RTN    10700000
         BZ    PUTOC20                  BRANCH IF NOT                   10720000
         MVI   OCSAVE,INVALV            ELSE, DUMMY UP INTERNAL OP      10740000
         SET   JPRONLY,ON               AND INDICATE PRINTONLY          10760000
         B     PUTOC40                  EDIT AS MACHINE OP              10780000
PUTOC10  EQU   *                                                        10800000
         MVI   IOCID,DMCHIN             DUMMY UP OP CODE ID AND         10820000
         B     PUTOC40                  EDIT AS MACHINE OP              10840000
PUTOC20  EQU   *                                                        10860000
         TM    IOCID,BIT0+BIT1          TEST IF MACRO CALL/PROTO        10880000
         BNZ   PUTOC25                  BRANCH IF NOT                   10900000
         SET   PROTOCAL,ON              ELSE, SO INDICATE               10920000
         B     PUTOC40                  AND BRANCH                      10940000
PUTOC25  EQU   *                                                        10960000
         L     PARAM2,OCPTRSV           RESTORE IOC POINTER             10980000
         MVC   JTFLGA,D0(PARAM2)        INSERT FLAGA BYTE FOR OP CODE   11000000
         IC    PARM,D1(,PARAM2)         PICK UP OP CODE BYTE ONE        11020000
         SLL   PARM,D8                  SHIFT TO 3RD BYTE IN PARM       11040000
         BM    PUTOC30                  BRANCH IF 1 BYTE OPCODE         11060000
         IC    PARM,D2(,PARAM2)         PICK UP OP CODE BYTE TWO        11080000
PUTOC30  EQU   *                                                        11100000
PUTOC35  EQU   *                                                        11120000
         STH   PARM,JTIOP               INSERT INTO E.T.                11140000
         GOIF  SXPRTO,OFF=PUTOC40       CAN'T BE PROTOTYPE IF HERE      11160000
         L     INPTR,INPUT              BACK UP TO BEGINNING OF FIELD   11180000
         BAL   RETURN,RESETPTR          RESET TEXT POINTERS             11200000
         B     BDPTO                    NOW, GO LOG ERROR               11220000
PUTOC40  EQU   *                                                        11240000
         SET   SEOPCD,OFF                                               11260000
         GOIF  SNMFND,ON=PNAME          EDIT NAME IF FOUND ONE          11280000
         MVI   GSUMRY,D0                ZERO OUT OP CODE FLAGS          11300000
         B     TBLOPS                   ELSE, EDIT OPERAND              11320000
         EJECT                                                          11340000
************************************                                    11360000
*        PROCESS NAME FIELD        *                                    11380000
************************************                                    11400000
PNAME    EQU   *                                                        11420000
         L     INPTR,INPUT              BACK TO EDIT NAME FIELD         11440000
         GOIF  (SKPMND,SKPEND),ANY=PNAME1    BYPASS NAME PROC ON ABORT  11460000
         SET   SENAME,ON                INDICATE EDITING NAME FIELD     11480000
         BAL   RETURN,GSCAN             YES, SCAN NAME FIELD            11500000
         ST    R15,NAML1                SAVE NAME FIELD LENGTH          11520000
         MVC   VSTAT(L'FLGBYT),FLGBYT   SAVE NAME FIELD V.S. STATUS     11540000
         LCR   TWKREG1,INDEXO           COMPUTE NAME FIELD POINTER      11560000
         A     TWKREG1,OFPTRSV                                          11580000
         STH   TWKREG1,JTNMP            AND ENTER IT                    11600000
         MVC   NAMBYT,GSUMRY            SAVE NAME STATUS IN CASE SS     11620000
         L     INPTR,OPNDPTR            RESTORE OPERAND POINTER         11640000
PNAME1   EQU   *                                                        11660000
         ST    INPTR,FPTRSV             AND SAVE                        11680000
         SET   SENAME,OFF                                               11700000
         B     TBLOPS                   GO EDIT OPERAND FIELD           11720000
         EJECT                                                          11740000
*********************************************************************** 11760000
*   MACINST ROUTINE IS ENTERED WHEN A 'MACRO INSTRUCTION' OR A PROTO-   11780000
*   TYPE STATEMENT IS ENCOUNTERED. (ANY OP CODE THAT CAN NOT BE FOUND   11800000
*   IN THE OP CODE TABLE IS ASSUMED A 'MACRO INSTRUCTION'.) THIS        11820000
*   ROUTINE IS ALSO CALLED BY THE PROTOTYPE SCANNER TO PROCESS KEYWORD  11840000
*   PARAMETER WITH A NORMAL VALUE. IT MAKES SYNTACTICAL SCANNING OF     11860000
*   OPERAND FIELDS, BUILDS EDITED TEXT RECORDS, OBTAINS THE NOTE/POINT  11880000
*   DATA OF THE ASSOCIATED MACRO DEFINITION EDITED TEXT, MAKES MACRO    11900000
*   NAME ENTRIES INTO MACRO NAME TABLE IS NOT PREVIOUSLY ENTERED,       11920000
*   AND MAKES OPERAND ENTRIES INTO ORDINARY SYMBOL REFERENCE DIRECTORY. 11940000
*********************************************************************** 11960000
         SPACE 3                                                        11980000
MACINST  EQU   *                                                        12000000
         SET   SEOPCD,OFF                                               12020000
         SET   SEOPND,ON                                                12040000
         MVI   GSUMRY,D0                ZERO OUT OP CODE FLAGS          12060000
         BAL   RETURN,STMTDSQ           STATEMENT SEQUENCING            12080000
         SET   JPSOP,ON                 INDICATE ASSEMBLER OP           12100000
         LA    R0,D1                    SET COLCTR AND CRDCTR           12120000
         ST    R0,COLCTR                TO 0 AND 1 RESPECTIVELY         12140000
         MVC   DTLENG(L'DTLENG),TSRCLN2 SET DATA LENGTH                 12160000
         XC    PRNLVL,PRNLVL            RESET PAREN LEVEL COUNT TO ZERO 12180000
         MVI   SWITCH6,D0               RESET SWITCHES                  12200000
         L     LINK,AMIPRTO             GET LINKAGE                     12220000
         BALR  RETURN,LINK              EDIT PROTO/M CALL               12240000
         SET   SMI,OFF                  SET OFF MI SWITCH               12260000
         SET   SEOPND,OFF                                               12280000
         SET   SMISCN,OFF               RESET NO V.T. SW.      @AX16038 12290000
         NI    JHWORD2+1,BITFF-(DMIENT) RESET SECOND DMIENT SW @AZ13722 12292000
         B     WRAPCNT                  THEN EXIT                       12300000
AMIPRTO  DC    A(MIPRTOIN)              ADDRESS OF MIPRTOIN             12320000
H1       DC    H'1'                     .                               12340000
H2       DC    H'2'                     .                               12360000
H3       DC    H'3'                     .                               12380000
H6       DC    H'6'                     .                               12400000
         DS    0F                                                       12420000
F7       DC    H'0'                     .                               12440000
H7       DC    H'7'                     .                               12460000
H63      DC    H'63'                    STD DBLE-WORD SIZE OF WORK AREA 12480000
H8       DC    H'8'                     .                               12500000
H10      DC    H'10'                    .                               12520000
H255     DC    H'255'                   .                               12540000
         EJECT                                                          12560000
*********************************************************************** 12580000
*   WRAPFLD ROUTINE IS ENTERED TO WRAP UP THE EDITING OF A STATEMENT    12600000
*   OR OPERAND WHEN END OF STATEMENT OR OPERAND IS REACHED. IT EDITS    12620000
*   COMMENTS FIELD, COMPUTES EDITED TEXT RECORD LENGTH, AND, IF NOT     12640000
*   SUPPRESSED, MAKES THE REMAINING DIRECTORY ENTRIES.                  12660000
*   CARDS, WITHIN A STATEMENT THAT ARE TO BE FLUSHED ARE FLUSHED, AND   12680000
*   ERROR RECORD BUILT FOR THE STATEMENT IS OUTPUT.                     12700000
*********************************************************************** 12720000
         SPACE 3                                                        12740000
WPOPND   EQU   *                                                        12760000
         MVI   D0(INDEXP),JBLANK        INSERT A BLANK FOR ASS SCANNER  12780000
         LA    INDEXP,D1(,INDEXP)       WHICH IS NOT INCLUDED IN THE   X12800000
                                        LENGTH COUNT IN JTOCP           12820000
WRAPFLD  EQU   *                                                        12840000
         L     RCNT,INPUT               BEGIN OF FIELD                  12860000
WRAPF1   EQU   *                                                        12880000
         TM    SWITCH4,(SPGRMD+SOPNCD)  IF PGMMAC OR OPEN CODE  OX04102 12890031
         BZ    EDTSTG1                  IF NOT- BRANCH          OX04102 12892031
         GOIF  SINCPY,ON=EDTSTG1        FLAG IS OFF THEN CHK    OX04102 12894031
         SET   JPRGICTL,ON              FOR COPY. USE PGM ICTL  OX04102 12896031
EDTSTG1  EQU   *                                                OX04102 12898031
         BAL   TLINK,SKPBLK             GO FIND COMMENTS FIELD          12900000
         GOIF  SNOFND,ON=EDTSTG         NO COMMENTS                     12920000
         ST    INPTR,FPTRSV             SAVE INPTR                      12940000
EDTCMT   EQU   *                        COMMENTS FIELD FOUND            12960000
         L     TWKREG2,ENDATA           UPPER LIMIT OF SCAN             12980000
EDTCMT1  EQU   *                                                        13000000
         BCTR  TWKREG2,0                ELIMINATE BLANKS FROM LAST COL. 13020000
         CLI   D0(TWKREG2),JBLANK       TO FIND END OF COMMENTS FIELD   13040000
         BE    EDTCMT1                  LOOP TO END OF COMMENTS         13060000
         LA    INPTR,D1(,TWKREG2)       SIMULATE SCAN RESULTS           13080000
         LCR   TWKREG1,INDEXO           COMPUTE RELATIVE ADDRESS OF     13100000
         AR    TWKREG1,INDEXP           COMMENTS FIELD IN TEXT          13120000
         STH   TWKREG1,JTCPR            STORE IN COMMENTS POINTER       13140000
         ST    BASE2,JFWORD2            SAVE CS3 BASE                   13160000
         L     BASE2,USEBAS             LOAD CS2 BASE                   13180000
         BAL   R12,VTPUT                EDIT COMMENTS FIELD             13200000
         L     BASE2,JFWORD2            RESTORE PREVIOUS BASE           13220000
EDTSTG   EQU   *                                                        13240000
         L     GSPTR,DSTGBGN            POINT TO BEGIN OF STRING AREA   13260000
         CLI   D0(GSPTR),D0             TEST IF NO STRING               13280000
         BE    EDTLEN                   BRANCH IF NO STRING             13300000
         LCR   TWKREG1,INDEXO           COMPUTE RELATIVE ADDRESS OF     13320000
         AR    TWKREG1,INDEXP           STRING FIELD                    13340000
         STH   TWKREG1,JTSPR            AND ENTER IT IN E.T.            13360000
         L     DSTGPTR,DSTGNDX          POINT TO END OF STRING AREA     13380000
         MVI   SCCNT,D0                 INDICATE END OF STRING          13400000
         SR    DSTGPTR,GSPTR            COMPUTE STRING AREA MOVE LENGTH 13420000
         BCTR  INDEXP,0                 BACK UP JTEXTA PTR              13440000
         EX    DSTGPTR,ETMOV            MOVE STRING TO TEXT             13460000
         LA    INDEXP,D2(DSTGPTR,INDEXP) BUMP POINTER                   13480000
*                                                                       13500000
EDTLEN   EQU   *                                                        13520000
         LR    TWKREG1,INDEXP           COMPUTE O/P TEXT LENGTH         13540000
         SR    TWKREG1,INDEXO                                           13560000
         STH   TWKREG1,JTRLI            STORE TRUE LENGTH IN TEXT       13580000
*        TO MAKE DEFINITION DIRECTORY ENTRY                             13600000
         CLI   SDENTR,D0                TEST IF TO MAKE DIR ENTRY       13620000
         BE    EDTLEN3                  NO                              13640000
         GOIF SMISCN,OFF=EDTLEN2        GO PUT OUT DIR ENTRY            13644000
         CLI   ERRCNT1,D0               NO V.T. TO BE OUTPUTTED SO      13648000
         BNE   WRRTN                     IF ERRORS, THEN NO DIR ENTRY   13652000
EDTLEN2  EQU   *                                                        13656000
         MVC   DDNDX1(D1),SDENTR        EST INDEX FOR BR INTO DIR RTN   13660000
         LM    PARM,PARAM2,NAMP         GET POINTERS                    13690000
         BAL   R3,DIRENT                MAKE D ENTRY                    13710000
         MVI   SDENTR,D0                SET OFF DEFINITION D-ENTRY SW   13720000
EDTLEN3  CLI   SDENTR1,D0               CHECK IF WXTRN/EXTRN OPERAND    13722000
         BE    WRRTN                    NO, THEN NO DIR ENTRY REQ       13724000
         MVC   DDNDX1(D1),SDENTR1       GET DIR ENTRY INDEX             13726000
         L     PARM,NAMP1               GET PTR TO OPERAND              13728400
         BAL   R3,DIRENT                GO MAKE O/SYMBOL DEFINITION     13730400
         MVI   SDENTR1,D0               CLEAR DIR INDEX BYTE            13732000
*                                                                       13740000
WRRTN    EQU   *                                                        13760000
         GOIF  SCTLRTN,ON=WRETURN       RETURN IF SO INDICATED          13780000
*                                                                       13800000
*                                                                       13820000
WRAPCNT  EQU   *                                                        13840000
         BAL   RETURN,WRAPERR           WRITE ERROR RECORD              13860000
         GOIF  SPRVCT,OFF=WREXIT        EXIT IF NO MORE CONT'N CARDS    13880000
         GOIF  SINEOF,ON=UNXPEOF        LOG ERROR IF END OF FILE        13900000
         LA    R11,SZCMT                GET BUFFER SIZE                 13920000
         BAL   RETURN,OPUTL             GET O/P BUFFER                  13940000
         L     LINK,ARDSRC              POINT TO RDSRC                  13960000
         BALR  RETURN,LINK              BYPASS ALL CONTINUATION CARDS   13980000
         DC    AL2(RBYPCNT-RFSTCRD)     BYPASS ONE CONTINUATION CARD    14000000
         GOIF  SINEOF,ON=UNXPEOF        LOG ERROR IF END OF FILE        14020000
         MVC   JTRLI(L'FXDHD),FXDHD     MOVE IN FIXED HEAD              14040000
         LA    INDEXP,D2(,INDEXP)       AND POINT OVER DUMMY FIELD      14060000
         SET   JNOCNT,ON                DO NOT ASSIGN STATEMENT NUMBER  14080000
         B     WRAPFLD                  GO PROCESS CONTINUED STATEMENT  14100000
*                                                                       14120000
WRAPERR  EQU   *                                                        14140000
         CLI   ERRCNT1,D0               TEST IF THERE ARE ERRORS        14160000
         BCR   BEQ,RETURN               RETURN IF NO                    14180000
         L     INDEXO,OUTADR            SET BASE               @AX11012 14182006
         GOIF SMISCN,ON=PROCIN0         PR ONLY RECORD TO BE FORCED     14190000
         SET   JERR,ON                  ELSE, INDIACTE MSG FOLLOWS      14220000
         CLI   JTIOP,JTEND              CHECK FOR GEN END       OX02976 14222031
         BNE   WRAPERR1                                         OX02976 14224031
         SET   (JDEF,JREF),ON                                   OX02976 14226031
WRAPERR1 EQU   *                                                        14230000
         ST    RETURN,EDTSVZ                                            14240000
         L     R4,AERRSTK               SET ADDRESSABILITY              14260000
         ST    R4,ESTKNDX               RESET INDEX                     14280000
         USING ERRMESS,R4                                               14300000
         LH    R3,ERRCNT                                                14320000
WERRLP   SR    R5,R5                                                    14340000
         IC    R5,ENTRYLNG              PICK UP ENTRY LENGTH            14360000
         LA    R11,JERRHL(R5)           COMPUTE LENGTH                  14380000
         JPUTL FILE=FILE1,BUFREQ=(R11)  GET O/P BUFFER                  14400000
         USING JERRCD,R11                                               14420000
         MVC   JEFLGA(L'ERRHDR),ERRHDR  MOVE HEADER                     14440000
         LA    R10,JERRHL(,R5)          COMPUTE RECORD LENGTH           14460000
         STH   R10,JERECL                                               14480000
         LA    R5,EMSGHL(,R5)                                           14500000
         EX    R5,MVERR                 MOVE MSG ENTRIES                14520000
         LA    R4,ERMEND(,R4)           BUMP DSECT BASE TO NEXT ERR MSG 14540000
         BCT   R3,WERRLP                DUMP NEXT ERROR MSG             14560000
         STH   R3,ERRCNT                CLEAR ERROR COUNT               14580000
         MVI   ERRSTK+2,D0                                              14600000
         L     RETURN,EDTSVZ                                            14620000
         BR    RETURN                   RETURN TO CALLER                14640000
MVERR    MVC   JESEV(0),EMSGSVTY        OFF-THE-LINE MOVE               14660000
         DROP  R4,R11                                                   14680000
         USING JTEXTA,INDEXP                                            14700000
ERRHDR   DS    0CL6                     ERROR RECORD HEADER             14720000
         DC    AL1(JPSOP)               ASSEMBLER OP                    14740000
         DC    AL1(JNOCNT)              DON'T COUNT STMT NUMBER         14760000
         DC    AL1(JTERROR)             INTERNAL OP                     14780000
         DC    AL1(0,0,0)               .                               14800000
EERRHDR  EQU   *                                                        14820000
         DS    0H                                                       14840000
         SPACE                                                          14860000
WREXIT   SET   (SFSTCD,SUPDNT),OFF      RESET SWITCHES                  14880000
         SET   (SNMFND,SNOFND,SDTCMT,STRCMT),OFF                        14900000
         SET   (SBYCNT,SBYONE),OFF      RESET SWITCHES                  14920000
         GOIF  SNOPND,OFF=READNEXT      BRANCH IF NO RETURN             14940000
         SPACE                                                          14960000
WRETURN  SET   (SNOPND,SCTLRTN),OFF                                     14980000
         L     RETURN,RTNSV             RESTORE RETURN POINT            15000000
         BR    RETURN                   RETURN TO CALLER                15020000
         EJECT                                                          16800000
         USING DCSTK,PARM                                               16940000
NOPCD    EQU   *                                                        16960000
         GOIF  SXMCRO,ON=SSEQ46         CLOSE M DEF IF EXP MAC  OX00095 16970003
         L     INPTR,INPUT              BACK UP TO BEGIN OF FIELD       16980000
         BAL   TLINK,ABSERR             OP CODE NOT FOUND IN 1ST CARD   17000000
         DC    AL1(SEV53)               .                               17020000
         DC    AL1(ERR53)               OP CODE NOT FOUND IN 1ST CARD   17040000
         B     WRAPFLD                  WRAP UP STMT                    17080000
RENTFULL EQU   *                                                        17100000
         BAL   TLINK,ABSERR             RSTACK FULL                     17120000
         DC    AL1(5*16+SEV46)          CLEANUP                         17140000
         DC    AL1(ERR46)               STMT COMPLEXITY EXCEEDED        17160000
ILGVS    EQU   *                                                        17180000
         L     INPTR,TPSAVE             BACK TO BEGIN OF FIELD FOR SNAP 17190000
         LA    R15,D1(,R15)             INCREASE LENGTH FOR &           17192000
         LR    R0,R1                    SAVE LENGTH                     17200000
         BAL   TLINK,SNAPERR            TAKE A SNAP SHOT                17220000
         DC    AL2(2)                   .                               17240000
         DC    AL1(4*16+SEV39)          CLN0                            17260000
         DC    AL1(ERR39)               TRY TO CONTINUE EDITING         17280000
INVSUBS  EQU   *                                                        17300000
         L     INPTR,TPSAVE1            BACK TO BEG OF SNAPFIEL OX00224 17310001
         BCTR  INPTR,D0                 BEGIN SNAP WITH LEFT PAREN      17315000
         GOIF  DMIENT,ON=INVSUBS1       ERROR FROM MI          @OX06626 17317004
         LR    R0,R1                    SAVE R1                @OY16256 17320000
         BAL   TLINK,SNAPERRL           TAKE A SNAP SHOT                17330000
         DC    AL2(2)                   .                               17340000
         DC    AL1(4*16+SEV37)                                 @OY16256 17350000
         DC    AL1(ERR37)               SUBSCRIPT ERROR                 17354000
INVSUBS1 GOIF  SUBLST,ON=INVSUBS2       BR IF ERROR IN SUBLIST @OZ26008 17358000
         LR    R0,R1                    SAVE R1                @OZ26008 17362000
         BAL   TLINK,SNAPERRL           TAKE A SNAPSHOT...     @OX06626 17366000
         DC    AL2(2)                   AND RETURN TO CLN0...  @OX06626 17370000
         DC    AL1(4*16+SEV37)          AFTER LOGGING...       @OZ26008 17374000
         DC    AL1(ERR37)               SUBSCRIPT ERROR        @OX06626 17378000
INVSUBS2 L     BASE3,AMIPRTO            RESTORE BASE REG       @OZ26008 17382000
         BAL   TLINK,SNAPERRL             SUBSCRIPT ERROR      @OZ26008 17386000
         DC    AL2(2)                                          @OX06626 17398804
         DC    AL1(10*16+SEV37)                                @OX06626 17399204
         DC    AL1(ERR37)                                      @OX06626 17399604
BADPRTO  EQU   *                                                        17400000
         BAL   TLINK,ABSERR             COMMENTS STMT FOUND             17420000
         DC    AL1(6*16+SEV87)          WHILE                           17440000
         DC    AL1(ERR87)               EXPECTING PROTOTYPE             17460000
INVOP    EQU    *                                                       17480000
         GOIF  SXMCRO,ON=SSEQ46         BR IF ERR IFO085       @OX07247 17490004
         L     INPTR,INPUT              GET END OF SCAN POINT           17500000
         BAL   RETURN,RESETPTR          RESET POINTERS                  17520000
         GOIF  SXPRTO,ON=BDPTO          BRANCH IF EXPECTING PROTO       17540000
         BAL   TLINK,ABSERR             LOG HARD ERROR                  17560000
         DC    AL1(6*16+SEV54)          WRAPFLD                         17580000
         DC    AL1(ERR54)               OP OCDE NOT O-SYM OR V-SYM      17600000
CSTKFULL EQU   *                                                        17620000
         BAL   TLINK,ABSERR             MORE THAN 5 LEVELS OF COPY CODE 17640000
         DC    AL1(2*16+SEV61)          AOPPTR                          17660000
         DC    AL1(ERR61)               CURRENT LIMIT IS 5 LEVELS       17680000
GLXERRZ  ST    INPTR,OPNDPTR                                            17700000
GLXE1    LA    INPTR,D1(,INPTR)                                         17720000
GLXERR   CLI   D0(INPTR),JCOMMA                                         17740000
         BE    GLXE2                    LOG ERROR WHEN FIND A COMMA     17760000
         CLI   D0(INPTR),JBLANK         OR A BLANK                      17780000
         BNE   GLXE1                    ELSE, KEEP LOOKING              17800000
GLXE2    LR    R15,INPTR                                                17820000
         LR    R0,INPTR                                                 17840000
         L     INPTR,OPNDPTR                                            17860000
         SR    R15,INPTR                                                17880000
         BNP   GLXE3                    MAKE SURE YOU GET A POS. VALUE  17890000
         BCTR  R15,0                    BACK UP 1                       17900000
GLXE3    BAL   TLINK,SNAPERR            LOG ERROR NOW                   17920000
         DC    AL2(1)                   .                               17940000
         DC    AL1(SEV29)               BAD DECLARATION                 17960000
         DC    AL1(ERR29)               BAD DECLARATION                 17980000
         LR    INPTR,R0                                                 18000000
         B     GLX10                    CHECK NEXT SYMBOL               18020000
NOPNDER  BAL   TLINK,ABSERR             THIS STMT SHOULD HAVE OPERAND   18040000
         DC    AL1(7*16+SEV62)          BUT -                           18060000
         DC    AL1(ERR62)               MISSING                         18080000
BDPTO    BAL   TLINK,ABSERR             THIS PROTOTYPE STMT             18100000
         DC    AL1(6*16+SEV43)          HAS AN ILLEGAL OP CODE          18120000
         DC    AL1(ERR43)               FORMAT                          18140000
ILDIM    ST    INPTR,OPNDPTR            SAVE THE BEGIN POINT            18146000
ILDIM1   LA    INPTR,D1(,INPTR)         BUMP UP TO THE NEXT CHARACTER   18152000
         CLI   D0(INPTR),JCOMMA         IS IT A COMMA                   18158000
         BE    ILDIM2                   YES, GO LOG ERR FOR THIS OPND   18164000
         CLI   D0(INPTR),JBLANK         WHAT ABOUT A BLANK              18170000
         BNE   ILDIM1                   NO, LOOP UNTIL FIND TERMINATOR  18176000
ILDIM2   LR    R15,INPTR                GET THE END POINT               18182000
         LR    INPTR,TRTN               GET THE BEGIN POINT             18188000
         LR    TRTN,R15                 SAVE FOR CLEANUP ROUTINE        18194000
         SR    R15,INPTR                CALCULATE LENGTH OF THIS OPND   18200000
         BCTR  INPTR,D0                 BEGIN SNAP WITH LEFT PAREN      18206000
         BAL   TLINK,SNAPERR            TAKE A SNAP SHOT                18220000
         DC    AL2(2)                   .                               18240000
         DC    AL1(4*16+SEV30)          (CLN0)  OR                      18260000
         DC    AL1(ERR30)               EXCEEDS 10 DSDT DIGITS          18280000
HIDIM    XR    INPTR,TRTN               SAVE INPTR AND BACK UP          18300000
         XR    TRTN,INPTR               TO THE LOCATION AT TRTN         18320000
         XR    INPTR,TRTN                                               18340000
         LR    R3,PARM                  SAVE WHERE SYMBOL STARTS        18360000
         STH   PARAM2,JHWORD1           SAVE SYMBOL LENGTH              18362000
         BCTR  TWKREG2,D0               ADJUST MOVE LENGTH OF DIMENSION 18364000
         BAL   TLINK,SNAPERR            TAKE A SNAP OF DIMENSION        18366000
         DC    AL2(2)                   ERROR--                         18368000
         DC    AL1(SEV30)               DIMENSION                       18370000
         DC    AL1(ERR30)               TOO LARGE                       18372000
         LR    PARM,R3                  RESTORE -WHERE IT'S AT-         18380000
         LH    PARAM2,JHWORD1           RESTORE SYMBOL LENGTH           18400000
         MVC   JHWORD1(L'H32K),H32K                                     18420000
         LR    INPTR,TRTN                                               18440000
         B     VSDNDX                   CONTINUE EDITING                18460000
ILGLXP   EQU   *                                                        18480000
         BAL   TLINK,SNAPERR            TAKE A SNAP SHOT                18500000
         DC    AL2(1)                   .                               18520000
         DC    AL1(5*16+SEV33)          CLEANUP                         18540000
         DC    AL1(ERR33)               IN SET STATEMENT                18560000
ILSETA   BAL   TLINK,ABSERR             BOOLEAN EXPRESSION              18640000
         DC    AL1(5*16+SEV59)          NOT ALLOWED IN                  18660000
         DC    AL1(ERR59)               SETA EXPRESSION                 18680000
ILUNARY  EQU   *                                                        18700000
         BAL   TLINK,ABSERR             INVALID UNARY OPERATOR          18720000
         DC    AL1(5*16+SEV52)          CLEANUP                         18740000
         DC    AL1(ERR52)               UNARY OPERATOR NOT + OR -       18760000
INVDUP   EQU   *                                                        18780000
         BAL   TLINK,SNAPERRL           GO PUT OUT SNAP SHOT            18800000
         DC    AL2(1)                   PADDING TO CALCULATE RETURN     18820000
         DC    AL1(5*16+SEV57)          NOT TERMINATED BY               18840000
         DC    AL1(ERR57)               RIGHT PAREN                     18860000
INVSUB   BAL   TLINK,ABSERR             INVALID SUBSTRING NOTATION      18880000
         DC    AL1(5*16+SEV70)          CLEANUP                         18900000
         DC    AL1(ERR70)               NOT TERMINATED BY , AND )       18920000
NOQUOTE  BAL   TLINK,ABSERR             SETC EXPRESSION                 18940000
         DC    AL1(5*16+SEV58)          CLEANUP                         18960000
         DC    AL1(ERR58)               TERMINATED BY A QUOTE           18980000
INVFM    EQU   *                                                        19080000
         BAL   TLINK,SNAPERRL           TAKE 8 CHAR SNAP SHOT           19100000
         DC    AL2(1)                   .                               19120000
         DC    AL1(5*16+SEV32)          CLEANUP                         19140000
         DC    AL1(ERR32)               .                               19160000
ILATTR   L     INPTR,TPSAVE             BACK TO BEGIN PT FOR SNAP SHOT  19180000
         MVI   ATTRSV,D0                RESET ATTRIBUTE INDICATOR       19200000
         BAL   TLINK,SNAPERRL           TAKE A SNAP SHOT                19220000
         DC    AL2(1)                   TO CALCULATE BR TO ABSOLUTE ERR 19240000
         DC    AL1(5*16+SEV36)          CLEANUP                         19260000
         DC    AL1(ERR36)               .                               19280000
ILSETX   EQU   INVFM                                                    19300000
ILSETNM  BAL   TLINK,ABSERR             ILLEGAL NAME IN SET STMT        19320000
         DC    AL1(SEV31)               .                               19340000
         DC    AL1(ERR31)               NOT V-SYM OR V-SYM WRONG TYPE   19360000
         B     AOPXIT                   STOP EDIT ON THIS ERROR         19380000
NAMERR   EQU   *                                                        19400000
         BAL   TLINK,WRNERR             INVALID NAME DETECTED           19420000
         DC    AL1(SEV16)               GO LOG ERROR AND RETURN TO      19440000
         DC    AL1(ERR16)               CONTINUE PROC STATEMENT         19460000
         SET   JSUBNAME,OFF             SUB NOT REQ'D IF NAME WAS V.S.  19470000
         SET   JNMERR,ON                INDICATE NAME ERROR             19480000
         MVI   SDENTR,D0                INSURE NO DIR ENTRY ON NAME ERR 19500000
         BR    RETURN                   RETURN TO CALLER                19520000
ILBXP    BAL   TLINK,ABSERR             INVALID EXPRESSION IN SETB      19540000
         DC    AL1(5*16+SEV21)          STATEMENT                       19560000
         DC    AL1(ERR21)               .                               19580000
ILSDT    EQU   *                                                        19600000
         SR    R15,INPTR                SET LENGTH FOR SNAP             19610000
         L     INPTR,TPSAVE             BACK TO BEGIN PT FOR SNAP SHOT  19620000
         LR    R15,INPTR                GET TERMINATOR ADDR             19630000
         BAL   TLINK,SNAPERR            TAKE A SNAP SHOT                19640000
         DC    AL2(1)                   .                               19660000
         DC    AL1(5*16+SEV38)          CLEANUP                         19680000
         DC    AL1(ERR38)               .                               19700000
         EJECT                                                          19710000
*********************************************************************** 19720000
*                                                                       19730000
* CHANGE BASE REGISTER BEFORE ENTERING THE FOURTH CSECT                 19740000
*                                                                       19750000
*********************************************************************** 19760000
SNAPERRL LA    R15,D7                   SET UP TO DUMP 8 BYTES          19770000
SNAPERR  L     LINK,ASNAPERR            GET ROUTINE ADDR                19775000
         B     SAVOLD                   SAVE OLD FIRST                  19780000
*                                                                       19785000
ABSERR   L     LINK,AABSERR             GET ROUTINE ADDR                19790000
         B     SAVOLD                   SAVE OLD FIRST                  19795000
*                                                                       19800000
WRNERR   L     LINK,AWRNERR             GET ROUTINE ADDR                19805000
         B     SAVOLD                   SAVE OLD FIRST                  19810000
*                                                                       19815000
UNXPEOF  L     LINK,AUNXPEOF            GET ROUTINE ADDR                19820000
         B     GOCSECT4                 GO CHANGE BASE                  19825000
*                                                                       19830000
EOFRTN   L     LINK,AEOFRTN             GET ROUTINE ADDR                19835000
         B     GOCSECT4                 GO CHANGE BASE                  19840000
*                                                                       19845000
DIR10    L     LINK,ADIR10              GET ROUTINE ADDR                19850000
         B     SAVOLD                   SAVE OLD FIRST                  19855000
*                                                                       19860000
DIRENT   L     LINK,ADIRENT             GET ROUTINE ADDR                19865000
*                                                                       19870000
SAVOLD   ST    BASE2,REGSAVE3           SAVE OLD BASE                   19875000
GOCSECT4 L     BASE4,CS4ADDR            CHANGE BASE FOR CSECT4          19880000
         BR    LINK                     NOW ENTER ROUTINE               19885000
         SPACE 3                                                        19890000
***************                                                         19900000
         DS    0F                                                       19910000
CS2ADDR  DC    A(CS2)                   ADDR OF CSECT 2                 19920000
CS4ADDR  DC    A(CS4)                   ADDR OF CSECT 4                 19930000
ADIRENT  DC    A(NDIRENT)               ADDR OF DIRENT                  19940000
ADIR10   DC    A(NDIR10)                ADDR OF DIR10                   19950000
AUNXPEOF DC    A(NUNXPEOF)              ADDR OF UNXPEOF                 19960000
AEOFRTN  DC    A(NEOFRTN)               ADDR OF EOFRTN                  19970000
AESYSMAC DC    A(ESYSMAC)               ADDR OF ESYSMAC                 19980000
APGRMAC  DC    A(PGRMAC)                ADDR OF PGRMAC                  19990000
ASVCTLFM DC    A(SVCTLFM)               ADDR OF SVCTLFM                 20000000
ACSTKEXT DC    A(CSTKEXT)               ADDR OF CSTKEXT                 20010000
ASNAPERR DC    A(NSNAPERR)              ADDR OF SNAPERR                 20210000
AABSERR  DC    A(NABSERR)               ADDR OF ABSERR                  20410000
AWRNERR  DC    A(NWRNERR)               ADDR OF WRNERR                  20610000
         EJECT                                                          21040000
****************************************                                21060000
*   POSTFIXER ENTRY ROUTINE                                             21080000
*   AT ENTRY REG 10 (PARM) CONTAINS THE OPERATOR TO BE LOGGED           21100000
*   LINKAGE IS    BAL   R3,PFXRENT                                      21120000
*                 BAL   R3,PFXRE2                                       21140000
****************************************                                21160000
         SPACE 3                                                        21180000
         JEXTRN (X1S01=PFIXRN)                                          21200000
PFXRENT  EQU   *                                                        21220000
         LH    PARM,D0(,R3)             GET OPERATOR                    21240000
         AH    R3,H2                    ADJUST RETURN ADDRESS           21260000
PFXRE2   STM   R15,R3,EDTSVZ            SAVE REGISTERS                  21280000
         L     LINK,ADPSTR              LOCATE P-FXR ENTRY POINT        21300000
         BALR  RETURN,LINK              MAKE ENTRY                      21320000
         B     RENTFULL                 STACK OVERFLOW IF RETURN HERE   21340000
         LA    INPTR,D1(,INPTR)         UPDATE POINTER                  21360000
         LM    R15,R3,EDTSVZ            RESTORE REGISTERS               21380000
         BR    R3                       RETURN TO CALLER                21400000
ADPSTR   DC    A(PFIXRN)                POSTFIXER ENTRY POINT           21420000
         EJECT                                                          21440000
*   SYMSCN EDITS ORDINARY SYMBOLS INTO EDITED TEXT                      21460000
*   LINKAGE IS     BAL LINK,SYMSCN                                      21480000
*   NORMAL EXIT IS     B    D4(,LINK)                                   21500000
*   ERROR EXIT IS      BR   LINK                                        21520000
         SPACE 3                                                        21540000
SYMSCN   EQU   *                                                        21560000
         ST    LINK,EDTSVY              SAVE RETURN LINKAGE             21580000
         L     LINK,ATRTEST             PT TO TRTEST                    21600000
         BALR  RETURN,LINK              GO TRT SYMBOL                   21620000
         L     LINK,EDTSVY                                              21640000
         BCTR  R3,LINK                  ERROR IF NOT O-SYM              21660000
SYMSCN1  EQU   *                                                        21680000
         ST    LINK,EDTSVY              MAKE SURE RTN LNKAGE IS SAVED   21700000
         CH    R15,H7                   AND LENGTH MUST BE LE 8         21720000
         BCR   BHI,LINK                 RETURN IF GT 8 - ERROR          21740000
         TM    ATTRSV,ATK               N' OR K' FOLLOWED BY O-SYM      21760000
         BCR   BONE,LINK                IS ERROR                        21780000
         MVI   DDNDX1,ORDSYMBR          ORDINARY SYMBOL REF INDEX       21800000
         LR    PARM,INPTR               POINT TO SYMBOL                 21820000
         LR    PARAM2,TWKREG2           GET ITS LENGTH                  21850000
         BAL   R3,DIRENT                LOG ORDINARY SYMBOL             21870000
         L     LINK,EDTSVY              RESTORE RETURN LINKAGE          21880000
         LR    INPTR,R1                 BUMP POINTER                    21900000
         B     D4(,LINK)                RETURN TO CALLER                21920000
         EJECT                                                          21940000
****************************************                                21960000
*   PAREN COUNT - INCREMENTAL - MAX HALF WORD                           21980000
*   LINKAGE IS    BAL   R12,APARCT                                      22000000
****************************************                                22020000
APARCT   EQU   *                                                        22040000
         LH    RCNT,PRNLVL              GET CURRENT COUNT               22060000
         AH    RCNT,H1                  ADD ONE                         22080000
         STH   RCNT,PRNLVL              AND SAVE                        22100000
         BR    R12                      RETURN TO CALLER                22120000
         SPACE 3                                                        22140000
****************************************                                22160000
*   PAREN COUNT - DECREMENTAL -                                         22180000
*   LINKAGE IS    BAL   R12,DPARCT                                      22200000
****************************************                                22220000
DPARCT   EQU   *                                                        22240000
         LH    RCNT,PRNLVL              GET CURRENT COUNT               22260000
         SH    RCNT,H1                  SUBTRACT ONE                    22280000
         STH   RCNT,PRNLVL              AND SAVE                        22300000
         BR    R12                      RETURN TO CALLER                22320000
         EJECT                                                          22340000
*********************************************************************** 22360000
*   TBLOPS  ROUTINE IS ENTERED  WHEN A STATEMENT OTHER THAN MACRO       22380000
*   INSTRUCTION OR PROTOTYPE IS READ. THIS ROUTINE FURTHER CLASSIFIES   22400000
*   ASSEMBLER OP STATEMENTS FROM MACHINE OP STATEMENTS. ALL MACHINE     22420000
*   OP STATEMENTS ARE UNIQUELY EDITED BY ONE SUBROUTINE, WHILE          22440000
*   ASSEMBLER OP STATEMENTS ARE FANNED OUT TO THE APPROPRIATE           22460000
*   SUBROUTINES BASED ON OP CODES. EDITED TEXT RECORDS ARE PARTIALLY    22480000
*   BUILT, AND POSSIBLE DIRECTORY ENTRIES ARE MADE. IN MOST CASES,      22500000
*   PROCESS GOES TO 'WRAPFLD' ROUTINE WHERE THE BUILDING OF THE         22520000
*   EDITED TEXT RECORD IS COMPLETED. AT END OF EDITING A MACRO          22540000
*   DEFINITION, DIRECTORY ROUTINE, 'MACREND', IS CALLED TO CLOSE OUT    22560000
*   SOME DIRECTORIES. AT THE END OF EDITING OPEN CODE, DIRECTORY        22580000
*   ROUTINE, 'OPENEND', IS  CALLED TO CLOSE OUT SOME DIRECTORIES, AND   22600000
*   TO INITIALIZE THE PHASE FOR SYSTEM MACRO EDITING. WHEN ALL          22620000
*   SYSTEM MACROS ENCOUNTERED ARE EDITED. DIRECTORY ROUTINE, 'PHASEND', 22640000
*   IS CALLED. ALL DIRECTORIES THAT HAVE NOT BEEN CLOSED ARE CLOSED.    22660000
*   CONTROL RETURNS TO CONTROLLER.                                      22680000
*********************************************************************** 22700000
*        PROCESS OPERAND FIELD        *                                 22720000
***************************************                                 22740000
         SPACE 3                                                        22760000
TBLOPS   EQU   *                        EDIT OPERAND FIELD              22780000
         TM    IOCID,BIT0+BIT1          TEST IF MACRO CALL/PROTO        22800000
         BZ    MACINST                  EDIT PARAM IF YES               22820000
         SET   SEOPND,ON                                                22840000
         L     INPTR,ENDATA             GET END OF DATA FIELD           22860000
         L     LINK,ARDSRC05            PT TO RDSRC05                   22880000
         BALR  RETURN,LINK              READ ALL CONTINUATIONS          22900000
         DC    AL2(RALLCNT-RFSTCRD)     READ ALL VALID CONTINUATIONS    22920000
         L     INPTR,FPTRSV             BUMP POINTER                    22940000
         BAL   TLINK,SKPBLK             GO FIND OPERAND FIELD           22960000
         TM    IOCID,IOCTYP             TEST IF ASSEMBLER OP            22980000
         BNO   MCHINS                   BRANCH IF MACHINE OP            23000000
         SR    TWKREG1,TWKREG1                                          23020000
         IC    TWKREG1,OCSAVE           GET INTERNAL OP BEFORE YOU GO   23040000
         BAL   RETURN,STMTSEQ           STATEMENT SEQUENCING            23060000
         GOIF  JPRONLY,ON=INVALID       BRANCH IF SEQ'G ERROR FOUND     23080000
ASSMOP   EQU   *                                                        23100000
         SR    CGOTO,CGOTO                                              23120000
         IC    CGOTO,OCSAVE             GET OP CODE                     23140000
         AR    CGOTO,CGOTO              DOUBLE THE VALUE                23160000
         LH    CGOTO,AOPTBL(CGOTO)      COMPUTE BRANCH ADDRESS          23180000
         B     SETBAS(CGOTO)            GO TO PROCESS ASSEMBLER OP      23200000
AOPPTRS  ST    RETURN,RTNSV             SAVE RETURN LINKAGE             23220000
AOPPTR   LCR   R14,INDEXO               COMPUTE FIELD POINTER           23240000
         A     R14,OFPTRSV                                              23260000
         STH   R14,JTOPP                AND SAVE                        23280000
         SET   SEOPND,OFF                                               23300000
         B     WPOPND                   GO EDIT COMMENTS                23320000
SAVPTR   ST    RETURN,RTNSV             SAVE RETURN ADDRESS             23340000
AOPXIT   SET   SEOPND,OFF                                               23360000
         B     WRAPFLD                  GO EDIT COMMENTS                23380000
         EJECT                                                          23400000
*******************************************                             23420000
*        ASSEMBLER OP BRANCH TABLE        *                             23440000
*******************************************                             23460000
         TBLGEN (ICTL,                                                 X23480000
               ISEQ,                                                   X23500000
               COPY,                                                   X23520000
               OPSYN,                                                  X23540000
               ANOP,                                                   X23560000
               GBLA,                                                   X23580000
               GBLB,                                                   X23600000
               GBLC,                                                   X23620000
               LCLA,                                                   X23640000
               LCLB,                                                   X23660000
               LCLC,                                                   X23680000
               MACRO,                                                  X23700000
               ACTR,                                                   X23720000
               AGO,                                                    X23740000
               AIF,                                                    X23760000
               SETA,                                                   X23780000
               SETB,                                                   X23800000
               SETC,                                                   X23820000
               MEXIT,                                                  X23840000
               MEND,                                                   X23860000
               END,                                                    X23880000
               DXD,                                                    X23900000
               EQU,                                                    X23920000
               ORG,                                                    X23940000
               CNOP,                                                   X23960000
               CCW,                                                    X23980000
               DC,                                                     X24000000
               DS,                                                     X24020000
               START,                                                  X24040000
               CSECT,                                                  X24060000
               DSECT,                                                  X24080000
               COM,                                                    X24100000
               ENTRY,                                                  X24120000
               EXTRN,                                                  X24140000
               WXTRN,                                                  X24160000
               CXD,                                                    X24180000
               LTORG,                                                  X24200000
               PUNCH,                                                  X24220000
               REPRO,                                                  X24240000
               PUSH,                                                   X24260000
               POP,                                                    X24280000
               PRINT,                                                  X24300000
               USING,                                                  X24320000
               DROP,                                                   X24340000
               SPACE,                                                  X24360000
               EJECT,                                                  X24380000
               TITLE,                                                  X24400000
               MNOTE,                                                  X24420000
               INVALID),,                                              X24440000
               AOPTBL,,2,SETBAS                                         24460000
         EJECT                                                          24480000
ICTL     EQU   *                                                        24500000
****                                    OPERAND EDITED AS COMMENTS      24520000
         SET   SICTL,OFF                                                24540000
         SET   JPRONLY,ON               INDICATE PRINT ONLY             24560000
         ST    INPTR,OPNDPTR                                            24580000
         L     INPTR,INPUT              RESET POINTER                   24600000
         SET   SCTLRTN,ON               ELSE, INDICATE TO RETURN        24620000
         GOIF  SNOFND,ON=BADI           LOG ERROR IF NO OPERAND         24640000
         BAL   RETURN,SAVPTR            SAVE RET ADDR AND WRAP UP STMT  24660000
         L     INPTR,OPNDPTR            GET OPERAND POINTER             24680000
         SET   SFSTCD,OFF               ICTL NO LONGER ALLOWED          24700000
*                                                                       24720000
         BAL   RETURN,DSCAN             SCAN FIRST OPERAND              24740000
         B     BADICTL                  INVALID OPERAND FOUND           24760000
         LTR   TWKREG1,TWKREG1          TEST IF VALUE BETWEEN 1 AND 40  24780000
         BNH   BADICTL                  VALUE EQ 0 - ERROR              24800000
         CH    TWKREG1,H40                                              24820000
         BH    BADICTL                  VALUE GT 40 - ERROR             24840000
         BCTR  TWKREG1,0                BACK UP 1                       24860000
         ST    TWKREG1,TBGLN            SAVE NEW STRING LENGTH          24880000
         ST    TWKREG1,JBEGCL           SAVE NEW BEGIN COLUMN - 1       24900000
         BCTR  TWKREG1,0                BACK UP 1                       24920000
         ST    TWKREG1,PBGLEN           SAVE PRE-BEGIN LENGTH - 1       24940000
         CLI   D0(INPTR),JCOMMA         TEST IF MORE OPERAND            24960000
         BE    CTL10                    YES.                            24980000
         L     TWKREG1,CONTCHR          NO, INSERT STD END COLUMN       25000000
         B     CTL15                    CONTINUE                        25020000
CTL10    EQU   *                                                        25040000
         BAL   RETURN,DSCAN1            SCAN SECOND OPERAND             25060000
         B     BADICTL                  INVALID OPERAND FOUND           25080000
         CH    TWKREG1,H40              TEST VALUE BETEEEN 41 AND 80    25100000
         BNH   BADICTL                  VALUE LESS THEN 41. ERROR       25120000
         CH    TWKREG1,H80                                              25140000
         BH    BADICTL                  VALUE GREATER THAN 80. ERROR    25160000
         BL    CTL15                    BRANCH IF ALLOW CONT'N          25180000
         SET   SNOCNT,ON                ELSE, SAY NO CONT'N             25200000
CTL15    EQU   *                                                        25220000
         ST    TWKREG1,JCTCHR           SAVE CONT. CHR. COLUMN          25240000
         LA    WORK2,CRDLN-1            COMPUTE POSTEND STRING LENGTH-1 25260000
         SR    WORK2,TWKREG1                                            25280000
         ST    WORK2,PNDLEN                                             25300000
         BCTR  TWKREG1,0                BACK UP 1                       25320000
         ST    TWKREG1,ENDCOL           SAVE NEW END COLUMN             25340000
CTL20    S     TWKREG1,PBGLEN           COMPUTE SOURCE LENGTH WHICH     25360000
         CH    TWKREG1,H6               MUST BE GE 5 TO BE ABLE TO      25380000
         BL    BADICTL                  HOLD GENERATED ' END  '         25400000
         ST    TWKREG1,TSRCLN           STORE NEW SOURCE LENGTH         25420000
         LR    WORK2,TWKREG1            SAVE LENGTH                     25440000
         BCTR  TWKREG1,0                DECR BY 1                       25460000
         ST    TWKREG1,JSRCLN           STORE NEW SRC LENGTH MINUS 1    25480000
         CLI   D0(INPTR),JCOMMA         TEST IF MORE OPERAND            25500000
         BNE   CTL40                    BRANCH IF NO MORE OPERAND       25520000
         GOIF  SNOCNT,ON=BADICTL        BRANCH IF NO CONT'N ALLOWED     25540000
         BAL   RETURN,DSCAN1            SCAN THIRD OPERAND              25560000
         B     BADICTL                  INVALID OPERAND FOUND           25580000
         CH    TWKREG1,H40                                              25600000
         BH    BADICTL                  VALUE MUST BE                   25620000
         BCTR  TWKREG1,0                BETWEEN BEGCOL+1 AND 40         25640000
         C     TWKREG1,JBEGCL           ELSE ....                       25660000
         BNH   BADICTL                  ERROR                           25680000
CTL30    EQU   *                                                        25700000
         ST    TWKREG1,JCTBGN           SAVE CONTINUATION BEGIN         25720000
         BCTR  TWKREG1,0                BACK UP 1                       25740000
         LCR   TWKREG1,TWKREG1                                          25760000
         A     TWKREG1,ENDCOL                                           25780000
         ST    TWKREG1,TCNTLN           STORE CONTINUATION LENGTH       25800000
         BCTR  TWKREG1,0                DECR BY 1                       25820000
         ST    TWKREG1,JCTLN            STORE CONT. LENGTH MINUS 1      25840000
         CLI   D0(INPTR),JBLANK         BLANK IS GOOD TERMINATOR        25860000
          BE    CTLX                    IT IS.                          25880000
         C     INPTR,ENDATA             ELSE, ENDATA MUST TERMINATE     25900000
         BL    BADICTL                  BAD TERMINATOR                  25920000
CTLX     SR    PARAM1,PARAM1                                            25940000
         LA    PARAM2,MAXCNT                                            25960000
         DR    PARAM1,TWKREG1                                           25980000
         MR    PARAM1,TWKREG1                                           26000000
         LA    PARAM1,D1(WORK2,PARAM2)                                  26020000
         LA    TWKREG2,CRDLN                                            26040000
         SR    TWKREG2,TWKREG1                                          26060000
         LA    PARAM2,D6+D7(TWKREG2,PARAM1)                             26080000
         SR    PARAM1,PARAM1                                            26100000
         LA    TWKREG1,D8                                               26120000
         DR    PARAM1,TWKREG1                                           26140000
         L     PARAM1,DSTGBGN                                           26160000
         LR    INPTR,PARAM2                                             26180000
         CH    PARAM2,H63               ACTUAL DATA AREA SIZE W/STD     26200000
         BNL   FRECORE                  IF GE STD, ASSIGN ACTUAL DW VAL 26220000
         LH    INPTR,H63                ASSIGN STANDARD SIZE IF LOWER   26240000
FRECORE  EQU   *                                                        26260000
         JFRECORE  ADDR=(PARAM1)                                        26280000
GETCORE  EQU   *                                                        26300000
         JGETCORE DBL=(INPTR)                                           26320000
         ST    PARAM1,DSTGBGN                                           26340000
         LA    TWKREG1,D0(PARAM1,PARAM2)                                26360000
         ST    TWKREG1,ENDWKA           SAVE END OF BUFFER POINTER      26380000
         ST    TWKREG1,ENDWKADJ         SAVE 'ENDWKA'          @OX07230 26390005
         LA    PARAM2,CRDLN             CARD LENGTH MINUS               26400000
         S     PARAM2,TCNTLN            CONTINUATION DATA LENGTH        26420000
         LA    TWKREG1,MISTGP(PARAM1,PARAM2) ONE CARD STG AREA LENGTH   26440000
         ST    TWKREG1,MINPADJ                                          26460000
         ST    TWKREG1,MINPUT                                           26480000
         SLL   PARAM2,D1                COMPUTE NORMAL STRING AREA      26500000
         LA    TWKREG2,CRDLN            COMPUTE INPUT POINTER           26520000
         S     TWKREG2,TSRCLN                                           26540000
         LA    TWKREG2,STSTGP(TWKREG2,PARAM2)                           26560000
         LA    TWKREG2,D0(TWKREG2,PARAM1)                               26580000
         ST    TWKREG2,STNPADJ                                          26600000
         ST    TWKREG2,INPUT                                            26620000
         SR    TWKREG2,TWKREG1          COMPUTE DIF B/                  26640000
         STH   TWKREG2,MINDIF           MINPUT AND INPUT                26660000
         STH   TWKREG2,MINDFADJ         SAVE 'MINDIF'          @OX07230 26670005
ICTLOUT  EQU   *                                                        26680000
         MVI   DDNDX1,PHASENT           SET UP INDEX FOR BR TO DIR RTN  26700000
         BAL   R3,DIR10                 INITIALIZE DIRECTORIES          26720000
         B     WRAPCNT                  EDIT COMMENTS                   26740000
*                                                                       26760000
BADI     EQU   *                                                        26780000
         BAL   RETURN,SAVPTR            OUTPUT PRINT-ONLY RECORD        26800000
         BAL   TLINK,ABSERR             LOG ERROR                       26820000
         DC    AL1(SEV48)               .                               26840000
         DC    AL1(ERR48)               ICTL OPERAND NOT FOUND          26860000
BADIX    EQU   *                                                        26880000
         MVI   DDNDX1,PHASENT           SET UP INDEX FOR BR TO DIR RTN  26900000
         BAL   R3,DIR10                 INITIALIZE DIRECTORIES          26920000
         SET   (SPGRMD,SOPNCD,SKPEND),FLIP                              26940000
         MVI   DDNDX1,OPENENT           SET UP INDEX FOR BR TO DIR RTN  26960000
         BAL   R3,DIR10                 INITIALIZE OPEN CODE            26980000
         B     WRAPCNT                  THEN CLOSE                      27000000
*                                                                       27020000
CTL40    EQU   *                                                        27040000
         L     TWKREG1,F15              STD CONT'N COL                  27060000
         SET   SNOCNT,ON                CONTINUATION NOT ALLOWED        27080000
         B     CTL30                    WRAP UP ICTL STMT               27100000
BADICTL  EQU   *                                                        27120000
         LR    INPTR,TRTN               BACK UP                         27140000
         MVC   TBGLN(L'TBGLN*6),STDPARM RESTORE STANDARD ICTL PARAMS    27160000
         MVC   JSRCLN(L'JSRCLN*7),SRCLEN                                27180000
         BAL   TLINK,WRNERR             BAD ICTL STATEMENT              27200000
         DC    AL1(1*16+SEV19)          GO TO BADIX RTN THRU WRNERR     27220000
         DC    AL1(ERR19)               DEFAULT TO STD ICTL VALUES      27240000
         SPACE 3                                                        27260000
ISEQ     EQU   *                                                        27280000
****                                    OPERAND EDITED AS COMMENTS      27300000
         SET   SISEQ,OFF                ASSUME NO SEQUENCE CHECK        27320000
* PARAMETER ERROR IN ISEQ STATEMENT IS TREATED AS ISEQ WITHOUT OPERAND, 27340000
* WHICH CAUSES SEQUENCE CHECKING TO BE DISCONTINUED.                    27360000
         SET   JPRONLY,ON               INDICATE PRINT ONLY             27380000
         GOIF  SNMFND,OFF=ISEQ05        LOG ERROR IF THERE IS A NAME    27400000
         BAL   RETURN,NAMERR             LOG ERROR                      27420000
ISEQ05   EQU   *                                                        27440000
         GOIF  SNOFND,ON=AOPXIT         BRANCH IF NO OPERAND            27460000
         CLC   INPOPR(L'CMABLK+1),CMABLK  TEST OMIT OPER FIELD  OX00410 27480001
         BE    AOPXIT                   WRAP UP STMT                    27500000
         ST    INPTR,FPTRSV             SAVE INPTR                      27520000
         BAL   RETURN,DSCAN             SCAN FIRST OPERAND              27540000
         B     ISEQERR                  ERROR FOUND. LOG ERROR          27560000
         CLI   D0(INPTR),JCOMMA         TERMINATE MUST BE A COMMA       27580000
         BNE   ISEQERR                  NOT A COMMA, LOG ERROR          27600000
         LTR   TWKREG1,TWKREG1          VALUE MUST BE GREATER THAN ZERO 27620000
         BNH   ISEQERR                  GO LOG ERROR                    27640000
         BCTR  TWKREG1,0                DECR BY 1                       27660000
         ST    TWKREG1,JSEQCL           STORE BEGIN COLUMN              27680000
         BAL   RETURN,DSCAN1            SCAN SECON OPERAND              27700000
         B     ISEQERR                  ERROR FOUND. LOG ERROR          27720000
         CLI   D0(INPTR),JBLANK         TEST IF BLANK AS TERMINATOR     27740000
         BE    ISEQ10                   BRANCH IF YES                   27760000
         CR    INPTR,R12                TEST IF END COLUMN TERMINATES   27780000
         BL    ISEQERR                  NO, LOG ERROR                   27800000
ISEQ10   EQU   *                                                        27820000
         CH    TWKREG1,H80              VALUE MUST NOT BE GT 80         27840000
         BH    ISEQERR                  LOG ERROR                       27860000
         BCTR  TWKREG1,0                MINUS 1                         27880000
         CLC   JSEQCL(L'JSEQCL),JCTCHR  SEQUENCE FIELD MUST NOT BE      27900000
         BNL   ISEQ20                   BETWEEN BEGIN AND ENDING        27920000
         C     TWKREG1,JBEGCL           COLUMN, ELSE                    27940000
         BNL   ISEQERR                  ERROR                           27960000
ISEQ20   EQU   *                                                        27980000
         S     TWKREG1,JSEQCL           COMPUTE SEQUENCE FIELD LENGTH   28000000
         BM    ISEQERR                  RIGHTMOST COLUMN MUST BE EQ OR X28020000
                                        GT LEFTMOST COLUMN, ELSE ERROR  28040000
         ST    TWKREG1,JSEQLN           STORE MOVE LENGTH               28060000
         SET   SISEQ,ON                 INDICATE SEQUENCE CHECK         28080000
         XC    SEQSV(L'SEQSV),SEQSV     CLEAR SEQUENCE VALUE AREA       28100000
ISEQXIT  EQU   *                                                        28120000
         L     INPTR,FPTRSV             RESET POINTER                   28140000
         B     AOPXIT                   WRAP UP STATEMENT               28160000
ISEQERR  EQU   *                                                        28180000
         BAL   TLINK,ABSERR             LOG ERROR                       28200000
         DC    AL1(SEV19)               .                               28220000
         DC    AL1(ERR19)               ILLEGAL ISEQ STATEMENT          28240000
         B     ISEQXIT                  EXIT                            28260000
         SPACE 3                                                        28280000
*                                                                       28300000
*        ROUTINE TO SCAN A DECIMAL FIELD.                               28320000
*        IF FIELD IS VALID RETURN TO D4(,RETURN)                        28340000
*        OTHERWISE, RETURN TO RETURN                                    28360000
*                                                                       28380000
DSCAN1   EQU   *                                                        28400000
         LA    INPTR,D1(,INPTR)                                         28420000
DSCAN    EQU   *                                                        28440000
         LR    TRTN,INPTR               SAVE STARTING POINT             28460000
         L     R12,ENDATA                                               28480000
         SR    TWKREG1,TWKREG1                                          28500000
         SR    TWKREG2,TWKREG2                                          28520000
DSC10    EQU   *                                                        28540000
         CR    INPTR,R12                TEST IF END OF DATA             28560000
         BNL   DSC20                    BRANCH IF YES                   28580000
         CLI   D0(INPTR),J9             TEST IF A DIGIT                 28600000
         BH    DSC20                    NO, ASSUME END OF FIELD         28620000
         IC    TWKREG2,D0(,INPTR)                                       28640000
         MH    TWKREG1,H10              MULTIPLY PARTIAL SUM BY 10      28660000
         AR    TWKREG1,TWKREG2          ADD IN CURRENT DIGIT            28680000
         LA    INPTR,D1(,INPTR)         INCREMENT POINTER BY 1          28700000
         B     DSC10                    TEST NEXT DIGIT                 28720000
DSC20    EQU   *                                                        28740000
         LR    TWKREG2,INPTR            TEST FIELD LENGTH               28760000
         SR    TWKREG2,TRTN             WHICH MUST BE LESS THAN         28780000
         CH    TWKREG2,H10              OR EQUAL TO 10 DIGITS           28800000
         BCR   BHI,RETURN               IF HI, RETURN                   28820000
         CH    TWKREG2,H1               BUT NOT LESS THAN 1             28840000
         BCR   BLO,RETURN               ELSE, LOG ERROR                 28860000
         B     D4(,RETURN)              GOOD, WITHIN LIMITS             28880000
         SPACE 3                                                        28900000
COPY     EQU   *                                                        28920000
****                                    OPERAND EDITED AS COMMENTS      28940000
         BAL   TLINK,CHKNM              NAME MUST BE BLANK              28960000
COPY15   EQU   *                                                        28980000
         GOIF  SNOFND,OFF=COPY17        BRANCH IF THERE IS OPERAND      29000000
         BAL   TLINK,ABSERR             ELSE LOG ERROR                  29020000
         DC    AL1(8*16+SEV50)          GO TO INVALID RTN THRU ABSERR   29040000
         DC    AL1(ERR50)               COPY STMT NO OPERAND            29060000
COPY17   EQU   *                                                        29080000
         SET   SCOPY,ON                 EDITING COPY STMT               29100000
         BAL   RETURN,GSCAN             SCAN OPERAND FIELD              29120000
         GOIF  ROSYM,OFF=BADCPY         BRANCH IF COPY CODE NOT O-SYM   29140000
         SET   SCOPY,OFF                                                29160000
         BAL   R3,CSTKENT               RECURSIVE ENTRY                 29180000
         SET   SNOPND,ON                INDICATE TO RETURN              29200000
         BAL   RETURN,AOPPTRS           GO PUT OUT THIS STATEMENT       29220000
COPY20   EQU   *                                                        29240000
         LA    INPTR,COPYCODE           GET COPY CODE LOC               29260000
         JFIND ADDR=(INPTR)             GO FIND IT IN THE LIB.          29280000
         BP    COPY25                   GET MEMBER NAME                 29300001
         BAL   TLINK,SNAPERRL           TAKE A SNAP SHOT                29320000
         DC    AL2(1)                   OF COPY CODE NOT FOUND          29340000
         DC    AL1(SEV68)               IN MACRO LIBRARY                29360000
         DC    AL1(ERR68)               AND PREPARE TO EXIT             29380000
         BAL   R3,CSTKEXT               RECURSIVE EXIT                  29400000
         B     WRAPCNT                  READ NEXT STATEMENT             29420000
BADCPY   BAL   TLINK,ABSERR             BAD COPY CODE                   29440000
         DC    AL1(2*16+SEV49)          GO TO AOPPTR RTN THRU ABSERR    29460000
         DC    AL1(ERR49)               COPY CODE NOT O-SYM             29480000
COPY25   MVC   LASTFIND(L'LASTFIND),COPYCODE SAVE MEMBER NAME           29490001
         BP    READNEXT                 READ NEXT RECORD                29492001
         SPACE 3                                                        29500000
OPSYN    EQU   *                                                        29520000
         GOIF  SNMFND,OFF=ILOPSYN       ERROR IF NO NAME                29540000
         GOIF  ROSYM,OFF=ILOPSYN        OR NAME NOT ORDINARY SYMBOL     29560000
         MVI   SDENTR,OPSYNBLD          CHANGE ENTRY INDEX              29580000
         GOIF  SNOFND,ON=OPSYN1         EXIT IF NO OPERAND              29600000
         CLC   INPOPR(L'CMABLK),CMABLK  IS IT ',BLANK' IN OPERAND FIELD 29620000
         BE    OPSYN1                   IF YES,PROCESS AS VALID COMMENT 29640000
         BAL   RETURN,GSCAN             ELSE, EDIT OPERAND FIELD        29660000
         MVI   OCSAVE,D0                CLEAR OPSYN OP CODE             29670000
         GOIF  ROSYM,ON=AOPPTR          OK IF OPERAND AN ORD SYM        29680000
         LCR   R14,INDEXO               COMPUTE THE OPERAND             29685000
         A     R14,OFPTRSV              FIELD POINTER                   29690000
         STH   R14,JTOPP                AND SAVE                        29695000
ILOPSYN  EQU   *                                                        29700000
         BAL   TLINK,ABSERR             ERROR, SUPPRESS D ENTRY         29720000
         DC    AL1(SEV13)               OPSYN NAME NOT ORD SYMBOL       29740000
         DC    AL1(ERR13)               OPERAND NOT O-SYM/BLANK         29760000
         SET   JNMERR,ON                INDICATE NAME ERROR             29780000
         MVI   OCSAVE,D0                CLEAR OPSYN OP CODE             29790000
         MVI   SDENTR,D0                INSURE NO DIRECTORY ENTRY       29800000
         B     AOPXIT                   STOP EDIT ON THIS ERROR         29820000
OPSYN1   MVI   OCSAVE,D0                CLEAR OPSYN OP CODE             29826000
         B     AOPXIT                   GO WRAP UP STATEMENT            29832000
         SPACE 3                                                        29840000
MACRO    EQU   *                                                        29860000
         SET   (SMDEF,SXPRTO),ON        INDICATE IN MD, XPCT PROTOTYPE  29880000
         MVI   SDENTR,MACRENT           SAVE INDEX                      29900000
         SET   SDENT,ON                 POINT OF DEFINITION             29920000
         BAL   TLINK,CHKNM              NAME MUST BE BLANK              29940000
         GOIF  SPGRMD,OFF=AOPXIT        CHECK IF PROGRAMMER MACRO       29946000
         SET   JPRGMAC,ON               INDICATE PROGRAMMER MACRO       29952000
         GOIF  JNMERR,ON=PNXT15        NAME FIELD PRESENT,ERR  @OY08060 29954005
         B     AOPXIT                   WRAP UP STATEMENT               29960000
         SPACE 3                                                        29980000
MEND     EQU   *                                                        30000000
         BAL   TLINK,CHKSSNM            NAME MUST BE SS OR NOT USED     30020000
MENDZ    EQU   *                                                        30040000
         SET   SNOPND,ON                INDICATE TO RETURN              30060000
         BAL   RETURN,SAVPTR            WRAP UP STATEMENT               30080000
         B     MEND1                    CLOSE MACRO DEFINITION          30100000
MEND0    EQU   *                                                        30120000
         GOIF  SINCPY,OFF=MEND1         BRANCH IF NOT IN COPY CODE      30140000
         SET   SMAC,OFF                 CORRESPONDING MEND GENERATED    30150000
         BAL   R3,CSTKEXT               RECURSIVE EXIT                  30160000
         GOIF  SOPNCD,OFF=MEND1         BR IF GERERATED MEND IS OK HERE 30170000
         BAL   TLINK,ABSERR             LOG ERROR IF NOT                30172000
         DC    AL1(SEV23)               MEND CAN'T BE IN OPEN CODE      30174000
         DC    AL1(ERR23)                                               30176000
         BAL   RETURN,WRAPERR           WRITE THIS ERROR RECORD         30178000
         B     READNEXT                 CONTINUE READING SOURCE         30178400
MEND1    EQU   *                                                        30180000
         GOIF  SSYSMD,OFF=MEND2         BR IF NOT IN SYSMAC             30185000
         GOIF  SINCPY,ON=READNEXT       READ REST OF COPY BOOK          30190000
         GOIF  SMDEF,OFF=MEND25         BR IF NO MACRO DEFINIT @AY19080 30192000
MEND2    EQU   *                                                        30195000
         GOIF  SXPRTO,OFF=MEND3         FOUND MACRO JET        @OX08858 30195405
         GOIF  SINEOF,OFF=MEND25        ONLY MACRO FOUND       @OX08858 30195805
         BAL   TLINK,WRNERR             LOG ERROR              @OX08858 30196205
         DC    AL1(SEV43)               EOF OCCURS BEFORE-     @OX08858 30196605
         DC    AL1(ERR43)               PROTOTYPE STMT         @OX08858 30196705
MEND25   EQU   *                                               @OX08858 30196805
         SET   SNOSMCRO,ON              NO, SET FLG,NOMACRO STM OX00403 30199001
         SET   SKPMND,ON                SET FLG FOR SKIPTO MEND OX00403 30199401
MEND3    SET   (SMDEF),OFF              CLOSE MACRO DEFINITION  OX00403 30200001
         MVI   DDNDX1,MACREND           SET UP INDEX FOR BR TO DIR RTN  30220000
         BAL   R3,DIR10                 GO CLOSE MACRO DEFINITION       30240000
         SET   SKPMND,OFF               ELSE, RESET SWITCH              30260000
         SET   (SNOSMCRO,SBDPROTO),OFF                                  30280000
         GOIF  SPGRMD,ON=READNEXT       RD NEXT STMT IF IN PGR MACRO    30300000
         L     BASE4,CS4ADDR            CHANGE BASE FOR CSECT 4         30320000
         L     LINK,AESYSMAC            GET ROUTINE ADDR                30330000
         BR    LINK                     NOW ENTER ROUTINE               30332000
         SPACE 3                                                        30340000
REPRO    GOIF  SNMFND,OFF=REPRO10       BRANCH IF THERE IS NO NAME      30360000
         GOIF  RSSYM,ON=REPRO10         BRANCH IF NAME A S.S.           30380000
         BAL   RETURN,NAMERR            ELSE, LOG ERROR                 30400000
REPRO10  SET   JPRONLY,ON               INDICATE PRINT ONLY             30420000
         SET   SNOPND,ON                INDICATE TO RETURN              30440000
         BAL   RETURN,SAVPTR            DON'T FORGET TO COME BACK       30460000
         JINPUT  ,                      READ A CARD                     30480000
         BNP   UNXPEOF                  UNEXPECTED END OF FILE          30500000
         LR    INPTR,RETADR             SAVE CARD POINTER               30520000
         LA    R11,D10*D10              RECORD LENGTH                   30540000
         BAL   RETURN,OPUTL             GET BUFFER                      30560000
         MVC   JTRLI(L'REPRO30),REPRO30 RECORD HEADER                   30580000
         MVC   JTRLI+L'REPRO30(D10*D8),D0(INPTR)  CARD IMAGE AS COMMENT 30600000
         SET   SNOPND,OFF               INSURE NO RETURN TO HERE        30620000
         B     WREXIT                   GO RESET SW AND READ NEXT CARD  30640000
REPRO30  DC    0CL20' ',H'100'          RECORD HEADER                   30660000
         DC    AL1(JPSOP+JDEF,0,JTREPRO),3H'16',H'18,16',AL1(0,0,1,80)  30680000
         SPACE 3                                                        30700000
AGO      EQU   *                                                        30720000
         BAL   TLINK,CHKSSNM            NAME MUST BE SS OR NOT USED     30740000
         BAL   RETURN,GSCAN             SCAN OPERAND FIELD FOR SS       30760000
AGO1     EQU   *                                                        30780000
         GOIF  RSSYM,ON=AOPPTR          EDIT COMMENTS IF SS IN OPERAND  30800000
         BAL   TLINK,ABSERR             INVALID OPERAND FORMAT          30820000
         DC    AL1(2*16+SEV73)          GO TO AOPPTR VIA ABSERR         30840000
         DC    AL1(ERR73)               OPERAND NOT SEQUENCE SYMBOL     30860000
         SPACE 3                                                        30880000
*        NAME = SS OR BLANK                                             30900000
*        OPERAND = NOT USED                                             30920000
*                                                                       30940000
MEXIT    EQU   *                                                        30960000
EJECT    EQU   *                                                        30980000
         BAL   TLINK,CHKSSNM            NAME MUST BE SS OR NOT USED     31000000
         B     AOPXIT                   WRAP UP STATEMENT               31020000
*                                                                       31040000
*        NAME = SS ONLY                                                 31060000
*        OPERAND = NOT USED                                             31080000
*                                                                       31100000
ANOP     EQU   *                                                        31120000
         GOIF  RSSYM,ON=AOPXIT          BRANCH IF NAME A S.S.           31140000
         GOIF  SNMFND,OFF=AOPXIT        ALLOW BLANK NAME                31160000
         BAL   RETURN,NAMERR            LOG ERROR MESSAGE               31180000
         B     AOPXIT                   END PROCESSING OF THIS STMT     31200000
*                                                                       31220000
*        NAME = ANY SYMBOL OR NOT USED                                  31240000
*        OPERAND = NOT USED                                             31260000
*                                                                       31280000
COM      LA    TLINK,AOPXIT             GET RETURN POINT                31300000
         B     CKANYSYM                 CHECK NAME                      31320000
CSECT    EQU   COM                                                      31340000
CXD      EQU   COM                                                      31360000
LTORG    EQU   COM                                                      31380000
*                                                                       31400000
*        NAME = SS OR NOT USED                                          31420000
*        OPERAND = REL. EXP., OR BLANK                                  31440000
*                                                                       31460000
END      EQU   *                                                        31480000
         GOIF  SOPNCD,OFF=SPACE         BRANCH IF NOT IN OPEN CODE      31500000
         SET   SENDST,ON                ELSE, INDICATE END STMT READ    31520000
SPACE    EQU   *                                                        31540000
         BAL   TLINK,CHKSSNM            NAME MUST BE SS OR NOT USED     31560000
         B     MCHIN15                  EDIT AS MACHINE OP              31580000
*                                                                       31600000
*        NAME = SS OR NOT USED                                          31620000
*        OPERAND = EXP., SYMBOL, CHAR. STRING OR SDT                    31640000
*                                                                       31660000
MNOTE    EQU   SPACE                                                    31680000
ENTRY    EQU   MNOTE                                                    31700000
PUSH     EQU   MNOTE                                                    31720000
POP      EQU   MNOTE                                                    31740000
PUNCH    EQU   MNOTE                                                    31760000
PRINT    EQU   MNOTE                                                    31780000
USING    EQU   MNOTE                                                    31800000
DROP     EQU   MNOTE                                                    31820000
*                                                                       31840000
*        NAME = SS OR NOT USED                                          31860000
*        OPERAND = RELOCATABLE SYMBOLS SEPARATED BY COMMAS              31880000
*                                                                       31900000
EXTRN    EQU   *                                                        31920000
WXTRN    EQU   *                                                        31940000
         BAL   TLINK,CHKSSNM            NAME MUST BE SS OR NOT USED     31960000
         GOIF  SNOFND,ON=AOPXIT         BRANCH IF NO OPERAND            31980000
         BAL   RETURN,GSCAN             ELSE, SCAN IT                   32000000
         MVI   SDENTR1,ORDSYMBD         EST DIR ENTRY INDEX             32020000
         ST    INDEXO,NAMP1             SAVE PTR TO OPND FOR DIR ENTRY  32030000
         SET   SDENT,ON                 POINT OF DEFINITION             32060000
         B     AOPPTR                   LOG OPERAND POINTER             32080000
*                                                                       32100000
MCHINS   EQU   *                                                        32120000
         BAL   RETURN,STMTDSQ           STATEMENT SEQUENCING            32140000
MCHIN10  EQU   *                                                        32160000
         BAL   TLINK,CKANYSYM           CHECK NAME                      32180000
MCHIN15  EQU   *                                                        32200000
         GOIF  SNOFND,ON=AOPXIT         BRANCH IF NO OPERAND            32220000
         BAL   RETURN,GSCAN             ELSE SCAN IT                    32240000
         B     AOPPTR                   LOG OPERAND POINTER             32260000
*                                                                       32280000
*        NAME = ANY SYMBOL OR NOT USED                                  32300000
*        OPERAND = EXP., STRING, SYMBOL OR SDT                          32320000
*                                                                       32340000
START    EQU   MCHIN10                  EDIT AS MACHINE OP              32360000
CNOP     EQU   START                                                    32380000
ORG      EQU   START                                                    32400000
DXD      EQU   START                                                    32420000
CCW      EQU   START                                                    32440000
DC       EQU   START                                                    32460000
DS       EQU   START                                                    32480000
TITLE    EQU   MCHIN15                                                  32500000
*                                                                       32520000
*        NAME = OS OR VS                                                32540000
*        OPERAND = NOT USED                                             32560000
*   LET ASSEMBLY PHASE CATCH SS OR BLANK IN NAME FIELD                  32580000
*                                                                       32600000
DSECT    EQU   CSECT                                                    32620000
         SPACE 3                                                        32640000
GBLA     MVI   FLAGBT,GAFLG             INDICATE GBLA                   32660000
         B     GLX                      CHECK NAME FIELD                32680000
GBLB     MVI   FLAGBT,GBFLG             INDICATE GBLB                   32700000
         B     GLX                      CHECK NAME FIELD                32720000
GBLC     MVI   FLAGBT,GCFLG             INDICATE GBLC                   32740000
         B     GLX                      CHECK NAME FIELD                32760000
LCLA     MVI   FLAGBT,LAFLG             INDICATE LCLA                   32780000
         B     GLX                      CHECK NAME FIELD                32800000
LCLB     MVI   FLAGBT,LBFLG             INDICATE LCLB                   32820000
         B     GLX                      CHECK NAME FIELD                32840000
LCLC     MVI   FLAGBT,LCFLG             INDICATE LCLC                   32860000
GLX      EQU   *                                                        32880000
         ST    INDEXP,OFPTRSV                                           32900000
         BAL   TLINK,CHKNM              NAME MUST BE BLANK              32920000
         GOIF  SNOFND,ON=NOPNDER        LOG ERROR IF NO OPERAND FOUND   32940000
         SET   SGBLCL,ON                INDICATE EDITING DECLARATION    32960000
         ST    INPTR,FPTRSV             SAVE BEGIN OF OPERAND           32980000
GLX05    ST    INPTR,OPNDPTR            INCASE OF BACK UP               33000000
         CLI   D0(INPTR),JAMPER         TEST IF AMPERSAND               33020000
         BNE   GLXERR                   COULDN'T BE V-SYM. ERROR        33040000
         BAL   RETURN,VARSYM            POSSIBLY.                       33060000
         LR    INPTR,R1                 RESTORE POINTER                 33080000
         TM    DERRCD,BITFF             TEST IF ANY ERROR IN DICT RTN   33090000
         BZ    GLX10                    CONTINUE IF NO ERROR            33092000
         SET   JPRONLY,ON               SET TO PRINT THIS STMT          33094000
         CLI   DERRCD,ERR9              SEE IF ERR WAS DICT OVERLAP     33096000
         BE    GLX20                    STOP SCANNING STMT IF YES       33098000
GLX10    CLI   D0(INPTR),JCOMMA         TERMINATOR MUST BE A COMMA      33100000
         BNE   GLX15                    OR A BLANK                      33120000
         LA    INPTR,D1(,INPTR)         YES, A COMMA                    33140000
         B     GLX05                    EDIT NEXT DECLARATION           33160000
GLX15    CLI   D0(INPTR),JBLANK                                         33180000
         BNE   GLXERRZ                  LOG ERROR IF NEITHER            33200000
GLX20    BAL   R12,VTPUT0               A BLANK MEANS END OF STMT       33240000
         SET   SGBLCL,OFF                                               33260000
         GOIF  SKPEND,OFF=AOPPTR        BR IF NO DICT OVERLAP (NO ERR9) 33270000
         L     INDEXO,OUTADR            RESTORE AFTER ERR9 CLEANUP WORK 33272000
         B     AOPPTR                   LOG OPERAND POINTER             33280000
         SPACE 3                                                        33300000
ACTR     EQU   *                                                        33320000
         BAL   TLINK,CHKSSNM            SEQ SYM OR BLANK        OX00404 33340001
         MVI   MCALL,MCLA               PROCESS LIKE A SETA STMT        33360000
         B     SETX05                   GO PROCESS                      33380000
SETX     EQU   *                                                        33400000
SETA     EQU   SETX                                                     33420000
SETB     EQU   SETX                                                     33440000
SETC     EQU   SETX                                                     33460000
         L     R14,RAVSP               CLEAR                    OX02957 33470031
         LA    R14,RFLGLOC(,R14)        EXPRESSION              OX02957 33472031
         MVI   RSTKVST,X'00'            STATUS                  OX02957 33474031
         CLI   NAMBYT,RVSYM             TEST IF NAME A V. S.            33480000
         BNE   ILSETNM                  LOG ERROR IF NOT                33500000
         MVI   NAMBYT,J0                RESET FOR NEXT STMT    @OX10953 33510006
         SR    R14,R14                                                  33520000
         IC    R14,OCSAVE                                               33540000
         SR    R15,15                                                   33560000
         IC    R15,NAMABC-JTSETA(R14)   GET CORRESPONDING V.S.FLAG      33580000
         NI    VSTAT,X'13'                                              33600000
         CH    R15,VSFLG                TEST SET VAR FOR RIGHT TYPE     33620000
         BNE   ILSETNM                  LOG ERROR IF NOT                33640000
         IC    R14,SENTVAL-JTSETA(R14)  PICK UP METASCAN ENTRY CODE     33660000
         STC   R14,MCALL                AND SAVE IN MCALL               33680000
SETX05   EQU   *                                                        33700000
         GOIF  SNOFND,ON=NOPNDER        OPERAND IS REQUIRED             33720000
         ST    INPTR,FPTRSV                                             33740000
         ST    INDEXP,OFPTRSV                                           33760000
         TM    MCALL,MCLA+MCLC          TEST IF SETB STATEMENT          33780000
         BZ    SETB05                   BRANCH IF YES                   33800000
         BAL   RETURN,METASCAN          GO EDIT SETA/SETC OPERAND       33820000
         CLI   D0(INPTR),JBLANK         BLANK IS A GOOD TERMINATOR      33840000
         BE    SETX10                   IT IS                           33860000
         C     INPTR,ENDATA             IF NOT, ENDATA MUST.            33880000
         BL    ILSETX                   LOG ERROR IF IT DOESN'T         33900000
         BCTR  INPTR,0                  MINUS 1                         33920000
SETX10   EQU   *                                                        33940000
         BAL   R12,VTENT15              WRAP UP OPERAND                 33960000
         B     AOPPTR                   COMPUTE FIELD POINTER           33980000
SETB05   EQU   *                                                        34000000
         MVC   D0(L'SBDSDT,INDEXP),SBDSDT TREAT 0,1,(0),(1) AS DSDT     34020000
         CLI   D1(INPTR),JBLANK         IF 0 OR 1 DOES NOT STAND ALONE  34040000
         BNE   SETB20                   EVALUATE AS EXPR                34060000
         CLI   D0(INPTR),D1             TEST IF VALUE 0 OR 1            34080000
         BH    SETB20                   BR IF NOT                       34100000
         BL    SETB16                   ZERO                            34120000
SETB15   MVI   D4(INDEXP),D1            MAKE DSDT 1                     34140000
SETB16   LA    INPTR,D1(,INPTR)                                         34160000
         LA    INDEXP,L'SBDSDT(,INDEXP) BUMP POINTER                    34180000
         BAL   R12,VTPUT0               BUILD V.T.                      34200000
         B     AOPPTR                   LOG OPERAND POINTER             34220000
AIF      EQU   *                                                        34240000
         MVI   MCALL,D0                 INDICATE EDITING SETB           34260000
         BAL   TLINK,CHKSSNM            NAME MUST BE SS OR BLANK        34280000
         ST    INPTR,FPTRSV                                             34300000
         ST    INDEXP,OFPTRSV                                           34320000
         GOIF  SNOFND,ON=NOPNDER        GO LOG ERROR ON MISSING OPERAND 34340000
SETB20   EQU   *                                                        34360000
         CLI   D0(INPTR),JLPARN         EXPRESSION MUST BE W/N ( )      34380000
         BNE   ILGLXP1                  LOG ERR IF NOT                  34400000
         BAL   R3,PFXRENT               ENTER L-PAREN                   34420000
         DC    AL2(JTMLPAR)             INTO POSTER                     34440000
         BAL   RETURN,METASCAN          SCAN IT                         34460000
         CLI   D0(INPTR),JRPARN         TERMINATOR MUST BE A R-PAREN    34480000
         BNE   ILGLXP1                  GO TO LOG EITHER ERR24 OR ERR32 34500000
         LR    R0,R3                    SAVE EXIT CODE                  34520000
         BAL   R3,PFXRENT               ENTER R-PAREN                   34540000
         DC    AL2(JTMRPAR)             INTO POSTER                     34560000
         LR    R3,R0                    RESTORE EXIT CODE               34580000
         CH    R3,H2                    DO NOT ALLOW SETC STATS OX00406 34590001
         BE    SETX30                   ALLOW SETA EXPRESSION   OX00406 34592001
         CH    R3,H1                    EXPRESSION MUST BE COMPLEX OR   34600000
         BH    ILBXP                    SIMPLE. ELSE, ERROR             34620000
         BE    SETX30                   OK IF COMPLEX                   34640000
         L     R14,RAVSP                                                34660000
         LA    R14,RFLGLOC(,R14)        CHECK EXPRESSION STATUS         34680000
         TM    RSTKVST,VSLS             SIMPLE BOOLEAN  ...             34700000
         BO    ILBXP                    DOESN'T TOLERATE SYSLIST        34720000
SETX30   EQU   *                                                        34740000
         CLI   OCSAVE,JTAIF             TEST IF AIF STATEMENT           34760000
         BE    AIF1                     BR IF THIS IS AIF               34780000
         CLI   D0(INPTR),JBLANK         MUST HAVE BLANK TERMINATOR      34785000
         BE    SETX10                   SETB OPERAND TERMINATOR IS OK   34790000
         B     INVFM                    LOG ERR32, SNAP INVALID TEXT    34795000
         SPACE 3                                                        34800000
AIF1     EQU   *                                                        34820000
         BAL   R3,PFXRENT               LOG END STMT FLAG               34840000
         DC    AL2(JTMSTRM)             FLAG                            34860000
         BCTR  INPTR,D0                 DON'T GET CARRIED AWAY          34880000
         SET   GAIF,ON                  INDICATE AIF STATEMENT          34900000
         BAL   RETURN,GSCAN1            GO SCAN SEQ SYMBOL              34920000
         SET   GAIF,OFF                                                 34940000
         B     AGO1                     WRAP UP LIKE AGO STMT           34960000
         SPACE 3                                                        34980000
SBDSDT   DS    0CL9                     M.T. FORMAT FOR 0 OR (0) SDT    35000000
         DC    AL1(JTMSDT,0,0,0,0,0,JTMSTRM,0,7) M.T. INT'L FORMAT      35020000
SENTVAL  DC    AL1(MCLA,0,MCLC)         METASCAN ENTRY CODE FOR SETX    35040000
NAMABC   DC    AL1(0,1,3)               SET VARIABLE VALUE IN FLGBYT    35060000
         DS    0H                                                       35080000
         SPACE 3                                                        35100000
*                                                                       35120000
*        NAME = OS OR VS                                                35140000
*        OPERAND = EXPRESSION                                           35160000
*                                                                       35180000
*   LET ASSEMBLY PHASE CATCH SS OR BLANK IN NAME FIELD                  35200000
EQU      EQU   MCHIN10                                                  35220000
         SPACE 3                                                        35240000
INVALID  EQU   AOPXIT                                                   35260000
         EJECT                                                          35280000
*********************************************************************** 35300000
*        SKIP BLANKS BETWEEN FIELDS                                   * 35320000
*        AT ENTRY INPTR POINTS TO BEGIN OF FIELD                      * 35340000
*********************************************************************** 35360000
SKPBLK   EQU   *                                                        35380000
         L     TWKREG2,ENDATA           GET END OF DATA ADDRESS         35400000
SKPBLK0  EQU   *                                                        35420000
         SET   SNOFND,OFF                                               35440000
         LA    TWKREG1,1                THE INCREMENT IS ONE BYTE       35460000
         BCTR  TWKREG2,0                SET BXLE LOOP UPPER LIMIT       35480000
         BCT   INPTR,SKPBLK2            AND BEGIN ADDRESS - 1           35500000
SKPBLK1  EQU   *                                                        35520000
         CLI   D0(INPTR),JBLANK         TEST IF BLANK                   35540000
         BCR   7,TLINK                  EXIT IF NOT                     35560000
SKPBLK2  EQU   *                                                        35580000
         BXLE  INPTR,TWKREG1,SKPBLK1    ELSE, LOOK UP NEXT COLUMN       35600000
         SET   SNOFND,ON                UNTIL ENDATA                    35620000
         BR    TLINK                    RETURN TO CALLER                35640000
         EJECT                                                          35660000
*****************************************                               35680000
*        SET O/P BUFFER LOCATION        *                               35700000
*****************************************                               35720000
OPUTL    EQU   *                                                        35740000
         ST    RETURN,EDTSVX                                            35760000
         JPUTL FILE=FILE1,BUFREQ=(R11) GET NEXT OUTPUT BUFFER           35780000
         L     RETURN,EDTSVX                                            35800000
         ST    RETADR,OUTADR            SAVE BEGIN ADDRESS              35820000
         LR    INDEXO,RETADR            JTEXT BASE                      35840000
         LA    INDEXP,JTHDRLN(,INDEXO)  JTEXT BASE 2                    35860000
         BR    RETURN                   RETURN TO CALLER                35880000
         SPACE 3                                                        35900000
*********************************************                           35920000
*        EDITED TEXT INITIALIZATION         *                           35940000
*********************************************                           35960000
HDINIT   EQU   *                                                        35980000
         LCR   TWKREG1,INDEXO           LET ALL FIELD POINTERS          36000000
         AR    TWKREG1,INDEXP           POINT TO THE DUMMY FIELD        36020000
         XC    JTRLI(JTHDRLN+2),JTRLI   CLEAR HEADER                    36040000
         STH   TWKREG1,JTNMP                                            36060000
         LA    INDEXP,D2(,INDEXP)       BUMP OVER DUMMY FIELD           36080000
RESETPTR EQU   *                                                        36100000
         MVC   JTOCP(JTSYMCNT-JTOCP),JTNMP                              36120000
         BR    RETURN                   RETURN TO CALLER                36140000
         EJECT                                                          36160000
*******************************                                         36180000
******     CONSTANTS     ******                                         36200000
*******************************                                         36220000
         PRINT DATA                                                     36240000
ETMOV    MVC   D1(*-*,INDEXP),D0(GSPTR) OFF-THE-LINE MOVE               36260000
ARDSRC   DC    A(RDSRC)                 RDSRC ENTRY POINT               36280000
ARDSRC05 DC    A(RDSRC05)               RDSRC05 ENTRY POINT             36300000
ATRTEST  DC    A(TRTEST)                TRTEST ENTRY POINT              36320000
ATRT01   DC    A(TRT01)                 TRT01 ENTRY POINT               36340000
ATRT02   DC    A(TRT02)                 TRT02 ENTRY POINT               36360000
SRCLEN   DC    F'70'                    DATA PORTION MOVE LENGTH        36380000
BEGCOL   DC    F'0'                     BEGIN COLUMN MINUS 1            36400000
CONTCHR  DC    F'71'                    CONT CHR COLUMN MINUS 1         36420000
SEQCOL   DC    F'72'                    SEQ FLD BEGIN COL MINUS 1       36440000
SEQLEN   DC    F'7'                     SEQ FLD MOVE LENGTH             36460000
CONTBGN  DC    F'15'                    CONT COLUMN MINUS 1             36480000
CONLEN   DC    F'55'                    CONT FLD MOVE LENGTH            36500000
*                                                                       36520000
F15      DC    F'15'                    MASKING CONSTANTS               36540000
F31      DC    F'31'                    .                               36560000
RSTKLEN  DC    AL2(EDRSTK-BDRSTK)       RSTACK LENGTH                   36580000
CSTKLEN  DC    AL2(EDCSTK-CSTKNOTE)     CSTACK LENGTH                   36600000
HATT     DC    AL2(JTMTAT-2)            ATTR FLAG CONV BASE V           36620000
H32K     DC    H'32767'                 MAXIMUM DIMENSION ALLOWED       36640000
H80      DC    H'80'                    STANDARD CARD LENGTH            36660000
H40      DC    H'40'                    STANDARD DATA LENGTH            36680000
DOTSTAR  DS    0CL2                                                     36820000
         DC    AL1(JPERIOD,JASTER)      GENERATED COMMENT STMT          36840000
CMABLK   DC    AL1(JCOMMA,JBLANK)       FIELD TERMINATOR                36860000
         DS    0H                       HALF WORD ALIGNMENT             36880000
FXDHD    DS    0CL20                                                    36900000
         DC    AL2(0)                   RECORD LENGTH                   36920000
PUTFLG   DC    AL1(JPSOP,JPRONLY)       ASSEMBLER OP / PRINT ONLY       36940000
         DC    AL1(JTCMNT,J0)           INTERNAL OP CODE                36960000
         DC    5AL2(COMIT-FXDHD)        DUMMY POINTERS                  36980000
         DC    2X'00'                   TWO FIELDS                      37000000
COMIT    DC    2X'00'                   DUMMY FIELD                     37020000
COMDTA   EQU   *                        END OF FXDHD                    37040000
         DS    0H                                                       37160000
*********************************************************************** 37180000
*  STANDARD CATEGORIES AND TYPES CORRESPONDING TO SPECIAL CHARACTERS  * 37200000
*                                                                     * 37220000
*  INTERNAL CODE MINUS 39.  0 1 2 3 4 5 6 7 8 9 1011                  * 37240000
*  SPECIAL CHARACTER        = ( + - * / ) ,   ' & .                   * 37260000
QMDTBL   DC            XL12'000000000000000003050200'  QUOTE MODE ARG * 37280000
STDTBL   DC            XL12'030406060606030303050203'  STANDARD CATEG * 37300000
*TRTSRC  DC            XL12'00040A0B080905022F000003'  TYPE NUMBER    * 37320000
TRTSRC   DS    0CL12                                                  * 37340000
         DC    AL1(JEQUAL,JTMLPAR,JTMADD,JTMSUB,JTMMULT,JTMDIV)       * 37360000
         DC    AL1(JTMRPAR,JTMCOM,JBLANK,JTMSCM,JAMPER,JTMPER)        * 37380000
*********************************************************************** 37400000
         PRINT NODATA                                                   37420000
         SPACE 3                                                        37426000
         JPATCH  X1A00,FEE                                              37432000
         EJECT                                                          37440000
         JCSECT (X1A10=CS2)                                             37460000
**************************************                                  37480000
*        VIRTUAL TEXT BUILDER        *                                  37500000
**************************************                                  37520000
VTENT    EQU   *                                                        37540000
         GOIF  METSW,ON=VTENT10         BRANCH IF GOOD M.T. EXISTS      37560000
VTENT05  EQU   *                                                        37580000
         L     INDEXP,OFPTRSV           ELSE, WIPE OFF MT SO FAR BUILT  37600000
         B     VTPUT0                   BUILD V.T.                      37620000
VTENT10  EQU   *                                                        37640000
         GOIF  GAIF,ON=VTENT20          BRANCH IF AIF STATEMENT         37660000
         GOIF  GSUBS,OFF=VTENT20        BRANCH IF NO SUBSTITUTION       37680000
         BAL   RETURN,MTENT10          ELSE, WRAP UP MT                 37700000
         LR    INPTR,R1                 KEEP INPTR CURRENT              37720000
         OC    JTFLGB,SWITCH8           AND INDICATE SUBSTITUTION       37740000
VTENT15  EQU   *                                                        37760000
         LR    R0,R12                   SAVE RETURN POINT               37780000
         BAL   R3,PFXRENT               END OF M.T.                     37800000
         DC    AL2(JTMSTRM)             STATEMENT TERMINATOR            37820000
         BCTR  INPTR,D0                 BACK UP                         37840000
         LR    R12,R0                   RESTORE RETURN POINT            37860000
VTENT20  SET   (GSUBS,METSW),OFF                                        37880000
         LR    R14,INDEXP               COMPUTE MT LENGTH               37900000
         S     R14,OFPTRSV                                              37920000
         STH   R14,JHWORD1              ENTER MT LENGTH                 37940000
         MVC   D0(L'JHWORD1,INDEXP),JHWORD1                             37960000
         LA    INDEXP,D2(,INDEXP)                                       37980000
VTPUT0   EQU   *                                                        38000000
         L     RCNT,INPUT                                               38020000
VTPUT    EQU   *                                                        38040000
         ST    INDEXP,OFPTRSV           SAVE VT BEGIN LOC FOR PTR CALC  38060000
         GOIF  JPSOP,OFF=VTPUT02        SUPPRESS VT ON PSEUDO OPS       38080000
         CLI   OCSAVE,JTPEND            LOOK ONLY AT GENERATOR OPS,     38100000
         BH    VTPUT02                  THOSE BETWEEN ANOP AND PEND     38120000
         CLI   OCSAVE,JTANOP            IF NON-GENERATOR OP, PUT        38140000
         BL    VTPUT02                  OUT VIRTUAL TEXT EVERY TIME     38160000
         GOIF  SPGRMD,ON=VTPUT02        PUT V.T. FOR PRGMR MACRO DEF    38180000
         GOIF  SSYSMD,OFF=VTPUT40       BRANCH IF IN OPEN CODE          38200000
         GOIF  SXPRTO,OFF=VTPUT50       BRANCH IF INNER CALL STMT       38220000
         GOIF  (JMLOGIC,JSYSMAC),NONE=VTPUT60 PUT VT IF MACRO COND'T'NL 38240000
VTPUT02  EQU   *                        ASSEMBLY TO BE PRINTED          38260000
         L     GSPTR,FPTRSV             RESTORE INPUT FIELD BEGIN ADDR  38280000
VTPUT05  EQU   *                                                        38300000
         LM    R9,R11,TBGLN                                             38320000
         LA    R14,D1(,GSPTR)           COMPUTE RELATIVE FIELD LOCATION 38340000
         SR    R14,RCNT                 IN INPUT WORK BUFFER            38360000
         LH    TRTN,H1                  AND TAKE CARE OF CARD COUNTER   38380000
VTPUT10  CR    R14,R10                  ARE WE IN THE RIGHT CARD        38400000
         BNH   VTPUT20                  YES                             38420000
         SR    R14,R11                  NO. SUBTRACT COUNT LENGTH       38440000
         AH    TRTN,H1                  INCREMENT CARD COUNT BY 1       38460000
         B     VTPUT10                  CHECK NEXT CARD                 38480000
VTPUT20  AR    R14,R9                   ADD PRE-BEGIN STRING LENGTH     38500000
         CH    TRTN,H1                  DID WE STOP IN THE 1ST CARD     38520000
         BE    VTPUT30                  DON'T ENTER CARD POINTER IF YES 38540000
         STC   TRTN,D0(,INDEXP)         ELSE, A ONE-BYTE CARD POINTER   38560000
         OI    D0(INDEXP),BIT0          PRECEDING COLUMN POINTER        38580000
         LA    INDEXP,D1(,INDEXP)                                       38600000
VTPUT30  STC   R14,D0(,INDEXP)          ENTER COLUMN POINTER            38620000
         LA    INDEXP,D1(,INDEXP)                                       38640000
         LR    R15,INPTR                COMPUTE STRING LENGTH           38660000
         SR    R15,GSPTR                                                38680000
         STC   R15,D0(,INDEXP)          AND ENTER IT                    38700000
         BCTR  R15,0                    DECR LENGTH BY 1                38720000
         EX    R15,ETMOV                MOVE VT TO OUTPUT BUFFER        38740000
         LA    INDEXP,D2(R15,INDEXP)    BUMP TO NEXT AVAILABLE LOCATION 38760000
         BR    R12                      EXIT VT RTN                     38780000
VTPUT40  CLI   OCSAVE,JTMACRO           LOOK ONLY AT OPEN CODE SUBSET   38800000
         BE    VTPUT02                  OF GENERATOR OPS                38820000
         CLI   OCSAVE,JTSETC            IF NOT IN THAT RANGE, PUT       38840000
         BH    VTPUT02                  OUT VIRTUAL TEXT EVERY TIME     38860000
         GOIF  JALOGIC,ON=VTPUT02       ALWAYS PUT V.T. IF ASM LOGIC ON 38870000
         GOIF  JSYSMAC,OFF=VTPUT60      NO V.T. IF SYS MACS NOT PRINTED 38880000
         B     VTPUT02                  PUT V.T. INCASE GENERATED END   38900000
VTPUT50  GOIF  (JCALLS,JMLOGIC,JSYSMAC),ANY=VTPUT02 PUT VT IF INNERS TO 38920000
VTPUT60  SET   SMISCN,ON                INDICATE NO V.T. OUTPUT         38930000
         BR    R12                      BE PRINTED, ELSE, EXIT          38940000
         EJECT                                                          38950000
*********************************************************************** 38960000
*  GSCAN SCANS AND CLASSIFIES ALL INPUT SOURCE STATEMENTS EXCEPT      * 38980000
*  OPERANDS ON AIF, AGO, SETX, MACRO INSTRUCTION, AND PROTOTYPE       * 39000000
*  STATEMENTS. SCAN RESULTS ARE RETURNED IN LOCATION GSUMRY. THE      * 39020000
*  FIELD SCANNED IS EDITED INTO VIRTUAL TEXT AND, IF NECESSARY, META  * 39040000
*  TEXT FORMATS IN OUTPUT BUFFER.                                     * 39060000
*  AT ENTRY GQST IS SET TO ZERO TO START QUOTE STATUS CHECKING        * 39080000
*                0 = EVEN NUMBER OF QUOTE FOUND AT EXIT               * 39100000
*                1 = ODD NUMBER OF QUOTE FOUND AT EXIT                * 39120000
*  GMET IS SET ON WHEN A META TEXT IS BUILT FOR A FIELD               * 39140000
*  RESULTS RETURNED FROM TRT ARE                                      * 39160000
*                R1 = TERMINATING CHARACTER ADDRESS                   * 39180000
*                R3 = CATEGORY NUMBER OF THE TERMINATING CHARACTER    * 39200000
*                R10= TYPE FLAG NUMBER OF THE TERMINATING CHARACTER   * 39220000
*                R15= STRING/SYMBOL MOVE LENGTH                       * 39240000
*                                                                     * 39260000
*  LINKAGE IS  BAL  RETURN,GSCAN                                      * 39280000
*********************************************************************** 39300000
         SPACE 3                                                        39320000
GSCAN    EQU   *                                                        39340000
         ST    INPTR,FPTRSV             SAVE BEGIN ADDRESS FOR V.T.     39360000
         ST    INDEXP,OFPTRSV                                           39380000
GSCAN1   EQU   *                                                        39400000
         ST    INPTR,MEZZOPTR           SAVE MEZZO POINTER              39420000
         ST    RETURN,EDTSVX            SAVE RETURN POINT               39440000
         MVI   GSUMRY,D0                CLEAR SCAN RESULT BYTE          39460000
GSCNMOP  EQU   *                                                        39480000
         GOIF  GQST,ON=GSCQMD           BRANCH IF IN QUOTE MODE         39500000
         L     LINK,ATRTEST             POINT TO TRTEST                 39520000
         BALR  RETURN,LINK              GO TO TRTEST                    39540000
GSCFAN   AR    R3,R3                    DOUBLE THE CATEG NUMBER         39560000
         LH    R14,GSCTBL(R3)           PICK UP REL ENTRY               39580000
         B     GSCTBL(R14)              AND FAN OUT                     39600000
GSCQMD   MVC   SPECHAR(L'QMDTBL),QMDTBL STOP ON QT, &, BLANK, ENDATA    39620000
         LA    PARM,D2                  DON'T DO SYN STG SEARCH         39640000
         LA    RETURN,GSCFAN            GET RETURN POINT                39660000
         L     LINK,ATRT02              POINT TO TRT02                  39680000
         BR    LINK                     GO TRT                          39700000
         EJECT                                                          39720000
GSCTBL   EQU   *                        CATEGORIES                      39740000
         DC    AL2(GSADV-GSCTBL)        0 = DECIMAL                     39760000
         DC    AL2(GSALFA-GSCTBL)       1 = ALPHAMERIC                  39780000
         DC    AL2(GSAMPR-GSCTBL)       2 = AMPERSAND                   39800000
         DC    AL2(GBLK-GSCTBL)         3 = ,=.) OR BLANK               39820000
         DC    AL2(GSCIMP-GSCTBL)       4 = (                           39840000
         DC    AL2(GQOTS-GSCTBL)        5 = QUOTE                       39860000
         DC    AL2(GSCIMP-GSCTBL)       6 = +-*/                        39880000
         DC    AL2(LTRLQT-GSCTBL)       7 = L' I' S' K' N'              39900000
         DC    AL2(LTRQT-GSCTBL)        8 = X' B' C' SDT                39920000
         DC    AL2(LTRQTIN-GSCTBL)      9 = T'                          39940000
         DC    AL2(GSALFA-GSCTBL)       10 = BOOLEAN OPERATOR           39960000
         DC    AL2(GSALFA-GSCTBL)       11 = RELATIONAL OPERATOR        39980000
         DC    AL2(GENDT-GSCTBL)        12 = NON-ASSEMBLER              40000000
         EJECT                                                          40020000
         SPACE 3                                                        40040000
GENDT    EQU   *                                                        40060000
         C     INPTR,ENDATA             HAVE WE PAST ENDATA             40080000
         BNL   GSVTENT                  YES, WRAP UP VT                 40100000
GSCIMP   OI    GSUMRY,RMPURE            INDICATE IMPURITY               40120000
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    40140000
         B     GSCNMOP                  AND PLOD ONWARD                 40160000
GSS10    LR    INPTR,R1                 PLOD ONWARD                     40180000
         B     GSCIMP                                                   40200000
*                                                                       40220000
GBLK     EQU   *                                                        40240000
         CLI   D0(INPTR),JBLANK         TEST IF BLANK TERMINATES        40260000
         BE    GBLK10                   YES                             40280000
         CLI   D0(INPTR),JPERIOD        DID PERIOD TERMINATE            40300000
         BNE   GSCIMP                   BRANCH IF NOT                   40320000
*                                       ELSE PRAY FOR A S.S.            40340000
GSSSYM   EQU   *                                                        40360000
         TM    GSUMRY,BITFF             HAS ANYTHING BEEN DONE          40380000
         BNZ   GSCIMP                   BRANCH IF YES                   40400000
         GOIF  SKPNAME,ON=GSCIMP        BRANCH IF SKIPPING TO OP CODE   40420000
         LA    INPTR,D1(,INPTR)         FORGET THE DOT FOR A WHILE      40440000
         LA    PARM,D2                  GO TRT THE TRAILING STRING      40460000
         L     LINK,ATRT02              POINT TO TRT02                  40480000
         BALR  RETURN,LINK              W/O SYNTACTIC STRING SEARCH     40500000
         BCT   R3,GSS10                 CONTINUE IF NOT AN STRING       40520000
         CLI   D0(INPTR),JA             AND DIGIT HEAD IS               40540000
         BL    GSS10                    UNDESIRABLE. EDIT AS C STRING   40560000
         CLI   D0(R1),JBLANK            AND TERMINATOR MUST BE A BLANK  40580000
         BNE   GSS10                    ELSE EDIT AS C STRING           40600000
         GOIF  SENAME,ON=GSS20          BRANCH IF EDITING NAME FIELD    40620000
         GOIF  SEOPND,OFF=GSS10         BRANCH IF NOT EDITING OPERAND   40640000
         CLI   OCSAVE,JTAGO                                             40660000
         BE    GSS20                    BRANCH IF AGO STATEMENT         40680000
         CLI   OCSAVE,JTAIF                                             40700000
         BNE   GSS10                    BRANCH IF NOT AIF STMT          40720000
GSS20    EQU   *                                                        40740000
         BCTR  INPTR,0                  REMEMBER THE FORGOTTEN DOT      40760000
         LA    R15,D1(,R15)             AND ITS LENGTH                  40780000
         CH    R15,H8                   TEST IF LENGTH LE 8             40800000
         BNL   GSS10                    EDIT AS C STRING IF GE 8        40820000
         MVI   GSUMRY,RSSYM             SET ON SS INDICATOR             40840000
         BAL   RETURN,MTENT             GO MAKE D ENTRY                 40860000
GSADV    AR    INPTR,R15                                                40880000
         B     GSCIMP                   ADVANCE POINTER                 40900000
GSALFA   EQU   *                                                        40920000
         CLI   D0(R1),JBLANK            TEST IF TERMINATOR A BLANK      40940000
         BNE   GSADV                    ADVANCE POINTER AND CONT SCAN   40960000
         GOIF  SKPNAME,ON=GSA05         BRANCH IF SKIPPING NAME FIELD   40980000
* CHARACTER STRING WILL NOT BE BUILT IN MT UNTILL ENCOUNTERED           41000000
* A TRAILING BLANK OR AMPERSAND                                         41020000
         TM    GSUMRY,BITFF             ANYTHING DONE YET               41040000
         BNE   GSA10                    BRANCH IF YES                   41060000
         CH    R15,H8                   IT'S AN OS. HOW ABOUT LENGTH    41080000
         BNL   GSA10                    LONGER THAN 8 IS EDITED AS STG  41100000
         MVI   GSUMRY,ROSYM             A GOOD OS                       41120000
         BAL   RETURN,MTENT             GO MAKE D ENTRY                 41140000
GSA05    LR    INPTR,R1                 BUMP TO THE TERMINATOR          41160000
         B     GBLK10                   WHICH IS A BLANK                41180000
GSA10    GOIF  METSW,OFF=GSA05          BRANCH IF THUS FAR NO MT BUILT  41200000
         GOIF  GQST,ON=GSADV            TOO EARLY TO BUILD MT IF IN QT  41220000
         BAL   RETURN,MTENT10           ELSE FINISH BUILDING MT         41240000
         B     GSA05                    GO TO FIELD TERMINATOR          41260000
GSAMPR   EQU   *                                                        41280000
         CLI   D1(INPTR),JAMPER         TEST IF DOUBLE AMPERSAND        41300000
         BNE   GSM10                    BRANCH IF NOT                   41320000
         LA    INPTR,D1(,INPTR)         ELSE, EDIT AS C STRING          41340000
         B     GSCIMP                   '&&' EDITED AS CHARACTER STRING 41360000
GSM10    EQU   *                                                        41380000
         GOIF  (SKPNAME,PROTOCAL),ANY=GSCIMP BR IF SKIPPING TO OP CODE  41400000
         CLI   OCSAVE,JTOPSYN           VAR SYM IN NAME/OPND OF OPSYN   41420000
         BNE   GSM15                    NO, GO TO DIR ROUTINE           41440000
         GOIF  SNMFND,OFF=ILOPSYN       VAR SYM IN OPND FIELD OF OPSYN  41460000
* VAR SYMBOL IN NAME FIELD OF OPSYN IS DISALLOWED--IT'S SCANNED AND     41480000
*  ENTERED INTO THE TEXT, BUT THE DIRECTORY ROUTINE IS BYPASSED--       41500000
*  THE ERROR ITSELF WILL BE DETECTED IN THE OPSYN ROUTINE               41520000
         SET   RVSYM,ON                 ERR-VAR SYM IN OPSYN NAME FIELD 41540000
         LA    INPTR,D1(,INPTR)         BUMP OVER '&' AND SCAN TO END   41560000
         LA    R10,D2                   OF VAR SYM, NO SYNTACTIC SCAN   41580000
         L     LINK,ATRT01              POINT TO TRT01                  41600000
         BALR  RETURN,LINK              SCAN THRU END OF SYM, ISOLATE   41620000
         B     GSA05                    NOW, GO PUT OUT THE ISOLATED SY 41640000
GSM15    EQU   *                                                        41660000
         BAL   RETURN,MTENT10           GO OUTPUT PRIOR MT              41680000
         LR    INPTR,R1                 UPDATE INPTR                    41700000
         BAL   RETURN,VARSYM            SCAN V.S. AND BUILD MT          41720000
* VARSYM ROUTINE SHOULD INDICATE RVSYM AND SET ON METSW, MAKE D ENTRY   41740000
* AND BUILD MT. AFTER RETURN, UPDATE INPTR TO NEXT SCAN LOCATION.     * 41760000
         LR    INPTR,R1                 POINT TO NEXT SCAN LOCATION     41780000
GSM20    EQU   *                                                        41800000
         MVI   ATTRSV,D0                RESET SYSLIST FLAGS             41820000
         CLI   D0(INPTR),JPERIOD        TEST IF TERMINATOR A DOT        41840000
         BNE   GSCNMOP                  BRANCH IF NOT                   41860000
         LA    INPTR,D1(,INPTR)         YES, IT IS A CONCATENATION      41880000
         ST    INPTR,MEZZOPTR           UPDATE POINTERS AND             41900000
         B     GSCNMOP                  CONTINUE SCANNING               41920000
GBLK10   EQU   *                                                        41940000
         GOIF  GQST,OFF=GSQXT           THAT'S END OF FLD IF NOT QT MD  41960000
         B     GQOTLP                   ELSE KEEP SCANNING              41980000
         SPACE                                                          42000000
LTRLQT   CLI   D0(INPTR),JL             TEST IF L' TYPE                 42020000
         BNE   LTRQTIN                  NOT WANTED IF NOT               42040000
         CLI   D2(INPTR),JA             LOOK AHEAD FOR ....             42060000
         BL    LTRQT                    POSSIBLE LONG FORM              42080000
         CLI   D2(INPTR),JAT            IF FOLLOWED BY ALPHA            42100000
         BNH   GSS10                    FORGET IT                       42120000
         CLI   D2(INPTR),JASTER                                         42140000
         BE    GSS10                    INCLUDING L'*                   42160000
         CLI   D2(INPTR),JAMPER         IF FOLLOWED BY AMPER   @AX16943 42170000
         BE    GSS10                    PROCEED CHECKING       @AX16943 42172000
LTRQTIN  GOIF  (SKPNAME,PROTOCAL),ANY=GSS10                             42180000
         SPACE                                                          42200000
LTRQT    OI    GSUMRY,RMPURE            IMPURITY                        42220000
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    42240000
         SPACE                                                          42260000
GQOTS    SET   GQST,FLIP                FLIP THE ODD QUOTE CHECKER      42280000
         OI    GSUMRY,RQTSTG            INDICATE IN QUOTE MODE          42300000
         GOIF  SEOPCD,OFF=GQOTLP        BR IF NOT OPCODE       @OY04864 42310005
         GOIF  GQST,OFF=GQOTLP          BR IF NOT ODD QOUTE MD @OY04864 42312005
         CLI   D1(INPTR),JAMPER         ONLY '& VALID FOR-     @OY04864 42314005
         BE    GQOTLP                   QOUTE IN OPCODE        @OY04864 42316005
         SET   GQST,OFF                 RESET ODD QOUTE CHK    @OY04864 42318005
         GOIF  SKPNAME,ON=GQOTERR       BR IF NO NAME FIELD    @OY04864 42318405
         BAL   R12,VTENT                ELSE, LOG VT           @OY04864 42318805
GQOTERR  B     INVOP                    LOG HARD ERROR         @OY04864 42319205
GQOTLP   LA    INPTR,D1(,INPTR)         BUMP POINTER                    42320000
         B     GSCNMOP                  KEEP SCANNING                   42340000
         SPACE                                                          42360000
GSVTENT  L     INPTR,ENDATA             BE SURE PNT TO END     @OX07300 42370005
         GOIF  GQST,ON=ODDQT            ERR IF NO ENDING QUOTE @OX07300 42380005
         SPACE                                                          42400000
GSQXT    GOIF  SKPNAME,ON=GSQXT1        BRANCH IF SKIPPING NAME FIELD   42420000
         BAL   R12,VTENT                ELSE, LOG VT                    42440000
         SPACE                                                          42460000
GSQXT1   ST    INPTR,FPTRSV             SAVE NEXT LOC TO BE EDITED      42480000
         L     RETURN,EDTSVX            RESTORE RETURN POINT            42500000
         BR    RETURN                   RETURN                          42520000
         SPACE                                                          42540000
ODDQT    LR    R0,R1                                                    42560000
         BAL   TLINK,ABSERR             LOG ERROR                       42580000
         DC    AL1(SEV35)               .                               42600000
         DC    AL1(ERR35)               NO TERMINATING QUOTE            42620000
         LR    R1,R0                                                    42640000
         SET   GQST,OFF                                                 42660000
         B     GSQXT                    GO LOG VT                       42680000
         EJECT                                                          42700000
*********************************************************************** 42720000
* MTENT ROUTINE ONLY ENTERS ORDINARY SYMBOLS, SEQUENCE SYMBOLS AND      42740000
* CHARACTER STRINGS. VARIABLE SYMBOLS ARE ENTERED IN VARSYM ROUTINE.    42760000
* ORDINARY SYMBOL DEFINITION AND SEQUENCE SYMBOL DEFINITION ARE ENTERED 42780000
* INTO DIRECTORY AFTER THE EDITED TEXT FOR THE STATEMENT HAS BEEN       42800000
* COMPLETELY BUILT. SWITCH SDENT IS DESIGNED FOR SUCH PURPOSE.          42820000
* THE REST OF THE SYMBOLS ARE ENTERED INTO DIRECTORY AS SOON AS A       42840000
* SYMBOL IS RECOGNIZED AND FOUND TO BE A VALID ONE.                     42860000
*********************************************************************** 42880000
         SPACE 3                                                        42900000
MTENT    ST    RETURN,EDTSVY                                            42920000
         TM    GSUMRY,ROSYM             TEST IF O.S.                    42940000
         BO    MTTOS                    BRANCH IF YES                   42960000
         TM    GSUMRY,RSSYM             TEST IF S.S.                    42980000
         BNO   MTCSTG                   ASSUME C STRING IF NOT S.S.     43000000
         SPACE                                                          43020000
MTTSS    GOIF  SENAME,OFF=SSRTEMP  ******** T ********                  43040000
         MVI   SDENTR,SEQSYMBD          SAVE SS DEFINITION INDEX        43060000
         ST    R15,NAML                 SAVE NAME FIELD MOVE LENGTH     43080000
         ST    INPTR,NAMP               AND POINTER FOR                 43100000
MTSVPTR  SET   SDENT,ON                 POINT OF DEFINITION             43120000
         SPACE                                                          43140000
MTSVRTN  L     RETURN,EDTSVY            RESTORE POINTER                 43160000
         BR    RETURN                   THEN RETURN                     43180000
*********************************************************************** 43200000
         SPACE                                                          43220000
SSRTEMP  GOIF  SEOPND,OFF=MTCSTG        BRANCH IF NOT IN OPERAND        43240000
         MVI   DDNDX1,SEQSYMBR          SET UP INDEX FOR BR TO DIR RTN  43260000
         LR    PARM,INPTR               POINT TO THE SYMBOL             43280000
         LR    PARAM2,TWKREG2           AND THE LENGTH                  43300000
         BAL   R3,DIRENT                LOG SS REFERENCE                43320000
         MVC   D0(D4,INDEXP),D0(R11)    BUILD MT                        43340000
         LA    INDEXP,DENTLNG(,INDEXP)  BUMP 2 EXTRA BYTES FOR GEN'TOR  43360000
         B     METON                    GO SET METSW ON                 43380000
*********************************************************************** 43400000
MTTOS    GOIF  SENAME,OFF=MTTOS10       BRANCH IF NOT NAME FIELD        43420000
         GOIF  SMDEF,ON=GSA05           NO D ENTRY IF IN MACRO DEF.     43440000
         MVI   SDENTR,ORDSYMBD          SAVE OS DEF INDEX               43460000
         ST    INDEXO,NAMP              AND BEGIN POINT OF ET           43480000
         B     MTSVPTR                  GO TO RETURN                    43500000
         SPACE                                                          43520000
MTTOS10  GOIF  SEOPCD,OFF=MTCPY         BRANCH IF IN OPERAND            43540000
* MAKE IOC AND FLAGA ENTRY AFTER RETURN TO MAINLINE LOGIC               43560000
         LR    PARM,INPTR               GET OP CODE FIELD ADDRESS       43580000
         LR    PARAM2,TWKREG2           AND ITS MOVE LENGTH             43600000
         MVI   DDNDX1,OPERCODE          INDICATE OP CODE SEARCH         43620000
         BAL   R3,DIR10                 GO                              43640000
         ST    PARAM2,OCPTRSV           SAVE IOC POINTER                43660000
         MVI   OCSAVE,D0                ZERO IN CASE OF MACRO CALL      43670000
         TM    IOCID,BIT0+BIT1          TEST IF MACRO CALL              43680000
         BZ    MTTOS11                  BRANCH IF MACRO CALL/NAME       43700000
         BO    MTSVRTN                  BRANCH IF TWO BYTE OP CODE      43720000
         MVC   OCSAVE,D1(PARAM2)        PRESERVE ASSEMBLER OP CODE      43740000
         B     MTSVRTN                  GO TO EXIT                      43760000
         SPACE                                                          43780000
MTTOS11  GOIF  SXPRTO,ON=MTSVRTN        PROTOTYPE IS NOT WANTED         43800000
         MVC   D0(D3,INDEXP),D0(PARAM2) MAKE MT ENTRY IF MACRO CALL     43820000
         LA    INDEXP,D3(,INDEXP)       AND ADVANCE POINTER             43840000
METON    SET   METSW,ON                 INDICATE META TEXT BUILT        43860000
         B     MTSVRTN                  GO TO RETURN                    43880000
         SPACE                                                          43900000
MTCPY    GOIF  SCOPY,OFF=MTCSTG         BRANCH IF NOT EDITING COPY STMT 43920000
         MVI   COPYCODE,JBLANK          YES. CLEAR COPY CODE SAVE AREA  43940000
         MVC   COPYCODE+1(L'COPYCODE-1),COPYCODE                        43960000
         EX    TWKREG2,MVCOPY           AND SAVE COPY CODE              43980000
         BR    RETURN                   DO NOT BUILD MT                 44000000
MTCSTG   EQU   *                        BUILD C STRING IN MT            44020000
MTENT10  L     INPTR,MEZZOPTR                                           44040000
         LR    R14,R1                                                   44060000
         SR    R14,INPTR                TEST IF ANYTHING TO BE PUT      44080000
         BCR   BZ,RETURN                BRANCH IF NO                    44100000
         MVI   D0(INDEXP),JTMCS         ENTER FLAG                      44120000
         STC   R14,D1(,INDEXP)          AND ENTER IT                    44140000
         LA    INDEXP,D2(,INDEXP)       BUMP POINTER                    44160000
         BCTR  R14,0                    MAKE IT MOVE LENGTH             44180000
         EX    R14,MTXTMV               MOVE STRING TO MT               44200000
MTEXIT   LA    INDEXP,D1(R14,INDEXP)    BUMP TO NEXT AVAILABLE LOCATION 44220000
         ST    R1,MEZZOPTR              UPDATE MEZZOPTR                 44240000
         BR    RETURN                   RETURN                          44260000
MTXTMV   MVC   D0(1,INDEXP),D0(INPTR)   OFF-THE-LINE MOVE               44280000
MVCOPY   MVC   COPYCODE(0),INPOPR       OFF-THE-LINE MOVE               44300000
         EJECT                                                          44320000
*********************************************************************** 44340000
*  RECURSIVE ROUTINE TO SCAN VARIABLE SYMBOLS                           44360000
*  THE LINKAGE IS BAL RETURN,VARSYM                                     44380000
*********************************************************************** 44400000
         SPACE 3                                                        44420000
VARSYM   BAL   R12,RENTSTK              MAKE RECURSION STACK ENTRY      44440000
*BUMP THE POINTER PAST THE '&' FOR THE DIRECTORY ROUTINE                44460000
         ST    INPTR,TPSAVE             SAVE BEGIN PT FOR SNAP          44470000
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    44480000
         LA    R10,D2                   NO SYNTACTIC STRING SEARCH      44500000
         L     LINK,ATRT01              POINT TO TRT01                  44520000
         BALR  RETURN,LINK              GO ISOLATE V.S. TRAILER WHICH   44540000
         CH    R3,H1                    MUST BE A/N STRING              44560000
         BNE   ILGVS                    ELSE, LOG ERROR                 44580000
         CH    R15,H6                   AND LENGTH MUST BE LE 8         44600000
         BH    ILGVS                    ELSE, LOG ERROR                 44620000
* MAKE DIRECTORY ENTRY FOR VS - DISTINGUISH DEF FROM REF FIRST          44640000
* AT ENTRY R11 CONTAINS THE MOVE LENGTH (INCL. &) OF THE SYMBOL         44660000
*          R10 POINTS TO THE SYMBOL  /&NAME/(/D/)/ WHERE DIMENSION      44680000
*              IS OPTIONAL                                              44700000
* ON RETURN  XIJ TELLS X1A THROUGH FLGBYT WHETHER THE SYMBOL IS A       44720000
* SYSTEM VARIABL, DIMENSIONED AND WHETHER IT IS SYSLIST                 44740000
*          R11 POINTS TO A 6-BYTE LOCATION CONTAINING /F/PTR/DM/        44760000
* IF ERROR FOUND IN D ROUTINE ON THE V.S. ENTERED  CONCODE WILL TELL.   44780000
*                                                                       44800000
*          SYSECT/SYSNDX/SYSLIST IN OPEN CODE IS RETURNED WITH ERROR    44820000
*          CODE IN CONCODE (ERROR #6- VS NOT PREVIOUSLY DEFINED.)       44840000
         LR    PARAM2,TWKREG2           GET SYMBOL LENGTH               44860000
         LR    PARM,INPTR               POINT TO THE SYMBOL             44880000
         MVI   DDNDX1,VARBSYMR          SET UP INDEX FOR BR TO DIR RTN  44900000
         GOIF  SGBLCL,OFF=VSDENT        BRANCH IF YES                   44920000
         MVC   FLGBYT(L'FLGBYT),FLAGBT  REDEFINE FLGBYT                 44940000
         LR    INPTR,R1                 SKIP OVER V.S.                  44960000
         CLI   D0(INPTR),JLPARN         TEST IF LEFT PAREN FOLLOWS      44980000
         BNE   VSDNDX                   NO, UNDIMENSIONED               45000000
         BAL   RETURN,DSCAN1            YES, GO SCAN DSDT               45020000
         B     ILDIM                    ILLEGAL DIMENSION               45040000
         LTR   TWKREG1,TWKREG1          DIMENSION OF 0 IS NOT ALLOWED   45060000
         BNP   ILDIM                    ILLEGAL DIMENSION               45080000
         CLI   D0(INPTR),JRPARN         TEST DELIMITER FOR RIGHT PAREN  45100000
         BNE   ILDIM                    ERROR IF NOT                    45120000
         SET   VDIM,ON                  INDICATE DIMENSIONED            45140000
         LA    INPTR,D1(,INPTR)         BUMP OVER R-PAREN               45160000
         CH    TWKREG1,H32K             NOR CAN IT BE GT 32K            45180000
         BH    HIDIM                    ERROR, MAX DIMENSION EXCEEDED   45200000
         STH   TWKREG1,JHWORD1          TELL IT TO DIRECTORY ROUTINE    45220000
VSDNDX   EQU   *                                                        45240000
         LR    R1,INPTR                 UPDATE POINTER                  45260000
         L     INPTR,OPNDPTR            IN CASE OF BACK UP              45280000
         MVI   DDNDX1,VARBSYMD          INDICATE DEFINITION             45300000
VSDENT   BAL   R3,DIRENT                WHATEVER IT IS GO MAKE D ENTRY  45320000
         TM    DERRCD,BITFF             TEST IF ERROR FOUND             45340000
         BNZ   CLEANUP                  WRAP UP STATEMENT               45360000
         GOIF  SENAME,ON=VS10           BR IF EDIT NAME FIELD   OY06129 45370031
         MVI   GSUMRY,RVSYM             INDICATE V.S.           OY06129 45372031
VS10     OI    GSUMRY,RVSYM             INDICATE V.S.           OY06129 45380031
         GOIF  SGBLCL,ON=REXSTK         EXIT IF IT WAS DEFINITION       45400000
         L     R14,RAVSP                                                45420000
         MVC   RSTKVST(L'FLGBYT),FLGBYT SAVE FLGBYT                     45440000
         NI    ATTRSV,D0                CLEAN UP ATTRSV                 45460000
         MVC   D0(D6,INDEXP),D0(R11)    ENTER VS REF MT                 45480000
         CLI   FLGBYT,XDMSLS            TEST IF UNSUBSCRIPTED SYSLIST   45500000
         BNE   VS20                     BRANCH IF NOT                   45520000
         XC    D4(D2,INDEXP),D4(INDEXP) DUMMY UP DIMENSION BYTES        45540000
VS20     EQU   *                                                        45560000
         LA    INDEXP,DENTLNG(,INDEXP)  BUMP POINTER                    45580000
         GOIF  VDIM,OFF=VSXIT           EXIT IF NOT DIMENSIONED         45600000
         LA    INPTR,D0(R15,INPTR)      BUMP POINTER                    45620000
         BAL   R3,PFXRENT               TELL POSTFIXER                  45640000
         DC    AL2(JTMDIM)              IT IS DIMENSIONED               45660000
         BAL   R3,PFXRENT               LOG L-PAREN                     45680000
         DC    AL2(JTMLPAR)             LEFT PAREN                      45700000
         BAL   R12,APARCT               UP PAREN COUNT                  45720000
         MVI   MCALL,MCLA               INDICATE SCAN AS SETA           45740000
         ST    INPTR,TPSAVE1            SAVE FOR SNAP           OX00224 45750001
         MVC   JHWORD2(L'PARMSTAT),PARMSTAT SAVE DMIENT         OX00411 45752001
         SET   DMIENT,OFF               CLEAR DMIENT            OX00411 45754001
         BAL   RETURN,METASCAN          SCAN FIRST SUBSCRIPT            45760000
         L     R14,RAVSP                                                45780000
         OI    RSTKATR,AT1              ASSUME SINGLE SUBSCRIPT         45800000
         CLI   D0(INPTR),JCOMMA         IS TERMINATOR A COMMA           45820000
         BNE   VS25                     BRANCH IF NOT           OX05801 45840004
         TM    RSTKVST,VSLS             ONLY SYSLIST MAY HAVE DOUBLE    45860000
         BZ    VS32                     SUBSCRIPT, ELSE ERROR  @OX06626 45880004
         OI    RSTKATR,ATSUBS           OK, GOOD DOUBLE SUBSCRIPT       45900000
         BAL   R3,PFXRENT               PUT COMMA IN POSTFIXER STACK    45920000
         DC    AL2(JTMCOM)              COMMA                           45940000
         BAL   RETURN,METASCAN          SCAN SECOND SUBSCRIPT           45960000
VS25     EQU   *                                                OX05801 45962031
         TM    JHWORD2,DMIENT           ENTRY FROM MIPROTO      OX00411 45970001
         BZ    VS30                     BR IF NOT               OX00411 45972001
         SET   DMIENT,ON                SET DMIENT              OX00411 45974001
VS30     EQU   *                                                        45980000
         CLI   D0(INPTR),JRPARN         TEST IF RIGHT PAREN TERMINATES  46000000
         BNE   VS32                     LOG ERROR IF NOT       @0X06626 46020004
         BAL   R3,PFXRENT               LOG R-PAREN                     46040000
         DC    AL2(JTMRPAR)             RIGHT PAREN                     46060000
         BAL   R12,DPARCT               AND DECREMENT PAREN COUNT       46080000
         LR    R1,INPTR                 UPDATE POINTER                  46100000
VSXIT    EQU   *                                                        46120000
         SET   (METSW,GSUBS),ON         INDICATE SUBSTITUTION/MT BUILT  46140000
         ST    R1,MEZZOPTR              UPDATE MEZZO POINTER            46160000
         B     REXSTK                   GO TO RECURSIVE EXIT            46180000
VS32     EQU   *                                                        46190004
         TM    JHWORD2,DMIENT           ENTRY FROM MIPROTO     @OX06626 46192004
         BZ    INVSUBS                  SUBSCRIPT ERROR        @OX06626 46194004
         SET   DMIENT,ON                                       @OX06626 46196004
         B     INVSUBS                  ERROR FROM MI          @OX06626 46198004
         EJECT                                                          46200000
*   METASCAN DOES SYNTACTIC SCAN FOR SETA, SETB, SETC, AIF AND ACTR     46220000
*   OPERANDS.  ACTR OPERAND IS SCANNED AS SETA OPERAND, AND             46240000
*   AIF OPERAND IS SCANNED AS SETB OPERAND.                             46260000
*   AT ENTRY, REGISTERS 5,9,11,12,14 ARE AVAILABLE.                     46280000
*   REGISTER  5 IS USED AS MTABLE INDEX. TRANPARENT THROUGH ALL         46300000
*               RECURSIVE CALLS.                                        46320000
*   REGISTER 9 IS USED FOR RETURN LINKAGE ON EACH RECURSIVE CALL.       46340000
*   REGISTER 12 POINTS TO CURRENT ENTRY IN MTABLE.                      46360000
*   REGISTERS 11 AND 14 ARE SCRATCH REGISTERS.                          46380000
*   ENTRY CODE MCALL INDICATES THE TYPE OF SCAN TO BE MADE: SETA,       46400000
*               SECT, OR OTHERS.                                        46420000
*   EXIT CODE IN REG 3 AS FOLLOWS                                       46440000
*                0 = SIMPLE STATE                                       46460000
*                1 = COMPLEX STATE                                      46480000
*                2 = SETA EXPRESSION                                    46500000
*                3 = SETC EXPRESSION                                    46520000
*                                                                       46540000
*   LINKAGE IS BAL  RETURN,METASCAN                                     46560000
         SPACE 3                                                        46580000
METASCAN EQU   *                                                        46600000
         BAL   R12,RENTSTK              ENTER VIA RECURSIVE ENTRY       46620000
         SET   METSW,ON                 ASSUME THERE WILL BE M.T.       46640000
         SR    MTBLNDX,MTBLNDX          INIT. INDEX OF ZERO             46660000
         B     MSCVRT                   GO TEST FLAG                    46680000
*        TRANSITION TO NEW STATE                                        46700000
*        ***********************                                        46720000
MSADV    LA    MTBLNDX,D1(MTBLNDX)      ADVANCE INDEX                   46740000
MSCVRT   LA    MTBLENT,MTABLE(MTBLNDX)  CONVERT TO ABSOLUTE ADDRESS     46760000
         TM    D0(MTBLENT),EXNXNT       TEST TYPE OF FLAG IN MTABLE     46780000
         BO    MEXFR                    EXECUTE THE LIST THAT FOLLOWS   46800000
         BM    MCATEG                   MATCH TRT CATEG W/ THAT IN TBL  46820000
         L     LINK,ATRTEST             POINT TO TRTEST                 46840000
         BALR  RETURN,LINK              TRT STRING AT INPTR             46860000
         B     MSADV                    GO FIND OUT WHAT TO DO NEXT     46880000
*   MATCH TRT CATEG AGAINST CATEG IN MTABLE FOR RIGHT PATH              46900000
*   ******************************************************              46920000
MCATEG   IC    TWKREG1,D0(,MTBLENT)     OBTAIN CURRENT LIST CATEG ENTRY 46940000
         N     TWKREG1,F15              MASK OUT UNWANTED BITS          46960000
         CR    TWKREG1,R3               COMPARE AGAINST TRT CATEGORY    46980000
         BE    MEXFR                    TRANSFER INTO ACTION IF MATCH   47000000
         IC    TWKREG1,D0(,MTBLENT)     ELSE, TRY NEXT LIST             47020000
         SRL   TWKREG1,D4               ISOLATE LENGTH OF CURRENT LIST  47040000
         LA    MTBLNDX,D0(TWKREG1,MTBLNDX) COMPUTE NEXT LIST ADDRESS    47060000
         B     MSCVRT                   GO CONVERT INTO ABSOLUTE ADDR   47080000
*        EXECUTE CURRENT LIST AT MTBLNDX                                47100000
*        *******************************                                47120000
MEXFR    LA    MTBLNDX,D1(MTBLNDX)      ADVANCE POINTER                 47140000
MEXFR1   IC    TWKREG1,MTABLE(MTBLNDX)  PICK UP ROUTINE NUMBER FOR      47160000
         N     TWKREG1,F31              COMPUTED GO TO BY MASK OUT      47180000
         AR    TWKREG1,TWKREG1          UNWANTED BITS THEN DOUBLE IT    47200000
         LH    TWKREG1,MBRTBL-D2(TWKREG1) PICK UP REL ADDRESS           47220000
         B     MBRTBL(TWKREG1)          FAN OUT TO ABSOLUTE ROUTINE ADR 47240000
         EJECT                                                          47260000
*   METASCAN BRANCH TABLE                                               47280000
         SPACE 3                                                        47300000
MBRTBL   EQU   *                                                        47320000
MBTA     DC    AL2(ESETA-MBRTBL)        .                               47340000
MBTC     DC    AL2(ESETC-MBRTBL)        .                               47360000
MBTBLK   DC    AL2(EBLANK-MBRTBL)       .                               47380000
MBTBOP   DC    AL2(DBLOP-MBRTBL)        .                               47400000
MBTARE   DC    AL2(ARENT-MBRTBL)        .                               47420000
MBTARE1  DC    AL2(ARENT10-MBRTBL)      .                               47440000
MBTSTC   DC    AL2(DSETC-MBRTBL)        .                               47460000
MBTVBOP  DC    AL2(DVBLOP-MBRTBL)       .                               47480000
MBTAOP   DC    AL2(DAROP-MBRTBL)        .                               47500000
MBTROP   DC    AL2(DRELOP-MBRTBL)       .                               47520000
MBTATM   DC    AL2(ARTERM-MBRTBL)       .                               47540000
MBTDUP   DC    AL2(DUPC-MBRTBL)         .                               47560000
MBTATR   DC    AL2(DATTR-MBRTBL)        .                               47580000
MBTVSM   DC    AL2(EVSYM-MBRTBL)        .                               47600000
MBTXSA   DC    AL2(XSA-MBRTBL)          .                               47620000
MBTXSB   DC    AL2(XSB-MBRTBL)          .                               47640000
MBTXSC   DC    AL2(XSC-MBRTBL)          .                               47660000
MBTXSX   DC    AL2(XSX-MBRTBL)          .                               47680000
MBTINV   DC    AL2(ILGLXP1-MBRTBL)      .                               47700000
MBTILG   DC    AL2(ILGLXPBR-MBRTBL)       .                             47720000
MBTCPR   DC    AL2(DCPR-MBRTBL)         .                               47740000
MBTDSDT  DC    AL2(BDSDT-MBRTBL)        .                               47760000
DCPR     EQU   MSADV                                                    47780000
         SPACE 3                                                        47800000
*   BRANCH TABLE ENTRY SEQUENCE EQUATED                                 47820000
ETSETA   EQU   (MBTA-MBRTBL)/2+1        TEST SETA ENTRY                 47840000
ETSETC   EQU   (MBTC-MBRTBL)/2+1        TEST SETC ENTRY                 47860000
ETBLANK  EQU   (MBTBLK-MBRTBL)/2+1      TEST IF BLANK                   47880000
ETBOOL   EQU   (MBTBOP-MBRTBL)/2+1      TEST IF BOOLEAN OPERATOR        47900000
EPSETA   EQU   (MBTARE-MBRTBL)/2+1      L-PAREN RECURSIVE CALL          47920000
EPSETBE  EQU   (MBTARE1-MBRTBL)/2+1     L-PAREN RECURSIVE CALL          47940000
EPSETC   EQU   (MBTSTC-MBRTBL)/2+1      PROCESS SETC EXPR               47960000
EPMBOOL  EQU   (MBTVBOP-MBRTBL)/2+1     PROCESS BOOLEAN OPERATOR        47980000
EPAROP   EQU   (MBTAOP-MBRTBL)/2+1      PROCESS ARITHMETIC OPERATOR     48000000
EPRELOP  EQU   (MBTROP-MBRTBL)/2+1      PROCESS RELATIONAL OPE-ATOR     48020000
EPTRMA   EQU   (MBTATM-MBRTBL)/2+1      PROCESS ARITHMETIC TERM         48040000
EPDUPE   EQU   (MBTDUP-MBRTBL)/2+1      PROCESS DUPLICATION FACTOR-SETC 48060000
EPATTR   EQU   (MBTATR-MBRTBL)/2+1      PROCESS ATTRIBUTE NOTATION      48080000
EPVSYM   EQU   (MBTVSM-MBRTBL)/2+1      PROCESS VARIABLE SYMBOL         48100000
EXITA    EQU   (MBTXSA-MBRTBL)/2+1      ARITHMETIC EXIT                 48120000
EXITB    EQU   (MBTXSB-MBRTBL)/2+1      BOOLEAN(COMPLEX) EXIT           48140000
EXITC    EQU   (MBTXSC-MBRTBL)/2+1      SETC EXIT                       48160000
EXITX    EQU   (MBTXSX-MBRTBL)/2+1      UNCATEGORIZED EXIT              48180000
EPDSDT   EQU   (MBTDSDT-MBRTBL)/2+1     DSDT IN SETB OPND PAREN'D       48200000
EPINVLD  EQU   (MBTINV-MBRTBL)/2+1      INVALID OPERAND FORMAT          48220000
EPILXP   EQU   (MBTILG-MBRTBL)/2+1      ILEGAL LOGICAL OPERATOR         48240000
EXCPR    EQU   (MBTCPR-MBRTBL)/2+1      EXECUTE COMPARISON              48260000
*                                                                       48280000
EXTRT    EQU   0                        EXECUTE TRANSLATE&TEST          48300000
EXNXNT   EQU   255                      EXECUTE NEXT ENTRY              48320000
         EJECT                                                          48340000
*        TRANSITION TABLE WHICH DRIVES METASCAN                         48360000
         SPACE 3                                                        48380000
MTABLE   EQU   *                                                        48400000
STATE0   EQU   *                                                        48420000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  48440000
         DC    AL1(EXNXNT)              EXECUTE NEXT ENTRY              48460000
         DC    AL1(ETSETA)            1 TEST IF SETA ENTRY              48480000
         DC    AL1(SSTXA)               BRANCH IF YES                   48500000
         DC    AL1(ETSETC)            2 TEST IF SETC ENTRY              48520000
         DC    AL1(SSTXC)               BRANCH IF YES                   48540000
         DC    AL1(ETBLANK)           3 TEST IF BLANK-SCAVENGE IF YES   48560000
         DC    AL1(SSTATE0)             THEN START ALL OVER             48580000
*             ... ELSE, ASSUME SETB ENTRY ...                           48600000
         DC    AL1(EXCPR)             4 CPR NEXT ENTRY VS TRT'D CATEG   48620000
         DC    AL1(3*16+10)             TEST IF BOOLEAN OPERATOR        48640000
         DC    AL1(128+ETBOOL)          YES-BUT HAS TO BE 'NOT'         48660000
         DC    AL1(SSTATE0)             YES. GO TRT NEXT TERM           48680000
         DC    AL1(5*16+0)              IS IT PAREN'D DSDT              48700000
         DC    AL1(EPDSDT)              POSSIBLY, LOOK INTO IT          48720000
         DC    AL1(SSTBOPY)             SURE IT IS                      48740000
         DC    AL1(SSTMOP)              NO, TRY ARITH EXPR              48760000
*   IF NOT 'NOT', LOG ERROR, NO RETURN, GIVE UP SCANNING.               48780000
STATE1   DC    AL1(EXTRT)               TRANSLATE&TEST                  48800000
*                                                                       48820000
STXA     EQU   *                        SETA EXPRESSION                 48840000
         DC    AL1(7*16+4)              TEST IF L-PAREN                 48860000
         DC    AL1(EPSETBE)             EDIT IF YES, THEN...            48880000
         DC    AL1(SSTOP)               RETURN HERE IF SIMPLE (V.S.)    48900000
         DC    AL1(SSTBOP)              RETURN HERE IF COMPLEX (BOOL)   48920000
         DC    AL1(SSTMOP)              RETURN HERE IF SETA EXPR        48940000
         DC    AL1(SSTERR1)             RETURN HERE IF SETC EXPR(ERROR) 48960000
         DC    AL1(SSTDUP)              RETURN HERE IF DUP FACTOR      X48980000
                                        FOUND IN COMPLEX EXPRESSION     49000000
*                                                                       49020000
         DC    AL1(EXNXNT)              EXEC NEXT ENTRY                 49040000
         DC    AL1(ETSETA)              TEST IF SETA ENTRY              49060000
         DC    AL1(SSTMA)               BRANCH IF SETA ENTRY            49080000
         DC    AL1(EXCPR)               ELSE, COMPARE NEXT ENTRY        49100000
         DC    AL1(3*16+2)              TEST IF AMPERSAND               49120000
         DC    AL1(EPVSYM)              BRANCH IF YES...                49140000
         DC    AL1(SSTOP)               THEN TRT NEXT OPERATOR          49160000
************************************************************            49180000
STXC     EQU   *                        SETC EXPRESSION                 49200000
         DC    AL1(3*16+9)              TEST IF T' NOTATION             49220000
         DC    AL1(EPATTR)              EDIT IT YES                     49240000
         DC    AL1(SSTIF)               THEN TRY TO GET OUT             49260000
*                                                                       49280000
         DC    AL1(4*16+4)              TEST IF L-PAREN (DUP FACTOR)    49300000
         DC    AL1(EPDUPE)              EDIT IF YES (LINK TO EPSETC)    49320000
         DC    AL1(SSTIF)               THEN TRY TO EXIT                49340000
*                                                                       49360000
STDUP    EQU   *                                                        49380000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  49400000
         DC    AL1(3*16+5)              TEST IF QUOTE (C-EXPR)          49420000
         DC    AL1(EPSETC)              EDIT IF YES                     49440000
         DC    AL1(SSTIF)               THEN TRY TO EXIT                49460000
*                                                                       49480000
         DC    AL1(EXNXNT)              IF NONE OF THE ABOVE...         49500000
         DC    AL1(ETSETC)              TEST IF SETC ENTRY              49520000
         DC    AL1(SSTERR1)             LOG ERROR IF YES                49540000
         DC    AL1(EPTRMA)              NO. PROCESS AS ARITH TERM       49560000
         DC    AL1(SSTMOP)              THEN GET NEXT OPERATOR          49580000
*********************************************                           49600000
STOP     EQU   *                        OPERATOR EVALUATION             49620000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  49640000
         DC    AL1(3*16+11)             TEST IF RELATIONAL OPERATOR     49660000
         DC    AL1(EPRELOP)             EDIT IF YES                     49680000
         DC    AL1(SSTMOP1)             THEN GO LOOK FOR NEXT TERM      49700000
*                                                                       49720000
         DC    AL1(3*16+10)             TEST IF BOOLEAN OPERATOR        49740000
         DC    AL1(64+EPMBOOL)          YES-BUT HAS TO BE AND/OR        49760000
         DC    AL1(SSTATE0)             CHECK. GO PROCESS NEXT TERM     49780000
*                                                                       49800000
         DC    AL1(3*16+6)              COULD IT BE ARITH OPERATOR      49820000
         DC    AL1(EPAROP)              EDIT IF YES                     49840000
         DC    AL1(SSTMA1)              THEN CHECK NEXT TERM            49860000
*                                                                       49880000
         DC    AL1(4*16+3)              TEST IF TERMINATING CHARACTER   49900000
         DC    AL1(ETBLANK)             YES, SCAVENGE IF BLANK(S)       49920000
         DC    AL1(SSTOPX)              NOW ONLY REL OP & BOOL OP      X49940000
                                        ALLOWED FOLLOWING BLANKS        49960000
         DC    AL1(EXITX)               NOT BLANK. CHECK CURRENT STATUS 49980000
*                                                                       50000000
STBOPY   EQU   *                                                OX00406 50010001
         DC    AL1(EXNXNT)              IF NONE OF THE ABOVE ...        50020000
         DC    AL1(EXITX)               GO CHECK CURRENT STATUS         50040000
*                                                                       50060000
STOPX    EQU   *                        WRAP UP THE MESS LEFT BY SST7   50080000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  50100000
         DC    AL1(3*16+11)             TEST IF RELATIONAL OPERATOR     50120000
         DC    AL1(EPRELOP)             EDIT IF YES                     50140000
         DC    AL1(SSTMOP1)             THEN GO TO NEXT TERM            50160000
*                                                                       50180000
         DC    AL1(3*16+10)             TEST IF BOOLEAN OPERATOR        50200000
         DC    AL1(64+EPMBOOL)          YES, BUT HAS TO BE 'AND'/'OR'   50220000
         DC    AL1(SSTATE0)             CHECK. PROCESS NEXT TERM        50240000
*                                                                       50260000
         DC    AL1(EXNXNT)              IF NEITHER ...                  50280000
         DC    AL1(EXITX)               CHECK CURRENT STATUS            50300000
**********************************************                          50320000
STMA     EQU   *                        ARITH TERM SCAN                 50340000
         DC    AL1(EXNXNT)              EXEC NEXT ENTRY                 50360000
         DC    AL1(EPTRMA)              GO CLASSIFY ARITH TERM          50380000
         DC    AL1(SSTMOP)              THEN GO CHECK FOR ARITH OP      50400000
STUNE    EQU   *-1                      POST-UNARY RE-ENTRY BECAUSE OF  50420000
         DC    AL1(SSTMA1)              L-PAREN                         50440000
STMA1    EQU   *                   CHECK THE TERM FOLLOWING ARITH OP    50460000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  50480000
         DC    AL1(7*16+4)              TEST IF L-PAREN                 50500000
         DC    AL1(EPSETA)              EDIT IF YES (ARITH EXPR),THEN.. 50520000
         DC    AL1(SSTMOP)              RETURN HERE IF SIMPLE           50540000
         DC    AL1(SSTERR2)             RETURN HERE IF COMPLEX (ERROR)  50560000
         DC    AL1(SSTMOP)              RETURN HERE IF SETA EXPR        50580000
         DC    AL1(SSTERR2)             RETURN HERE IF SETC EXPR(ERROR) 50600000
         DC    AL1(SSTERR2)             AND HERE IF DUP'D SETC (ERROR)  50620000
*                                                                       50640000
         DC    AL1(EXNXNT)              EXEC NEXT ENTRY                 50660000
         DC    AL1(EPTRMA)              MUST BE ARITMETIC TERM. PROCESS 50680000
         DC    AL1(SSTMOP)              THEN GO TO NEXT OPERATOR        50700000
*                                                                       50720000
STMOP    EQU   *                   CHK NEXT TERM/OP FOLLOWING ARITH TRM 50740000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  50760000
         DC    AL1(3*16+6)              TEST IF ARITH OPERATOR          50780000
         DC    AL1(EPAROP)              EDIT IF YES                     50800000
         DC    AL1(SSTMA1)              THEN CHECK NEXT TERM            50820000
*                                                                       50840000
         DC    AL1(EXNXNT)              EXEC NEXT ENTRY                 50860000
         DC    AL1(ETSETA)              TEST IF SETA ENTRY              50880000
         DC    AL1(SSTXITA)             EXIT IF YES                     50900000
*                                                                       50920000
         DC    AL1(EXCPR)               ELSE, MAKE COMPARISON           50940000
         DC    AL1(3*16+11)             TEST IF RELATIONAL OPERATOR     50960000
         DC    AL1(EPRELOP)             EDIT IF YES, THEN               50980000
         DC    AL1(SSTMOP1)             LOOK FOR NEXT TERM              51000000
*                                                                       51020000
         DC    AL1(4*16+3)              TEST FOR TERMINATING CHAR       51040000
         DC    AL1(ETBLANK)             YES, SCAVENGE IF BLANK(S), THEN 51060000
         DC    AL1(SSTRO)               PRAY FOR REL OP TO FOLLOW.      51080000
         DC    AL1(EXITA)               NOT BLANK. LET'S GET OUT        51100000
*                                                                       51120000
STXITA   DC    AL1(EXNXNT)              NONE OF THE ABOVE...            51140000
         DC    AL1(EXITA)               LET'S GET OUT                   51160000
STRO     EQU   *                        EXPECTING REL OP TO FOLLOW      51180000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  51200000
         DC    AL1(3*16+11)             IS IT RELATIONAL OPERATOR       51220000
         DC    AL1(EPRELOP)             EDIT IF YES                     51240000
         DC    AL1(SSTMOP1)             THEN GO ONE MORE STEP FURTHER   51260000
         DC    AL1(3*16+10)             TEST IF BOOLEAN OPERATOR        51265000
         DC    AL1(64+EPMBOOL)          YES-BUT HAS TO BE AND/OR        51270000
         DC    AL1(SSTATE0)             CHECK. GO PROCESS NEXT TERM     51275000
*                                                                       51280000
STERR1   DC    AL1(EXNXNT)              ELSE, EXEC NEXT ENTRY           51300000
         DC    AL1(EPINVLD)             INVALID OPERAND FIELD FORMAT    51320000
*                                                                       51340000
STMOP1   EQU   *                        TERM/OP FOLLOWING REL/ARITH OP  51360000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  51380000
         DC    AL1(7*16+4)              TEST IF L-PAREN                 51400000
         DC    AL1(EPSETA)              EDIT IF YES (ARITH EXPR) THEN   51420000
         DC    AL1(SSTAOP)              RETURN HERE IF SUMPLE           51440000
         DC    AL1(SSTERR2)             RETURN HERE IF COMPLEX (ERROR)  51460000
         DC    AL1(SSTAOP)              RETURN HERE IF SETA EXPR        51480000
         DC    AL1(SSTERR2)             RETURN HERE IF SETC EXPR(ERROR) 51500000
         DC    AL1(SSTERR2)             AND HERE IF DUP'D SETC (ERROR)  51520000
*                                                                       51540000
         DC    AL1(EXNXNT)              ELSE, EXEC NEXT ENTRY..         51560000
         DC    AL1(EPTRMA)              HAS TO BE ARITH TERM. PROCESS   51580000
         DC    AL1(SSTAOP)              THEN LOOK FOR NEXT ARITH OP     51600000
*                                                                       51620000
STAOP    EQU   *                        ARITH OP FOLLOWING ARITH TERM   51640000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  51660000
         DC    AL1(4*16+6)              TEST IF ARITH OP                51680000
         DC    AL1(EPAROP)              EDIT IF YES                     51700000
         DC    AL1(SSTMOP1)             CHECK NEXT TERM/OP              51720000
*        LINK TO STBOP                                                  51740000
STBOP    EQU   *                        BOOLEAN 'AND' OR 'OR'           51760000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  51780000
         DC    AL1(3*16+10)             TEST IF BOOLEAN OPERATOR        51800000
         DC    AL1(64+ETBOOL)           YES, BUT HAS TO BE AND/OR       51820000
         DC    AL1(SSTATE0)             CHECK. PROCESS NEXT TERM        51840000
*                                                                       51860000
         DC    AL1(4*16+3)              TEST IF TERMINATING CHAR        51880000
         DC    AL1(ETBLANK)             YES, SCAVENGE IF BLANKS, THEN   51900000
         DC    AL1(SSTBOPX)             GO TEST BOOLEAN OPERATOR AGAIN  51920000
         DC    AL1(EXITB)               GET OUT IF NOT BLANK            51940000
*                                                                       51960000
         DC    AL1(EXNXNT)              IF NEITHER ABOVE...             51980000
         DC    AL1(EXITB)               GET OUT OF HERE                 52000000
*                                                                       52020000
STBOPX   EQU   *                        WRAP UP THE MESS LEFT BY STBOP  52040000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  52060000
         DC    AL1(3*16+10)             TEST IF BOOLEAN OPERATOR        52080000
         DC    AL1(64+ETBOOL)           YES, BUT HAS TO BE AND/OR       52100000
         DC    AL1(SSTATE0)             CHECK. NEXT                     52120000
*                                                                       52140000
         DC    AL1(EXNXNT)              IF NOT BOOLEAN OP...            52180000
         DC    AL1(EXITB)               GET OUT OF HERE                 52200000
**********************************************                          52220000
STIF     EQU   *                                                        52240000
         DC    AL1(EXNXNT)              EXECUTE NEXT ENTRY              52260000
         DC    AL1(ETSETC)              TEST IF SETC ENTRY              52280000
         DC    AL1(SSTXITC)             TRY TO EXIT IF YES              52300000
         DC    AL1(EXCPR)               ELSE, MAKE COMPARISON           52320000
         DC    AL1(EXTRT)               BUT TRANSLATE&TEST FIRST        52340000
         DC    AL1(3*16+11)             TEST IF REL OP                  52360000
         DC    AL1(EPRELOP)             EDIT IF YES                     52380000
         DC    AL1(SSTMIF)              THEN CHECK NEXT TERM            52400000
*                                                                       52420000
         DC    AL1(4*16+3)              IF NOT REL OP, CHECK IF BLANKS  52440000
         DC    AL1(ETBLANK)             SCAVENGE IF YES                 52460000
         DC    AL1(SSTIFX)              THEN TEST IF REL OP AGAIN.      52480000
         DC    AL1(EXITC)               EXIT IF NOT BLANK               52500000
*                                                                       52520000
STXITC   DC    AL1(EXNXNT)              IF NEITHER ABOVE                52540000
         DC    AL1(EXITC)               CHECK CURRENT STATUS            52560000
*                                                                       52580000
STIFX    EQU   *                        WRAP UP THE MESS LEFT BY STIF   52600000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  52620000
         DC    AL1(3*16+11)             TEST IF REL OP                  52640000
         DC    AL1(EPRELOP)             EDIT IF YES-THEN                52660000
         DC    AL1(SSTMIF)              CHECK NEXT TERM                 52680000
*                                                                       52700000
         DC    AL1(EXNXNT)              ELSE, LOG INVALID OPERAND FMT   52720000
         DC    AL1(EPINVLD)             (EXPECTING REL OP.)             52740000
*                                                                       52760000
STMIF    EQU   *                        TERM FOLLOWS REL OP IN AIF      52780000
         DC    AL1(EXTRT)               TRANSLATE&TEST                  52800000
         DC    AL1(3*16+9)              TEST IF TYPE ATTR NOTATION      52820000
         DC    AL1(EPATTR)              EDIT IF YES                     52840000
         DC    AL1(SSTBOP)              GO CHECK NEXT OP (BOOLEAN OP)   52860000
*                                                                       52880000
         DC    AL1(3*16+4)              TEST IF L-PAREN (DUP FACTOR)    52900000
         DC    AL1(EPDUPE)              EDIT IF YES (LINK TO EPSETC)    52920000
         DC    AL1(SSTBOP)              THEN CHECK NEXT OP (BOOL OP)    52940000
*                                                                       52960000
         DC    AL1(3*16+5)              TEST IF QUOTE (C-EXPR)          52980000
         DC    AL1(EPSETC)              EDIT IF YES                     53000000
         DC    AL1(SSTBOP)              THEN CHECK NEXT OP (BOOL OP)    53020000
*                                                                       53040000
         DC    AL1(EXNXNT)              EXEC NEXT ENTRY                 53045000
         DC    AL1(EPINVLD)             GO LOG ERR32                    53050000
*                                                                       53055000
STERR2   EQU   *                        LOG ILGL OPERAND FIELD FORMAT   53060000
         DC    AL1(EXNXNT)              EXEC NEXT ENTRY                 53080000
         DC    AL1(EPILXP)                                              53100000
         DS    0H                                                       53120000
         SPACE 3                                                        53140000
*   TRANSITION TABLE ROUTINE ENTRY RELATIVE ADDRESS EQUATED             53160000
         SPACE 3                                                        53180000
*                                                                       53200000
SSTATE0  EQU   STATE0-STATE0                                            53220000
SSTUNE   EQU   STUNE-STATE0                                             53240000
SSTATE1  EQU   STATE1-STATE0                                            53260000
SSTXA    EQU   STXA-STATE0                                              53280000
SSTXC    EQU   STXC-STATE0                                              53300000
SSTDUP   EQU   STDUP-STATE0                                             53320000
SSTMA    EQU   STMA-STATE0                                              53340000
SSTOP    EQU   STOP-STATE0                                              53360000
SSTOPX   EQU   STOPX-STATE0                                             53380000
SSTMA1   EQU   STMA1-STATE0                                             53400000
SSTMOP   EQU   STMOP-STATE0                                             53420000
SSTRO    EQU   STRO-STATE0                                              53440000
SSTERR1  EQU   STERR1-STATE0                                            53460000
SSTMOP1  EQU   STMOP1-STATE0                                            53480000
SSTAOP   EQU   STAOP-STATE0                                             53500000
SSTBOP   EQU   STBOP-STATE0                                             53520000
SSTBOPX  EQU   STBOPX-STATE0                                            53540000
SSTIF    EQU   STIF-STATE0                                              53560000
SSTXITA  EQU   STXITA-STATE0                                            53580000
SSTXITC  EQU   STXITC-STATE0                                            53600000
SSTIFX   EQU   STIFX-STATE0                                             53620000
SSTMIF   EQU   STMIF-STATE0                                             53640000
SSTBOPY  EQU   STBOPY-STATE0            .                               53660000
SSTERR2  EQU   STERR2-STATE0                                            53680000
         EJECT                                                          53700000
*   ENTRIES TO RESPECTIVE DETAIL PROCESSING ROUTINES                    53720000
         SPACE 3                                                        53780000
ILGLXPBR B     ILGLXP                   GO TO ILGLXP IN CS0             53800000
         SPACE 3                                                        53820000
ESETA    EQU   *                                                        53840000
         L     R14,RAVSP                                                53860000
         TM    D3(R14),MCLA             TEST IF SETA ENTRY              53880000
         B     BRIDGE1                  .....                           53900000
ESETC    EQU   *                                                        53920000
         L     R14,RAVSP                                                53940000
         TM    D3(R14),MCLC             TEST IF SETC ENTRY              53960000
BRIDGE1  BO    TRNSFER                  ..DO CURRENT STATE ENTRY IF YES 53980000
BRIDGE2  LA    MTBLNDX,D2(MTBLNDX)      ELSE, STEP ACROSS CURRENT ENTRY 54000000
         B     MEXFR1                   TO EXECUTE NEXT STATE ENTRY     54020000
EBLANK   EQU   *                        TEST IF BLANK AT INPTR          54040000
         CLI   D0(INPTR),JBLANK                                         54060000
         BNE   BRIDGE2                  BRANCH IF NOT BLANK             54080000
DBLANK   EQU   *                        ELSE GOBBLE UP BLANKS           54100000
         L     R14,RAVSP                                                54120000
         OI    RSTKFLG,MCMPLX           INDICATE COMPLEX STATE          54140000
         BAL   TLINK,SKPBLK             BUMP OVER BLANKS                54160000
         GOIF  SNOFND,ON=ILGLXP2        INVALID FORMAT                  54180000
TRNSFER  EQU   *                        TRANSITION TO NEW STATE         54200000
         IC    MTBLNDX,STATE0+D1(MTBLNDX) PICK UP NEW STATE REL ADDRESS 54220000
         B     MSCVRT                   BACK TO THE OLD GRINDER         54240000
         SPACE 3                                                        54260000
*   RECURSIVE CALL TO METASCAN FORCED BY LEFT PARENTHESIS WHILE         54280000
*   PROCESSING ARITHMETIC EXPRESSION OR BOOLEAN EXPRESSION              54300000
ARENT    EQU   *                                                        54320000
         MVI   MCALL,MCLA               RESET TO ARITHMETIC ENTRY CODE  54340000
         B     ARENT20                  UP PAREN COUNT AND PUT IN STACK 54360000
ARENT10  L     R14,RAVSP                SET ENTRY CODE SAME AS CURRENT  54380000
         MVC   MCALL(D1),RSTKFLG        STATE                           54400000
         NI    MCALL,STMASK             MASK OUT UNWANTED STATUS        54420000
ARENT20  BAL   R12,APARCT               INCREMENT PAREN COUNT           54440000
         BAL   R3,PFXRENT               LOG L-PAREN IN REGISTER PARM    54460000
         DC    AL2(JTMLPAR)             LOG L-PAREN                     54480000
         BAL   RETURN,METASCAN          SCAN                            54500000
         CLI   D0(INPTR),JRPARN         TERMINATOR MUST BE R-PAREN      54520000
         BNE   ILGLXP1                  ELSE, LOG ERROR                 54540000
         BAL   R12,DPARCT               DECREMENT PAREN COUNT           54560000
         LR    R0,R3                    SAVE EXIT CODE                  54580000
         BAL   R3,PFXRENT               LOG R-PAREN IN REGISTER PARM    54600000
         DC    AL2(JTMRPAR)             LOG R-PAREN                     54610000
         LR    R3,R0                    RESTORE EXIT CODE               54620000
         CLI   D0(INPTR),JQUOTE         TEST IF DUP FACTOR              54640000
         BNE   ARENT30                  BRANCH IF NOT                   54660000
         BAL   R3,PFXRENT               ASSUME DUP FACTOR               54680000
         DC    AL2(JTMDUP)              AND SO INDICATE                 54700000
         BCTR  INPTR,0                  BUT DON'T GET CARRIED AWAY      54720000
         LA    R3,D4                    EXIT CODE IS 4                  54740000
ARENT30  EQU   *                                                        54760000
         AR    MTBLNDX,R3               TRANSITION TO ANY OF THE FOUR   54780000
         B     TRNSFER                  STATES DEPENDING ON EXIT CODE   54800000
ILGLXP0  L     INPTR,TPSAVE             BACK UP FOR SNAP                54806000
ILGLXP1  C     INPTR,ENDATA             DID END DATA TERMINATE          54812000
         BNL   ILGLXP2                  IF SO LOG ERR24                 54813000
         CLI   D0(INPTR),JBLANK         IS THE TERMINATOR A BLANK       54814000
         BNE   INVFM                    FLAG ERR32, SNAP INVALID TEXT   54815000
ILGLXP2  BAL   TLINK,ABSERR             EITHER UNPAIRED PARENS          54816000
         DC    AL1(5*16+SEV24)          OR                              54817000
         DC    AL1(ERR24)               BLANK APPEARED INSIDE           54818000
         SPACE 3                                                        54820000
*   EXITS FROM RESPECTIVE DETAIL PROCESSING ROUTINES                    54840000
XSX      EQU   *                        CHECK CURRENT STATUS            54860000
         SR    R3,R3                    LET'S ASSUME SIMPLE STATE       54880000
         L     R14,RAVSP                WE'LL SOON FIND OUT             54900000
         TM    RSTKFLG,MCMPLX           TEST IF COMPLEX STATE           54920000
         BZ    XSB1                     EXIT IF SIMPLE STATE            54940000
XSB      EQU   *                                                        55000000
         LA    R3,1                     SET BOOLEAN COMPLEX EXIT CODE   55020000
XSB1     L     INDEXO,OUTADR            RESTORE OUTPUT BUFFER POINTER   55040000
         B     REXSTK                   GO TO RECURSIVE EXIT            55060000
XSA      EQU   *                                                        55080000
         LA    R3,2                     SET SETA TYPE EXIT CODE         55100000
         B     REXSTKL                  GO GET STACK BASE               55120000
XSC      EQU   *                                                        55140000
         LA    R3,3                     SET SETC TYPE EXIT CODE         55160000
REXSTKL  EQU   *                                                        55180000
         L     R14,RAVSP                GET STACK-BASE                  55200000
         TM    RSTKFLG,MCMPLX           TEST IF COMPLEX STATE           55220000
         BO    ILSETA                   LOG ERROR                       55240000
         L     INDEXO,OUTADR            RESTORE OUTPUT BUFFER POINTER   55260000
         B     REXSTK1                  GO TO RECURSIVE EXIT            55280000
         SPACE 3                                                        55300000
*   CLEANUP ROUTINE CLEAN UP THE STATEMENT OR THE OPERAND WHERE ERROR   55320000
*   IS FOUND. IT THEN RETURN TO CALLER IF PROCESSING MULTI-OPERAND      55340000
*   STATEMENTS. ELSE, GO TO READ NEXT STATEMENT.                        55360000
*   STATEMENTS THAT HAVE MULTI-OPERAND ARE:                             55380000
*        MACRO CALL,                                                    55400000
*        PROTOTYPE WITH KEYWORD PARAMETER,                              55420000
*        GBLX/LCLX, AND                                                 55440000
*        EQU                                                            55460000
*                                                                       55480000
CLN0     LR    R1,R0                                                    55500000
CLEANUP  EQU   *                                                        55520000
         LA    TWKREG1,STACK            CLEAN UP WHAT'S LEFT IN         55540000
         ST    TWKREG1,SVLAST           POSTFIXER STACK                 55560000
         L     INPTR,FPTRSV             BACK UP TO BEGIN OF FIELD       55580000
         L     INDEXP,OFPTRSV           ON BOTH I/O BUFFERS             55600000
         L     INDEXO,OUTADR            RESTORE POINTER                 55620000
         GOIF  SEOPCD,ON=REXSTK         RETURN IF EDITING OP CODE       55630000
         GOIF  SENAME,OFF=CLN1                                          55640000
         BAL   RETURN,RESETPTR          INSURE NO OVERLAP               55660000
CLN1     MVI   SWITCH8,D0               RESET SWITCH                    55680000
         SET   (METSW,GSUBS),OFF                                        55700000
         LA    TWKREG1,RSTACK-(EDRSTK-BDRSTK)                           55720000
         ST    TWKREG1,RAVSP            AND RSTACK                      55740000
         L     INDEXO,OUTADR            RESTORE POINTER                 55760000
         SET   JPRONLY,ON                                               55780000
         GOIF  SGBLCL,ON=CLN2                                           55800000
         SET GQST,OFF                                                   55820000
         GOIF  DMIENT,OFF=CLN3                                 @AZ13722 55840000
         SET   DMIENT,OFF                                      @AZ13722 55860000
CLN2     LA    R14,EDRSTK-BDRSTK(,R14)                                  55880000
         NI    JHWORD2+1,BITFF-(DMIENT) RESET SECOND DMIENT SW @AZ13722 55890000
         B     REXSTK1                  WRAP UP STATEMENT               55900000
CLN3     TM    JHWORD2+1,DMIENT         TEST FOR PREV PROC-    @AZ13722 55910000
         BZ    WRAPFLD                  ESS IN MIPROTO         @AZ13722 55912000
         B     CLN2                     RETURN OVER REX        @AZ13722 55914000
         EJECT                                                          55920000
*   PROCESS ARITHMETIC OPERATOR                                         55940000
DAROP    EQU   *                                                        55960000
         BAL   R3,PFXRE2                MAKE POSTER ENTRY               55980000
         B     TRNSFER                  GO FOR TRANSITION               56000000
         SPACE 3                                                        56020000
*   PROCESS VARIABLE SYMBOL                                             56040000
EVSYM    EQU   *                                                        56060000
         BAL   RETURN,VARSYM            SCAN V.S. AND BUILD MT          56080000
         LR    INPTR,R1                 BUMP TO NEXT SCAN LOCATION      56100000
         B     TRNSFER                  NEXT TERM/OPERATOR              56120000
         SPACE 3                                                        56140000
*   PROCESS BOOLEAN (LOGICAL) OPERATOR                                  56160000
DVBLOP   EQU   *                        SCREEN SYSLIST                  56180000
         L     R14,RAVSP                                                56200000
         TM    FLGBYT,VSLS              TEST IF SYSLIST PROCESSED       56220000
         BO    ILBXP                    LOG ERROR IF YES                56240000
         OI    RSTKFLG,MCMPLX           ELSE INDICATE IN COMPLEX STATE  56260000
DBLOP    EQU   *                                                        56280000
         IC    TWKREG1,BOP10-JTMNOT(R10) PICK UP ACCEPTANCE MASKS       56300000
         LA    R1,MTABLE(MTBLNDX)       AND TEST IF CORRESPOND TO       56320000
         EX    TWKREG1,BOPTM            CALLING SEQUENCE                56340000
         BNO   ILGLXP                   ILLEGAL EXPRESSION              56360000
*   ENTER RELATIONAL OPERATOR                                           56380000
DRELOP   EQU   *                                                        56400000
         BAL   R3,PFXRE2                MAKE POSTER ENTRY               56420000
         LA    INPTR,D0(R15,INPTR)      BUMP INPTR                      56440000
         B     DBLANK                   GO TAKE CARE OF BLANKS          56460000
BOPTM    TM    D0(R1),0                                                 56480000
BOP10    DC    X'804040'                NOT/AND/OR ACCEPTANCE MASKS     56500000
         DS    0H                                                       56520000
         SPACE 3                                                        56540000
DATTR    EQU   *                                                        56560000
         ST    INPTR,TPSAVE                                             56580000
         LA    INPTR,D1(R15,INPTR)      UPDATE POINTER                  56600000
         LR    TWKREG1,PARM             CONVERT ATTR FLAG               56620000
         SH    TWKREG1,HATT                                             56640000
         STC   TWKREG1,ATTRSV           AND SAVE                        56660000
         BAL   R3,PFXRE2                LOG ATTR FLAG                   56680000
         CLI   D0(INPTR),JAMPER         TEST IF FOLLOWED BY A V.S.      56700000
         BNE   ATTROS                   BRANCH IF NOT                   56720000
         BAL   RETURN,VARSYM            GO PROCESS VS                   56740000
         LR    INPTR,R1                 UPDATE POINTER                  56760000
         GOIF  RMPURE,ON=ILATTR         EXIT IF BAD V.S.                56780000
         TM    FLGBYT,VTYP1+VSLS        TEST IF A PARAM OR A SYSLIST    56800000
         BM    ATTRSYP                  BRANCH IF EITHER                56820000
         TM    ATTRSV,ATT               ELSE, MUST BE SET SYM PRECEDED  56840000
         BNO   ILATTR                   BY ...                          56860000
         TM    ATTRSV,AT7               K' OR T'                        56880000
         BO    ILATTR                   ELSE, ERROR                     56900000
         B     ATTX1                    EXIT IF ALL'S WELL              56920000
ATTRSYP  EQU   *                                                        56940000
         GOIF  SMDEF,OFF=ILATTR         LOG ERROR IF NOT IN MACRO       56960000
         TM    ATTRSV,ATN               TEST IF N'                      56980000
         BNO   ATTX1                    EXIT IF NOT N'                  57000000
         TM    ATTRSV,ATSUBS                                            57020000
         BO    ILATTR                   ERROR IF DOUBLY SUBS'D SYSLIST  57040000
         BZ    ATTX1                    OK IF NON-SUBSCRIPTED V.S.      57060000
          TM    FLGBYT,VSLS             ELSE, TEST IF SYSLIST AT ALL    57080000
         BO    ATTX1                    OK IF YES                       57100000
         B     ILATTR                   ELSE, ERROR                     57120000
ATTROS   EQU   *                                                        57140000
         BAL   LINK,SYMSCN              TEST IF ORDINARY SYMBOL         57160000
         B     ILATTR                   ERROR IF RETURN TO HERE         57180000
         MVC   D0(D4,INDEXP),D0(R11)    ENTER O-SYM POINTER             57200000
         LA    INDEXP,DENTLNG(,INDEXP)  BUMP 2 EXTRA BYTES FOR GEN'R    57220000
ATTX1    EQU   *                                                        57240000
         MVI   ATTRSV,D0                RESET ATTRIBUTE FLAGS           57260000
         B     TRNSFER                  MAKE TRANSITION                 57280000
ATTX2    EQU   *                                                        57300000
         MVI   ATTRSV,D0                RESET ATTRIBUTE FLAGS           57320000
         B     REXSTK                   POP UP                          57340000
         SPACE 3                                                        57360000
*   PROCESS SETC CHARACTER EXPRESSION                                   57380000
*   STARTING WITH A QUOTE (DUPLICATION FACTOR IS CHECKED BY TRANSE      57400000
*   OR AN EXTRA TABLE ENTRY PRECEEDING CSETC ENTRY                      57420000
*                                                                       57440000
DUPC     EQU   *                                                        57460000
         ST    INPTR,TPSAVE             SAVE FOR POSSIBLE ERROR SNAP    57470000
         BAL   R3,PFXRENT               TELL POSTER                     57480000
         DC    AL2(JTMLPAR)             IT IS A LEFT PAREN              57500000
         BAL   R12,APARCT               UP PAREN COUNT                  57520000
         MVI   MCALL,MCLA               SCAN DUP FACTOR AS SETA EXPR.   57540000
         BAL   RETURN,METASCAN          SCAN                            57560000
         CLI   D0(INPTR),JRPARN         TERMINATOR MUST BE R-PAREN      57580000
         BNE   INVDUP                   ELSE LOG ERROR                  57600000
         BAL   R3,PFXRENT               LOG RIGHT PAREN                 57620000
         DC    AL2(JTMRPAR)             RIGHT PAREN                     57640000
         BAL   R12,DPARCT               DECR PAREN COUNT                57660000
         CLI   D0(INPTR),JQUOTE         QUOTE MUST FOLLOW DUP FACTOR    57680000
         BNE   ILGLXP0                  GO FLAG ERROR 32                57700000
         BAL   R3,PFXRENT               MAKE DUP FACTOR ENTRY           57720000
         DC    AL2(JTMDUP)              DUPLICATION OPERATOR            57740000
         BCTR  INPTR,0                  DON'T GET CARRIED AWAY          57760000
         L     R14,RAVSP                                                57780000
         MVC   MCALL(L'MCALL),RSTKFLG   BACK TO CURRENT STATE           57800000
DSETC    EQU   *                                                        57820000
         BAL   R3,PFXRENT               INDICATE START CHAR MODE        57840000
         DC    AL2(JTMSCM)              START CHARACTER MODE            57860000
CSC05    L     TWKREG2,ENDATA           SET END OF DATA AREA            57880000
         BCTR  TWKREG2,D0               SET END OF DATA AREA            57900000
         LA    TWKREG1,D1               SET INCREMENT FACTOR            57920000
         LR    R1,INDEXP                REMEMBER WHERE M.T. STARTS      57940000
         SR    R0,R0                    CLEAR STRING COUNT              57960000
         LA    INDEXP,D2(,INDEXP)       BUMP POINTER                    57980000
CSC10    LA    R3,D2                                                    58000000
         CLI   D0(INPTR),JQUOTE         TEST IF QUOTE                   58020000
         BNE   CSC20                    BRANCH IF NOT                   58040000
         CLI   D1(INPTR),JQUOTE                                         58060000
         BNE   CSC50                    SINGLE - END OF C-STRING        58080000
         BCT   R3,CSC30                 DOUBLE QT - SQUASH TO SINGLE    58100000
CSC20    CLI   D0(INPTR),JAMPER         TEST IF AMPERSAND               58120000
         BNE   CSC40                    NO. C-STRING                    58140000
         CLI   D1(INPTR),JAMPER                                         58160000
         BNE   CSCVSYM                  SINGLE & - ASSUME V.S.          58180000
CSC30    EQU   *                                                        58200000
         AR    INPTR,TWKREG1            ADVANCE POINTER                 58220000
CSC35    EQU   *                                                        58240000
         MVC   D0(D1,INDEXP),D0(INPTR)  MOVE 1 CHAR TO O/P              58260000
         AR    INDEXP,TWKREG1           BUMP O/P POINTER                58280000
         AR    R0,TWKREG1               INCREMENT STRING COUNT BY 1     58300000
CSC40    BCT   R3,CSC35                 ITERATE ON COUNT                58320000
         BXLE  INPTR,TWKREG1,CSC10      PROCESS NEXT CHAR               58340000
         B     NOQUOTE                  ERR, UNBALANCED QUOTES IN SETC  58360000
CSCVSYM  EQU   *                                                        58380000
         BAL   R3,CSTGCHK               CHECK IF STRING COLLECTED       58400000
         BAL   RETURN,VARSYM            EDIT VS INTO MT                 58420000
         LR    INPTR,R1                 UPDATE POINTER                  58440000
         CLI   D0(INPTR),JPERIOD        IGNORE THE DOT                  58460000
         BNE   CSC05                    (BRANCH IF NOT A DOT)           58480000
         LA    INPTR,D1(,INPTR)         IF THERE IS ONE                 58500000
         B     CSC05                    THEN CONTINUE C-EXPR PROCESSING 58520000
CSC50    EQU   *                                                        58540000
         BAL   R3,CSTGCHK               CHECK IF STRING COLLECTED       58560000
         BAL   R3,PFXRENT               INDICATE END CHARACTER MODE     58580000
         DC    AL2(JTMECM)                                              58600000
         CLI   D0(INPTR),JLPARN         ANY SUBSTRING NOTATION          58620000
         BNE   CSC60                    BRANCH IF NOT                   58640000
         BAL   R12,APARCT               ADVANCE PAREN COUNT             58660000
         BAL   R3,PFXRENT               ENTER SUBSTRING OPERATOR        58680000
         DC    AL2(JTMSTR)              STRING OPERATOR                 58700000
         BCTR  INPTR,0                  DON'T GET CARRIED AWAY          58720000
         BAL   R3,PFXRENT               LOG L-PAREN                     58740000
         DC    AL2(JTMLPAR)             LEFT PAREN                      58760000
         MVI   MCALL,MCLA               INDICATE TO SCAN AS SETA EXPR.  58780000
         BAL   RETURN,METASCAN          SCAN SUBSCRIPT 1                58800000
         CLI   D0(INPTR),JCOMMA         TERMINATOR MUST BE A COMMA      58820000
         BNE   INVSUB                   ELSE, LOG ERROR                 58840000
         BAL   R3,PFXRENT               A COMMA                         58860000
         DC    AL2(JTMCOM)              STACK IT IN                     58880000
         BAL   RETURN,METASCAN          SCAN SUBSCRIPT 2                58900000
         CLI   D0(INPTR),JRPARN         TERMINATOR MUST BE R-PAREN      58920000
         BNE   INVSUB                   ELSE, LOG ERROR                 58940000
         BAL   R3,PFXRENT               LOG R-PAREN                     58960000
         DC    AL2(JTMRPAR)             RIGHT PAREN                     58980000
         BAL   R12,DPARCT               DECREMENT PAREN COUNT           59000000
         L     R14,RAVSP                                                59020000
         MVC   MCALL(L'MCALL),RSTKFLG   BACK TO CURRENT STATE           59040000
         CLI   D0(INPTR),JLPARN         TEST IF IMPLIED CONCATENATION   59060000
         BNE   CSC55                    BRANCH IF NOT FOLLOWED BY (     59080000
         BAL   R3,PFXRENT               YES, DUP FACTOR FOLLOWS         59100000
         DC    AL2(JTMPER)              INDICATE CONCATENATION FIRST    59120000
         BCT   INPTR,DUPC               THEN RE-ENTER DUPC              59140000
CSC55    EQU   *                                                        59160000
         CLI   D0(INPTR),JQUOTE         TEST IF IMPLIED CONCATENATION   59180000
         BNE   CSC60                    BRANCH IF NOT                   59200000
         BAL   R3,PFXRENT               ENTER CONCATENATION OPERATOR    59220000
         DC    AL2(JTMPER)              PERIOD                          59240000
         BCT   INPTR,DSETC              RE-ENTER CSETC                  59260000
CSC60    CLI   D0(INPTR),JPERIOD        TEST IF EXPLICIT CONCATENATION  59280000
         BNE   TRNSFER                  NO - END OF C-EXPRESSION        59300000
         BAL   R3,PFXRENT               TELL IT TO POSTER               59320000
         DC    AL2(JTMPER)              PERIOD                          59340000
         CLI   D0(INPTR),JLPARN         TEST IF DUPLICATION FACTOR      59360000
         BE    DUPC                     YES, RE-ENTER DSECT             59380000
         CLI   D0(INPTR),JQUOTE         TEST IF DOT FOLLOWED BY QUOTE   59400000
         BE    DSETC                    RE-ENTER DSETC                  59420000
         B     TRNSFER                  GO TO NEXT TABLE ENTRY          59440000
CSTGCHK  EQU   *                                                        59460000
         LTR   R0,R0                    TEST IF ANY STRING COLLECTED    59480000
         BNZ   CSTGC10                  BRANCH IF YES                   59500000
         SH    INDEXP,H2                ELSE, BACK UP                   59520000
         BR    R3                       AND RETURN                      59540000
CSTGC10  EQU   *                                                        59560000
         MVI   D0(R1),JTMCS             ELSE, FILL IN FLAG              59580000
         STC   R0,D1(,R1)               AND STRING LENGTH               59600000
         BR    R3                       RETURN                          59620000
         EJECT                                                          59640000
*   PROCESS UNARY OPERATOR - LINK TO ARITHMETIC TERM PROCESSOR OR       59660000
*   MAKE RECURSIVE ENTRY BECAUSE OF LEFT PAREN                          59680000
*                                                                       59700000
*   UNARY OPERATOR FOLLOWS                                              59720000
*                  L-PAREN,                                             59740000
*                  ARITH OPERATOR,                                      59760000
*                  UNARY OPERATOR,                                      59780000
*                  OR BLANK.                                            59800000
*                                                                       59820000
CUNARY   EQU   *                                                        59840000
         IC    PARM,UNARYOP-JTMMULT(PARM) PICK UP UNARY OPERATOR        59860000
         LTR   PARM,PARM                TEST IF PLUS OR MINUS           59880000
         BZ    ILUNARY                  UNARY OPERATOR ERROR            59900000
         BAL   R3,PFXRE2                LOG UNARY OPERATOR              59920000
         CLI   D0(INPTR),JLPARN         TEST IF L-PAREN FOLLOWS         59940000
         BNE   ARTERMX                  CLASSIFY ARITH TERM IF NOT      59960000
         LA    MTBLNDX,SSTUNE           ELSE, MAKE RECURSIVE ENTRY      59980000
         B     TRNSFER                  TO METASCAN                     60000000
UNARYOP  DC    AL1(0,0,JTMPLUS,JTMMIN)  UNARY OP INTERNAL VALUE         60020000
         SPACE 3                                                        60040000
*   PROCESS ARITHMETIC TERM WHICH MAY BE IN THE FOLLOWING FORMATS.      60060000
*   1) V.S.                                                             60080000
*   2) ATTRIBUTE NOTATION                                               60100000
*   3) SELF DEFINING TERM (B, C, D, X)                                  60120000
*                                                                       60140000
ARTERMX  L     LINK,ATRTEST             POINT TO TRTEST                 60160000
         BALR  RETURN,LINK              FIND OUT NEXT TERM/OPERATOR     60180000
ARTERM   EQU   *                                                        60200000
         ST    INPTR,TPSAVE             SAVE BEGIN PT FOR SNAP          60210000
         BAL   RETURN,AEXPR             GO PROCESS THE TERM             60220000
         B     ILSDT                    RETURN HERE IF ERROR FOUND      60240000
         B     TRNSFER                  NORMAL RETURN                   60260000
         SPACE 3                                                        60280000
*   ENTRY TO APPROPRIATE ROUTINES                                       60300000
AEXPR    EQU   *                        TEST TRT RESULT                 60320000
         CH    R3,H2                                                    60340000
         BE    EVSYM                    BRANCH IF VARIABLE SYMBOL       60360000
         CH    R3,H6                    TEST POSSIBLE UNARY OPERATOR    60380000
         BE    CUNARY                   BRANCH IF ARITH OPERATOR        60400000
         CH    R3,H7                                                    60420000
         BE    DATTR                    ATTRIBUTE NOTATION              60440000
         CH    R3,H8                                                    60460000
         BE    XBCSDT                   X-, B-, C-TYPE SDT              60480000
         CH    R3,H3                    OPERAND TERMINATOR              60486000
         BE    ILGLXP2                  LOG ERROR IF NOTHING FOUND      60492000
         LTR   R3,R3                                                    60500000
         BNZ   ILSDT                    LOG ERROR IF NOT DSDT           60520000
         SPACE 3                                                        60540000
*   SELF DEFINING TERM PROCESSING ROUTINES.                             60560000
*   CALLED BY METASCAN ARITHMETIC TERM PROCESSING ROUTINE, BY           60580000
*   PROTOTYPE PARAMETER PROCESSING ROUTINE, AND BY MACRO INSTRUCTION    60600000
*   KEYWORD PROCESSING ROUTINE.                                         60620000
*                                                                       60640000
DSDTIN   EQU   *                                                        60660000
         ST    INPTR,TPSAVE                                             60680000
         LR    SCNLREG,R1               SCAN UP TO TRT TERMINATING CHAR 60700000
         LA    PARM,DSDT                GWT DSDT TYPE NUMBER            60720000
         BCT   SCNLREG,SDTLMT           AND GO                          60740000
*                                                                       60760000
XBCSDT   EQU   *                        X-, B-, C-TYPE SDT ENTRY        60780000
         ST    INPTR,TPSAVE                                             60800000
         LA    INPTR,D2(,INPTR)         BUMP OVER SDT HEAD              60820000
         L     SCNLREG,ENDATA           SET SCAN LIMIT                  60840000
*                                                                       60860000
SDTLMT   EQU   *                                                        60880000
         IC    R3,SDTMAXC-JTMSDT(PARM) SET SDT CHAR MAX COUNT           60900000
         STH   R3,HICCNT                                                60920000
         IC    R3,SDTCVAL-JTMSDT(PARM) SET SDT HIGH CHAR VALUE          60940000
         STH   R3,HICVAL                                                60960000
         IC    R1,SDTSHFT-JTMSDT(PARM)  SET CONVERSION SHIFT VALUE      60980000
*                                                                       61000000
         LA    INCREG,D1                BXLE INCREMENT IS 1             61020000
         SR    KNTREG,KNTREG            SET COUNT REG = 0               61040000
         LR    MAXVREG,KNTREG           SET RESULT REGISTER             61060000
*                                                                       61080000
SDTPR    EQU   *                                                        61100000
         SR    R14,R14                                                  61120000
         IC    R14,D0(,INPTR)           SET ONE BYTE AT INPTR           61140000
         CLI   D0(INPTR),JQUOTE         TEST IF QUOTE                   61160000
         BNE   SDTPR05                  GO TEST CHAR VALUE              61180000
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    61200000
         CLI   HICVAL1,CHARV            TEST IF CHARACTER SDT           61220000
         BNE   SDTEND                   TERMINATE IF NOT                61240000
         CLI   D0(INPTR),JQUOTE         IS IT DOUBLE QUOTE              61260000
         BNE   SDTEND                   NO. TERMINATE                   61280000
SDTPR05  CH    R14,HICVAL               TEST IF CHAR VALUE IN RANGE     61300000
         BCR   BHI,RETURN               ERROR IF HIGH                   61320000
         CLI   D0(INPTR),JAMPER         IS THE CHAR AN AMPERSAND        61340000
         BNE   SDTPR15                  BRANCH IF NOT                   61360000
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    61380000
         CLI   D0(INPTR),JAMPER         IT BETTER BE DOUBLE             61400000
         BCR   BNE,RETURN               ELSE, LOG ERROR                 61420000
SDTPR15  CLI   HICVAL1,J9               TEST IF DSDT                    61440000
         BNE   SDTPR25                  BRANCH IF NOT                   61460000
         ALR   R14,MAXVREG              INITIALIZE CONVERSION TO BINARY 61480000
         ALR   R14,MAXVREG                                              61500000
SDTPR25  EQU   *                                                        61520000
         SLL   MAXVREG,D0(R1)           SHIFT PARTIAL RESULT            61540000
         ALR   MAXVREG,R14              ADD IN THE ADJUSTED BYTE        61560000
         AR    KNTREG,INCREG            ADD 1 TO CHARACTER COUNT        61580000
         BXLE  INPTR,INCREG,SDTPR       GET NEXT BYTE                   61600000
         CLI   HICVAL1,J9               WOOPS, FALL THRU                61620000
         BE    SDTPR35                  BETTER BE DSDT,  YES, GREAT     61640000
         BR    RETURN                   ELSE, ERROR - RETURN            61660000
*                                                                       61680000
SDTPR35  EQU   *                                                        61700000
         CL    MAXVREG,SDTMAXV          HAS DSDT HIT MAX VALUE          61720000
         BCR   BHI,RETURN               TOO HIGH. LOG ERROR             61740000
SDTEND   LTR   KNTREG,KNTREG            CHAR COUNT MUST WITHIN RANGE    61760000
         BCR   BZ,RETURN                TOO LOW                         61780000
         CH    KNTREG,HICCNT                                            61800000
         BCR   BHI,RETURN               TOO HIGH                        61820000
         ST    MAXVREG,JFWORD2          OK. SAVE IT                     61840000
         CLI   HICVAL1,CHARV            TEST IF CSDT                    61860000
         BNE   SDTOUT                   BRANCH IF NOT                   61880000
         LCR   R14,KNTREG               NEGATE CHAR COUNT               61900000
         LA    TRBASE,JFWORD2+D4(R14)   ADJUST OFF-THE-LINE TR BASE REG 61920000
         LR    TRLENG,KNTREG                                            61940000
         BCTR  TRLENG,0                 ADJUST TR LENGTH                61960000
         EX    TRLENG,CSDTTR            TR TO EXTERNAL CHAR VALUE       61980000
SDTOUT   EQU   *                                                        62000000
         MVC   D1(L'JFWORD2,INDEXP),JFWORD2 ENTER VALUE INTO TEXT       62020000
         LA    R12,D1                   VALID SDT EXIT CODE FOR DMIENT  62040000
         GOIF  DMIENT,OFF=SDTOUT1       DID WE ENTER FROM MIPROTIN      62060000
         GOIF  VDIM,OFF=D4(,RETURN)     RETURN IF DIMENSIONED           62080000
SDTOUT1  EQU   *                                                        62100000
         MVI   D0(INDEXP),JTMSDT        NO                              62120000
         LA    INDEXP,SDTLENG(,INDEXP)  BUMP OVER ONE EXTRA BYTE       X62140000
                                        FOR GENERATOR'S CONVENIENCE     62160000
         B     D4(,RETURN)              AND RETURN                      62180000
CSDTTR   TR    D0(0,TRBASE),JTRTABLE    OFF-THE-LINE TRANSLATE          62200000
         SPACE 3                                                        62220000
         DS    0F                                                       62240000
* SDT TYPE ----> X B C D                                                62260000
SDTMAXC  DC    X'0820040A'              MAX CHAR COUNT ALLOWED IN SDT   62280000
SDTCVAL  DC    X'0F01FF09'              MAX CHAR VALUE ALLOWED IN SDT   62300000
SDTSHFT  DC    X'04010803'              SHIFT VALUE IN BITS             62320000
*                                                                       62340000
SDTMAXV  DC    X'7FFFFFFF'              MAX DSDT VALUE (2**32)-1        62360000
*                                                                       62380000
KNTREG   EQU   0                        CHAR COUNT REG                  62400000
MAXVREG  EQU   3                        MAX VALUE REG                   62420000
INCREG   EQU   10                       BXLE INCREMENT REG              62440000
SCNLREG  EQU   11                       SDT SCAN LIMIT REG              62460000
TRLENG   EQU   12                       OFF-THE-LINE TR LENGTH REG      62480000
TRBASE   EQU   14                       OFF-THE-LINE TR BASE REG        62500000
CHARV    EQU   255                      CHAR VALUE                      62520000
SDTLENG  EQU   L'JFWORD2+2              SDT ENTRY LENGTH (ONE EXTRA    X62540000
                                        BYTE FOR GEN'TOR'S CONVENIENCE  62560000
         DS    0H                                                       62580000
         SPACE 3                                                        62600000
BDSDT    BAL   RETURN,DSDTIN            EDIT AS DSDT                    62620000
         B     ILSDT                    INV SDT IF RETURN TO HERE       62640000
         CLI   D0(INPTR),JRPARN         DSDT MUST BE PARENTHESIZED      62660000
         BE    TRNSFER                  YES                             62680000
         AR    MTBLNDX,R12              NOT DSDT                        62700000
         B     TRNSFER                  TRY ARITH EXPR                  62720000
         EJECT                                                          62740000
*********************************************************************** 62760000
* RECURSIVE ENTRY FOR SCANNERS                                          62780000
* FORMAT = VMMMRRAF      WHERE                                          62800000
*          V  = FLGBYT SAVED                                            62820000
*          MMM = MTABLE INDEX (MTBLNDX)                                 62840000
*          RR = RETURN ADDRESS (RELATIVE TO BASE1)                      62860000
*          A  = ATTRSV SAVED                                            62880000
*          F  = MCALL SAVED                                             62900000
* RAVSP MUST BE INITIALIZED TO A(RSTACK) AT PHASE ENTRY                 62920000
* LINKAGE      BAL  R12,RENTSTK                                         62940000
*********************************************************************** 62960000
         SPACE 3                                                        62980000
RENTSTK  EQU   *                                                        63000000
         ST    INDEXP,INTERMET          SAVE INTERMEDIATE MT POINTER    63020000
         L     R14,RAVSP                GET AVAILABLE LOCATION IN RSTAC 63040000
         LA    R14,EDRSTK-BDRSTK(,R14)  COMPUTE NEXT AVAILABLE LOCATION 63060000
         C     R14,NRSTK                TEST IF END OF STACK            63080000
         BNL   RENTFULL                 LOG ERROR IF END OF STACK       63100000
         ST    MTBLNDX,RSTKSTP          SAVE                            63120000
         LA    RETURN,D0(,RETURN)       CLEAN UP BAL MESS               63140000
         SR    RETURN,BASE1             MAKE RETURN ADDRESS RELATIVE    63160000
         STH   RETURN,RSTKRTN           AND SAVE                        63180000
         MVC   RSTKATR(L'ATTRSV+L'MCALL+L'FLGBYT),ATTRSV SAVE FLAGS     63200000
         ST    R14,RAVSP                AND SAVE IT                     63220000
         BR    R12                      RETURN TO CALLER                63240000
         SPACE 3                                                        63260000
*********************************************************************** 63280000
* RECURSIVE EXIT FOR SCANNERS                                           63300000
* LINKAGE      B    REXSTK                                              63320000
*********************************************************************** 63340000
         SPACE 3                                                        63360000
REXSTKP  EQU   *                        ERROR-CONDITION EXIT            63380000
         L     INDEXP,INTERMET          WIPE OFF BAD META TEXT ENTRY    63400000
REXSTK   EQU   *                        NORMAL EXIT                     63420000
         L     R14,RAVSP                                                63440000
REXSTK1  EQU   *                                                        63460000
         LH    RETURN,RSTKRTN           RESTORE RETURN ADDRESS          63480000
         AR    RETURN,BASE1             AND MAKE IT ABSOLUTE            63500000
         MVC   ATTRSV(L'ATTRSV+L'MCALL+L'FLGBYT),RSTKATR RESTORE FLAGS  63520000
         L     MTBLNDX,RSTKSTP          RESTORE                         63540000
         SH    R14,RSTKLEN              BACK UP ENTRY POINT             63560000
         ST    R14,RAVSP                RESET AVAILABLE LOCATION POINTR 63580000
         BR    RETURN                   RETURN                          63600000
         EJECT                                                          63620000
*********************************************************************** 63640000
*   CSTK IS A RECURSIVE STACK FOR NESTED COPY CODE. A COPY CODE MAY   * 63660000
*   BE IMBEDDED IN A COPY CODE UP TO MAXIMUM OF FIVE LEVELS INCLUSIVE.* 63680000
*   A COPY CODE MAY COPY ITSELF. IT MAY COPY A MACRO DEFINITION AS A  * 63700000
*   PROGRAMMER MACRO. THUS, A COPY STATEMENT IS ALLOWED TO BE BETWEEN * 63720000
*   PROGRAMMER MACROS.                                                * 63740000
*                                                                     * 63760000
*   FORMAT OF CSTK IS NNNNS     WHERE                                 * 63780000
*                     NNNN = NOTED VALUE OF THE DISCONTINUED          * 63800000
*                            SOURCE STREAM.                           * 63820000
*                     S = SWITCH1 SAVED FOR CURRENT LEVEL OF COPY     * 63840000
*                           STREAM.                                   * 63860000
*                                                                     * 63880000
*   LINKAGE IS  BAL   R3,CSTKENT - FOR ENTRY                          * 63900000
*               BAL   R3,CSTKEXT - FOR EXIT                           * 63920000
*                                                                     * 63940000
*********************************************************************** 63960000
CSTKENT  EQU   *                                                        63980000
         L     PARM,CSTKADR             GET NEXT AVAILABLE LOCATION     64000000
         C     PARM,NCSTK               TEST IF THE STACK FULL          64020000
         BNL   CSTKFULL                 BRANCH IF YES                   64040000
         XC    CSTKMEM(L'CSTKMEM),CSTKMEM CLEAR MEMBER NAME             64050001
         GOIF  JINLIB,OFF=CSTK20        BRANCH IF NOT IN LIBRARY MODE   64060000
         JNOTELB                                                        64080000
         L     PARM,CSTKADR             RESTORE NEXT AVAILABLE LOCATION 64100000
         MVC   CSTKNOTE(L'CSTKNOTE),JNOTEVAL AND SAVE NOTED ADDRESS     64120000
         MVC   CSTKMEM(L'CSTKMEM),LASTFIND SAVE MEMBER NAME IN STACK    64130001
CSTK10   EQU   *                                                        64140000
         MVC   CSTKSW(L'SWITCH9),SWITCH9 SAVE SWITCH9 STATUS            64160000
         MVI   SWITCH9,J0               CLEAR SWITCH AT OLD LEVEL       64170000
         SET   SINCPY,ON                INDICATE IN COPY CODE           64180000
         LA    PARM,EDCSTK-CSTKNOTE(,PARM) COMPUTE NEXT SLOT ADDRESS    64200000
         ST    PARM,CSTKADR             AND SAVE                        64220000
         BR    R3                       RETURN                          64240000
         SPACE                                                          64260000
CSTK20   L     LINK,ASVCTLFM            GET ROUTINE ADDR                64280000
         BALR  TLINK,LINK               GO RESTORE STD I/P CTL FORMATS  64290000
         L     BASE2,CS2ADDR            RESTORE BASE FOR SECOND CSECT   64292000
         B     CSTK10                                                   64300000
*                                                                       64320000
CSTKEXT  EQU   *                                                        64340000
         L     PARM,CSTKADR             POP UP TO NEXT HIGHER LEVEL     64360000
         SH    PARM,CSTKLEN                                             64380000
         ST    PARM,CSTKADR                                             64400000
         MVC   SWITCH9(L'SWITCH9),CSTKSW RESTORE SWITCH9 STATUS         64420000
         C     PARM,BCSTK               TEST IF UP ON HIGHEST LEVEL     64440000
         BNH   CSTKEX2                  BRANCH IF YES                   64460000
CSTKEX1  EQU   *                                                        64480000
         LA    PARM,CSTKMEM             GET MEMBER NAME ADDRESS         64490001
         JFIND ADDR=(PARM)              FIND DISCONTINUED MEMBER        64492001
         L     PARM,CSTKADR             GET STACK ADDRESS       OY01713 64492402
         MVC   LASTFIND(L'LASTFIND),CSTKMEM MOVE MEMBER NAME            64494001
         JPOINTLB ADDR=(PARM)           POINT TO DISCONTINUED STREAM    64500000
         BR    R3                       RETURN                          64520000
CSTKEX2  EQU   *                                                        64540000
         GOIF  SSYSMD,ON=CSTKEX1        BRANCH IF EDITING SYS MACRO     64560000
         MVC   JSRCLN(L'JSRCLN*7),COPYSV3 RESTORE I/P CTL FORMATS       64580000
         MVC   TBGLN(L'TBGLN*6),COPYSV4                                 64600000
         MVC   INPUT,STNPADJ            RESTORE OLD STD-       @OX07230 64610005
         MVC   MINPUT,MINPADJ           OR ICTL I/P-CTL FORMS- @OX07230 64612005
         MVC   MINDIF,MINDFADJ          WHEN NOT IN-           @OX07230 64614005
         MVC   ENDWKA,ENDWKADJ          COPY ANYMORE.          @OX07230 64616005
         SET   JINLIB,OFF               INDICATE OUT OF LIBRARY MODE    64620000
         BR    R3                       RETURN                          64640000
         EJECT                                                          66940000
*********************************************************************** 66960000
*   STMTSEQ ROUTINE IS CALLED EACH TIME A NEW STATEMENT IS BEING        66980000
*   EDITED. ITS FUNCTION IS TO CHECK THE SEQUENCE OF A STATEMENT        67000000
*   RELATIVE TO ITS ENVIRONMENT IN THE INPUT SOURCE STREAM.             67020000
*   (IT HAS NO CONCERN WITH THE SEQUENCE CHECK ACTIVATED BY A           67040000
*   'ISEQ' STATEMENT PROCESSED.)                                        67060000
*        LINKAGES ARE                                                   67080000
*        BAL   RETURN,STMTDSQ                                           67100000
*        BAL   RETURN,STMTSEQ                                           67120000
*********************************************************************** 67140000
         SPACE 3                                                        67160000
STMTDSQ  EQU   *                                                        67180000
         LA    TWKREG1,DMMY-AOTSEQ      DUMMY UP SWITCH BYTE            67200000
STMTSEQ  EQU   *                                                        67220000
         IC    TRTN,AOTSEQ(TWKREG1)     INIT. SEQUENCING SWITCH         67240000
         STC   TRTN,AOTSW                                               67260000
         GOIF  (SKPMND,SKPEND),NONE=SSEQ20 IF NOT SKIP TO MEND/END      67280000
         L     INPTR,INPUT              RESET POINTER                   67300000
         GOIF  SKPMND,ON=SSEQ10         BRANCH IF SKIP TO MEND          67320000
         TM    AOTSW,AOEND              TEST IF END STATEMENT           67340000
         BNO   ABTRTN                   CONTINUE TO FLUSH TO END        67360000
         L     INPTR,FPTRSV             RESET POINTER                   67380000
         B     END                      GO PROCESS THE END STMT         67399600
SSEQ10   EQU   *                                                        67400000
         TM    AOTSW,AOMEND             TEST IF MEND STATEMENT          67420000
         BNO   ABTRTN                   CONTINUE FLUSH TO MEND STMT     67440000
         BAL   RETURN,RESETPTR          REINIT E/T REC FOR PRNT OX00405 67450001
         L     INPTR,INPUT              RESET POINTER          @AX12923 67460006
         SET   SMAC,OFF                 CORRESPONDING MEND FOUND        67470000
         B     MENDZ                    GO PROCESS MEND STATEMENT       67480000
SSEQ20   EQU   *                                                        67500000
         GOIF  AOPSYN,OFF=SSEQ22        BRANCH IF NOT OPSYN STATEMENT   67550000
         GOIF  SNOPSYN,OFF=(RETURN)     RETURN IF OPSYN ALLOWED         67600000
         MVI   OCSAVE,D0                CLEAR OPSYN OP CODE             67650000
         BAL   TLINK,ABSERR             ELSE, LOG ERROR                 67660000
         DC    AL1(8*16+SEV12)          GO TO INVALID RTN THRU ABSERR   67670000
         DC    AL1(ERR12)               SUPPRESS D ENTRY                67680000
SSEQ22   EQU   *                                                        67690000
         CLI   OCSAVE,JTCOPY            DOES THIS STMT INHIBIT OPSYS    67692000
         BNH   SSEQ25                   BR IF ICTL/ISEQ/OPSYN/COPY STMT 67692400
         CLI   OCSAVE,JTPRINT           CHECK IF PRINT STMT    @XA05837 67692531
         BE    SSEQ25                   OPSYN STILL OK         @XA05837 67692631
         CLI   OCSAVE,JTSPACE           CHECK IF IN COPY-SPACE RANGE    67692800
         BL    SSEQ24                   THESE INHIBIT FURTHER OPSYN     67693200
         CLI   OCSAVE,JTTITLE           CHECK IF IN RANGE ABOVE TITLE   67693600
         BNH   SSEQ25                   OPSYN STILL OK,SPACE/EJECT/TITL 67693700
SSEQ24   SET   SNOPSYN,ON               OPSYN NO LONGER ALLOWED         67694000
SSEQ25   EQU   *                                                        67696000
         GOIF  SINCPY,OFF=SSEQ30        BRANCH IF NOT IN COPY CODE      67700000
         TM    AOTSW,AOMEND             TEST IF MEND STMT               67710000
         BO    SSEQ29                   GO TO SET SMAC OFF              67712000
         CLI   OCSAVE,JTMACRO           CHECK IF MACRO STMT             67714000
         BNE   SSEQ27                   BRANCH IF NOT                   67716000
         SET   SMAC,ON                  MACRO STMT COPIED AT THIS LEVEL 67718000
SSEQ27   EQU   *                                                        67718400
         GOIF  AOCOPYX,OFF=SSEQ30       BRANCH IF LEGAL IN COPY CODE    67720000
         BAL   TLINK,ABSERR             THIS STMT ILLEGAL IN COPY CODE  67740000
         DC    AL1(8*16+SEV22)          GO TO INVALID RTN THRU ABSERR   67760000
         DC    AL1(ERR22)               SUBROUTINE                      67780000
SSEQ29   EQU   *                                                        67790000
         SET   SMAC,OFF                 CORRESPONDING MEND FOUND        67792000
SSEQ30   EQU   *                                                        67800000
         GOIF  SMDEF,OFF=SSEQ40         BRANCH IF NOT IN MACRO DEF.     67820000
         GOIF  SXPRTO,OFF=SSEQ35        BRANCH IF NOT EXPECTING PROTO   67840000
         TM    IOCID,BIT0+BIT1                                          67860000
         BNZ   BDPTO                    BRANCH IF ILLEGAL PROTO OP CODE 67880000
SSEQ35   EQU   *                                                        67900000
         TM    AOTSW,AOMACROX           TEST IF LEGAL IN MACRO DEF      67920000
         BCR   BZ,RETURN                BRANCH IF LEGAL                 67940000
         BAL   TLINK,ABSERR             ELSE, LOG ERROR                 67960000
         DC    AL1(8*16+SEV27)          GO TO INVALID RTN THRU ABSERR   67980000
         DC    AL1(ERR27)               THIS STMT ILLEGAL IN MACRO      68000000
SSEQ40   EQU   *                                                        68020000
         GOIF  SPGRMD,OFF=SSEQ45        BRANCH IF NOT EDIT'G PRG'R MAC  68040000
         GOIF  AOKBTNPM,OFF=SSEQ50      BRANCH IF ILLEGAL B/ PGR M DEF  68060000
         BR    RETURN                   RETURN                          68080000
SSEQ45   EQU   *                                                        68100000
         GOIF  SXMCRO,OFF=SSEQ47        BR IF NOT EXP'G MACRO STMT      68120000
         SET   SXMCRO,OFF                                               68140000
         CLI   OCSAVE,JTMACRO           YES, MUST BE SYSTEM MACRO DEF   68160000
         BCR   BEQ,RETURN               BRANCH IF THIS IS MACRO DEF     68180000
*        FIRST CARD IN THIS SYSTEM MACRO DEFINITION IS NOT A 'MACRO'.   68200000
*        LET GENERATOR LOG THE ERROR IN LINE. DEFINITION DISCARRED.     68220000
SSEQ46   EQU   *                                                        68240000
         SET   SKPMND,ON               DUMMY SKIP                       68260000
         SET   SNOSMCRO,ON              1ST STMT IN SYS M DEF NOT MACRO 68280000
         B     MEND1                    GET NEXT SYSTEM MACRO DEF       68300000
SSEQ47   EQU   *                        WE ARE IN OPEN CODE             68320000
         TM    AOTSW,AOPENCDX           TEST IF ALLOWED IN OPEN CODE    68340000
         BCR   BZ,RETURN                BRANCH IF YES                   68360000
         TM    AOTSW,AICOPY             IS THIS AN ICTL STMT            68370000
         BZ    SSEQ48                   BR IF MACRO,MEXIT,MEND          68372000
         BAL   TLINK,ABSERR             LOG ERROR FOR ICTL              68374000
         DC    AL1(8*16+SEV12)          GO TO INVALID RTN VIA ABSERR    68376000
         DC    AL1(ERR12)               ICTL OCCURS AFTER FIRST STMT    68378000
SSEQ48   BAL   TLINK,ABSERR             LOG ERR FOR MACRO,MEXIT,MEND    68380000
         DC    AL1(8*16+SEV23)          GO TO INVALID RTN THRU ABSERR   68400000
         DC    AL1(ERR23)               STMT ILLEGAL IN OPEN CODE       68420000
*        OPEN CODE INITIALIZATION                                       68440000
SSEQ50   EQU   *                                                        68460000
         GOIF  SICTL,ON=(RETURN)        OK IF VALID ICTL                68480000
         SET   (SPGRMD,SOPNCD),FLIP     OUT OF PRGMR MACS, NOW OPEN CD  68500000
         ST    RETURN,EDTSVX            SAVE RETURN POINT               68540000
         MVI   DDNDX1,OPENENT           SET UP INDEX FOR BR TO DIR RTN  68560000
         BAL   R3,DIR10                 INITIALIZE OPEN CODE            68580000
         L     RETURN,EDTSVX            RESTORE RETURN POINT            68600000
         B     SSEQ45                   CHECK SEQ OF FIRST CARD         68620000
         EJECT                                                          68640000
********************************************                            68660000
*        STATEMENT SEQUENCING TABLE        *                            68680000
********************************************                            68700000
         TBLGEN (ICTL,                                                 X68720000
               ISEQ,                                                   X68740000
               OPSYN,                                                  X68760000
               COPY,                                                   X68780000
               ANOP,                                                   X68800000
               GBLA,                                                   X68820000
               GBLB,                                                   X68840000
               GBLC,                                                   X68860000
               LCLA,                                                   X68880000
               LCLB,                                                   X68900000
               LCLC,                                                   X68920000
               MACRO,                                                  X68940000
               ACTR,                                                   X68960000
               AGO,                                                    X68980000
               AIF,                                                    X69000000
               SETA,                                                   X69020000
               SETB,                                                   X69040000
               SETC,                                                   X69060000
               MEXIT,                                                  X69080000
               MEND,                                                   X69100000
               END,                                                    X69120000
               DXD,                                                    X69140000
               EQU,                                                    X69160000
               ORG,                                                    X69180000
               CNOP,                                                   X69200000
               CCW,                                                    X69220000
               DC,                                                     X69240000
               DS,                                                     X69260000
               START,                                                  X69280000
               CSECT,                                                  X69300000
               DSECT,                                                  X69320000
               COM,                                                    X69340000
               ENTRY,                                                  X69360000
               EXTRN,                                                  X69380000
               WXTRN,                                                  X69400000
               CXD,                                                    X69420000
               LTORG,                                                  X69440000
               PUNCH,                                                  X69460000
               REPRO,                                                  X69480000
               PUSH,                                                   X69500000
               POP,                                                    X69520000
               PRINT,                                                  X69540000
               USING,                                                  X69560000
               DROP,                                                   X69580000
               SPACE,                                                  X69600000
               EJECT,                                                  X69620000
               TITLE,                                                  X69640000
               MNOTE,                                                  X69660000
               INVALID),                                               X69680000
               (46,                     ICTL                           X69700000
               5,                       ISEQ                           X69720000
               22,                      OPSYN                          X69740000
               33,                      COPY                           X69760000
               0,                       ANOP                           X69780000
               0,                       GBLA                           X69800000
               0,                       GBLB                           X69820000
               0,                       GBLC                           X69840000
               0,                       LCLA                           X69860000
               0,                       LCLB                           X69880000
               0,                       LCLC                           X69900000
               7,                       MACRO                          X69920000
               0,                       ACTR                           X69940000
               0,                       AGO                            X69960000
               0,                       AIF                            X69980000
               0,                       SETA                           X70000000
               0,                       SETB                           X70020000
               0,                       SETC                           X70040000
               2,                       MEXIT                          X70060000
               66,                      MEND                           X70080000
               128,                     END                            X70100000
               0,                       DXD                            X70120000
               0,                       EQU                            X70140000
               0,                       ORG                            X70160000
               0,                       CNOP                           X70180000
               0,                       CCW                            X70200000
               0,                       DC                             X70220000
               0,                       DS                             X70240000
               0,                       START                          X70260000
               0,                       CSECT                          X70280000
               0,                       DSECT                          X70300000
               0,                       COM                            X70320000
               0,                       ENTRY                          X70340000
               0,                       EXTRN                          X70360000
               0,                       WXTRN                          X70380000
               0,                       CXD                            X70400000
               0,                       LTORG                          X70420000
               0,                       PUNCH                          X70440000
               0,                       REPRO                          X70460000
               0,                       PUSH                           X70480000
               0,                       POP                            X70500000
               1,                       PRINT                          X70520000
               0,                       USING                          X70540000
               0,                       DROP                           X70560000
               1,                       SPACE                          X70580000
               1,                       EJECT                          X70600000
               1,                       TITLE                          X70620000
               0,                       MNOTE                          X70640000
               0),                      INVALID                        X70660000
               AOTSEQ,SEQT,1                                            70680000
         EJECT                                                          70700000
*********************************************************************** 70720000
*   PUTLSIZ ROUTINE IS CALLED EACH TIME BEFORE JPUTL IS ISSUED TO       70740000
*   DETERMINE THE LOGICAL OUTPUT BUFFER SIZE NEEDED FOR A PARTICULAR    70760000
*   STATEMENT.                                                          70780000
*   (AN EDITED TEXT RECORD IS BUILT DIRECTLY INTO BUFFER, SO AS TO      70800000
*   SAVE A MOVE OF THE EDITED TEXT RECORD FROM A WORK AREA TO OUTPUT    70820000
*   BUFFER, AND TO SAVE 1/2K CORE THAT, OTHERWISE, WOULD HAVE TO BE     70840000
*   PROVIDED TO THE WORK BUFFER.) THE RESULT FROM THE CALCULATION IS    70860000
*   RETURNED IN REGISTER R11.                                           70880000
*        BAL   TLINK,PUTLSIZ                                            70900000
*********************************************************************** 70920000
         SPACE 3                                                        70940000
*****************************************                               70960000
*        COMPUTE O/P BUFFER SIZE        *                               70980000
*****************************************                               71000000
PUTLSIZ  EQU   *                                                        71020000
         GOIF  (SDTCMT,STRCMT),MIX=CMTSIZ COMMENTS STATEMENT SIZE       71040000
*        GOIF  SMIPRTO,ON=MISIZ         MACRO INSTR. OR PROTOTYPE       71060000
         GOIF  SPRVCT,ON=CNTSIZ         WITH CONTINUATION CARDS         71080000
         LA    R11,SZNORM               ELSE, MUST BE NORMAL SIZE       71100000
         B     OPUTL                    GO GET BUFFER ADDRESS           71120000
CMTSIZ   EQU   *                                                        71140000
         LA    R11,SZCMT                GET BUFFER SIZE                 71160000
         B     OPUTL                    GO GET BUFFER ADDRESS           71180000
MISIZ    EQU   *                                                        71200000
         LA    R11,SZMI                 LOAD MI/PROTO SIZE              71220000
         B     OPUTL                    GO GET BUFFER ADDRESS           71240000
CNTSIZ   EQU   *                                                        71260000
         LA    R11,SZCNT                LOAD CONTINUATION SIZE          71280000
         B     OPUTL                    GO GET BUFFER ADDRESS           71300000
         EJECT                                                          71320000
*********************************************************************** 71340000
*   ABTRTN IS CALLED WHEN A MACRO DEFINITION IS TO BE FLUSHED.          71360000
*********************************************************************** 71380000
ABTRTN   EQU   *                                                        71400000
         BAL   RETURN,RESETPTR          REINIT E/T REC FOR PRINT ONLY   71420000
         LA    INDEXP,JTHDRLN+2(,INDEXO)  RESET TEXT POINTER            71440000
         SET   SNOPND,ON                INDICATE TO RETURN              71460000
         SET JPRONLY,ON                                                 71480000
         BAL   RETURN,SAVPTR            EDIT AS COMMENTS FIELD          71500000
         L     LINK,ARDSRC              POINT TO RDSRC                  71520000
         BALR  RETURN,LINK              READ ONE CARD                   71540000
         DC    AL2(RBYPONE-RFSTCRD)     BYPASS ONE CARD                 71560000
         GOIF  SINEOF,ON=EOFRTN         BRANCH IF END OF FILE           71580000
         LA    R11,SZCNT                NO, SO....                      71600000
         BAL   RETURN,OPUTL             GET O/P BUFFER                  71620000
         BAL   RETURN,HDINIT            INITIALIZE HEADER               71640000
         SET   SUPDNT,ON                SUPPRESS DIRECTORY ENTRY        71660000
         B     PROCNXT                  GO PROCESS AS NORMAL            71680000
         EJECT                                                          71700000
*********************************************************************** 72020000
*        CHECK NAME FOR SEQUENCE SYMBOL OR BLANK                      * 72040000
CKANYSYM EQU   *                                                        72060000
         GOIF  (ROSYM,RVSYM)            RETURN IF NAME A                72080000
         BCR   7,TLINK                  VS OR OS                        72100000
CHKSSNM  EQU   *                                                        72120000
         GOIF  RSSYM,ON=(TLINK)         RETURN IF NAME A S.S.           72140000
CHKNM    EQU   *                                                        72160000
         GOIF  SNMFND,OFF=(TLINK)       RETURN IF NO NAME               72180000
         ST    TLINK,EDTSVX             SAVE RETURN POINT               72200000
         BAL   RETURN,NAMERR            ELSE, LOG ERROR                 72220000
         L     TLINK,EDTSVX             RESTORE RETURN POINT            72240000
         BR    TLINK                    RETURN TO CALLER                72260000
         SPACE 3                                                        72266000
         JPATCH  X1A10,E70                                              72272000
         EJECT                                                          72280000
         JCSECT (X1A20=CS3)                                             72300000
*********************************************************************** 72320000
*                                                                     * 72340000
* RDSRC - THIS ROUTINE IS CALLED WHEN A NEW STATEMENT OR A CONTINUATION 72360000
*   RECORD IS TO BE READ. IT CALLS 'JINPUT' MACRO TO READ A RECORD      72380000
*   FROM SYSTEM INPUT, OR FROM MACRO LIBRARY IF 'JINLIB' BIT IN         72400000
*   'JINFLAG' BYTE IS ON.  IT SEQUENCE CHECKS THE RECORD WHEN ISEQ      72420000
*   SWITCH (SWITCH1 BIT 0) IS ON. FINALLY, IT MOVES THE RECORD TO       72440000
*   INPUT WORK BUFFER.                                                  72460000
*        BAL   RETURN,RDSRC                                             72480000
*        BAL   RETURN,RDSRC05                                           72500000
*                                                                       72520000
*********************************************************************** 72540000
*                                                                     * 72560000
*   RFSTCRD = READ FIRST CARD OF A STATEMENT - ALWAYS FROM READNEXT   * 72580000
*   RALLCNT = READ ALL CONTINUATIONS - FOR MACHINE/ASSEMBLER OPS      * 72600000
*   RONECNT = READ ONE CONTINUATION - FOR MACRO CALLS/PROTOTYPE STMTS * 72620000
*   RBYPCNT = BYPASS ALL CONTINUATIONS - FOR STMTS WITH HARD ERRORS   * 72640000
*   RONECRD = READ ONE CARD - FOR REPRO STATEMENT                     * 72660000
*   RBYPONE = BYPASS ONE CARD IN EDITED FORMAT - FOR DATA FLUSHING    * 72680000
*                                                                     * 72700000
*********************************************************************** 72720000
RDSRC    EQU   *                                                        72740000
         L     INPTR,INPUT              UPDATE INPTR                    72760000
RDSRC05  EQU   *                                                        72780000
         STM   R12,R9,SAVMALL           SAVE REGISTERS                  72800000
         BALR  BASE3,0                  REDEFINE BASE REGISTER          72820000
         USING *,BASE3                                                  72840000
         LH    TWKREG1,D0(,RETURN)      GET BRANCH POINT                72860000
         B     RFSTCRD(TWKREG1)         AND FAN OUT                     72880000
RFSTCRD  EQU   *                        READ FIRST CARD                 72900000
         SET   (SNXTCT,SPRVCT),OFF      RESET SWITCHES                  72920000
RDSRC10  EQU   *                                                        72940000
         NI    CNTCTR,ALLOFF                                            72960000
RDSRC20  EQU   *                                                        72980000
         L     TWKREG1,DSTGBGN          INITIALIZE STRING AREA POINTER  73000000
         ST    TWKREG1,DSTGADJ          TO ORIGINAL POINT               73020000
         ST    TWKREG1,DSTGNDX                                          73040000
         MVI   D0(TWKREG1),D0           RESET STRING COUNT              73060000
         B     RCONT                    READ CONTINUATIONS IF ANY       73080000
RONECRD  EQU   *                        READ ONE CARD                   73100000
         SET   SONECD,ON                                                73120000
         B     RFSTCRD                  GO                              73140000
RBYPONE  EQU   *                        BYPASS ONE CARD IN EDITED FORM  73160000
         SET   SBYONE,ON                INDICATE READ ONE CARD          73180000
         B     RFSTCRD                  GO                              73200000
RBYPCNT  EQU   *                        BYPASS ALL CONTINUATIONS        73220000
         SET   SBYCNT,ON                                                73240000
         B     RDSRC10                  FLUSH THROUGH CONTINUATION      73260000
RONECNT  EQU   *                        READ ONE CONTINUATION CARD      73280000
         SET   SONECT,ON                                                73300000
         B     RDSRC20                  GO GET ONE CARD                 73320000
RALLCNT  EQU   *                                                        73340000
         SET   SALLCT,ON                                                73360000
RCONT    EQU   *                                                        73380000
         GOIF  (SBYCNT,SONECT,SALLCT),NONE=RINPT BR IF NO CONTINUATION  73400000
RCNTLP   EQU   *                                                        73420000
         GOIF  SPRVCT,OFF=REXIT         RETURN IF NOT TO BE CONT'D      73440000
RINPT    EQU   *                                                        73460000
         JINPUT                         GET INPUT BUFFER POINTER        73480000
         BNP   REOFX                    GO TO END OF FILE ROUTINE       73500000
         ST    RETADR,IPTRSV            SAVE INPUT POINTER              73520000
RINIT    EQU   *                                                        73540000
         LM    R3,R5,JSRCLN             REGISTER INITIALIZATION         73560000
         IC    TWKREG1,CNTCTR           INCREMENT CARD COUNT            73580000
         LA    TWKREG1,D1(,TWKREG1)                                     73600000
         STC   TWKREG1,CNTCTR                                           73620000
         BAL   RETURN,MVSRC             MOVE RECORD TO INPUT WK BUF     73640000
*                                       SEPARATE STRINGS FROM DATA      73660000
         ST    INPTR,ENDATA                                             73680000
         MVI   D0(INPTR),JBLANK         PATCH A BLANK FOR SCANNER       73700000
         GOIF  SONECD,ON=REXIT          RETURN TO CALLER IF RONECD      73720000
         LM    SEQREG,SQLREG,JSEQCL                                     73740000
*                                                                       73780000
         GOIF  SNOCNT,ON=RSEQCHK        BRANCH IF CONT'N NOT ALLOWED    73800000
         LA    TWKREG1,D0(CNTREG,RETADR)                                73820000
         CLI   D0(TWKREG1),JBLANK       TEST IF ANY CONTINUATION        73840000
         BE    RSEQCHK                  NO, GO CHECK SEQUENCE           73860000
         SET   SNXTCT,ON                INDICATE TO BE CONTINUED        73880000
RSEQCHK  EQU   *                                                        73900000
         GOIF  SISEQ,OFF=RFCCHK         BRANCH IF NOT TO SEQ CHK        73920000
         LA    TWKREG1,D0(SEQREG,RETADR)                                73940000
         EX    SQLREG,SEQMV             MOVE SEQ FIELD TO TR AREA       73960000
         EX    SQLREG,SEQTR             TRANSLATE                       73980000
         EX    SQLREG,SEQCPR            SEQUENCE CHECK                  74000000
         EX    SQLREG,SEQSAVE           SAVE NEW SEQ VALUE              74020000
         BH    RFCCHK                   SEQUENCE OK                     74040000
         BAL   TLINK,WRNERR             GO LOG SEQUENCE ERROR           74060000
         DC    AL1(SEV25)               .                               74080000
         DC    AL1(ERR25)               INPUT SEQUENCE ERROR            74100000
*                                                                       74120000
RFCCHK   EQU   *                                                        74140000
         GOIF  (SONECD,SBYCNT,SONECT,SALLCT),NONE=RMORCNT IF RFSTCRD    74160000
         GOIF  SPRVCT,OFF=REXCS         IF THIS CD NOT CONT OF PREV CD  74180000
         L     CBGREG,JCTBGN                                    OX00081 74190002
         LA    INPTR,D0(BEGREG,RETADR)  PREPARE TO GO CHECK BLANKS      74200000
         LA    TWKREG2,D0(CBGREG,RETADR)                                74220000
         BAL   TLINK,SKPBLK0            SKIP BLANKS                     74240000
         L     INPTR,ENDATA             RESTORE INPTR                   74260000
         GOIF  SNOFND,ON=REXCS          O.K. IF BLANK                   74280000
         BAL   TLINK,WRNERR             GO LOG CONTINUATION ERROR       74300000
         DC    AL1(SEV26)               CONTINUATION CARD STARTS        74320000
         DC    AL1(ERR26)               BEFORE CONTINUATION COLUMN      74340000
*                                                                       74360000
REXCS    EQU   *                                                        74380000
         GOIF  SALLCT,OFF=RMORCNT       BRANCH IF NOT RALLCNT           74400000
         CLI   CNTCTR,J3                CHECK CARD COUNT                74420000
         BL    RMORCNT                  GO GET CONTINUATIONS            74440000
         BH    REXCS10                  TOO MANY CONTINUATIONS, ERROR   74460000
         GOIF  SNXTCT,ON=REXCS10        MORE CONT'NS IS ERROR           74480000
         SET   SPRVCT,OFF               RESET CONTINUATION BIT          74500000
         B     RAXIT                    EXIT                            74520000
REXCS10  EQU   *                                                        74540000
         BAL   TLINK,WRNERR             GO LOG CONTINUATION ERROR       74560000
         DC    AL1(SEV69)               MORE THAN 2 CONTINUATION        74580000
         DC    AL1(ERR69)               CARDS IN THIS STMT              74600000
         SET   SBYCNT,ON                BYPASS ALL CONTINUATIONS        74620000
         SET   SALLCT,OFF                                               74640000
*                                                                       74660000
RMORCNT  EQU   *                                                        74680000
         SET   SPRVCT,OFF               RESET CONTINUATION SWITCH       74700000
         GOIF  SNXTCT,OFF=RAXIT         BRANCH IF NO MORE CONT'NS       74720000
         SET   SPRVCT,ON                INDICATE TO BE CONTINUED        74740000
         SET   SNXTCT,OFF               PREPARE FOR NEXT CARD           74760000
*                                                                       74780000
RAXIT    EQU   *                                                        74800000
         GOIF  SALLCT,ON=RCNTLP         READ NEXT CARD IF RALLCNT       74820000
REXIT    EQU   *                        RETURN TO CALLER                74840000
         SET   (SONECD,SONECT,SALLCT),OFF                               74860000
*        RBYPCNT BIT WILL BE SET OFF AT WRAPFLD WHEN ALL CARDS TO BE    74880000
*        BYPASSED ARE READ.                                             74900000
*                                                                       74920000
         LM    R12,R9,SAVMALL           RESTORE REGISTERS               74940000
         B     D2(,RETURN)              RETURN TO CALLER                74960000
REOFX    EQU   *                                                        74980000
         SET   SINEOF,ON                INDICATE END OF FILE            75000000
         B     REXIT                    RETURN TO CALLER                75020000
*                                                                       75040000
MVSRC    EQU   *                                                        75060000
         ST    RETURN,EDTSVX            SAVE RETURN POINTER             75080000
         LR    SRCPTR,RETADR            SET SOURCE RECORD POINTER       75100000
         LA    SRCEND,CRDLN(,SRCPTR)    END RECORD POSITION PLUS 1      75120000
         L     DSTGPTR,DSTGNDX          RESERVE SPACE FOR STRING COUNT  75140000
         LA    DSTGPTR,D1(,DSTGPTR)                                     75160000
         ST    DSTGPTR,DSTGNDX                                          75180000
         NI    STGCNT,ALLOFF            ZERO OUT STRING COUNT           75200000
         LA    STGLOC,D1                GET STRING LOCATION             75220000
         GOIF  SBYCNT,ON=MVSRC1         EDIT AS NON-CONT'N IF TO BYPASS 75240000
         GOIF  SPRVCT,ON=MVPBSTG        BRANCH IF A CONT'N CARD         75260000
MVSRC1   EQU   *                                                        75280000
         LTR   BEGREG,BEGREG            IF NO PRE-BEGIN STRING          75300000
         BZ    MVDATA                   GO MOVE DATA                    75320000
         L     TWKREG2,PBGLEN           GET PRE-BEGIN STRING LENGTH -1  75340000
MVSTRING EQU   *                                                        75360000
         LA    R1,D1(TWKREG2,SRCPTR)    GET UPPER LIMIT OF SCAN         75380000
         LR    TWKREG1,SRCPTR           GET BEGIN ADDRESS TO BE SCANNED 75400000
         B     MVSTR20                  GO TEST FOR END OF STRING       75420000
MVSTR10  EQU   *                                                        75440000
         LA    TWKREG1,D1(,TWKREG1)     STEP TO NEXT COLUMN             75460000
MVSTR20  EQU   *                                                        75480000
         CR    TWKREG1,R1               TEST IF END OF STRING           75500000
         BE    MVNONE                   YES, BLANK STRING               75520000
         CLI   D0(TWKREG1),JBLANK       IS IT A BLANK                   75540000
         BE    MVSTR10                  YES, GO CHECK NEXT COLUMN       75560000
         STC   STGLOC,SOPTR             MOVE IN STRING OUTPUT POINTER   75580000
         EX    TWKREG2,MVSTRG           MOVE STRING                     75600000
         LA    TWKREG2,D1(,TWKREG2)     MAKE IT TRUE LENGTH             75620000
         STC   TWKREG2,SOLEN            MOVE IN STRING TRUE LENGTH      75640000
         LA    SRCPTR,D0(TWKREG2,SRCPTR) POINT TO NEXT FIELD            75660000
         IC    TWKREG1,STGCNT           UPDATE STRING COUNT             75680000
         LA    TWKREG1,D1(,TWKREG1)     BY ONE                          75700000
         STC   TWKREG1,STGCNT                                           75720000
         LA    TWKREG1,D2(TWKREG2,DSTGPTR) UPDATE STRING INDEX          75740000
         ST    TWKREG1,DSTGNDX                                          75760000
MVSTR30  EQU   *                                                        75780000
         CR    SRCPTR,SRCEND            TEST IF END OF RECORD           75800000
         BL    MVDATA                   NO, GO MOVE DATA                75820000
MVRTN    EQU   *                                                        75840000
         L     DSTGPTR,DSTGADJ          BACK UP TO STRING POINTER TO    75860000
         IC    TLINK,STGCNT             INSERT STRING COUNT INTO        75880000
         STC   TLINK,SCCNT              EDITED TEXT                     75900000
         L     TLINK,DSTGNDX            UPDATE ADJUSTED POINTER         75920000
         ST    TLINK,DSTGADJ                                            75940000
         L     RETURN,EDTSVX            YES, RETURN TO CALLER           75960000
         BR    RETURN                   RETURN                          75980000
MVNONE   EQU   *                                                        76000000
         LR    SRCPTR,TWKREG1           POINT TO NEXT FIELD             76020000
         B     MVSTR30                  GO TEST FOR END OF RECORD       76040000
MVPBSTG  EQU   *                                                        76060000
         L     TWKREG2,JCTBGN           PREPARE TO SCAN TO CONT'N BEG.  76080000
         BCTR  TWKREG2,0                BACK UP 1                       76100000
         B     MVSTRING                 GO SCAN TO END OF STRING        76120000
*                                                                       76140000
MVDATA   EQU   *                                                        76160000
         LR    TWKREG2,SLNREG           GET SOURCE LENGTH               76180000
         GOIF  SPRVCT,OFF=MVDEX         BRANCH IF NOT CONT'D            76200000
         GOIF  SBYCNT,ON=MVDEX          BRANCH IF TO BYPASS ONE CARD    76220000
         L     TWKREG2,JCTLN            ELSE, GET CONT'N LENGTH         76240000
MVDEX    EQU   *                                                        76260000
         LR    DSTGPTR,INPTR            SET UP DESTINATION  POINTER     76280000
         EX    TWKREG2,MVSEGT                                           76300000
         LA    INPTR,D1(TWKREG2,INPTR)  BUMP WORK AREA POINTER          76320000
         LA    SRCPTR,D1(TWKREG2,SRCPTR) POINT TO NEXT FIELD            76340000
         CR    SRCPTR,SRCEND            TEST IF END OF DATA             76360000
         BNL   MVRTN                    YES, EXIT                       76380000
         L     TWKREG2,PNDLEN           LOAD POST-END STRING LENGTH     76400000
         LA    STGLOC,D1(,CNTREG)       SET UP POST-END STRING LOCATION 76420000
         L     DSTGPTR,DSTGNDX          SET UP DESTINATION POINTER      76440000
         B     MVSTRING                 GO SCAN TO END OF STRING        76460000
MVSEGT   MVC   D0(0,DSTGPTR),D0(SRCPTR) OFF-THE-LINE MOVE               76480000
MVSTRG   MVC   SDATA(0),D0(SRCPTR)      OFF-THE-LINE MOVE               76500000
SEQMV    MVC   SEQSVT(0),D0(TWKREG1)    MOVE SEQ FIELD TO TR AREA       76520000
SEQTR    TR    SEQSVT(0),JTRTABLE       TRANSLATE                       76540000
SEQCPR   CLC   SEQSVT(0),SEQSV          COMPARE SEQ FIELD               76560000
SEQSAVE  MVC   SEQSV(0),SEQSVT          SAVE NEW SEQ VALUE              76580000
         DROP  INDEXP,R14                                               76600000
         EJECT                                                          76620000
*********************************************************               76640000
*        PROTOTYPE STATEMENT PARAMETER PROCESSOR        *               76660000
*********************************************************               76680000
         USING MPROTO,INDEXP                                            76700000
         USING MPMT,R14                                                 76720000
MIPRTOIN JSAVE BASE=NO                                                  76740000
         LR    BASE3,LINK               REDEFINE BASE REGISTER          76760000
         USING MIPRTOIN,BASE3                                           76780000
         GOIF  SXPRTO,OFF=MCALLIN       BRANCH IF MCARO CALL            76800000
PROTOIN  EQU   *                        PROTOTYPE PROCESSOR             76820000
         SET   SDENT,OFF                INSURE SS DEF IS NOT ENTERED    76840000
         SET   JTPROTO                  INDICATE PROTO                  76860000
         BAL   RETURN,DTADJ             MAKE DATA ADJUSTMENT            76880000
         B     STEND                    END STATEMENT IF RETURN HERE    76900000
         GOIF  SNMFND,ON=PRTX           BRANCH IF THERE IS A NAME       76920000
* IF NO NAME, INDICATE THAT A NULL PARAMETER EXISTS FOR MACRO EXPANSION 76940000
         L     R3,GTPVALOC              GET POS PARM COUNTER INDICATOR  76960000
         LA    R3,D3(,R3)               BUMP POS PARM CTR BY 3 BYTES    76980000
         ST    R3,GTPVALOC              SAVE FOR MACRO GENERATOR        77000000
PRTX     EQU   *                                                        77020000
         LA    R11,SZMI                                                 77040000
         BAL   RETURN,OPUTL             GET O/P BUFFER                  77060000
         BAL   RETURN,HDINIT            INITIALIZE HEADER               77080000
         ST    INPTR,FPTRSV             SAVE POINTERS                   77100000
         ST    INDEXP,OFPTRSV                                           77120000
         SET   JTPPKEY                  ASSUME KEYWORD PARAMETER        77140000
         SET   JPSOP,ON                                                 77160000
PRTX10   EQU   *                                                        77180000
         CLI   D0(INPTR),JAMPER         TEST IF AMPERSAND               77200000
         BNE   PRTCMA                   BRANCH IF NOT                   77220000
*BUMP THE POINTER PAST THE '&' FOR THE DIRECTORY ROUTINE                77240000
         LA    INPTR,D1(,INPTR)         BUMP OVER V SYM HEAD            77260000
         BAL   RETURN,TRT01             TRT V SYMBOL                    77280000
         BCT   R3,BADPARM               ERROR IF NOT A/N STRING         77300000
         MVI   FLGBYT,PARMFLG           ASSUME POSITIONAL PARAMETER     77320000
         GOIF  SNMFND,OFF=PRTX40        MUST BE OPERAND IF NOT NAME     77340000
         CLI   D0(R1),JBLANK            TERMINATOR MUST BE A BLANK      77360000
         BNE   BADPARM                  ELSE,ERROR                      77380000
PRTX15   CH    R15,H7                   LENGTH MUST BE RIGHT            77400000
         BNL   BADPARM                  ELSE, LOG ERROR                 77420000
         LR    PARAM2,TWKREG2           GET MOVE LENGTH OF SYMBOL       77440000
         LR    PARM,INPTR               GET THE POINTER                 77460000
         MVI   DDNDX1,VARBSYMD          INDICATE VAR SYM DEFINITION     77480000
         BAL   R3,DIRENT                MAKE DIRECTORY ENTRY            77500000
         GOIF  SNMFND,OFF=PRTX20        GO FIND NEXT OPERAND            77520000
PRTX16   BAL   RETURN,ADJ20             MAKE DATA ADJUSTMENT            77540000
         B     STEND                    END STATEMENT IF RETURN HERE    77560000
         B     PRTX                     EDIT OPERAND                    77580000
PRTX20   EQU   *                                                        77600000
         TM    DERRCD,BITFF             SEE IF ERROR RETURNED FROM DIR  77620000
         BNZ   SKMNDST                  FLUSH MACRO IF ERROR FOUND      77640000
         LR    INPTR,R1                 UPDATE POINTER                  77660000
         CLI   D0(INPTR),JEQUAL         TEST IF KWD PARAM               77680000
         BNE   PRTX30                   BRANCH IF NOT                   77700000
         MVC   VECPTR,D1(R11)           SAVE VECTOR POINTER             77720000
         LA    R14,MPHDL(,INDEXP)       GET HDR RECORD LENGTH           77740000
PRTX25   ST    R14,MTXTP                SAVE MT POINTER                 77760000
         LR    R15,R14                  SAVE HDF BASE REGISTER          77780000
         SR    R15,INDEXO               COMPUTE OPERAND POINTER         77800000
         STH   R15,JTOPP                                                77820000
         BAL   RETURN,BLDPMT            BUILD PARAM MT                  77840000
         BAL   RETURN,NEXTPM            EDIT KWD OPERAND                77860000
         SET   (DSDTX,DECMA,DEEQL,DLPRN),OFF RESET INDICATORS           77880000
         BAL   RETURN,WRAPOPND          WRAP UP OPERAND                 77900000
PRTX30   EQU   *                                                        77920000
         CLI   D0(INPTR),JRPARN         TEST IF END OF SUBLIST          77940000
         BNE   PRTX35                   BRANCH IF NOT                   77960000
         LA    INPTR,D1(,INPTR)         YES, BUMP OVER R PAREN          77980000
         BAL   R12,DPARCT               DECREMENT PAREN COUNT           78000000
         BL    UNBAL                    LOG ERROR IF UNBAL PARENS       78020000
PRTX35   EQU   *                                                        78040000
         CLI   D0(INPTR),JCOMMA         OR IS IT A COMMA                78060000
         BE    PRTX50                   BRANCH IF YES                   78080000
         CLI   D0(INPTR),JBLANK         OR IS IT A BLANK                78100000
         BE    STEND                    END STATEMENT                   78120000
         B     BADPARM1                 BAD PARAMETER                   78140000
PRTX40   EQU   *                                                        78160000
         CLI   D0(R1),JEQUAL            IS IT KEYWORD                   78180000
         BNE   PRTX15                   BRANCH IF NOT                   78200000
         MVI   FLGBYT,PARMFLG+VPTYP     ELSE, SO INDICATE               78220000
         SET   SKWPRM,ON                INDICATE PROCESSING KWD         78240000
         B     PRTX15                   CONTINUE CHECKING               78260000
PRTX50   EQU   *                                                        78280000
         LA    INPTR,D1(,INPTR)                                         78300000
         L     PARAM1,MINPUT                                            78320000
         BAL   TLINK,SHFTDTA            SHUFFLE DATA A LITTLE           78340000
         CLI   D0(INPTR),JBLANK         IS COMMA FOLLOWED BY A BLANK    78360000
         BNE   PRTX                     EDIT NEXT PARAMETER             78380000
         GOIF  SNOCNT,ON=STEND          END STMT IF NO CONT'N ALLOWED   78400000
         BAL   RETURN,BUMPD             BUMP OVER COMMENTS              78420000
*                                                                       78440000
PRTX70   EQU   *                                                        78460000
         L     PARAM1,MINPUT                                            78480000
         BAL   TLINK,SHFTDTA            SHUFFLE, SHUFFLE                78500000
         B     PRTX                     EDIT NEXT PARAMETER             78520000
PRTCMA   EQU   *                                                        78540000
         CLI   D0(INPTR),JCOMMA         TEST IF AN OMITTED PARAMETER    78560000
         BNE   PRTBLK                   BRANCH IF NOT                   78580000
         GOIF  SNMFND,ON=BADPARM        BAD PARAMETER                   78600000
*NOW WE KNOW IT'S A NULL PARAMETER, UP THE PARM COUNTER FOR GENERATOR   78620000
         L     R3,GTPVALOC              GET POS PARM COUNTER INDICATOR  78640000
         LA    R3,D3(,R3)               BUMP POS PARM CTR BY 3 BYTES    78660000
         ST    R3,GTPVALOC              SAVE FOR MACRO GENERATOR        78680000
         B     PRTX50                   SHIFT DATA IF YES               78700000
PRTBLK   CLI   D0(INPTR),JBLANK         TEST IF END OF STATEMENT        78720000
         BNE   BADPARM                  LOG ERROR IF NOT                78740000
         B     STEND                    ELSE, WRAP UP STATEMENT         78760000
         SPACE 3                                                        78780000
*        LINKAGES ARE                                                   78800000
*              BAL   RETURN,DTADJ                                       78820000
*              BAL   RETURN,ADJ20                                       78840000
DTADJ    EQU   *                                                        78860000
         ST    RETURN,ADJSV             SAVE RETURN POINT               78880000
         L     RCNT,INPUT               BEGIN OF FIELD                  78900000
         BAL   RETURN,PRESUB1           OUTPUT PRE-SUBSTITUTION RECORD  78920000
         GOIF  SNMFND,OFF=ADJ25         BRANCH IF NO NAME               78940000
         L     INPTR,INPUT              POINT TO NAME                   78960000
         GOIF  SXPRTO,ON=ADJOUT         LET GO IF PROTO                 78980000
         GOIF  NSSYM,ON=ADJ25           IGNORE NAME IF SS               79000000
ADJOUT   EQU   *                                                        79020000
         L     RETURN,ADJSV             RESTORE POINTER                 79040000
         B     D4(,RETURN)              RETURN                          79060000
ADJ20    EQU   *                                                        79080000
         ST    RETURN,ADJSV             SAVE RETURN POINTER             79100000
ADJ25    EQU   *                                                        79120000
         SET   SNMFND,OFF               INDICATE IN OPERAND             79140000
         L     INPTR,OPNDPTR            BUMP TO OPERAND FIELD           79160000
ADJ30    BAL   TLINK,SKPBLK             GO FIND NEXT PARAMETER          79180000
         GOIF  SNOFND,ON=ADJ40          BRANCH IF NOT FOUND YET         79200000
         L     TWKREG1,ENDATA           MAKE ENDATA ADJUSTMENT          79220000
         SH    TWKREG1,MINDIF           FOR 1ST CARD IN STATEMENT       79240000
         ST    TWKREG1,ENDATA           BEFORE SHIFTING                 79260000
         L     PARAM1,INPUT                                             79280000
         BAL   TLINK,SHFTDTA            SHIFT DATA                      79300000
         B     ADJOUT                   RETURN                          79320000
ADJ40    EQU   *                                                        79340000
         MVC   DTLENG(L'DTLENG),TCNTLN2                                 79360000
ADJ45    EQU   *                                                        79380000
         GOIF  SPRVCT,OFF=ADJOUT2       ELSE,CHECK IF TO BE CONTINUED   79400000
         L     INPTR,MINPUT                                             79420000
         BAL   RETURN,READATA           READ NEXT CARD                  79440000
         L     INPTR,MINPUT                                             79460000
         BAL   TLINK,SKPBLK             CHECK IF PARAM STARTS HERE      79480000
         GOIF  SNOFND,ON=ADJ45          IF NOT, NEXT CARD               79500000
         L     INPTR,ENDATA                                             79520000
         BAL   TLINK,GETDNT            YES, READ IN BUFFER FULL         79540000
         B     ADJOUT                   GO EDIT THEM                    79560000
ADJOUT2  EQU   *                                                        79580000
         L     RETURN,ADJSV             RESTORE POINTER                 79600000
         BR    RETURN                   RETURN TO CALLER                79620000
BUMPD    EQU   *                                                        79640000
         LH    RCNT,DTLENG              GET DATA LENGTH                 79660000
         SH    RCNT,COLCTR              MINUS CURRENT LENGTH            79680000
         AR    INPTR,RCNT               ADD INTO INPTR                  79700000
         BR    RETURN                   RETURN TO CALLER                79720000
SHFTDTA  EQU   *                                                        79740000
         L     TWKREG1,MINPUT           GET BEGIN OF BUFFER             79760000
         L     TWKREG2,ENDWKA           COMPUTE DATA MOVE LENGTH        79780000
         SR    TWKREG2,INPTR                                            79800000
         LR    PARAM2,INPTR                                             79820000
         CH    TWKREG2,H255             DO WE SHIFT MORE THAN 255       79840000
         BNH   SHIFT                    MOVE IF NOT OVER 255 CHAR       79860000
         MVC   D0(MAXCNT,TWKREG1),D0(PARAM2) ELSE, MOVE 255 FIRST       79880000
         SH    TWKREG2,H255             MAKE ADJUSTMENT                 79900000
         AH    TWKREG1,H255             TO MOVE THE REMAINING           79920000
         AH    PARAM2,H255              NUMBER OF BYTES                 79940000
         BCTR  TWKREG2,0                REDUCE MOVE LENGTH BY 1         79960000
SHIFT    EX    TWKREG2,SHMOVE           GO SHIFT DATA INTO WORK AREA    79980000
         SR    INPTR,PARAM1             NUMBER OF BYTES SHIFTED         80000000
         LH    RCNT,CRDCTR              GET CARD NUMBER                 80020000
         LH    TWKREG2,COLCTR           GET ACCUMULATED NUM OF COL      80040000
         AR    TWKREG2,INPTR            ADD ADDITIONAL NUM OF COLUMNS   80060000
COUNT    CH    TWKREG2,DTLENG           STILL IN THE SAME CARD OR NOT   80080000
         BL    COUNTX                   YES.                            80100000
         SH    TWKREG2,DTLENG                                           80120000
         AH    RCNT,H1                                                  80140000
         MVC   DTLENG(L'DTLENG),TCNTLN2 SET DATA LENGTH                 80160000
         B     COUNT                    LOOP UNTIL END OF FIELD         80180000
COUNTX   EQU   *                                                        80200000
         STH   TWKREG2,COLCTR           SAVE COUNTERS                   80220000
         STH   RCNT,CRDCTR                                              80240000
         L     TWKREG1,ENDATA                                           80260000
         SR    TWKREG1,INPTR            FIND OUT ENDATA AFTER SHIFTING  80280000
         ST    TWKREG1,ENDATA           WHICH IS NEXT AVAILABLE LOC     80300000
         LR    INPTR,TWKREG1            FOR NEXT CARD                   80320000
GETDNT   ST    TLINK,RTNSV1             SAVE RETURN POINT               80340000
GETDTA   EQU   *                                                        80360000
         GOIF  SPRVCT,OFF=GETDX         EXIT IF NOT CONTINUED           80380000
GETD10   L     TWKREG2,ENDWKA           ELSE, CHECK IF STILL HAVE ROOM  80400000
         SR    TWKREG2,INPTR            FOR ONE MORE CARD               80420000
         CH    TWKREG2,DTLENG                                           80440000
         BNH   GETDX                    NO MORE ROOM, EXIT.             80460000
         BAL   RETURN,READATA           GET ONE CARD                    80480000
         L     INPTR,ENDATA                                             80500000
         B     GETDTA                   GET NEXT CARD                   80520000
         SPACE                                                          80540000
R9SAVE   EQU   OPCDPTR                                                  80560000
READATA  ST    RETURN,R9SAVE                                            80580000
         L     RETURN,ARDSRC05          GET BRANCH ADDRESS              80600000
         BALR  RETURN,RETURN            READ IT IN                      80620000
         DC    AL2(RONECNT-RFSTCRD)     .                               80640000
         GOIF  SINEOF,OFF=READATA5      EOF NOT ALLOWED        @OX07290 80650005
         LA    R10,ERR263               LOAD ERR MSG NR        @OX07290 80652005
         B     JABORT                   GEN ERR MSG, TERMINATE @OX07290 80654005
READATA5 EQU   *                                               @OX07290 80656005
         LA    R11,SZCMT                                                80660000
         BAL   RETURN,OPUTL             GET O/P BUFFER                  80680000
         BAL   RETURN,HDINIT            INITIALIZE HEADER               80700000
         SET   JPSOP,ON                 INDICATE ASSEMBLER OP           80720000
         SET   JNOCNT,ON                PRINT-ONLY, NO STMT NUMBER      80740000
         SET   JTPROTO                  INDICATE PROTO                  80760000
         GOIF  SMI,OFF=GETD20           BRANCH IF NOT MI                80780000
         SET   JTCALL                   ELSE, RESET IOC                 80800000
GETD20   EQU   *                                                        80820000
         BAL   RETURN,PRESUB            OUTPUT PRE-SUB RECORD           80840000
         L     RETURN,R9SAVE                                            80860000
         BR    RETURN                   RETURN                          80880000
GETDX    EQU   *                                                        80900000
         L     INPTR,MINPUT             RESTORE INPTR                   80920000
         L     TLINK,RTNSV1             RESTORE RETURN POINT            80940000
         BR    TLINK                    RETURN TO CALLER                80960000
SHMOVE   MVC   D0(0,TWKREG1),D0(PARAM2) OFF-THE-LINE MOVE               80980000
PRESUB   EQU   *                                                        81000000
         L     TWKREG1,JCTBGN           COMPUTE DIF B/ BEGIN COL AND    81020000
         S     TWKREG1,JBEGCL           CONT'N COL TO DETERMINE PRE-SUB 81040000
         LR    RCNT,INPTR               RECORD BEGIN LOCATION           81060000
         SR    RCNT,TWKREG1                                             81080000
PRESUB1  EQU   *                                                        81100000
         ST    RETURN,RTNSV                                             81120000
         SET   SCTLRTN,ON                                               81140000
         B     WRAPF1                   OUTPUT PRE-SUB RECORD           81160000
RECLN    EQU   *                                                        81180000
         LR    TWKREG1,INDEXP                                           81200000
         SR    TWKREG1,INDEXO           CALCULATE AND                   81220000
         STH   TWKREG1,JTRLI            SAVE RECORD LENGTH              81240000
         BR    RETURN                   RETURN TO CALLER                81260000
*                                                                       81280000
SKMNDST  SET   SKPMND,ON                FLUSH MACRO DEFINITION          81300000
         SET   SBDPROTO,ON              BAD PROTO                       81320000
STEND    EQU   *                                                        81340000
         SET   SXPRTO,OFF                                               81360000
         MVI  PARMSTAT,D0                                               81380000
CNTFLSH  L     INPTR,INPUT                                              81400000
         BAL   TLINK,GETDNT             FLUSH A BUFFER FULL OF CONS     81420000
         GOIF  SPRVCT,ON=CNTFLSH        BRANCH IF STILL MORE TO FLUSH   81440000
         LA    R11,D8                   LESE, ...                       81460000
         BAL   RETURN,OPUTL             GET O/P BUFFER FOR              81480000
         MVC   JTRLI(L'PPHD),PPHD       END-OF-PARAM RECORD             81500000
PROTOUT  JRETURN                        RETURN TO CALLER                81520000
*                                                                       81540000
PPHD     DS    0CL8                     PARAM END RECORD                81560000
         DC    AL2(D8)                  RECORD LENGTH                   81580000
         DC    AL1(JPSOP,D0)            FLAGS                           81600000
         DC    AL1(JTPEND,D0)           OP CODE                         81620000
         DC    AL1(D0,D0)               NOT USED                        81640000
         DS    0F                                                       81660000
BLDPMT   EQU   *                                                        81680000
         BAL   R12,MTENTRY1             BUILD MT                        81700000
         LA    INPTR,D1(,INPTR)                                         81720000
         ST    INPTR,FPTRSV             UPDATE POINTER                  81740000
         SET   (DECMA,DEEQL),ON                                         81760000
         BR    RETURN                   RETURN TO CALLER                81780000
         SPACE 3                                                        81800000
         EJECT                                                          81820000
MCALLIN  EQU   *                                                        81840000
         SET   JTCALL                   INDICATE MACRO CALL             81860000
         SET   SMI,ON                                                   81880000
MACPRM   BAL   RETURN,DTADJ             MAKE DATA ADJUSTMENT            81900000
         B     PRESTEND                 END STMT IF RETURN HERE         81920000
         GOIF  SNMFND,OFF=MACPRM0       BRANCH IF NO NAME               81940000
         BAL   RETURN,MPOPND            EDIT THE NAME PARAMETER         81943000
         GOIF  JSUBOPND,ON=MACPRM2      NAME WAS VARIABLE SYMBOL        81946000
         GOIF  NMPURE,ON=BADNAME        BR IF NAME SCAN HAD IMPURITY    81949000
         B     MACPRM2                  GO ON TO DO OPERAND             81952000
MACPRM0  EQU   *                                                        81955000
         LA    R11,SZMI                 PREPARE TO OUTPUT               81960000
         BAL   RETURN,OPUTL             OMITTED OPERAND                 81980000
         MVC   D0(L'OMTNM,INDEXO),OMTNM FOR MACRO CALL NAME             82000000
MACPRM1  BAL   RETURN,MPOPND            EDIT NEXT OPERAND               82020000
MACPRM2  GOIF  SUBLST,ON=MACPRM1        NEXT PARAM IF IN SUBL           82040006
         GOIF  SNMFND,OFF=MACPRM1       OR IN OPERAND FIELD             82060000
         BAL   RETURN,ADJ20             ELSE ONE MORE DATA ADJUSTMENT   82080000
         B     STEND                    END STATEMENT IF RETURN TO HERE 82100000
         B     MACPRM1                  NEXT OPERAND IF RETURN TO HERE  82120000
PRESTEND LA    R11,SZMI                 PREPARE TO OUTPUT               82140000
         BAL   RETURN,OPUTL             OMMITTED OPERAND                82160000
         MVC   D0(L'OMTNM,INDEXO),OMTNM FOR MACRO CALL NAME             82180000
         B     STEND                    NOW FLUSH                       82200000
         SPACE 3                                                        82220000
MPOPND   EQU   *                                                        82240000
         ST    RETURN,MPOPSV            SAVE RETURN LINKAGE             82260000
MIX      LA    R11,SZMI                                                 82280000
         BAL   RETURN,OPUTL             GET O/P BUFFER                  82300000
         BAL   RETURN,HDINIT            INITIALIZE HEADER               82320000
         ST    INPTR,FPTRSV             SAVE INPTR                      82340000
         ST    INDEXP,OFPTRSV           SAVE HEADER DATA POINTER        82360000
         LA    R14,MPHDL(,INDEXP)       GET HDR RECORD LENGTH           82380000
         ST    R14,MTXTP                SAVE META TEXT POINTER          82400000
         SR    R14,INDEXO               COMPUTE OPERAND POINTER         82420000
         STH   R14,JTOPP                AND SAVE                        82440000
         SET   POSSUBL,OFF              INIT SUBLIST 1ST SCAN SWITCH    82460000
         SET   JTCPPOS                  ASSUME POSITIONAL CALL          82480000
         SET   JPSOP,ON                                                 82500000
*                                                                       82520000
         BAL   RETURN,NEXTPARM          EDIT ONE PARAMETER              82540000
MIX5     EQU   *                                                        82560000
         CLI   MSERR,D0                 TEST FOR ERRORS                 82580000
         BE    MIX7                     KEEP GOING IF NONE              82600000
         GOIF  MXRPRN,ON=UNBAL1         BR IF PAREN NOT PAIRED @AX12896 82605006
         CLI   JTIOP,JTCPKEY            KEYWORD CALL PARM?     @AY14037 82607000
         MVC   D0(L'OMTNM,INDEXO),OMTNM OMITTED PARM RECORD             82610000
         BNE   MIX6                     NOT KW DONT CH OPCODE  @AZ19665 82610400
         MVI   JTIOP,JTCPKEY            THIS WAS A KW OPERAND  @AY14037 82610700
MIX6     GOIF  SUBLST,OFF=MIX8          IN SUBLIST ?           @AZ19665 82611000
         SET   MPSB,ON                  YES MARK IT            @AZ19665 82611300
         B     MIX8                     THE RECORD IS PERFECT AS IS     82612000
MIX7     EQU   *                                                        82615000
         BAL   RETURN,WRAPOPND          ELSE WRAP UP OPERAND            82620000
MIX8     CLI   D0(INPTR),JRPARN         BRANCH IF ....                  82640000
         BNE   MPX10                    BRANCH IF NOT                   82660000
         BAL   R12,DPARCT               END OF SUBLIST                  82680006
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    82700000
         BH    MPX10                    GO ON IF HIGH          @AY14037 82720000
         BL    UNBAL                    GO TEST DELIM          @AY14037 82722000
         SET   (MPSB,MPSBL),ON          MARK LAST SUBL REC     @AY14037 82724000
         B     MPX10                    GO ON MAY BEE MORE     @AY14037 82726000
UNBAL1   GOIF  (ALTERN),OFF=UNBAL       BR: NOT ALTERNATE      @OX12896 82730006
         SET   SUBLERR,ON               IND ERR IN SUBL        @OZ06551 82732006
         SET   (ALTERN),OFF             RESET SW               @AX12896 82734006
UNBAL    EQU   *                                               @AX12896 82736006
         BAL   TLINK,ABSERR             LOG ERROR ON UNP PARENS@OZ06551 82740006
         DC    AL1(10*16+SEV24)         GO TO SKMNDST RTN VIA ABSERR    82760000
         DC    AL1(ERR24)               UNBALANCED PAREN                82780000
MPX10    CLI   D0(INPTR),JCOMMA                                         82800000
         BE    MPCMA                    COMMA                           82820000
         CLI   D0(INPTR),JBLANK         OR BLANK                        82840000
         BE    MPBLK                    BLANK MEANS END OF STMT@OX19887 82860000
         LA    R11,SZCMT                ROOM FOR NEXT RECORD   @OX19887 82862000
         BAL   RETURN,OPUTL             PUT OUT PREVIOUS REC   @OX19887 82864000
         BAL   TLINK,ABSERR             LOG THE ERROR AND...   @OX19887 82866000
         DC    AL1(9*16+SEV24)          RETURN TO STEND AFTER..@OX19887 82868000
         DC    AL1(ERR24)               PARENTHESIS ERROR      @OX19887 82870000
MPBLK    EQU   *                                                        82880000
         GOIF  SNMFND,ON=MPOPOUT        EXIT IF EDITING NAME FIELD      82900000
         B     STEND                    ELSE, WRAP UP STATEMENT         82920000
         SPACE 3                                                        82940000
MPCMA    EQU   *                                                        82960000
         SET   (ALTERN,ENDSUBL),OFF     RESET SW               @OZ06551 82970006
         SET   DECMA,ON                 INDICATE END OPND COMMA PASSED  82980000
         LA    INPTR,D1(,INPTR)         BUMP OVER COMMA                 83000000
         GOIF  SNMFND,OFF=MPCMA1        GO ON IF NOT NAME FIELD         83020000
         GOIF  SUBLST,ON=MPOPOUT        OK IF IN SUBLIST                83040000
         BCT   INPTR,BADNAME            OR GO TO LOG ERROR              83060000
MPCMA1   EQU   *                                                        83080000
         L     PARAM1,MINPUT                                            83100000
         BAL   TLINK,SHFTDTA            SHIFT DATA                      83120000
         CLI   D0(INPTR),JBLANK         IS IT AN ALTERNATE FORMAT       83140000
         BNE   MPOPOUT                  BRANCH IF NOT                   83160000
         GOIF  SNOCNT,ON=MPOPOUT        OMITTED  IF NO CONT'N ALLOWED   83180000
         SET   ALTERN,ON                IND ALTENATE FORM      @OZ06551 83190006
         BAL   RETURN,BUMPD             BUMP OVER COMMENTS              83200000
         L     PARAM1,MINPUT                                            83220000
         BAL   TLINK,SHFTDTA            SHIFT DATA                      83240000
         SPACE 3                                                        83280000
MPOPOUT  EQU   *                                                        83300000
         SET   (DSDTX,DECMA,DEEQL,DLPRN),OFF RESET INDICATORS           83320000
         L     RETURN,MPOPSV                                            83340000
         BR    RETURN                   RETURN TO CALLER                83360000
         SPACE 3                                                        83380000
NEXTPARM EQU   *                        EDIT NEXT OPERAND               83400000
         MVI   FLGBYT,PARMFLG           ASSUME POSITIONAL PARAM         83420000
         SET   SKWPRM,OFF          RESET KWD INDICATOR                  83440000
NEXTPM   EQU   *                                                        83460000
         ST    RETURN,NEXPSV            SAVE RETURN LINKAGE             83480000
         ST    INPTR,FSTGL              SAVE BEGIN OF STRING            83500000
NEXTPM1  EQU   *                                                OX01771 83510002
         MVI   HDF,D0                   INIT. FLAG BYTE                 83520000
NEXTT    EQU   *                                                        83540000
         SET   SCNCAT,OFF               RESET INDICATOR                 83560000
         MVI   MSERR,D0                                                 83580000
         GOIF  SUBLST,ON=PTSUBL5        BRANCH IF EDITING SUBLIST       83600000
         CLI   D0(INPTR),JLPARN         TEST IF SUBLIST                 83620000
         BNE   NEXTP                    BRANCH IF NOT                   83640000
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    83660000
         GOIF  POSSUBL,ON=PTSUBL        GO EDIT IF GOOD SUBLIST         83720000
         SET   POSSUBL,ON               INIDCATE POSS SUBL CANDIDATE    83740000
         BAL   R12,APARCT               UP PAREN COUNT FOR L-PAREN      83760000
         B     PCSTGIN                  PROC FIRST PASS AS C-STRING     83780000
NEXTP1   EQU   *                                                        83800000
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    83820000
NEXTP    L     LINK,ATRTEST             POINT TO TRTEST                 83840000
         BALR  RETURN,LINK              TRT STRING                      83860000
         AR    R3,R3                                                    83880000
         LH    R14,PRMTBL(R3)           PREPARE TO BRANCH TO ITS        83900000
         B     D0(R14,BASE3)            CORRESPONDING ROUTINE           83920000
*                                                                       83940000
NEXRTN   L     RETURN,NEXPSV            RESTORE RETURN POINT            83960000
         BR    RETURN                   RETURN TO CALLER                83980000
         SPACE 3                                                        84000000
PRMTBL   EQU   *                        CATEGORIES                      84020000
         DC    AL2(PDSDT-MIPRTOIN)      0 = DECIMAL                     84040000
         DC    AL2(POSYM-MIPRTOIN)      1 = ALPHAMERIC                  84060000
         DC    AL2(PAMPR-MIPRTOIN)      2 = &                           84080000
         DC    AL2(PTERM-MIPRTOIN)      3 = ,=.) OR BLANK               84100000
         DC    AL2(PLPAR-MIPRTOIN)      4 = (                           84120000
         DC    AL2(PQTMD-MIPRTOIN)      5 = '                           84140000
         DC    AL2(PCSTG-MIPRTOIN)      6 = +-*/                        84160000
         DC    AL2(PLATR-MIPRTOIN)      7 = L' I' S' K' N'              84180000
         DC    AL2(PXBCT-MIPRTOIN)      8 = C' B' X'                    84200000
         DC    AL2(PTATR-MIPRTOIN)      9 = T'                          84220000
         DC    AL2(PDSYM-MIPRTOIN)      10= AND OR NOT                  84240000
         DC    AL2(PDSYM-MIPRTOIN)      11= EQ NE LT LE GT GE           84260000
         DC    AL2(PEDTA-MIPRTOIN)      12= NON ASSEMBLER               84280000
DQTMD    LA    INPTR,D1(,INPTR)                                         84300000
PQTMD    EQU   *                                                        84320000
         GOIF  POSSUBL,OFF=PQTMD3       ENDING ' ?             @OZ01697 84330004
         GOIF  DQUOT,ON=PQTMD7          BEEN HERE BEFORE       @OZ01697 84332004
PQTMD3   EQU   *                                               @OZ01697 84334004
         SET   DQUOT,ON                 ENTER QUOTE MODE                84340000
         SET   OPNDSTR,ON               SET C STG FLAG                  84360000
PQTMD5   LA    INPTR,D1(,INPTR)                                         84380001
PQTMD7   EQU   *                                               @OZ01697 84382004
         C     INPTR,ENDATA             SEE IF PAST END OF DATA OX00225 84390001
         BNL   PEDTA1                   BRANCH IF YES           OX00225 84392001
         CLI   D0(INPTR),JQUOTE         TEST IF ENDING QUOTE            84400000
         BNE   PQTMD15                  BRANCH IF NOT                   84420000
         CLI   D1(INPTR),JQUOTE         POSSIBLY, IF NOT DOUBLE QUOTE   84440000
         LA    INPTR,D1(,INPTR)                                         84460001
         BE    PQTMD5                   TOO BAD, DOUBLE QUOTE           84480000
         BCTR  INPTR,0                  BACK UP                         84500000
PQTMDEX  EQU   *                                                        84520000
         SET   DQUOT,OFF                PAIRED QUOTE                    84540000
PQTMD10  EQU   *                                                        84560000
         LA    INPTR,D1(,INPTR)         UPDATE POINTER                  84580000
         SET   DSDTX,ON                 INDICATE DISALLOW SDT           84600000
         BAL   RETURN,TENDOP            TEST END OF OPERAND             84620000
         B     NEXTP                    CONTINUE EDITING                84640000
         B     PXBCOUT                  WRAP UP OPERAND                 84660000
PQTMD15  EQU   *                                                        84680000
         CLI   D0(INPTR),JAMPER         LOOK FOR NEXT AMPERSAND         84700000
         BNE   PQTMD5                   BRANCH IF NOT                   84720000
         CLI   D1(INPTR),JAMPER         TEST IF DOUBLE AMPERSAND        84740000
         BNE   VSRTENT                  SINGLE AMPERSAND - ASSUME V SYM 84760000
         LA    INPTR,D1(,INPTR)         BUMP POINTER                    84780000
         B     PQTMD5                   EDIT AS C STG                   84800000
VSRTENT  EQU   *                        ASSUME VARIABLE SYMBOL          84820000
         GOIF  POSSUBL,ON=PCSTG         OMIT ON 1ST SUBL SCAN   OX02973 84830031
         ST    INPTR,MEZZOPTR           SAVE ENDING POINTER             84840000
         BAL   R12,MTENTRY              PUT OUT PREVIOUS TEXT           84860000
         BAL   RETURN,VSRTN             EDIT V SYM                      84880000
         BCT   INPTR,PQTMD5             CONTINUE CODE MODE              84900001
*                                                                       85100000
PXBCT    EQU   *                                                        85120000
         GOIF  DSDTX,ON=DQTMD           EDIT AS QT MODE IF DISALLOW SDT 85140000
         L     LINK,AXBCIN              GET LINK ADDRESS                85160000
PESDT    EQU   *                                                        85180000
         SET   DMIENT,ON                                                85200000
         BAL   RETURN,RTNXFR            BRANCH OUT                      85220000
         L     BASE3,AMIPRTO            NEED TWO FOR SAFTY              85240000
         L     BASE3,AMIPRTO            RESTORE BASE3                   85260000
         BCT   R12,INVSDTP              OR GO LOG ERROR                 85280000
PXBCT1   EQU   *                                                        85300000
         SET   OPNDTRM,ON               SDT FLAG                        85320000
         BAL   RETURN,TENDOP            TEST END OPERAND                85340000
         B     PXBCT2                   ON RETURN HERE, KEEP SCANNING   85360000
PXBCOUT  EQU   *                                                        85380000
         BAL   R12,MTENTRY              BUILD M.T.                      85400000
         B     NEXRTN                   RETURN TO POINT OF ORIGIN       85420000
PXBCT2   SET   OPNDSTR,ON                                               85440000
         SET   DSDTX,ON                 DISALLOW SDT                    85460000
         B     NEXTP                    CONTINUE TO SCAN FIELD          85480000
         SPACE 3                                                        85500000
MTENTRY  EQU   *                                                        85520000
         C     INPTR,FPTRSV                                             85540000
         BCR   BEQ,R12                  RETURN IF NOTHING TO PUT OUT    85560000
         SET   SCNCAT,ON                ELSE, MEANING CONCATENATION     85580000
MTENTRY1 EQU   *                                                        85600000
         L     R14,MTXTP                GET BUFFER LOCATION             85620000
         MVI   MPMCFLG,JTMCS            ENTER C STG FLAG                85640000
         L     GSPTR,FPTRSV                                             85660000
         LR    R15,INPTR                COMPUTE STRING LENGTH           85680000
         SR    R15,GSPTR                                                85700000
         STC   R15,MPMCLNG              AND SAVE                        85720000
         BCTR  R15,0                    MAKE IT MOVE LENGTH             85740000
         EX    R15,STGMV                MOVE STG TO BUFFER              85760000
         LA    R14,D3(R15,R14)          UPDATE POINTER AND              85780000
         ST    R14,MTXTP                SAVE                            85800000
         BR    R12                      RETURN TO CALLER                85820000
*                                                                       85840000
STGMV    MVC   MPMCSTG(0),D0(GSPTR)     OFF-THE-LINE MOVE               85860000
         SPACE 3                                                        85880000
TENDOP   EQU   *                                                        85900000
         GOIF  (SUBLST,POSSUBL),NONE=TENDOP0 BYPASS ON NO POSS SUBLIST  85920000
         CLI   D0(INPTR),JEQUAL         TERMINATOR EQUAL SIGN           85940000
         BNE   TENDOP0                  NO, GO CHECK FOR COMMA          85960000
         BR    RETURN                   PROC '=' IN ()'S AS CHAR STRING 85980000
TENDOP0  EQU   *                                                        86000000
         CLI   D0(INPTR),JCOMMA         RETURN TO HERE IF GOOD SDT BUT  86020000
         BE    TENDOP2                  TERMINATOR MUST BE A COMMA      86040000
         CLI   D0(INPTR),JBLANK         OR --                           86060000
         BE    TENDOP1                  A BLANK,                        86080000
         CLI   D0(INPTR),JRPARN         R PAREN IS GOOD TERMINATOR TOO  86100000
         BCR   BNE,RETURN               RETURN IF NOT                   86120000
TENDOP3  EQU   *                                                        86140000
         GOIF  POSSUBL,ON=VALSUBL       CHECK VALID SUBLIST TERMINATOR  86160000
         GOIF  SUBLST,OFF=(RETURN)      RETURN IF NOT EDITING SUBLIST   86180000
         CLI   PRNLVL1,D1               TEST IF END OF SUBOPERAND       86200000
         BCR   BHI,RETURN               NO, PART OF C STG               86220000
         BE    TENDOPZ                  BRANCH IF EQUAL                 86240000
         SET   MXRPRN,ON                ELSE, EXCESS RIGHT PARENS       86260000
TENDOPZ  EQU   *                                                        86280000
         MVC   MPOPSV(L'MPOPSV+L'NEXPSV),SUBSAVE RESTORE RTN LINKAGES   86300000
         SET   MPSBL,ON                 INDICATE LAST SUBOPND           86320000
         SET   SUBLST,OFF                                               86340000
         B     D4(,RETURN)              AND RETURN                      86360000
TENDOP1  CLI   PRNLVL1,D0               TEST IF BLANK AT ZERO LEVEL     86380000
         BE    D4(,RETURN)              YES, A TERMINATOR               86400000
         GOIF  POSSUBL,ON=GOODSUBL      ALTR FORMAT, ASSUME VALID SUBL  86420000
         B     BLKERR                   NO BLANK AT ANY PAREN LEVEL     86440000
TENDOP2  CLI   PRNLVL1,D1               AND COMMA MUST BE QUALIFIED     86460000
         BCR   BHI,RETURN               PART OF C-STG                   86480000
         BL    D4(,RETURN)              A TERMINATOR AT ZERO-PAREN LVL  86500000
         GOIF  SUBLST,OFF=(RETURN)      IN SUBLST IF AT ONE-PRN LVL     86520000
         B     D4(,RETURN)              IT IS                           86540000
         SPACE 3                                                        86560000
VALSUBL  CLI   PRNLVL1,D1               END OF LAST SUBOPERAND          86580000
         BCR   BHI,RETURN               NO, CONTINUE IN C-STRING MODE   86600000
         BE    VALSUBL1                 YES, TEST IF VALID SUBLIST      86620000
         SET   AMPER1,OFF               RESET FOR NEXT CHAR     OX04106 86630031
         B     UNBAL                    OTHERWISE, ERR ON UNBAL PARENS  86640000
VALSUBL1 CLI   D1(INPTR),JCOMMA         R-PAREN FOLL'D BY COMMA         86660000
         BE    GOODSUBL                 YES, PROC AS GOOD SUBL          86680000
         CLI   D1(INPTR),JBLANK         R-PAREN FOLL'D BY BLANK         86700000
         BNE   BADSUBL                  NO, PUT OUT BAD SUBL AS C-STG   86720000
GOODSUBL L     INPTR,FSTGL              BACK UP TO BEGIN POINT OF SUBL  86740000
         GOIF  SKWPRM,OFF=GOODSUB       CONTINUE ON NO KEYWORD          86760000
         L     INPTR,FPTRSV             BACK TO L-PAREN AFTER '=' SIGN  86780000
GOODSUB  SET   OPNDSTR,OFF              NO LONGER C-STRING              86800000
         SET   DSDTX,OFF                PREPARE TO START OVER           86820000
         MVI   PRNLVL1,D0               RESET PAREN COUNT TO ZERO       86840000
         SET   AMPER1,OFF               RESET FOR NEXT CHAR     OX04106 86850031
         B     NEXTT                    NOW, PROCESS GOOD SUBLIST       86860000
BADSUBL  SET   POSSUBL,OFF              RESET SUBLIST SCAN SWITCH       86880000
         GOIF  AMPER1,OFF=BADSUBL1      DO NOT USE AMPER SW     OX04106 86882031
         SET   AMPER,ON                 INDICATE VARSYM         OX01771 86890002
BADSUBL1 SET   AMPER1,OFF               RESET FOR NEXT CHAR     OX04106 86892031
         BR    RETURN                   PUT INVALID SUBL OUT AS C-STG   86900000
         SPACE 3                                                        86920000
PLPAR    EQU   *                                                        86940000
         BAL   R12,APARCT               UP PAREN COUNT                  86960000
         SET   DLPRN,ON                                                 86980000
         B     PCSTG                    PART OF C STG                   87000000
         SPACE 3                                                        87020000
PTERM    EQU   *                                                        87040000
         CLI   D0(INPTR),JCOMMA         TEST IF A COMMA                 87060000
         BE    PTERMC                   YES - TEST IF OMITTED OPERAND   87080000
         CLI   D0(INPTR),JBLANK         TEST IF A BLANK                 87100000
         BE    PTERMB                   YES - TEST IF OMITTED OPERAND   87120000
         CLI   D0(INPTR),JRPARN         TEST IF R PAREN                 87140000
         BNE   PCSTG                    EDIT AS C STG IF NONE ABOVE     87160000
         BAL   RETURN,TENDOP3           TEST IF END OF OPERAND          87180000
         B     PTERMP                   BRANCH IF NOT                   87200000
         B     OMITOP                   LOG OMITTED OPERAND             87220000
PTERMP   BAL   R12,DPARCT               TAKE CARE OF PAREN COUNT        87240002
         GOIF  AMPER,OFF=PCSTG          NO VARSYM               OX01771 87250002
         L     INPTR,FSTGL              POINT TO BEG OF STRING  OX01771 87260002
         B     NEXTPM1                  IT IS PART OF C STG     OX01771 87270002
PTERMC   EQU   *                                                        87280000
         CLI   PRNLVL1,D1               TEST PAREN STATUS               87300000
         BH    PCSTG                    PART OF C STG                   87320000
         BL    OMITOP                   OMITTED OPERAND                 87340000
         GOIF  SUBLST,OFF=PCSTG         PART OF C STG IF NOT IN SUBLIST 87360000
OMITOP   EQU   *                                                        87380000
         SET   OPNDOMT,ON               INDICATE OMITTED PARAM          87400000
         B     NEXRTN                   EXIT                            87420000
*                                                                       87440000
PTERMB   EQU   *                                                        87460000
         CLI   PRNLVL1,D0               BLANK MAY NOT APPEAR IN PAIRED  87480000
         BE    OMITOP                   MUST BE OMITTED OPERAND         87500000
         B     BLKERR                   BLANK DISALLOWED IN ()'S        87520000
         SPACE 3                                                        87540000
PAMPR    EQU   *                                                        87560000
         GOIF  AMPER,OFF=PAMPR05        NO BAD SUBL W VARSYM    OX01771 87570002
         SET   AMPER,OFF                RESET VARSYM FLAG       OX01771 87572002
         SET   POSSUBL,OFF              NO SUBL                 OX01771 87574002
PAMPR05  EQU   *                                                OX01771 87576002
         CLI   D1(INPTR),JAMPER         TEST FOR DOUBLE AMPERS  OX04106 87626031
         BE    PAMPR07                  GO BUMP POINTER         OX04106 87676031
         GOIF  POSSUBL,OFF=PAMPR08      CHAR STG ON 1 SUBL SCAN OX04106 87678031
         SET   AMPER1,ON                IND VARSYM IN POSSUBLST OXO4106 87678431
         B     PCSTG                    TREAT AS CHAR STG       OX04106 87678831
PAMPR07  LA    INPTR,D1(,INPTR)         BUMP POINTER            OX04106 87679231
         B     PCSTG                    TREAT AS CHAR STG       OX04106 87679631
PAMPR08  BAL   R12,MTENTRY              ELSE, PUT OUT C STG     OX04106 87680031
         ST    R1,FPTRSV                UPDATE STRING POINTER           87700000
         BAL   RETURN,VSRTN             EDIT VARIABLE SYMBOL            87720000
         BAL   RETURN,TENDOP            TRY TO WRAP UP OPND             87740000
         B     PAMPR1                   CANCEL PP FLAG                  87760000
         B     NEXRTN                   EXIT IF RETURN TO HERE          87780000
PAMPR1   SET   OPNDPRM,OFF              BAD PASSED PARAMETER            87800000
         B     NEXTP                    EDIT AS C STG                   87820000
*                                                                       87840000
VSRTN    EQU   *                                                        87860000
         ST    RETURN,VSRSV             SAVE REUTRN LINKAGE             87880000
         GOIF  SXPRTO,ON=ILPRTKY        PROTO KWD OPND MAY NOT BE V SYM 87900000
         SET   OPNDSTR,ON               ASSUME NOT PASSED PARAM         87920000
         ST    INDEXP,VSRSV1            SAVE HEADER DATA POINTER        87940000
         L     INDEXP,MTXTP             GET MT POINTER                  87960000
         SET   DMIENT,ON                                                87980000
         OI    JHWORD2+1,DMIENT         SET SECOND DMIENT SW   @AZ13722 87990000
         L     LINK,AVARSYM             GET VARSYM RTN ADDRESS          88000000
         BAL   RETURN,RTNXFR            TRANSFER                        88020000
         L     BASE3,AMIPRTO            RESTORE BASE REG                88040000
         GOIF  RMPURE,OFF=VSRTN3        CONTINUE IF NO ERROR            88060000
         SET   MXVS,ON                  FLAG TO OUTPUT OMITTED PARM     88066000
VSRTN3   EQU   *                                                        88072000
         BAL   R3,PFXRENT               FORCE OUT ALL OPERATORS STILL   88080000
         DC    AL2(JTMSTRM)             IN POSTER STACK                 88100000
         LR    INPTR,R1                 UPDATE POINTER                  88120000
         MVI   GSUMRY,D0                MASK OFF SWITCHES SET BY        88140000
         SET   (METSW,GSUBS),OFF        VARSYM ROUTINE BUT NOT WANTED   88160000
         SET   JSUBOPND,ON              OPERAND NEED SUBSTITUTION       88180000
         BCTR  INDEXP,0                 WIPE OFF END-STMT OPERATOR      88200000
         ST    INDEXP,MTXTP             SAVE MT POINTER                 88220000
         L     INDEXP,VSRSV1            RESET HEADER DATA POINTER       88240000
         L     RETURN,VSRSV             RESET RETURN LINKAGE            88260000
         GOIF  SCNCAT,ON=VSRTN5         BRANCH IF CONCATENATION         88280000
         SET   SCNCAT,ON                                                88300000
         TM    FLGBYT,VSLS                                      OX00217X88310002
               CONSIDER SYSLIST PASSED PARAM                    OX00217 88310402
         BO    VSRTN4                   BRANCH IF SYSLIST       OX00217 88312002
         TM    FLGBYT,PARMFLG           PASSED PARAM MAY NOT BE         88320000
         BNO   VSRTN5                   CONCATENATED. ANYTHING OTHER    88340000
VSRTN4   SET   (OPNDSTR,OPNDPRM),FLIP   GOOD PASSED PARAM               88360000
VSRTN5   EQU   *                                                        88380000
         CLI   D0(INPTR),JPERIOD        TEST IF CONCATENATED            88400000
         BNE   VSRTN20                  BRANCH IF NOT                   88420000
VSRTN10  EQU   *                                                        88440000
         SET   DSDTX,ON                 DISALLOW SDT                    88460000
         LA    INPTR,D1(,INPTR)         WITH C STG FLAG                 88480000
VSRTN20  EQU   *                                                        88500000
         ST    INPTR,FPTRSV             RESET POINTER, PREPARE TO       88520000
         BR    RETURN                   EDIT NEXT TERM                  88540000
*                                                                       88560000
PTATR    EQU   DQTMD                                                    88580000
*                                                                       88600000
PLATR    EQU   *                                                        88620000
         CLI   D0(INPTR),JL             TEST IF L'                      88640000
         LR    INPTR,R1                                                 88660000
         BNE   PQTMD                    BRANCH IF NOT                   88680000
         CLI   D1(INPTR),JA             TEST IF FOLLOWED BY ALPHA       88700000
         BL    PQTMD                    NO - EDIT AS QUOTED STG         88720000
         CLI   D1(INPTR),JAT                                            88740000
         BH    PQTMD                    EDIT AS QUOTED STG              88760000
*                                                                       88780000
         SPACE 3                                                        88800000
DCSTG    LR    INPTR,R1                 UPDATE POINTER                  88820000
PCSTG    EQU   *                                                        88840000
         LA    INPTR,D1(,INPTR)         BUMP OVER TERMINATOR            88860000
PCSTGIN  EQU   *                                                        88880000
         SET   OPNDSTR,ON               SET C STG FLAG                  88900000
         SET   DSDTX,ON                 DISALLOW SDT                    88920000
         BAL   RETURN,TENDOP            TEST IF END OF OPERAND          88940000
         B     NEXTP                    BRANCH IF NOT                   88960000
         B     PXBCOUT                  ELSE, BUILD MT THEN EXIT        88980000
         SPACE 3                                                        89000000
PEDTA    EQU   *                                                        89020000
         CLI   D0(INPTR),JBLANK         IF IT IS A BLANK, IT IS AN      89040000
         BE    PTERMB                   OMITTED OPERAND ENDING THE STMT 89060000
         C     INPTR,ENDATA             ELSE, TEST IF END DATA          89080000
         BL    PCSTG                    NO, IS A PART OF C STG          89100000
PEDTA1   BAL   TLINK,ABSERR             QUOTE MODE AND NO END   OX00225 89120001
         DC    AL1(9*16+SEV35)          QUOTE FOUND FOR AN ATTRIBUTE    89140000
         DC    AL1(ERR35)               END STMT VIA STEND RTN          89160000
*        LOG ERROR - OPERAND EXCEEDS 255 CHAR                           89180000
CSTGLERR BAL   TLINK,WRNERR             GO TO                           89200000
         DC    AL1(SEV42)               LOG WARNING MSG                 89220000
         DC    AL1(ERR42)               EXCEEDS 255 CHARACTERS          89240000
         AH    INPTR,H255               CHOP OFF FIRST 255 CHARACTERS   89260000
         ST    INPTR,FPTRSV             RESET STRING POINTER            89266000
         B     NEXTP                    CONTINUE WITH THIS MUCH         89272000
         SPACE 3                                                        89280000
SYMSDTCK EQU   *                                                        89300000
         GOIF  SCNCAT,ON=D4(,RETURN)    DSDT/SYM MUST STAND ALONE       89320000
         GOIF  DSDTX,OFF=(RETURN)       IF SDT ALLOWED O-SYM ALLOWED    89340000
         GOIF  DLPRN,ON=(RETURN)        DISALLOW SDT COULD STILL ALLOW  89360000
         C     INPTR,FPTRSV             O-SYM PROVIDED IT IS            89380000
         BR    RETURN                   FIRST ACTION                    89400000
         SPACE 3                                                        89420000
PDSDT    EQU   *                                                        89440000
         BAL   RETURN,SYMSDTCK          SYM/SDT MUST BE LEGITIMATE      89460000
         BE    PDSDT1                   YES, IT IS                      89480000
PDSDTX   LR    INPTR,R1                                                 89500000
         B     PCSTGIN                  EDIT AS C STG                   89520000
PDSDT1   CLI   D0(R1),JLPARN            ELIMINATE INVALID TERMINATORS   89540000
         BL    PDSDTX                   ZERO THRU EQUAL SIGN TERMINATE  89560000
         BE    PDSDTC1                  L-PAREN TERMINATES              89580000
         CLI   D0(R1),JRPARN            R-PAREN THRU SLASH              89600000
         BL    PDSDTC1                  PUT OUT SYM REF FOR + - * OR /  89620000
         BE    PDSDTC                   R-PAREN TERMINATES              89640000
         CLI   D0(R1),JBLANK            WHAT ABOUT COMMA OR BLANK       89660000
         BL    PDSDTC                   COMMA, CHECK PAREN LEVEL        89680000
         BE    PDSDTB                   BLANK, DELIMITS DSDT OR SYMBOL  89700000
         B     PDSDTX                   ANY OTHER TERMINATOR, C-STRING  89720000
PDSDTC   EQU   *                                                        89740000
         CLI   PRNLVL1,D1               COMMA IS INSIGNIFICANT IF       89760000
         BH    PQTMD10                  PAREN DON'T BALANCE             89780000
PDSDTC1  EQU   *                                                        89800000
         CH    R3,H2                    TEST IF O-SYM                   89820000
         BE    POSOSYM                  YES, POSITIONAL O-SYM           89840000
         L     LINK,ADSDTIN             GET DSDTIN ADDRESS              89860000
         B     PESDT                    GO EDIT DSDT                    89880000
         SPACE 3                                                        89900000
PDSDTB   EQU   *                        DSDT FOLLOWED BY BLANK          89920000
         CLI   PRNLVL1,D0               BLANK TERMINATOR MUST           89940000
         BE    PDSDTC1                  NOT APPEAR INSIDE PAIRED PAREN  89960000
         B     BLKERR                   ELSE ERROR, BLANK DISALLOWED    89980000
         SPACE 3                                                        90000000
POSOSYM  EQU   *                                                        90020000
         BAL   LINK,SYMSCN1             EDIT O-SYM                      90040000
         B     PCSTG                    BAD O-SYM EDIT AS C STG         90060000
         SET   OPNDORD,ON               ORDINARY SYM FLAG               90080000
         MVC   MPOSRP,D1(R11)           AND POINTER                     90100000
         BAL   RETURN,TENDOP            TRY TO WRAP UP OPERAND          90120000
         B     PCSTGIN                  CONTINUE EDIT IF NOT END OPND   90140000
         B     PXBCOUT                  ELSE, EXIT                      90160000
         SPACE 3                                                        90180000
PDSYM    LA    R3,D2                    DUMMY UP CATEGORY NUMBER        90200000
POSYM    EQU   *                                                        90220000
         CLI   D0(R1),JEQUAL            TEST IF MI KWD PARAM            90240000
         BNE   PDSDT                    EDIT AS DSDT IF NOT             90260000
         GOIF  (SUBLST,POSSUBL),ANY=DCSTG NO KWD PARM ALLOWED IN SUBL   90280000
         GOIF  OPNDSTR,ON=DCSTG         MUST BE O/SYM PRIOR TO '=' SIGN 90300000
         GOIF  SKWPRM,ON=DCSTG          BRANCH IF NOT KWD SIGN          90320000
         SET   VPTYP,ON                 INDICATE KEYWORD                90340000
         SET   JTCPKEY                  INDICATE KWD CALL               90360000
         SET   SKWPRM,ON                                                90380000
         LR    R12,R1                   DO NOT USE REG 1       @AY11215 90390006
         S     R12,FSTGL                COMPUTE KEW LEN        @AY11215 90392006
         LA    R12,D1(R12)              ADD 1 FOR EQUAL SIGN   @AY11215 90394006
         LNR   R12,R12                  MAKE IT NEGATIVE       @AY11215 90396006
         STH   R12,PARML                SAVE TOTAL LEN         @AY11215 90398006
         LR    INPTR,R1                 UPDATE POINTER                  90400000
         BAL   R12,MTENTRY1             BUILD MT                        90420000
         SET   (DECMA,DEEQL),ON                                         90440000
         LA    INPTR,D1(,INPTR)         BUMP OVER EQUAL SIGN            90460000
         ST    INPTR,FPTRSV             UPDATE POINTER                  90480000
         B     NEXTT                    EDIT KWD OPERAND                90500000
         SPACE 3                                                        90520000
PTSUBL   EQU   *                                                        90540000
         SET   POSSUBL,OFF              NOW IN SUBL,RESET SCAN SWITCH   90560000
         GOIF  SUBLST,ON=NEXTP          BEEN HERE BEFORE- PART OF C STG 90580000
         ST    INPTR,FPTRSV             THROW AWAY SUBLIST HEAD         90600000
         BAL   R12,APARCT               UP PAREN COUNT                  90620000
         SET   SUBLST,ON                INDICATE SUBLIST                90640000
         MVC   SUBSAVE(L'MPOPSV+L'NEXPSV),MPOPSV SAVE RETURN LINKAGES   90660000
         MVC   MPOPSV(L'MPOPSV+L'NEXPSV),AMIX5 ALTER RETURN LINKAGES    90680000
         MVC   OCSAVE(D1),JTIOP1        SAVE OP OCDE STATUS             90700000
         GOIF  SMI,OFF=PTSUBL1          BRANCH IF NOT FROM MI           90720000
         GOIF  SKWPRM,OFF=PTSUBL1       BRANCH IF M CALL POS SUBOPND    90740000
         MVC   JTIOP1(D1),OCSAVE        RESET OPCODE FOR SUBOPND        90760000
PTSUBL1  SET   (MPSB,MPSBF),ON          INDICATE FIRST SUBOPND          90780000
         B     NEXTP                    CONTINUE PROCESSING             90800000
PTSUBL5  EQU   *                                                        90820000
         GOIF  SXPRTO,OFF=PTSUBL6       BRANCH IF NOT PROTOTYPE         90840000
         LA    R14,MPHDL(,INDEXP)       GET HDR RECORD LENGTH           90860000
         ST    R14,MTXTP                AND SAVE                        90880000
         SR    R14,INDEXO               RESET OPERAND POINTER           90900000
         STH   R14,JTOPP                                                90920000
         MVI   HDF,D0                   INIT. FLAG BYTE                 90940000
PTSUBL6  EQU   *                                                        90960000
         MVC   JTIOP1(D1),OCSAVE        RESET OP CODE FOR SUBOPERAND    90980000
         SET   MPSB,ON                  INDICATE SUBLIST                91000000
         B     NEXTP                    EDIT SUBOPERAND                 91020000
         SPACE 3                                                        91040000
WRAPOPND EQU   *                                                        91060000
         L     R14,MTXTP                GET BASE                        91080000
         MVI   MPEMT,JTMSTRM            INSERT END STATEMENT FLAG       91100000
         LA    R14,D1(,R14)                                             91120000
         SR    R14,INDEXO               COMPUTE RECORD LENGTH           91140000
         STH   R14,JTRLI                ENTER TEXT LENGTH               91160000
         GOIF  (MPSBF,MPSB,MPSBL),OFF=TST255A B IF NOT SUB PARA@AZ24557 91162000
ADD255   LR    R14,INPTR                DO NOT USE REG 6       @AY11215 91168406
         S     R14,FSTGL                COMPUTE PARM LEN       @AY11215 91168806
         LA    R14,D1(R14)              ADD 1 FOR DELIMITER    @AY11215 91169206
         AH    R14,PARML                ADD TO PREV LEN        @AY11215 91169606
         STH   R14,PARML                SAVE TOTAL RESULT      @AY11215 91169706
         GOIF  MPSBL,OFF=END255         BR IFNOT LAST SUB PARM @AY11215 91170106
TST255   SH    R14,=H'255'              0 = 255 CHAR IN PARAM  @AZ24557 91170500
         BNP   END255A                  BR IF NOT EXEEDS 255 CH@AY11215 91170906
         BAL   TLINK,WRNERR             GEN ERR MSG 42: OPERA- @AY11215 91171306
         DC    AL1(SEV42)               ND EXEEDS 255 CHAR.    @AY11215 91171406
         DC    AL1(ERR42)                                      @AY11215 91171506
END255A  XC    PARML,PARML              CLEAR FOR MORE TESTS   @AY11215 91173506
END255   EQU   *                        END OF TEST            @AY11215 91175506
         BR    RETURN                   RETURN TO CALLER                91180000
TST255A  LR    R14,INPTR                DO NOT USE REG 6       @AZ24557 91184000
         S     R14,FSTGL                COMPUTE PARM LENGTH    @AZ24557 91188000
         AH    R14,PARML                ADD TO PREV LENGTH     @AZ24557 91192000
         B     TST255                   BR AND TEST FOR 255 CH @AZ24557 91196000
         SPACE 3                                                        91200000
         SPACE 3                                                        91220000
RTNXFR   EQU   *                                                        91240000
         L     BASE2,USEBAS             RESET BASE2 VALUE               91260000
         BR    LINK                     MAKE TRANSFER                   91280000
*                                                                       91300000
AVARSYM  DC    A(VARSYM)                VARSYM ADDRESS                  91320000
AXBCIN   DC    A(XBCSDT)                XBCSDT ADDRESS                  91340000
ADSDTIN  DC    A(DSDTIN)                DSDTIN ADDRESS                  91360000
AMIX5    DC    A(MACPRM2,MIX5)          ALTERNATE RETURN LINKAGES       91380000
         EJECT                                                          91400000
BADPARM  L     INPTR,FPTRSV             POINT BACK TO FIELD BEGIN       91420000
BADPARM1 BAL   TLINK,SNAPERRL           GO LOG ERROR- MOVE 8 CHARS      91433300
         DC    AL2(1)                   ABSOLUTE ERROR                  91440000
         DC    AL1(9*16+SEV39)          BAD PARAMETER                   91460000
         DC    AL1(ERR39)               GIVE UP STMT, NO RETURN         91480000
*                                                                       91500000
         SPACE 3                                                        91520000
BLKERR   EQU   *                                                        91540000
         GOIF  SUBLST,OFF=BLKERR1       BR IF NOT IN SUBLIST            91542000
         SET   (MPSB,MPSBL,OPNDOMT),ON  FLAG AS LAST SUBOP/OMITTED PARM 91544000
         BAL   RETURN,WRAPOPND          WRAP UP THIS PARM RECORD        91546000
         LA    R11,D8                   SIZE OF END-OF -PARM            91548000
         BAL   RETURN,OPUTL             FORCE LAST PARM RECORD          91550000
BLKERR1  EQU   *                                                        91552000
         BAL   TLINK,ABSERR             BLANK DELIMITS BUT PARENS UNBAL 91554000
         DC    AL1(9*16+SEV24)          OR BLANK DETECTED WITHIN PARENS 91560000
         DC    AL1(ERR24)               NO RETURN, TO STEND RTN         91580000
BADNAME  MVC   D0(L'OMTNM,INDEXO),OMTNM OMITTED PARM RECORD             91600000
         BAL   TLINK,WRNERR             GO LOG THE ERROR                91610000
         DC    AL1(SEV16)               INVALID CHARACTER DETECTED IN   91620000
         DC    AL1(ERR16)               THE NAME FIELD OF A MACRO INST  91640000
         B     MACPRM2                  CONTINUE WITH OPERAND           91660000
         SPACE 3                                                        91680000
ILPRTKY  EQU   *                                                        91700000
         BAL   TLINK,ABSERR             KW PARAMETER ERROR              91720000
         DC    AL1(9*16+SEV28)          NO RETURN, GO TO STEND RTN      91740000
         DC    AL1(ERR28)               VIA ABSERR                      91760000
INVSDTP  CLI   HICVAL1,J9               NOT A VALID SDT, SO ....        91780000
         BE    PCSTGIN                  C STG IF DSDT                   91800000
         L     INPTR,TPSAVE             ELSE, .....                     91820000
         B     DQTMD                    QUOTE MODE                      91840000
MPTCHA   DS    20C                      TEMPORARY PATCH AREA            91860000
         SPACE 3                                                        91880000
OMTNM    DS    0CL26                    MACRO CALL OMITTED NAME RECORD  91900000
         DC    AL2(L'OMTNM)             LENGTH                          91920000
         DC    AL1(X'80',0)             FLAG                            91940000
         DC    AL1(JTCPPOS,0)           IOC                             91960000
         DC    AL2(18,18,25,18,18)      POINTERS                        91980000
         DC    AL1(0,0,0,0,8)           HEADER DATA FLAG                92000000
         DC    AL1(0,0,0,0)             PADDING                         92020000
OMTMT    DC    AL1(JTMSTRM)             M.T. END STMT FLAG              92040000
         EJECT                                                          92060000
*********************************************************************** 92080000
*  TRANSLATE AND TEST RESULTS                                         * 92100000
*  R1 = TERMINATING CHARACTER ADDRESS                                 * 92120000
*  R3 = CATEGORY NUMBER                                               * 92140000
*       VALUE 0 = DECIMAL (1ST CHARACTER NUMERIC)                     * 92160000
*             1 = ALPH-NUMERIC (1ST CHARACTER ALPHA)                  * 92180000
*             2 = &                                                   * 92200000
*             3 = , = . ) BLANK (OPERAND TERMINATOR)                  * 92220000
*             4 = (                                                   * 92240000
*             5 = '                                                   * 92260000
*             6 = + - * /                                             * 92280000
*             7 = L' S' I' N' K'                                      * 92300000
*             8 = C' X' B'                                            * 92320000
*             9 = T'                                                  * 92340000
*            10 = AND OR NOT                                          * 92360000
*            11 = EQ NE LT LE GT GE                                   * 92380000
*            12 = NON-ASSEMBLER (1ST CHARACTER NON-ASSEMBLER)         * 92400000
*  R10 = TYPE NUMBER                                                  * 92420000
*  R15 = STRING LENGTH (MOVE LENGTH)                                  * 92440000
*********************************************************************** 92460000
*  AT ENTRY R10 HAS INDEX OF 1 OR 2                                   * 92480000
*        1 = DO SYNTACTIC STRING SEARCH                               * 92500000
*        2 = NO SYNTACTIC STRING SEARCH                               * 92520000
*                                                                     * 92540000
*  REGISTERS 1,2,3,10,11,12,14,15 MUST BE MADE AVAILABLE              * 92560000
*                                                                     * 92580000
*        LINKAGE IS ANY OF THE FOLLOWINGS                             * 92600000
*        BAL   RETURN,TRTEST                                          * 92620000
*        BAL   RETURN,TRT01                                           * 92640000
*        BAL   RETURN,TRT02                                           * 92660000
*                                                                     * 92680000
* STRING TO BE TRT'ED IS LIMITED TO 255 CHARACTERS  ******************* 92700000
*********************************************************************** 92720000
TRTEST   LA    PARM,1                   DO SYNTACTIC STRING SEARCH      92740000
TRT01    MVC   SPECHAR(L'STDTBL),STDTBL LOAD STANDARD TRT TABLE         92760000
TRT02    ST    BASE3,JFWORD2            SAVE BASE 3                     92780000
         BALR  BASE3,0                  REDEFINE BASE                   92800000
         USING *,BASE3                      REGISTER                    92820000
         SR    TWKREG2,TWKREG2          IN CASE PAST END                92830000
         L     TWKREG1,ENDATA           COMPUTE STRING LENGTH           92840000
         SR    TWKREG1,INPTR                                            92860000
         BNP   TRTOUT1                  EXIT IF PASSED END COLUMN       92880000
         BCTR  TWKREG1,0                MAKE IT MOVE LENGTH             92900000
         CH    TWKREG1,H255             ALLOW MAXIMUM OF 256 BYTES      92920000
         BNH   TRT10                    LENGTH OK                       92940000
         LH    TWKREG1,H255                                             92960000
         SPACE                                                          92980000
TRT10    ST    R2,JFWORD1               SAVE EDSECT BASE REG            93000000
         SR    R1,R1                    CLEAR REGISTERS FOR TRT RESULT  93020000
         LR    R2,R1                                                    93040000
         EX    TWKREG1,TRT00            TRT STRING INDICATED IN INPTR   93060000
         LR    R3,R2                    TRANSFER RESULT TO R3 SINCE     93080000
         L     R2,JFWORD1               R2 IS EDSECT BASE REGISTER      93100000
         BNE   MATCH                    BRANCH IF AN ENTRY MATCHES      93120000
*  NO HIT - SIMULATE ONE                                                93140000
         L     R1,ENDATA                                                93160000
         CLI   D0(INPTR),JA             SEPARATE AN STRING FROM N STG.  93180000
         BL    MATCH                    BRANCH IF NUMERIC               93200000
         LA    R3,1                     ELSE INDICATE AN STRING         93220000
*                                                                       93240000
MATCH    LR    TWKREG2,R1               COMPUTE STRING TRUE LENGTH      93260000
         SR    TWKREG2,INPTR                                            93280000
         BZ    TRTOUT                   EXIT IF 1ST CHAR TERMINATES     93300000
         BCT   TWKREG2,TRT20            BRANCH IF LENGTH GT ONE         93320000
         CLI   D1(INPTR),JQUOTE         ELSE, TEST IF ATTR. NOTATION    93340000
         BNE   TRTSTG                   BRANCH IF NOT                   93360000
*                                                                       93380000
TRT20    CH    TWKREG2,H2               BRANCH IF LENGTH GT 3           93400000
         BH    TRTSTG                                                   93420000
*  LENGTH LE 3 - COULD BE BOOLEAN, RELATIONAL OPS OR ATTR. NOTATION     93440000
         BCT   PARM,TRTSTG              BRANCH IF NOT TRTEST ENTRY      93460000
*  DO SYNTACTIC STRING SEARCH - PARM CONTAINS BXLE INCREMENT FACTOR     93480000
         LA    PARM,D3(,TWKREG2)                                        93500000
         SR    PARAM2,PARAM2                                            93520000
*  R12 POINTS TO TRTTYPE,TRTREL OR TRTOPTR FOR L OF 1, 2, OR 3          93540000
         IC    PARAM2,TRTNDX1(TWKREG2)                                  93560000
         LA    R12,TRTTYPE(PARAM2)      GET TO THE RIGHT TABLE          93580000
* PARAM2 POINTS TO UPPER LIMIT OF BXLE LOOP                             93600000
         IC    PARAM2,TRTNDX2(TWKREG2)                                  93620000
         AR    PARAM2,R12                                               93640000
         SPACE                                                          93660000
* NOW LOOK FOR A MATCH IN THE TABLE POINTED TO IN R12                   93680000
TRTLKUP  EX    TWKREG2,TRTCPR           COMPARE SYMBOL VS TABLE         93700000
         BE    TRTFND                   BRANCH IF FOUND IN TABLE        93720000
         BXLE  R12,PARM,TRTLKUP         ELSE KEEP LOOKING               93740000
         SPACE                                                          93760000
* STRING IS NOT IN THE TABLE POINTED TO IN R12 - ASSUME AN STRING       93780000
TRTSTG   LA    R3,D1                    INDICATE AN STRING              93800000
         CLI   D0(INPTR),J9                                             93820000
         BH    TRTRTN                   EXIT IF AN STRING               93840000
         BCTR  R3,0                     ELSE, INDICATE NUMERIC STRING   93860000
         B     TRTRTN                   THEN EXIT                       93880000
         SPACE                                                          93900000
* SYMBOL FOUND IN TABLE - PICK UP TYPE NUMBER AND RETURN                93920000
TRTFND   IC    PARM,D2(TWKREG2,R12)     GET TYPE NUMBER AND             93940000
         IC    R3,D1(TWKREG2,R12)       CATEGORY NUMBER FROM TABLE      93960000
         B     TRTRTN                   RETURN TO CALLER                93980000
         SPACE                                                          94000000
TRTOUT   CLI   D0(INPTR),HICHR          TEST 1ST CHARACTER              94020000
         BNH   TRTXIT                   BRANCH IF NOT NON-ASSEMBLER CHR 94040000
TRTOUT1  LA    R3,12                    INDICATE NON-ASSEMBLER          94060000
         LR    R1,INPTR                 INSURANCE, INSURANCE.           94080000
         B     TRTRTN                   RETURN TO CALLER                94100000
         SPACE                                                          94120000
TRTXIT   IC    PARM,D0(,INPTR)          GET TERMINATING CHARACTER       94140000
         IC    PARM,TRTSRC-(SPECHAR-JTBLTRT)(PARM) PICK UP TYPE NUMBER  94160000
TRTRTN   L     BASE3,JFWORD2            RESTORE BASE 3 VALUE            94180000
         BR    RETURN                   NOW RETURN TO CALLER            94200000
TRT00    TRT   D0(1,INPTR),JTBLTRT      OFF-THE-LINE TRT                94220000
TRTCPR   CLC   D0(1,INPTR),D0(R12)      OFF-THE-LINE COMPARE            94240000
*********************************************************************** 94260000
*  SYNTACTIC STRING TABLES                                            * 94280000
*        TRTTYPE USED IF TERMINATOR IS ' AND LENGTH = 1. FORMAT = SCT * 94300000
*        TRTREL USED IF LENG = 2 (ANY TERMINATOR)   FORMAT = SSCT     * 94320000
*        TRTOPTR USED IF LENGTH = 3 (ANY TERMINATOR) FORMAT = SSSCT   * 94340000
*        S = CHARACTER STRING (1, 2, OR 3 BYTES)                      * 94360000
*        C = CATEGORY NUMBER (1 BYTE)                                 * 94380000
*        T = TYPE NUMBER (1 BYTE)                                     * 94400000
*********************************************************************** 94420000
TRTTYPE  EQU   *                        ATTRIBUTE TABLE                 94440000
         DC    AL1(JT)                  T'                              94460000
         DC    AL1(09)                                                  94480000
         DC    AL1(JTMTAT)                                              94500000
         DC    AL1(JX)                  X'                              94520000
         DC    AL1(08)                                                  94540000
         DC    AL1(XSDT)                                                94560000
         DC    AL1(JB)                  B'                              94580000
         DC    AL1(08)                                                  94600000
         DC    AL1(BSDT)                                                94620000
         DC    AL1(JC)                  C'                              94640000
         DC    AL1(08)                                                  94660000
         DC    AL1(CSDT)                                                94680000
         DC    AL1(JL)                  L'                              94700000
         DC    AL1(07)                                                  94720000
         DC    AL1(JTMLAT)                                              94740000
         DC    AL1(JI)                  I'                              94760000
         DC    AL1(07)                                                  94780000
         DC    AL1(JTMIAT)                                              94800000
         DC    AL1(JS)                  S'                              94820000
         DC    AL1(07)                                                  94840000
         DC    AL1(JTMSAT)                                              94860000
         DC    AL1(JN)                  N'                              94880000
         DC    AL1(07)                                                  94900000
         DC    AL1(JTMNAT)                                              94920000
         DC    AL1(JK)                  K'                              94940000
         DC    AL1(07)                                                  94960000
         DC    AL1(JTMKAT)                                              94980000
*                                                                       95000000
TRTREL   EQU   *                        RELATIONAL OPERATOR TABLE 2 BYT 95020000
         DC    AL1(JE,JQ)               EQ                              95040000
         DC    AL1(11)                                                  95060000
         DC    AL1(JTMEQ)                                               95080000
         DC    AL1(JO,JR)               OR                              95100000
         DC    AL1(10)                                                  95120000
         DC    AL1(JTMOR)                                               95140000
         DC    AL1(JN,JE)               NE                              95160000
         DC    AL1(11)                                                  95180000
         DC    AL1(JTMNE)                                               95200000
         DC    AL1(JL,JT)               LT                              95220000
         DC    AL1(11)                                                  95240000
         DC    AL1(JTMLT)               LT                              95260000
         DC    AL1(JG,JT)               GT                              95280000
         DC    AL1(11)                                                  95300000
         DC    AL1(JTMGT)                                               95320000
         DC    AL1(JL,JE)               LE                              95340000
         DC    AL1(11)                                                  95360000
         DC    AL1(JTMLE)                                               95380000
         DC    AL1(JG,JE)               GE                              95400000
         DC    AL1(11)                                                  95420000
         DC    AL1(JTMGE)                                               95440000
*                                                                       95460000
TRTOPTR  EQU   *                        RELATIONAL OPERATOR TABLE 3 BYT 95480000
         DC    AL1(JA,JN,JD)            AND                             95500000
         DC    AL1(10)                                                  95520000
         DC    AL1(JTMAND)                                              95540000
         DC    AL1(JN,JO,JT)            NOT                             95560000
         DC    AL1(10)                                                  95580000
         DC    AL1(JTMNOT)                                              95600000
NSYNTBL  EQU   *                                                        95620000
*                                                                       95640000
TRTNDX1  EQU   *                                                        95660000
         DC    AL1(TRTTYPE-TRTTYPE)     INDEX FOR LENGTH = 1            95680000
         DC    AL1(TRTREL-TRTTYPE)      INDEX FOR LENGTH = 2            95700000
         DC    AL1(TRTOPTR-TRTTYPE)     INDEX FOR LENGTH = 3            95720000
TRTNDX2  EQU   *                                                        95740000
         DC    AL1(TRTREL-TRTTYPE-3)    END INDEX FOR LENGTH = 1        95760000
         DC    AL1(TRTOPTR-TRTREL-4)    END INDEX FOR LENGTH = 2        95780000
         DC    AL1(NSYNTBL-TRTOPTR-5)   END INDEX FOR LENGTH = 3        95800000
TRTNNDX  EQU   *                                                        95820000
         DS    0H                                                       95840000
*                                                                       95860000
         EJECT                                                          95880000
         JPATCH X1A20,DD4                                               95890000
         EJECT                                                          95900000
         JCSECT (X1A30=CS4)                                             95910000
         USING *,BASE4                                                  95920000
         USING JTEXTA,INDEXP                                            95930000
*                                                                       95940000
*********************************************************************** 95960000
* DIRECTORY ENTRY ROUTINE                                             * 95980000
* AT ENTRY R9  CONTAINS D ENTRY INDEX VALUE                             96000000
*          R10 POINTS TO THE SYMBOL TO BE ENTERED/SEARCHED              96020000
*          R11 CONTAINS THE MOVE LENGTH OF THE SYMBOL TO BE ENTERED     96040000
*              OR SEARCHED                                              96060000
* ON RETURN R11 POINTS TO A LOCATION CONTAINING THE VECTOR POINTER,     96080000
*              THE POINTER TO THE LOCATION IN GENERATION TIME DICT,     96100000
*              OR THE FLAGA, OF THE SYMBOL ENTERED.                     96120000
* LINKAGE IS BAL R3,DIRENT                                              96140000
*         OR BAL R3,DIR10                                               96160000
*********************************************************************** 96180000
         SPACE 3                                                        96200000
NDIRENT  GOIF  SUPDNT,OFF=NDIR10        GO IF ENTRY NOT SUPPRESSED      96220000
         SET   SUPDNT,OFF               ELSE SET OFF THE INDICATOR      96240000
         B     DIROUT                   AND RETURN                      96260000
NDIR10   MVI   DERRCD,D0                RESET ERROR CODE TO ZERO        96280000
         STM   R15,R1,EDTSVZ            SAVE LENGTH & TERMINATOR        96300000
         L     LINK,DENTRY              COMPUTE D ENTRY POINT           96320000
         BALR  RETURN,LINK              MAKE D ENTRY                    96340000
         TM    DERRCD,BITFF             TEST IF ANY ERROR               96360000
         BZ    DIR20                    RETURN IF NO                    96380000
         L     R15,EDTSVZ               GET SYMBOL LENGTH               96400000
         CLI   DERRCD,ERR11             TEST IF CALL MISMATCHES DEF     96420000
         BE    DIR30                    YES, BUT LET X3 FLAG IT IN LINE 96440000
         CLI   DERRCD,ERR10             PREV DEFINED PRGMR MACRO        96460000
         BE    DIR18                    LOG ERROR MESSAGE 10            96480000
         CLI   DERRCD,ERR7              TEST IF INCONSISTENT USAGE      96500000
         BNE   DIR15                    LOG ERROR                       96520000
         TM    FLGBYT,VDIM              YES, TEST IF DIMENSIONED        96540000
         BO    DIR15                    LOG ERROR IF YES                96560000
         TM    ATTRSV,ATN               TEST IF PRECEDED BY N'          96580000
         BNO   DIR15                    ERROR IF NOT                    96600000
         MVI   DERRCD,D0                ELSE, NOT ERROR                 96620000
         B     DIR20                    EXIT                            96640000
DIR15    LA    R15,1(,R15)              INCR LENGTH TO INCLUDE '&'      96660000
         GOIF  SGBLCL,OFF=DIR16         BACK UP IF ---                  96680000
         L     INPTR,OPNDPTR            FROM DECLARATION                96700000
         TM    FLGBYT,VDIM              TEST IF DIMENSIONED             96710000
         BNO   DIR18                    BRANCH IF NOT- MOVE LENGTH OK   96712000
         AR    R15,TRTN                 ADJUST MOVE LENGTH              96714000
         SR    R15,INPTR                FOR NO. OF CHARS IN V. S.       96716000
         BCTR  R15,D0                   MAKE INTO MOVE LENGTH           96718000
         B     DIR18                    GO LOG ERROR                    96720000
DIR16    EQU   *                        ELSE, DON'T                     96740000
         BCTR  INPTR,0                  BACK UP TO '&' FOR SNAP         96760000
DIR18    EQU   *                                                        96780000
         BAL   RETURN,DNTERR            LOG ERROR                       96800000
         L     BASE4,CS4ADDR            GET BACK TO THIS CSECT          96810000
         SET   RMPURE,ON               INDICATE IMPURITY                96820000
         L     R1,OUTADR                                                96840000
         OI    D3(R1),JPRONLY           PRINT ONLY                      96860000
DIR20    EQU   *                                                        96880000
         LM    R15,R1,EDTSVZ            RESTORE LENGTH AND TERMINATOR   96900000
         CLI   DERRCD,ERR14                                             96920000
         BE    DIROUT                   RETURN IF ERROR 14              96940000
         CLI   DERRCD,ERR9              TEST IF PREVIOUSLY DEFINED      96960000
         BL    DIROUT                   RETURN IF BELOW ERROR 9         96980000
         BH    DIR31                    BR IF ABOVE ERROR 9             97000000
         GOIF  SMDEF,ON=DIR31           BR- DICTIONARY OVERLAP IN MACRO 97020000
         SET   SKPEND,ON                FLUSH WHOLE SOURCE STREAM       97040000
DIROUT   L     BASE2,REGSAVE3           RESTORE OLD BASE                97060000
         BR    R3                       AND RETURN                      97080000
DIR30    EQU   *                                                        97100000
         L     R15,EDTSVZ               GET THE LENGTH                  97120000
DIR31    SET   SKPMND,ON                FLUSH MACRO                     97140000
         SET   SXPRTO,OFF                                               97160000
         L     INDEXP,OFPTRSV           RESTORE JTEXTA POINTER          97180000
         L     INPTR,FPTRSV             RESTORE FIELD POINTER           97200000
         L     BASE2,REGSAVE3           RESTORE OLD BASE                97220000
         B     WRAPFLD                  THROW AWAY THIS STATEMENT       97240000
         SPACE 3                                                        97260000
***************                                                         97280000
         DS    0F                                                       97300000
DENTRY   DC    A(DRUTENT)               DIRECTORY ROUTINE ENTRY POINT   97320000
*                                                                       97340000
SVCTLFM  EQU   *                                                        97360000
         MVC   COPYSV3(L'JSRCLN*7),JSRCLN SAVE CURRENT CTL FORMATS      97380000
         MVC   JSRCLN(L'JSRCLN*7),SRCLEN                                97400000
         MVC   COPYSV4(L'TBGLN*6),TBGLN                                 97420000
         MVC   TBGLN(L'TBGLN*6),STDPARM                                 97440000
         SET   JINLIB,ON                INDICATE IN LIBRARY MODE        97460000
         MVC   INPUT,STNPSTD            GET STD ICTL INPUT WORK BUF PTR 97480000
         MVC   MINPUT,MINPSTD           GET STD ICTL MINPUT WORK BUF PT 97500000
         MVC   MINDIF,SVMINDIF          RESTORE STD BUFF DIFFERENCE     97520000
         MVC   ENDWKA,SVENDWKA          RESTORE STD WORK BUFF END       97540000
         BR    TLINK                    RETURN TO CALLER                97560000
         EJECT                                                          97560200
****************************************                                97560400
*   SNAPERR - LINKAGE TO THIS ROUTINE IS                                97560600
*        DC    AL2(BR CODE)             IF BR CD=1, FINISH WITH ABSERR- 97560800
*        DC    AL1(X*16+SEVERITY CODE)  ELSE FINISH WITH WRNERR         97560900
*        DC    AL1(ERROR CODE)                                          97561000
****************************************                                97561100
         SPACE 3                                                        97561200
NSNAPERR EQU   *                                                        97561400
         LH    R11,D0(,TLINK)           SET UP BRANCH CODE              97561600
         LA    TLINK,D2(,TLINK)         ADJ RETURN POINT                97561800
         USING ERRMESS,R10                                              97562000
         L     R10,ESTKNDX              SET ADDRESSABILITY              97562200
         MVI   EMSGNTRY,JBLANK                                          97562400
         MVC   EMSGNTRY+1(L'EMSGNTRY-1),EMSGNTRY                        97562600
         CH    R15,H7                   DON'T DUMP MORE THAN 8 CHARS    97562800
         BNH   SNAPMOV                  SEVEN OR LESS IS OK             97563000
         LH    R15,H7                   DEFAULT TO 8 CHARS              97563200
SNAPMOV  EX    R15,MVSYM                MOVE DATA ITEM                  97563400
         LA    R14,D8                                                   97563600
         STC   R14,ENTRYLNG                                             97563800
         BCT   R11,NWRNERR              LOG ERROR CODE                  97564000
*                                                                       97564200
*********************************************************************** 97564400
*   ABSERR                                                              97564600
*   WRNERR -                                                            97564800
*   IT IS CALLER'S RESPONSIBILITY TO PLACE THE LENGTH AND ITS           97565000
*   ASSOCIATED DATA ITEM(S) IN THE ERROR MESSAGE STACK AT ESTKNDX       97565200
*   BEFORE ENTER INTO THIS ROUTINE.                                     97565400
*                                                                       97565600
*   CALLING SEQUENCE IS                                                 97565800
*        BAL   TLINK,ABSERR             LOG ERROR                       97566000
*        DC    AL1(X*16 + SEVERITY CODE)                                97566200
*        DC    AL1(ERROR CODE)                                          97566400
*        (RETURN TO HERE IF X=0, ELSE EXIT VIA ERTNTBL AT ENTRY X)      97566600
*********************************************************************** 97566800
         SPACE 3                                                        97567000
NABSERR  EQU   *                                                        97567200
         L     INDEXO,OUTADR            INSURE OUTPUT POINTER           97567400
         GOIF  SXPRTO,OFF=ABSE10        BRANCH IF NOT EXPECTING PROTO   97567600
         SET   SKPMND,ON                                                97567800
         SET   SBDPROTO,ON                                              97568000
         SET   SUBLST,OFF                                               97568200
         SET   SXPRTO,OFF                                               97568400
ABSE10   GOIF  SUBLERR,ON=ABSE11        NO PRONLY BIT IN REC   @OZ06551 97568506
         SET   JPRONLY,ON               PRINT ONLY STATEMENT   @OX12896 97568606
ABSE11   SET   SUBLERR,OFF              RESET SW               @OZ06551 97568706
         SET   SUPDNT,ON                AND SUPPRESS DIRECTORY ENTRY    97568800
NWRNERR  SET   RMPURE,ON                                                97569000
         L     R10,ESTKNDX              SET ADDRESSABILITY              97569200
         USING ERRMESS,R10                                              97569400
         MVC   EMSGSVTY(D2),D0(TLINK)                                   97569600
         NI    EMSGSVTY,X'0F'           MASK OFF RTN CODE               97569800
         CLC   EMSGSVTY(D1),JMSGL       TEST SEV CODE                   97570000
         BL    ERREXIT                  NO ERROR LOGGING SINCE LOW      97570200
         CLI   ERRCNT1,D5               TEST IF MSG STACK FULL          97570400
         BL    BMPNDX                   OK, REGISTER THIS ERROR         97570600
         MVC   EMSGSVTY(L'EROERS),EROERS MSG - MORE THAN 5 ERRORS       97570800
         BH    ERREXIT                  LOOP THRU AFTER 6TH ENTRY       97571000
         B     BMPCNT                   GO GUMP ERROR COUNT             97571200
BMPNDX   LA    R10,ERMEND(,R10)         BUMP INDEX                      97571400
         ST    R10,ESTKNDX              UP ERROR STACK INDEX            97571600
         MVI   ENTRYLNG,D0                                              97571800
BMPCNT   EQU   *                                                        97572000
         IC    R14,ERRCNT1                                              97572100
         LA    R14,D1(,R14)             BUMP ERROR COUNT                97572200
         STC   R14,ERRCNT1                                              97572300
ERREXIT  SR    R15,R15                                                  97572400
         CLC   EMSGSVTY(D1),JSEVER      IS THIS HIGHER                  97572500
         BNH   ERREXIT1                 BRANCH IF NOT                   97572600
         MVC   JSEVER(D1),EMSGSVTY      ENTER HIGH                      97572700
ERREXIT1 IC    R15,D0(,TLINK)           GET RETURN CODE                 97572800
         SRA   R15,D4                   MASK OFF SEVERITY CODE          97573200
         BNZ   ERROUT                   BR IF ERR RETURN SPECIFIED      97573400
         L     BASE2,REGSAVE3           RESTORE BASE ADDR               97573600
         B     D2(,TLINK)               RETURN TO PLACE OF CALL         97573800
ERROUT   SLA   R15,D2                   MULTIPLY BY 4                   97574000
         L     R1,ERTNTBL-D4(R15)       GET RETURN ADDRESS              97574200
         L     BASE2,REGSAVE3           RESTORE BASE ADDR               97574400
         BR    R1                       RETURN                          97574600
MVSYM    MVC   EMSGNTRY(0),D0(INPTR)    OFF-THE-LINE MOVE               97574800
         DS    0F                       ALIGNMENT INSURANCE             97575000
EROERS   DS    0CL3                                                     97575200
         DC    AL1(SEV18)               NO MORE ERROR LOGGING           97575400
         DC    AL1(ERR18)               MAX NUMBER OF 5 ERRORS ALLOWED  97575600
         DC    AL1(0)                   .                               97575800
EEROERS  DS    0H                                                       97576000
         SPACE 3                                                        97576200
ERTNTBL  DS    0CL40                    MAY NOT EXCEED 15 ENTRIES       97576400
         DC    A(BADIX)        1 FLUSH SOURCE                           97576600
         DC    A(AOPPTR)       2 WRAP UP STATEMENT                      97576800
         DC    A(NAMERR)       3 NAME IN ERROR                          97577000
         DC    A(CLN0)         4 CLEAN UP STATEMENT                     97577200
         DC    A(CLEANUP)      5 DITTO                                  97577400
         DC    A(WRAPFLD)      6 END OF OPND 'CAUSE OF ERROR            97577600
         DC    A(EDTSTG)       7 WRAP UP STRING FIELD                   97577800
         DC    A(INVALID)      8 INPUT SEQ ERROR                        97578000
         DC    A(STEND)        9 PARAMETER ERROR                        97578200
         DC    A(SKMNDST)      10 SKIP TO MEND STATEMENT                97578400
EERTNTBL EQU   *                        END OF TABLE                    97578600
         EJECT                                                          97580000
**************************************                                  97600000
*        END OF FILE ROUTINE         *                                  97620000
**************************************                                  97640000
NUNXPEOF EQU   *                                                        97660000
         GOIF  SOPNCD,OFF=NEOFRTN       LOG ERR LATER IF IN PROG MACRO  97666000
         BAL   TLINK,NABSERR            ERROR UNEXPECTED EOF            97672000
         DC    AL1(SEV47)               SEVERITY CODE                   97680000
         DC    AL1(ERR47)               ERROR CODE                      97700000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             97710000
         SPACE 3                                                        97720000
NEOFRTN  SET   SINEOF,OFF               RESTORE EOF SWITCH              97740000
         GOIF  JINLIB,ON=EODLIB         BRANCH IF EOD ON SYS LIBRARY    97760000
         SET   SLSTCD,ON                INDICATE LAST CARD READ         97780000
         GOIF  SOPNCD,OFF=PGRMAC        BRANCH IF IN PROGRAMMER MACRO   97800000
         SET   SKPEND,OFF                                               97820000
GENEND   EQU   *                                                        97830003
         GOIF  SENDST,OFF=GENEND1       BRANCH IF NO ENDSTMT    OX00095 97840003
         CLI   ERRCNT1,D0               IS THERE AN ERROR       OX00095 97870003
         BE    EOPNCD                   BRANCH IF NO            OX00095 97872003
         B     GENEND2                  GO WRITE OUT ERR REC    OX00095 97874003
GENEND1  EQU   *                                                OX00095 97876003
         BAL   R3,GENMEND               GO GENERATE RECORD              97880000
         MVI   JTIOP,JTEND              INDICATE END STATEMENT          97900000
         MVC   JTOPCD(L'GEND),GEND      MOVE IN MNEMONIC                97920000
         BAL   TLINK,NWRNERR            LOG ERROR                       97940000
         DC    AL1(SEV60)               AND THEN GO TO                  97960000
         DC    AL1(ERR60)               GENERATE AN END STATEMENT       97980000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             97990000
GENEND2  EQU   *                                                OX00095 97992003
         L     BASE2,CS2ADDR            TEMPORILY RESTORE BASE 2        98000000
         BAL   RETURN,WRAPERR           GO WRITE OUT ERROR RECORD       98005000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             98010000
         SET   (SFSTCD,SUPDNT),OFF      RESET SWITCHES                  98020000
         SET   (SNMFND,SNOFND,SDTCMT,STRCMT),OFF                        98040000
         SET   (SBYCNT,SBYONE),OFF      RESET SWITCHES                  98060000
         SPACE                                                          98080000
EOPNCD   LA    R11,D8                   LENGTH                          98100000
         BAL   RETURN,OPUTL             GET BUFFER                      98120000
         MVC   JTRLI(L'EOFHD),EOFHD     EOF HEADER                      98140000
         MVI   JTIOP,JTEEOF             IOC                             98160000
         MVI   DDNDX1,OPENEND           SET UP INDEX FOR BR TO DIR RTN  98180000
         BAL   R3,NDIR10                CLOSE OPEN CODE                 98190000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             98200000
         SET   SOPNCD,OFF               INDICATE OUT OF OPEN CODE       98220000
         SET   SSYSMD,ON                INDICATE EDITIONG SYSTEM MACRO  98240000
         BAL   TLINK,SVCTLFM            RESTORE STANDARD ICTL FORMATS   98260000
         SET   (SISEQ,SNOCNT),OFF                                       98280000
         B     ESYSMAC                  GO EDIT SYSTEM MACROS           98300000
*                                                                       98320000
EODLIB   EQU   *                                                        98340000
         GOIF  SINCPY,OFF=ELIB05        BRANCH IF NOT IN COPY CODE      98360000
         GOIF  SMAC,ON=ELIB05           GENERATE MEND IF MACRO COPIED   98370000
         L     BASE2,CS2ADDR            RESTORE BASE FOR SECOND CSECT   98380000
         L     LINK,ACSTKEXT            GET ROUTINE ADDR                98400000
         BALR  R3,LINK                 RECURSIVE EXIT                   98420000
         B     WREXIT                   ERROR EXIT                      98440000
ELIB05   EQU   *                                                        98460000
         BAL   TLINK,NWRNERR            GO LOG ERROR ON UNEXPECTED      98480000
         DC    AL1(SEV51)               EOD WHEN READING FROM THE       98500000
         DC    AL1(ERR51)               SYSTEM LIBRARY                  98520000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             98530000
         L     BASE2,CS2ADDR            TEMPORILY RESTORE BASE 2        98540000
         BAL   RETURN,WRAPERR1          OUTPUT ERR REC- DON'T SET JERR  98545000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             98550000
         BAL   R3,GENMEND               GENERATE RECORD                 98560000
         MVI   JTIOP,JTMEND             INDICATE MEND STMT              98580000
         MVC   JTOPCD(L'GMEND),GMEND    MOVE IN MNEMONIC                98600000
         L     BASE2,CS2ADDR            RESTORE BASE FOR SECOND CSECT   98620000
         B     MEND0                    GO CLOSE MACRO DEFINITION       98640000
*                                                                       98660000
PGRMAC   EQU   *                                                        98680000
         BAL   TLINK,NWRNERR            LOG ERROR                       98700000
         DC    AL1(SEV47)               .                               98720000
         DC    AL1(ERR47)               UNEXPECTED EOD ON SYS INPUT     98740000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             98750000
         GOIF  SMDEF,OFF=OPOPEN         BRANCH IF NOT IN MACRO          98760000
         SET   SKPMND,ON                SIMULATE SKIP-TO-MEND CONDITION 98780000
         BAL   R3,GENMEND               GENERATE RECORD                 98800000
         MVI   JTIOP,JTMEND             INDICATE A MEND STATEMENT       98820000
         MVC   JTOPCD(L'GMEND),GMEND    MOVE IN MNEMONIC                98840000
         SET   (SMDEF),OFF              SIMULATE MEND CONDITION         98860000
         MVI   DDNDX1,MACREND           SET UP INDEX FOR BR TO DIR RTN  98880000
         BAL   R3,NDIR10                GO TO DIRECTORY ROUTINE         98890000
         L     BASE2,CS2ADDR            CHANGE TO CSECT 2               98892000
         BAL   RETURN,WRAPERR           GO WRITE OUT ERROR RECORD       98900000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             98940000
         BAL   TLINK,NWRNERR            GO LOG ERROR FOR GEN MEND       98950000
         DC    AL1(SEV55)               ERROR PARAMETER                 98960000
         DC    AL1(ERR55)               ERROR PARAMETER                 98980000
         L     BASE2,CS2ADDR            CHANGE TO CSECT 2               98990000
         BAL   RETURN,WRAPERR           GO WRITE OUT ERROR RECORD       99000000
         L     BASE4,CS4ADDR            GET BACK TO CSECT 4             99005000
         SET   SKPMND,OFF                                               99020000
         SPACE                                                          99040000
OPOPEN   SET   (SPGRMD,SOPNCD),FLIP     OUT OF PRGMR MACS, NOW OPEN CD  99060000
         MVI   DDNDX1,OPENENT           SET UP INDEX FOR BR TO DIR RTN  99100000
         BAL   R3,NDIR10                OPEN UP OPEN CODE BEFORE        99110000
         L     BASE4,CS4ADDR                                            99120000
         B     GENEND                   GENERATE END STATEMENT          99140000
         SPACE 3                                                        99160000
ESYSMAC  GOIF  LSTSYSMS,ON=PHSEND       BRANCH IF SYS MACROS ALL EDITED 99180000
         SET   SNOSYSMD,OFF                                             99200000
* REGISTER 10 POINTER IS SUPPLIED BY DIRECTORY ROUTINE                  99220000
         ST    R10,JFWORD1              SAVE POINTER TO NAME            99230001
         JFIND ADDR=(R10)               GO FIND IT IN LIBRARY           99240000
         BP    ESMGO                    BRANCH IF MACRO FOUND           99260000
         SET   SKPMND,ON                ELSE, SIMULATE FLUSH CONDITION  99280000
         SET   SNOSYSMD,ON              SYSTEM M DEF NOT FOUND          99300000
         L     BASE2,CS2ADDR            RESTORE BASE FOR SECOND CSECT   99320000
         B     MEND1                    CLOSE MACRO STMT                99340000
ESMGO    SET   SXMCRO,ON                EXPECTING MACRO STMT            99360000
         SET   SXPRTO,OFF                                      @XA04142 99362031
         L     R9,JFWORD1               RESTORE POINTER TO NAME         99370001
         MVC   LASTFIND(L'LASTFIND),D0(R9) GET NAME OF MEMBER FOUND     99372001
         L     BASE2,CS2ADDR            RESTORE BASE FOR SECOND CSECT   99380000
         B     READNEXT                                                 99400000
SMNAMOV  MVC   SMACNAM(0),D1(R11)       OFF-THE-LINE MOVE               99500000
         SPACE                                                          99520000
PHSEND   MVC   JSRCLN(L'JSRCLN*7),COPYSV3 RESTORE ICTL FORMATS          99540000
         LA    R11,D8                   EOF RECORD SIZE                 99560000
         BAL   RETURN,OPUTL             GET O/P BUFFER                  99580000
         MVC   JTRLI(L'EOFHD),EOFHD     MOVE IN EOF RECORD              99600000
*                                                                       99620000
         JTRUNC FILE=FILE1             TRUNCATE LAST BUFFER             99640000
*                                                                       99660000
         L     PARAM1,DSTGBGN                                           99680000
         JFRECORE ADDR=(R10)            FREE WORK BUFFER                99700000
         LR    PARAM1,MODCOMM                                           99720000
         JFRECORE ADDR=(R10)            FREE MODULE COMMON AREA         99740000
*                                                                       99760000
EDITXIT  JRETURN                        RETURN TO CONTROLLER            99780000
         SPACE 3                                                        99800000
*********************************************                           99810000
*        GENERATE MEND/END STATEMENT        *                           99820000
*********************************************                           99830000
GENMEND  EQU   *                                                        99840000
         LA    R11,L'FXDHD+L'GMEND      GET OUTPUT BUFFER               99850000
         BAL   RETURN,OPUTL             GET O/P BUFFER                  99860000
         MVC   JTRLI(L'FXDHD),FXDHD     MOVE IN HEADER                  99870000
         SET   JPRONLY,OFF              REMOVE PRINT ONLY SWITCH        99872000
         LA    TWKREG1,D2(,INDEXP)      COMPUTE FIELD POINTER           99880000
         SR    TWKREG1,INDEXO                                           99890000
         STH   TWKREG1,JTOCP            AND SAVE IN ET                  99900000
         LA    TWKREG1,D8(,INDEXP)      COMPUTE RECORD LENGTH           99910000
         SR    TWKREG1,INDEXO                                           99920000
         STH   TWKREG1,JTRLI            AND SAVE IN ET                  99930000
         BR    R3                       RETURN                          99940000
         SPACE 3                                                        99950000
GEND     DS    0CL5                     GENERATED END STATEMENT         99955000
         DC    AL1(JA,D3,JE,JN,JD)      GEN EDITED TEXT FOR END STMT    99960000
GMEND    DS    0CL6                     GENERATED MEND STATEMENT        99965000
         DC    AL1(JA,D4,JM,JE,JN,JD)   GEN EDITED TEXT FOR MEND STMT   99970000
EOFHD    DS    0CL8                                                     99970800
         DC    AL2(D8)                  RECORD LENGTH                   99971600
         DC    AL1(JPSOP,D0)            EOF FLAG                        99972400
         DC    AL1(JTEOF)               EOF INDICATOR                   99973200
         DC    AL1(X'EE',X'00',X'FF')   EOF                             99974000
         SPACE 3                                                        99974300
         JPATCH  X1A30,410                                              99974600
         SPACE 3                                                        99975000
         END   EDITENT                                                  99980000
./  ADD  SSI=71710235,NAME=IFNX1J
         JHEAD 'EDIT PHASE DICTIONARY ROUTINES',                       X00070000
               PHASEID=X1J,                                            X00140000
               LEVEL=10                                                 00210000
         EJECT                                                          00280000
*   THE EDIT PHASE DICTIONARY ROUTINES ARE A SET OF SUBROUTINES.      * 00350000
*   THESE SUBROUTINES PROVIDE ALL THE FUNCTIONS REQUIRED BY THE EDIT  * 00420000
*   PHASE RELATIVE TO THE COLLECTION TIME DICTIONARIES, CALLED        * 00490000
*   DIRECTORIES. THE FUNCTIONS PROVIDED ARE- INITIALIZATION,          * 00560000
*   BUILDING, REFERENCING, AND OUTPUTTING. THESE FUNCTIONS ARE        * 00630000
*   REQUESTED DURING THE CONVERSION OF SOURCE INPUT TEXT FOR BOTH     * 00700000
*   MACRO DEFINITIONS AND OPEN CODE INTO EDITED TEXT TO BE PROCESSED  * 00770000
*   BY THE GENERATE PHASE. THE PERTINENT DICTIONARIES ARE- OP CODE    * 00840000
*   TABLE, MACRO DEFINITION DIRECTORY, VARIABLE SYMBOL DIRECTORY,     * 00910000
*   SEQUENCE SYMBOL REFERENCE DIRECTORY, ORDINARY SYMBOL REFERENCE    * 00980000
*   DIRECTORY, AND OPSYN TABLE.                                       * 01050000
*                                                                     * 01120000
*ENTRY POINT-                                                         * 01190000
*        DICTENTR                                                     * 01260000
*              THE CALLING SEQUENCE IS-                               * 01330000
*                  LA    RETURN,ENTRY                                 * 01400000
*                  L     LINK,POINTER                                 * 01470000
*                  BAL   RETURN,0(RETURN,LINK)                        * 01540000
*              WHERE LINK IS THE STANDARD REGISTER FOR THE ADDRESS    * 01610000
*                             OF THE CALLED ROUTINE                   * 01680000
*                    POINTER CONTAINS THE ADDRESS OF THE DICTIONARY   * 01750000
*                             ENTRY ROUTINE                           * 01820000
*                    ENTRY IS THE NAME OF THE DICTIONARY FUNCTION     * 01890000
*                             REQUIRED (ENTRY NAMES ARE EQUATED TO    * 01960000
*                             ABSOLUTE VALUES USED AS DISPLACEMENTS   * 02030000
*                             INTO A BRANCH TABLE)                    * 02100000
*                    RETURN IS THE STANDARD REGISTER FOR THE RETURN   * 02170000
*                             ADDRESS                                 * 02240000
*                                                                     * 02310000
*INPUT-                                                               * 02380000
*   ITEMS EXTRACTED FROM THE SOURCE TEXT BY THE EDITOR, TO BE         * 02450000
*   EXCHANGED FOR POINTERS TO GENERATION TIME DICTIONARIES (IN THE    * 02520000
*   CASES OF MACRO NAMES, MACRO PARAMETERS, GLOBAL VARIABLES, LOCAL   * 02590000
*   VARIABLES, SEQUENCE SYMBOLS, AND OPEN CODE ORDINARY SYMBOLS       * 02660000
*   USED IN ATTRIBUTE REFERENCES OR IN MACRO INSTRUCTION OPERANDS)    * 02730000
*   OR POINTERS TO OP CODE TABLE ENTRIES (IN THE CASE OF OP CODES).   * 02800000
*                                                                     * 02870000
*OUTPUT-                                                              * 02940000
*   FILE 2 - TEXT SEGMENT DICTIONARY FILE FOR EACH MACRO DEFINITION   * 03010000
*          - TEXT SEGMENT DICTIONARY FILE FOR OPEN CODE               * 03080000
*   FILE 3 - ORDINARY SYMBOL DEFINITION FILE                          * 03150000
*          - MACRO DEFINITION DIRECTORY/OPSYN TABLE                   * 03220000
*                                                                     * 03290000
*EXTERNAL ROUTINES-                                                   * 03360000
*   NONE                                                              * 03430000
*                                                                     * 03500000
*                                                                     * 03570000
*EXITS,NORMAL-                                                        * 03640000
*   RETURN TO THE EDITOR WITH THE BYTE 'CONCODE' SET TO A ZERO        * 03710000
*   VALUE.                                                            * 03780000
*                                                                     * 03850000
*EXITS,ERROR-                                                         * 03920000
*   RETURN TO THE EDITOR WITH THE BYTE 'CONCODE' SET TO A NON-ZERO    * 03990000
*   VALUE, THE SPECIFIC VALUE INDICATING THE ERROR DETECTED.          * 04060000
*                                                                     * 04130000
*TABLES/WORK AREAS-                                                   * 04200000
*   MACRO DEFINITION DIRECTORY - A CHAINED TABLE CONTAINING AN        * 04270000
*        ENTRY FOR EACH UNIQUE MACRO NAME ENCOUNTERED IN THE TEXT     * 04340000
*        OF ALL MACRO DEFINITIONS AND OPEN CODE, AND AN ENTRY FOR     * 04410000
*        OPEN CODE (MERGED WITH THE OPSYN TABLE).                     * 04480000
*   VARIABLE SYMBOL DIRECTORY - A CHAINED TABLE CONTAINING AN         * 04550000
*        ENTRY FOR EACH VARIABLE SYMBOL (SYSTEM VARIABLE, GLOBAL      * 04620000
*        VARIABLE, LOCAL VARIABLE, OR SYMBOLIC PARAMETER)             * 04690000
*        ENCOUNTERED IN THE TEXT OF THE MACRO DEFINITION CURRENTLY    * 04760000
*        BEING EDITED OR IN THE TEXT OF OPEN CODE.                    * 04830000
*   SEQUENCE SYMBOL REFERENCE DIRECTORY - A REVOLVING TABLE           * 04900000
*        CONTAINING AN ENTRY FOR THE 10 MOST RECENTLY REFERENCED      * 04970000
*        SEQUENCE SYMBOLS ENCOUNTERED IN THE TEXT OF A MACRO          * 05040000
*        DEFINITION OR OF OPEN CODE.                                  * 05110000
*   ORDINARY SYMBOL REFERENCE DIRECTORY - A REVOLVING TABLE CONTAIN-  * 05180000
*        ING AN ENTRY FOR THE 10 MOST RECENTLY REFERENCED ORDINARY    * 05250000
*        SYMBOLS ENCOUNTERED IN ATTRIBUTE REFERENCES OR IN MACRO      * 05320000
*        INSTRUCTION OPERANDS.                                        * 05390000
*   OP CODE TABLE - A CHAINED TABLE CONTAINING AN ENTRY FOR EACH      * 05460000
*        OF THE DEFINED ASSEMBLER AND MACHINE OPERATION CODES.        * 05530000
*   OPSYN TABLE - A CHAINED TABLE CONTAINING AN ENTRY FOR EACH        * 05600000
*        UNIQUE MNEMONIC AFFECTED BY AN OPSYN STATEMENT (MERGED       * 05670000
*        WITH THE MACRO DEFINITION DIRECTORY).                        * 05740000
*                                                                     * 05810000
*ATTRIBUTES-                                                          * 05880000
*   REFRESHABLE                                                       * 05950000
*                                                                     * 06020000
*NOTES-                                                               * 06090000
*                                                                     * 06160000
*                                                                     * 06230000
*                                                                     * 06300000
         EJECT                                                          06370000
         COPY JCOMMON                                                   06440000
         EJECT                                                          06510000
         COPY  EDSECT                                                   06580000
         EJECT                                                          06650000
*                                                                       06720000
* THIS DSECT MAPS ALL ENTRIES IN THE VARIABLE SYMBOL DIRECTORY.         06790000
*                                                                       06860000
VSDENTRY DSECT                                                          06930000
VCHAIN   DS    XL3                      CHAIN POINTER     3 BYTES       07000000
VFLAGS   DS    X                        ENTRY FLAGS       1 BYTE        07070000
VLNGTH   DS    X                        SYMBOL LENGTH     1 BYTE        07140000
VSYMBL   EQU   *                        VARIABLE SYMBOL 1-7 BYTES       07210000
         ORG   VSDENTRY                 ORIGIN 0                        07280000
VTFVAL   DS    X                        META TEXT FLAG    1 BYTE        07350000
VGVECTR  DS    XL3                      GBL VECTOR PTR    3 BYTES       07420000
         ORG   VGVECTR                  ORIGIN 1                        07490000
VLDICTR  DS    XL3                      LCL DICTNRY PTR   3 BYTES       07560000
         ORG   VGVECTR                  ORIGIN 1                        07630000
VPVECTR  DS    XL3                      PARAM VCTR PTR    3 BYTES       07700000
VGDIMEN  DS    XL2                      GBL DIMEN/SUBSC   2 BYTES       07770000
         ORG   VGDIMEN                  ORIGIN 4                        07840000
VLDIMEN  DS    XL2                      LCL DIMEN/SUBSC   2 BYTES       07910000
         ORG   VGDIMEN                  ORIGIN 4                        07980000
VPPAD    DS    XL2                      PARAM TERM PAD    2 BYTES       08050000
*                                                                       08120000
* THIS DSECT MAPS THE GLOBAL VARIABLE ENTRY IN THE VARIABLE SYMBOL      08190000
*            DIRECTORY.                                                 08260000
*                                                                       08330000
GBLNTRY  DSECT                                                          08400000
GCHAIN   DS    XL3                      CHAIN POINTER     3 BYTES       08470000
GFLAGS   DS    X                        FLAGS             1 BYTE        08540000
GLNGTH   DS    X                        SYMBOL LENGTH     1 BYTE        08610000
GSYMBL   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       08680000
         ORG   GBLNTRY                  ORIGIN 0                        08750000
GTFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        08820000
GVECTR   DS    XL3                      VECTOR POINTER    3 BYTES       08890000
GDIMEN   DS    XL2                      DIMENSION         2 BYTES       08960000
*                                                                       09030000
* THIS DSECT MAPS THE LOCAL VARIABLE ENTRY IN THE VARIABLE SYMBOL       09100000
*            DIRECTORY.                                                 09170000
*                                                                       09240000
LCLNTRY  DSECT                                                          09310000
LCHAIN   DS    XL3                      CHAIN POINTER     3 BYTES       09380000
LFLAGS   DS    X                        FLAGS             1 BYTE        09450000
LLNGTH   DS    X                        SYMBOL LENGTH     1 BYTE        09520000
LSYMBL   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       09590000
         ORG   LCLNTRY                  ORIGIN 0                        09660000
LTFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        09730000
LDICTR   DS    XL3                      DICTIONARY PTR    3 BYTES       09800000
LDIMEN   DS    XL2                      DIMENSION         2 BYTES       09870000
*                                                                       09940000
* THIS DSECT MAPS THE MACRO PARAMETER ENTRY IN THE VARIABLE SYMBOL      10010000
*            DIRECTORY.                                                 10080000
*                                                                       10150000
PRMNTRY  DSECT                                                          10220000
PCHAIN   DS    XL3                      CHAIN POINTER     3 BYTES       10290000
PFLAGS   DS    X                        FLAGS             1 BYTE        10360000
PLNGTH   DS    X                        SYMBOL LENGTH     1 BYTE        10430000
PSYMBL   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       10500000
         ORG   PRMNTRY                  ORIGIN 0                        10570000
PTFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        10640000
PVECTR   DS    XL3                      VECTOR POINTER    3 BYTES       10710000
PPAD     DS    XL2                      PADDING           2 BYTES       10780000
*                                                                       10850000
* THIS DSECT MAPS THE OP CODE TABLE ENTRY.                              10920000
*                                                                       10990000
OPNTRY   DSECT                                                          11060000
OCHAIN   DS    XL2                      CHAIN POINTER     2 BYTES       11130000
OFLAGS   DS    X                        FLAGS             1 BYTE        11200000
OMNEM    EQU   *                        MNEMONIC        1-8 BYTES       11270000
         ORG   OPNTRY                   ORIGIN 0                        11340000
OFLAGA   DS    X                        SWITCH CODES      1 BYTE        11410000
OINTCD   DS    X                        INTERNAL OP COD   1 BYTE        11480000
OMASK    DS    X                        MASK, EXT MNEMS   1 BYTE        11550000
OINTCD2  EQU   OMASK                    OP (2ND BYTE)     1 BYTE        11620000
*                                                                       11690000
* THIS DSECT MAPS THE MACRO DEFINITION DIRECTORY ENTRY.                 11760000
*                                                                       11830000
MDDNTRY  DSECT                                                          11900000
MCHAIN   DS    XL3                      CHAIN PTR         3 BYTES       11970000
MFLAGS   DSW   TSEDIT,                  ON-SEGMENT EDITED              X12040000
               OCTS,                    ON-OPEN CODE ENTRY             X12110000
               FLUSH,                   ON-MACRO FLUSHED               X12150000
               DELETE,,                 ON-MACRO DELETED VIA OPSYN     X12190000
               MNL1,MNL2,MNL3           MACRO NAME LENGTH               12250000
MSYMBL   DS    XL8                      SYMBOL (PADDED)   8 BYTES       12320000
MVECTR   DS    XL3                      VECTOR POINTER    3 BYTES       12390000
MTXTNP   DS    XL8                      TEXT FILE N/P     8 BYTES       12460000
MTSDNP   DS    XL8                      DICT FILE N/P     8 BYTES       12530000
MGBLSZ   DS    XL3                      GBL VCTR SIZE     3 BYTES       12600000
MSEQSZ   DS    XL3                      SEQ SYM DICT SIZE 3 BYTES       12670000
MLCLSZ   DS    XL3                      LCL DICT SIZE     3 BYTES       12740000
MDDEND   EQU   *                                                        12810000
*                                                                       12880000
* THIS DSECT MAPS THE OPSYN TABLE ENTRY.                                12950000
*                                                                       13020000
OPSYNTRY DSECT                                                          13060000
OPSYNCH  DS    XL3                      CHAIN POINTER  3 BYTES          13100000
OPSYNFLG DSW   ,,,,                     ROOM FOR OP CODE FLAGS         X13140000
               OMAC,                    MACRO OPSYN ENTRY              X13180000
               ODEL,                    DELETED OPSYN ENTRY            X13220000
               OPREV                    PREVIOUS OPSYN ENTRY USED       13230000
OPSYNATT DS    XL3                      ATTRIBUTES                      13260000
         ORG   OPSYNATT                 OVERLAY WITH ALTERNATE          13300000
OPSYNCHN DS    XL3                      MACRO CHAIN POINTER             13340000
ONAMEL   DS    XL1                      NAME LENGTH                     13380000
ONAME    DS    XL8                      NAME                            13420000
OPSYND   EQU   *                        END OF DSECT                    13460000
OPSYNLN  EQU   OPSYND-OPSYNTRY          OPSYN ENTRY LENGTH              13500000
*                                                                       13580000
* THIS DSECT MAPS THE SEQUENCE SYMBOL REFERENCE DIRECTORY ENTRY.        13650000
*                                                                       13720000
SSDIR    DSECT                                                          13790000
SSSYM    DS    XL8                      SEQ SYMB (PADDED) 8 BYTES       13860000
STFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        13930000
SSRDP    DS    XL3                      DICT POINTER      3 BYTES       14000000
SSPAD    DS    XL2                      PADDING           2 BYTES       14070000
SSDIRND  EQU   *                                                        14140000
*                                                                       14210000
* THIS DSECT MAPS THE ORDINARY SYMBOL REFERENCE DIRECTORY ENTRY.        14280000
*                                                                       14350000
OSDIR    DSECT                                                          14420000
OSSYM    DS    XL8                      ORD SYMB (PADDED) 8 BYTES       14490000
OTFVAL   DS    X                        TEXT FLAG VALUE   1 BYTE        14560000
OSRDP    DS    XL3                      DICT POINTER      3 BYTES       14630000
OSPAD    DS    XL2                      PADDING           2 BYTES       14700000
OSDIRND  EQU   *                                                        14770000
*                                                                       14840000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE TEXT SEGMENT          * 14910000
*            DICTIONARY FILE FOR A GLOBAL DEFINITION.                 * 14980000
*                                                                       15050000
GBLDEF   DSECT                                                          15120000
GDEFRL   DS    XL2                      RECORD LENGTH     2 BYTES       15190000
GDEFRT   DS    X'00'                    RECORD TYPE       1 BYTE        15260000
GDEFF    DS    X                        FLAGS             1 BYTE        15330000
GDEFSL   DS    X                        SYMBOL LENGTH     1 BYTE        15400000
GDEFVS   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       15470000
         ORG   GBLDEF                   ORIGIN 0                        15540000
GDEFTF   DS    X                        TEXT FLAG VALUE   1 BYTE        15610000
GDEFVP   DS    XL3                      VECTOR POINTER    3 BYTES       15680000
GDEFD    DS    XL2                      DIMENSION         2 BYTES       15750000
*                                                                       15820000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE TEXT SEGMENT          * 15890000
*            DICTIONARY FILE FOR A SEQUENCE SYMBOL DEFINITION.        * 15960000
*                                                                       16030000
SSDEF    DSECT                                                          16100000
SDEFRL   DS    XL2                      RECORD LENGTH     2 BYTES       16170000
SDEFRT   DS    X'04'                    RECORD TYPE       1 BYTE        16240000
SDEFNP   DS    XL8                      NOTE/POINT ADDR   8 BYTES       16310000
SDEFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        16380000
SDEFSS   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       16450000
*                                                                       16520000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE TEXT SEGMENT          * 16590000
*            DICTIONARY FILE FOR A SEQUENCE SYMBOL REFERENCE.         * 16660000
*                                                                       16730000
SSREF    DSECT                                                          16800000
SREFRL   DS    XL2                      RECORD LENGTH     2 BYTES       16870000
SREFRT   DS    X'08'                    RECORD TYPE       1 BYTE        16940000
SREFDP   DS    XL3                      DICTIONARY PTR    3 BYTES       17010000
SREFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        17080000
SREFSS   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       17150000
*                                                                       17220000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE TEXT SEGMENT          * 17290000
*            DICTIONARY FILE FOR AN ORDINARY SYMBOL REFERENCE.        * 17360000
*                                                                       17430000
OSREF    DSECT                                                          17500000
OREFRL   DS    XL2                      RECORD LENGTH     2 BYTES       17570000
OREFRT   DS    X'0C'                    RECORD TYPE       1 BYTE        17640000
OREFDP   DS    XL3                      DICTIONARY PTR    3 BYTES       17710000
OREFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        17780000
OREFOS   EQU   *                        ORDINARY SYMBOL 1-8 BYTES       17850000
*                                                                       17920000
* THIS DSECT MAPS THE LOGICAL RECORD PUT TO THE ORDINARY SYMBOL         17990000
*            DEFINITION FILE.                                           18060000
*                                                                       18130000
         COPY  JTEXT                                                    18200000
*                                                                       18270000
* THIS DSECT MAPS THE END-OF-SEGMENT RECORD PUT TO THE TEXT SEGMENT     18340000
*            DICTIONARY FILE.                                           18410000
*                                                                       18480000
ENDSEG   DSECT                                                          18550000
ESEGRL   DS    XL2                      RECORD LENGTH     2 BYTES       18620000
ESEGRT   DS    X'10'                    RECORD TYPE       1 BYTE        18690000
*                                                                       18760000
* THIS DSECT MAPS THE END-OF-FILE RECORD PUT TO THE TEXT SEGMENT        18830000
*            DICTIONARY FILE AND THE ORDINARY SYMBOL DEFINITION FILE.   18900000
*                                                                       18970000
ENDFIL   DSECT                                                          19040000
EFILRL   DS    XL2                      RECORD LENGTH     2 BYTES       19110000
EFILRT   DS    X'FF'                    RECORD TYPE       1 BYTE        19180000
*                                                                       19250000
         COPY  JTMTXT                                                   19320000
         EJECT                                                          19390000
         COPY  JERMSGCD                                                 19460000
         EJECT                                                          19530000
WORK4    EQU   R6                       SCRATCH REGISTER                19600000
MODCOMM  EQU   R2                       PTR REGISTER, EDSECT BASE       19670000
LNGTHREG EQU   R3                       SYMBOL LENGTH REGISTER          19740000
PARMREG  EQU   R4                       SYMBOL POINTER REGISTER         19810000
VSDPTR   EQU   R5                       PTR TO ENTRY IN VSD             19880000
SSRDPTR  EQU   R5                       PTR TO ENTRY IN SSRD            19950000
OCHNPTR  EQU   R5                       PTR TO ENTRY IN OP CODE TABLE   20020000
WORK3    EQU   R5                       SCRATCH REGISTER                20090000
WORK2    EQU   R6                       SCRATCH REGISTER                20160000
WORK1    EQU   R7                       SCRATCH REGISTER                20230000
RTNLNK   EQU   R9                       LINKAGE REGISTER                20300000
BUFPTR   EQU   R11                      PTR TO RECORD IN BUFFER         20370000
EOPAIR1  EQU   R14                      EVEN REGISTER OF PAIR           20440000
HASHO    EQU   R14                      OP CODE TABLE HASH VALUE REG    20510000
HASHV    EQU   R15                      VSD HASH VALUE REGISTER         20580000
EOPAIR2  EQU   R15                      ODD REGISTER OF PAIR            20650000
SSRDNE   EQU   10                       NO. OF SSRD ENTRIES             20720000
SSRDEL   EQU   SSDIRND-SSDIR            LENGTH OF AN SSRD ENTRY         20790000
SSRDLNGT EQU   SSRDNE*SSRDEL            LENGTH OF WHOLE SSRD            20860000
OSRDPTR  EQU   SSRDPTR                  PTR TO ENTRY IN OSRD            20930000
OSRDNE   EQU   SSRDNE                   NO. OF OSRD ENTRIES             21000000
OSRDEL   EQU   SSRDEL                   LENGTH OF AN OSRDENTRY          21070000
OSRDLNGT EQU   SSRDLNGT                 LENGTH OF WHOLE OSRD            21140000
OSALNGT  EQU   6                        LENGTH OF ORD SYMB ATTRIBUTES   21210000
GDEFTYPE EQU   0                        TYPE FOR GBL DEFIN RCD          21280000
SDEFTYPE EQU   4                        TYPE FOR SEQ SYMB DEFIN RCD     21350000
SSREFTYP EQU   8                        TYPE FOR SEQ SYMB REFER RCD     21420000
OSREFTYP EQU   12                       TYPE FOR ORD SYMB REFER RCD     21490000
ESEGTYPE EQU   16                       TYPE FOR END-OF-SEGMENT RCD     21560000
EFILTYPE EQU   255                      TYPE FOR END-OF-FILE RCD        21630000
MINSPACE EQU   512                      MINIMUM WORK SPACE IN DBL WDS   21700000
PVPTRLNG EQU   3                        LENGTH OF ENTRY IN PARAM VCTRS  21770000
GVPTRLNG EQU   3                        LENGTH OF ENTRY IN GBL VECTOR   21840000
VSDHTLNT EQU   128*3                    LENGTH OF VAR SYMB DIR HSH TBL  21910000
MDVEL    EQU   19                       LENGTH OF ENTRY IN MDV          21980000
SAVMDDPT EQU   JDPASS                   SAVE AREA, MDD ADDRESS          22050000
SAVMDDLN EQU   JDPASS+D8                SAVE AREA, MDD LENGTH           22120000
SAVMDDCN EQU   JDPASS+D12               SAVE AREA, MDD ENTRY CHAIN      22190000
SAVMDDCT EQU   JDPASS+D16               SAVE AREA, MDD ENTRY COUNT      22260000
SAVOPSCN EQU   JDPASS+D20               SAVE AREA, OPSYN ENTRY CHAIN    22330000
PAIR1E   EQU   R4                       EVEN REGISTER OF PAIR           22400000
PAIR1O   EQU   R5                       ODD REGISTER OF PAIR            22470000
PAIR2E   EQU   R6                       EVEN REGISTER OF PAIR           22540000
PAIR2O   EQU   R7                       ODD REGISTER OF PAIR            22610000
VSDEL    EQU   19                       MAX, LENGTH OF VSD ENTRY        22680000
MINRECSZ EQU   18                       MINIMUM I/O LENGTH              22750000
WORK5    EQU   R1                       SCRATCH REGISTER                22820000
NAMEPTR  EQU   R5                       OPSYN SYNONYM PTR REGISTER      22890000
ENTRYPTR EQU   R6                       PTR TO ENTRY IN OPSYN TABLE     22960000
SCANPTR  EQU   R7                       PTR TO SYNONYM ENTRY REGISTER   23030000
D256     EQU   256                      SYMBOLIC SDT (256)              23100000
         EJECT                                                          23170000
         JCSECT (X1J00)                                                 23240000
         JMODID                                                         23310000
*DICTIONARY ENTRY ROUTINE - ALL CALLS TO THE EDIT PHASE DICTIONARY    * 23380000
*   ROUTINES ENTER THROUGH THE FOLLOWING BRANCH TABLE WHICH PROVIDES  * 23450000
*   THE LINK TO THE REQUIRED ROUTINE.                                 * 23520000
*                                                                     * 23590000
         USING DICTENTR,R12                                             23660000
DICTENTR B     DICTSAVE                 GO DIRECTLY TO COMMON ENTRY     23730000
         DC    AL2(PHASENT-DICTENTR)    DISPL TO PHASENT ROUTINE        23800000
         DC    AL2(MACRENT-DICTENTR)    DISPL TO MACRENT ROUTINE        23870000
         DC    AL2(MACREND-DICTENTR)    DISPL TO MACRENT  ROUTINE       23940000
         DC    AL2(OPENENT-DICTENTR)    DISPL TO OPENENT  ROUTINE       24010000
         DC    AL2(OPENEND-DICTENTR)    DISPL TO OPENEND  ROUTINE       24080000
         DC    AL2(VARBSYMR-DICTENTR)   DISPL TO VARBSYMR ROUTINE       24150000
         DC    AL2(SEQSYMBR-DICTENTR)   DISPL TO SEQSYMBR ROUTINE       24220000
         DC    AL2(SEQSYMBD-DICTENTR)   DISPL TO SEQSYMBD ROUTINE       24290000
         DC    AL2(ORDSYMBR-DICTENTR)   DISPL TO ORDSYMBR ROUTINE       24360000
         DC    AL2(ORDSYMBD-DICTENTR)   DISPL TO ORDSYMBD ROUTINE       24430000
         DC    AL2(VARBSYMD-DICTENTR)   DISPL TO VARBSYMD ROUTINE       24500000
         DC    AL2(OPERCODE-DICTENTR)   DISPL TO OPERCODE ROUTINE       24570000
         DC    AL2(OPSYNBLD-DICTENTR)   DISPL TO OPSYNBLD ROUTINE       24640000
         SPACE 5                                                        24710000
         JENTRY (X1J01=DICTENTR)                                        24780000
         EJECT                                                          24850000
*                                                                       24920000
* THIS SUBROUTINE IS USED BY ALL THE DICTIONARY ROUTINES TO SAVE        24990000
*        REGISTERS AND ESTABLISH ADDRESSABILITY.                        25060000
*                                                                       25130000
DICTSAVE STM   R2,R9,REGSTACK           SAVE REGISTER FOR EDITOR        25200000
         LR    R8,R12                   SET UP BASE REGISTER            25270000
         USING DICTENTR,R8                                              25340000
         DROP  R12                                                      25410000
         LH    R9,DDNDX                 PICK UP ENTRY INDICATOR         25480000
         LH    R9,DICTENTR+D4(R9)       GET DISPL TO REQ'D ROUTINE      25550000
         B     DICTENTR(R9)             LINK TO DICTIONARY ROUTINE      25620000
         SPACE 10                                                       25690000
*                                                                       25760000
* THIS ROUTINE IS THE COMMON EXIT POINT FOR THE DICTIONARY ROUTINES.    25830000
*                                                                       25900000
DICTEXIT LM    R2,R9,REGSTACK           RESTORE EDITOR'S REGISTERS      25970000
         BR    R9                       RETURN TO EDITOR                26040000
         EJECT                                                          26110000
*PHASENT - THIS ROUTINE IS CALLED AT THE START OF THE EDIT PHASE.     * 26180000
*   ITS FUNCTION IS TO GET AND ALLOCATE THE SPACE REQUIRED FOR THE    * 26250000
*   VARIOUS COLLECTION TIME DICTIONARIES, TO PERFORM THE GENERAL      * 26320000
*   INITIALIZATION FOR THOSE DICTIONARIES, AND TO INITIALIZE THE      * 26390000
*   MODULE COMMON SPACE USED BY ALL THE EDIT PHASE DICTIONARY         * 26460000
*   ROUTINES.                                                         * 26530000
*        INPUT - NONE.                                                * 26600000
*        OUTPUT - NONE.                                               * 26670000
*                                                                     * 26740000
PHASENT  EQU   *                                                        26810000
         XC    DICTCOMS(DICTCOME-DICTCOMS),DICTCOMS INITIALIZE COMMON   26880000
         LH    R11,=H'32000'            SET UP MAX SPACE VALUE          26950000
         JGETCORE MINDBL=MINSPACE,MAXDBL=(R11) GET FREE SPACE           27020000
         ST    R10,FREESTRT             KEEP ADDR FOR LATER RELEASE     27090000
         AR    R11,R10                  GET HIGH BYTE ADDR AND SAVE AS  27160000
         ST    R11,MDDSTRT              MACRO DEF DIR BASE ADDR         27230000
         ST    R11,MDDSLOT              SAVE MDD PTR FOR FIRST MACRO    27300000
         ST    R10,SSRDSTRT             SAVE SEQ SYMB REF DIR PTR       27370000
         LA    R10,SSRDLNGT(,R10)       DISPLACE BY SEQ SYMB REF DIR    27440000
         ST    R10,OSRDSTRT             SAVE ORD SYMB REF DIR PTR       27510000
         MVI   D0(R10),JBLANK           INSERT CHARACTER TO CLEAR       27580000
         MVC   D1(OSRDLNGT-D1,R10),D0(R10) ORDINARY SYMBOL REFER DIRECT 27650000
         LA    R10,OSRDLNGT(,R10)       DISPLACE BY ORD SYMB REF DIR    27720000
         ST    R10,VSDSTRT              SAVE VAR SYMB DIR BASE ADDR     27790000
         XC    D0(VSDHTLNT-256,R10),D0(R10)  CLEAR VSD HASH TABLE,      27810000
         XC    VSDHTLNT-256(256,R10),VSDHTLNT-256(R10) PARTS 1 AND 2    27830000
         MVC   GTMVALOC,=F'19'          INITIALIZE MDV POINTER          27860000
         MVC   SSDLNGTH(D12),=AL1(0,L'JNOTEVAL,JTMSEQ,SSREFTYP,0,0,0,0,X27930000
               0,OSALNGT,JTMOSA,OSREFTYP) SET UP TABLE DATA FOR SYMBOL X28000000
               REFERENCES - SEQUENCE AND ORDINARY                       28070000
         B     DICTEXIT                 RETURN                          28140000
         EJECT                                                          28210000
*MACRENT - THIS ROUTINE IS CALLED AT THE START OF EDITING A MACRO     * 28280000
*   DEFINITION. ITS FUNCTION IS TO INITIALIZE THAT PART OF MODULE     * 28350000
*   COMMON USED IN EDITING MACRO DEFINITIONS, TO INITIALIZE THE       * 28420000
*   VARIABLE SYMBOL DIRECTORY, TO INITIALIZE THE SEQUENCE SYMBOL      * 28490000
*   REFERENCE DIRECTORY, TO INITIALIZE THE TEXT SEGMENT DICTIONARY    * 28560000
*   FILE, AND TO NOTE THE START OF THE MACRO DEFINITION TEXT FOR      * 28630000
*   THE ENTRY IN THE MACRO DEFINITION DIRECTORY.                      * 28700000
*        INPUT - THE 'MACRO' STATEMENT HAS BEEN PUT TO THE TEXT       * 28770000
*                FILE PRIOR TO ENTRY.                                 * 28840000
*        OUTPUT - NONE.                                               * 28910000
*                                                                     * 28980000
MACRENT  EQU   *                                                        29050000
         XC    MDINITS(TSINITE-MDINITS),MDINITS REINITIALIZE COMMON     29120000
         BAL   WORK3,COMNINIT           GO TO COMMON INITIALIZATION     29190000
         JNOTE FILE=FILE1               NOTE THE TEXT FILE              29260000
         MVC   NOTESAVE,JNOTEVAL        SAVE N/P ADDR FOR MDD ENTRY     29330000
         LA    WORK5,SYSNDX             POINT TO SYST LCL, GBL LIST     29400000
         B     VSDINIT                  GO TO ENTER THEN IN VSD         29470000
         EJECT                                                          29540000
*MACREND - THIS ROUTINE IS CALLED AT THE END OF EDITING A MACRO       * 29610000
*   DEFINITION. FOR A MACRO SUCCESSFULLY EDITED, ITS FUNCTION IS TO   * 29680000
*   CLOSE OUT THE TEXT SEGMENT DICTIONARY FILE, TO INSERT THE LOCAL   * 29750000
*   DICTIONARY, GLOBAL VECTOR, AND SEQUENCE SYMBOL REFERENCE DICTION- * 29820000
*   ARY ALLOCATIONS IN THE ENTRY FOR THE MACRO DEFINITION IN THE      * 29890000
*   MACRO DEFINITION DIRECTORY, TO INSERT THE POINTER TO THE MACRO    * 29960000
*   DEFINITION EDITED TEXT AND THE POINTER TO THE TEXT SEGMENT        * 30030000
*   DICTIONARY FILE SEGMENT FOR THE MACRO DEFINITION IN THE ENTRY     * 30100000
*   FOR THE MACRO DEFINITION IN THE MACRO DEFINITION DIRECTORY AND    * 30170000
*   TO FLAG THE MACRO AS EDITED. FOR A MACRO NOT SUCCESSFULLY EDITED, * 30240000
*   ITS FUNCTION IS TO FLAG THE MACRO AS AN UNDEFINED OP CODE AND     * 30310000
*   TO FLAG THE MACRO AS EDITED. IF LIBRARY MACROS ARE BEING EDITED,  * 30380000
*   THE NEXT NAME IS RETURNED TO THE EDITOR.                          * 30450000
*        INPUT - IF 'SKPMND' IS ON, 'SNOSMCRO', 'SBDPROTO', OR        * 30520000
*                'SNOSYSMD' INDICATE THE CAUSE FOR ABORTING THE       * 30590000
*                MACRO DEFINITION.                                    * 30660000
*        OUTPUT - NONE.                                               * 30730000
*                                                                     * 30800000
MACREND  EQU   *                                                        30870000
         GOIF  SKPMND,OFF=MRSKPA        BRANCH IF NORMAL END OF EDIT    30940000
         GOIF  SSYSMD,ON=MRSKP          SKIP IF EDITING SYS MACS        30950000
         GOIF  SMDDENTR,OFF=DICTEXIT    EXIT IF NO MDD ENTRY WAS MADE   30990000
MRSKP    L     WORK1,CURMDDPT           GET MDD ENTRY POINTER           31080000
         USING MDDNTRY,WORK1                                            31150000
         SET   FLUSH,ON                 INDICATE EDIT ABORTED           31220000
         MVI   MTSDNP+(L'MTSDNP-D1),D4  INDICATE NO SUCH MACRO          31290000
         GOIF  SNOSYSMD,ON=MRSKPB       SKIP IF THATS THE ERROR         31360000
         GOIF  SSYSMD,OFF=MRSKPB        BR IF PRGMR MACRO               31390000
         MVI   MTSDNP+(L'MTSDNP-D1),D8  INDICATE BOGUS PROTOTYPE        31430000
         GOIF  SBDPROTO,ON=MRSKPB       SKIP IF THATS THE ERROR         31500000
         MVI   MTSDNP+(L'MTSDNP-D1),D12 INDICATE NO MACRO STMT          31570000
         GOIF  SNOSMCRO,ON=MRSKPB       SKIP IF THATS THE ERROR         31640000
         MVI   MTSDNP+(L'MTSDNP-D1),D16 INDICATE MEMBER, MACRO UNALIKE  31710000
         GOIF  LSTSYSMS,OFF=MRSKPB      SKIP IF THATS THE ERROR         31730000
         MVI   MTSDNP+(L'MTSDNP-D1),D20 DICT OVERFLOW ON THIS SYS MAC   31750000
         B     MRSKPB                   GO TO FINISH MDD ENTRY          31780000
MRSKPA   EQU   *                                                        31850000
         BAL   WORK3,COMNEND            GO TO COMMON TERMINATION        31920000
         MVC   MTXTNP(L'MTXTNP+L'MTSDNP),NOTESAVE                      X31990000
               INSERT TEXT AND TSDF N/P ADDRS IN MDD ENTRY              32060000
MRSKPB   EQU   *                                                        32130000
         SET   SMDDENTR,OFF             RESET MDD ENTRY MADE SWITCH     32180000
         SET   TSEDIT,ON                INDICATE MACRO EDITED           32200000
         GOIF  SSYSMD,ON=EDITSYSM,      CONTINUE LIBRARY MACRO EDIT    X32270000
               ELSE=DICTEXIT            RETURN OTHERWISE                32340000
         DROP  WORK1                                                    32410000
         EJECT                                                          32480000
*OPENENT - THIS ROUTINE IS CALLED AT THE START OF EDITING OPEN CODE.  * 32550000
*   ITS FUNCTION IS TO INITIALIZE THAT PART OF MODULE COMMON USED IN  * 32620000
*   EDITING OPEN CODE, TO INITIALIZE THE VARIABLE SYMBOL DIRECTORY,   * 32690000
*   TO INITIALIZE THE TEXT SEGMENT DICTIONARY FILE, TO INITIALIZE     * 32760000
*   THE SEQUENCE SYMBOL REFERENCE DIRECTORY, AND TO INITIALIZE THE    * 32830000
*   ENTRY FOR OPEN CODE IN THE MACRO DEFINITION DIRECTORY.            * 32900000
*        INPUT - NONE.                                                * 32970000
*        OUTPUT - APPROPRIATE FLAGS IN 'CONCODE' IF INSUFFICIENT      * 33040000
*                 SPACE REMAINS FOR THE MACRO DEFINITION DIRECTORY    * 33110000
*                 ENTRY.                                              * 33180000
*                                                                     * 33250000
OPENENT  EQU   *                                                        33320000
         XC    OCINITS(TSINITE-OCINITS),OCINITS REINITIALIZE COMMON     33390000
         BAL   WORK3,COMNINIT           GO TO COMMON INITIALIZATION     33460000
         L     WORK1,MDDSLOT            GET PRESENT END OF MDD PTR      33530000
         SH    WORK1,=AL2(MDDEND-MDDNTRY) ADJUST FOR OPEN CODE ENTRY    33600000
         C     WORK1,VSDSLOT            LOOK FOR OVERLAP WITH VSD       33670000
         BL    OERR                     IF OVERLAP, GO FLAG THE ERROR   33740000
         ST    WORK1,MDDSLOT            PUT END OF MDD PTR BACK         33810000
         ST    WORK1,CURMDDPT           SET CURRENT ENTRY PTR ALSO      33880000
         USING MDDNTRY,WORK1                                            33950000
         MVC   MCHAIN,MDDCHN+(L'MDDCHN-L'MCHAIN) INSERT CHAIN PTR       34020000
         XC    MFLAGS(L'MFLAGS+L'MSYMBL+L'MVECTR),MFLAGS               X34090000
               CLEAR LENGTH,NAME, GT MDV POINTER                        34160000
         L     WORK2,MDDSTRT            PICK UP TABLE BASE              34230000
         SR    WORK2,WORK1              GET DISPL TO LATEST ENTRY       34300000
         ST    WORK2,MDDCHN             SAVE AS NEW FIRST CHAIN PTR     34370000
         L     WORK2,MDDCNT             PICK UP NUMBER OF MDD ENTRIES   34440000
         LA    WORK2,D1(,WORK2)         INCREMENT FOR NEW ENTRY         34510000
         ST    WORK2,MDDCNT             SAVE NEW MDD ENTRY COUNT        34580000
         SET   OCTS,ON                  INDICATE OPEN CODE ENTRY        34650000
         LA    WORK5,SYSPRM             POINT TO SYST GBL LIST          34720000
         B     VSDINIT                  GO TO ENTER THEM IN VSD         34790000
         DROP  WORK1                                                    34860000
         EJECT                                                          34930000
*OPENEND - THIS ROUTINE IS CALLED AT THE END OF EDITING OPEN CODE.    * 35000000
*   ITS FUNCTION IS TO CLOSE OUT THE TEXT SEGMENT DICTIONARY FILE,    * 35070000
*   INSERT THE LOCAL DICTIONARY, GLOBAL VECTOR, AND SEQUENCE SYMBOL   * 35140000
*   REFERENCE DICTIONARY ALLOCATIONS IN THE ENTRY FOR OPEN CODE IN    * 35210000
*   THE MACRO DEFINITION DIRECTORY. IF THERE ARE LIBRARY MACROS       * 35280000
*   TO BE EDITED, THE FIRST NAME IS RETURNED,TO THE EDITOR. WHEN      * 35350000
*   ALL LIBRARY MACROS ARE EDITED, 'LSTSYSMS' IS SET ON, AND THE      * 35420000
*   PHASE TERMINATION IS PERFORMED.                                   * 35490000
*        INPUT - NONE.                                                * 35560000
*        OUTPUT - A POINTER IN R11 TO THE LENGTH OF THE NAME (1       * 35630000
*                 BYTE) IMMEDIATELY FOLLOWED BY THE NAME ITSELF       * 35700000
*                 (PADDED WITH ZEROS TO 8 BYTES) OF A LIBRARY MACRO   * 35770000
*                 TO BE EDITED.                                       * 35840000
*                                                                     * 35910000
OPENEND  EQU   *                                                        35980000
         BAL   WORK3,COMNEND            GO TO COMMON TERMINATION        36050000
         USING MDDNTRY,WORK1                                            36120000
         MVC   MTSDNP,SAVENOTE          INSERT TSDF N/P ADDR IN MDD     36190000
         XC    MTXTNP,MTXTNP            CLEAR TEXT N/P ADDR FOR O.C.    36260000
         SET   TSEDIT,ON                INDICATE OPEN CODE EDITED       36330000
EDITSYSM GOIF  LSTSYSMS,ON=PHASEND      SKIP IT ALL IF OVERLAP OCCURRED 36400000
         MVC   HIBYTE0,MDDCHN           SET UP PTR FOR FULL CHAIN SCAN  36470000
SYSEDTLP L     WORK1,MDDSTRT            PICK UP TABLE BASE              36540000
         S     WORK1,HIBYTE0            DISPLACE TO NEXT CHAIN ENTRY    36610000
         C     WORK1,MDDSTRT            SEE IF END OF CHAIN REACHED     36680000
         BE    ENDSYSM                  BRANCH IF YES                   36750000
         GOIF  TSEDIT,OFF=EDITIT        GO TO EDIT IF NOT ALREADY       36820000
         MVC   HIBYTE0+(L'HIBYTE0-L'MCHAIN)(L'MCHAIN),MCHAIN           X36890000
               PICK UP PTR TO NEXT ENTRY IN CHAIN                       36960000
         B     SYSEDTLP                 GO BACK TO START OF SEARCH      37030000
EDITIT   ST    WORK1,CURMDDPT           SAVE PTR TO ENTRY BEING EDITED  37100000
         LA    R10,MSYMBL               GET NAME PTR FOR EDITOR         37170000
         B     DICTEXIT                 RETURN                          37240000
ENDSYSM  SET   LSTSYSMS,ON              ALL LIBRARY MACROS EDITED       37310000
         DROP  WORK1                                                    37380000
         EJECT                                                          37450000
*PHASEND - THIS ROUTINE IS CALLED AT THE END OF EDITING ALL LIBRARY   * 37520000
*   MACROS. ITS FUNCTION IS TO CLOSE OUT THE ORDINARY SYMBOL          * 37590000
*   DEFINITION FILE, OUTPUT THE MACRO DEFINITION DIRECTORY, CLOSE     * 37660000
*   OUT THE TEXT SEGMENT DICTIONARY FILE, TO PUT IN COMMON THE DATA   * 37730000
*   REQUIRED BY THE DICTIONARY INTERLUDE PHASE, AND TO RELEASE THE    * 37800000
*   DICTIONARY SPACE.                                                 * 37870000
*        INPUT - NONE.                                                * 37940000
*        OUTPUT - NONE.                                               * 38010000
*                                                                     * 38080000
PHASEND  EQU   *                                                        38150000
         JPUTL FILE=FILE3,BUFREQ=L'EFILRL+L'EFILRT GET RECORD LENGTH    38220000
         USING ENDFIL,BUFPTR                                            38290000
         MVC   EFILRL(L'EFILRL+L'EFILRT),=AL1(0,L'EFILRL+L'EFILRT,EFILTX38360000
               YPE) INSERT RECORD LENGTH AND TYPE                       38430000
         JTRUNC FILE=FILE2              COMPLETE OUTPUT, FILE 2         38570000
         JTRUNC FILE=FILE3              COMPLETE OUTPUT, FILE 3         38640000
         JPOINT FILE=FILE2,NEXT=START   REWIND FOR INTERLUDE            38710000
         MVC   PIOPARMA,MDDSLOT         SET UP BUFFER ADDRESS           38780000
         L     WORK1,MDDSTRT            GET PTR TO MDD HIGH END         38850000
         S     WORK1,MDDSLOT            GET LENGTH OF MDD               38920000
         ST    WORK1,PIOPARMB           SET UP WRITE LENGTH             38990000
         MVC   SAVMDDLN(L'PIOPARMB),PIOPARMB LENGTH IN COMMON           39060000
         LH    R5,JMAXRL3               SET UP MAXIMUM RECORD THIS FILE 39130000
         LA    R6,FILE3                 SET UP FILE POINTER             39200000
         BAL   R7,BUFRITE               GO PUT MDD TO FILE 3            39270000
         MVC   SAVMDDPT(L'JNOTEVAL),JNOTEVAL  SAVE NOTE/POINT AND MDD   39340000
         MVC   SAVMDDCN(L'MDDCHN),MDDCHN PASS MDD CHAIN LINK TO INTERL  39410000
         MVC   SAVMDDCT(L'MDDCNT),MDDCNT PASS MACRO NAME COUNT ALSO     39480000
         MVC   SAVOPSCN(L'OPSCHN),OPSCHN PASS OPSYN CHN PTR TO X2A      39550000
         JFRECORE ADDR=FREESTRT         RELEASE DIRECTORY SPACE         39620000
         B     DICTEXIT                 RETURN TO EDITOR                39690000
         DROP  BUFPTR                                                   39760000
         EJECT                                                          39830000
*MACRNAME - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 39900000
*   DEFINITION WHEN THE MACRO NAME IS ENCOUNTERED ON THE PROTOTYPE    * 39970000
*   STATEMENT. ITS FUNCTION IS TO ENTER THE MACRO NAME IN THE MACRO   * 40040000
*   DEFINITION DIRECTORY, IF IT HAS NOT BEEN PREVIOUSLY ENTERED, AND  * 40110000
*   TO RETURN TO THE EDITOR A POINTER TO THE APPROPRIATE ENTRY IN THE * 40180000
*   GENERATION TIME MACRO DEFINITION VECTOR.                          * 40250000
*        INPUT - THE LENGTH OF THE MNEMONIC IN R11.                   * 40320000
*              - A POINTER TO THE MNEMONIC (1-8 BYTES) IN R10.        * 40390000
*                THE MNEMONIC HAS BEEN VERIFIED AS A VALID SYMBOL.    * 40460000
*                THE MNEMONIC HAS NOT BEEN FOUND IN THE OP CODE TABLE.* 40530000
*        OUTPUT - A POINTER IN R11 TO THE APPROPRIATE ENTRY IN THE    * 40600000
*                 MACRO DEFINITION DIRECTORY AND APPROPRIATE FLAGS    * 40670000
*                 SET IN THE BYTE 'IOCID'.                            * 40740000
*               - APPROPRIATE FLAGS IN 'CONCODE' IF THE NAME OF A     * 40810000
*                 PROGRAMMER MACRO DUPLICATES A PREVIOUS ONE OR IF    * 40880000
*                 INSUFFICIENT SPACE REMAINS FOR THE MACRO DEFINI-    * 40950000
*                 TION ENTRY OF IF THE NAME ON THE PROTOTYPE IN A     * 41020000
*                 LIBRARY MACRO IS DIFFERENT FROM THE NAME THE        * 41090000
*                 MACRO IS CATALOGED UNDER.                           * 41160000
*                                                                     * 41230000
MACRNAME EQU   *                                                        41300000
         MVC   JDWORD,=8AL1(JBLANK)     SET UP PAD FOR MACRO NAME       41370000
         EX    LNGTHREG,MACRNMOV        SET UP MACRO NAME WITH PAD      41440000
         MVC   HIBYTE0,MDDCHN           SET UP PTR TO START CHAIN SERCH 41510000
MDDSCAN  L     WORK1,MDDSTRT            PICK UP TABLE BASE              41580000
         S     WORK1,HIBYTE0            DISPLACE TO NEXT ENTRY IN CHAIN 41650000
         C     WORK1,MDDSTRT            SEE IF END OF CHAIN REACHED     41720000
         BER   R4                       BRANCH IF YES                   41790000
         USING MDDNTRY,WORK1                                            41860000
         GOIF  DELETE,ON=MSCANB         DELETED, IGNORE                 41890000
         CLC   JDWORD,MSYMBL            COMPARE MACRO NAMES             41930000
         BE    MSCANA                   BRANCH IF NAMES MATCH           42000000
MSCANB   EQU   *                                                        42030000
         MVC   HIBYTE0+(L'HIBYTE0-L'MCHAIN)(L'MCHAIN),MCHAIN           X42070000
               PICK UP PTR IN ENTRY TO NEXT ENTRY IN CHAIN              42140000
         B     MDDSCAN                  GO BACK TO START OF SEARCH      42210000
MSCANA   GOIF  SXPRTO,OFF=MACDONE       SEE IF PRGMR MACRO PROTOTYPE    42280000
         GOIF  TSEDIT,ON=MACERR         IF ENTRY ALREADY EDITED, ERROR  42350000
         ST    WORK1,CURMDDPT           SET CURRENT PTR TO THIS ENTRY   42420000
         SET   SMDDENTR,ON              SHOW THAT MDD ENTRY WAS MADE    42470000
MACDONE  LA    R11,MVECTR               GET PTR FOR EDITOR TO MDV SLOT  42490000
         MVI   IOCID,J0                 SET OP CODE FLAGS PROPERLY      42560000
         B     D4(R4)                   RETURN                          42630000
MACERR   MVC   DSEVCD(D2),=AL1(SEV10,ERR10) INDICATE DUPL PRGMR MACROS  42700000
         B     D4(R4)                   RETURN                          42770000
MACENTRY EQU   *                                                        42840000
         GOIF  SSYSMD,OFF=MAKENTRY      MAKE CHECK ONLY IN SYST MACROS  42910000
         GOIF  SXPRTO,OFF=MAKENTRY      SEE IF BOOK NAME AND MACRO NAME 42980000
         MVC   DSEVCD(D2),=AL1(SEV11,ERR11) DO NOT AGREE, FLAG IF NOT   43050000
         B     DICTEXIT                 EXIT                            43120000
MAKENTRY EQU   *                                                        43190000
         L     WORK1,MDDSLOT            GET END OF DICT PTR             43260000
         SH    WORK1,=AL2(MDDEND-MDDNTRY) ALLOW ROOM FOR THIS ENTRY     43330000
         C     WORK1,VSDSLOT            LOOK FOR OVERLAP WITH VSD       43400000
         BL    OERR                     IF OVERLAP, GO FLAG THE ERROR   43470000
         ST    WORK1,MDDSLOT            IF NOT, UPDATE NEXT SLOT PTR    43540000
         MVC   MCHAIN,MDDCHN+(L'MDDCHN-L'MCHAIN) INSERT CHAIN PTR       43610000
         STC   LNGTHREG,MFLAGS          INSERT FLAGS IN MDD ENTRY       43680000
         MVC   MSYMBL,JDWORD            INSERT NAME IN MDD ENTRY        43750000
         MVC   MVECTR,GTMVALOC+(L'GTMVALOC-L'MVECTR)   INSERT MACRO    X43820000
               DEFINITION VECTOR PTR IN MDD ENTRY                       43890000
         XC    MTXTNP(L'MTXTNP+L'MTSDNP),MTXTNP  CLEAR N/P ADDRS        43960000
         L     R14,GTMVALOC             PICK UP CURRENT MDV PTR         44030000
         LA    R14,MDVEL(,R14)          BUMP IT FOR NEXT ENTRY          44100000
         ST    R14,GTMVALOC             PUT IT BACK UPDATED             44170000
         L     R14,MDDSTRT              PICK UP TABLE BASE              44240000
         SR    R14,WORK1                GET DISPL TO LATEST ENTRY       44310000
         ST    R14,MDDCHN               STORE IT                        44380000
         L     R14,MDDCNT               NUMBER OF MOD ENTRIES           44450000
         LA    R14,D1(R14)              BUMP                            44520000
         ST    R14,MDDCNT               STORE                           44590000
         B     MSCANA                   GO SEE IF EDITING THE ENTRY     44660000
MACRNMOV MVC   JDWORD(D0),JFWORD1       MOVE MACRO NAME                 44730000
         DROP  WORK1                                                    44800000
         EJECT                                                          44870000
*VARBSYMD - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 44940000
*   DEFINITION OR OF OPEN CODE WHEN THE DEFINITION OF A VARIABLE      * 45010000
*   SYMBOL IS ENCOUNTERED (IN THE OPERAND OF A GLOBAL OR LOCAL        * 45080000
*   DECLARATION OR IN THE OPERAND OF THE MACRO PROTOTYPE STATEMENT).  * 45150000
*   ITS FUNCTION IS TO ENTER THE VARIABLE SYMBOL IN THE VARIABLE      * 45220000
*   SYMBOL DIRECTORY. FOR GLOBALS, THIS ROUTINE ALSO MAKES AN ENTRY   * 45290000
*   IN THE TEXT SEGMENT DICTIONARY FILE FOR THE GLOBAL DEFINITION.    * 45360000
*        INPUT - THE LENGTH OF THE VARIABLE SYMBOL IN R11.            * 45430000
*              - A POINTER IN R10 TO THE VARIABLE SYMBOL (1-8 BYTES). * 45500000
*                THE VARIABLE SYMBOL HAS BEEN VERIFIED AS VALID.      * 45570000
*                IF THE VARIABLE SYMBOL IS DIMENSIONED, THE           * 45640000
*                DIMENSION VALUE IS IN 'JHWORD1'. THE DIMENSION       * 45710000
*                HAS BEEN VERIFIED AS VALID.                          * 45780000
*              - APPROPRIATE FLAGS SET IN THE BYTE 'FLGBYT'.          * 45850000
*        OUTPUT - APPROPRIATE FLAGS IN 'CONCODE' IF THE VARIABLE      * 45920000
*                 SYMBOL DUPLICATES A PREVIOUS ONE OR IF INSUFFIC-    * 45990000
*                 IENT SPACE REMAINS FOR THE VARIABLE SYMBOL          * 46060000
*                 DIRECTORY ENTRY.                                    * 46130000
*                                                                     * 46200000
VSDINIT  EQU   *                                                        46270000
         SET   ITERSW,ON                INDICATE VSD INITIALIZATION     46340000
VSDINITA SR    R11,R11                  CLEAR PARAMETER REGISTER        46410000
         IC    R11,D1(,WORK5)           PICK UP VARB SYMB LENGTH        46480000
         LA    R10,D2(,WORK5)           GET PTR TO SYST VARB SYMBOL     46550000
         MVC   FLGBYT,D0(WORK5)         SET UP APPROPRIATE FLAGS        46620000
VARBSYMD EQU   *                                                        46690000
         BAL   RTNLNK,VSLOOKUP          SEE IF VAR SYM DEFINED PREV     46760000
         GOIF  FNDFLG,ON=VERR           IF YES, THIS DECLR AN ERROR     46830000
         L     WORK2,VSDSLOT            GET PTR TO NEW ENTRY            46900000
         LA    WORK1,VSDEL(,WORK2)      ASSUME LONGEST VSD ENTRY        46970000
         C     WORK1,MDDSLOT            CHECK FOR OVERLAP               47040000
         BNL   OERR                     IF OVERLAP, BRANCH              47110000
         L     WORK1,VSDSTRT            GET VSD HASH TBL PTR            47180000
         AR    WORK1,HASHV              GET PTR TO HSH TBL ENTRY        47250000
         USING VSDENTRY,WORK2                                           47320000
         MVC   VCHAIN,D0(WORK1)         PUT CHN LINK IN NEW ENTRY       47390000
         LR    WORK3,WORK2              SET UP NEW ENTRY ADDR           47460000
         S     WORK3,VSDSTRT            GET DISPL FOR HASH TBL ENTRY    47530000
         ST    WORK3,JFWORD1            SAVE TEMPORARILY AND PUT IN     47600000
         MVC   D0(L'VCHAIN,WORK1),JFWORD1+(L'JFWORD1-L'VCHAIN) HSH TBL  47670000
         STC   LNGTHREG,VLNGTH          INSERT VARB SYMB LENGTH         47740000
         EX    LNGTHREG,SYMBMOVE        PUT VAR SYMB IN ENTRY           47810000
         LA    WORK2,L'VCHAIN+L'VFLAGS+L'VLNGTH+D1(LNGTHREG,WORK2)     X47880000
               UPDATE ENTRY (DSECT) PTR                                 47950000
         GOIF  (VTYP1,VTYP2),NOTALL=LGVARB GO AHEAD IF LOCAL, GLOBAL    48020000
PENTRY   GOIF  VPTYP,ON=KENTRY                                          48090000
         MVI   VTFVAL,JTMPPAR           FLAG POS PARAM FOR TEXT         48160000
         MVC   VPVECTR,GTPVALOC+(L'GTPVALOC-L'VPVECTR) PUT IN POSITNL  X48230000
               PARAMETER VECTOR DISPLACEMENT                            48300000
         L     WORK3,GTPVALOC           GET CURRENT POSIT PARM DISPL    48370000
         LA    WORK3,PVPTRLNG(,WORK3)   INCR FOR NEXT POS ENTRY         48440000
         ST    WORK3,GTPVALOC           PUT IT BACK UPDATED             48510000
         B     COMPNTRY                 CONTINUE AT COMMON PARAM PT     48580000
KENTRY   MVI   VTFVAL,JTMKPAR           FLAG KWD PARAM FOR TEXT         48650000
         MVC   VPVECTR,GTKVALOC+(L'GTKVALOC-L'VPVECTR) PUT IN KEYWORD  X48720000
               PARAMETER VECTOR DISPLACEMENT                            48790000
         L     WORK3,GTKVALOC           GET CURRENT KEYWRD PARM DISPL   48860000
         LA    WORK3,PVPTRLNG(,WORK3)   INCR FOR NEXT KWD ENTRY         48930000
         ST    WORK3,GTKVALOC           PUT IT BACK UPDATED             49000000
COMPNTRY EQU   *                                                        49070000
         XC    VPPAD,VPPAD              INSERT PAD OF ZEROES IN ENTRY   49140000
         B     COMALL                   CONTINUE AT COMMON PT FOR ALL   49210000
SYMBMOVE MVC   VSYMBL(D0),D0(PARMREG)   EXECUTED VARB SYMB MOVE         49280000
LGVARB   GOIF  (VSTP1,VSTP2),NONE=ATYP,MIX=BTYP BRANCH ON VARB TYPE     49350000
         MVI   VTFVAL,JTMSVC            FLAG C-TYPE FOR TEXT            49420000
         B     FANOUT                   GO ON                           49490000
ATYP     MVI   VTFVAL,JTMSVA            FLAG A-TYPE FOR TEXT            49560000
         B     FANOUT                   GO ON                           49630000
BTYP     MVI   VTFVAL,JTMSVB            FLAG B-TYPE FOR TEXT            49700000
FANOUT   GOIF  (VTYP1,VTYP2),NONE=GENTRY SEPARATE GLOBALS AND LOCALS    49770000
LENTRY   EQU   *                                                        49840000
         GOIF  VSLS,OFF=SLSKIP          HANDLE SYSLIST SPECIALLY        49910000
         MVI   VTFVAL,JTMLSTO           SET SPECIAL SYSLIST FLAG        49980000
         XC    VLDICTR,VLDICTR          CLEAR DICTIONARY PTR            50050000
         MVC   VLDIMEN,=H'1'            PRE-SET SYSLIST DIMENSION FLAG  50120000
         B     COMALL                   SKIP ALLOCATION FOR SYSLIBT     50190000
SLSKIP   MVC   VLDICTR,GTLDALOC+(L'GTLDALOC-L'VLDICTR) PUT IN DICT PTR  50260000
         LA    EOPAIR2,D1               ALLOCATE 1 BYTE FOR B-TYPE      50330000
         GOIF  (VSTP1,VSTP2),MIX=DIMENCK  BRANCH IF B-TYPE              50400000
         LA    EOPAIR2,D4               ALLOCATE 4 BYTES FOR A-TYPE     50470000
         GOIF  (VSTP1,VSTP2),NONE=DIMENCK BRANCH IF A-TYPE              50540000
         LA    EOPAIR2,D9               ALLOCATE 9 BYTES FOR C-TYPE     50610000
DIMENCK  GOIF  VDIM,ON=LSKIP            BRANCH IF VARB DIMENSIONED      50680000
         XC    VLDIMEN,VLDIMEN          SET DIMEN TO ZERO               50750000
         B     COMLNTRY                 SKIP DIMEN CALCULATION          50820000
LSKIP    MVC   VLDIMEN,JHWORD1          PUT DIMEN VALUE IN ENTRY        50890000
         MH    EOPAIR2,JHWORD1          COMPUTE DIMEN'D ALLOCATION      50960000
         GOIF  (VSTP1,VSTP2),NOTMIX=COMLNTRY   BRANCH IF NOT B-TYPE     51030000
         LA    EOPAIR2,D7(,EOPAIR2)     ADJUST TO GET ROUNDED RESULT    51100000
         SR    EOPAIR1,EOPAIR1          INITIALIZE AND DIVIDE TO ALLOC  51170000
         D     EOPAIR1,=F'8'            FORM                            51240000
COMLNTRY A     EOPAIR2,GTLDALOC         ADJUST DICTIONARY ALLOCATION    51310000
         ST    EOPAIR2,GTLDALOC         PUT BACK UPDATED                51380000
         B     COMALL                   CONTINUE AT COMMON PT FOR ALL   51450000
GENTRY   OI    VTFVAL,JTMGBL            INSERT GLOBAL FLAG              51520000
         MVC   VGVECTR,GTGVALOC+(L'GTGVALOC-L'VGVECTR) PUT IN GLOBAL   X51590000
               VECTOR DISPLACEMENT                                      51660000
         L     WORK3,GTGVALOC           GET CURRENT GBL VECTR DISPL     51730000
         LA    WORK3,GVPTRLNG(,WORK3)   INCR FOR NEXT GBL ENTRY         51800000
         ST    WORK3,GTGVALOC           PUT IT BACK UPDATED             51870000
         GOIF  VDIM,ON=GSKIP            BRANCH IF VARB DIMENSIONED      51940000
LSKIPA   EQU   *                                                        52010000
         XC    VGDIMEN,VGDIMEN          SET DIMEN TO ZERO               52080000
         B     COMALL                   SKIP DIMEN HANDLING             52150000
GSKIP    MVC   VGDIMEN,JHWORD1          PUT DIMEN VALUE IN ENTRY        52220000
COMALL   EQU   *                                                        52290000
         LA    WORK2,L'VTFVAL+L'VGVECTR+L'VGDIMEN(,WORK2) UPDATE PTR    52360000
         L     WORK3,VSDSLOT            GET PTR TO START OF ENTRY       52430000
         DROP  WORK2                                                    52500000
         USING VSDENTRY,WORK3                                           52570000
         MVC   VFLAGS,FLGBYT            INSERT FLAGS IN ENTRY           52640000
         ST    WORK2,VSDSLOT            UPDATE NEXT ENTRY ADDRESS       52710000
         GOIF  (VTYP1,VTYP2),ANY=VSDINITX FINSIHED EXCEPT FOR GLOBALS   52780000
         SR    WORK2,WORK3              GET ENTRY LENGTH                52850000
         LR    R11,WORK2                SET UP LENGTH FOR JPUTL         52920000
         ST    WORK5,REGSAVE2           PRESERVE VSDINIT POINTER        52990000
         JPUTL FILE=FILE2,BUFREQ=(R11)  GET BUFFER PTR AND SPACE        53060000
         USING GBLDEF,BUFPTR                                            53130000
         BCTR  WORK2,D0                 GET RECORD MOVE LENGTH          53200000
         EX    WORK2,GDEFMOVE           MOVE DIR ENTRY TO DEF RECORD    53270000
         LA    WORK2,D1(,WORK2)         RESTORE TRUE LENGTH             53340000
         STH   WORK2,GDEFRL             PUT AT HEAD OF DEF RCRD         53410000
         MVI   GDEFRT,GDEFTYPE          INSERT RECORD TYPE              53480000
         BAL   RTNLNK,GETNPF2           NOTE TEXT SEG DICT, IF NECESS   53550000
         L     WORK5,REGSAVE2           RESTORE VSDINIT POINTER         53620000
VSDINITX GOIF  ITERSW,OFF=DICTEXIT      EXIT FI NOT VSD INITIALIZATION  53690000
         LA    WORK5,D9(,WORK5)        BUMP TO NEXT SYST VARB DEFIN     53760000
         CLI   D0(WORK5),BITFF          SEE IF END OF LIST REACHED      53830000
         BNE   VSDINITA                 BRANCH IF NOT                   53900000
         SET   ITERSW,OFF               INDICATE VSD INITIALIZE DONE    53970000
         B     DICTEXIT                 AND EXIT                        54040000
GDEFMOVE MVC   GDEFRL(D0),VCHAIN        EXECUTED GBL DEFINITION MOVE    54110000
         DROP  BUFPTR                                                   54180000
         DROP  WORK3                                                    54250000
         USING VSDENTRY,VSDPTR                                          54320000
OERR     MVC   DSEVCD(D2),=AL1(SEV9,ERR9) FLAG DICTIONARY OVERLAP       54390000
         SET   LSTSYSMS,ON              PREVENT SYSTEM MACRO EDITING    54460000
         B     DICTEXIT                 RETURN TO EDITOR                54530000
VERR     GOIF  (VTYP1,VTYP2),ON=PERR    BRANCH IF PARAM IN ERROR        54600000
         TM    VFLAGS,VSNS              SEE IF DUP ENTRY FOR SYS VARB   54670000
         BO    VERRA                    BRANCH IF YES                   54740000
         TM    VFLAGS,VTYP1+VTYP2       SEE IF DUP ENTRY FOR PARAM      54810000
         BO    VERRB                    BRANCH IF YES                   54880000
         MVC   DSEVCD(D2),=AL1(SEV5,ERR5) FLAG VAR SYMB DUPL OF VAR SYM 54950000
         B     DICTEXIT                 EXIT                            55020000
VERRA    MVC   DSEVCD(D2),=AL1(SEV3,ERR3) FLAG VAR SYMB DUPL OF SYS VAR 55090000
         B     DICTEXIT                 EXIT                            55160000
VERRB    MVC   DSEVCD(D2),=AL1(SEV4,ERR4) FLAG VAR SYMB DUPL OF PARAM   55230000
         B     DICTEXIT                 EXIT                            55300000
PERR     TM    VFLAGS,VTYP1+VTYP2       SEE IF DUPL ENTRY FOR PARAM     55370000
         BO    PERRA                    BRANCH IF YES                   55440000
         MVC   DSEVCD(D2),=AL1(SEV1,ERR1) FLAG PARAM DUPL OF SYST VAR   55510000
         B     DICTEXIT                 EXIT                            55580000
PERRA    MVC   DSEVCD(D2),=AL1(SEV2,ERR2) FLAG PARAM DUPL OF PARAM      55650000
         B     DICTEXIT                 RETURN TO EDITOR                55720000
         DROP  VSDPTR                                                   55790000
         EJECT                                                          55860000
*VARBSYMR - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 55930000
*   DEFINITION OR OF OPEN CODE WHEN A REFERENCE TO A VARIABLE SYMBOL  * 56000000
*   IS ENCOUNTERED. ITS FUNCTION IS TO DETERMINE THE TYPE OF          * 56070000
*   REFERENCE (SYMBOLIC PARAMETER, LOCAL VARIABLE, OR GLOBAL VARI-    * 56140000
*   ABLE), AND TO RETURN TO THE EDITOR A POINTER TO THE APPROPRIATE   * 56210000
*   ENTRY IN THE APPROPRIATE GENERATION TIME DICTIONARY (THE KEYWORD  * 56280000
*   OR POSITIONAL PARAMETER VECTOR IN THE CASE OF A SYMBOLIC PARAM-   * 56350000
*   ETER, THE LOCAL DICTIONARY IN THE CASE OF A LOCAL VARIABLE, THE   * 56420000
*   GLOBAL VECTOR IN THE CASE OF A GLOBAL VARIABLE).                  * 56490000
*        INPUT - THE LENGTH OF THE VARIABLE SYMBOL IN R11.            * 56560000
*              - A POINTER IN R10 TO THE VARIABLE SYMBOL (1-8 BYTES). * 56630000
*                IF SUBSCRIPTED, THE VARIABLE SYMBOL IS FOLLOWED BY   * 56700000
*                A LEFT PARENTHESIS (1 BYTE).                         * 56770000
*                THE VARIABLE SYMBOL HAS BEEN VERIFIED AS VALID.      * 56840000
*        OUTPUT - A POINTER IN R11 TO THE TEXT FLAG BYTE IN THE       * 56910000
*                 VARIABLE SYMBOL DIRECTORY ENTRY FOR THE VARIABLE    * 56980000
*                 SYMBOL.                                             * 57050000
*               - APPROPRIATE FLAGS SET IN THE BYTE 'FLGBYT'.         * 57120000
*               - APPROPRIATE FLAGS IN 'CONCODE' IF THE VARIABLE      * 57190000
*                 SYMBOL WAS NOT PREVIOUSLY DEFINED OR IF ITS         * 57260000
*                 USEAGE IS INCONSISTENT WITH ITS DECLARATION.        * 57330000
*                                                                     * 57400000
VARBSYMR EQU   *                                                        57470000
         MVI   FLGBYT,J0                CLEAN UP BEFORE GOING ON        57750000
         BAL   RTNLNK,VSLOOKUP          SEE IF VARB SYMB DECLARED PREV  57820000
         GOIF  FNDFLG,OFF=VERRC         IF NOT, THIS REFER AN ERROR     57890000
         GOIF  SPGRMD,OFF=RSKIP         BR IF NOT PRGR MACS             57900000
         GOIF  SMDEF,OFF=VERRC          ERROR IF BETWEEN MACRO DEFS     57910000
RSKIP    EQU   *                                                        57920000
         USING VSDENTRY,VSDPTR                                          57960000
         MVC   FLGBYT,VFLAGS            GET FLAGS FOR EDITOR            58030000
RSKIPA   LA    WORK1,D1(LNGTHREG,PARMREG) GET PTR PAST VARB SYMB        58100000
         CLI   D0(WORK1),JLPARN         LOOK FOR LEFT PAREN (DIMEN)     58170000
         BNE   RSKIPB                   IF NOT, DONT SET FLAG           58240000
         OI    FLGBYT,VDIM              INDICATE PAREN FOUND            58310000
         B     RSKIPB1                  GO CHECK CONSISTENCY            58380000
RSKIPB   NI    FLGBYT,BITFF-VDIM        INDICATE NO PAREN FOUND         58450000
RSKIPB1  TM    VFLAGS,VTYP1+VTYP2       CONSIDER PARAMS SPECIALLY       58520000
         BO    RSKIPD                   SKIP IF THATS THE CASE          58590000
         CLC   FLGBYT,VFLAGS            SEE IF USEAGE CONSISTENT        58660000
         BNE   VERRD                    BRANCH IF NOT                   58730000
RSKIPC   EQU   *                                                        58800000
         LA    R11,L'VCHAIN+L'VFLAGS+L'VLNGTH+D1(LNGTHREG,VSDPTR)      X58870000
               GET POINTER TO TEXT FLAG BYTE                            58940000
         B     DICTEXIT                 RETURN                          59010000
VERRC    MVC   DSEVCD(D2),=AL1(SEV6,ERR6) FLAG UNDECLARED VAR SYMB      59080000
         B     DICTEXIT                 RETURN                          59150000
VERRD    TM    VFLAGS,VSLS              LOOK FOR SYSLIST REFERENCE      59220000
         BZ    VERRE                    BRANCH IF GBL OR LCL            59290000
         MVC   DSEVCD(D2),=AL1(SEV7,ERR7) FLAG INCONSISTENCY ERROR FOR  59360000
         B     RSKIPC                   SYSLIST, BUT STILL GET POINTER  59430000
RSKIPD   LA    R11,L'VCHAIN+L'VFLAGS+L'VLNGTH+D1(LNGTHREG,VSDPTR)      X59500000
               GET POINTER TO TEXT FLAG BYTE                            59570000
         USING PTFVAL,R11                                               59640000
         MVI   PPAD+D1,J0               SET DIMEN TO ZERO INITIALLY     59710000
         TM    FLGBYT,VDIM              SEE IF SUBSCRIPT ON PARAM       59780000
         BZ    DICTEXIT                 BRANCH IF NOT                   59850000
         MVI   PPAD+D1,J1               INSERT NON-ZERO IN DIMEN BYTES  59920000
         B     DICTEXIT                 RETURN                          59990000
VERRE    EQU   *                                                        60060000
         MVC   DSEVCD(D2),=AL1(SEV7,ERR7) FLAG INCONSISTENCY ERROR      60130000
         B     DICTEXIT                 RETURN TO EDITOR                60200000
         DROP  VSDPTR                                                   60270000
         DROP  R11                                                      60340000
         EJECT                                                          60410000
*SEQSYMBR - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 60480000
*   DEFINITION OR OF OPEN CODE WHEN A REFERENCE TO A SEQUENCE SYMBOL  * 60550000
*   IS ENCOUNTERED. ITS FUNCTION IS TO ENTER THE SEQUENCE SYMBOL IN   * 60620000
*   THE SEQUENCE SYMBOL REFERENCE DIRECTORY, IF IT HAS NOT BEEN       * 60690000
*   PREVIOUSLY ENTERED, AND TO RETURN TO THE EDITOR A POINTER TO THE  * 60760000
*   APPROPRIATE ENTRY IN THE GENERATION TIME SEQUENCE SYMBOL REFER-   * 60830000
*   ENCE DICTIONARY. FOR EACH NEW ENTRY IN THE SEQUENCE SYMBOL        * 60900000
*   REFERENCE DIRECTORY, THIS ROUTINE ALSO MAKES AN ENTRY IN THE      * 60970000
*   TEXT SEGMENT DICTIONARY FILE FOR THE SEQUENCE SYMBOL REFERENCE.   * 61040000
*        INPUT - THE LENGTH OF THE SEQUENCE SYMBOL IN R11.            * 61110000
*              - A POINTER TO THE SEQUENCE SYMBOL (2-8 BYTES) IN R10. * 61180000
*                THE SEQUENCE SYMBOL HAS BEEN VERIFIED AS VALID.      * 61250000
*        OUTPUT - A POINTER IN R11 TO THE TEXT FLAG BYTE IN THE       * 61320000
*                 SEQUENCE SYMBOL REFERENCE DIRECTORY ENTRY FOR THE   * 61390000
*                 SEQUENCE SYMBOL.                                    * 61460000
*                                                                     * 61530000
SEQSYMBR EQU   *                                                        61600000
         LA    R6,SSPARMS               POINT TO SEQ SYMBOL VALUES      61670000
         LA    R10,D1(,R10)             DROP LEADING PERIOD             61690000
         BCTR  R11,0                    FROM SEQUENCE SYMBOL            61710000
COMNREF  EQU   *                                                        61740000
         USING SSPARMS,R6                                               61810000
         LR    LNGTHREG,R11             SAVE LENGTH PARAMETER           61880000
         LR    PARMREG,R10              SAVE POINTER PARAMETER          61950000
         MVC   JDWORD,=8AL1(JBLANK)     CLEAR NAME BUFFER               62020000
         EX    LNGTHREG,SSMVC           MOVE SEQ SYMB INTO BUFFER       62090000
         L     SSRDPTR,SSRDSTRT         GET SS REF DIR BASE ADDR        62160000
         USING SSDIR,SSRDPTR                                            62230000
         LA    WORK1,SSRDNE             SET UP COMPARE LIMIT            62300000
SSLOOP   CLI   SSSYM,J0                 LOOK FOR SS IN DIR ENTRY        62370000
         BE    SSENTRY                  IF NO SS, GO MAKE ENTRY         62440000
         CLC   JDWORD,SSSYM             COMPARE SEQUENCE SYMBOLS        62510000
         BE    SSFOUND                  IF ALIKE, GO GET PTR AND EXIT   62580000
         LA    SSRDPTR,SSRDEL(,SSRDPTR) IF NOT, BUMP PTR TO NEXT ENTRY  62650000
         BCT   WORK1,SSLOOP             BRANCH 10 TIMES, THEN FALL      62720000
         L     SSRDPTR,SSRDSTRT         GET TABLE BASE ADDR             62790000
         AH    SSRDPTR,SSRAPDIS         DEVELOP PTR TO NEXT ENTRY SLOT  62860000
SSENTRY  MVC   SSSYM,JDWORD             MOVE SS NAME INTO ENTRY         62930000
         MVC   STFVAL,SSFLGVAL          INSERT FLAG FOR TEXT REFER      63000000
         MVC   SSRDP,GTSDALOC+L'GTSDALOC-L'SSRDP      GET DICT PTR      63070000
         XC    SSPAD,SSPAD              INSERT PAD OF ZEROES IN ENTRY   63140000
         LA    WORK1,D8(,LNGTHREG)      GET LENGTH OF SS REF RECORD     63210000
         LR    R11,WORK1                SET UP FOR JPUTL                63280000
         JPUTL FILE=FILE2,BUFREQ=(R11)  GET BUFFER PTR AND SPACE        63350000
         USING SSREF,BUFPTR                                             63420000
         STH   WORK1,SREFRL             INSERT RECORD LENGTH            63490000
         MVC   SREFDP,SSRDP             INSERT DICTIONARY PTR           63560000
         MVC   SREFRT,SREFTYPE          INSERT RECORD TYPE              63630000
         STC   LNGTHREG,SREFSL          INSERT SEQ SYMB LENGTH          63700000
         EX    LNGTHREG,SREFMOVE        INSERT SEQUENCE SYMBOL          63770000
         BAL   RTNLNK,GETNPF2           NOTE TEXT SEG DICT, IF NECESS   63840000
         L     WORK1,GTSDALOC           PICK UP CURRENT DICT PTR        63910000
         AH    WORK1,SSDLNGTH           INCREMENT BY DICT ENTRY LENGTH  63980000
         ST    WORK1,GTSDALOC           PUT IT BACK UPDATED             64050000
         LH    WORK1,SSRAPDIS           PICK UP CURRENT DISPL           64120000
         LA    WORK1,SSRDEL(,WORK1)     ADD IN NEWEST ENTRY             64190000
         CH    WORK1,=AL2(SSRDEL*(SSRDNE-D1)) CHECK IF WRAP POINT HIT   64260000
         BNH   SSSKIP                   IF NOT, SKIP                    64330000
         SR    WORK1,WORK1              IF SO, RESET DISPL TO ZERO      64400000
SSSKIP   STH   WORK1,SSRAPDIS           SAVE WRAP-AROUND DISPL          64470000
SSFOUND  LA    R11,STFVAL               GET PTR TO STUFF FOR EDITOR     64540000
         B     DICTEXIT                 RETURN TO EDITOR                64610000
SSMVC    MVC   JDWORD(D0),D0(PARMREG)   EXECUTED SEQ SYMB MOVE          64680000
SREFMOVE MVC   SREFSS(D0),D0(PARMREG)   EXECUTED SEQ SYMB MOVE          64750000
         DROP  SSRDPTR                                                  64820000
         DROP  BUFPTR                                                   64890000
         DROP  R6                                                       64960000
         EJECT                                                          65030000
*SEQSYMBD - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 65100000
*   DEFINITION OR OF OPEN CODE AFTER THE EDITED TEXT RECORD HAS       * 65170000
*   BEEN BUILT FOR A STATEMENT IN WHICH A SEQUENCE SYMBOL WAS         * 65240000
*   ENCOUNTERED IN THE NAME FIELD. ITS FUNCTION IS TO MAKE AN         * 65310000
*   ENTRY IN THE TEXT SEGMENT DICTIONARY FILE FOR THE SEQUENCE        * 65380000
*   SYMBOL DEFINITION.                                                * 65450000
*        INPUT - THE LENGTH OF THE SEQUENCE SYMBOL IN R11.            * 65520000
*              - A POINTER TO THE SEQUENCE SYMBOL (2-8 BYTES) IN R10. * 65590000
*                THE SEQUENCE SYMBOL HAS BEEN VERIFIED AS VALID.      * 65660000
*                THE STATEMENT DEFINING THE SEQUENCE SYMBOL HAS       * 65730000
*                BEEN PUT TO THE TEXT FILE PRIOR TO ENTRY.            * 65800000
*        OUTPUT - NONE.                                               * 65870000
*                                                                     * 65940000
SEQSYMBD EQU   *                                                        66010000
         LR    LNGTHREG,R11             SAVE LENGTH PARAMETER           66080000
         LR    PARMREG,R10              SAVE POINTER PARAMETER          66150000
         JNOTE FILE=FILE1               GET N/P ADDR AS SS DEF          66220000
         LA    WORK1,L'JNOTEVAL+D5(,LNGTHREG) DEVELOP RECORD LENGTH     66290000
         LR    R11,WORK1                SET UP FOR JPUTL                66360000
         JPUTL FILE=FILE2,BUFREQ=(R11)  GET BUFFER PTR AND SPACE        66430000
         USING SSDEF,BUFPTR                                             66500000
         STH   WORK1,SDEFRL             INSERT RECORD LENGTH            66570000
         MVC   SDEFNP(L'JNOTEVAL),JNOTEVAL  INSERT N/P ADDR             66640000
         BCTR  LNGTHREG,0               DROP LEADING PERIOD             66670000
         STC   LNGTHREG,SDEFSL          INSERT SEQ SYMB LENGTH          66710000
         EX    LNGTHREG,SSDEFMV         INSERT SEQ SYMB                 66780000
         MVI   SDEFRT,SDEFTYPE          INSERT RECORD TYPE              66850000
         BAL   RTNLNK,GETNPF2           NOTE TEXT SEG DICT, IF NECESS   66920000
         B     DICTEXIT                 RETURN TO EDITOR                66990000
SSDEFMV  MVC   SDEFSS(D0),D1(PARMREG)   EXECUTED SEQ SYMB MOVE          67060000
         DROP  BUFPTR                                                   67130000
         EJECT                                                          67200000
*OPERCODE - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 67270000
*   DEFINITION OR OF OPEN CODE WHEN AN OPERATION CODE IS ENCOUNT-     * 67340000
*   ERED. ITS FUNCTION IS TO LOCATE THE APPROPRIATE ENTRY IN THE      * 67410000
*   OP CODE TABLE AND TO RETURN TO THE EDITOR A POINTER TO THE ENTRY  * 67480000
*   LOCATED. ANY OPERATION CODE NOT LOCATED IN THE OP CODE TABLE IS   * 67550000
*   ENTERED IN THE MACRO DEFINITION DIRECTORY (SEE THE ROUTINE        * 67620000
*   'MACRNAME').                                                      * 67690000
*        INPUT - THE LENGTH OF THE MNEMONIC IN R11.                   * 67760000
*              - A POINTER TO THE MNEMONIC (1-8 BYTES) IN R10.        * 67830000
*                THE MNEMONIC HAS BEEN VERIFIED AS A VALID SYMBOL.    * 67900000
*        OUTPUT - A POINTER IN R11 TO THE 'FLAGA' BYTE IN THE OP      * 67970000
*                 CODE TABLE ENTRY FOR THE MNEMONIC.                  * 68040000
*               - APPROPRIATE FLAGS SET IN THE BYTE 'IOCID'.          * 68110000
*                                                                     * 68180000
OPERCODE EQU   *                                                        68250000
         LR    LNGTHREG,R11             SAVE LENGTH PARAMETER           68320000
         XC    JFWORD1(D8),JFWORD1      CLEAR WORK AREA                 68340000
         EX    R11,MNEMOVE              MOVE MNEMONIC T-6 WORK AREA     68360000
         NC    OPSCHN,OPSCHN            SEE IF ANY OPSYN ENTRIES        68670000
         BZ    OPERCD1                  BRANCH AROUND IF NONE           68740000
         BAL   R4,OPSYNAME              DO OPSYN SCAN                   68810000
OPERCD1  EQU   *                                                        68880000
         BAL   R4,OPERNAME              SEARCH OP CODE TABLE FIRST      68910000
         B     OPERCD2                  RETURN--NOT FOUND               68940000
         B     DICTEXIT                 RETURN--FOUND                   68970000
OPERCD2  BAL   R4,MACRNAME              LOOK UP AS A MACRO              69010000
         B     MACENTRY                 NOT FOUND                       69050000
         B     DICTEXIT                 FOUND                           69090000
OPERNAME EQU   *                                                        69160000
         L     EOPAIR2,JFWORD1          GET FIRST HALF OF NAME          69230000
         AL    EOPAIR2,JFWORD2          ADD SECOND HALF                 69300000
         SR    EOPAIR1,EOPAIR1          INITIALIZE AND DIVIDE BY        69370000
         D     EOPAIR1,=F'71'           HASHING VALUE                   69440000
         SLL   EOPAIR1,D1               DEVELOP HASH TABLE INDEX        69510000
         L     OCHNPTR,OCTSTRT          GET OP COD TBL BASE ADDR        69580000
         AR    OCHNPTR,HASHO            ADD DISPL TO REQ'D CHAIN        69650000
         USING OPNTRY,OCHNPTR                                           69720000
NXTCHN   CLC   OCHAIN,=FL3'0'           CHECK FOR END OF CHAIN          69790000
         BZR   R4                       IF FOUND, GO HANDLE MACRO CALL  69860000
         MVC   JHWORD1,OCHAIN           ALIGN CHAIN POINTER             69930000
         LH    OCHNPTR,JHWORD1          PICK UP LINK TO NEXT ENTRY      70000000
         A     OCHNPTR,OCTSTRT          GET ADDR OF NEXT CHAIN ENTRY    70070000
         SR    WORK1,WORK1              CLEAR WORK REGISTER             70140000
         IC    WORK1,OFLAGS             PICK UP ENTRY FLAGS             70210000
         N     WORK1,=F'7'              STRIP OUT ALL BUT MNEM LENGTH   70280000
         CLR   WORK1,LNGTHREG           SEE IF LENGTHS EQUAL            70350000
         BNE   NXTCHN                   BRANCH IF NOT                   70420000
         EX    LNGTHREG,OPCOMP          COMPARE MNEMONICS               70490000
         BNE   NXTCHN                   IF NOT SAME, SEARCH FURTHER     70560000
         MVC   IOCID(L'OFLAGS),OFLAGS        GET FLAGS FROM TBL ENTRY   70630000
         NI    IOCID,BITFF-BIT5-BIT6-BIT7    STRIP OUT LENGTH BITS      70700000
         LA    R11,D4(LNGTHREG,OCHNPTR) GET POINTER TO FLAGA BYTE       70770000
         B     D4(R4)                   RETURN--FOUND                   70840000
MNEMOVE  MVC   JFWORD1(D0),D0(R10)      REMOTE MNEMONIC MOVE            70910000
OPCOMP   CLC   JFWORD1(D0),OMNEM        EXECUTED MNEMONIC COMPARE       70980000
         DROP  OCHNPTR                                                  71050000
OPSYNAME LA    NAMEPTR,JFWORD1-D1       SET UP POINTER FOR OPSYN SCAN   71120000
         LA    R1,D1(,LNGTHREG)         GET MNEMONIC TRUE LENGTH        71160000
         STC   R1,JFWORD1-D1            STORE FOR COMPARE               71200000
OPSYNM1  BAL   RTNLNK,SCANOPSN          GO LOOK FOR OPSYN ENTRY         71260000
         B     OPSYNM2                  BRANCH IF FOUND                 71330000
         BR    R4                       BRANCH IF NOT FOUND             71400000
         USING OPSYNTRY,SCANPTR                                         71470000
OPSYNM2  GOIF  ODEL,ON=D4(R4)           SKIP OPCODE LOOKUP IF DELETED   71520000
         MVC   IOCID(D1),OPSYNFLG       MOVE FLAGS                      71570000
         LA    R11,OPSYNATT             POINT TO FLAGA, ETC.            71670000
         B     DICTEXIT                 AND EXIT                        71720000
         DROP  SCANPTR                                                  71820000
         EJECT                                                          71890000
*ORDSYMBR - THIS ROUTINE IS CALLED DURING THE EDITING OF A MACRO      * 71960000
*   DEFINITION OR OF OPEN CODE WHEN AN EXPLICIT REFERENCE TO AN       * 72030000
*   ATTRIBUTE OF AN ORDINARY SYMBOL IS ENCOUNTERED IN A CONDITIONAL   * 72100000
*   ASSEMBLY STATEMENT OR WHEN AN ORDINARY SYMBOL IS ENCOUNTERED      * 72170000
*   IN THE OPERAND OF A MACRO INSTRUCTION.                            * 72240000
*   ITS FUNCTION IS TO ENTER THE ORDINARY SYMBOL IN THE ORDINARY      * 72310000
*   SYMBOL REFERENCE DIRECTORY, IF IT HAS NOT BEEN PREVIOUSLY         * 72380000
*   ENTERED, AND TO RETURN TO THE EDITOR A POINTER TO THE APPRO-      * 72450000
*   PRIATE ENTRY IN THE GENERATION TIME ORDINARY SYMBOL REFERENCE     * 72520000
*   DICTIONARY. FOR EACH NEW ENTRY IN THE ORDINARY SYMBOL REFERENCE   * 72590000
*   DIRECTORY, THIS ROUTINE ALSO MAKES AN ENTRY IN THE TEXT SEGMENT   * 72660000
*   DICTIONARY FILE FOR THE ORDINARY SYMBOL REFERENCE.                * 72730000
*        INPUT - THE LENGTH OF THE ORDINARY SYMBOL IN R11.            * 72800000
*              - A POINTER TO THE ORDINARY SYMBOL (1-8 BYTES) IN R10. * 72870000
*                THE ORDINARY SYMBOL HAS BEEN VERIFIED AS VALID.      * 72940000
*        OUTPUT - A POINTER IN R11 TO THE TEXT FLAG BYTE IN THE       * 73010000
*                 ORDINARY SYMBOL REFERENCE DIRECTORY ENTRY FOR THE   * 73080000
*                 ORDINARY SYMBOL.                                    * 73150000
*                                                                     * 73220000
ORDSYMBR EQU   *                                                        73290000
         LA    R6,OSPARMS               POINT TO ORD SYMB VALUES        73360000
         B     COMNREF                  HANDLE AS SEQUENCE SYMBOL       73430000
         EJECT                                                          73500000
*ORDSYMBD - THIS ROUTINE IS CALLED DURING THE EDITING OF OPEN         * 73570000
*   CODE AFTER THE EDITED TEXT RECORD HAS BEEN BUILT FOR AN           * 73640000
*   'EXTRN' OR 'WXTRN' STATEMENT OR FOR A STATEMENT IN WHICH AN       * 73710000
*   ORDINARY SYMBOL WAS ENCOUNTERED IN THE NAME FIELD. ITS FUNCTION   * 73780000
*   IS TO MAKE AN ENTRY IN THE ORDINARY SYMBOL DEFINITION FILE.       * 73850000
*        INPUT - A POINTER IN R10 TO THE START OF THE EDITED TEXT     * 73920000
*                RECORD.                                              * 73990000
*        OUTPUT - NONE.                                               * 74060000
*                                                                     * 74130000
ORDSYMBD EQU   *                                                        74200000
         LR    R11,R10                  SET UP PTR FOR PUTL             74270000
         JPUTM FILE=FILE3,ADDR=(R11)    PUT RCD TO ORD SYMB DEF FILE    74340000
         B     DICTEXIT                 RETURN TO EDITOR                74410000
         EJECT                                                          74480000
*OPSYNBLD - THIS ROUTINE IS CALLED AFTER THE EDITING OF AN OPSYN      * 74550000
*   STATEMENT. ITS FUNCTION IS TO ENTER THE MNEMONIC AND ITS          * 74620000
*   SYNONYM IN THE OPSYN TABLE.                                       * 74690000
*        INPUT - A POINTER IN R10 TO THE EDITED TEXT RECORD.          * 74760000
*        OUTPUT - NONE.                                               * 74830000
*                                                                     * 74900000
OPSYNBLD EQU   *                                                        74970000
         USING JTEXT,R10                                                75040000
         LH    NAMEPTR,JTNMP            GET DISPL TO NAME FIELD         75110000
         LA    NAMEPTR,D1(NAMEPTR,R10)  DEVELOP PTR TO OPSYN NAME       75180000
         LH    SCANPTR,JTOPP            GET OPERAND FIELD DISPLACEMENT  75200000
         AR    R10,SCANPTR              POINT TO OPERAND                75220000
         USING JTOPO,R10                  AND DECLARE AS BASE.          75240000
         GOIF  JTOPOCD,OFF=OPBLD1       BRANCH IF NO CARD POINTER       75260000
         LA    R10,JTOPL                BUMP OVER CARD POINTER          75280000
OPBLD1   LA    R10,JTOPL                POINT TO OPERAND LENGTH         75300000
         USING JTOPL,R10                  AND RESET BASE.               75320000
         SR    R1,R1                    CLEAR REGISTER                  75340000
         IC    R1,D0(NAMEPTR)           PICK UP NAME FIELD LENGTH       75360000
         LR    LNGTHREG,R1              PLACE MNEMONIC IN LENGTH REG    75380000
         BCTR  LNGTHREG,0                 AND MAKE MOVE LENGTH          75400000
         GOIF  JTOPL,D0,EQ=OPBLD10      EXIT IF NULL OPERAND            75420000
         CLC   JTOPL(D2),=AL1(D1,JCOMMA) CHECK FOR COMMA IN OPERAND     75440000
         BE    OPBLD10                  BRANCH IF YES--NULL OPERAND     75460000
*              NAMEPTR POINTS TO MNEMONIC TO BE SEARCHED                75480000
         BAL   RTNLNK,SCANOPSN          SEARCH FOR PREVIOUS ENTRY       75500000
         B     OPBLD2                   RETURN HERE IF FOUND            75520000
*                                       RETURN HERE IF NOT FOUND        75540000
         BAL   RTNLNK,OPENTRY           GO MAKE OPSYN ENTRY             75560000
         B     OPBLD3                   SKIP AROUND                     75580000
OPBLD2   EQU   *                                                        75600000
         LR    ENTRYPTR,SCANPTR         POINT TO ENTRY                  75620000
*              ENTRYPTR IS OPSYN ENTRY BASE                             75640000
         USING OPSYNTRY,ENTRYPTR        DECLARE BASE                    75660000
         SET   OPREV,ON                                                 75680000
OPBLD3   EQU   *                                                        75700000
OPBLD4   EQU   *                                                        75880000
         LR    NAMEPTR,R10              POINT TO MNEMONIC               75900000
         IC    R1,JTOPL                 PICK UP OPSYN OPERAND LENGTH    75920000
         DROP  R10                                                      75940000
         LR    LNGTHREG,R1              PUT LENGTH IN LENGTH REG        75960000
         BCTR  LNGTHREG,0                 AND MAKE INTO MOVE LENGTH     75980000
         BAL   RTNLNK,SCANOPSN          SEE IF THERE IS AN OPSYN        76000000
         B     OPBLD6                   RETURN HERE IF FOUND            76020000
OPBLD7   XC    JFWORD1(D8),JFWORD1      CLEAR WORK AREA                 76040000
         EX    R1,NAMEMV                USE TO MOVE OPERAND TO WORK    X76060000
                                          AREA.                         76080000
OPBLD8   BAL   R4,OPERNAME              GO SEE IF THERE'S AN OP CODE    76100000
         B     OPBLD5                   RETURN HERE IF NOT FOUND        76120000
*                                       RETURN HERE IF FOUND            76140000
         MVC   OPSYNATT,D0(R11)         MOVE ATTRIBUTES TO OPSYN ENTRY  76160000
         MVC   OPSYNFLG(D1),IOCID       MOVE FLAGS TO OPSYN ENTRY       76180000
         B     DICTEXIT                 EXIT POINT                      76200000
         SPACE                                                          76340000
OPBLD6   EQU   *                                                        76360000
*              SCANPTR POINTS TO OLD OPSYN ENTRY                        76380000
         CLC   HIBYTE0,OPSCHN           IS IT THE LAST OPSYN            76400000
         BNE   OPBLD9                   NO                              76410000
         TM    D3(SCANPTR),OPREV                                        76412000
         BZ    OPBLD7                                                   76414000
OPBLD9   TM    D3(SCANPTR),ODEL         DELETED                         76416000
         BO    OPBLDER1                 OR AN ERRONEOUS OPSYN           76418000
         MVC   OPSYNFLG(D4),D3(SCANPTR) MOVE ATTRIBUTES AND FLAGS       76420000
         B     DICTEXIT                 EXIT                            76440000
         SPACE                                                          76460000
OPBLD5   EQU   *                                                        76470000
         GOIF  OPREV,OFF=OPBLDER1                                       76475000
OPBLDERR SET   ODEL,ON                  MARK AS A DELETE ENTRY          76480000
         MVC   DSEVCD(D2),=AL1(SEV8,ERR8)    LOG ERROR--CIRCULAR       X76500000
                                             OPSYN OPERAND              76520000
         B     DICTEXIT                 EXIT                            76540000
         SPACE                                                          76560000
*        OPSYN DELETE ROUTINE                                           76580000
         SPACE                                                          76600000
OPBLD10  EQU   *                        DELETE AN ENTRY                 76620000
         SPACE                                                          76640000
*        ON ENTRY R1 CONTAINS MNEMONIC LENGTH                           76660000
*              LNGTHREG CONTAINS LENGTH-1                               76680000
*                 NAMEPTR CONTAINS POINTER TO MNEMONIC IN TEXT RECORD   76700000
         SPACE                                                          76720000
         XC    JFWORD1(D8),JFWORD1      CLEAR WORK AREA                 76740000
         EX    R1,NAMEMV                MOVE NAME TO WORK AREA          76760000
         BAL   RTNLNK,SCANOPSN          SEARCH FOR OPSYN ENTRY          76780000
         B     OPBLD11                  RETURN HERE IF FOUND            76800000
*                                       RETURN HERE IF NOT FOUND        76820000
         BAL   R4,OPERNAME              LOOK FOR OP CODE                76840000
         B     OPBLDER1                 RETURN HERE IF NOT FOUND        76860000
*                                       RETURN HERE IF FOUND            76880000
         LA    NAMEPTR,JFWORD1-D1       RESET POINTER TO MNEMONIC       76900000
         BAL   RTNLNK,OPENTRY           MAKE OPSYN ENTRY                76920000
         SET   ODEL,ON                  MARK AS A DELETE                76940000
         B     DICTEXIT                 RETURN                          76960000
OPBLDER1 SET   ODEL,ON                  MARK AS A DELETE ENTRY          76970000
         MVC   DSEVCD(D2),=AL1(SEV14,ERR14)                            X76972000
               LOG ERROR - INVALID OPCODE IN NAME FIELD                 76974000
         B     DICTEXIT                 RETURN                          76976000
OPBLD11  EQU   *                                                        76980000
         DROP  ENTRYPTR                                                 77000000
         USING OPSYNTRY,SCANPTR         BASE                            77020000
         SET   OPREV,ON                                                 77030000
         SET   ODEL,ON                  MARK AS DELETE                  77060000
         DROP  SCANPTR                                                  77080000
         USING OPSYNTRY,ENTRYPTR        BASE FOR OPSYN ENTRY            77100000
         B     DICTEXIT                 RETURN                          77120000
         SPACE                                                          77140000
         SPACE                                                          77320000
OPENTRY  EQU   *                                                        77340000
         L     ENTRYPTR,MDDSLOT         POINTER TO NEXT FREE SLOT       77360000
         SH    ENTRYPTR,=AL2(OPSYND-OPSYNTRY)  MAKE ROOM FOR NEW ENTRY  77380000
         GOIF  (ENTRYPTR),VSDSLOT,LOW=OERR EXIT IF NO ROOM              77400000
         ST    ENTRYPTR,MDDSLOT         UPDATE TABLE BOUNDARY           77420000
         XC    OPSYNTRY(OPSYNLN),OPSYNTRY    CLEAR IT OUT               77440000
         MVC   OPSYNCH,OPSCHN+(L'OPSCHN-L'OPSYNCH)  LINK THE CHAIN      77460000
         LCR   R15,ENTRYPTR             COMPLEMENT AND USE TO CALCULATE 77480000
         A     R15,MDDSTRT              NEW CHAIN POINTER               77500000
         ST    R15,OPSCHN               SAVE AS MASTER LINK             77520000
         EX    R1,NAME1MV               MOVE NAME TO OPSYN ENTRY        77540000
         BR    RTNLNK                   RETURN                          77560000
         SPACE                                                          77580000
*        EXECUTED OPERATIONS                                            77600000
         SPACE                                                          77620000
NAME1MV  MVC   ONAMEL(D0),D0(NAMEPTR)   MNEMONIC MOVE TO OPSYN ENTRY    77640000
NAMEMV   MVC   JFWORD1-D1(D0),D0(NAMEPTR)    ALIGN OPSYN NAME           77660000
         DROP  ENTRYPTR                                                 77680000
         EJECT                                                          77980000
*                                                                       78050000
* THIS SUBROUTINE SEARCHES THE VARIABLE SYMBOL DIRECTORY FOR A          78120000
*        SPECIFIED VARIABLE SYMBOL.                                     78190000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES-                      78260000
*                   VARBSYMD                                            78330000
*                   VARBSYMR                                            78400000
*                                                                       78470000
VSLOOKUP EQU   *                                                        78540000
         LR    LNGTHREG,R11             SAVE LENGTH PARAMETER           78610000
         LR    PARMREG,R10              SAVE POINTER PARAMETER          78680000
         XC    JDWORD,JDWORD            CLEAR VARB NAME AREA            78750000
         EX    LNGTHREG,VARMOVE         MOVE NAME TO ALIGNED AREA       78820000
         L     EOPAIR2,JDWORD           GET FIRST HALF OF NAME          78890000
         AL    EOPAIR2,JDWORD+D4        ADD SECOND HALF                 78960000
         SR    EOPAIR1,EOPAIR1          INITIALIZE AND DIVIDE BY        79030000
         D     EOPAIR1,=F'201'          HASHING VALUE                   79100000
         N     EOPAIR1,=F'127'          INSURE HASH VALUE IN RANGE      79170000
         LR    EOPAIR2,EOPAIR1          SET UP TO CALC DISPL            79240000
         MH    EOPAIR2,=H'3'            MULTIPLY FOR RANGE 0-381        79310000
         L     VSDPTR,VSDSTRT           GET VAR SYMB DIR BASE ADDR      79380000
         AR    VSDPTR,HASHV             ADD DISPL TO REQ'D CHAIN        79450000
         USING VSDENTRY,VSDPTR                                          79520000
CHNON    CLC   VCHAIN,=FL3'0'           CHECK FOR END OF CHAIN          79590000
         BZ    NTFND                    IF YES, GO FLAG IT AND EXIT     79660000
         MVC   HIBYTE0+(L'HIBYTE0-L'VCHAIN)(L'VCHAIN),VCHAIN           X79730000
               MOVE CHAIN POINTER                                       79800000
         L     VSDPTR,HIBYTE0           TO ALIGNED AREA, PICK IT UP     79870000
         A     VSDPTR,VSDSTRT           GET ADDR OF NEXT CHAIN ENTRY    79940000
         SR    WORK1,WORK1              CLEAR WORK REGISTER             80010000
         IC    WORK1,VLNGTH             PICK UP LENGTH OF ENTRY         80080000
         N     WORK1,=F'7'              STRIP OUT ALL BUT LENGTH BITS   80150000
         CLR   WORK1,LNGTHREG           COMPARE VARB SYMB LENGTHS       80220000
         BNE   CHNON                    IF UNEQUAL, SEARCH FURTHER      80290000
         EX    LNGTHREG,VARCOMP         COMPARE VARIABLE SYMBOLS        80360000
         BNE   CHNON                    IF NOT SAME, SEARCH FURTHER     80430000
         SET   FNDFLG,ON                IF SAME, FLAG IT                80500000
         BR    RTNLNK                        AND EXIT                   80570000
NTFND    SET   FNDFLG,OFF               INDICATE VARB SYM NOT FOUND     80640000
         BR    RTNLNK                   RETURN TO CALLING RTN           80710000
VARCOMP  CLC   VSYMBL(D0),D0(PARMREG)   EXECUTED VARB NAME COMPARE      80780000
VARMOVE  MVC   JDWORD(D0),D0(PARMREG)   EXECUTED VARB NAME MOVE         80850000
         DROP  VSDPTR                                                   80920000
*                                                                       80990000
* THIS SUBROUTINE NOTES THE TEXT SEGMENT DICTIONARY FILE FOLLOWING      81060000
*        THE FIRST WRITE TO THAT FILE FOR EACH TEXT SEGMENT.            81130000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES-                      81200000
*                   VARBSYMD                                            81270000
*                   SEQSYMBR                                            81340000
*                   SEQSYMBD                                            81410000
*                   ORDSYMBR                                            81480000
*                                                                       81550000
GETNPF2  GOIF  NOTEFIL2,OFF=(RTNLNK)    RETURN IF FLAG SET OFF          81620000
         SET   NOTEFIL2,OFF             SET FLAG OFF                    81690000
         ST    RTNLNK,REGSAVE1          TEMPOR SAVE LINK REG            81760000
         JNOTE FILE=FILE2               NOTE TEXT SEG DICT FILE         81830000
         MVC   SAVENOTE,JNOTEVAL        SAVE N/P ADDR FOR MDD ENTRY     81900000
         L     RTNLNK,REGSAVE1          RESTORE LINK REG                81970000
         BR    RTNLNK                   RETURN                          82040000
*                                                                       82110000
* THIS SUBROUTINE PERFORMS A BUFFERED WRITE TO ANY FILE.                82180000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       82250000
*                   PHASEND                                             82320000
*                                                                       82390000
BUFRITE  EQU   *                                                        82460000
         MVI   FSWITCH,J0               CLEAR FIRST WRITE/NOTE SWITCH   82530000
         LM    R3,R4,PIOPARMB           PICK UP I/O PARAMETERS          82600000
BR1      CLR   R3,R5                    SEE IF RECORD LESS THAN MAX     82670000
         BH    BR4                      BRANCH IF NOT                   82740000
         CH    R3,=AL2(MINRECSZ)        SEE IF BLOCK OVER MINIMUM       82810000
         BNL   BR11                     BRANCH IF MORE OR JUST ENUF     82880000
         LA    R3,MINRECSZ              IF NOT, USE MINIMUM SIZE        82950000
BR11     EQU   *                                                        83020000
         STH   R3,PIOPARMC              SET UP I/O LENGTH PARAM         83090000
         SR    R3,R3                    INDICATE LAST WRITE             83160000
BR2      JWRITE FILE=(R6),PARM=PIOPARMA WRITE RECORD TO PROPER FILE     83230000
         JCHECK FILE=(R6)               CHECK THE WRITE                 83300000
         TS    FSWITCH                  TEST AND SET FIRST WRITE SW     83370000
         BNZ   BR3                      BRANCH IF NOT FIRST WRITE       83440000
         JNOTE FILE=(R6)                NOTE FIRST BLOCK WRITTEN        83510000
BR3      LTR   R3,R3                    SEE IF WRITE COMPLETE           83580000
         BZR   R7                       RETURN IF YES                   83650000
         AR    R4,R5                    DEVELOP PTR TO NEXT I/O AREA    83720000
         ST    R4,PIOPARMA              PUT PTR IN I/O CONTROL AREA     83790000
         B     BR1                      GO SET UP NEW WRITE LENGTH      83860000
BR4      STH   R5,PIOPARMC              USE MAX RCD LENGTH THIS TIME    83930000
         SR    R3,R5                    ADJUST RECORD LENGTH            84000000
         B     BR2                      GO WRITE NEXT RECORD            84070000
*                                                                       84140000
* THIS SUBROUTINE PERFORMS THE INITIALIZATION COMMON TO A MACRO         84210000
*        DEFINITION AND OPEN CODE. IT IS CALLED FROM THE                84280000
*        FOLLOWING ROUTINES - OPENENT, MACRENT                          84350000
*                                                                       84420000
COMNINIT EQU   *                                                        84490000
         SET   NOTEFIL2,ON              SET NOTE FLAG FOR FILE 2        84560000
         L     WORK1,SSRDSTRT           GET PTR TO SS REF DIRECTORY     84630000
         MVI   D0(WORK1),JBLANK         INSERT CHARACTER TO CLEAR       84700000
         MVC   D1(SSRDLNGT-D1,WORK1),D0(WORK1) SEQ SYMB REFER DIRECT    84770000
         L     WORK1,VSDSTRT            GET PTR TO VSD HASH TABLE       84840000
         XC    D0(VSDHTLNT-D256,WORK1),D0(WORK1) CLEAR VSD HASH TABLE,  84910000
         XC    VSDHTLNT-D256(D256,WORK1),VSDHTLNT-D256(WORK1) 2 PARTS   84980000
         LA    WORK1,VSDHTLNT(,WORK1)   ADJUST PTR PAST HASH TABLE      85050000
         ST    WORK1,VSDSLOT            RESET START OF VSD ENTRY AREA   85120000
         BR    WORK3                    RETURN                          85190000
*                                                                       85260000
* THIS SUBROUTINE PERFORMS THE TERMINATION COMMON TO A MACRO            85330000
*        DEFINITION AND OPEN CODE. IT IS CALLED FROM THE                85400000
*        FOLLOWING ROUTINES - OPENEND, MACREND                          85470000
*                                                                       85540000
COMNEND  EQU   *                                                        85610000
         JPUTL FILE=FILE2,BUFREQ=L'ESEGRL+L'ESEGRT GET RECORD LENGTH    85680000
         USING ENDSEG,BUFPTR                                            85750000
         MVC   ESEGRL(L'ESEGRL+L'ESEGRT),=AL1(0,L'ESEGRL+L'ESEGRT,ESEGTX85820000
               YPE) INSERT RECORD LENGTH AND TYPE                       85890000
         BAL   RTNLNK,GETNPF2           NOTE TEXT SEG DICT, IF NECESS   85960000
         L     WORK1,CURMDDPT           PICK UP CURRENT MDD SLOT PTR    86030000
         USING MDDNTRY,WORK1                                            86100000
         MVC   MLCLSZ,GTLDALOC+(L'GTLDALOC-L'MLCLSZ) INSERT LCL DICT    86170000
         MVC   MSEQSZ,GTSDALOC+(L'GTSDALOC-L'MSEQSZ) INSERT SEQ DICT    86240000
         MVC   MGBLSZ,GTGVALOC+(L'GTGVALOC-L'MGBLSZ) INSERT GBL VCT     86310000
         BR    WORK3                    RETURN                          86380000
         DROP  WORK1                                                    86450000
*                                                                       86520000
* THIS SUBROUTINE SCANS THE OPSYN TABLE FOR A GIVEN OP CODE.            86590000
*                                                                       86660000
SCANOPSN MVC   HIBYTE0,OPSCHN           SET UP INITIAL CHAIN PTR        86730000
SCOPN1   L     SCANPTR,HIBYTE0          PICK UP PTR TO NEXT CHAIN ENTRY 86800000
         LTR   SCANPTR,SCANPTR          SEE IF END OF CHAIN             86870000
         BZ    D4(,RTNLNK)              TAKE NOT-FOUND EXIT             86940000
         USING OPSYNTRY,SCANPTR                                         87010000
         LCR   SCANPTR,SCANPTR          GET VALUE FOR CALCULATION OF    87030000
         A     SCANPTR,MDDSTRT          OPSYN ENTRY LOCATION            87050000
         EX    R1,COMPNAME              REMOTE MNEMONIC COMPARE         87100000
         BER   RTNLNK                   TAKE FOUND EXIT                 87150000
         MVC   HIBYTE0+(L'HIBYTE0-L'OPSYNCH)(L'OPSYNCH),OPSYNCH        X87220000
                SET UP LINK TO NEXT ENTRY                               87290000
         B     SCOPN1                   GO BACK THRU SEARCH LOOP        87360000
COMPNAME CLC   ONAMEL,D0(NAMEPTR)       COMPARE MNEMONICS               87390000
         DROP  SCANPTR                                                  87430000
         EJECT                                                          87500000
OCTSTRT  DC    A(OPBASE)                POINTER TO OP CODE TABLE        87570000
         JEXTRN (X1K01=OPBASE)                                          87640000
SYSNDX   DC    AL1(VSNS+VTYP2),X'05',AL1(JS,JY,JS,JN,JD,JX,JBLANK)     X87740000
               DEFINITION OF SYSNDX SYSTEM LOCAL                        87840000
SYSECT   DC    AL1(VSNS+VTYP2+VSTP1+VSTP2),X'05',AL1(JS,JY,JS,JE,JC,JT,X87940000
               JBLANK) DEFINITION OF SYSECT SYSTEM LOCAL                88040000
SYSLST   DC    AL1(VSNS+VSLS+VDIM+VTYP2),X'06',AL1(JS,JY,JS,JL,JI,JS,JTX88140000
               ) DEFINITION OF SYSLIST SYSTEM LOCAL                     88240000
SYSPRM   DC    AL1(VSNS+VSTP1+VSTP2),X'06',AL1(JS,JY,JS,JP,JA,JR,JM)   X88340000
               DEFINITION OF SYSPARM SYSTEM GLOBAL                      88440000
SYSTME   DC    AL1(VSNS+VSTP1+VSTP2),X'06',AL1(JS,JY,JS,JT,JI,JM,JE)   X88540000
               DEFINITION OF SYSTIME SYSTEM GLOBAL                      88640000
SYSDTE   DC    AL1(VSNS+VSTP1+VSTP2),X'06',AL1(JS,JY,JS,JD,JA,JT,JE)   X88740000
               DEFINITION OF SYSDATE SYSTEM GLOBAL                      88840000
         DC    X'FF'                    END OF TABLE FLAG               88940000
         SPACE 3                                                        89250000
         EJECT                                                          89340000
         JPATCH X1J00,B64                                               89430000
         END                                                            89530000
./  ADD  SSI=71710236,NAME=IFNX1K
         GENOP PHASE=1,                                                X30000000
               LEVEL=1                                                  31232000
         END                                                            60000000
./  ADD  SSI=71710237,NAME=IFNX1S
         MACRO                                                          00300000
         BIND  &OP                                                      00600000
         ORG   BINDERS+JTM&OP           ORIGIN                          00900000
         DC    AL1(BIND&OP)                  VALUE                      01200000
         SPACE                                                          01500000
         MEND                                                           01800000
         EJECT                                                          02100000
         JHEAD 'CONDITIONAL ASSEMBLY POSTFIX ROUTINE',                 X02400000
               PHASEID=X1S,                                            X02700000
               LEVEL=10                                                 03000000
*FUNCTION/OPERATION--                                                 * 03300000
*   AS THE EDITOR PROCESSES EXPRESSIONS, IT WILL PLACE ALL TERMS IM-  * 03600000
*   MEDIATELY INTO THE TEXT, BUT WILL PASS ALL OPERATORS TO POSTER.   * 03900000
*   POSTER WILL ENTER OPERATORS INTO AN OPERATOR STACK, RETURNING     * 04200000
*   OPERATORS TO THE EDITOR IN PROPER SEQUENCE FOR POSTFIX NOTATION,  * 04500000
*   ALSO CALLED REVERSE POLISH, WITHOUT PARENTHESES.                  * 04800000
*                                                                     * 05100000
*   EACH OPERATOR IS ASSIGNED A BINDING FACTOR.  LOWEST BINDING FACTOR* 05400000
*   IS TO BE EVALUATED FIRST.  ALL INCOMING OPERATORS ARE COMPARED    * 05700000
*   WITH THE LAST OPERATOR IN THE STACK. IF THE BINDING FACTOR OF     * 06000000
*   THE INPUT IS LOWER THAN THAT OF THE STACK, THE NEW ONE IS ADDED   * 06300000
*   TO THE STACK. IF EQUAL OR GREATER, THE INPUT IS SAVED AND THE     * 06900000
*   LAST STACK ENTRY IS RETURNED.                                     * 07500000
*                                                                     * 08100000
*   A LEFT PAREN IS ENTERED IMMEDIATELY INTO THE STACK.  A RIGHT PAREN* 08400000
*   CAUSES THE STACK TO DUMP TO A LEFT PAREN, AND THE PARENS ARE DIS- * 08700000
*   CARDED.  A TERMINATOR HAS HIGHEST BINDING FACTOR, AND CAUSES THE  * 09000000
*   ENTIRE STACK TO DUMP.  THE TERMINATOR ITSELF WILL BE THE LAST OP- * 09300000
*   ERATOR RETURNED TO THE EDITOR.                                    * 09600000
*                                                                     * 09900000
*ENTRY POINTS--                                                       * 10200000
*        X1S01  =  POSTER01             FUNCTIONAL ENTRY POINT        * 10600000
*                                                                     * 11100000
*INPUT--                                                              * 11400000
*   INPUT IS AN OPERATOR IN REGISTER R10.                             * 11700000
*                                                                     * 12000000
*OUTPUT--                                                             * 12300000
*   NONE                                                              * 12600000
*                                                                     * 12900000
*EXTERNAL ROUTINES--NONE                                              * 13200000
*                                                                     * 13500000
*EXITS--                                                              * 13800000
*   NORMAL-                                                           * 13900000
*        B     D4(,R9)                  TAKE NORMAL EXIT              * 14000000
*   ERROR-                                                            * 14100000
*        BR    R9                       TAKE ERROR EXIT               * 14200000
*                                                                     * 14700000
*TABLES/WORK AREAS--                                                  * 15000000
*   BINDERS--A TABLE OF BINDING FACTORS OF THE OPERATORS.             * 15300000
*                                                                     * 15600000
*   STACK--A DYNAMIC OPERATOR STACK CONTAINING ALL OPERATORS NOT YET  * 15900000
*   RETURNED TO THE EDITOR.  PUSH DOWN.  TWO BYTES/ENTRY.             * 16200000
*                                                                     * 16500000
*   TEMP--THE LAST OPERATOR IN AND ITS BINDING FACTOR, UNTIL IT IS PUT* 16800000
*   IN THE STACK.                                                     * 17100000
*                                                                     * 17400000
*   POINTER--POINTS TO NEXT AVAILABLE STACK POSITION.                 * 17700000
*                                                                     * 18000000
*ATTRIBUTES--                                                         * 18300000
*   REFRESHABLE.  ALL DYNAMIC ELEMENTS ARE IN MODULE COMMON POINTED TO* 18600000
*   BY R7.                                                              18900000
*                                                                     * 19200000
*NOTES--                                                              * 19500000
*                                                                     * 19800000
         EJECT                                                          20100000
         COPY  JCOMMON                                                  20400000
         EJECT                                                          20700000
         COPY  JTMTXT                                                   21000000
         EJECT                                                          21300000
         COPY  EDSECT                                                   21600000
         EJECT                                                          21900000
STACKREC DSECT ,                        STACK ELEMENT SNAPSHOT          22200000
LAST     DS    0H                       LAST STACK ENTRY                22500000
LASTOP   DS    C                             OPERATOR                   22800000
LASTBIND DS    C                             BINDING FACTOR             23100000
NEXT     DS    0H                       NEXT STACK ENTRY                23400000
NEXTOP   DS    C                             OPERATOR                   23700000
NEXTBIND DS    C                             BINDING FACTOR             24000000
         SPACE                                                          24300000
TEXTPTR  DSECT                                                          24600000
TEXT     DS    C                        CURRENT TEXT POINTER            24900000
TEXTNEXT DS    C                        NEXT AVAILABLE TEXT POSITION    25200000
         EJECT                                                          25500000
         JCSECT (X1S00)                                                 25800000
         JMODID                                                         26100000
         SPACE 3                                                        26400000
*        REGISTERS                                                      26700000
         SPACE                                                          27000000
RLAST    EQU   R3                       POINTS TO LAST STACK ELEMENT    27300000
OP       EQU   R10                      INPUT OPERATOR                  27600000
FACTOR   EQU   R15                      BINDING FACTOR WORK REGISTER    27900000
MODCOMM  EQU   R2                       BASE FOR PHASE COMMON           28200000
         SPACE                                                          28500000
*        OTHER VALUES                                                   28800000
         SPACE                                                          29100000
ASTACK   EQU   ALAST                   ALAST IS IN EDSECT               29400000
D70      EQU   70                      LENGTH OF OPERATOR STACK - 2     29450000
         SPACE 3                                                        29700000
POSTER01 EQU   *                        INITIALIZATION ENTRY            30900000
         SPACE                                                          31200000
         JENTRY (X1S01=POSTER01)                                        31500000
         SPACE                                                          31800000
         USING POSTER01,R12                                             34800000
         L     RLAST,SVLAST             PICK UP STACK POINTER           38400000
         USING STACKREC,RLAST             AND DECLARE AS BASE.          38700000
         STC   OP,TEMPOP                SAVE THE OPERATOR               39000000
         SPACE                                                          39300000
POSTER12 EQU   *                                                        39600000
         SPACE                                                          39900000
         IC    FACTOR,BINDERS(OP)       LOAD REGISTER WITH BINDING     X40200000
                                          FACTOR CORRESPONDING TO INPUT 40500000
         STC   FACTOR,TEMPBIND          SAVE THE BINDING FACTOR         40800000
         SPACE                                                          41100000
POSTER14 EQU   *                                                        41400000
         SPACE                                                          41700000
         GOIF  TEMPOP,JTMLPAR,EQ=POSTER40   PUT IN STACK IF LEFT PAREN  42000000
         GOIF  TEMPBIND,BINDPLUS,EQ=POSTER40      PUT IN STACK IF UNARY 42300000
         GOIF  TEMPOP,JTMSCM,EQ=POSTER50 PUT IN TEXT IF START CHARACTERX42600000
                                          MODE.                         42900000
         GOIF  TEMPOP,JTMECM,EQ=POSTER50    LIKEWISE IF END CHARACTER  X43200000
                                            MODE                        43500000
POSTER20 GOIF  (RLAST),ALAST,LOW=POSTER40  GO ENTER NEW OP IF          X43800000
                                                  THE STACK IS EMPTY.   44100000
         GOIF  TEMPBIND,LASTBIND,LOW=POSTER40     ENTER THE NEW OP IF  X44400000
                                                  ITS BINDING FACTOR   X44700000
                                                  IS LOW.               45000000
         SPACE                                                          45300000
POSTER22 EQU   *                        ONE FROM STACK TO TEXT.         45600000
         SPACE                                                          45900000
         USING TEXTPTR,R4               TEXT BASED ON REG 4             46200000
         MVC   TEXT,LASTOP              MOVE OPERATOR TO TEXT           46500000
         LA    R4,TEXTNEXT              NEXT TEXT POSITION              46800000
         SH    RLAST,=H'2'              REMOVE ONE ELEMENT FROM STACK   47100000
         B     POSTER20                 LOOP THE LOOP                   47400000
         SPACE 3                                                        47700000
POSTER50 EQU   *                                                        48000000
         SPACE                                                          48300000
         MVC   TEXT,TEMPOP                                              48600000
         B     POSTER66                 GO TO EXIT SEQUENCE             49000000
         SPACE                                                          49500000
POSTER40 EQU   *                                                        49800000
         LA    OP,STACK+D70             GET PTR TO LAST STACK SLOT      49900000
         CR    OP,RLAST                 SEE IF STACK OVERFLOW OCCURS    49950000
         BNHR  R9                       TAKE ERROR EXIT OF SO           50000000
         MVC   NEXT,TEMP                MOVE OP AND BINDER TO STACK AND 50100000
         LA    RLAST,NEXT                 UPDATE POINTER.               50400000
         SPACE                                                          50700000
POSTER60 EQU   *                                                        51000000
         SPACE                                                          51300000
         GOIF  TEMPOP,JTMRPAR,EQ=POSTER70    IF RIGHT PAREN, REMOVE IT X51600000
                                             AND LEFT PAREN FROM STACK  51900000
POSTER64 GOIF  TEMPOP,JTMCOM,EQ=POSTER72     COMMA, BRANCH              52200000
         GOIF  TEMPOP,JTMPER,NE=POSTER90  EXIT IF LAST OP NOT PERIOD    52500000
         MVI   TEXT,JTMPER              ELSE PUT A PERIOD IN THE TEXT   52800000
POSTER65 SH    RLAST,=H'2'              REMOVE TERM FROM STACK          53100000
POSTER66 LA    R4,TEXTNEXT              ADJUST TEXT OUTPUT POINTER      53400000
         SPACE                                                          53700000
POSTER90 ST    RLAST,SVLAST             SAVE THE STACK POINTER          54000000
         SPACE                                                          54300000
POSTER99 B     D4(,R9)                  NO ERROR TO LOG, NORMAL EXIT    54600000
         SPACE                                                          54900000
POSTER70 SH    RLAST,=H'4'              REMOVE LPAREN AND RPAREN        55200000
         GOIF  LASTOP,JTMDIM,EQ=POSTER71     BRANCH IF DIMENSION        55500000
         GOIF  LASTOP,JTMDIM3,NE=POSTER90    EXIT IF NO DIMENSION       55800000
POSTER71 MVC   TEXT,LASTOP              MOVE DIMENSION TO TEXT          56100000
         B     POSTER65                 GO TO EXIT SEQUENCE             56700000
         SPACE                                                          57300000
POSTER72 SH    RLAST,=H'4'              REMOVE L AND RPAREN             57600000
         GOIF  LASTOP,JTMDIM,NE=POSTER74  BRANCH IF NOT DIMENSION       57900000
         MVI   TEXT,JTMDIM2             SYSLIST(N) TO TEXT              58200000
         LA    R4,TEXTNEXT              UPDATE TEXT POINTER             58500000
         MVI   LASTOP,JTMDIM3           CHANGE DIMENSION OP IN STACK    58800000
POSTER74 AH    RLAST,=H'2'              PUT LPAREN BACK IN STACK        59100000
         B     POSTER90                 AND EXIT.                       59400000
         DROP  R4                                                       59700000
         SPACE                                                          60000000
         EJECT                                                          60300000
*        CONSTANTS, TABLES, EQUATES                                     60600000
         SPACE                                                          60900000
*        BINDING FACTORS                                                61200000
         SPACE                                                          61500000
BINDDIM  EQU   0                        DIMENSION OPERATOR              61800000
BINDSTR  EQU   BINDDIM+1                STRING OPERATOR                 62100000
BINDDUP  EQU   BINDSTR+1                DUPLICATION OPERATOR            62400000
BINDPER  EQU   BINDDUP+1                PERIOD--CONCATENATOR            62700000
BINDPLUS EQU   BINDPER+1                UNARY PLUS                      63000000
BINDMIN  EQU   BINDPLUS                 UNARY MINUS                     63300000
BINDTAT  EQU   BINDPLUS                 TYPE ATTRIBUTE                  63600000
BINDLAT  EQU   BINDPLUS                 LENGTH ATTRIBUTE                63900000
BINDSAT  EQU   BINDPLUS                 SCALE ATTRIBUTE                 64200000
BINDIAT  EQU   BINDPLUS                 INTEGER ATTRIBUTE               64500000
BINDKAT  EQU   BINDPLUS                 COUNT ATTRIBUTE                 64800000
BINDNAT  EQU   BINDPLUS                 NUMBER ATTRIBUTE                65100000
BINDMULT EQU   BINDPLUS+1               MULTIPLY                        65400000
BINDDIV  EQU   BINDMULT                 DIVIDE                          65700000
BINDADD  EQU   BINDMULT+1               ADD                             66000000
BINDSUB  EQU   BINDADD                  SUBTRACT                        66300000
BINDGT   EQU   BINDADD+1                GREATER THAN                    66600000
BINDGE   EQU   BINDGT                   GREATER OR EQUAL                66900000
BINDLT   EQU   BINDGT                   LESS THAN                       67200000
BINDLE   EQU   BINDGT                   LESS OR EQUAL                   67500000
BINDEQ   EQU   BINDGT                   EQUAL                           67800000
BINDNE   EQU   BINDGT                   NOT EQUAL                       68100000
BINDNOT  EQU   BINDGT+1                 NOT                             68400000
BINDAND  EQU   BINDNOT+1                AND                             68700000
BINDOR   EQU   BINDAND+1                OR                              69000000
BINDRPAR EQU   BINDOR+1                 RIGHT PAREN                     69300000
BINDECM  EQU   BINDRPAR                 END CHARACTER MODE              69600000
BINDCOM  EQU   BINDRPAR                 COMMA                           69900000
BINDLPAR EQU   BINDRPAR+1               LEFT PAREN                      70200000
BINDSCM  EQU   BINDLPAR                 START CHARACTER MODE            70500000
BINDSTRM EQU   BINDLPAR+1               STATEMENT TERMINATOR            70900000
HIBIND   EQU   BINDSTRM                 HIGHEST BINDING FACTOR          71400000
         SPACE                                                          71700000
BINDERS  EQU   *                        NAME THE TABLE,                 72000000
         SPACE                                                          72300000
         BIND  DIM                      DIMENSION                       72600000
         BIND  STR                      SUB STRING                      72900000
         BIND  DUP                      DUPLICATION                     73200000
         BIND  PER                      CONCATENATION                   73500000
         BIND  PLUS                     UNARY PLUS                      73800000
         BIND  MIN                      UNARY MINUS                     74100000
         BIND  MULT                     MULTIPLY                        74400000
         BIND  DIV                      DIVIDE                          74700000
         BIND  ADD                      ADD                             75000000
         BIND  SUB                      SUBTRACT                        75300000
         BIND  GT                       GREATER THAN                    75600000
         BIND  GE                       GREATER OR EQUAL                75900000
         BIND  LT                       LESS THAN                       76200000
         BIND  LE                       LESS OR EQUAL                   76500000
         BIND  EQ                       EQUAL                           76800000
         BIND  NE                       NOT EQUAL                       77100000
         BIND  NOT                      NOT                             77400000
         BIND  AND                      AND                             77700000
         BIND  OR                       OR                              78000000
         BIND  RPAR                     RIGHT PAREN                     78300000
         BIND  ECM                      END CHARACTER MODE              78600000
         BIND  COM                      COMMA                           78900000
         BIND  LPAR                     LEFT PAREN                      79200000
         BIND  SCM                      START CHARACTER MODE            79500000
         BIND  STRM                     STATEMENT TERMINATOR            80100000
         BIND  TAT                      TYPE ATTRIBUTE                  80400000
         BIND  LAT                      LENGTH ATTRIBUTE                80700000
         BIND  SAT                      SCALE ATTRIBUTE                 81000000
         BIND  IAT                      INTEGER ATTRIBUTE               81300000
         BIND  KAT                      COUNT ATTRIBUTE                 81600000
         BIND  NAT                      NUMBER ATTRIBUTE                81900000
         SPACE                                                          81970000
         JPATCH X1S00,12C               X1S PATCH AREA                  82040000
         SPACE                                                          82110000
         END                                                            82200000
./  ADD  SSI=81850026,NAME=IFNX2A
         JHEAD 'DICTIONARY INTERLUDE PHASE',                           X00094000
               PHASEID=X2A,                                            X00100000
               LEVEL=10                                                 00150000
*FUNCTION/OPERATION-                                                  * 00200000
*   GENERALLY, THE DICTIONARY INTERLUDE PHASE BUILDS THE GENERATION   * 00250000
*   TIME DICTIONARIES REQUIRED IN THE GENERATE PHASE. SPECIFICALLY,   * 00300000
*   THIS PHASE -                                                      * 00350000
*        (1) BUILDS THE SEQUENCE SYMBOL REFERENCE DICTIONARY FOR      * 00400000
*            EACH MACRO DEFINITION AND FOR OPEN CODE FROM THE         * 00450000
*            SEQUENCE SYMBOL REFERENCES AND SEQUENCE SYMBOL DEFIN-    * 00500000
*            ITIONS IN THE TEXT SEGMENT DICTIONARY FILE FOR THE       * 00550000
*            RESPECTIVE MACRO DEFINITIONS AND OPEN CODE               * 00600000
*        (2) BUILDS THE ORDINARY SYMBOL REFERENCE DICTIONARY FROM     * 00650000
*            THE ORDINARY SYMBOL REFERENCES IN THE TEXT SEGMENT       * 00700000
*            DICTIONARY FILE AND THE ORDINARY SYMBOL DEFINITIONS      * 00750000
*            IN THE ORDINARY SYMBOL DEFINITION FILE                   * 00800000
*        (3) BUILDS THE GLOBAL VECTOR FOR EACH MACRO DEFINITION AND   * 00850000
*            FOR OPEN CODE FROM THE GLOBAL DEFINITIONS IN THE TEXT    * 00900000
*            SEGMENT DICTIONARY FILE FOR THE RESPECTIVE MACRO DEFIN-  * 00950000
*            ITIONS AND OPEN CODE                                     * 01000000
*        (4) BUILDS THE SKELETON DICTIONARY HEADER FOR EACH MACRO     * 01050000
*            DEFINITION AND FOR OPEN CODE FROM THE MACRO DEFINITION   * 01100000
*            DIRECTORY ENTRIES FOR THE RESPECTIVE MACRO DEFINITIONS   * 01150000
*            AND OPEN CODE                                            * 01200000
*        (5) BUILDS THE OPSYN TABLE FOR THE GENERATE PHASE FROM THE   * 01250000
*            OPSYN TABLE FOR THE EDIT PHASE                           * 01300000
*        (6) BUILDS THE MACRO DEFINITION VECTOR FOR THE GENERATE      * 01350000
*            PHASE                                                    * 01400000
*        (7) DETERMINES THE GLOBAL DICTIONARY ALLOCATION FOR THE      * 01450000
*            GENERATE PHASE FROM THE GLOBAL DEFINITIONS IN THE        * 01500000
*            TEXT SEGMENT DICTIONARY FILE                             * 01550000
*                                                                     * 01600000
*ENTRY POINT-                                                         * 01650000
*        INTRENTR                                                     * 01700000
*                                                                     * 01750000
*INPUT-                                                               * 01800000
*   FILE 2 - TEXT SEGMENT DICTIONARY FILE FOR EACH MACRO DEFINITION   * 01850000
*          - TEXT SEGMENT DICTIONARY FILE FOR OPEN CODE               * 01900000
*   FILE 3 - ORDINARY SYMBOL DEFINITION FILE                          * 01950000
*          - MACRO DEFINITION DIRECTORY/OPSYN TABLE                   * 02000000
*                                                                     * 02050000
*OUTPUT-                                                              * 02100000
*   FILE 1 - SKELETON DICTIONARY FOR EACH MACRO DEFINITION            * 02150000
*          - SKELETON DICTIONARY FOR OPEN CODE                        * 02200000
*          - ERROR RECORDS ORIGINATING IN THE INTERLUDE PHASE         * 02250000
*   FILE 2 - ORDINARY SYMBOL REFERENCE DICTIONARY                     * 02300000
*          - MACRO DEFINITION VECTOR                                  * 02350000
*          - OPSYN TABLE                                              * 02400000
*                                                                     * 02450000
*EXTERNAL ROUTINES-                                                   * 02500000
*                                                                     * 02550000
*                                                                     * 02600000
*                                                                     * 02650000
*EXITS,NORMAL-                                                        * 02700000
*   RETURN TO THE DRIVER WITH THE COMPLETION CODE SET TO A ZERO       * 02750000
*   VALUE.                                                            * 02800000
*                                                                     * 02850000
*EXITS,ERROR-                                                         * 02900000
*   RETURN TO THE DRIVER WITH THE COMPLETION CODE SET TO A NON-ZERO   * 02950000
*   VALUE, THE SPECIFIC VALUE INDICATING THE ACTION TO BE TAKEN BY    * 03000000
*   THE DRIVER.                                                       * 03050000
*                                                                     * 03100000
*TABLES/WORK AREAS-                                                   * 03150000
*   MACRO DEFINITION DIRECTORY - A CHAINED TABLE CONTAINING AN        * 03200000
*        ENTRY FOR EACH UNIQUE MACRO NAME ENCOUNTERED IN THE TEXT     * 03250000
*        OF ALL MACRO DEFINITIONS AND OPEN CODE, AND AN ENTRY FOR     * 03300000
*        OPEN CODE (MERGED WITH THE OPSYN TABLE).                     * 03350000
*   OPSYN TABLE - A CHAINED TABLE CONTAINING AN ENTRY FOR EACH        * 03400000
*        UNIQUE MNEMONIC AFFECTED BY AN OPSYN STATEMENT (MERGED       * 03450000
*        WITH THE MACRO DEFINITION DIRECTORY).                        * 03500000
*   SEQUENCE SYMBOL DEFINITION TABLE - A CHAINED TABLE CONTAINING     * 03550000
*        AN ENTRY FOR EACH UNIQUE SEQUENCE SYMBOL DEFINED IN A        * 03600000
*        MACRO DEFINITION OR OPEN CODE.                               * 03650000
*   ORDINARY SYMBOL REFERENCE TABLE - A CHAINED TABLE CONTAINING AN   * 03700000
*        ENTRY FOR EACH REFERENCE TO AN ORDINARY SYMBOL ENCOUNTERED   * 03750000
*        IN AN ATTRIBUTE REFERENCE OR IN A MACRO INSTRUCTION          * 03800000
*        OPERAND (MERGED WITH THE GLOBAL DIRECTORY).                  * 03850000
*   GLOBAL DIRECTORY - A CHAINED TABLE CONTAINING AN ENTRY FOR        * 03900000
*        EACH SYSTEM GLOBAL VARIABLE AND EACH UNIQUE VARIABLE SYMBOL  * 03950000
*        ENCOUNTERED ON A GBLX STATEMENT IN THE TEXT OF ALL MACRO     * 04000000
*        DEFINITIONS AND OPEN CODE (MERGED WITH THE ORDINARY          * 04050000
*        SYMBOL REFERENCE TABLE).                                     * 04100000
*   MACRO DEFINITION VECTOR - A SEQUENTIAL TABLE CONTAINING AN        * 04150000
*        ENTRY FOR EACH UNIQUE MACRO NAME ENCOUNTERED IN THE TEXT     * 04200000
*        OF ALL MACRO DEFINITIONS AND OPEN CODE, AND AN ENTRY FOR     * 04250000
*        OPEN CODE.                                                   * 04300000
*   ORDINARY SYMBOL REFERENCE DICTIONARY - A SEQUENTIAL TABLE         * 04350000
*        CONTAINING AN ENTRY FOR EACH ORDINARY SYMBOL ENCOUNTERED     * 04400000
*        IN AN ATTRIBUTE REFERENCE OR IN THE OPERAND OF A MACRO       * 04450000
*        INSTRUCTION.                                                 * 04500000
*   OPSYN TABLE - A SEQUENTIAL TABLE CONTAINING AN ENTRY FOR EACH     * 04550000
*        UNIQUE MNEMONIC AFFECTED BY AN OPSYN STATEMENT.              * 04600000
*   SKELETON DICTIONARY AREA - THE AREA IN WHICH THE SKELETON DICT-   * 04650000
*        IONARY FOR EACH MACRO DEFINITION AND OPEN CODE IS BUILT.     * 04700000
*        EACH SKELETON DICTIONARY CONSISTS OF A SKELETON DICTION-     * 04750000
*        ARY HEADER, A GLOBAL VECTOR, AND A SEQUENCE SYMBOL REFER-    * 04800000
*        ENCE DICTIONARY. THE SIZE OF THE SKELETON DICTIONARY AREA    * 04850000
*        VARIES ACCORDING TO THE REQUIREMENTS FOR THE SKELETON        * 04900000
*        DICTIONARY FOR EACH TEXT SEGMENT.                            * 04950000
*                                                                     * 05000000
*ATTRIBUTES-                                                          * 05050000
*   REFRESHABLE                                                       * 05100000
*                                                                     * 05150000
*NOTES-                                                               * 05200000
*                                                                     * 05250000
*                                                                     * 05300000
*                                                                     * 05350000
         EJECT                                                          05400000
         COPY  JCOMMON                                                  05450000
         EJECT                                                          05500000
INTRCOM  DSECT                                                          05550000
RECADDR  DS    F                        PTR TO LAST RECORD READ         05590000
COMSTRT  DS    F                        PTR TO PHASE COMMON AREA        05630000
MDDSTRT  DS    F                        PTR TO START OF MACRO DEF DIRCT 05670000
FREESTRT DS    F                        PTR TO LOW END OF WORK AREA     05710000
FREEEND  DS    F                        PTR TO HIGH END OF WORK AREA    05750000
GDSTRT   DS    F                        PTR TO START OF GBL DIRECTORY   05790000
OSRTSTRT EQU   GDSTRT                   PTR TO START OF ORD SYMB REF TB 05830000
GDEND    DS    F                        PTR TO CURRENT END OF GBL DIR   05870000
OSRTEND  EQU   GDEND                    PTR TO CURRENT END OF ORD SYMB  05910000
OSRDSTRT EQU   OSRTEND                  PTR TO START OF ORD SYMB REF DI 05950000
MDVSTRT  DS    F                        PTR TO START OF MACRO DEF VECTR 05990000
MDDND    DS    F                        PTR TO END OF MACRO DEF DIRECT  06030000
SSDTSTRT DS    F                        PTR TO START OF SEQ SYMB DEF TB 06070000
SSDTEND  DS    F                        PTR TO CURRENT END OF SEQ SYMB  06110000
SKDCSTRT DS    F                        PTR TO START OF SKEL DICT       06150000
GDALLOC  DS    F                        CURRENT SIZE OF GLOBAL DICTIONY 06190000
OREFCNT  DS    F                        COUNT OF ORD SYMB ATTR REFERS   06230000
MDVLNTH  DS    F                        LENGTH OF MACRO DEFIN VECTOR    06270000
OPSCHAIN DS    F                        MASTER LINK IN OPSYN CHAIN      06310000
ENDCOL   DS    F                        PTR TO END OF OPERAND           06350000
VECTSAVE EQU   ENDCOL                   TEMP FULLWORD WORK AREA         06390000
ERRBLK   DS    F                        PTR TO ERROR RECORD BUFFER      06430000
ERBLKPTR DS    F                        PTR TO NEXT SLOT IN ERROR BUF   06470000
LNGSK    DS    F                        LENGTH OF SKELETON DICTIONARY   06510000
GBLSK    DS    F                        PTR TO START OF GLOBAL VECTOR   06550000
SEQSK    DS    F                        PTR TO START OF SEQ,SYM REF DIC 06590000
ERRLNKSV DS    F                        SAVE AREA ERROR RTN LINK REG    06630000
HIBYTE0  DS    F                        FULL WORD WORK AREA             06670000
SHIFTAMT EQU   HIBYTE0+D3               ONE BYTE WORK AREA              06710000
*                                                                       07000000
* THIS IS THE ASCAN WORK AREA.                                          07050000
*                                                                       07100000
AWORK    DS    0F                                                       07150000
AFLAGS   DSW   ADCON1,                  ADDRESS CONSTANT (A,Y,V,S)     X07200000
               ADCON2,                  ADDRESS CONSTANT (Q)           X07250000
               CHCON,                   CHARACTER CONSTANT (C)         X07300000
               BXCON,                   HEX. OR BINARY CONSTANT (X,B)  X07350000
               DCCON,                   DECIMAL CONSTANT (P,Z)         X07400000
               FLCON,                   FLOATING-PT CONSTANT (D,E,L)   X07450000
               FXCON                    FIXED-PT CONSTANT (F,H)         07500000
ATYPEAT  DS    XL1                      TYPE ATTRIBUTE                  07550000
ALENGTH  DS    XL2                      LENGTH ATTRIBUTE                07600000
ASCALE   DS    XL2                      SCALE ATTRIBUTE                 07650000
ALENMAX  DS    XL2                      MAXIMUM LENGTH VALUE            07700000
ASCAMAX  DS    XL2                      MAXIMUM SCALE VALUE             07750000
ATYPALT  DS    XL1                      ALTERNATE TYPE ATTRIBUTE        07800000
         ORG   ATYPALT                  ORIGIN FOR ALTERNATIVE BYTE     07850000
ARFACT   DS    XL1                      ROUNDING FACTOR                 07900000
ASFACT   DS    XL1                      SHIFTING FACTOR                 07950000
ACHARLMT DS    XL1                      HIGH CHARACTER LIMIT            08000000
*                                                                       08040000
SWITCHA  DSW   ENDSW,                   END OF EXTRN OPERAND HIT       X08080000
               FNDFLG,                  MATHING TABLE ENTRY FOUND      X08120000
               QUOTESW,                 QUOTE MODE ENTERED             X08160000
               TRANSW,                  TRANSLATE SDT VALUE            X08190000
               ,,,                                                      08220000
SWITCHB  DSW   DSSW,                    DS (NOT DC) STATEMENT          X08260000
               EXLENFLG,                EXPLICIT LENGTH MODIFIER USED  X08300000
               NSCALSW,                 NEGATIVE SCALE MODIFIER USED   X08340000
               SCALEFLG,                SCALING DECIMAL POINT FOUND    X08380000
               SIGNFLG,                 CONSTANT SIGN PROCESSED        X08420000
               DEFLTL,                  DEFAULT LENGTH MODIFIER USED   X08460000
               ,                                                        08550000
DELIMIT  DS    X                        OPERAND DELIMITER SCANNED FOR   08590000
PIOPARMB DS    F                        INITIAL I/O LENGTH              08630000
PIOPARMA DS    F                        I/O AREA ADDRESS                08670000
PIOPARMC DS    H                        I/O AREA LENGTH                 08710000
SAVE3456 DS    5F                       REGISTER SAVE AREA              08750000
FSWITCH  DS    X                        FIRST-WRITE SWITCH              08790000
ERRHDR   DS    CL12                     ERROR RECORD HEADER AREA        08830000
ERRNAME  DS    CL8                      ERROR RECORD FIRST NAME AREA    08870000
ERROTHR  DS    CL16                     ERROR RECORD 2ND, 3RD NAMES     08910000
         DS    4F                       PATCH AREA                      08950000
ENDCOM   DS    0D                                                       09050000
         EJECT                                                          09100000
*                                                                       09150000
* THIS DSECT MAPS THE MACRO DEFINITION DIRECTORY ENTRY.                 09200000
*                                                                       09250000
MDDNTRY  DSECT                                                          09300000
MCHAIN   DS    XL3                      CHAIN PTR         3 BYTES       09350000
MFLAGS   DSW   TSEDIT,                  ON-SEGMENT EDITED              X09400000
               OCTS,                    ON-OPEN CODE ENTRY             X09450000
               FLUSH,,,                 ON-MACRO FLUSHED               X09500000
               MNL1,MNL2,MNL3           MACRO NAME LENGTH               09550000
MSYMBL   DS    XL8                      SYMBOL (PADDED)   8 BYTES       09600000
MVECTR   DS    XL3                      VECTOR POINTER    3 BYTES       09650000
MTXTNP   DS    XL8                      TEXT FILE N/P     8 BYTES       09700000
MTSDNP   DS    XL8                      DICT FILE N/P     8 BYTES       09750000
MGBLSZ   DS    XL3                      GBL VCTR SIZE     3 BYTES       09800000
MSEQSZ   DS    XL3                      SEQ SYM DICT SIZE 3 BYTES       09850000
MLCLSZ   DS    XL3                      LCL DICT SIZE     3 BYTES       09900000
MDDEND   EQU   *                                                        09950000
*                                                                       10000000
* THIS DSECT MAPS THE OPSYN TABLE ENTRY, AS PASSED FROM THE EDIT        10050000
*            PHASE.                                                     10100000
*                                                                       10150000
OPSYNTRY DSECT                                                          10200000
OPSYNCH  DS    XL3                      CHAIN POINTER     3 BYTES       10250000
OPSYNFLG DSW   ,,,,                     SPACE FOR OPCODE FLAGS         X10280000
               OMAC,                    OPSYN MACRO ENTRY              X10310000
               ODEL                     DELETED                         10340000
OPSYNATT DS    XL3                      ATTRIBUTES                      10370000
ONAMEL   DS    XL1                      NAME LENGTH                     10400000
ONAME    DS    XL8                      NAME                            10430000
OPSYND   EQU   *                                                        10500000
*                                                                       10550000
* THIS DSECT MAPS THE OPSYN TABLE ENTRY, AS PASSED TO THE GENERATE      10600000
*            PHASE.                                                     10650000
*                                                                       10700000
OPSTBL   DSECT                                                          10750000
OPSFLGS  DS    XL1                      FLAGS                           10800000
OPSTATTS DS    XL3                      ATTRIBUTES                      10850000
OPSTNL   DS    XL1                      NAME LENGTH                     10900000
OPSTNAM  DS    XL8                      NAME                            10950000
OPSTND   EQU   *                                                        11000000
*                                                                       11050000
* THIS DSECT MAPS THE MACRO DEFINITION VECTOR ENTRY.                    11100000
*                                                                       11150000
MDVNTRY  DSECT                                                          11200000
MNPTXT   DS    XL8                      TEXT FILE N/P     8 BYTES       11250000
MNPSD    DS    XL8                      SKEL DICTION N/P  8 BYTES       11300000
MSDL     DS    XL3                      SKEL DICT LENGTH  3 BYTES       11350000
MDVEND   EQU   *                                                        11400000
*                                                                       11450000
* THIS DSECT MAPS THE HEADER FOR THE SKELETON DICTIONARY.               11500000
*                                                                       11550000
SKDCTHDR DSECT                                                          11600000
SKSRDPT  DS    XL3                      DISPL SEQ SYM DIC 3 BYTES       11650000
SKLDADR  DS    XL3                      LCL DICT PTR      3 BYTES       11700000
SKLDLNG  DS    XL3                      LCL DICT LENGTH   3 BYTES       11750000
SKMPADR  DS    XL3                      MACRO PARAM PTR   3 BYTES       11800000
SKKVADR  DS    XL3                      KEYWD VECTR PTR   3 BYTES       11850000
SKADNLD  DS    XL4                      DICT ADR NXT LVL  4 BYTES       11900000
SKNPNLT  DS    XL8                      TEXT N/P NXT LVL  8 BYTES       11950000
SKACTRV  DS    XL4                      ACTR VALUE        4 BYTES       12000000
SKNOFSLS DS    XL2                      N'&SYSLIST        2 BYTES       12050000
SKHDREND EQU   *                                                        12100000
*                                                                       12150000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE TEXT SEGMENT         12200000
*            DICTIONARY FILE FOR A SEQUENCE SYMBOL DEFINITION.          12250000
*                                                                       12300000
SSDEF    DSECT                                                          12350000
SDEFRL   DS    XL2                      RECORD LENGTH     2 BYTES       12400000
SDEFRT   DS    X'04'                    RECORD TYPE       1 BYTE        12450000
SDEFNP   DS    XL8                      NOTE/POINT ADDR   8 BYTES       12500000
SDEFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        12550000
SDEFSS   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       12600000
*                                                                       12650000
* THIS DSECT MAPS THE SEQUENCE SYMBOL DEFINITION TABLE ENTRY.           12700000
*                                                                       12750000
SSDTNTRY DSECT                                                          12800000
SSDTCP   DS    XL3                      CHAIN POINTER     3 BYTES       12850000
SSDTNP   DS    XL8                      NOTE/POINT ADDR   8 BYTES       12900000
SSDTSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        12950000
SSDTSY   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       13000000
*                                                                       13050000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE TEXT SEGMENT         13100000
*            DICTIONARY FILE FOR A SEQUENCE SYMBOL REFERENCE.           13150000
*                                                                       13200000
SSREF    DSECT                                                          13250000
SREFRL   DS    XL2                      RECORD LENGTH     2 BYTES       13300000
SREFRT   DS    X'08'                    RECORD TYPE       1 BYTE        13350000
SREFDP   DS    XL3                      DICTIONARY PTR    3 BYTES       13400000
SREFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        13450000
SREFSS   EQU   *                        SEQUENCE SYMBOL 2-8 BYTES       13500000
*                                                                       13550000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE TEXT SEGMENT         13600000
*            DICTIONARY FILE FOR A GLOBAL DEFINITION.                   13650000
*                                                                       13700000
GBLDEFN  DSECT                                                          13750000
GDEFRL   DS    XL2                      RECORD LENGTH     2 BYTES       13800000
GDEFRT   DS    X'00'                    RECORD TYPE       1 BYTE        13850000
GDEFF    DS    X                        FLAGS             1 BYTE        13900000
GDEFSL   DS    X                        SYMBOL LENGTH     1 BYTE        13950000
GDEFVS   EQU   *                        VARIABLE SYMBOL 2-8 BYTES       14000000
         ORG   GBLDEFN                  ORIGIN ZERO                     14050000
GDEFTF   DS    X                        TEXT FLAG VALUE   1 BYTE        14100000
GDEFVP   DS    XL3                      VECTOR POINTER    3 BYTES       14150000
GDEFD    DS    XL2                      DIMENSION         2 BYTES       14200000
*                                                                       14250000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE TEXT SEGMENT         14300000
*            DICTIONARY FILE FOR AN ORDINARY SYMBOL REFERENCE.          14350000
*                                                                       14400000
OSREF    DSECT                                                          14450000
OREFRL   DS    XL2                      RECORD LENGTH     2 BYTES       14500000
OREFRT   DS    X'0C'                    RECORD TYPE       1 BYTE        14550000
OREFDP   DS    XL3                      DICTIONARY PTR    3 BYTES       14600000
OREFSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        14650000
OREFOS   EQU   *                        ORDINARY SYMBOL 1-8 BYTES       14700000
*                                                                       14750000
* THIS DSECT MAPS THE END-OF-SEGMENT RECORD READ FROM THE TEXT          14800000
*            SEGMENT DICTIONARY FILE.                                   14850000
*                                                                       14900000
ENDSEG   DSECT                                                          14950000
ESEGRL   DS    XL2                      RECORD LENGTH     2 BYTES       15000000
ESEGRT   DS    X'10'                    RECORD TYPE       1 BYTE        15050000
*                                                                       15100000
* THIS DSECT MAPS THE END-OF-FILE RECORD READ FROM THE TEXT SEGMENT     15150000
*            DICTIONARY FILE AND THE ORDINARY SYMBOL DEFINITION FILE.   15200000
*                                                                       15250000
ENDFIL   DSECT                                                          15300000
EFILRL   DS    XL2                      RECORD LENGTH     2 BYTES       15350000
EFILRT   DS    X'FF'                    RECORD TYPE       1 BYTE        15400000
*                                                                       15450000
* THIS DSECT MAPS THE ORDINARY SYMBOL REFERENCE DICTIONARY ENTRY.       15500000
*                                                                       15550000
OSRDNTRY DSECT                                                          15600000
TATTRIB  DS    X                        TYPE ATTRIBUTE    1 BYTE        15650000
LATTRIB  DS    XL2                      LENGTH ATTRIBUTE  2 BYTES       15700000
SATTRIB  DS    XL2                      SCALE ATTRIBUTE   2 BYTES       15750000
ATTRIB   DSW   TDEFALT,                 TYPE ATTRIB IS DEFAULT VALUE   X15760000
               LDEFALT,                 LENGTH ATTRIB IS DEFAULT VALUE X15770000
               SDEFALT,                 SCALE ATTRIB IS DEFAULT VALUE  X15780000
               UDEFALT                  UNDEFINED SYMBOL ATTRIB REFED   15790000
*                                                                       15800000
* THIS DSECT MAPS THE GLOBAL DIRECTORY ENTRY.                           15850000
*                                                                       15900000
GDNTRY   DSECT                                                          15950000
GDCP     DS    XL3                      CHAIN POINTER     3 BYTES       16000000
GDFL     DSW   GTYP1,GTYP2,GPTYP,GSNS,GSLS,GDIM,GSTP1,GSTP2             16050000
GDSL     DS    X                        SYMBOL LENGTH     1 BYTE        16100000
GDSYM    EQU   *                        VARIABLE SYMBOL 2-8 BYTES       16150000
         ORG   GDNTRY                   ORIGIN ZERO                     16200000
GDTFV    DS    X                        TEXT FLAG VALUE   1 BYTE        16250000
GDDP     DS    XL3                      G.T. DICT. PTR    3 BYTES       16300000
GDDM     DS    XL2                      DIMENSION         2 BYTES       16350000
*                                                                       16400000
* THIS DSECT MAPS THE ORDINARY SYMBOL REFERENCE TABLE ENTRY.            16450000
*                                                                       16500000
OSRTNTRY DSECT                                                          16550000
OSRTCP   DS    XL3                      CHAIN POINTER     3 BYTES       16600000
OSRTDP   DS    XL3                      DICTIONARY PTR    3 BYTES       16650000
OSRTSL   DS    XL1                      SYMBOL LENGTH     1 BYTE        16700000
OSRTOS   EQU   *                        ORDINARY SYMBOL 1-8 BYTES       16750000
*                                                                       16800000
* THIS DSECT MAPS THE LOGICAL RECORD READ FROM THE ORDINARY SYMBOL      16850000
*            DEFINITION FILE.                                           16900000
*                                                                       16950000
         COPY  JTEXT                                                    17000000
         COPY JERRCD                                                    17050000
         COPY  JERMSGCD                                                 17100000
         EJECT                                                          17150000
SAVMDDPT EQU   JDPASS                   SAVE AREA, MDD ADDRESS          17190000
SAVMDDLN EQU   JDPASS+D8                SAVE AREA, MDD LENGTH           17230000
SAVMDDCN EQU   JDPASS+D12               SAVE AREA, MDD ENTRY CHAIN      17270000
SAVMDDCT EQU   JDPASS+D16               SAVE AREA, MDD ENTRY COUNT      17310000
SAVOPSCN EQU   JDPASS+D20               SAVE AREA, OPSYN ENTRY CHAIN    17350000
LNGTHREG EQU   R12                      SYMBOL LENGTH REGISTER          17390000
WORK2    EQU   R15                      SCRATCH REGISTER                17430000
WORK3    EQU   R10                      SCRATCH REGISTER                17470000
MDDPTR   EQU   R3                       PTR TO MDD ENTRY BEING PROCD    17510000
SKDCTPTR EQU   R4                       PTR TO START OF SKELETON DICT   17550000
BRTBLPTR EQU   R5                       PTR TO BRANCH TABLE IN USE      17590000
SSDTBASE EQU   R6                       PTR TO START OF SEQ SYM DEF TBL 17630000
GDBASE   EQU   R6                       PTR TO START OF GBL DEF DIRECT  17670000
SSDTPTR  EQU   R7                       PTR TO SEQ SYM DEF TBL ENTRY    17710000
RTNLNK   EQU   R9                       RETURN LINKAGE REGISTER         17750000
PTR      EQU   R10                      PTR TO START OF SYMBOL FOR HASH 17790000
RCDPTR   EQU   R11                      PTR REGISTER, INPUT RCD BASE    17830000
WORK1    EQU   R14                      SCRATCH REGISTER                17870000
PAIRE    EQU   R0                       EVEN REGISTER OF PAIR           17910000
PAIRO    EQU   R1                       ODD REGISTER OF PAIR            17950000
EO1      EQU   R0                       EVEN REGISTER OF PAIR           17990000
EO2      EQU   R1                       ODD REGISTER OF PAIR            18030000
HASHSS   EQU   R1                       HASH VALUE FOR SEQ SYMBOL       18070000
HASHGS   EQU   R1                       HASH VALUE FOR GBL VARIABLE     18110000
D36      EQU   36                       LENGTH OF INTERLUDE ERROR RCD   18120000
D44      EQU   44                       DISPLACEMENT                    18130000
D48      EQU   48                       DISPLACEMENT                    18140000
SAVMDVNP EQU   JDPASS                   SAVE AREA, MDV ADDRESS          18150000
SAVMDVLN EQU   JDPASS+D8                SAVE AREA, MDV LENGTH           18190000
SAVGDLNT EQU   JDPASS+D12               SAVE AREA, GLOBAL DICT ALLOC    18230000
SAVOSDNP EQU   JDPASS+D16               SAVE AREA, OSRD ADDRESS         18270000
SAVOSDLN EQU   JDPASS+D24               SAVE AREA, OSRD LENGTH          18310000
SAVOVFPT EQU   JDPASS+D28               SAVE AREA, END OF FILE 1 ADDR   18350000
SAVOPTNP EQU   JDPASS+D36               SAVE AREA, OPSYN TABLE ADDRESS  18390000
SAVOPTLN EQU   JDPASS+D44               SAVE AREA, OPSYN TABLE LENGTH   18430000
SAVERRNP EQU   JDPASS+D48               SAVE AREA, ERROR BLOCK ADDRESS  18470000
GDEL     EQU   19                       MAX LENGTH,GBL DIRECT ENTRY     18510000
OSRTBASE EQU   R6                       PTR TO START OF ORD SYMB REF TB 18550000
HASHOS   EQU   R1                       HASH VALUE FOR ORD SYMBOL       18590000
OSRDPTR  EQU   R4                       PTR TO ORD SYM REF TBL ENTRY    18630000
REFCNT   EQU   R5                       COUNT OR ORD SYM REF TBL ENTRYS 18670000
ENDPTR   EQU   R0                       PTR TO END OF OPERAND           18750000
PARENCT  EQU   R0                       PARENTHESIS LEVEL COUNT         18790000
INPTR    EQU   R7                       PTR TO OPERAND BEING SCANNED    18830000
RX       EQU   R1                       SCRATCH REGISTER                18870000
RY       EQU   R5                       SCRATCH REGISTER                18910000
WORK5    EQU   R12                      SCRATCH REGISTER                18950000
RZ       EQU   R12                      SCRATCH REGISTER                18990000
ATYPE    EQU   JA                       TYPE ATTRIBUTE, A-CON           19030000
BTYPE    EQU   JB                       TYPE ATTRIBUTE, B-CON           19070000
CTYPE    EQU   JC                       TYPE ATTRIBUTE, C-CON           19110000
DTYPE    EQU   JD                       TYPE ATTRIBUTE, D-CON           19150000
WORK4    EQU   R1                       SCRATCH REGISTER                19190000
ETYPE    EQU   JE                       TYPE ATTRIBUTE, E-CON           19230000
FTYPE    EQU   JF                       TYPE ATTRIBUTE, F-CON           19270000
GTYPE    EQU   JG                       TYPE ATTRIBUTE, G-CON           19310000
HTYPE    EQU   JH                       TYPE ATTRIBUTE, H-CON           19350000
KTYPE    EQU   JK                       TYPE ATTRIBUTE, K-CON           19390000
LTYPE    EQU   JL                       TYPE ATTRIBUTE, L-CON           19430000
PTYPE    EQU   JP                       TYPE ATTRIBUTE, P-CON           19470000
QTYPE    EQU   JQ                       TYPE ATTRIBUTE, Q-CON           19510000
RTYPE    EQU   JR                       TYPE ATTRIBUTE, R-CON           19550000
STYPE    EQU   JS                       TYPE ATTRIBUTE, S-CON           19590000
VTYPE    EQU   JV                       TYPE ATTRIBUTE, V-CON           19630000
XTYPE    EQU   JX                       TYPE ATTRIBUTE, X-CON           19670000
YTYPE    EQU   JY                       TYPE ATTRIBUTE, Y-CON           19710000
ZTYPE    EQU   JZ                       TYPE ATTRIBUTE, Z-CON           19750000
OPSTLNT  EQU   OPSTND-OPSTBL            OPSYN ENTRY LENGTH              19790000
MINRECSZ EQU   18                       MINIMUM I/O LENGTH              19830000
VALUE    EQU   R0                       SDT VALUE REGISTER              19870000
TYPE     EQU   R15                      SDT TYPE REGISTER               19910000
COUNT    EQU   R14                      SDT CHARACTER COUNT REGISTER    19950000
D384     EQU   384                      LENGTH OF GBL DIRECT HASH TABLE 20070000
D256     EQU   256                      MOVE LIMIT                      20110000
D192     EQU   192                      LENGTH OF SSDT HASH TABLE       20150000
D255     EQU   255                      MOVE LIMIT LESS ONE             20190000
         EJECT                                                          20750000
         JCSECT (X2A00)                                                 20800000
* VS1 RELEASE 3 CHANGES                                                 20810001
*C886000,890500,912500,927500,935500                            OX00408 20820001
*C593000                                                       @AX14177 20830006
*A599100-599160                                                @AX14177 20840006
*C214500                                                       @AZ26254 20845000
*A779100-779170                                                @AY19671 20847000
         JMODID                                                         20850000
*INTERLUDE INITIALIZATION ROUTINE - THIS ROUTINE PERFORMS ALL THE     * 20900000
*   ONE-TIME INITIALIZATION FUNCTIONS FOR THE PHASE. ITS FUNCTION     * 20950000
*   IS-  (1) TO GET AND ALLOCATE THE SPACE REQUIRED FOR THE VARIOUS   * 21000000
*            COMMON, TABLE, AND WORK AREAS USED BY THE PHASE          * 21050000
*        (2) TO INITIALIZE COMMON FOR THE PHASE                       * 21100000
*        (3) TO FETCH THE MACRO DEFINITION DIRECTORY                  * 21150000
*        (4) TO INITIALIZE THE PERMANENT DICTIONARIES WITHIN THE      * 21200000
*            WORK AREA.                                               * 21250000
*                                                                     * 21300000
INTRENTR JSAVE BASE=YES                                                 21350000
         JENTRY (X2A01=INTRENTR)                                        21400000
         L     R11,=F'1310720'          SET MAX SPACE TO 10M   @AZ26254 21450000
         JGETCORE MINDBL=1625,MAXDBL=(R11) GET FREE SPACE               21500000
         AR    R11,R10                  DEVELOP END-OF-SPACE PTR        21550000
         LA    WORK1,(((ENDCOM-INTRCOM+D7)/D8)*D8) COMPUTE COMMON LEN   21600000
         SR    R11,WORK1                DEVELOP COMMON ADDRESS          21650000
         LR    R2,R11                   SET UP AS COMMON PTR            21700000
         USING INTRCOM,R2                                               21750000
         XC    INTRCOM(ENDCOM-INTRCOM),INTRCOM INITIALIZE ALL COMMON    21800000
         ST    R11,COMSTRT              SAVE IN COMMON ITSELF           21850000
         S     R11,=F'190'              ALLOW FOR ERROR RECORD BUFFER   21900000
         ST    R11,ERRBLK               SAVE PTR TO STRT OF BUFFER      21950000
         XC    D0(L'JNOTEVAL,R11),D0(R11) SET FIRST CHAIN LINK TO 0     22000000
         LA    WORK1,D8(,R11)           DEVELOP PTR WITHIN ERROR BUFF   22050000
         ST    WORK1,ERBLKPTR           AND SAVE FOR ERLOGER            22100000
         ST    R11,MDDND                MAKE IT END-OF-MDD ADDR ALSO    22150000
         ST    R10,FREESTRT             SAVE START-OF-SPACE PTR         22200000
         ST    R10,GDSTRT               MAKE IT GBL DIRECTORY BASE      22250000
         MVI   D0(R10),BITFF-BITFF      INSERT ZERO IN HASH TABLE       22300000
         MVC   D1(D256,R10),D0(R10)     PROPAGATE FIRST 256 BYTES       22350000
         LA    R10,D256(,R10)           BUMP THE POINTER AND            22400000
         MVC   D1(D384-D256,R10),D0(R10) PROPAGATE THRU REST OF TABLE   22450000
         LA    R10,D384-D256(,R10)      BUMP THE POINTER PAST HASH TBL  22500000
         ST    R10,GDEND                SAVE PTR TO GBL ENTRY SPACE     22550000
         MVC   PIOPARMB,SAVMDDLN        PICK UP MDD LENGTH FROM COMMON  22600000
         S     R11,PIOPARMB             DEVELOP MDD ADDRESS             22650000
         ST    R11,MDDSTRT              SAVE MDD PTR IN COMMON          22700000
         ST    R11,PIOPARMA             SET IT UP ALSO FOR MDD READ     22750000
         MVC   JFWORD1,SAVMDDCT         PICK UP MDD ENTRY COUNT         22800000
         L     EO2,JFWORD1              GET IT FOR MDV LENGTH CALC      22850000
         MH    EO2,=Y(MDVEND-MDVNTRY)   MULTIPLY BY MDV ENTRY LENGTH    22900000
         ST    EO2,MDVLNTH              SAVE LENGTH OF MDV FOR WRITE    22950000
         SR    R11,EO2                  DEVELOP MDV ADDRESS             23000000
         ST    R11,MDVSTRT              SAVE MDV PTR IN COMMON          23050000
         BCTR  R11,D0                   GET END-OF-FREE-SPACE PTR       23100000
         ST    R11,FREEEND              AND SAVE IT IN COMMON           23150000
         JPOINT FILE=FILE3,ADDR=SAVMDDPT,NEXT=READ POINT TO MDD         23200000
         LH    R5,JMAXRL3               SET UP MAXIMUM RECORD THIS FILE 23250000
         LA    R6,FILE3                 SET UP FILE POINTER             23300000
         BAL   R7,BUFREAD               GO GET MDD FROM FILE 3          23350000
         JPOINT FILE=FILE3,NEXT=START        REWIND THE FILE            23400000
         MVC   HIBYTE0,SAVMDDCN         PICK UP CHAIN PTR FOR FIRST     23450000
         MVC   OPSCHAIN,SAVOPSCN        PRESERVE OPSYN PTR FOR LATER    23500000
         MVC   ERRHDR+D1(D5),=AL1(D36,JEPSOP,JNOCNT,JEOPCOD)           X23550000
               SET UP STANDARD STUFF IN ERROR HEADER                    23600000
         EJECT                                                          23650000
*DRIVER FOR CONCURRENT RESOLUTION - THIS ROUTINE ATTEMPTS TO BUILD    * 23700000
*   THE SKELETON DICTIONARY FOR A TEXT SEGMENT IN THE MINIMUM         * 23750000
*   NUMBER OF PASSES (2) OVER THE TEXT SEGMENT DICTIONARY FILE        * 23800000
*   FOR THAT TEXT SEGMENT. THIS MEANS THAT, WHILE BUILDING            * 23850000
*   SKELETON DICTIONARIES, THE ENTIRE SKELETON DICTIONARY FOR         * 23900000
*   THE TEXT SEGMENT IS IN CORE, ALL UNIQUE GLOBAL DEFINITIONS        * 23950000
*   FROM ALL TEXT SEGMENTS UP TO THAT POINT ARE IN THE GLOBAL         * 24000000
*   DIRECTORY IN CORE, ALL ORDINARY SYMBOL REFERENCES                 * 24050000
*   FROM ALL TEXT SEGMENTS UP TO THAT POINT ARE IN THE ORDINARY       * 24100000
*   SYMBOL REFERENCE TABLE IN CORE, AND ALL THE SEQUENCE SYMBOL       * 24150000
*   DEFINITIONS FOR THE TEXT SEGMENT ARE IN THE SEQUENCE SYMBOL       * 24200000
*   DEFINITION TABLE IN CORE.                                         * 24250000
*                                                                     * 24300000
INITTSD  L     MDDPTR,MDDND             PICK UP TABLE BASE              24350000
         S     MDDPTR,HIBYTE0           DISPLACE TO NEXT ENTRY IN CHAIN 24400000
         C     MDDPTR,MDDND             SEE IF END OF CHAIN REACHED     24450000
         BE    INITOSR                  BRANCH IF YES                   24500000
         USING MDDNTRY,MDDPTR                                           24550000
         GOIF  FLUSH,ON=ENDSEGBX        BRANCH IF BYPASS FLAG ON        24600000
         GOIF  TSEDIT,OFF=OERR          OVERLAP IN X1A-DUMMY UP MDV REC 24620000
         MVC   HIBYTE0+(L'HIBYTE0-L'MSEQSZ)(L'MSEQSZ),MSEQSZ           X24650000
               PICK UP LENGTH OF SEQUENCE SYMBOL REFERENCE DIRECTORY    24700000
         L     WORK1,HIBYTE0            ACCUM FOR SKEL DICT SIZE        24750000
         MVC   HIBYTE0+(L'HIBYTE0-L'MGBLSZ)(L'MGBLSZ),MGBLSZ           X24800000
               PICK UP LENGTH OF GLOBAL VECTOR                          24850000
         A     WORK1,HIBYTE0            ADD TO SEQ SYMB REF DIR SIZE    24900000
         LA    WORK1,SKHDREND-SKDCTHDR(,WORK1) ADD IN HEADER LENGTH     24950000
         ST    WORK1,LNGSK              PRESERVE SKELETON LENGTH        25000000
         L     WORK2,FREEEND            GET PTR TO HI END OF WORKAREA   25050000
         SR    WORK2,WORK1              ALLOW FOR SKELETON DICT         25100000
         C     WORK2,GDEND              CHECK FOR OVERLAP               25150000
         BL    OERR                     GO FLAG THE CONDITION           25200000
         ST    WORK2,SKDCSTRT           SAVE SKEL DICT START ADDR       25250000
         LR    SKDCTPTR,WORK2           GET PTR TO SKEL DICT HEADER     25300000
         USING SKDCTHDR,SKDCTPTR                                        25350000
         BCTR  WORK2,D0                 BUMP PAST SKEL DICTIONARY       25400000
         ST    WORK2,SSDTSTRT           SET UP PTR TO SEQ SYMB DEF TBL  25450000
         SH    WORK2,=H'192'            ALLOW FOR HASH TABLE            25500000
         CL    WORK2,GDEND              CHECK FOR OVERLAP               25550000
         BL    OERR                     GO FLAG THE CONDITION           25600000
         ST    WORK2,SSDTEND            SAVE AS END OF SSDT PTR         25650000
         MVI   D1(WORK2),BITFF-BITFF    INSERT ZERO FOR PROPAGATION     25700000
         MVC   D2(D192-D1,WORK2),D1(WORK2) CLEAR HSH TBL BY PROPAGATION 25750000
         XC    SKDCTHDR(SKHDREND-SKDCTHDR),SKDCTHDR CLEAR IT FIRST      25800000
         MVC   SKSRDPT(L'MGBLSZ+L'MSEQSZ+L'MLCLSZ),MGBLSZ              X25850000
               FILL IN GBL, SEQ, AND LCL DICT SIZES                     25900000
         LA    WORK2,SKHDREND-SKDCTHDR(,SKDCTPTR) GET PTR TO GBL VECTR  25950000
         ST    WORK2,GBLSK              SAVE IT FOR LATER USE           26000000
         A     WORK2,HIBYTE0            DEVELOP PTR TO SEQ SYMB VECTOR  26050000
         ST    WORK2,SEQSK              SAVE IT FOR LATER USE           26100000
         LA    BRTBLPTR,BRTBLA          SET UP TO USE BRANCH TABLE A    26150000
RESCAN   JPOINT FILE=FILE2,ADDR=MTSDNP,NEXT=GET  POINT TO START OF      26200000
GETNXT   JGETL FILE=FILE2               TXT SEG DICT FILE AND READ      26250000
         ST    R11,RECADDR              PRESERVE RECORD PTR ONCE        26300000
         SR    WORK1,WORK1              CLEAR A REGISTER                26350000
         IC    WORK1,D2(,R11)           GET RECORD TYPE                 26400000
         L     WORK1,D0(WORK1,BRTBLPTR) BRANCH ON IT VIA                26450000
         BR    WORK1                    BRANCH TABLE                    26500000
*                                                                       26550000
*BRANCH TABLE A - USED IN THE FIRST PASS OVER THE TEXT SEGMENT          26600000
*                 DICTIONARY FILE FOR A TEXT SEGMENT                    26650000
*                                                                       26700000
BRTBLA   DC    A(GBLDEF)                RECORD TYPE 00                  26750000
         DC    A(SEQDEF)                RECORD TYPE 04                  26800000
         DC    A(GETNXT)                RECORD TYPE 08                  26850000
         DC    A(ORDREF)                RECORD TYPE 0C                  26900000
         DC    A(ENDSEGA)               RECORD TYPE 10                  26950000
*                                                                       27000000
*BRANCH TABLE B - USED IN THE SECOND PASS OVER THE TEXT SEGMENT         27050000
*                 DICTIONARY FILE FOR A TEXT SEGMENT                    27100000
*                                                                       27150000
BRTBLB   DC    A(GETNXT)                RECORD TYPE 00                  27200000
         DC    A(GETNXT)                RECORD TYPE 04                  27250000
         DC    A(SEQREF)                RECORD TYPE 08                  27300000
         DC    A(GETNXT)                RECORD TYPE 0C                  27350000
         DC    A(ENDSEGB)               RECORD TYPE 10                  27400000
         EJECT                                                          27450000
*GBLDEF - THIS ROUTINE PROCESSES GLOBAL DEFINITIONS DURING THE        * 27500000
*   FIRST PASS OVER THE TEXT SEGMENT DICTIONARY FILE FOR A TEXT       * 27550000
*   SEGMENT. ITS FUNCTION IS TO MAKE AN ENTRY FOR THE GLOBAL          * 27600000
*   VARIABLE IN THE GLOBAL DIRECTORY, IF IT HAS NOT ALREADY BEEN      * 27650000
*   ENTERED, TO INCREASE THE GENERATION TIME GLOBAL DICTIONARY        * 27700000
*   ALLOCATION AS NECESSARY, AND TO BUILD THE GLOBAL VECTOR IN        * 27750000
*   THE SKELETON DICTIONARY FOR EACH TEXT SEGMENT.                    * 27800000
*                                                                     * 27850000
GBLDEF   EQU   *                                                        27900000
         USING GBLDEFN,RCDPTR                                           27950000
         LA    PTR,GDEFSL               GET PTR TO LEN, NAME FOR SUBR   28000000
         BAL   RTNLNK,GSHASHER          GO LOOK FOR GBL VARB IN DIRECT  28050000
         GOIF  FNDFLG,ON=SYNCHEK        BRANCH IF SYNONYM FOUND         28100000
         L     WORK1,GDEND              GET PTR TO NEW ENTRY            28150000
         USING GDNTRY,WORK1                                             28200000
         LA    WORK2,GDEL(,WORK1)       ASSUME LONGEST GBL DIR ENTRY    28250000
         C     WORK2,SSDTEND            CHECK FOR OVERLAP               28300000
         BNL   OERR                     IF OVERLAP, BRANCH              28350000
         MVC   GDFL(L'GDEFF+L'GDEFSL),GDEFF PUT FLAGS AND LENGTH IN     28360000
         MVI   GDSYM,JAMPER             SUPPLY AMPERSAND LITERALLY      28370000
         SR    WORK2,WORK2              CLEAR WORK REGISTER             28400000
         IC    WORK2,GDEFSL             GET LENGTH OF GBL VARB SYMBOL   28450000
         LA    WORK3,L'GDEFTF+L'GDEFVP+L'GDEFD(,WORK2)                 X28500000
                   GET MOVE LENGTH FOR GLOBAL DEFINITION                28550000
         EX    WORK3,GNTRYMV            MOVE GBL DEFN INTO GBL DIRECT   28600000
         LA    WORK3,D7(WORK1,WORK3)    ALLOW FOR ADDED ENTRY IN DIRCT  28650000
         ST    WORK3,GDEND              PUT PTR BACK UPDATED            28700000
         A     HASHGS,GDSTRT            GET PTR TO HASH TBL ENTRY       28750000
         MVC   GDCP,D0(HASHGS)          PUT CHAIN LINK IN NEW ENTRY     28800000
         LR    WORK3,WORK1              SET UP NEW ENTRY ADDR           28850000
         S     WORK3,GDSTRT             GET DISPL FOR HSH TBL ENTRY     28900000
         ST    WORK3,JFWORD1            SAVE TEMPORARILY AND PUT IN     28950000
         MVC   D0(L'GDCP,HASHGS),JFWORD1+(L'JFWORD1-L'GDCP) HASH TABLE  29000000
         LA    WORK1,L'GDCP+L'GDFL+L'GDSL+D2(WORK2,WORK1) BUMP POINTER  29050000
         MVC   GDDP,GDALLOC+(L'GDALLOC-L'GDDP) INSERT GT PTR IN ENTRY   29100000
         SR    PAIRO,PAIRO              INITIALIZE FOR ALLOCATION       29150000
         LA    PAIRO,D1(,PAIRO)         ALLOC 1 BYTE FOR B TYPE         29200000
         TM    GDEFF,GSTP1+GSTP2        CHECK IF B-TYPE VARIABLE        29250000
         BM    DIMENCK                  BRANCH IF B-TYPE                29300000
         LA    PAIRO,D3(,PAIRO)         ALLOC 4 BYTES FOR A TYPE        29350000
         BZ    DIMENCK                  BRANCH IF A-TYPE                29400000
         LA    PAIRO,D5(,PAIRO)         ALLOC 9 BYTES FOR C TYPE        29450000
DIMENCK  TM    GDEFF,GDIM               CHECK IF VARIABLE DIMENSIONED   29500000
         BZ    ALLOC                    BRANCH IF NOT                   29550000
         MVC   JHWORD1,GDDM             PICK UP VARIABLE DIMENSION      29600000
         MH    PAIRO,JHWORD1           MULTIPLY BY SINGLE ELEMENT SIZE  29650000
         TM    GDEFF,GSTP1+GSTP2        CHECK IF B-TYPE VARIABLE        29700000
         BNM   ALLOC                    BRANCH IF NOT                   29750000
         LA    PAIRO,D7(,PAIRO)         ROUND VALUE TO NEXT BYTE        29800000
         SR    PAIRE,PAIRE              CLEAR EVEN REG FOR DIVIDE       29850000
         D     PAIRE,=F'8'              GET NUMBER OF BYTES FO B TYPE   29900000
ALLOC    A     PAIRO,GDALLOC            ADD ALLOCATION FOR NEW ENTRY    29950000
         ST    PAIRO,GDALLOC              TO CURRENT GT GBL DICT ALLOC  30000000
         LR    GDBASE,WORK1             PREPARE FOR BASE CHANGE         30050000
         LA    RCDPTR,L'GDEFRL+L'GDEFRT+L'GDEFF+L'GDEFSL+D1(LNGTHREG,RCX30100000
               DPTR) BUMP PTR TO GBL DEFN RCD PAST VARB SYMB            30150000
         B     ENTRSKEL                 GO TO FILL GBL VCTR SLOT        30200000
GNTRYMV  MVC   GDSYM+D1(D0),GDEFVS      EXECUTED GBL DEFN MOVE          30250000
         DROP  WORK1                                                    30300000
         USING GDNTRY,GDBASE                                            30350000
SYNCHEK  CLC   GDEFF,GDFL               COMPARE THE FLAG BYTES          30400000
         BNE   IERR1                    IF UNALIKE, AN ERROR            30450000
         SR    WORK3,WORK3              CLEAR WORK REGISTER             30500000
         IC    WORK3,GDSL               PICK UP SYMBOL LENGTH           30550000
         LA    GDBASE,L'GDCP+L'GDFL+L'GDSL+D2(WORK3,GDBASE)            X30600000
               BUMP GBL DIR ENTRY PTR PAST VARB SYMBOL                  30650000
         LA    WORK2,GDEFSL             GET PTR TO VARB SYM, IN CASE    30680000
         LA    RCDPTR,L'GDEFRL+L'GDEFRT+L'GDEFF+L'GDEFSL+D1(LNGTHREG,RCX30710000
               DPTR) BUMP PTR TO GBL DEFN RCD PAST VARB SYMB            30740000
         CLC   GDEFD,GDDM               COMPARE DIMENSIONING            30800000
         BNE   IERR2                    IF UNALIKE, AN ERROR            30850000
ENTRSKEL L     SKDCTPTR,GBLSK           GET PTR TO GLOBAL VECTOR        30900000
         MVC   HIBYTE0+(L'HIBYTE0-L'GDEFVP)(L'GDEFVP),GDEFVP           X30950000
               GET DISPL TO GBL VECTR SLOT FROM GBL DEFN RECORD         31000000
         A     SKDCTPTR,HIBYTE0         DEVELOP PTR TO GBL VCTR SLOT    31050000
         MVC   D0(L'GDDP,SKDCTPTR),GDDP INSERT POINTER TO GBL DICT      31100000
         B     GETNXT                   RETURN                          31150000
IERR     EQU   *                                                        31200000
IERR1    EQU   *                                                        31250000
         LA    WORK2,GDEFSL             GET PTR TO VARB SYMB            31300000
         LA    RCDPTR,L'GDEFRL+L'GDEFRT+L'GDEFF+L'GDEFSL+D1(LNGTHREG,RCX31310000
               DPTR) BUMP PTR TO GBL DEFN RCD PAST VARB SYMB            31320000
         MVC   VECTSAVE+D1(L'GDEFVP),GDEFVP                            X31330000
               PRESERVE VECTOR POINTER ACROSS ERROR PROCESS             31340000
         BAL   RTNLNK,ERLOGER           CALL ERROR LOGGING RTN          31350000
         DC    AL1(SEV67,ERR67)         ERROR PARAMETERS                31400000
IERR1A   LA    GDBASE,=X'00FFFFFE'       SET UP DEFAULT FLAGS           31450000
         LA    RCDPTR,VECTSAVE          DUMMY UP PTR TO VECTOR POINTER  31470000
         B     ENTRSKEL                 GO BUILD VECOTR ENTRY W/DEFAULT 31500000
IERR2    EQU   *                                                        31550000
         MVC   VECTSAVE+D1(L'GDEFVP),GDEFVP                            X31630000
               PRESERVE VECTOR POINTER ACROSS ERROR PROCESS             31640000
         BAL   RTNLNK,ERLOGER           CALL ERROR LOGGING RTN          31650000
         DC    AL1(SEV81,ERR81)         ERROR PARAMETERS                31700000
         B     IERR1A                   GO TO DEFAULT PROCESS           31750000
         DROP  GDBASE                                                   31800000
         DROP  RCDPTR                                                   31850000
         EJECT                                                          31900000
*SEQDEF - THIS ROUTINE PROCESSES SEQUENCE SYMBOL DEFINITIONS          * 31950000
*   DURING THE FIRST PASS OVER THE TEXT SEGMENT DICTIONARY FILE       * 32000000
*   FOR A TEXT SEGMENT. ITS FUNCTION IS TO MAKE AN ENTRY FOR THE      * 32050000
*   SEQUENCE SYMBOL DEFINITION IN THE SEQUENCE SYMBOL DEFINITION      * 32100000
*   TABLE.                                                            * 32150000
*                                                                     * 32200000
SEQDEF   EQU   *                                                        32250000
         USING SSDEF,RCDPTR                                             32300000
         LA    PTR,SDEFSL               GET PTR TO LEN, NAME FOR SUBR   32350000
         BAL   RTNLNK,SSHASHER          GO SEE IF SEQ SYMB ALREADY IN   32400000
         GOIF  FNDFLG,ON=DUPERR         IF YES, DUPLICATE DEFINITION    32450000
         L     WORK1,SSDTEND            GET PTR TO SPACE FOR ENTRY      32500000
         LA    WORK2,L'SSDTCP+L'SSDTNP+L'SSDTSL(,LNGTHREG) GET LENGTH   32550000
         SR    WORK1,WORK2              BUMP PTR FOR NRXT ENTRY         32600000
         C     WORK1,GDEND              CHECK FOR TABLE OVERLAP         32650000
         BNH   OERR                     BRANCH IF IT OCCURS             32700000
         ST    WORK1,SSDTEND            UPDATE POINTER                  32750000
         LA    WORK1,D1(,WORK1)         SET UP PTR TO THIS ENTRY        32800000
         USING SSDTNTRY,WORK1                                           32850000
         SR    WORK2,WORK2              CLEAR REGISTER                  32900000
         IC    WORK2,SDEFSL             GET SEQUENCE SYMBOL LENGTH      32950000
         LA    WORK2,L'SDEFNP+D1(,WORK2) GET ENTRY LENGTH - CHAIN PTR   33000000
         EX    WORK2,SSDTMOVE           PUT N/P, LEN, SYMBOL IN ENTRY   33050000
         LR    SSDTPTR,SSDTBASE         PICK UP HASH TABLE PTR          33100000
         SH    SSDTPTR,=H'2'            ADJUST IT                       33150000
         SR    SSDTPTR,HASHSS           GET PTR TO PROPER HSH TBL SLOT  33200000
         MVC   SSDTCP,D0(SSDTPTR)       PUT CHAIN PTR IN ENTRY          33250000
         SR    SSDTBASE,WORK1           GET DISPL TO NEW ENTRY          33300000
         ST    SSDTBASE,JFWORD1         PUT IT IN PROPER HASH TABLE     33350000
         MVC   D0(L'SSDTCP,SSDTPTR),JFWORD1+(L'JFWORD1-L'SSDTCP) SLOT   33400000
         B     GETNXT                   RETURN FOR NEXT RECORD          33450000
DUPERR   EQU   *                                                        33500000
         LA    R0,JPERIOD               INSERT PERIOD FOR SEQ SYNB      33550000
         LA    WORK2,SDEFSL             GET PTR TO SEQ SYMB             33600000
         BAL   RTNLNK,ERLOGERZ          CALL ERROR LOGGING RTN          33650000
         DC    AL1(SEV74,ERR74)         ERROR PARAMETERS                33700000
         B     GETNXT                   RETURN                          33750000
SSDTMOVE MVC   SSDTNP(D0),SDEFNP        EXECUTED SSDT ENTRY MOVE        33800000
         DROP  RCDPTR                                                   33850000
         DROP  WORK1                                                    33900000
         EJECT                                                          33950000
*SEQREF - THIS ROUTINE PROCESSES SEQUENCE SYMBOL REFERENCES           * 34000000
*   DURING THE SECOND PASS OVER THE TEXT SEGMENT DICTIONARY FILE      * 34050000
*   FOR A TEXT SEGMENT. ITS FUNCTION IS TO BUILD THE SEQUENCE         * 34100000
*   SYMBOL REFERENCE DICTIONARY IN THE SKELETON DICTIONARY FOR        * 34150000
*   EACH TEXT SEGMENT USING THE SEQUENCE SYMBOL DEFINITIONS IN        * 34200000
*   THE SEQUENCE SYMBOL DEFINITION TABLE.                             * 34250000
*                                                                     * 34300000
SEQREF   EQU   *                                                        34350000
         USING SSREF,RCDPTR                                             34400000
         LA    PTR,SREFSL               GET PTR TO LEN, NAME FOR SUBR   34450000
         BAL   RTNLNK,SSHASHER          GO SEE IF SEQ SYM ALREADY IN    34500000
         GOIF  FNDFLG,OFF=UNDERR        IF NO, UNDEFINED SEQ SYMB       34550000
SEQREFA  EQU   *                                                        34600000
         USING SSDTNTRY,SSDTPTR                                         34650000
         L     SKDCTPTR,SEQSK           GET PTR TO SEQ SYMB VECTOR      34700000
         MVC   HIBYTE0+(L'HIBYTE0-L'SREFDP)(L'SREFDP),SREFDP           X34750000
               GET DISPL TO SSRD SLOT FROM SEQ SYMB REF RECORD          34800000
         A     SKDCTPTR,HIBYTE0         DEVELOP PTR TO SSRD SLOT        34850000
         MVC   D0(L'SSDTNP,SKDCTPTR),SSDTNP  INSERT N/P ADDR IN SLOT    34900000
         B     GETNXT                   RETURN FOR NEXT RECORD          34950000
UNDERR   EQU   *                                                        35000000
         LA    R0,JPERIOD               INSERT PERIOD FOR SEQ SYMB      35050000
         LA    WORK2,SREFSL             GET PTR TO SEQ SYMB             35100000
         BAL   RTNLNK,ERLOGERZ          CALL ERROR LOGGING RTN          35150000
         DC    AL1(SEV76,ERR76)         ERROR PARAMETERS                35200000
         L     R11,RECADDR              RESTORE RECORD PTR              35250000
         LA    SSDTPTR,=XL11'00'        GIVE DUMMY TO CLEAR SSRD ENTRY  35300000
         B     SEQREFA                  GO BACK TO PROCESS AS NORMAL    35350000
         DROP  SSDTPTR                                                  35400000
         DROP  RCDPTR                                                   35450000
         EJECT                                                          35500000
*ORDREF - THIS ROUTINE PROCESSES ORDINARY SYMBOL REFERENCES           * 35550000
*   DURING THE FIRST PASS OVER THE TEXT SEGMENT DICTIONARY FILE       * 35600000
*   FOR A TEXT SEGMENT. ITS FUNCTION IS TO MAKE AN ENTRY FOR THE      * 35650000
*   ORDINARY SYMBOL REFERENCE IN THE ORDINARY SYMBOL REFERENCE        * 35700000
*   TABLE.                                                            * 35750000
*                                                                     * 35800000
ORDREF   EQU   *                                                        35850000
         USING OSREF,RCDPTR                                             35900000
         LH    WORK1,OREFRL             PICK UP LENGTH OF OS REF        35950000
         BCTR  WORK1,D0                 MAKE IT MOVE LENGTH FOR MOVE    36000000
         L     WORK3,OSRTEND            GET PTR TO NEXT SLOT IN OSRT    36050000
         LA    WORK2,D1(WORK1,WORK3)    DEVELOP PTR PAST POTENTIAL NTRY 36100000
         C     WORK2,SSDTEND            CHECK FOR TABLE OVERLAP         36150000
         BNL   OERR                     BRANCH IF IT OCCURS             36200000
         USING OSRTNTRY,WORK3                                           36250000
         EX    WORK1,OSREFMV            MOVE OS REF RCD INTO OSRT       36300000
         ST    WORK2,OSRTEND            SAVE NEXT SLOT POINTER          36350000
         L     WORK1,OREFCNT            GET CURRENT OS REF COUNT        36400000
         LA    WORK1,D1(,WORK1)         ADD 1                           36450000
         ST    WORK1,OREFCNT            SAVE NEW COUNT                  36500000
         XC    JDWORD,JDWORD            CLEAR WORK AREA FOR ORD SYMB    36550000
         SR    LNGTHREG,LNGTHREG        CLEAR REGISTER FOR ORD SYM LEN  36600000
         IC    LNGTHREG,OREFSL          GET LENGTH OF ORDINARY SYMBOL   36650000
         EX    LNGTHREG,OSMOVE          MOVE SYMBOL INTO WORK AREA      36700000
         LA    WORK1,OSPRIME            GET PTR TO HASH PARAMETERS      36750000
         BAL   WORK2,HASH               LINK TO HASHING RTN             36800000
         A     HASHOS,OSRTSTRT          DEVELOP HASH TABLE POINTER      36850000
         MVC   OSRTCP,D0(HASHOS)        MOVE CHAIN PTR TO NEW ENTRY     36900000
         S     WORK3,OSRTSTRT           DEVELOP CHAIN PTR FOR HSH TBL   36950000
         ST    WORK3,JFWORD1            STOE TEMPORARILY AND            37000000
         MVC   D0(L'OSRTCP,HASHOS),JFWORD1+(L'JFWORD1-L'OSRTCP)        X37050000
               INSERT INTO HASH TABLE SLOT                              37100000
         B     GETNXT                   RETURN                          37150000
OSMOVE   MVC   JDWORD(D0),OREFOS        EXECUTED ORD SYMB MOVE          37200000
OSREFMV  MVC   OSRTCP(D0),OREFRL        EXECUTED OS REF RCD MOVE        37250000
         DROP  RCDPTR                                                   37300000
         DROP  WORK3                                                    37350000
         EJECT                                                          37400000
*ENDSEGA - THIS ROUTINE HANDLES THE END-OF-SEGMENT CONDITION          * 37450000
*   THAT INDICATES THE END OF THE FIRST PASS OVER THE TEXT            * 37500000
*   SEGMENT DICTIONARY FILE FOR A TEXT SEGMENT. ITS FUNCTION          * 37550000
*   IS TO SET UP THE BRANCH TABLE FOR THE SECOND PASS AND TO          * 37600000
*   INITIATE THE SECOND PASS.                                         * 37650000
*                                                                     * 37700000
ENDSEGA  EQU   *                                                        37750000
         LA    BRTBLPTR,BRTBLB          SET UP PTR TO BRANCH TABLE B    37800000
         B     RESCAN                   GO START SECOND PASS            37850000
         EJECT                                                          37900000
*ENDSEGB - THIS ROUTINE HANDLES THE END-OF-SEGMENT CONDITION          * 37950000
*   THAT INDICATES THE END OF THE SECOND PASS OVER THE TEXT           * 38000000
*   SEGMENT DICTIONARY FILE FOR A TEXT SEGMENT. ITS FUNCTION          * 38050000
*   IS TO OUTPUT THE SKELETON DICTIONARY FOR THE TEXT SEGMENT,        * 38100000
*   TO BUILD THE MACRO DEFINITION VECTOR ENTRY FOR THE TEXT           * 38150000
*   SEGMENT, AND TO INITIATE THE FIRST PASS OVER THE TEXT SEGMENT     * 38200000
*   DICTIONARY FILE FOR THE NEXT TEXT SEGMENT.                        * 38250000
*                                                                     * 38300000
ENDSEGB  EQU   *                                                        38350000
         MVC   PIOPARMA,SKDCSTRT        SET UP PTR TO START OF DICT     38400000
         MVC   PIOPARMB,LNGSK           SET UP LNGTH OF DICT           X38450000
               SET UP LENGTH OF SKELETON DICTIONARY FOR WRITE           38500000
         STM   R3,R5,SAVE3456           SAVE REGISTERS USED BY SUBRTN   38550000
         LH    R5,JMAXRL1               SET UP MAXIMUM RECORD THIS FILE 38600000
         LA    R6,FILE1                 SET UP FILE POINTER             38650000
         BAL   R7,BUFRITE               GO PUT SKEL DICT TO FILE 1      38700000
         LM    R3,R5,SAVE3456           RESTORE NECESSARY REGISTERS     38750000
         L     WORK2,MDVSTRT            GET PTR TO START OF MDV         38800000
         MVC   HIBYTE0+(L'HIBYTE0-L'MVECTR)(L'MVECTR),MVECTR           X38850000
               GET DISPL INTO MDV FROM MOD ENTRY                        38900000
         A     WORK2,HIBYTE0            DEVELOP PTR TO MDV SLOT         38950000
         USING MDVNTRY,WORK2                                            39000000
         MVC   MNPSD,JNOTEVAL           INSERT SKEL DICT N/P ADDR       39050000
         MVC   MNPTXT,MTXTNP            INSERT TEXT START N/P ADDR      39100000
         MVC   MSDL,LNGSK+(L'LNGSK-L'MSDL) INSERT SKEL DICT LENGTH      39150000
ENDSEGXT MVC   HIBYTE0+(L'HIBYTE0-L'MCHAIN)(L'MCHAIN),MCHAIN           X39200000
               PICK UP PTR TO NEXT ENTRY IN CHAIN                       39250000
         B     INITTSD                  RETURN TO BUILD NEXT SKEL DICT  39300000
ENDSEGBX EQU   *                                                        39350000
         L     WORK2,MDVSTRT            GET PTR TO START OF MDV         39400000
         MVC   HIBYTE0+(L'HIBYTE0-L'MVECTR)(L'MVECTR),MVECTR           X39450000
               GET DISPL INTO MDV FROM MDD ENTRY                        39500000
         A     WORK2,HIBYTE0            DEVELOP PTR TO MDV SLOT         39550000
         USING MDVNTRY,WORK2                                            39600000
         XC    MNPTXT(MDVEND-MDVNTRY),MNPTXT    SET MDV SLOT ALL ZEROES 39650000
         MVC   MSDL+(L'MSDL-D1)(D1),MTSDNP+(L'MTSDNP-D1) SET ERROR FLAG 39700000
         B     ENDSEGXT                 GO TO RETURN                    39750000
OERR     EQU   *                                                        39800000
         L     WORK2,MDVSTRT            GET PTR TO START OF MDV         39850000
         MVC   HIBYTE0+(L'HIBYTE0-L'MVECTR)(L'MVECTR),MVECTR           X39900000
               GET DISPL INTO MDV FROM MDD ENTRY                        39950000
         A     WORK2,HIBYTE0            DEVELOP PTR TO MDV SLOT         40000000
         USING MDVNTRY,WORK2                                            40050000
         XC    MNPTXT(MDVEND-MDVNTRY),MNPTXT SET MDV ENTRY TO ZEROES    40100000
         MVI   MSDL+D2,D20              INSERT ERROR FLAG               40150000
         B     ENDSEGXT                 GO TO RETURN                    40200000
         DROP  WORK2                                                    40250000
         EJECT                                                          40300000
*                                                                       40350000
* THIS SUBROUTINE SCANS OFF A DECIMAL SELF-DEFINING TERM AND            40400000
*        CONVERTS IT TO BINARY. IT IS CALLED BY THE FOLLOWING           40450000
*        ROUTINES- EQUSCAN                                              40500000
*                                                                       40550000
DECBIN   EQU   *                                                        40600000
         SR    RX,RX                    CLEAR ACCUMULATED LENGTH REG    40650000
         LR    RY,RX                    CLEAR NEXT DIGIT REGISTER       40700000
DB1      CLI   D0(INPTR),J9             LOOK FOR NUMERIC CHARACTER      40750000
         BHR   RTNLNK                   EXIT IF NOT FOUND               40800000
         IC    RY,D0(INPTR)             PICK UP DIGIT                   40850000
         MH    RX,=H'10'                MULTIPLY ACCUMULATED LENGTH     40900000
         AR    RX,RY                    AND ADD IN NEXT DIGIT           40950000
         LA    INPTR,D1(,INPTR)         BUMP COLUMN POINTER TO NEXT     41000000
         B     DB1                      GO BACK TO GET MORE DIGITS      41050000
*                                                                       41100000
* THIS SUBROUTINE GETS A NAME FROM THE OPERAND OF AN EXTRN OR           41150000
*        WXTRN STATEMENT. IT IS CALLED BY THE FOLLOWING ROUTINES-       41200000
*        ESCAN                                                          41250000
*                                                                       41300000
GETXNAM  EQU   *                                                        41350000
         GOIF  ENDSW,OFF=GX1            GO ON IF END NOT REACHED        41400000
GX0      SET   ENDSW,ON                 INDICATE NO MORE NAMES          41450000
         B     D0(,RTNLNK)              RETURN ON NO NAME OR ERROR      41500000
GX1      CLI   D0(INPTR),JAT            LOOK FOR ALPHANUMERIC CHAR      41550000
         BH    GX5                      BRANCH IF NOT                   41600000
         CLI   D0(INPTR),JA             LOOK FOR ALPHA ONLY             41650000
         BL    GX0                      BRANCH IF NOT                   41700000
GX1A     EQU   *                                                        41750000
         LR    RX,INPTR                 SAVE PTR TO START OF NAME       41800000
GX2      LA    INPTR,D1(,INPTR)         BUMP TO NEXT CHARACTER          41850000
         CLI   D0(INPTR),JAT            LOOK FOR ALPHANUMERIC CHAR      41900000
         BNH   GX2                      BRANCH IF FOUND                 41950000
GX3      CLI   D0(INPTR),JCOMMA         LOOK FOR COMMA DELIMITER        42000000
         BE    GX4                      BRANCH IF FOUND                 42050000
         CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        42100000
         BNE   GX0                      BRANCH IF NOT FOUND             42150000
         SET   ENDSW,ON                 INDICATE LAST OPERAND PROCESSED 42200000
GX4      LR    WORK3,INPTR              GET PTR TO END OF NAME +1       42250000
         SR    WORK3,RX                 GET LENGTH OF NAME              42300000
         BCTR  WORK3,D0                 GET MOVE LENGTH OF NAME         42350000
         C     WORK3,=F'7'              CHECK FOR VALID LENGTH          42400000
         BH    GX0                      BRANCH IF TOO LONG              42450000
         LA    INPTR,D1(,INPTR)         BUMP TO NEXT NAME               42500000
         B     D4(,RTNLNK)              RETURN WITH GOOD NAME           42550000
GX5      CLI   D0(INPTR),JAMPER         TEST FOR POSSIBLE VARIABLE SYM  42600000
         BNE   GX0                      BRANCH IF NOT FOUND             42650000
         B     GX1A                     ACCEPT IF FOUND                 42700000
*                                                                       42750000
* THIS SUBROUTINE SCANS PAST EXPRESSIONS IN THE OPERANDS OF EQU,        42800000
*        DC, AND DS STATEMENTS. IT IS CALLED BY THE FOLLOWING           42850000
*        ROUTINES- EQUSCAN, DCSCAN                                      42900000
*                                                                       42950000
OPNDSCAN EQU   *                                                        43000000
         SR    PARENCT,PARENCT          INITIALIZE PAREN COUNT TO 0     43050000
         SET   QUOTESW,OFF              INITIALIZE QUOTE MODE INDICATOR 43100000
OPS1     CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        43150000
         BNE   OPS2                     BRANCH IF NOT FOUND             43200000
         GOIF  QUOTESW,ON=OPS6          IGNORE IF BLANK INSIDE QUOTES   43250000
OPS1A    B     D0(,RTNLNK)              RETURN ON ANY ERROR             43300000
OPS2     CLI   D0(INPTR),JCOMMA         LOOK FOR COMMA DELIMITER        43350000
         BNE   OPS3                     BRANCH IF NOT FOUND             43400000
         GOIF  QUOTESW,ON=OPS6          IGNORE IF COMMA INSIDE QUOTES   43450000
         CLI   DELIMIT,JCOMMA           SEE IF LOOKING FOR COMMA        43500000
         BNE   OPS1A                    ERROR IF NOT                    43550000
         LTR   PARENCT,PARENCT          CHECK PAREN COUNT FOR ZERO      43600000
         BNZ   OPS1A                    ERROR IF NOT ZERO               43650000
OPS2A    LA    INPTR,D1(,INPTR)         BUMP PTR PAST DELIMITER         43700000
         B     D4(,RTNLNK)              RETURN ON VALID SYNTAX          43750000
OPS3     CLI   D0(INPTR),JLPARN         LOOK FOR LEFT PAREN CHARACTER   43800000
         BNE   OPS4                     BRANCH IF NOT FOUND             43850000
         GOIF  QUOTESW,ON=OPS6          IGNORE IF PAREN INSIDE QUOTES   43900000
         LA    PARENCT,D1(,PARENCT)     INCREMENT PAREN COUNT BY 1      43950000
         B     OPS6                     GO ON TO NEXT CHARACTER         44000000
OPS4     CLI   D0(INPTR),JQUOTE         LOOK FOR QUOTE CHARACTER        44050000
         BNE   OPS5                     BRANCH IF NOT FOUND             44100000
         BCTR  INPTR,D0                 BACK UP TO PREVIOUS CHARACTER   44150000
         CLI   D0(INPTR),JL             LOOK FOR L ATTRIB NOTATION      44200000
         BNE   OPS41                    BRANCH IF NOT FOUND             44250000
         GOIF  QUOTESW,ON=OPS42,ELSE=OPS421 IGNORE QUOTE IF L ATTRIB    44300000
OPS41    CLI   D0(INPTR),JB             LOOK FOR BINARY SDT             44350000
         BE    OPS42                    BRANCH IF FOUND                 44400000
         CLI   D0(INPTR),JC             LOOK FOR CHARACTER SDT          44450000
         BE    OPS42                    BRANCH IF FOUND                 44500000
         CLI   D0(INPTR),JX             LOOK FOR HEX SDT                44550000
         BE    OPS42                    BRANCH IF FOUND                 44600000
         CLI   D0(INPTR),JQUOTE         LOOK FOR PAIRED QUOTES          44650000
         BE    OPS42                    BRANCH IF FOUND                 44700000
         GOIF  QUOTESW,ON=OPS42,ELSE=OPS1A END ON SPURIOUS QUOTE        44750000
OPS42    SET   QUOTESW,FLIP             START OR END QUOTE MODE         44800000
OPS421   LA    INPTR,D1(,INPTR)         REPOSITION POINTER              44850000
         B     OPS6                     GO ON TO NEXT CHARACTER         44900000
OPS5     CLI   D0(INPTR),JRPARN         LOOK FOR RIGHT PAREN DELIMITER  44950000
         BNE   OPS6                     BRANCH IF NOT FOUND             45000000
         GOIF  QUOTESW,ON=OPS6          IGNORE IF PAREN INSIDE QUOTES   45050000
         CLI   DELIMIT,JRPARN           SEE IF LOOKING FOR RIGHT PAREN  45100000
         BNE   OPS5A                    GO ON IF NOT                    45150000
         LTR   PARENCT,PARENCT          CHECK PAREN COUNT FOR ZERO      45200000
         BZ    OPS2A                    BRANCH IF ZERO                  45250000
         B     OPS1A                    ERROR IF NOT                    45300000
OPS5A    BCTR  PARENCT,D0               DECREMENT PAREN COUNT BY 1      45350000
OPS6     LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      45400000
         CL    INPTR,ENDCOL             CHECK FOR OPERAND EXCEEDED      45450000
         BH    OPS1A                    BRANCH IF EXCEEDED              45500000
         B     OPS1                     GO HANDLE NEXT CHARACTER        45550000
*                                                                       45600000
* THIS SUBROUTINE PERFORMS A BUFFERED WRITE TO ANY FILE.                45650000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       45700000
*                   ENDSEGB                                             45750000
*                   INITOSR                                             45800000
*                   OSRDFINI                                            45850000
*                                                                       45900000
BUFRITE  EQU   *                                                        45950000
         MVI   FSWITCH,J0               CLEAR FIRST WRITE/NOTE SWITCH   46000000
         LM    R3,R4,PIOPARMB           PICK UP I/O PARAMETERS          46050000
BRT1     CLR   R3,R5                    SEE IF RECORD LESS THAN MAX     46100000
         BH    BRT4                     BRANCH IF NOT                   46150000
         CH    R3,=AL2(MINRECSZ)        SEE IF BLOCK OVER MINIMUM       46200000
         BNL   BRT11                    BRANCH IF MORE OR JUST ENUF     46250000
         LA    R3,MINRECSZ              IF NOT, USE MINIMUM SIZE        46300000
BRT11    STH   R3,PIOPARMC              SET UP RECORD LENGTH            46350000
         SR    R3,R3                    INDICATE LAST WRITE             46400000
BRT2     JWRITE FILE=(R6),PARM=PIOPARMA WRITE RECORD TO PROPER FILE     46450000
         JCHECK FILE=(R6)               CHECK THE WRITE                 46500000
         TS    FSWITCH                  TEST AND SET FIRST WRITE SW     46550000
         BNZ   BRT3                     BRANCH IF NOT FIRST WRITE       46600000
         JNOTE FILE=(R6)                NOTE FIRST BLOCK WRITTEN        46650000
BRT3     LTR   R3,R3                    SEE IF WRITE COMPLETE           46700000
         BZR   R7                       RETURN IF YES                   46750000
         AR    R4,R5                    DEVELOP PTR TO NEXT I/O AREA    46800000
         ST    R4,PIOPARMA              PUT PTR IN I/O CONTROL AREA     46850000
         B     BRT1                     GO SET UP NEW WRITE LENGTH      46900000
BRT4     STH   R5,PIOPARMC              SET UP MAXIMUM RECORD LENGTH    46950000
         SR    R3,R5                    ADJUST WRITE LENGTH             47000000
         B     BRT2                     GO WRITE NEXT RECORD            47050000
*                                                                       47100000
* THIS SUBROUTINE PERFORMS A BUFFERED READ FROM ANY FILE.               47150000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       47200000
*                   INTRENTR                                            47250000
*                                                                       47300000
BUFREAD  EQU   *                                                        47350000
         LM    R3,R4,PIOPARMB           PICK UP I/O PARAMETERS          47400000
BRD1     CLR   R3,R5                    SEE IF RECORD LESS THAN MAX     47450000
         BH    BRD4                     BRANCH IF NOT                   47500000
         CH    R3,=AL2(MINRECSZ)        SEE IF BLOCK OVER MINIMUM       47550000
         BNL   BRD11                    BRANCH IF MORE OR JUST ENUF     47600000
         LA    R3,MINRECSZ              IF NOT, USE MINIMUM SIZE        47650000
BRD11    STH   R3,PIOPARMC              SET UP RECORD LENGTH            47700000
         SR    R3,R3                    INDICATE LAST READ              47750000
BRD2     JREAD FILE=(R6),PARM=PIOPARMA  READ RECORD FROM PROPER FILE    47800000
         JCHECK FILE=(R6)               CHECK THE READ                  47850000
         LTR   R3,R3                    SEE IF READ COMPLETE            47900000
         BZR   R7                       RETURN IF YES                   47950000
         AR    R4,R5                    DEVELOP PTR TO NEXT I/O AREA    48000000
         ST    R4,PIOPARMA              PUT PTR IN I/O CONTROL AREA     48050000
         B     BRD1                     GO SET UP NEW READ LENGTH       48100000
BRD4     STH   R5,PIOPARMC              SET UP MAXIMUM RECORD LENGTH    48150000
         SR    R3,R5                    ADJUST READ LENGTH              48200000
         B     BRD2                     GO READ NEXT RECORD             48250000
*                                                                       48300000
* THIS SUBROUTINE SEARCHES THE SEQUENCE SYMBOL DEFINITION TABLE         48350000
*        FOR A SPECIFIED SEQUENCE SYMBOL.                               48400000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       48450000
*                   SEQDEF                                              48500000
*                   SEQREF                                              48550000
*                                                                       48600000
         USING SSDEF,RCDPTR                                             48650000
SSHASHER XC    JDWORD,JDWORD            CLEAR WORK AREA FOR SEQ SYMB    48700000
         SR    LNGTHREG,LNGTHREG        CLEAR REGISTER FOR SEQ SYM LEN  48750000
         IC    LNGTHREG,D0(,PTR)        GET LENGTH OF SEQ SYMB          48800000
         EX    LNGTHREG,SSDEFMOV        MOVE SYMBOL INTO WORK AREA      48850000
         LA    LNGTHREG,D1(,LNGTHREG)   GET SYMBOL TRUE LENGTH          48900000
         LA    WORK1,SSPRIME            SET UP PTR TO HASH PARAMETERS   48950000
         BAL   WORK2,HASH               LINK TO HASHING RTN             49000000
         L     SSDTBASE,SSDTSTRT        SET UP SSDT POINTER CONSTANT    49050000
         LR    SSDTPTR,SSDTBASE         SET UP SAME POINTER SCRATCH     49100000
         SH    SSDTPTR,=H'2'            ADJUST IT                       49150000
         SR    SSDTPTR,HASHSS           DEVELOP HASH TABLE POINTER      49200000
         USING SSDTNTRY,SSDTPTR                                         49250000
CHNLOOP  CLC   SSDTCP,=FL3'0'           CHECK FOR END OF CHAIN          49300000
         BZ    NTFND                    IF FOUND, BRANCH OUT            49350000
         MVC   HIBYTE0+(L'HIBYTE0-L'SSDTCP)(L'SSDTCP),SSDTCP           X49400000
               GET CHAIN POINTER FROM ENTRY                             49450000
         LR    SSDTPTR,SSDTBASE         RESTORE SSDT BASE ADDR          49500000
         S     SSDTPTR,HIBYTE0          GET CHAINED ENTRY ADDRESS       49550000
         EX    LNGTHREG,SSDEFCMP        COMPARE SEQUENCE SYMBOLS        49600000
         BNE   CHNLOOP                  BRANCH IF NOT IDENTICAL         49650000
         SET   FNDFLG,ON                INDICATE MATCH FOUND            49700000
         BR    RTNLNK                   RETURN                          49750000
NTFND    SET   FNDFLG,OFF               INDICATE NO MATCH FOUND         49800000
         BR    RTNLNK                   RETURN                          49850000
SSDEFMOV MVC   JDWORD(D0),D1(PTR)       EXECUTED SEQ SYMB MOVE          49900000
SSDEFCMP CLC   D0(D0,PTR),SSDTSL        EXECUTED SEQ SYMB COMPARE       49950000
         DROP  RCDPTR                                                   50000000
         DROP  SSDTPTR                                                  50050000
*                                                                       50100000
* THIS SUBROUTINE SEARCHES THE GLOBAL DIRECTORY FOR A SPECIFIED         50150000
*        VARIABLE SYMBOL.                                               50200000
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       50250000
*                   GBLDEF                                              50300000
*                                                                       50350000
         USING GBLDEFN,RCDPTR                                           50400000
GSHASHER XC    JDWORD,JDWORD            CLEAR WORK AREA FOR VARB NAME   50450000
         SR    LNGTHREG,LNGTHREG        CLEAR REGISTER FOR VAR SYM LEN  50500000
         IC    LNGTHREG,D0(,PTR)        GET LENGTH OF VARIABLE SYMBOL   50550000
         EX    LNGTHREG,GSMOVE          MOVE NAME INTO WORK AREA        50600000
         LA    WORK1,GSPRIME            SET UP PTR TO HASH PARAMETERS   50700000
         BAL   WORK2,HASH               LINK TO HASHING RTN             50750000
         L     GDBASE,GDSTRT            GET GBL DIRECTORY BASEADDR      50800000
         AR    GDBASE,HASHGS            DEVELOP HASH TABLE POINTER      50850000
         USING GDNTRY,GDBASE                                            50900000
CHAINON  CLC   GDCP,=FL3'0'             CHECK FOR END OF CHAIN          50950000
         BZ    NTFOUND                  IF FOUND, BRANCH OUT            51000000
         MVC   HIBYTE0+(L'HIBYTE0-L'GDCP)(L'GDCP),GDCP                 X51050000
               GET CHAIN POINTER FROM ENTRY                             51100000
         L     GDBASE,HIBYTE0           PICK UP CHAIN PTR               51150000
         A     GDBASE,GDSTRT            ADD BASE ADDR OF TABLE          51200000
         SR    WORK2,WORK2              CLEAR LENGTH REGISTER           51210000
         IC    WORK2,GDSL               PICK UP ENTRY LENGTH            51220000
         CR    WORK2,LNGTHREG           CHECK FOR EQUAL LENGTHS         51230000
         BNE   CHAINON                  IF NOT, DONT BOTHER MORE        51240000
         EX    LNGTHREG,GSCMP           COMPARE GLOBAL VARIABLES        51250000
         BNE   CHAINON                  BRANCH IF NOT IDENTICAL         51300000
         SET   FNDFLG,ON                INDICATE MATCH FOUND            51350000
         BR    RTNLNK                   RETURN                          51400000
NTFOUND  SET   FNDFLG,OFF               INDICATE NO MATCH FOUND         51450000
         BR    RTNLNK                   RETURN                          51500000
GSMOVE   MVC   JDWORD(D0),D1(PTR)       EXECUTED VARB SYMB MOVE         51550000
GSCMP    CLC   JDWORD(D0),GDSYM+D1      EXECUTED VARB SYMB COMPARE      51600000
         DROP  RCDPTR                                                   51650000
         DROP  GDBASE                                                   51700000
*                                                                       51750000
* THIS SUBROUTINE CONVERTS A SYMBOL PASSED IN JDWORD TO A HASH          51800000
*            TABLE INDEX USING THE PARAMETERS POINTED TO BY WORK1.      51850000
*   IT IS CALLED BY THE FOLLOWING ROUTINES -                          * 51900000
*              ORDREF,ORDSYMBR,SSHASHER,GSHASHER                      * 51950000
*                                                                       52000000
HASH     EQU   *                                                        52050000
         L     PAIRO,JDWORD             PICK UP FIRST HALF OF NAME      52100000
         AL    PAIRO,JDWORD+D4          FOLD SECOND HALF OVER FIRST     52150000
         SR    PAIRE,PAIRE              SET UP REGISTER PAIR            52200000
         D     PAIRE,D0(,WORK1)         DIVIDE BY HASH VALUE            52250000
         N     PAIRE,D4(,WORK1)         APPLY MASK FOR HASH TABLE RANGE 52300000
         LR    PAIRO,PAIRE              SHIFT VALUE FOR MULTIPLY        52350000
         M     PAIRE,=F'3'              DEVELOP TABLE INDEX             52400000
         BR    WORK2                    RETURN                          52450000
*                                                                     * 52500000
* THIS SUBROUTINE GENERATES THE ERROR RECORDS ORIGINATING IN THE      * 52550000
*              INTERLUDE PHASE. IT IS CALLED FROM THE FOLLOWING       * 52600000
*              ROUTINES - GBLDEF, SEQDEF, SEQREF, INITOSR,            * 52650000
*              ORDSYMBR, OPSYNBLD                                     * 52700000
*                                                                     * 52750000
ERLOGER  EQU   *                                                        52800000
         LA    R0,JAMPER                INSERT AMPERSAND FOR VARB SYMB  52850000
ERLOGERZ SR    WORK1,WORK1              CLEAR LENGTH REGISTER           52900000
         IC    WORK1,D0(,WORK2)         PICK UP SYMBOL LENGTH           52950000
         STC   R0,D0(,WORK2)            INSERT AMPERSAND OR PERIOD      53000000
         LA    WORK1,D1(,WORK1)         IN SYMBOL AND ADJUST FOR IT     53050000
         GOIF  OCTS,OFF=MACROMSG        GO TO HANDLE SEPARATE MSGS      53100000
         MVC   ERROTHR,=AL1(JO,JP,JE,JN,JBLANK,JBLANK,JBLANK,JBLANK,JC,X53150000
               JO,JD,JE,JBLANK,JBLANK,JBLANK,JBLANK)                   X53200000
               PUT IN EXTRA STUFF FOR OPEN CODE ERROR                   53250000
         B     ERLOGERA                 PROCEED TO NAME INSERTION       53300000
MACROMSG MVC   ERROTHR,=AL1(JM,JA,JC,JR,JO,JBLANK,JBLANK,JBLANK,JBLANK,X53350000
               JBLANK,JBLANK,JBLANK,JBLANK,JBLANK,JBLANK,JBLANK)       X53400000
               PUT IN EXTRA STUFF AND PAD FOR MACRO DEFINITION ERROR    53450000
         IC    WORK5,MFLAGS             PICK UP MDD ENTRY FLAGS         53500000
         N     WORK5,=F'7'              GET MACRO NAME LENGTH           53550000
         EX    WORK5,MACRNMOV           PUT MACRO NAME IN MESSAGE       53600000
ERLOGERA EQU   *                                                        53650000
         MVC   ERRNAME,=8AL1(JBLANK)    FILL SYMBOL SLOT WITH PAD       53700000
         EX    WORK1,NAMEMVE            PUT ERROR SYMBOL IN BUFFER      53750000
ERLOGERB CLC   JMSGL,D0(RTNLNK)         SEE IF ERROR SHOULD BE LOGGED   53800000
         BH    D2(,RTNLNK)              RETURN DIRECTLY IF NOT          53850000
         CLC   D0(D1,RTNLNK),JSEVER     IS THIS HIGHER                  53900000
         BNH   ERLOGERD                 BRANCH IF NOT                   53910000
         MVC   JSEVER(D1),D0(RTNLNK)    ENTER HIGH                      53920000
ERLOGERD MVC   ERRHDR+D9(D2),D0(RTNLNK) PUT IN ERROR CODE               53930000
         L     WORK1,ERBLKPTR           GET PTR TO NEXT RCD SLOT        53950000
         LA    WORK2,D36(,WORK1)        ADJUST PTR FOR NEW ERROR        54000000
         C     WORK2,COMSTRT            CHECK FOR OVERLAP OF BUFFER     54050000
         BL    ERLOGERC                 BRANCH IF NO OVERLAP            54100000
         MVC   D0(D2,WORK1),=H'0'       PUT END OF BUFFER FLAG IN       54150000
         MVC   PIOPARMA,ERRBLK          SET UP WRITE PARAMETER- ADDRESS 54200000
         MVC   PIOPARMB,=F'190'         SET UP WRITE PARAMETER- LENGTH  54250000
         ST    RTNLNK,ERRLNKSV          PRESERVE RETURN ADDRESS         54300000
         STM   R3,R7,SAVE3456           SAVE CRUCIAL REGISTERS          54350000
         LH    R5,JMAXRL1               SET UP MAXIMUM RECORD LENGTH    54400000
         LA    R6,FILE1                 SET UP FILE POINTER             54450000
         BAL   R7,BUFRITE               LINK TO BUFFERED WRITE RTN      54500000
         LM    R3,R7,SAVE3456           RESTORE REGISTERS               54550000
         L     WORK1,ERRBLK             GET PTR TO ERROR BUFFER         54600000
         MVC   D0(L'JNOTEVAL,WORK1),JNOTEVAL SAVE N/P FOR LINK TO LAST  54650000
         LA    WORK1,D8(,WORK1)         GET OFFSET IN NEW ERROR BUFFER  54700000
         L     RTNLNK,ERRLNKSV          RESTORE RETURN REGISTER         54750000
ERLOGERC MVC   D0(D36,WORK1),ERRHDR     PUT ERROR MSG BUILT INTO BUF    54800000
         LA    WORK1,D36(,WORK1)        ADJUST BUFFER PTR FOR NEW MSG   54850000
         ST    WORK1,ERBLKPTR           SAVE NEW ERROR SLOT PTR         54900000
         B     D2(,RTNLNK)              RETURN TO CALLING RTN           54950000
NAMEMVE  MVC   ERRNAME(D0),D0(WORK2)    EXECUTED ERROR SYMBOL MOVE      55000000
MACRNMOV MVC   ERROTHR+D8(D0),MSYMBL    EXECUTED MACRO NAME MOVE        55050000
*                                                                       55100000
* THIS SUBROUTINE CONVERTS ANY SELF-DEFINING TERM TO A BINARY VALUE.    55150000
*                                                                       55200000
SDTCONV  SR    COUNT,COUNT              CLEAR REG FOR CHAR COUNT        55260000
         LR    RX,COUNT                 CLEAR REG FOR CHAR VALUE        55320000
         STC   TYPE,SHIFTAMT            SAVE SDT TYPE INDICATOR         55400000
SDT01    LA    RY,SDTAB1-D1(TYPE)       GET TTR TO SDT HI CHARACTER     55450000
         CLC   D0(D1,INPTR),D0(RY)      CHECK FOR NEXT CHAR IN RANGE    55500000
         BH    SDT08                    BRANCH IF NOT                   55550000
         IC    RX,D0(,INPTR)            PICK UP NEXT VALID CHAR         55600000
         LR    RY,VALUE                 PRESERVE CURRENT ACCUM VALUE    55650000
         CLI   SHIFTAMT,D8              CHECK FOR CHAR (C) TYPE SDT     55700000
         BNE   SDT04                    BRANCH IF NOT C TYPE            55750000
         CLI   D0(INPTR),JQUOTE         SEE IF CHARACTER A QUOTE        55800000
         BNE   SDT04                    PROCEED IF NOT                  55850000
         CLI   D1(INPTR),JQUOTE         LOOK AHEAD FOR PAIRED QUOTE     55900000
         BNE   SDT08A                   GO TO CHECK LENGTH AND EXIT     55950000
SDT03    LA    INPTR,D1(,INPTR)         BUMP PAST PARING QUOTE          56000000
SDT04    SLL   VALUE,D0(TYPE)           SHIFT ACCUM VALUE 1 PLACE       56050000
         CLI   SHIFTAMT,D3              CHECK FOR DECIMAL SDT           56100000
         BNE   SDT05                    BRANCH IF NOT DECIMAL           56150000
         ALR   VALUE,RY                 DO ADDITIONAL ADJUSTMENT        56200000
         ALR   VALUE,RY                 NECESSARY FOR DECIMAL SDT       56250000
SDT05    ALR   VALUE,RX                 ADD IN NEXT CHARACTER VALUE     56300000
         LA    COUNT,D1(,COUNT)         INCREMENT CHARACTER COUNT       56350000
         LA    INPTR,D1(,INPTR)         BUMP INPUT PTR TO NEXT CHAR     56400000
         CL    INPTR,ENDCOL             SEE IF OPERAND EXCEEDED         56450000
         BNH   SDT01                    GO ON IF STILL OK               56500000
SDT06    SR    COUNT,COUNT              SET COUNT TO NONE               56550000
SDT07    BR    RTNLNK                   RETURN TO CALLING RTN           56600000
SDT08    CLI   SHIFTAMT,D3              CHECK FOR DECIMAL SDT           56650000
         BE    SDT09                    GO TO CHECK LENGTH AND EXIT     56700000
         CLI   D0(INPTR),JQUOTE         LOOK FOR ENDING QUOTE           56750000
         BNE   SDT06                    TREAT AS ERROR IF NONE          56800000
SDT08A   LA    INPTR,D1(,INPTR)         BUMP PAST ENDING QUOTE          56850000
SDT09    IC    RX,SDTAB2-D1(TYPE)       PICK UP LENGTH LIMIT            56900000
         CR    COUNT,RX                 SEE IF SDT LENGTH IN RANGE      56950000
         BH    SDT06                    TREAT AS ERROR IF NOT           57000000
         CLI   SHIFTAMT,D8              CHECK FOR CHARACTER SDT         57010000
         BNER  RTNLNK                   BRANCH OUT IF NOT               57020000
         GOIF  TRANSW,OFF=(RTNLNK)      EXIT IF NO TRANSLATION          57030000
         ST    VALUE,JFWORD1            SET UP VALUE FOR TRANSLATE      57040000
         TR    JFWORD1,JTRTABLE         TRANSLATE IT                    57050000
         L     VALUE,JFWORD1            PICK IT UP FOR CALLER           57060000
         BR    RTNLNK                   RETURN WITH TRANSLATED VALUE    57070000
SDTAB1   DC    X'0100090F000000FF'      SELF-DEFINING TERM              57110000
SDTAB2   DC    X'20000A0800000004'      CONVERSION TABLES               57150000
         EJECT                                                          57200000
SSPRIME  DC    F'71'                    PRIME FOR HASHING SEQ SYMBOLS   57250000
SSHSHMSK DC    XL4'3F'                  MASK FOR HASHING SEQ SYMBOLS    57300000
GSPRIME  DC    F'201'                   PRIME FOR HASHING GBL VARIABLES 57350000
OSPRIME  EQU   GSPRIME                  PRIME FOR HASHING ORD SYMBOLS   57400000
GSHSHMSK DC    XL4'7F'                  MASK FOR HASHING GBL VARIABLES  57450000
OSHSHMSK EQU   GSHSHMSK                 MASK FOR HASHING ORD SYMBOLS    57500000
         EJECT                                                          57550000
*INITOSR - THIS ROUTINE OUTPUTS THE MACRO DEFINITION VECTOR AND       * 57700000
*   INITIALIZES FOR THE ORDINARY SYMBOL RESOLUTION.                   * 57750000
*                                                                     * 57800000
         DS    0H                                                       57850000
INITOSR  EQU   *                                                        57900000
         L     R3,=A(ORDSYMBR)          SET UP BASE FOR SECOND HALF     57950000
         USING ORDSYMBR,R3                                              58000000
         JPOINT FILE=FILE2,NEXT=START   REWIND BEFORE PUTTING MDV       58050000
         MVC   PIOPARMB,MDVLNTH         SET UP MDV LENGTH               58100000
         MVC   PIOPARMA,MDVSTRT         SET UP MDV ADDRESS              58150000
         ST    R3,SAVE3456              SAVE CRUCIAL REGISTER           58200000
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD THIS FILE 58250000
         LA    R6,FILE2                 SET UP FILE POINTER             58300000
         BAL   R7,BUFRITE               GO PUT MDV TO FILE2             58350000
         L     R3,SAVE3456              RESTORE CRUCIAL REGISTER        58400000
         MVC   SAVMDVNP(L'JNOTEVAL),JNOTEVAL SAVE N/P ADDR FOR GENER    58450000
         MVC   SAVMDVLN(L'MDVLNTH),MDVLNTH   SAVE LENGTH FOR GENERATOR  58500000
         MVC   SAVGDLNT(L'GDALLOC),GDALLOC   SAVE GLOBAL DICT SIZE      58550000
         L     REFCNT,OREFCNT           GET NUMBER OF REFERENCES        58600000
         LTR   REFCNT,REFCNT            TEST FOR ZERO                   58650000
         BNZ   OSRDALOC                 IF NOT ZERO, ENTER RESOLUTION   58700000
OSRDXT   XC    SAVOSDLN(D4),SAVOSDLN    INDICATE NO OSRD TO X3N         58750000
         B     OPSYNBLD                 AND SKIP TO OPSYN PROCESSING    58800000
OSRDALOC MH    REFCNT,=H'6'             GET SIZE OF OSRD                58850000
         ST    REFCNT,JFWORD1           SAVE TEMPORARILY AND PUT OSRD   58900000
         MVC   SAVOSDLN(L'JFWORD1),JFWORD1 LENGTH IN COMMON             58950000
         L     WORK2,OSRDSTRT           GET PTR TO DICT AREA            59000000
         LA    WORK3,D0(REFCNT,WORK2)   GET PTR PAST OSRD               59050000
         C     WORK3,MDDSTRT            CHECK FOR TABLE OVERLAP         59100000
         BNH   OSRDGO                   BRANCH IF NOT THE CASE          59150000
         BAL   RTNLNK,ERLOGERB          CALL ERROR LOGGING RTN          59200000
         DC    AL1(SEV64,ERR64)         ERROR PARAMETERS                59250000
         B     WTOMSG                   GO THRU BYPASS OF OSRD @AX14177 59300006
OSRDGO   EQU   *                                                        59350000
CLERLP1  CH    REFCNT,=H'256'           SEE IF ONE MOVE WILL CLEAR IT   59400000
         BH    CLERLP2                  BRANCH IF NOT                   59450000
         SH    REFCNT,=H'2'             ADJUST LENGTH FOR EXECUTED MOVE 59500000
         MVI   D0(WORK2),BITFF          INSERT F'S TO PROPAGATE         59550000
         EX    REFCNT,OSRDCLER          PROPAGATE THRU REST OF DICT     59600000
         B     ORDSYMBR                 GO ON TO RESOLUTION             59650000
CLERLP2  MVI   D0(WORK2),BITFF          INSERT F'S TO PROPAGATE         59700000
         MVC   D1(D255,WORK2),D0(WORK2) PROPAGATE THRU 256 BYTES        59750000
         SH    REFCNT,=H'256'           ADJUST REMAINING DICT LENGTH    59800000
         LA    WORK2,D256(,WORK2)       ADJUST PTR ALSO                 59850000
         B     CLERLP1                  GO BACK THRU TO CLEAR REST      59900000
WTOMSG   WTO   MF=(E,MSG064)                                   @AX14177 59910006
         B     OSRDXT                                          @AX14177 59912006
MSG064   WTO   'IFO064 INTERLUDE DICTIONARY SPACE EXHAUSTED',  @AX14177*59914006
               ROUTCDE=11,MF=L                                 @AX14177 59916006
         EJECT                                                          59920000
         JPATCH X2A00,A20               PATCH AREA                      59940000
         EJECT                                                          59960000
         JCSECT (X2A02)                                                 59980000
ORDSYMBR EQU   *                                                        60060000
         JGETL FILE=FILE3               OTHERWISE, READ NEXT DEF RECD   60150000
         USING ENDFIL,RCDPTR                                            60200000
         CLI   EFILRT,BITFF             CHECK FOR END-OF-FILE           60250000
         BE    OSRDFINI                 IF SO, FINISH UP                60300000
         USING JTEXT,RCDPTR                                             60350000
         GOIF  JPSOP,OFF=GETNAME        BRANCH IF NOT A PSEUDO-OP       60400000
         CLI   JTIOP1,JTEXTRN           SEE IF PSEUDO-OP IS EXTRN       60450000
         BE    ESCAN                    BRANCH IF IT IS, TO GET NAME    60500000
         CLI   JTIOP1,JTWXTRN           SEE IF PSEUDO-OP IS WXTRN       60550000
         BE    ESCAN                    BRANCH IF IT IS, TO GET NAME    60600000
GETNAME  LR    WORK1,RCDPTR             GET START OF TEXT ADDR          60650000
         AH    WORK1,JTNMP              GET START OF NAME FIELD ADDR    60700000
         SR    WORK3,WORK3              CLEAR REGISTER FOR LENGTH       60750000
         IC    WORK3,D1(,WORK1)         PICK UP NAME TRUE LENGTH        60800000
         BCTR  WORK3,D0                 MAKE IT MOVE LENGTH             60850000
         STH   WORK3,JHWORD2            SAVE LENGTH OF NAME             60870000
         XC    JDWORD,JDWORD            CLEAR NAME WORK AREA            60900000
         EX    WORK3,NAMEMV             MOVE NAME FOR HASHING           60950000
HASHNAME LA    WORK1,OSPRIME            GET PTR TO HASHING PARAMETERS   61000000
         BAL   WORK2,HASH               LINK TO SYMBOL HASHING RTN      61050000
         L     OSRTBASE,OSRTSTRT        GET OSRT BASE ADDRESS           61100000
         AR    OSRTBASE,HASHOS          DEVELOP HASH TABLE POINTER      61150000
         USING OSRTNTRY,OSRTBASE                                        61200000
OSLUKUP  CLC   OSRTCP,=FL3'0'           CHECK FOR END OF CHAIN          61250000
         BZ    NGNAME                   IF FOUND, NO MATCH              61300000
         MVC   HIBYTE0+(L'HIBYTE0-L'OSRTCP)(L'OSRTCP),OSRTCP           X61350000
               GET CHAIN POINTER FROM ENTRY                             61400000
         L     OSRTBASE,HIBYTE0         PICK UP CHAIN POINTER           61450000
         A     OSRTBASE,OSRTSTRT        DEVELOP PTR TO NEXT ENTRY       61500000
         SR    WORK1,WORK1              CLEAR REGISTER FOR LENGTH       61550000
         IC    WORK1,OSRTSL             PICK UP ENTRY SYMBOL LENGTH     61600000
         CLR   WORK1,WORK3              COMPARE MOVE LENGTHS            61650000
         BNE   OSLUKUP                  NO MATCH IF UNALIKE             61700000
         EX    WORK1,NAMECM             COMPARE NAMES                   61750000
         BNE   OSLUKUP                  SEARCH ON IF UNALIKE            61800000
         L     OSRDPTR,OSRDSTRT         PICK UP BASE ADDR OF OSRD       61850000
         MVC   HIBYTE0+(L'HIBYTE0-L'OSRTDP)(L'OSRTDP),OSRTDP           X61900000
               GET DICTIONARY POINTER                                   61950000
         A     OSRDPTR,HIBYTE0          DEVELOP PTR TO OSRD ENTRY       62000000
         USING OSRDNTRY,OSRDPTR                                         62050000
         CLC   TATTRIB(L'TATTRIB+L'LATTRIB+L'SATTRIB),=5X'FF'          X62100000
               SEE THAT ATTRIBUTES HAVE NOT ALREADY BEEN ASSIGNED       62150000
         BE    BRONTYP                  BRANCH IF NOT YET SET           62200000
         CLI   TATTRIB,JM               WAS OLD TYPE ATTRIBUTE M        62207000
         BNE   OLDNOTM                  BR IF ANYTHING ELSE             62214000
         GOIF  JTCALL,EQ=ORDSYMBR       ALLOW DUPLICATE NAME ON MI      62221000
CHNGU    MVI   TATTRIB,JU               DUPLICATE NAMES-- MAKE ATTRB U  62228000
         B     ORDSYMBR                 BACK TO CONTINUE                62235000
OLDNOTM  GOIF  JTCALL,EQ=CHNGU          MAKE ATTRB U IF THIS IS MI      62242000
CHKCST   GOIF  JTCSECT,LO=ERRORA        ERROR IF DUPLICATE NAME NOT ON  62250000
         GOIF  JTCOM,HI=ERRORA,ELSE=NGNAME CSECT, DSECT, OR COM STMT    62300000
BRONTYP  EQU   *                                                        62350000
         MVI   ATTRIB,J0                CLEAR ATTRIBUTE DEFAULT FLAGS   62370000
         GOIF  JSUBOPCD,ON=TYPEU1       HANDLE SUBSTITUTED OP CODE      62400000
         GOIF  JPSOP,OFF=TYPEI1         BRANCH IF MACHINE INSTRUCTION   62450000
         GOIF  JTDC,EQ=DCSCAN           BRANCH IF DC STATEMENT          62500000
         GOIF  JTEQU,EQ=EQUSCAN         BRANCH IF EQU STATEMENT         62550000
         GOIF  JTDS,EQ=DSSCAN           BRANCH IF DS STATEMENT          62600000
         GOIF  JTCALL,EQ=TYPEM          BRANCH IF MACRO INSTRUCTION     62650000
         GOIF  JTORG,EQ=TYPEU1          BRANCH IF ORG STATEMENT         62700000
         GOIF  JTEXTRN,EQ=TYPET         BRANCH IF EXTRN STATEMENT       62750000
         GOIF  JTWXTRN,EQ=TYPE$         BRANCH IF WXTRN STATEMENT       62800000
         GOIF  JTSTART,EQ=TYPEJ         BRANCH IF START STATEMENT       62850000
         GOIF  JTLTORG,EQ=TYPEU1        BRANCH IF LTORG STATEMENT       62900000
         GOIF  JTDSECT,EQ=TYPEJ         BRANCH IF DSECT STATEMENT       62950000
         GOIF  JTCSECT,EQ=TYPEJ         BRANCH IF CSECT STATEMENT       63000000
         GOIF  JTCNOP,EQ=TYPEI2         BRANCH IF CNOP STATEMENT        63050000
         GOIF  JTCCW,EQ=TYPEW           BRANCH IF CCW STATEMENT         63100000
         GOIF  JTCOM,EQ=TYPEJ           BRANCH IF COM STATEMENT         63150000
         GOIF  JTCXD,EQ=TYPEU2          BRANCH IF CXD STATEMENT         63200000
         GOIF  JTDXD,EQ=TYPEJ           BRANCH IF DXD STATEMENT         63250000
         B     TYPEU1                   OTHERWISE ASSIGN DEFAULT ATTRS  63350000
ERRORA   EQU   *                                                        63600000
         MVI   TATTRIB,JU               DUPLICATE NAMES-- MAKE ATTRB U  63800000
NGNAME   EQU   *                                                        63850000
         GOIF  JTEXTRN,EQ=ESCANA        GO GET NEXT EXTRN/WXTRN NAME    63900000
         GOIF  JTWXTRN,EQ=ESCANA,ELSE=ORDSYMBR OR NEXT STATEMENT        63950000
CHASER     EQU   *                                                      64050000
ENDCHK   NC    OSRTCP,OSRTCP            SEE IF END OF CHAIN REACHED     64150000
         BZ    NGNAME                   BRANCH IF YES                   64200000
         MVC   HIBYTE0+(L'HIBYTE0-L'OSRTCP)(L'OSRTCP),OSRTCP           X64250000
               GET CHAIN PTR FROM ENTRY                                 64300000
         L     OSRTBASE,HIBYTE0         PICK UP CHAIN POINTER           64350000
         A     OSRTBASE,OSRTSTRT        DEVELOP PTR TO NEXT ENTRY       64400000
         SR    WORK1,WORK1              CLEAR REGISTER FOR LENGTH       64450000
         IC    WORK1,OSRTSL             PICK UP ENTRY SYMBOL LENGTH     64500000
         CLR   WORK1,WORK3              COMPARE MOVE LENGTHS            64550000
         BNE   ENDCHK                   BRANCH IF UNALIKE               64600000
         EX    WORK1,NAMECM             COMPARE NAMES                   64650000
         BNE   ENDCHK                   BRANCH IF UNALIKE               64700000
         L     PAIRO,OSRDSTRT           PICK UP,OSRD BASE ADDRESS       64750000
         MVC   HIBYTE0+(L'HIBYTE0-L'OSRTDP)(L'OSRTDP),OSRTDP           X64800000
                   GET PTR TO OSRD ENTRY FOR DUPLICATE                  64850000
         A     PAIRO,HIBYTE0            DEVELOP DICTIONARY POINTER      64900000
         MVC  D0(L'TATTRIB+L'LATTRIB+L'SATTRIB+L'ATTRIB,PAIRO),TATTRIB X64950000
               PUT SAME ATTRIBUTES IN DUPLICATE ENTRY                   65000000
         B     CHASER                   LOOP BACK FOR MORE              65050000
         EJECT                                                          65100000
TYPEI1   EQU   *                                                        65150000
         MVI   TATTRIB,JI               SET TYPE TO I IN DICT ENTRY     65200000
         SR    PAIRO,PAIRO              CLEAR WORK REGISTER             65250000
         IC    PAIRO,JTFLGA             PICK UP FLAGA BYTE FROM TEXT    65300000
         N     PAIRO,=F'3'              ISOLATE LENGTH BITS             65350000
         LA    PAIRO,D1(,PAIRO)         ADD 1 AND                       65400000
         SLL   PAIRO,D1                 MULTIPLY BY 2 FOR LENGTH        65450000
         STH   PAIRO,JHWORD1            TEMPORARILY SAVE LENGTH AND     65500000
         MVC   LATTRIB,JHWORD1          INSERT INTO DICTIONARY ENTRY    65550000
         B     DEFALTC                  GO ASSIGN SCALE                 65600000
TYPEI2   EQU   *                                                        65650000
         MVI   TATTRIB,JI               SET TYPE TO I IN DICT ENTRY     65700000
DLENGTH  MVC   LATTRIB,=H'1'            PUT DEFAULT LENGTH IN ENTRY     65750000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       65770000
DEFALTC  MVC   SATTRIB,=H'0'            INSERT DEFAULT SCALE ATTRIB     65800000
         SET   SDEFALT,ON               INDICATE DEFAULTED SCALE        65820000
         B     CHASER                   RETURN FOR ADDITNL REFERENCES   65850000
ESCAN    EQU   *                                                        65900000
         SET   ENDSW,OFF                &NITIALIZE FOR NEW STATEMENT    65950000
ESCANB   LR    INPTR,RCDPTR             PICK UP PTR TO STATEMENT        66000000
         AH    INPTR,JTOPP              DEVELOP PTR TO OPERAND          66050000
         CLI   D0(INPTR),J0             LOOK FOR NULL OPERAND           66100000
         BE    ORDSYMBR                 BRANCH IF NO OPERAND            66150000
         TM    D0(INPTR),BIT0           LOOK FOR CARD POINTER           66200000
         BNO   ESCANC                   BRANCH IF NONE PRESENT          66250000
         LA    INPTR,D1(,INPTR)         BUMP PAST CARD POINTER          66300000
ESCANC   LA    INPTR,D2(,INPTR)         GET PTR TO NAME ITSELF          66350000
ESCANA   BAL   RTNLNK,GETXNAM           GO GET A NAME                   66400000
         B     ORDSYMBR                 BRANCH ON NO NAME OR ERROR      66450000
         XC    JDWORD,JDWORD            CLEAR NAME WORK AREA            66500000
         EX    WORK3,MVNAME             PICK UP NAME FOR HASHING        66550000
         B     HASHNAME                 GO HASH NAME                    66600000
DSSCAN   EQU   *                                                        66650000
         MVI   SWITCHB,J0               CLEAR OUT ALL SWITCHES          66700000
         SET   DSSW,ON                  INDICATE DS OPERAND             66750000
         B     DC0                      CONTINUE AS DC                  66800000
DCSCAN   EQU   *                                                        66850000
         MVI   SWITCHB,J0               CLEAR OUT ALL SWITCHES          66900000
         SET   DSSW,OFF                 INDICATE DC OPERAND             66950000
DC0      LH    INPTR,JTOPP              GET DISPL TO OPERAND IN TEXT    67000000
         AR    INPTR,RCDPTR             DEVELOP PTR TO OPERAND          67050000
         CLI   D0(INPTR),J0             CHECK FOR NO OPERAND            67100000
         BE    DEFALTD1                 BRANCH IF NONE                  67150000
         TM    D0(INPTR),BIT0           LOOK FOR CARD POINTER           67200000
         BNO   DC1                      BRANCH IF NONE                  67250000
         LA    INPTR,D1(,INPTR)         BUMP PAST CARD POINTER          67300000
DC1      LA    INPTR,D1(,INPTR)         BUMP PAST COLUMN POINTER        67350000
         SR    ENDPTR,ENDPTR            CLEAR REGISTER FOR END PTR      67400000
         IC    ENDPTR,D0(INPTR)         PICK UP OPERAND LENGTH          67450000
         AR    ENDPTR,INPTR             DEVELOP PTR TO END OF OPERAND   67500000
         AH    ENDPTR,=H'1'             ADJUST FOR BLANK DELIMITER      67550000
         ST    ENDPTR,ENDCOL            SAVE FOR USE IN SCAN LATER      67600000
         LA    INPTR,D1(,INPTR)         BUMP PAST OPERAND LENGTH        67650000
         SR    RZ,RZ                    INITIALIZE WORK REGISTER        67700000
         CLI   D0(INPTR),J9             LOOK FOR DECIMAL DUP FACTOR     67750000
         BH    DC2                      BRANCH IF EXPRESSION            67800000
         BAL   RTNLNK,DECBIN            COLLECT DUP FACTOR              67850000
         B     DC3                      BRANCH,IGNORING DUP FACTOR      67900000
DC2      CLI   D0(INPTR),JLPARN         LOOK FOR LEADING PARENTHESIS    67950000
         BNE   DC3                      BRANCH IF NOT FOUND             68000000
         LA    INPTR,D1(,INPTR)         BUMP PAST LEFT PAREN            68050000
         MVI   DELIMIT,JRPARN           INDICATE LOOKING FOR RIGHT PAR  68100000
         BAL   RTNLNK,OPNDSCAN          GO SCAN OVER EXPRESSION         68150000
         B     DEFALTD1                 BRANCH ON ERROR RETURN          68200000
DC3      CLI   D0(INPTR),JZ             LOOK FOR TYPE CHARACTER HIGH    68250000
         BH    DEFALTD1                 BRANCH IF INVALID TYPE          68300000
         CLI   D0(INPTR),JA             LOOK FOR TYPE CHARACTER LOW     68350000
         BL    DEFALTD1                 BRANCH IF INVALID TYPE          68400000
         IC    RZ,D0(,INPTR)            PICK UP TYPE AS INDEX TO CONTAB 68450000
         IC    RZ,CONTAB-JA(RZ)         PICK UP DISPL IN CONTAB         68500000
         LTR   RZ,RZ                    CHECK FOR ZERO DISPLACEMENT     68550000
         BZ    DEFALTD1                 BRANCH ON INVALID TYPE          68600000
         LA    RZ,CONTAB(RZ)            DEVELOP PTR TO CONSTANT DATA    68650000
         MVC   AWORK(ACHARLMT-AFLAGS+D1),D0(RZ) PUT IN WORK AREA        68700000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      68750000
         CLI   D0(INPTR),JL             LOOK FOR LENGTH MODIFIER CHAR   68800000
         BNE   DC7                      BRANCH IF IMPLICIT LENGTH       68850000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      68900000
         SET   EXLENFLG,ON              SET EXPLICIT LENGTH FLAG ON     68950000
         CLI   D0(INPTR),JPERIOD        LOOK FOR BIT LENGTH INDICATOR   69000000
         BNE   DC4                      BRANCH IF NOT BIT LENGTH        69050000
         CLI   ATYPEAT,STYPE            LOOK FOR STYPE WITH BIT LENGTH  69100000
         BE    DEFALTD2                 BRANCH IF FOUND                 69150000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      69200000
         BAL   RTNLNK,DECBIN            COLLECT BIT LENGTH              69250000
         LTR   RX,RX                    CHECK FOR ZERO BIT LENGTH       69300000
         BZ    DEFALTD2                 BRANCH IF FOUND                 69350000
         LA    RX,D7(,RX)               ROUND BIT LENGTH UP             69400000
         SRL   RX,D3                    DIVIDE BY 8 FOR BYTE LENGTH     69450000
         B     DC6                      BRANCH TO SET LENGTH ATTR       69500000
DC4      CLI   D0(INPTR),J9             LOOK FOR DECIMAL LENGTH MODIF   69550000
         BH    DC8                      BRANCH IF EXPRESSION            69600000
         BAL   RTNLNK,DECBIN            COLLECT LENGTH MODIFIER         69650000
         LTR   RX,RX                    CHECK FOR ZERO LENGTH           69700000
         BZ    DEFALTD2                 BRANCH IF FOUND                 69750000
         CLI   ATYPEAT,STYPE            LOOK FOR S TYPE CONSTANT        69800000
         BNE   DC5                      BRANCH IF NOT FOUND             69850000
         CH    RX,=H'2'                 LOOK FOR EXACT LENGTH OF 2      69900000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             69950000
DC5      CL    RX,=F'65535'             CHECK FOR HIGH LENGTH LIMIT     70000000
         BH    DEFALTD2                 BRANCH IF EXCEEDED              70050000
         CH    RX,ALENMAX               CHECK IF CONSTANT LENGTH LESS   70100000
         BNH   DC6                      BRANCH ON LENGTH OK             70150000
         GOIF  DSSW,OFF=DEFALTD2        BRANCH IF NOT DS OPERAND        70200000
         GOIF  (CHCON,BXCON),OFF=DEFALTD2 BRANCH IF NOT C,X,B TYPE      70250000
         CLI   ATYPEAT,BTYPE            LOOK FOR B TYPE                 70300000
         BE    DEFALTD2                 BRANCH IF FOUND                 70350000
DC6      STH   RX,ALENGTH               STORE LENGTH                    70400000
         GOIF  (ADCON1,ADCON2,FLCON,FXCON),OFF=DC7                     X70450000
               BRANCH IF NOT A,Y,V,S,Q,D,E,L,F,H TYPE                   70500000
         MVC   ATYPEAT,ATYPALT          INSERT TYPE WITH EXPLICIT LENG  70550000
         GOIF  FLCON,OFF=DC7            BRANCH IF NOT D,E,L TYPE        70600000
         AR    RX,RX                    GET SCALE LIMIT WITH EXPL LENG  70650000
         SH    RX,=H'2'                 ALLOW FOR FIRST CHARACTERISTIC  70700000
         CL    RX,=F'16'                LOOK FOR L-CON, LENGTH OVER 8   70750000
         BNH   DC6A                     BRANCH IF NOT THE CASE          70800000
         SH    RX,=H'2'                 ALLOW FOR SECOND CHARACTERISTIC 70850000
DC6A     EQU   *                                                        70900000
         GOIF  DEFLTL,ON=DC7            KEEP STD SCALE MAX ON DEFAULT   70950000
         STH   RX,ASCAMAX               SET SCALE, (LENGTH-1)*2         71000000
DC7      CLI   D0(INPTR),JS             LOOK FOR SCALE MODIFIER CHAR    71050000
         BNE   DC11                     BRANCH IF NOT FOUND             71100000
         GOIF  (FLCON,FXCON),NONE=DEFALTD3 EXIT IF SCALE NOT ALLOWED    71150000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      71200000
         CLI   D0(INPTR),JPLUS          LOOK FOR SCALE SIGN PLUS        71250000
         BE    DC7A                     SIMPLY IGNORE IF FOUND          71300000
         CLI   D0(INPTR),JMINUS         LOOK FOR SCALE SIGN MINUS       71350000
         BNE   DC9                      GO ON IF NO SIGN FOUND          71400000
         GOIF  FXCON,OFF=DEFALTD3       BR IF NEG SCALE ON FLCON        71450000
         SET   NSCALSW,ON               INDICATE SCALE NEGATIVE         71500000
DC7A     LA    INPTR,D1(,INPTR)         BUMP PTR PAST SCALE SIGN        71550000
DC9      CLI   D0(INPTR),J9             LOOK FOR DECIMAL SCALE          71600000
         BH    DEFALTD3                 BR IF NOT DECIMAL               71650000
         BAL   RTNLNK,DECBIN            GO COLLECT SCALE VALUE          71700000
         GOIF  NSCALSW,OFF=DC10         BRANCH IF SCALE POSITIVE        71750000
         LCR   RX,RX                    MAKE SCALE VALUE NEGATIVE       71800000
         CH    RX,=H'-187'              CHECK FOR NEGATIVE LIMIT        71850000
         BL    DEFALTD3                 BR IF EXCEEDED                  71900000
DC10     CH    RX,ASCAMAX               CHECK FOR POSITIVE LIMIT        71950000
         BH    DEFALTD3                 BR IF EXCEEDED                  72000000
         STH   RX,ASCALE                INSERT SCALE ATTRIBUTE          72050000
DC11     CLI   D0(INPTR),JE             LOOK FOR EXPONENT MODIFIER      72100000
         BNE   DC11A                    BRANCH IF NOT FOUND             72150000
         GOIF  (FXCON,FLCON),ANY=DCEXIT, TERMINATE FIXED AND FLOATING  X72200000
               ELSE=DEFALTD2            ERROR FOR ALL OTHER TYPES       72250000
DC11A    CLI   D0(INPTR),JQUOTE         LOOK FOR LEADING QUOTE          72300000
         BNE   DC19                     IF NOT FOUND, MAKE MORE CHECKS  72350000
         GOIF  (FXCON,FLCON),ANY=DCEXIT THRU WITH TYPES F,H,D,E,L       72400000
         GOIF  (ADCON1,ADCON2),ANY=DEFALTD2  ERROR IF TYPES A,S,V,Y,Q   72450000
         GOIF  DCCON,ON=DC13            CONTINUE ON ALL TYPES P,Z       72500000
         GOIF  EXLENFLG,ON=DCEXIT       THRU ON TYPES C,X,B - EXPL LEN  72550000
DC13     SR    RX,RX                    CLEAR LENGTH ACCUMULATOR        72600000
         LR    RY,RX                    CLEAR SCALE ACCUMULATOR         72650000
         LA    INPTR,D1(,INPTR)         BUMP TO FIRST CHARACTER         72700000
DC13A    CLI   D0(INPTR),JQUOTE         LOOK FOR ENDING QUOTE           72750000
         BNE   DC12                     BRANCH IF NOT IT                72800000
         GOIF  CHCON,OFF=DC14           THRU FOR ALL BUT TYPE C         72850000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      72900000
         CLI   D0(INPTR),JQUOTE         LOOK FOR PAIRED QUOTE           72950000
         BNE   DC14                     THRU WITH TYPE C IF NOT FOUND   73000000
DC12     CLC   D0(D1,INPTR),ACHARLMT    CHECK FOR CHARACTER IN RANGE    73050000
         BNH   DC15                     BRANCH IF WITHIN RANGE          73100000
         GOIF  BXCON,ON=DEFALTD2        ERROR IF TYPES B,X              73150000
         CLI   D0(INPTR),JPLUS          LOOK FOR INTERNAL PLUS SIGN     73200000
         BE    DC17                     BRANCH IF FOUND                 73250000
         CLI   D0(INPTR),JMINUS         LOOK FOR INTERNAL MINUS SIGN    73300000
         BE    DC17                     BRANCH IF FOUND                 73350000
         CLI   D0(INPTR),JPERIOD        LOOK FOR INTERNAL DECIMAL PT    73400000
         BE    DC18                     BRANCH IF FOUND                 73450000
         CLI   D0(INPTR),JCOMMA         LOOK FOR MULTIPLE CONSTANT DEL  73500000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             73550000
DC14     STH   RY,ASCALE                INSERT ACCUMULATED SCALE        73600000
         GOIF  EXLENFLG,ON=DCEXIT       THRU IF EXPLICIT LENGTH         73650000
         SR    RY,RY                    CLEAR REGISTER                  73700000
         IC    RY,ARFACT                PICK UP ROUNDING FACTOR         73750000
         AR    RX,RY                    ADD TO ACCUMULATED LENGTH       73800000
         IC    RY,ASFACT                PICK UP SHIFTING FACTOR         73850000
         SRL   RX,D0(RY)                SHIFT TO GET CONSTANT LENGTH    73900000
         LTR   RX,RX                    CHECK FOR LENGTH OF ZERO        73950000
         BNP   DEFALTD2                 BRANCH IF LENGTH ZERO OR NEG    74000000
         CH    RX,ALENMAX               CHECK IF MAXIMUM LEN EXCEEDED   74050000
         BH    DEFALTD2                 BRANCH IF EXCEEDED              74100000
         STH   RX,ALENGTH               INSERT IMPLIED LENGTH           74150000
         B     DCEXIT                   GO COMPLETE ATTRIBUTE INSERTION 74200000
DC15     CLI   D0(INPTR),JAMPER         LOOK FOR AMPERSAND CHARACTER    74250000
         BNE   DC16                     BRANCH IF NOT FOUND             74300000
         CLI   D1(INPTR),JAMPER         LOOK FOR PAIRED AMPERSAND       74350000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             74400000
         LA    INPTR,D1(,INPTR)         IGNORE FIRST AMPERSAND          74450000
DC16     LA    RX,D1(,RX)               ADD 1 TO ACCUMULATED LENGTH     74500000
         GOIF  DCCON,OFF=DC16A          BRANCH ON ALL BUT TYPES P,Z     74550000
         GOIF  SCALEFLG,OFF=DC16A       BRANCH IF DEC PT NOT YET FOUND  74600000
         LA    RY,D1(,RY)               ADD 1 TO ACCUMULATED SCALE      74650000
DC16A    SET   SIGNFLG,ON               DISALLOW ANY FURTHER SIGNS      74700000
         LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT CHARACTER      74750000
         B     DC13A                    LOOP BACK FOR NEXT CHARACTER    74800000
DC17     GOIF  SIGNFLG,ON=DEFALTD2      BRANCH IF SIGN ALREADY FOUND    74850000
         B     DC16A                    CONTINUE OTHERWISE              74900000
DC18     GOIF  SCALEFLG,ON=DEFALTD2     BRANCH IF DEC PT ALREADY FOUND  74950000
         SET   SCALEFLG,ON              INDICATE DEC PT FOUND           75000000
         B     DC16A                    CONTINUE                        75050000
DC19     CLI   D0(INPTR),JLPARN         LOOK FOR LEF PAREN CHARACTER    75100000
         BNE   DC20                     BRANCH IF NOT FOUND             75150000
         GOIF  (ADCON1,ADCON2),ANY=DCEXIT THRU WITH TYPES A,S,V,Y,Q     75200000
         B     DEFALTD2                 ERROR ON ALL OTHER TYPES        75250000
DC20     CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        75300000
         BE    DC21                     BRANCH IF FOUND                 75350000
         CLI   D0(INPTR),JCOMMA         LOOK FOR COMMA DELIMITER        75400000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             75450000
DC21     GOIF  DSSW,ON=DCEXIT,ELSE=DEFALTD2 ERROR EXCEPT ON DS STMT     75500000
DC8      CLI   D0(INPTR),JLPARN         LOOK FOR LEADING PARENTHESIS    75550000
         BNE   DEFALTD2                 BRANCH IF NOT FOUND             75600000
         LA    INPTR,D1(,INPTR)         BUMP PAST LEFT PAREN            75650000
         MVI   DELIMIT,JRPARN           INDICATE LOOKING FOR RIGHT PAR  75700000
         BAL   RTNLNK,OPNDSCAN          GO SCAN OVER EXPRESSION         75750000
         B     DEFALTD2                 BRANCH ON ERROR RETURN          75800000
         LH    RX,=H'1'                 SET UP DEFAULT LENGTH OF 1      75850000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       75870000
         SET   DEFLTL,ON                INDICATE LENGTH DEFAULTED       75900000
         B     DC6                      GO ON WITH DEFAULT LENGTH       75950000
DEFALTD1 MVI   ATYPEAT,JU               SET TYPE TO U                   76000000
DEFALTD2 MVC   ALENGTH,=H'1'            SET LENGTH ATTRIB TO 1          76050000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       76070000
DEFALTD3 MVC   ASCALE,=H'0'             SET SCALE ATTR TO 0             76100000
         SET   SDEFALT,ON               INDICATE DEFAULTED SCALE        76120000
DCEXIT   MVC   TATTRIB(L'TATTRIB+L'LATTRIB+L'SATTRIB),ATYPEAT          X76150000
               PUT ATTRIBUTES INTO OSRD ENTRY                           76200000
         GOIF  (DCCON,FLCON,FXCON),ANY=CHASER BR IF SCALE ALLOWED       76210000
         SET   SDEFALT,ON               INDICATE DEFAULTED SCALE        76220000
         B     CHASER                   GO SCAN FOR DUPLICATES          76250000
EQUSCAN  EQU   *                                                        76300000
         LH    INPTR,JTOPP              GET START OF RECORD ADDR        76350000
         AR    INPTR,RCDPTR             GET START OF OPERAND ADDR       76400000
         CLI   D0(INPTR),J0             SEE IF OPERAND PRESENT          76450000
         BE    DEFALTA                  BRANCH IF NOT                   76500000
         TM    D0(INPTR),BIT0           LOOK FOR CARD POINTER           76550000
         BNO   ES1                      BRANCH IF NONE FOUND            76600000
         LA    INPTR,D1(,INPTR)         BUMP BY CARD POINTER            76650000
ES1      LA    INPTR,D1(,INPTR)         BUMP PAST COLUMN POINTER        76700000
         SR    ENDPTR,ENDPTR            CLEAR REGISTER FOR END PTR      76750000
         IC    ENDPTR,D0(,INPTR)        PICK UP OPERAND LENGTH          76800000
         AR    ENDPTR,INPTR             DEVELOP PTR TO END OF OPERAND   76850000
         AH    ENDPTR,=H'1'             ADJUST FOR BLANK DELIMITER      76900000
         ST    ENDPTR,ENDCOL            SAVE FOR LATER OPERAND SCAN     76950000
         LA    INPTR,D1(,INPTR)         POINT TO START OF OPERAND       77000000
         MVI   DELIMIT,JCOMMA           INDICATE LOOKING FOR COMMA      77050000
         BAL   RTNLNK,OPNDSCAN          GO SCAN OVER FIRST OPERAND      77100000
         B     DEFALTA                  BRANCH ON ERROR                 77150000
         LA    TYPE,D8                  SET UP FOR CHARACTER SDT        77200000
         L     VALUE,=C'0000'           INITIALIZE VALUE REG FOR CHAR   77220000
         CLI   D0(INPTR),JC             SEE IF IT IS ONE                77250000
         BE    ES8                      BRANCH IF SO                    77300000
         SR    VALUE,VALUE              INITIALIZE VALUE REG FOR X,B,D  77320000
         LA    TYPE,D4                  SET UP FOR HEXADEC SDT          77350000
         CLI   D0(INPTR),JX             SEE IF IT IS ONE                77400000
         BE    ES8                      BRANCH IF SO                    77450000
         LA    TYPE,D1                  SET UP FOR BINARY SDT           77500000
         CLI   D0(INPTR),JB             SEE IF IT IS ONE                77550000
         BE    ES8                      BRANCH IF SO                    77600000
         LA    TYPE,D3                  SET UP FOR DECIMAL SDT          77650000
         CLI   D0(INPTR),J9             SEE IF IT IS ONE                77660000
         BH    ES9                      BRANCH IF NOT                   77670000
         B     ES8A                     GO TO CONVERT IT                77700000
ES8      CLI   D1(INPTR),JQUOTE         LOOK FOR LEADING QUOTE          77750000
         BNE   ES9                      BRANCH IF NOT FOUND             77800000
         LA    INPTR,D2(,INPTR)         BUMP TO START OF CONSTANT       77850000
ES8A     LR    RZ,INPTR                 PRESERVE INPUT PTR              77900000
         L     R9,ENDCOL                POINT TO TERMINATOR    @AY19671 77902000
ES8C     BCTR  R9,0                     POINT TO PRECEDING CHAR@AY19671 77904000
         CR    R9,INPTR                 END OF TEST            @AY19671 77906000
         BNH   ES8E                     BR IF YES              @AY19671 77908000
         CLI   D0(R9),J9                TEST FOR DEC SDT       @AY19671 77910000
         BH    ES9                      BR IF NOT              @AY19671 77912000
         B     ES8C                     LOOP FOR NEXT CHARACTER@AY19671 77914000
ES8E     EQU   *                                               @AY19671 77916000
         SET   TRANSW,ON                INDICATE TRANSLATED VALUE REQD  77920000
         BAL   RTNLNK,SDTCONV           LINK TO CONVERT ROUTINE         77950000
         CLI   D0(INPTR),JCOMMA         LOOK FOR COMMA DELIMITER        78000000
         BE    ES2                      BRANCH IF FOUND                 78050000
         CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        78100000
         BE    ES2A                     BRANCH IF FOUND                 78150000
         B     ES3A                     OTHERWISE DEFAULT SITUATION     78200000
ES9      MVI   DELIMIT,JCOMMA           INDICATE LOOKING FOR COMMA      78250000
         BAL   RTNLNK,OPNDSCAN          GO SCAN OVER SECOND OPERAND     78300000
         B     DEFALTA                  BRANCH ON ERROR                 78350000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       78400000
         B     ES3                      GO SET LENGTH 1                 78420000
ES2      LA    INPTR,D1(,INPTR)         BUMP PTR TO NEXT OPERAND        78450000
ES2A     LTR   COUNT,COUNT              SEE IF VALID VALUE GOTTEN       78500000
         BZ    ES3A                     GO WARN OF LENGTH DEFAULT TO 1  78550000
         CLI   SHIFTAMT,D3              CHECK FOR DECIMAL SDT           78600000
         BNE   ES2B                     BRANCH IF NOT DECIMAL           78650000
         CH    COUNT,=H'10'             CHECK FOR MAX LENGTH DEC SDT    78700000
         BNE   ES2B                     BRANCH IF NOT MAX LENGTH        78750000
         CLC   D0(D10,RZ),=X'00000000000605050305' CHECK FOR UPPER LMT  78800000
         BH    ES3A                     BRANCH IF VALUE OUT OF RANGE    78850000
ES2B     C     VALUE,=F'65535'          CHECK FOR LEGITIMATE VALUE      78900000
         BNH   ES4                      BRANCH IF ACCEPTABLE            78950000
ES3A     LA    WORK2,JDWORD             PT TO NAME FIELD OF EQU         78960000
         LH    WORK1,JHWORD2            SET NAME MOVE LENGTH            78968000
         BAL   RTNLNK,ERLOGERA          LOG ERROR                       78976000
         DC    AL1(SEV65,ERR65)         2ND OPERAND NOT IN RANGE        78984000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENGTH       78992000
ES3      LA    VALUE,D1                 ASSIGN DEFAULT LENGTH OF 1      79000000
ES4      STH   VALUE,JHWORD1            TEMPORARILY SAVE LENGTH         79050000
         MVC   LATTRIB,JHWORD1          INSERT INTO OSRD ENTRY          79100000
         CLI   D0(INPTR),JCOMMA         CHECK IF COMMA DELIMITER        79108000
         BNE   ES4A                     BR IF NOT                       79116000
         LA    INPTR,D1(,INPTR)         BUMP OVER COMMA                 79124000
ES4A     CLI   D0(INPTR),JBLANK         SEE IF THERE IS A THIRD         79132000
         BE    DEFALTB                  BR IF NOT                       79140000
         LA    TYPE,D8                  SET UP FOR CHARACTER SDT        79150000
         SR    VALUE,VALUE              INITIALIZE VALUE REG FOR X,B,D  79170000
         CLI   D0(INPTR),JC             SEE IF IT IS ONE                79200000
         BE    ES5                      BRANCH IF SO                    79250000
         LA    TYPE,D4                  SET UP FOR HEXADEC SDT          79300000
         CLI   D0(INPTR),JX             SEE IF IT IS ONE                79350000
         BE    ES5                      BRANCH IF SO                    79400000
         LA    TYPE,D1                  SET UP FOR BINARY SDT           79450000
         CLI   D0(INPTR),JB             SEE IF IT IS ONE                79500000
         BE    ES5                      BRANCH IF SO                    79550000
         LA    TYPE,D3                  SET UP FOR DECIMAL SDT          79600000
         B     ES6                      GO TO CONVERT IT                79650000
ES5      CLI   D1(INPTR),JQUOTE         LOOK FOR LEADING QUOTE          79700000
         BNE   DEFALTT                  BR IF NOT FOUND                 79750000
         LA    INPTR,D2(,INPTR)         BUMP TO START OF CONSTANT       79800000
ES6      LR    RZ,INPTR                 PRESERVE INPUT PTR              79850000
         SET   TRANSW,ON                INDICATE TRANSLATION            79870000
         BAL   RTNLNK,SDTCONV           LINK TO CONVERT ROUTINE         79900000
         ST    VALUE,JFWORD1            SET UP VALUE FOR TRANSLATE      79910000
         TR    JFWORD1,JTRTABLE         TRANSLATE IT                    79920000
         CLI   D0(INPTR),JBLANK         LOOK FOR BLANK DELIMITER        79950000
         BNE   DEFALTT                  BR IF NOT FOUND                 80000000
         LTR   COUNT,COUNT              SEE IF VALID VALUE GOTTEN       80050000
         BZ    ES7B                     BR IF NOT                       80100000
         CLI   SHIFTAMT,D3              CHECK FOR DECIMAL SDT           80150000
         BNE   ES7                      BRANCH IF NOT DECIMAL           80200000
         CH    COUNT,=H'10'             CHECK FOR MAX LENGTH DEC SDT    80250000
         BNE   ES7                      BRANCH IF NOT MAX LENGTH        80300000
         CLC   D0(D10,RZ),=X'00000000000000020505' CHECK FOR UPPER LMT  80350000
         BH    ES7B                     BRANCH IF VALUE OUT OF RANGE    80400000
ES7      CH    VALUE,=H'255'            CHECK FOR LEGITIMATE VALUE      80450000
         BH    ES7B                     BR IF OUT OF RANGE              80500000
ES7A     L     VALUE,JFWORD1            RESTORE IT TRANSLATED           80620000
         STC   VALUE,TATTRIB            ASSIGN TYPE ATTRIBUTE           80630000
         B     DEFALTC                  GO TO FINISH UP                 80650000
ES7B     LA    WORK2,JDWORD             PT TO NAME FIELD OF EQU         80656000
         LH    WORK1,JHWORD2            SET NAME MOVE LENGTH            80662000
         BAL   RTNLNK,ERLOGERA          LOG ERROR                       80668000
         DC    AL1(SEV66,ERR66)         3RD OPERAND NOT IN RANGE        80674000
DEFALTT  EQU   *                                                        80680000
         SET   TDEFALT,ON               INDICATE DEFAULTED TYPE         80686000
         B     DEFALTB                  GO SET TYPE TO U                80692000
DEFALTA  MVC   LATTRIB,=H'1'            SET DEFAULT LENGTH ATTR         80700000
         SET   LDEFALT,ON               INDICATE DEFAULTED LENDTH       80720000
DEFALTB  MVI   TATTRIB,JU               SET TYPE   ATTRIBUTE TO U       80750000
         B     DEFALTC                  GO ASSIGN SCALE                 80800000
TYPEM    EQU   *                                                        80850000
         MVI   TATTRIB,JM               SET TYPE TO M IN DICT ENTRY     80900000
         B     DLENGTH                  GO ASSIGN DEFAULT LENGTH        80950000
TYPEU1   EQU   *                                                        81000000
         MVI   TATTRIB,JU               SET TYPE TO U IN DICT ENTRY     81050000
         MVC   LATTRIB,=H'0'            ASSIGN DEFAULT LENGTH ATTR      81080000
         B     DEFALTC                  GO ASSIGN SCALE                 81110000
TYPEJ    EQU   *                                                        81150000
         MVI   TATTRIB,JJ               SET TYPE TO J IN DICT ENTRY     81200000
         B     DLENGTH                  GO ASSIGN DEFAULT LENGTH        81250000
TYPET    EQU   *                                                        81300000
         MVI   TATTRIB,JT               SET TYPE TO T IN DICT ENTRY     81350000
         B     DLENGTH                  GO ASSIGN DEFAULT LENGTH        81400000
TYPE$    EQU   *                                                        81450000
         MVI   TATTRIB,JDOLLAR          SET TYPE TO $ IN DICT ENTRY     81500000
         B     DLENGTH                  GO ASSIGN DEFAULT LENGTH        81550000
TYPEW    EQU   *                                                        81600000
         MVI   TATTRIB,JW               SET TYPE TO W IN DICT ENTRY     81650000
         MVC   LATTRIB,=X'0008'         PUT LENGTH ATTR IN ENTRY        81700000
         B     DEFALTC                  GO ASSIGN SCALE                 81750000
TYPEU2   EQU   *                                                        81800000
         MVI   TATTRIB,JA               SET TYPE TO A IN DICT ENTRY     81850000
         MVC   LATTRIB,=X'0004'         PUT LENGTH ATTR IN ENTRY        81900000
         B     DEFALTC                  GO ASSIGN SCALE                 81950000
         EJECT                                                          82000000
OSRDFINI MVC   PIOPARMA,OSRDSTRT        SET UP PTR TO OSRD FOR WRITE    82050000
         MVC   PIOPARMB,SAVOSDLN        SET UP OSRD LENGTH FOR WRITE    82100000
         L     WORK1,OSRDSTRT           GET PTR TO START OF TABLE       82150000
         LR    WORK2,WORK1              USE PTR FOR TABLE END CALCULA   82200000
         A     WORK2,PIOPARMB           GET PTR TO END OF TABLE         82250000
         SR    WORK3,WORK3              CLEAR TABLE INDEX INITIALLY     82300000
OSRDLP1  LA    WORK4,D0(WORK3,WORK1)    GET PTR TO NEXT TABLE ENTRY     82350000
         CLR   WORK4,WORK2              SEE IF ENTIRE TABLE SCANNED     82400000
         BNL   OSRDLP3                  BRANCH IF IT HAS BEEN           82450000
         CLC   D0(D5,WORK4),=5X'FF'     LOOK FOR UNPROCESSED ENTRY      82500000
         BNE   OSRDLP2                  BRANCH IF NOT FOUND             82550000
         MVC   D0(D6,WORK4),=AL1(JU,J0,J1,J0,J0,X'70') SET DEFALTS      82600000
OSRDLP2  LA    WORK3,D6(,WORK3)         BUMP INDEX TO NEXT ENTRY        82650000
         B     OSRDLP1                  GO BACK TO START OF LOOP        82700000
OSRDLP3  EQU   *                                                        82750000
         ST    R3,SAVE3456              SAVE NECESSARY REGISTER         82800000
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD THIS FILE 82850000
         LA    R6,FILE2                 SET UP FILE POINTER             82900000
         BAL   R7,BUFRITE               GO PUT OSRD TO FILE 2           82950000
         L     R3,SAVE3456              RESTORE CRUCIAL REGISTER        83000000
         MVC   SAVOSDNP(L'JNOTEVAL),JNOTEVAL SAVE N/P IN COMMON         83050000
         B     OPSYNBLD                 GO PROCESS ANY OPSYN ENTRIES    83100000
OSRDCLER MVC   D1(D0,WORK2),D0(WORK2)   EXECUTED MOVE TO CLEAR OSRD     83150000
NAMEMV   MVC   JDWORD(D0),D2(WORK1)     EXECUTED ORD SYMB MOVE          83200000
NAMECM   CLC   JDWORD(D0),OSRTOS        EXECUTED ORD SYMB COMPARE       83250000
MVNAME   MVC   JDWORD(D0),D0(RX)        EXECUTED NAME MOVE              83300000
         DROP  RCDPTR                                                   83350000
         DROP  OSRTBASE                                                 83400000
         DROP  OSRDPTR                                                  83450000
         EJECT                                                          83500000
OPSYNBLD EQU   *                                                        83550000
         JPOINT FILE=FILE3,NEXT=START   REWIND FILE 3                   83600000
         L     WORK1,FREESTRT           GET PTR TO SPACE FOR TABLE BLD  83650000
         ST    WORK1,PIOPARMA           SAVE ALSO FOR I/O ROUTINE       83700000
         SR    WORK2,WORK2              SET TABLE LENGTH TO ZERO        83750000
         MVC   HIBYTE0,OPSCHAIN         PICK UP OPSYN CHAIN POINTER     83800000
BLDLOP   L     WORK3,MDDND              GET PTR TO TABLE BASE           83850000
         S     WORK3,HIBYTE0            DISPLACE TO FIRST ENTRY         83900000
         C     WORK3,MDDND              SEE IF END OF CHAIN REACHED     83950000
         BE    PUTOPSYN                 BRANCH IF YES                   84000000
         USING OPSYNTRY,WORK3                                           84050000
         USING OPSTBL,WORK1                                             84100000
         GOIF  OMAC,ON=BLDOP1           BRANCH IF THIS IS A MACRO       84120000
         MVC   OPSFLGS(OPSTLNT),OPSYNFLG MOVE OPSYN DATA TO NEW ENTRY   84160000
         LA    WORK2,OPSTLNT(,WORK2)    INCREMENT TABLE LENGTH          84200000
         LA    WORK1,OPSTLNT(,WORK1)    INCREMENT TABLE POINTER         84220000
BLDOP1   EQU   *                                                        84230000
         MVC   HIBYTE0+(L'HIBYTE0-L'OPSYNCH)(L'OPSYNCH),OPSYNCH        X84250000
               PICK UP CHAIN PTR FROM ENTRY                             84300000
         B     BLDLOP                   GO BACK TO START OF SEARCH      84350000
PUTOPSYN LTR   WORK2,WORK2              SEE IF ANY TABLE TO PUT         84400000
         BZ    NOOPSYN                  BRANCH IF NOT                   84450000
         ST    WORK2,PIOPARMB           SET UP TABLE LENGTH FOR I/O     84500000
         MVC   SAVOPTLN(L'PIOPARMB),PIOPARMB SAVE ALSO FOR X3N          84550000
         ST    R3,SAVE3456              SAVE CRUCIAL REGISTER           84600000
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD LENGTH    84650000
         LA    R6,FILE2                 SET UP FILE INDICATOR           84700000
         BAL   R7,BUFRITE               GO TO PUT OPSYN TABLE OUT       84750000
         L     R3,SAVE3456              RESTORE CRUCIAL REGISTER        84800000
         MVC   SAVOPTNP(L'JNOTEVAL),JNOTEVAL SAVE NOTE VALUE FOR X3N    84850000
         B     INTREXIT                 GO EXIT THE PHASE               84900000
NOOPSYN  XC    SAVOPTLN(D4),SAVOPTLN    SET OPSYN TABLE LENGTH TO 0     84950000
         B     INTREXIT                 GO EXIT THE PHASE               85000000
         DROP  WORK3                                                    85050000
         DROP  WORK1                                                    85100000
         EJECT                                                          85150000
*INTREXIT - THIS ROUTINE RELEASES THE WORK SPACE USED BY THE          * 85200000
*   DICTIONARY INTERLUDE PHASE AND TERMINATES THE PHASE.              * 85250000
*                                                                     * 85300000
INTREXIT EQU   *                                                        85350000
         L     WORK3,ERRBLK             GET PTR TO ERROR BUFFER         85500000
         ST    WORK3,PIOPARMA           SET UP I/O AREA START PTR       85520000
         MVC   SAVERRNP(L'JNOTEVAL),D0(WORK3) SAVE LAST ERROR LINK      85550000
         LA    WORK3,D8(,WORK3)         GET PTR TO NEXT ERROR SLOT      85600000
         CL    WORK3,ERBLKPTR           SEE IF ANY ERRORS IN BUFFER     85650000
         BE    IEXIT1                   BRANCH IF NOT                   85700000
         L     WORK3,ERBLKPTR           PICK UP PTR TO NEXT ERROR SLOT  85750000
         MVC   D0(D2,WORK3),=H'0'       INSERT END OF ERRORS FLAG       85800000
         MVC   PIOPARMB,=F'190'         SET UP I/O AREA LENGTH          85870000
         LH    R5,JMAXRL1               SET UP RECORD LENGTH            85950000
         LA    R6,FILE1                 SET UP FILE INDICATOR           86000000
         BAL   R7,BUFRITE               GO TO WRITE BLOCK OF ERRORS     86050000
         MVC   SAVERRNP(L'JNOTEVAL),JNOTEVAL SAVE NEW LAST ERROR LINK   86100000
IEXIT1   EQU   *                                                        86150000
         JNOTE FILE=FILE1               NOTE END OF DICT FILE           86160000
         MVC   SAVOVFPT(L'JNOTEVAL),JNOTEVAL SAVE AS OVERFLOW PTR       86170000
         JFRECORE ADDR=FREESTRT         FREE UP ALL DICT WORK AREA      86200000
INTROUT  JRETURN                        RETURN TO THE DRIVER            86250000
         EJECT                                                          86300000
*                                                                       86350000
* THIS TABLE IS INDEXED INTO USING THE DC/DS TYPE CHARACTER. IF         86400000
*        THE BYTE INDEXED TO IS ZERO, THE TYPE IS INVALID. IF THE       86450000
*        BYTE INDEXED TO IS NON-ZERO, THE BYTE CONTAINS THE DISPLACE-   86500000
*        MENT TO THE TABLE INFORMATION FOR THAT TYPE.                   86550000
*                                                                       86600000
CONTAB   DC    AL1(ACON-CONTAB)         A                               86650000
         DC    AL1(BCON-CONTAB)         B                               86700000
         DC    AL1(CCON-CONTAB)         C                               86750000
         DC    AL1(DCON-CONTAB)         D                               86800000
         DC    AL1(ECON-CONTAB)         E                               86850000
         DC    AL1(FCON-CONTAB)         F                               86900000
         DC    AL1(0)                   G                               86950000
         DC    AL1(HCON-CONTAB)         H                               87000000
         DC    AL1(0)                   I                               87050000
         DC    AL1(0)                   J                               87100000
         DC    AL1(0)                   K                               87150000
         DC    AL1(LCON-CONTAB)         L                               87200000
         DC    AL1(0)                   M                               87250000
         DC    AL1(0)                   N                               87300000
         DC    AL1(0)                   O                               87350000
         DC    AL1(PCON-CONTAB)         P                               87400000
         DC    AL1(QCON-CONTAB)         Q                               87450000
         DC    AL1(0)                   R                               87500000
         DC    AL1(SCON-CONTAB)         S                               87550000
         DC    AL1(0)                   T                               87600000
         DC    AL1(0)                   U                               87650000
         DC    AL1(VCON-CONTAB)         V                               87700000
         DC    AL1(0)                   W                               87750000
         DC    AL1(XCON-CONTAB)         X                               87800000
         DC    AL1(YCON-CONTAB)         Y                               87850000
         DC    AL1(ZCON-CONTAB)         Z                               87900000
*                                                                       87950000
* THIS TABLE CONTAINS THE DATA FOR EACH DC/DS TYPE NECESSARY TO         88000000
*        COLLECT AND VERIFY THE TYPE, LENGTH, AND SCALE ATTRIBUTES.     88050000
*                                                                       88100000
ACON     DC    AL1(128)                 TYPE A  FLAGS                   88150000
         DC    AL1(ATYPE)                       TYPE ATTR               88200000
         DC    AL2(4)                           LENGTH ATTR             88250000
         DC    AL2(0)                           SCALE ATTR              88300000
         DC    AL2(4)                           LENGTH MAXIMUM          88350000
         DC    AL2(0)                           SCALE MAXIMUM           88400000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     88450000
BCON     DC    AL1(16)                  TYPE B  FLAGS                   88500000
         DC    AL1(BTYPE)                       TYPE ATTR               88550000
         DC    AL2(1)                           LENGTH ATTR     OX00408 88600001
         DC    AL2(0)                           SCALE ATTR              88650000
         DC    AL2(256)                         LENGTH MAXIMUM          88700000
         DC    AL2(0)                           SCALE MAXIMUM           88750000
         DC    AL1(7)                           ROUNDING FACTOR         88800000
         DC    AL1(3)                           SHIFTING FACTOR         88850000
         DC    AL1(1)                           CHARACTER HIGH LIMIT    88900000
CCON     DC    AL1(32)                  TYPE C  FLAGS                   88950000
         DC    AL1(CTYPE)                       TYPE ATTR               89000000
         DC    AL2(1)                           LENGTH ATTR     OX00408 89050001
         DC    AL2(0)                           SCALE ATTR              89100000
         DC    AL2(256)                         LENGTH MAXIMUM          89150000
         DC    AL2(0)                           SCALE MAXIMUM           89200000
         DC    AL1(0)                           ROUNDING FACTOR         89250000
         DC    AL1(0)                           SHIFTING FACTOR         89300000
         DC    AL1(255)                         CHARACTER HIGH LIMIT    89350000
DCON     DC    AL1(4)                   TYPE D  FLAGS                   89400000
         DC    AL1(DTYPE)                       TYPE ATTR               89450000
         DC    AL2(8)                           LENGTH ATTR             89500000
         DC    AL2(0)                           SCALE ATTR              89550000
         DC    AL2(8)                           LENGTH MAXIMUM          89600000
         DC    AL2(14)                          SCALE MAXIMUM           89650000
         DC    AL1(KTYPE)                       ALTERNATE TYPE ATTR     89700000
ECON     DC    AL1(4)                   TYPE E  FLAGS                   89750000
         DC    AL1(ETYPE)                       TYPE ATTR               89800000
         DC    AL2(4)                           LENGTH ATTR             89850000
         DC    AL2(0)                           SCALE ATTR              89900000
         DC    AL2(8)                           LENGTH MAXIMUM          89950000
         DC    AL2(14)                          SCALE MAXIMUM           90000000
         DC    AL1(KTYPE)                       ALTERNATE TYPE ATTR     90050000
FCON     DC    AL1(2)                   TYPE F  FLAGS                   90100000
         DC    AL1(FTYPE)                       TYPE ATTR               90150000
         DC    AL2(4)                           LENGTH ATTR             90200000
         DC    AL2(0)                           SCALE ATTR              90250000
         DC    AL2(8)                           LENGTH MAXIMUM          90300000
         DC    AL2(346)                         SCALE MAXIMUM           90350000
         DC    AL1(GTYPE)                       ALTERNATE TYPE ATTR     90400000
HCON     DC    AL1(2)                   TYPE H  FLAGS                   90450000
         DC    AL1(HTYPE)                       TYPE ATTR               90500000
         DC    AL2(2)                           LENGTH ATTR             90550000
         DC    AL2(0)                           SCALE ATTR              90600000
         DC    AL2(8)                           LENGTH MAXIMUM          90650000
         DC    AL2(346)                         SCALE MAXIMUM           90700000
         DC    AL1(GTYPE)                       ALTERNATE TYPE ATTR     90750000
LCON     DC    AL1(4)                   TYPE L  FLAGS                   90800000
         DC    AL1(LTYPE)                       TYPE ATTR               90850000
         DC    AL2(16)                          LENGTH ATTR             90900000
         DC    AL2(0)                           SCALE ATTR              90950000
         DC    AL2(16)                          LENGTH MAXIMUM          91000000
         DC    AL2(28)                          SCALE MAXIMUM           91050000
         DC    AL1(KTYPE)                       ALTERNATE TYPE ATTR     91100000
PCON     DC    AL1(8)                   TYPE P FLAGS                    91150000
         DC    AL1(PTYPE)                       TYPE ATTR               91200000
         DC    AL2(1)                           LENGTH ATTR     OX00408 91250001
         DC    AL2(0)                           SCALE ATTR              91300000
         DC    AL2(16)                          LENGTH MAXIMUM          91350000
         DC    AL2(31)                          SCALE MAXIMUM           91400000
         DC    AL1(2)                           ROUNDING FACTOR         91450000
         DC    AL1(1)                           SHIFTING FACTOR         91500000
         DC    AL1(9)                           CHARACTER HIGH LIMIT    91550000
QCON     DC    AL1(64)                  TYPE Q FLAGS                    91600000
         DC    AL1(QTYPE)                       TYPE ATTR               91650000
         DC    AL2(4)                           LENGTH ATTR             91700000
         DC    AL2(0)                           SCALE ATTR              91750000
         DC    AL2(4)                           LENGTH MAXIMUM          91800000
         DC    AL2(0)                           SCALE MAXIMUM           91850000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     91900000
SCON     DC    AL1(128)                 TYPE S  FLAGS                   91950000
         DC    AL1(STYPE)                       TYPE ATTR               92000000
         DC    AL2(2)                           LENGTH ATTR             92050000
         DC    AL2(0)                           SCALE ATTR              92100000
         DC    AL2(2)                           LENGTH MAXIMUM          92150000
         DC    AL2(0)                           SCALE MAXIMUM           92200000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     92250000
VCON     DC    AL1(128)                 TYPE V  FLAGS                   92300000
         DC    AL1(VTYPE)                       TYPE ATTR               92350000
         DC    AL2(4)                           LENGTH ATTR             92400000
         DC    AL2(0)                           SCALE ATTR              92450000
         DC    AL2(4)                           LENGTH MAXIMUM          92500000
         DC    AL2(0)                           SCALE MAXIMUM           92550000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     92600000
XCON     DC    AL1(16)                  TYPE X  FLAGS                   92650000
         DC    AL1(XTYPE)                       TYPE ATTR               92700000
         DC    AL2(1)                           LENGTH ATTR     OX00408 92750001
         DC    AL2(0)                           SCALE ATTR              92800000
         DC    AL2(256)                         LENGTH MAXIMUM          92850000
         DC    AL2(0)                           SCALE MAXIMUM           92900000
         DC    AL1(1)                           ROUNDING FACTOR         92950000
         DC    AL1(1)                           SHIFTING FACTOR         93000000
         DC    AL1(15)                          CHARACTER HIGH LIMIT    93050000
YCON     DC    AL1(128)                 TYPE Y  FLAGS                   93100000
         DC    AL1(YTYPE)                       TYPE ATTR               93150000
         DC    AL2(2)                           LENGTH ATTR             93200000
         DC    AL2(0)                           SCALE ATTR              93250000
         DC    AL2(2)                           LENGTH MAXIMUM          93300000
         DC    AL2(0)                           SCALE MAXIMUM           93350000
         DC    AL1(RTYPE)                       ALTERNATE TYPE ATTR     93400000
ZCON     DC    AL1(8)                   TYPE Z  FLAGS                   93450000
         DC    AL1(ZTYPE)                       TYPE ATTR               93500000
         DC    AL2(1)                           LENGTH ATTR     OX00408 93550001
         DC    AL2(0)                           SCALE ATTR              93600000
         DC    AL2(16)                          LENGTH MAXIMUM          93650000
         DC    AL2(16)                          SCALE MAXIMUM           93700000
         DC    AL1(0)                           ROUNDING FACTOR         93750000
         DC    AL1(0)                           SHIFTING FACTOR         93800000
         DC    AL1(9)                           CHARACTER HIGH LIMIT    93850000
         EJECT                                                          93900000
         JPATCH X2A02,A20                                               94000000
         END   INTRENTR                                                 94100000
./  ADD  SSI=71710239,NAME=IFNX3A
         MACRO                                                          00030000
&NAME    DICTCALL &ENTRY,&POINTER=DICTBASE                              00060000
&NAME    L     R12,&POINTER             SET UP DICT RTN ENTRY ADDR      00090000
         MVI   NDXVAL,&ENTRY            INDICATE ENTRY BEING MADE       00120000
         BALR  R9,R12                   LINK TO DICTIONARY ROUTINE      00150000
         MEND                                                           00180000
         SPACE 3                                                        00210000
         MACRO                                                          00240000
         GENOPS &OP                                                     00270000
         ORG   MOPTABLE+2*JT&OP         ORIGIN TO OP CODES SLOT IN TBL  00300000
         AIF   (K'&SYSLIST(2) EQ 0).STEP2                               00330000
         DC    Y(&SYSLIST(2)-MOPRTNS)   DUMMY ENTRY                     00360000
         MEXIT                                                          00390000
.STEP2   AIF   ('&OP'(1,1) EQ 'M').M                                    00420000
         DC    Y(M&OP-MOPRTNS)          OP CODES ENTRY IN BRANCH TABLE  00450000
         MEXIT                                                          00480000
.M       DC    Y(&OP-MOPRTNS)           OP CODE'S ENTRY IN BRANCH TABLE 00510000
         MEND                                                           00540000
         SPACE 3                                                        00570000
         MACRO                                                          00600000
         OPS   &OP                                                      00630000
         ORG   OPTAB+2*JTM&OP           ORIGIN TO OPERATOR SLOT IN TBL  00660000
         DC    Y(EVAL&OP-EVALOPS)        OPERATOR ENTRY IN BRANCH TABLE 00690000
         SPACE                                                          00720000
         MEND                                                           00750000
         EJECT                                                          00780000
         JHEAD 'XKE MACRO GENERATOR',                                  X00810000
               PHASEID=X3A,                                            X00840000
               LEVEL=10                                                 00870000
*                                                                     * 00900000
*FUNCTION/OPERATION-                                                  * 00930000
*   READS EDITED TEXT FOR MAINLINE CODE AND MACRO DEFINITIONS, WITH   * 00960000
*   THEIR DICTIONARIES, INTERPRETIVELY EXECUTES MACRO LANGUAGE PSEUDO-* 00990000
*   OPS TO PRODUCE LOGICAL SOURCE LANGUAGE FOR INPUT TO THE ASSEMBLY  * 01020000
*   PROCESS.  PERFORMS MACRO EXPANSION AND VARIABLE SYMBOL SUBSTITU-  * 01050000
*   TION.  MAPS TEXT INTO INTERNAL EVALUATION NOTATION FOR ASSEMBLY   * 01080000
*   PROCESS.  OUTPUTS TEXT AND SYMBOL RESOLUTION INFORMATION FOR ASSEM* 01110000
*   BLY PROCESSING.                                                   * 01140000
*                                                                     * 01170000
*ENTRY POINTS-                                                        * 01200000
*        MENTRY--ONLY ENTRY POINT                                     * 01230000
*                                                                     * 01260000
*INPUT-                                                               * 01290000
*        FILE1--EDITED TEXT FOR MAINLINE AND MACRO DEFINITIONS, WITH  * 01320000
*   CORRESPONDING DICTIONARIES.                                       * 01350000
*                                                                     * 01380000
*OUTPUT-                                                              * 01410000
*        FILE2--TEXT POST GENERATION                                  * 01440000
*        FILE3--SYMBOL DEFINITION AND SYMBOL REFERENCE INFORMATION    * 01470000
*                                                                     * 01500000
*EXTERNAL ROUTINES-                                                   * 01530000
*   USES ASSEMBLER SERVICES IN ROOT MODULE.                           * 01560000
*                                                                     * 01590000
*EXITS-                                                               * 01620000
*   NORMAL--JRETURN TO CONTROLLER WITH COMPLETION CODE OF X'00' IN    * 01650000
*   PARAMETER REGISTER R10.                                           * 01680000
*   ERROR--JRETURN TO CONTROLLER WITH COMPLETION CODE OF X'04' IN     * 01710000
*   PARAMETER REGISTER R10.                                           * 01740000
***********ALSO PROVIDE FOR NO TEXT AND NO SYMBOL CONDITIONS*********** 01770000
*                                                                     * 01800000
*TABLES/WORK AREAS-                                                   * 01830000
*        *********************** TO BE DOCUMENTED WHEN DEFINED********* 01860000
*                                                                     * 01890000
*        MOPTABLE--BRANCH TABLE FOR GENERATOR OPERATIONS              * 01920000
         EJECT                                                          01950000
         COPY  JCOMMON                  INCLUDES USING FOR COMMON       01980000
         EJECT                                                          02010000
         COPY  JTEXT                                                    02040000
         EJECT                                                          02070000
MTEXT    DSECT ,                        COPY OF JTEXT FOR OUTPUT        02100000
         SPACE                                                          02130000
MTRLI    DS    H                        RECORD LENGTH                   02160000
MTFLGA   DSW   MPSOP                    FLAGA PSEUDO-OP FLAG            02190000
MTFLGB   DSW   MPRONLY,                 FLAGB PRINT ONLY SWITCH        X02220000
               MERR,                    DEAD STATEMENT                 X02250000
               MNOCNT,                  DON'T COUNT                    X02280000
               MGEN,                    GENERATED                      X02310000
               MNMERR                   INVALID NAME FIELD              02340000
MTIOP    DS    0H                       OP CODE                         02370000
MTIOP1   DS    1X                       1ST BYTE                        02400000
MTIOP2   DS    X                        2ND BYTE                        02460000
MTNMP    DS    H                        NAME POINTER                    02490000
MTOCP    DS    H                        MNEMONIC POINTER                02520000
MTOPP    DS    H                        OPERAND POINTER                 02550000
MTCPR    DS    H                        COMMENTS POINTER                02580000
MTSPR    DS    H                        STRING POINTER                  02610000
MTFLGC   DS    C                        FLAG C                  OX00407 02620001
MTSYMCNT DS    C                        NUMBER OF OPERAND SYMBOLS       02640000
MTHDREND EQU   *                        END OF HEADER                   02670000
MTHDRLN  EQU   MTHDREND-MTEXT           LENGTH OF HEADER                02700000
         SPACE                                                          02730000
MTEXTA   DSECT ,                        VARIABLE PORTION--OUTPUT        02760000
         SPACE                                                          02790000
MTNMO    DSW   ,                        NAME CARD POINTER               02820000
MTNML    DS    C                        NAME LENGTH                     02850000
MTNAME   EQU   *                        NAME                            02880000
         ORG   MTNMO                    BACK TO START FOR RE-MAP        02910000
MTOCO    DSW   ,                        MNEMONIC CARD POINTER           02940000
MTOCL    DS    C                        MNEMONIC LENGTH                 02970000
MTOPCD   EQU   *                        MNEMONIC                        03000000
         ORG   MTNMO                    BACK AGAIN FOR RE-MAP           03030000
MTOPO    DSW   ,                        OPERAND CARD POINTER            03060000
MTOPL    DS    C                        OPERAND LENGTH                  03090000
MTOPND   EQU   *                        OPERAND                         03120000
         ORG   MTNMO                    BACK FOR RE-MAP                 03150000
MTCOP    DS    C                        COMMENT OUTPUT POINTER          03180000
MTCML    DS    C                        COMMENT LENGTH                  03210000
MTCMM    EQU   *                        COMMENT                         03240000
         ORG   MTNMO                    BACK AGAIN                      03270000
MTSTC    DS    C                        STRING COUNT                    03300000
MTSTO    DS    C                        STRING1 POINTER                 03330000
MTSTL    DS    C                        STRING1 LENGTH                  03360000
MTSTR    EQU   *                        STRING1                         03390000
         ORG   MTNMO                    ORG BACK FOR NEXT STRING        03420000
MTSTO2   DS    C                        STRING2 POINTER                 03450000
MTSTL2   DS    C                        STRING2 LENGTH                  03480000
MTSTR2   EQU   *                        STRING2                         03510000
         SPACE 3                                                        03540000
PARMTAB  DSECT ,                        MAP OF PARAMETER TABLE ENTRIES  03570000
         SPACE                                                          03600000
PFLAG    DSW   PSUB,                    SUB-OPERAND (ALL)              X03630000
               PSUBL,                   SUB-OPERAND (LAST)             X03660000
               PSUBF,                   SUB-OPERAND (FIRST)            X03690000
               PPASS,                   PASSED PARAMETER               X03720000
               POMIT,                   OMITTED OPERAND                X03750000
               POS,                     ORDINARY SYMBOL                X03780000
               PSDT,                    SELF-DEFINING TERM             X03810000
               PCHAR                    CHARACTER STRING                03840000
         SPACE                                                          03870000
PCS      EQU   *                        PARAMETER--CHARACTER STRING     03900000
PTAT     DS    C                        TYPE ATTRIBUTE                  03930000
PPAD     DS    4C                       PAD                             03960000
         DS    C                        DEFAULT BITS                    03970000
PKAT     DS    C                        COUNT ATTRIBUTE (LENGTH)        03990000
PSTRING  EQU   *                        STRING START                    04020000
         ORG   PCS                      RE-SET FOR NEXT MAP             04050000
*PSDT    EQU   *                        SELF DEFINING TERM              04080000
         DS    C                        TYPE ATTRIBUTE                  04110000
PVAL     DS    4C                       VALUE                           04140000
         ORG   PCS                      NEXT MAP                        04170000
*POS     EQU   *                        ORDINARY SYMBOL REFERENCE       04200000
         DS    C                        TYPE                            04230000
PLAT     DS    2C                       LENGTH ATTRIBUTE                04260000
PSAT     DS    2C                       SCALE ATTRIBUTE                 04290000
ATTRIB   DSW   TDEFALT,                 TYPE ATTRIBUTE IS DEFAULT VALUEX04296000
               LDEFALT,                 SAME FOR LENGTH                X04302000
               SDEFALT,                 SAME FOR SCALE                 X04308000
               UDEFALT                  UNDEFINED SYMBOL                04314000
         ORG   PCS                      NEXT MAP                        04320000
*POM     EQU   *                        OMITTED--SAME AS PCS            04350000
*PSUB    EQU   *                        SUBLIST HEADER                  04380000
         DS    C                        TYPE                            04410000
PLATSUB  DS    2C                       LENGTH ATTRIBUTE                04440000
PSATSUB  DS    2C                       SCALE ATTRIBUTE                 04470000
         ORG   PLATSUB                  ORIGIN TWO                      04500000
PVALSUB  DS    4C                       VALUE                           04530000
PNAT     DS    2C                       NUMBER ATTRIBUTE--COUNT OF     X04560000
                                          SUBOPERANDS                   04590000
PKATSUB  DS    2C                       TOTAL COUNT OF ALL CHARACTERS  X04620000
                                          LESS DELIMITING COMMAS AND   X04650000
                                          PARENS.                       04680000
PLIST    DS    3C                       VECTOR LIST POINTER.            04710000
         EJECT                                                          04740000
RSYMRCD  DSECT                                                          04770000
         COPY  RSYMRCD                  SYMBOL PHASE RECORD DSECT HERE  04800000
         EJECT                                                          04830000
         COPY  GENCOM                                                   04860000
GENCOMLN EQU   (GENCOM99-GENCOM+7)/8    MODULE COMMON LENGTH IN        X04890000
                                                       DOUBLE WORDS     04920000
         EJECT                                                          04950000
         COPY  JTMTXT                                                   04980000
*                                                                       05010000
*        OP CODE TABLE ENTRY MAP                                        05040000
*                                                                       05070000
         SPACE                                                          05100000
OPNTRY   DSECT                                                          05130000
OCHAIN   DS    XL2                      CHAIN POINTER                   05160000
OFLAGS   DS    X                        FLAGS                           05190000
OMNEM    EQU   *                        MNEMONIC                        05220000
         ORG   OPNTRY                   DUMMY FOR POST VARIABLE FIELD   05250000
OFLAGA   DS    X                        FLAGA                           05280000
OINTCD   DS    X                        INTERNAL OP CODE                05310000
OINTCD2  DS    X                        OP CODE BYTE 2                  05340000
OMASK    EQU   OINTCD2                  ESTENDED MNEMONIC MASK          05370000
         COPY  JERRCD                                                   05400000
ERRMESS  DSECT                                                          05430000
EMSGSVTY DS    C                        ERROR SEVERITY CODE             05460000
EMSGCODE DS    C                        ERROR NUMBER                    05490000
EMSGHL   EQU   *-EMSGSVTY               LENGTH FOR SEVERITY NUMBER      05520000
ENTRYLNG DS    C                        SNAPSHOT/DATA LENGTH            05550000
EMSGNTRY DS    CL8                      SNAPSHOT/DATA                   05580000
*                                                                       05610000
* THIS DSECT MAPS THE OPSYN TABLE ENTRY                                 05640000
*                                                                       05670000
OPSYNTRY DSECT                                                          05700000
OPSYNFLG DSW   ,,,,                     SPACE FOR OPCODE FLAGS         X05720000
               OMAC,                    OPSYN MACRO (NOT USED HERE)    X05740000
               ODEL                     DELETED                         05760000
OPSYNATT DS    XL3                      ATTRIBUTES                      05780000
ONAMEL   DS    XL1                      NAME LENGTH                     05800000
ONAME    DS    XL8                      NAME                            05820000
OPSYND   EQU   *                                                        05850000
         EJECT                                                          05880000
X3000    DSECT                                                          05910000
         SPACE 3                                                        05940000
*EQUATES TO BE USED IN SHIFT-MULTIPLY OPERATIONS                        05970000
         SPACE                                                          06000000
TIMES1   EQU   0                                                        06030000
TIMES2   EQU   1                                                        06060000
TIMES4   EQU   2                                                        06090000
TIMES8   EQU   3                                                        06120000
TIMES16  EQU   4                                                        06150000
TIMES32  EQU   5                                                        06180000
TIMES64  EQU   6                                                        06210000
TIMES128 EQU   7                                                        06240000
TIMES256 EQU   8                                                        06270000
         SPACE 3                                                        06300000
*        REGISTERS                                                      06330000
         SPACE                                                          06360000
INDEX1   EQU   R14                      SCRATCH USED AS TEMPORARY INDEX 06390000
INDEX2   EQU   R15                                                      06420000
RETURN   EQU   R9                       RETURN REGISTER AFTER LINK      06450000
SYMPTR   EQU   R11                      FIXED SYMBOL RECORD BASE        06480000
SYMPTR2  EQU   R4                       VARIABLE SYMBOL RECORD BASE     06510000
FLDPTR   EQU   R2                       MOVEABLE TEXT POINTER--LOCTR    06540000
FLDLN    EQU   R2                       LENGTH REGISTER--EVAL           06570000
RMOVE    EQU   R3                       EXECUTED MOVE REGISTER--KEEP   X06600000
                                          CLEAR.                        06630000
EVEN     EQU   R2                         EVEN--                        06660000
ODD      EQU   R3                             ODD PAIR                  06690000
RCOMP0   EQU   R0                       SCRATCH AS NEEDED               06720000
RCOMPX   EQU   R2                       NON-VOLATILE COMP REG           06750000
STACKPTR EQU   R5                       CURRENT EVAL STACK LEVEL        06780000
INPTR    EQU   R5                       JTEXT INPUT POINTER             06810000
RCOMP1   EQU   R1                       SCRATCH COMPUTATION REGISTER    06840000
RLOCTR   EQU   R6                       LOCATION COUNTER SEGMENT        06870000
VTXTPTR  EQU   R6                       VARIABLE PORTION OF TEXT        06900000
FTXTPTR  EQU   INPTR                    FIXED PORTION OF TEXT           06930000
SYMLEN   EQU   R4                       SYMBOL LENGTH                   06960000
FTXTIN   EQU   R5                                                       06990000
VTXTIN   EQU   R6                                                       07020000
FTXTOUT  EQU   R11                                                      07050000
VTXTOUT  EQU   R4                                                       07080000
HEDRPTR  EQU   FLDPTR                   PARAMETER HEADER                07110000
METAPTR  EQU   VTXTIN                   PARAMETER META TEXT             07140000
         SPACE                                                          07170000
*        LANGUAGE DEPENDENT VALUES                                      07200000
         SPACE                                                          07230000
MAXDEC   EQU   10                       MAXIMUM DIGITS CONVERTIBLE     X07260000
                                          CHARACTER TO BINARY.          07290000
MAXNAME  EQU   8                        MAXIMUM SYMBOL LENGTH           07320000
HIALPHA  EQU   JAT                      LAST ALPHABETIC CHARACTER       07350000
LOALPHA  EQU   JA                       FIRST ALPHABETIC CHARACTER      07380000
HINUM    EQU   J9                                                       07410000
LONUM    EQU   J0                                                       07440000
HIALNUM  EQU   HIALPHA                                                  07470000
LOALNUM  EQU   LONUM                                                    07500000
         SPACE                                                          07530000
*        SYSTEM TO GENERATOR TEXT FILE EQUATES                          07560000
         SPACE                                                          07590000
GTFILE   EQU   FILE2                    GENERATED TEXT FILE             07620000
PMTFILE  EQU   FILE1                    PROGRAMMER MACRO TEXT           07650000
SMTFILE  EQU   FILE1                    SYSTEM MACRO TEXT FILE          07680000
DFILE    EQU   FILE1                    DICTIONARY FILE                 07710000
SDFILE   EQU   FILE3                    SYMBOL DEFINITION FILE          07740000
SRFILE   EQU   FILE3                    SYMBOL REFERENCE FILE           07770000
         SPACE                                                          07800000
*        GENERATOR LIMITING EQUATES--MAY BE CHANGED TO INCREASE NON    X07830000
                                        LANGUAGE DEPENDENT LIMITS.      07860000
         SPACE                                                          07890000
MAXREC   EQU   256                      MAXIMUM RECORD SIZE             07920000
MAXSTRNG EQU   17                       MAXIMUM PRE-BEGIN POST-END SIZE 07950000
MAXSYM   EQU   MAXNAME                  MAXIMUM SYMBOL LENGTH           07980000
MAXCHAR  EQU   255                      MAXIMUM CHARACTER STRING        08010000
MAXGENLN EQU   298                                                      08040000
D256     EQU   256                      MAXIMUM MOVE LENGTH             08050000
         SPACE                                                          08070000
*        DICTIONARY ROUTINE ENTRY PARAMETERS                            08100000
         SPACE                                                          08130000
PHASENTR EQU   0                                                        08160000
MACRCALL EQU   2                                                        08190000
CALLEND  EQU   4                                                        08220000
MACRKWRD EQU   6                                                        08250000
MACRPOST EQU   8                                                        08280000
PROTOKWD EQU   10                                                       08310000
PROTOEND EQU   12                                                       08340000
GBLDICTR EQU   14                                                       08370000
GBLDICTS EQU   16                                                       08400000
LCLDICTR EQU   18                                                       08430000
LCLDICTS EQU   20                                                       08460000
PARMTBLR EQU   22                                                       08490000
SEQSYMBR EQU   24                                                       08520000
ORDSYMBR EQU   26                                                       08550000
MACRFINI EQU   28                                                       08580000
         EJECT                                                          08610000
         COPY  JERMSGCD                                                 08640000
         EJECT                                                          08670000
         JCSECT (X3A00)                                                 08700000
* VS1 RELEASE 3 CHANGES                                                 08710001
*A026200,192400-192867                                         @OX00407 08720005
*D192600                                                       @OX00407 08722005
* VS1 RELEASE 3.1 CHANGES                                               08724031
*A532600                                                       @YA03863 08726031
*A531100-531280                                                @OY06599 08728005
*D532600                                                       @OY06599 08728405
*D531100-531280                                                @OX09721 08728505
*A710500                                                       @OX09721 08728605
*A640000-640140                                                @AZ10934 08728700
         JMODID                                                         08730000
         SPACE 3                                                        08760000
MENTRY   JSAVE BASE=YES                                                 08790000
         SPACE                                                          08820000
         JENTRY (X3A01=MENTRY)          ENTRY POINT AS EXTERNAL NAME    08850000
         SPACE 3                                                        08880000
*        INITIALIZE THE GENERATOR                                       08910000
         SPACE                                                          08940000
MINIT    EQU   *                                                        08970000
         SPACE                                                          09000000
         SPACE                                                          09150000
*        GET CORE FOR MODULE COMMON                                     09180000
         SPACE                                                          09210000
         JGETCORE DBL=GENCOMLN                                          09240000
         SPACE                                                          09270000
         LR    R7,R10                   BASE FOR MODULE COMMON SET UP   09300000
         XC    GENCOM(GENSPEND-GENCOM),GENCOM CLEAR TO ZEROS            09330000
         SPACE                                                          09360000
*        PASS CONTROL TO DICTIONARY INITIALIZATION                      09390000
         SPACE                                                          09420000
         DICTCALL   PHASENTR                                            09450000
         SPACE                                                          09480000
*        PERMANENTLY CLEAR A REGISTER                                   09510000
         SPACE                                                          09540000
         SR    RMOVE,RMOVE              LOW BYTE ONLY TO BE USED        09570000
         SPM   RMOVE                    NO INTERRUPTS, PLEASE           09600000
         SPACE                                                          09690000
*        PREPARE EVAL WORK SPACE                                        09720000
         SPACE                                                          09750000
         LA    RCOMP1,ENDSTACK          LOCATE END OF STACK             09780000
         ST    RCOMP1,STACKEND          AND SAVE IT                     09810000
         LA    RCOMP1,STRING1           STRING BUFFER 1                 09840000
         ST    RCOMP1,STRPTR1             AND SAVE IT                   09870000
         LA    RCOMP0,STRING2           MASK FOR                        09900000
         XR    RCOMP0,RCOMP1              FLIPPING TO                   09930000
         ST    RCOMP0,STRPTR2           STRING BUFFER 2 AND BACK.       09960000
         LA    RCOMP0,ERRSTK            GET PTR TO START OF ERROR STK   09990000
         ST    RCOMP0,ESTKNDX           INITIALIZE MOVEABLE STACK PTR   10020000
         SPACE 3                                                        10050000
MINPUT   EQU   *                        INPUT SOURCE                    10080000
         SPACE                                                          10110000
         JGETL FILE=FILE1               GET NEXT INPUT TEXT RECORD      10140000
         SPACE                                                          10170000
         SPACE                                                          10950000
         LR    INPTR,R11                SET UP A BASE FOR               10980000
         USING JTEXT,INPTR                INPUT RECORD AND              11010000
         ST    INPTR,TXTIN              ALSO SAVE IT FOR LATER USE      11040000
         SR    RMOVE,RMOVE              CLEAR A REGISTER FOR LATER      11070000
         SPACE                                                          11100000
         GOIF  INMACRO,OFF=MINPUT12     NOT IN A MACRO, CONTINUE.       11130000
         SET   JGEN,ON                    ELSE INDICATE THAT THIS IS A X11160000
                                          GENERATED STATEMENT.          11190000
         SPACE                                                          11220000
MINPUT12 EQU   *                                                        11250000
         SPACE                                                          11280000
         GOIF  JPRONLY,ON=FLUSH90       ALREADY PRINT ONLY              11490000
         GOIF  INMACDEF,ON=MINPUT35     GO IF WITHIN MACRO DEFINITIONS  11550000
         GOIF  JPSOP,ON=MINPUT20        SEPARATE PSEUDO OPS             11560000
         GOIF  (FLUSH1,FLUSH2,FLUSH3),NONE=MFEVAL                       11565000
         GOIF  FLUSH3,ON=FLUSH05                                        11570000
         GOIF  FLUSH2,ON=FLUSH20                                        11575000
         GOIF  JSYSMAC,ON=FLUSH20       CONTINUE TO PRINT IF SYSMAC     11580000
         B     FLUSH25                  EXIT                            11590000
MINPUT20 GOIF  JTERROR,EQ=FLUSH84       ERROR RECORD                    11600000
         GOIF  JTEOF,EQ=MEXIT10         END OF FILE                     11610000
         GOIF  (FLUSH1,FLUSH2,FLUSH3),NONE=MINPUT22                     11620000
         GOIF  FLUSH1,ON=MINPUT25       BRANCH IF END FOUND             11622000
         GOIF  FLUSH3,ON=FLUSH05        BRANCH IF END TO BE GENERATED   11624000
         GOIF  JTEEOF,NE=FLUSH10                                        11626000
         GOIF  JSYSMAC,OFF=FLUSH25                                      11628000
         B     FLUSH30                                                  11630000
MINPUT22 GOIF  JTEEOF,NE=MINPUT50       BR IF NOT END OF SOURCE INPUT   11632000
FLUSH05  SET   FLUSH3,OFF               RESET                           11635000
         SET   FLUSH1,ON                INDICATE END CARD               11640000
         BAL   R3,DMYENDRT              GENERATE END CARD               11650000
         B     MINPUT12                 PROCESS AGAIN                   11660000
MINPUT25 GOIF  JSYSMAC,OFF=FLUSH25      EXIT IF NOSYSMAC                11670000
         GOIF  JTEEOF,EQ=FLUSH30        PRINT SYSTEM MACROS             11680000
         B     FLUSH10                  PRINT FROM SYSIN                11690000
MINPUT35 GOIF  JPSOP,OFF=FLUSH20        TEST IF PSEUDO OPS              11700000
         GOIF  JTERROR,EQ=FLUSH84       ERROR RECORD                    11710000
         GOIF  JTMEND,NE=FLUSH10        BRANCH IF NOT MEND              11720000
         SET   INMACDEF,OFF             INDICATE END OF DEFINITION      11730000
         B     FLUSH20                  PRINT MEND                      11740000
FLUSH10  GOIF  JTCPKEY,LO=FLUSH20       SIFT OUT THE PARAMETER          11750000
         GOIF  JTPEND,HI=FLUSH20,LO=FLUSH15   RECORDS                   11760000
         GOIF  JERR,OFF=MINPUT          CHECK PARAMETERS END RECORDS    11770000
         L     R1,TXTOUT                FOR ERROR FLAG TRANSFER         11780000
         USING MTEXT,R1                                                 11790000
         SET   MERR,ON                  ERROR FLAG TO LAST RECORD PUT   11800000
         DROP  R1                                                       11810000
         B     MINPUT                   NEXT RECORD                     11820000
FLUSH15  GOIF  JTPROTO,NE=MINPUT        DO NOT PASS THEM                11830000
FLUSH20  SET   JPRONLY,ON               SET PRINT ONLY                  11840000
         BAL   RETURN,PRINT90           PRINT THE RECORD                11850000
         SET   JPRONLY,OFF              CLEAN UP THE PRINT FLAGS        11860000
         B     MINPUT                   NEXT RECORD                     11870000
FLUSH25  LA    INPTR,=AL1(D0,D8,JPSOP,D0,JTEOF,D0) SET UP END OF FILE   11880000
         B     MEXIT10                  EXIT                            11890000
FLUSH30  JPUTM FILE=FILE2,ADDR==AL1(D0,D8,JPSOP,D0,JTSICTL,D0)         X11900000
               PUT OUT SPECIAL RCD FOR ICTL SWITCH FOR X51              11910000
         B     MINPUT                   READ NEXT RECORD                11920000
FLUSH84  EQU   *                                                        12660000
         L     R1,TXTOUT                PICK UP PTR TO LAST RCD PUT     12690000
         USING MTEXT,R1                                                 12720000
         GOIF  MTIOP,JTERROR,EQ=FLUSH85 CONT TOUCH AN ERROR RECORD      12750000
         SET   MERR,ON                  INDICATE ERROR TO BE FLAGGED    12780000
         GOIF  MPSOP,OFF=FLUSH85        BRANCH IF NOT PSEUDO-OP         12788000
         GOIF  MTIOP1,JTANOP,LO=FLUSH85 BRANCH IF NOT A GENERATOR-      12796000
         GOIF  MTIOP1,JTMEND,HI=FLUSH85 PROCESSED PSEUDO-OP             12804000
         L     R1,ACTRCNT               PICK UP CURRENT ACTR VALUE      12812000
         SRL   R1,D1                    HALVE IT ON EDITOR ERROR        12820000
         ST    R1,ACTRCNT               SAVE NEW ACTR VALUE             12828000
         DROP  R1                                                       12840000
FLUSH85  EQU   *                        PASS UNCHANGED                  12870000
         SPACE                                                          12900000
         BAL   RETURN,PRINT90           PRINT A COPY, PLEASE            12930000
         B     MINPUT                   GO BACK FOR ANOTHER ONE         12960000
FLUSH90  GOIF  FLUSH3,ON=FLUSH05        BRANCH IF END TO BE GENERATED   12960100
         GOIF  FLUSH1,OFF=FLUSH85       CHECK IF END STATEMENT FOUND    12960200
         GOIF  JSYSMAC,ON=FLUSH85       CHECK IF SYSMAC OPTION IS ON    12960300
         B     FLUSH25                                                  12960400
MEXIT10  LR    R2,INPTR                 PRESERVE EOF RCD POINTER        12961500
         JFRECORE ADDR=FREESTRT         FREE UP DICTIONARY SPACE        12962000
         JFRECORE ADDR=(R7)             RETURN MODULE COMMON TO SYSTEM  12962400
         SPACE                                                          12962800
         LA    R10,GTFILE               ELSE INDICATE GENERATED TEXT    12962900
         JPUTM FILE=(R10),ADDR=(R2)     AND MOVE EOF RECORD             12963000
         LA    R10,SDFILE               LIKEWISE SYMBOL FILE            12963400
         LA    R11,EOFSD                SYMBOL DEFINITION END-OF-FILE   12963800
         JPUTM FILE=(R10),ADDR=(R11)                                    12963900
         JPOINT FILE=FILE1,NEXT=START   REWIND FILE1                    12965700
         JPOINT FILE=FILE3,NEXT=START   REWIND FILE3                    12965800
         JTRUNC FILE=FILE2              TRUNCATE FILE2  TEXT FILE.  DO X12965900
                                        NOT REPOSITION BECAUSE NEXT    X12966000
                                        PHASE NEEDS END OF FILE.        12966400
MGET99   JRETURN ,                      AND EXIT FROM PHASE             12966800
         SPACE                                                          12968400
EOFSD    DC    H'8',AL1(0,0,JTEOFII,0)  SYMBOL DEFINITION END OF FILE   12970200
DMYENDRT JPUTM FILE=FILE2,ADDR=DUMYEND  PUT OUT DUMMY END STATEMENT     12970600
         ST    R3,GENREGS               PRESERVE RETURN REGISTER        12972000
         ST    R11,TXTOUT               PRESERVE TEXT RECORD POINTER    12973800
         L     R12,=A(X3B01)            SET UP TO CALL S.I. PREPROC.    12975600
         BALR  R9,R12                   CALL SYMBOL INTERLUDE PREPROC.  12977400
         L     INPTR,TXTIN              RESTORE PTR TO LAST TEXT RCD    12979200
         CLI   JMSGL,SEV60              CHECK MSGLEVEL                  12979400
         BH    DONTPUT                  DONT FLAG IF HIGH               12979600
         L     R3,TXTOUT                PUTPUT POINTER                  12979800
         USING MTEXT,R3                                                 12980000
         SET   MERR,ON                  FLAG ERROR                      12980200
         DROP  R3                                                       12980400
         JPUTM FILE=FILE2,ADDR==AL1(D0,D12,JPSOP,JNOCNT,JTERROR,D0,D0,DX12981000
               0,D0,SEV60,ERR60,D0) GENERATE GENERATED END DIAGNOSTIC   12982800
DONTPUT  L     R3,GENREGS               RESTORE RETURN REGISTER         12984600
         BR    R3                       RETURN TO CALLER                12986400
         SPACE                                                          12988200
         SPACE                                                          12990000
MINPUT50 EQU   *                                                        13020000
         SPACE                                                          13080000
         GOIF  HIGENOP,NOTLO=MFEVAL     TOO HIGH FOR GENERATOR OP, GO  X13110000
                                          PERFORM SUBSTITUTION.         13140000
         GOIF  LOGENOP,NOTLO=MLKUP      OK, LOOKUP GENERATOR OP AND    X13170000
                                          PROCESS IT.                   13200000
         GOIF  JTCOPY,LT=MFEVAL         LET ICTL,ISEQ,OPSYN GO THRU     13230000
*              ALL THAT REMAIN ARE ANOP,GBLX,LCLX,COPY                  13260000
         BAL   RETURN,PRINT10           PRINT IF OPTIONS ALLOW          13320000
         B     MINPUT                   GO BACK FOR NEXT RECORD         13350000
         SPACE                                                          13380000
         DROP  INPTR                                                    13410000
         SPACE 3                                                        13440000
MFEVAL   EQU   *                        SEND ALL MACHINE AND ASSEMBLER X13470000
                                        OPS OUT FOR FIELD EVALUATION.   13500000
         L     FTXTIN,TXTIN             GET INPUT TEXT POINTER          13530000
         USING JTEXT,FTXTIN               AND DECLARE AS BASE           13560000
         GOIF  JPSOP,OFF=FEVAL10        LOOK ONLY AT PSEUDO-OPS         13590000
         GOIF  JTHCMNT,NE=FEVAL10       ONLY LOOK AT HIDDEN COMMENTS    13620000
         BAL   RETURN,PRINT30           GO TO PRINT THEM IF REQ'D       13680000
         B     MINPUT                   GO BACK FOR NEXT STATEMENT      13710000
*        GET A WORK BUFFER AND SAVE THE POINTER TO IT                   13740000
         SPACE                                                          13770000
FEVAL10  EQU   *                                                        13800000
         SPACE                                                          13830000
         LA    R10,GTFILE               GENERATED TEXT FILE IS OUTPUT   13860000
         GOIF  (JSUBNAME,               ANY SUBSTITUTION,              X13890000
               JSUBOPCD,                                               X13920000
               JSUBOPND),                                              X13950000
               ANY=FEVAL22                GO PREPARE FOR FIELD EVAL.    13980000
         SPACE                                                          14010000
         BAL   RETURN,PRINT25           PUT OUT PRINT IMAGEIF REQD      14040000
         B     MLOCTR                   RETURN TO DRIVER                14070000
         SPACE                                                          14100000
MOVEOP   MVC   JFWORD1(D0),D0(R12)      EXECUTED MNEMONIC MOVE          14130000
         USING OPNTRY,R14               BASE FOR COMPARE                14160000
OPCOMP   CLC   JFWORD1(D0),OMNEM        REMOTE MNEMONIC COMPARE         14190000
         DROP  R14                                                      14220000
         SPACE 3                                                        14250000
         SPACE 3                                                        14280000
FEVAL22  EQU   *                        GET READY FOR SUBSTITUTION      14310000
         SPACE                                                          14340000
         SET   JPRONLY,ON               PUT PRINT ONLY COPY OF MODEL    14370000
         GOIF  JERR,OFF=NOERR           TEST IF ERROR STATEMENT         14400000
         SET   JERR,OFF                 DO NOT FLAG PRESUBST            14408000
         BAL   RETURN,PRINT10           PRINT IF OPTIONS ALLOW          14416000
         SET JERR,ON                    RESET MASTER COPY               14424000
         B     PRINTOFF                 GO ON                           14432000
NOERR    BAL   RETURN,PRINT10           PRINT PRE-SUBSTITUTION COPY     14440000
PRINTOFF SET   JPRONLY,OFF              CLEAN UP STMT MASTER COPY       14448000
         SPACE                                                          14460000
         SR    R11,R11                  SET UP BASE FOR CALC            14490000
         GOIF  JTCPR,HHDRLN,EQ=FEVAL23 BRANCH IF NO COMMENTS            14520000
         SH    R11,JTCPR                GET DISPL TO COMMENTS START     14550000
         B     FEVAL24                  GO CALC COMMENTS,STRNG LEN      14580000
FEVAL23  GOIF  JTSPR,HHDRLN,EQ=FEVAL25  BRANCH IF NO STRINGS            14610000
         SH    R11,JTSPR                GET DISPL TO STRINGS START      14640000
FEVAL24  AH    R11,JTRLI                CALC LENGTH OF COMMENTS,STRS    14670000
FEVAL25  LA    R11,MAXGENLN(,R11)       CALC LENGTH OF BUFFER NEEDED    14700000
         JPUTL FILE=(R10),BUFREQ=(R11)  REQUEST A BUFFER                14730000
         ST    R11,TXTOUT               AND SAVE ITS ADDRESS            14760000
         USING MTEXT,FTXTOUT              AND SET A BASE FOR IT.        14790000
         SPACE                                                          14820000
         MVC   MTEXT(MTHDRLN),JTEXT     MOVE RECORD HEADER TO OUTPUT    14850000
         SET   MGEN,ON                  INDICATE GENERATED STATEMENT    14860000
         SPACE                                                          14880000
*                             NAME FIELD                                14890000
         SPACE                                                          14900000
FEVAL30  EQU   *                                                        14910000
         LA    VTXTOUT,MTHDRLN          START OF VARIABLE OUTPUT FIELD  14940000
         STH   VTXTOUT,MTNMP            STORE NAME FIELD POINTER        14970000
         LH    VTXTIN,JTNMP             PICK UP NAME POINTER            15000000
         SPACE                                                          15030000
         GOIF  JSUBNAME                 SET CONDITION CODE              15060000
         SPACE                                                          15090000
         SPACE                                                          15120000
FEVAL32  BAL   RETURN,MOVEFLD           MOVE THE FIELD TO OUTPUT        15150000
         GOIF  JSUBNAME,OFF=FEVAL40     NO NAME SUBSTITUTION, SKIP      15180000
         L     R15,GENRTRN              PICK UP POINTER TO NAME LENGTH  15210000
         USING JTOPL,R15                DECLARE AS BASE                 15240000
         IC    RMOVE,JTOPL              PICK UP FIELD LENGTH            15260000
         GOIF  (RMOVE),ZERO=FEVAL40     ZERO LENGTH, SKIP AHEAD         15280000
FEVAL33  EQU   *                                                        15390000
         LR    R14,RMOVE                SET UP LOOP COUNT REGISTER      15420000
FEVAL34  LA    R1,D0(R14,R15)           GET PTR TO NEXT TRAILING CHAR   15450000
         CLI   D0(R1),JBLANK            LOOK FOR TRAILING BLANK         15480000
         BNE   FEVAL35                  BRANCH ON NON-BLANK             15510000
         BCT   R14,FEVAL34              LOOP THRU TRAILING BLANKS       15540000
FEVAL35  STC   R14,JTOPL                SAVE FINAL FIELD LENGTH         15570000
         GOIF  JTOPL,D8,LE=FEVAL40      SEE IF FIELD LENGTH ALRIGHT     15600000
         LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  15630000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          15660000
         DC    AL1(SEV129,ERR129)       ERROR PARAMETERS                15690000
         SET   MNMERR,ON                INDICATE BOGUS NAME             15720000
         MVI   JTOPL,D8                 GIVE BACK ONLY FIRST 8 CHARS    15750000
         SR    VTXTOUT,RMOVE            ADJUST TEXT OUTPUT PTR TO       15780000
         LA    VTXTOUT,D8(,VTXTOUT)     REFLECT TRUNCATED NAME          15810000
         DROP  R15                                                      15840000
         SPACE                                                          15870000
*                             OP CODE FIELD                             15880000
         SPACE                                                          15890000
FEVAL40  EQU   *                                                        15900000
         SPACE                                                          15930000
         LH    VTXTIN,JTOCP             PICK UP INPUT DISPLACEMENT      15960000
         STH   VTXTOUT,MTOCP            STORE OUTPUT DISPLACEMENT       15990000
         SPACE                                                          16020000
         GOIF  JSUBOPCD                 SET CONDITION CODE              16050000
         SPACE                                                          16080000
         SPACE                                                          16110000
FEVAL42  BAL   RETURN,MOVEFLD           MOVE THE FIELD TO OUTPUT        16140000
         GOIF  JSUBOPCD,OFF=FEVAL50     NO OP CODE SUBSTITUTION, SKIP.  16170000
         L     R15,GENRTRN              POINT TO MNEMONIC LENGTH AND    16230000
         USING JTOPL,R15                DECLARE AS BASE.                16260000
         IC    RMOVE,JTOPL              PICK UP OP CODE LENGTH          16290000
         CH    RMOVE,=H'8'              CHECK FOR VALID FIELD LENGTH    16297000
         BH    LOGER128                 BRANCH IF TOO MANY CHARACTERS   16304000
         GOIF  (RMOVE),ZERO=LOGER102    BRANCH IF NULL SUBSTITUTION     16320000
         XC    JFWORD1(L'JFWORD1+L'JFWORD2),JFWORD1 CLEAR NAME BUFFER   16350000
         LA    R1,JTOPND                SET UP STRING START PTR         16380000
         AR    R15,RMOVE                SET UP STRING END PTR           16410000
         LA    R14,D1                   SET UP BXLE INCREMENT           16440000
FEVAL43  CLI   D0(R1),JBLANK            LOOK FOR LEADING BLANK          16470000
         LR    R12,R1                   SAVE PTR IN CASE NON-BLANK      16500000
         BNE   FEVAL45                  BRANCH IF NON-BLANK             16530000
         BXLE  R1,R14,FEVAL43           LOOP THRU LEADING BLANKS        16560000
LOGER102 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  16590000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          16620000
         DC    AL1(SEV102,ERR102)       ERROR PARAMETERS                16650000
         B     FEVAL49                  GO FLAG STMT AS BAD             16680000
LOGER128 EQU   *                                                        16710000
         LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  16740000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          16770000
         DC    AL1(SEV128,ERR128)       ERROR PARAMETERS                16800000
         SET   MPRONLY,ON               INDICATE NO HOPE FOR THIS STMT  16830000
         L     R15,GENRTRN              RESTORE STARTING POINTER        16860000
         MVI   JTOPL,D8                 GIVE BACK ONLY FIRST 8 CHARS    16890000
         SR    VTXTOUT,RMOVE            ADJUST TEXT OUTPUT PTR TO       16920000
         LA    VTXTOUT,D8(,VTXTOUT)     REFLECT TRUNCATED OP CODE       16950000
         B     FEVAL50                  CONTINUE WITH OPERAND           16980000
         DROP  R15                                                      17010000
FEVAL46A CLI   D0(R1),JBLANK            LOOK FOR MORE TRAILING BLANKS   17040000
         BNE   LOGER101                 BRANCH IF NON-BLANK FOUND       17070000
FEVAL46B BXLE  R1,R14,FEVAL46A          LOOP THRU BLANK CHARACTERS      17100000
         LR    R1,R0                    RESTORE END POINTER             17130000
         B     FEVAL46                  GO HANDLE GOOD OP CODE          17160000
FEVAL44  CLI   D0(R1),JBLANK            LOOK FOR FIRST TRAILING BLANK   17190000
         LR    R0,R1                    PRESERVE END POINTER            17220000
         BE    FEVAL46B                 BRANCH IF FOUND                 17250000
FEVAL45  BXLE  R1,R14,FEVAL44           LOOP THRU NON-BLANK CHARS       17280000
FEVAL46  SR    R1,R12                   GET LENGTH OF NON-BLANK STRING  17310000
         STC   R1,JFWORD1-D1            SET UP LENGTH FOR OPSYN SCAN    17400000
         BCTR  R1,D0                    GET MOVE LENGTH OF OP CODE      17430000
         EX    R1,MOVEOP                INSERT OP CODE IN WORK AREA     17460000
         CLC   OPSNSTRT,=F'0'           SEE IF ANY OPSYN TABLE          17490000
         BZ    OPSC5                    BYPASS OPSYN LOOK UP IF NOT     17520000
OPSC1    L     R14,OPSNSTRT             POINT TO START OF TABLE         17560000
OPSC3    C     R14,GDSTRT               CHECK FOR END OF TABLE POINT    17600000
         BNL   OPSC5                    BRANCH IF ALL ENTRIES SCANNED   17640000
         USING OPSYNTRY,R14                                             17670000
         CLC   ONAMEL(L'ONAMEL+L'ONAME),JFWORD1-D1 LOOK FOR THE NAME    17700000
         BE    OPSC4                    BRANCH IF OPSYN FOUND           17730000
         LA    R14,OPSYND-OPSYNTRY(,R14) ADJUST PTR TO NEXT ENTRY       17760000
         B     OPSC3                    GO BACK FOR MORE SEARCHING      17790000
OPSC4    GOIF  ODEL,ON=LOGER102         DELETED OP CODE                 17830000
         LA    R14,OPSYNATT             POINT TO FLAGA AND INTERNAL OPS 17870000
         B     FEVAL46C                 SKIP AHEAD                      17910000
OPSC5    EQU   *                                                        17970000
         L     R15,JFWORD1              ADD TWO HALVES OF MNEMONIC      18000000
         AL    R15,JFWORD2              TO DEVELOP HASH VALUE           18030000
         SR    R14,R14                                                  18060000
         D     R14,=F'71'                 POINTER BY DIVIDING RESULT.   18090000
         AR    R14,R14                  DOUBLE REMAINDER AND            18120000
         A     R14,=A(OPBASE)             ADD IN OP CODE TABLE BASE.    18150000
         JEXTRN (X3K01=OPBASE)          DECLARE EXTERNAL                18180000
         USING OPNTRY,R14               R14 NOW IS BASE FOR OPTAB ENTRY 18210000
OPLOOP   CLC   OCHAIN,=F'0'             SEE IF SUBSTITUTED OP LEGAL     18240000
         BZ    LOGER101                 BRANCH IF NOT EVEN FOUND        18270000
         MVC   JHWORD1,OCHAIN           ALIGN CHAIN POINTER AND         18300000
         LH    R14,JHWORD1                                              18330000
         A     R14,=A(OPBASE)           ADD IN TABLE BASE (NEXT ENTRY)  18360000
         IC    RMOVE,OFLAGS             GET LENGTH OF MNEMONIC FROM     18390000
         N     RMOVE,=A(D7)             OP CODE TABLE ENTRY FLAGS       18420000
         GOIF  (R1),(RMOVE),NE=OPLOOP   NOT EQUAL TO INPUT, LOOP.       18450000
         EX    RMOVE,OPCOMP             ELSE COMPARE MNEMONIC ITSELF.   18480000
         BNE   OPLOOP                   NOT EQUAL, LOOP.                18510000
         LA    R14,D4(RMOVE,R14)        POINT TO FLAGA ENTRY            18540000
FEVAL46C EQU   *                                                        18550000
         MVC   MTFLGA,OFLAGA            FOUND IT--MOVE FLAGA            18570000
         MVC   MTIOP,OINTCD               AND INTERNAL OP TO TEXT.      18600000
         GOIF  MPSOP,ON=FEVAL47         BRANCH IF PSEUDO-OP             18630000
         TM    MTFLGA,BIT0+BIT1         CHECK TYPE OF MACHINE OP        18660000
         BNZ   FEVAL48                  BRANCH IF TWO BYTE OP CODE      18690000
FEVAL47  MVI   MTIOP2,J0                CLEAR 2ND BYTE FOR ALL OTHERS   18720000
FEVAL48  EQU   *                                                        18750000
         B     FEVAL50                  CONTINUE AT OPERAND             18780000
         DROP  R14                                                      18810000
         SPACE                                                          18840000
LOGER101 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  18870000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          18900000
         DC    AL1(SEV101,ERR101)       ERROR PARAMETERS                18930000
FEVAL49  SET   MPRONLY,ON               FLAG STMT AS BAD AND CONTINUE   18960000
         SPACE                                                          18990000
*                             OPERAND FIELD                             19000000
         SPACE                                                          19010000
FEVAL50  EQU   *                                                        19020000
         SPACE                                                          19050000
         LH    VTXTIN,JTOPP             OPERAND DISPLACEMENT INPUT      19080000
         STH   VTXTOUT,MTOPP            STORE OUTPUT                    19110000
         GOIF  JSUBOPND                 SET CONDITION CODE              19140000
         SPACE                                                          19170000
         SPACE                                                          19200000
FEVAL52  BAL   RETURN,MOVEFLD           MOVE THE FIELD TO OUTPUT        19230000
         L     R15,GENRTRN              POINT TO MNEM LENGTH    OX00407 19240001
         USING JTOPL,R15                AND DECLARE AS BASE     OX00407 19250001
         IC    RMOVE,JTOPL              PICK UP OPERAND LENGTH  OX00407 19252001
         LA    R1,JTOPND                SET UP START POINTER    OX00407 19254001
         AR    R15,RMOVE                SET UP END POINTER      OX00407 19256001
         SR    R3,R3                    CLEAR COUNTER           OX00407 19258001
         LA    R14,D1                   SET UP BXLE INCREMENT   OX00407 19258401
FEVAL53  CLI   D0(R1),JBLANK            LOOK FOR LEADING BLANK  OX00407 19258801
         BNE   FEVAL55                  BRANCH IF NON-BLANK     OX00407 19259201
         LA    R3,D1(R3)                COUNT BLANKS            OX00407 19259601
         BXLE  R1,R14,FEVAL53           LOOP THRU LEADING BLNKS OX00407 19259701
         B     FEVAL56                  ONLY BLANKS IN OPERAND  OX00407 19259801
FEVAL55  L     R15,GENRTRN              POINT TO CARD POINTER   OX00407 19259901
         BCTR  R15,R0                   FOR OPERAND             OX00407 19263201
         USING MTOCO,R15                AND USE AS BASE         OX00407 19265201
         IC    R1,MTOPO                 UPDATE OPERAND CARD     OX00407 19265601
         AR    R1,R3                    POINTER BY LEAVING OUT  OX00407 19266001
         STC   R1,MTOPO                 LEADING BLANKS          OX00407 19266401
         IC    R1,MTOPL                 UPDATE OPERAND LENGTH   OX00407 19266801
         SR    R1,R3                    BY DELETING             OX00407 19266901
         STC   R1,MTOPL                 LEADING BLANKS          OX00407 19267001
         L     R15,GENRTRN              POINT TO MNEMONIC AGAIN OX00407 19267201
         USING JTOPL,R15                AND DECLARE AS BASE     OX00407 19270501
         LA    R1,JTOPND                SET UP STRING POINTER   OX00407 19273801
         SR    R14,R14                  CLEAR REG FOR LENGTH    OX00407 19277101
         IC    R14,JTOPL                INSERT OPERAND LENGTH   OX00407 19280401
         SR    R14,R3                   CALC NEW OPERAND LENGTH OX00407 19283701
         SR    VTXTOUT,R3               STEP BACK IF BLANKS     OX00407 19287001
         LA    R3,D0(R1,R3)             SET UP STRING POINTER   OX00407 19290301
         EX    R14,MOVEOPND             GET RID OF BLANKS       OX00407 19293601
         SR    RMOVE,RMOVE              CLEAR FOR MOVEFLD       OX00407 19296901
         B     FEVAL56                  BRANCH OVER MOVE        OX00407 19300201
         DROP  R15                                              OX00407 19303501
MOVEOPND MVC   D0(D0,R1),D0(R3)         GET RID OF BLANKS       OX00407 19306801
         SPACE 2                                                OX00407 19310101
FEVAL56  AR    VTXTOUT,FTXTOUT          GET PTR TO OPERAND END  OX00407 19313401
         MVI   D0(VTXTOUT),JBLANK       SUPPLY TRAILING BLANK           19316701
         LA    VTXTOUT,D1(,VTXTOUT)     ADJUST OUTPUT POINTER           19320000
         SR    VTXTOUT,FTXTOUT          RE-CALC NEXT FIELD DISPLACEM'T  19350000
         SPACE                                                          19380000
*                             COMMENTS AND STRINGS                      19390000
         SPACE                                                          19400000
FEVAL60  EQU   *                                                        19410000
         SPACE                                                          19440000
         STH   VTXTOUT,MTCPR            COMMENT OUTPUT POINTER TO TEXT  19470000
         LH    VTXTIN,JTCPR             PICK UP COMMENT DISPLACEMENT    19500000
         BAL   RETURN,MOVEFLD           MVOE THE FIELD                  19530000
         SPACE                                                          19560000
*        STRINGS                                                        19590000
         SPACE                                                          19620000
         STH   VTXTOUT,MTSPR            STORE STRING POINTER--OUTPUT    19650000
         LH    VTXTIN,JTSPR             PICK UP POINTER--INPUT          19680000
         GOIF  JTSPR,HHDRLN,NE=FEVAL63  STRING POINTER POINTS TO END OFX19710000
                                          TEXT HEADER (NULL), BRANCH.   19740000
         LA    RCOMP1,L'JTSTC           JUST MOVE STRING COUNT          19770000
         B     FEVAL64                  AND SKIP AHEAD                  19800000
         SPACE                                                          19830000
FEVAL63  EQU   *                                                        19860000
         SPACE                                                          19890000
         LH    RCOMP1,JTRLI             LENGTH OF REMAINDER OF RECORD   19920000
         SR    RCOMP1,VTXTIN              IS LENGTH MINUS DISPLACEMENT  19950000
         BCTR  RCOMP1,D0                  OF STRINGS MINUS ONE          19980000
FEVAL64  AR    VTXTIN,FTXTIN            ABSOLUTE INPUT ADDRESS          20010000
         AR    VTXTOUT,FTXTOUT          ACTUAL OUTPUT ADDRESS           20040000
         EX    RCOMP1,MVCFLD10          MOVE THE REST OF THE RECORD     20070000
         SPACE                                                          20100000
FEVAL90  EQU   *                                                        20130000
         SPACE                                                          20160000
         LA    VTXTOUT,D1(RCOMP1,VTXTOUT) COMPUTE TOTAL RECORD LENGTH   20190000
         SR    VTXTOUT,FTXTOUT            AND STORE IN OUTPUT           20220000
         STH   VTXTOUT,MTRLI                                            20250000
         SPACE 3                                                        20310000
*        SYMBOL PROCESSING FOR ASSEMBLY PHASES                          20340000
         DROP  FTXTIN                                                   20370000
         SPACE                                                          20400000
MLOCTR   EQU   *                                                        20430000
         USING JTEXT,FTXTOUT                                            20460000
         GOIF  JPRONLY,ON=ERRDUMP       IGNORE ALL PRINT-ONLY STMTS     20490000
         GOIF  JPSOP,OFF=MLOCTR10       SKIP IF NOT PSEUDO-OP           20520000
         GOIF  JTIOP,JTCALL,EQ=MINPUT   GO NO FURTHER ON MACRO CALL     20530000
         GOIF  JTIOP,JTEND,NE=MLOCTR05  IF NOT SUBSTITUTED END, SKIP    20580000
         L     RCOMPX,MACROLVL          GET MACRO NEST COUNT            20610000
         GOIF  (RCOMPX),NOTPOS=MLOCTR02 BRANCH IF NO POP NECESSARY      20640000
         ST    FTXTOUT,GENREGS          PRESERVE OUTPUT TEXT POINTER    20670000
         SET   GENEND,ON                INDICATE END FROM INSIDE MACRO  20700000
MLOCTR01 EQU   *                                                        20730000
         DICTCALL MACRFINI              POP ONE LEVEL OF MACRO NEST     20760000
         BCT   RCOMPX,MLOCTR01          DECREMENT NEST COUNT            20790000
         L     FTXTOUT,GENREGS          RESTORE TEXT POINTER            20820000
MLOCTR02 EQU   *                                                        20850000
         SET   INMACRO,OFF              INDICATE OUT OF MACRO NEST      20880000
         SET   FLUSH1,ON                INDICATE TEXT TO BE FLUSHED     20910000
         B     MLOCTR10                 PROCEED                         20940000
MLOCTR05 EQU   *                                                        20970000
         GOIF  JTIOP,JTTITLE,NE=MLOCTR10 SEE IF PSEUDO-OP IS TITLE      21000000
         LH    EVEN,JTNMP               IF SO, GET NAME FIELD DISPL     21030000
         AR    EVEN,FTXTOUT             DEVELOP PTR TO NAME FIELD       21060000
         USING JTNMO,EVEN                                               21090000
         SR    ODD,ODD                  CLEAR LENGTH REGISTER           21120000
         IC    ODD,JTNML                PICK UP NAME LENGTH             21150000
         GOIF  (ODD),ZERO=ERRDUMP       SEE IF NAME IS PRESENT          21180000
         GOIF  JTNML,D8,HI=LOGER125     BRANCH IF NAME TOO LONG         21210000
         LA    R1,JTNAME(ODD)           GET PTR PAST END OF NAME FIELD  21240000
         BCTR  R1,D0                    POINT TO LAST CHARACTER         21260000
         BCT   ODD,TITLE200             CHECK IF LENGTH IS ONE          21280000
         B     TITLE300                 STRING IS ONE CHARACTER         21300000
TITLE100 BCTR  R1,D0                    NEXT CHARACTER                  21320000
TITLE200 CLI   D0(R1),JAT               CHECK IF ALPHANUMERIC           21340000
         BH    LOGER125                 ERROR IF NOT                    21360000
         BCT   ODD,TITLE100             CHECK NEXT                      21380000
         BCTR  R1,D0                    R1 NOW POINTS TO FIRST CHAR     21400000
         CLI   D0(R1),JPERIOD           CHECK IF SEQUENCE SYMBOL        21420000
         BE    TITLE400                 MAY BE SEQUENCE SYMBOL          21440000
TITLE300 CLI   D0(R1),JAT               MUST BE ALPHANUMERIC            21460000
         BH    LOGER125                 ERROR IF NOT                    21480000
         GOIF  FRSTTITL,ON=LOGER104     BRANCH IF NAMED TITLE NOT FIRST 21500000
         IC    ODD,JTNML                LENGTH OF NAME FIELD            21520000
         EX    ODD,TITLEMOV             MOVE DECK ID                    21540000
         SET   FRSTTITL,ON              INDICATE TITLE FOUND            21560000
         B     ERRDUMP                  GET NEXT RECORD                 21580000
TITLE400 CLI   D1(R1),JA                CHECK IF 2ND CHAR ALPHA         21600000
         BL    LOGER125                 ERROR IF NOT                    21620000
         B     MLOCTR11                 NAME FIELD IS SEQUENCE SYMBOL   21640000
LOGER104 LA    R12,LOGERR01             GET PTR TO ERROR ROUTINE        21690000
         BALR  R9,R12                   GO TO LOG THE ERROR             21720000
         DC    AL1(SEV104,ERR104)       ERROR PARAMETERS                21750000
         B     ERRDUMP                  GO TO FINISH UP STATEMENT       21780000
MLOCTR10 GOIF  JNMERR,ON=MLOCTR40       SKIP IF NAME ALREADY BAD        21810000
         LH    EVEN,JTNMP               IF NOT, GET NAME FIELD DISPL    21840000
         AR    EVEN,FTXTOUT             DEVELOP PTR TO NAME FIELD       21870000
         GOIF  JTNML,D0,EQ=MLOCTR30     BRANCH IF NAME NOT PRESENT      21900000
         GOIF  JTNAME,JPERIOD,NE=MLOCTR20 SEE IF NAME IS SEQ SYMBOL     21930000
MLOCTR11 EQU   *                                                        21960000
         GOIF  GENEND,ON=MLOCTR12       BRANCH IF END FROM MACRO        21990000
         GOIF  INMACRO,OFF=MLOCTR15     BRANCH IF IN OPEN CODE          22020000
MLOCTR12 EQU   *                                                        22050000
         GOIF  JMLOGIC,ON=MLOCTR40,     BRANCH IF SEQ SYMB NOT         X22080000
               ELSE=MLOCTR16            TO BE SUPPRESSED                22110000
MLOCTR15 GOIF  JALOGIC,ON=MLOCTR40      BRANCH IF SEQ SYMB NOT SUPRESD  22140000
MLOCTR16 EQU   *                                                        22170000
         MVI   JTNML,D0                 INDICATE NO NAME                22200000
         B     MLOCTR40                 PROCEED AS IF NO NAME           22230000
MLOCTR20 GOIF  JDEF,ON=MLOCTR25         CHECK IF NAME ALLOWED           22260000
         GOIF  JTIOP,JTOPSYN,EQ=MLOCTR25                                22262000
         LA    R12,LOGERR01             ILLEGAL NAME FIELD              22270000
         BALR  R9,R12                   LOG ERROR                       22280000
         DC    AL1(SEV16,ERR16)                                         22282000
         SET   JNMERR,ON                INDICATE INVALID NAME FIELD     22284000
MLOCTR25 GOIF  JTNML,D8,HI=LOGER125     BRANCH IF NAME TOO LONG         22286000
         SR    ODD,ODD                  CLEAR LENGTH REGISTER           22290000
         IC    ODD,JTNML                PICK UP NAME LENGTH             22320000
         LA    R1,JTNAME(ODD)           GET POINTER PAST NAME FIELD     22350000
MLOCTR27 BCTR  R1,D0                    BACK UP TO NEXT CHARACTER       22380000
         CLI   D0(R1),JAT               CHECK FOR NAME VALIDITY         22410000
         BH    LOGER125                 BRANCH IF OUT OF RANGE          22440000
         BCT   ODD,MLOCTR27             BRANCH UNTIL ALL CHARS CHECKED  22470000
         CLI   D0(R1),J9                CHECK FIRST CHAR FOR ALPHA ONLY 22500000
         BH    MLOCTR30                 BRANCH IF ALL CRITERIA MET      22530000
LOGER125 EQU   *                                                        22560000
         LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  22590000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          22620000
         DC    AL1(SEV125,ERR125)       ERROR PARAMETERS                22650000
         SET   JNMERR,ON                INDICATE BAD NAME               22680000
         B     MLOCTR40                 GO ON                           22710000
TITLEMOV MVC   JDECKIDL(D0),JTNML       EXECUTED DECK ID MOVE           22740000
SYSMOVE  MVC   SYSECT(D0),JTNML         EXECUTED SYSECT MOVE            22770000
MLOCTR30 GOIF  JPSOP,OFF=MLOCTR40       LOOK AT PSEUDO-OPS ONLY         22800000
         GOIF  JTIOP,JTCOM,GT=MLOCTR40  LOOK FOR PSEUDO-OPS CSECT,      22830000
         GOIF  JTIOP,JTSTART,LT=MLOCTR40 DSECT, START, AND COM          22860000
         IC    ODD,JTNML                PICK UP NAME LENGTH             22890000
         EX    ODD,SYSMOVE              ASSIGN NAME TO SYSECT           22920000
MLOCTR40 EQU   *                                                        22950000
         DROP  EVEN                                                     22980000
MLOCTR60 L     R12,=A(X3B01)            GET PTR TO SYMBOL PROCESSOR     23010000
         JEXTRN (X3B01=X3B01)                                           23040000
         BALR  R9,R12                   LINK TO SYMBOL INTER PREPROCESS 23070000
         DROP  R11                                                      23100000
         SPACE                                                          23130000
* PUT OUT ANY ERROR MESSAGES LOGGED AGAINST THE RECORD JUST             23160000
*        PROCESSED                                                      23190000
         SPACE                                                          23220000
ERRDUMP  EQU   *                                                        23250000
         LH    R3,ERRCNT                PICK UP ERROR COUNT             23280000
         LTR   R3,R3                    SEE IF ANY MESSAGES LOGGED      23310000
         BZ    MINPUT                   GO GET NEXT RECORD IF NOT       23340000
         L     R2,TXTOUT                GET PTR TO OUTPUT RECORD        23370000
         USING JTEXT,R2                                                 23400000
         SET   JERR,ON                  INDICATE ERROR FLAG FOR THIS    23430000
         DROP  R2                                                       23490000
         LCR   R6,R3                    GET NUMBER OF ERRORS - NEG      23520000
         AH    R6,=H'5'                 ADD MAX LOGGED ERRORS           23550000
         LTR   R6,R6                    SEE IF NUMBER LT OR EQ MAX      23580000
         BNM   ERRDUMP1                 BRANCH IF SO                    23610000
         MVC   ERRCNT,=H'2'             INSURE OK ERROR COUNT           23620000
         LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  23640000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          23670000
         DC    AL1(SEV126,ERR126)       ERROR PARAMETERS                23700000
         LA    R3,D6                    SET NUMBER OF ERROR LOGGED      23730000
ERRDUMP1 LA    R4,ERRSTK                GET PTR TO START OF ERROR STK   23760000
         ST    R4,ESTKNDX               REINPTIALIZE MOVEABLE STK PTR   23790000
ERRDUMP2 SR    R5,R5                    CLEAR LENGTH REGISTER           23820000
         USING ERRMESS,R4                                               23850000
         JPUTL FILE=FILE2,BUFREQ=D20   GET BUFFER FOR ERROR RECORD      23880000
         USING JERRCD,R11                                               23910000
         MVC   JERECL(D9),=AL1(D0,D20,JPSOP,JNOCNT,JTERROR,D0,D0,D0,D0)X23940000
                INSERT RECORD LENGTH, FLAGS, ETC. IN RECORD             23970000
         MVC   JESEV(D11),EMSGSVTY      INSERT SEVERITY, ERROR, DATA    24000000
         GOIF  ENTRYLNG,D0,EQ=ERRDUMP3  SKIP IF DATA LENGTH OF ZERO     24030000
         LA    R5,D8                    ALLOW FOR DATA ITEM             24060000
ERRDUMP3 LA    R4,D3(R5,R4)             BUMP TO NEXT ERROR STACK ITEM   24090000
         BCT   R3,ERRDUMP2              DECREMENT COUNT, BRANCH NON-0   24120000
         STH   R3,ERRCNT                REINITIALIZE ERROR COUNTER      24150000
         B     MINPUT                   READ NEXT STATEMENT             24202000
         DROP  R4                                                       24210000
         DROP  R11                                                      24240000
         EJECT                                                          24270000
*                                                                       24300000
* MOVERTN - THIS SUBROUTINE MOVES RECORDS BUFFER-TO-BUFFER.             24330000
*           IT ACCOMPLISHES THE FUNCTION OF A JPUTM, WHICH CANT         24360000
*           BE USED SINCE A POINTER TO THE OUTPUT RECORD MUST BE        24390000
*           GOTTEN AND SAVED.                                           24420000
*                                                                       24450000
MOVERTN1 MVC   D0(D256,INDEX1),D0(INDEX2) MOVE BLOCK OF 256 BYTES       24480000
         LA    INDEX1,D256(,INDEX1)     ADJUST DESTINATION POINTER      24510000
         LA    INDEX2,D256(,INDEX2)     ADJUST SOURCE POINTER           24540000
MOVERTN  SH    RCOMP1,=H'256'            SEE IF ONE MOVE WILL DO IT     24570000
         BP    MOVERTN1                  BRANCH IF NOT                  24600000
         AH    RCOMP1,=H'255'            GET MOVE LENGTH REMAINING      24630000
         EX    RCOMP1,MOVERTN2           MOVE REMAINING SEGMENT         24660000
         BR    RETURN                    RETURN                         24690000
MOVERTN2 MVC   D0(D0,INDEX1),D0(INDEX2) EXECUTED MOVE, 256 OR LESS      24720000
         EJECT                                                          24750000
MLKUP    EQU   *                        COMPUTE BRANCH ADDRESS FROM    X24780000
                                        TABLE                           24810000
*        BRANCH TABLE CONSISTS OF TWO BYTE ADDRESSES TO BE USED AS      24840000
*        INDICES FOR BRANCHES TO THE NAMED ROUTINES.  INTERNAL OP CODE  24870000
*        FROM TEXT IS MULTIPLIED BY TWO AND USED AS AN INDEX TO THE     24900000
*        TABLE.                                                         24930000
         SPACE 3                                                        24960000
         USING JTEXT,INPTR              BASE FOR INPUT TEXT             24990000
         SR    INDEX1,INDEX1            CLEAR A REGISTER                25050000
         IC    INDEX1,JTIOP             PICK UP INTERNAL OP CODE        25080000
         SLL   INDEX1,TIMES2            MULTIPLY BY 2                   25110000
         LH    INDEX1,MOPTABLE(INDEX1)  USE IT AS INDEX TO PICK UP     X25140000
                                        BRANCH DISPLACEMENT.            25170000
         B     MOPRTNS(INDEX1)          USE DISPLACEMENT AS INDEX       25200000
         DROP  INPTR                                                    25230000
         EJECT                                                          25260000
*TITLE-                                                               * 25290000
*   PRINT/PRINT LOGIC SELECTOR ROUTINE                                * 25320000
*                                                                     * 25350000
*FUNTION/OPERATION-                                                   * 25380000
*   DETERMINE IF OPTIONS REQUIRE A PRINTABLE RECORD OF A GENERATOR    * 25410000
*   LOGICAL STATEMENT TO BE PASSED FOR LISTING PURPOSES, AND PASS THE * 25440000
*   RECORD IF SO.                                                     * 25470000
*                                                                     * 25500000
*   AGO, AIF, MEXIT, ACTR, SETA, SETB, SETC, PROTO, PPARMS,MACRO, MEND* 25530000
*   ARE THE OPS HANDLED BY THIS ROUTINE.                              * 25560000
*                                                                     * 25590000
         SPACE                                                          25620000
PRINT10  EQU   *                        ENTRY FOR ALL BUT PROTO        X25650000
                                          MACRO, MEND.                  25680000
         SPACE                                                          25710000
         USING JTEXT,INPTR              INPUT TEXT BASE                 25740000
         GOIF  CALLING,OFF=PRINT20      PROCEED IF NOT MACRO CALL       25770000
PRINT15  GOIF  INMACRO,OFF=PRINT90      PRINT ALL OUTER MACRO CALLS     25800000
         GOIF  (JMLOGIC,JCALLS),NONE=MINPUT, PRINT INNER MACRO CALLS   X25830000
               ELSE=PRINT90             ONLY ON USERS OPTION            25860000
PRINT20  EQU   *                                                        25890000
         GOIF  INMACRO,ON=PRINT30       BRANCH IF EXPANDING A MACRO     25920000
         GOIF  JALOGIC,ON=PRINT90,      PRINT IF ALOGIC OPTION IS ON   X25950000
               ELSE=(RETURN)              OTHERWISE RETURN              25980000
PRINT25  EQU   *                                                        26010000
         GOIF  CALLING,OFF=PRINT90,ELSE=PRINT15 PRINT IF NOT CALL       26040000
PRINT30  EQU   *                        ENTRY FOR PROTO, MACRO, MEND    26070000
         GOIF  JERR,ON=PRINT90          PRINT ERRONEOUS STATEMENTS      26080000
         SPACE                                                          26100000
         GOIF  JMLOGIC,OFF=(RETURN)     EXIT IF MLOGIC OPTION IS NOT ON 26130000
         SPACE                                                          26160000
PRINT90  EQU   *                        ENTRY FOR UNCONDITIONAL PRINT   26190000
         SPACE                                                          26220000
         LR    FLDLN,RETURN             SAVE THE RETURN REGISTER        26250000
         LA    R10,GTFILE               OUTPUT TO GENERATED TEXT FILE   26280000
         LH    R11,JTRLI                PICK UP LENGTH OF INPUT RCD     26310000
         JPUTL FILE=(R10),BUFREQ=(R11)  GET OUTPUT BUFFER SPACE         26340000
         ST    R11,TXTOUT               SAVE PTR TO OUTPUT RECORD       26370000
         LH    RCOMP1,JTRLI             GET RCD LENGTH FOR MOVE         26400000
         LR    INDEX2,INPTR             SET UP SOURCE POINTER           26430000
         LR    INDEX1,FTXTOUT           SET UP DESTINATION PTR          26460000
         BAL   RETURN,MOVERTN           GO TO MOVE RCD BUF-TO-BUF       26490000
         BR    FLDLN                    RETURN VIA DUMMY RETURN         26520000
         DROP  INPTR                                                    26550000
         EJECT                                                          26580000
*                                                                       26610000
*        MOPTABLE                                                       26640000
*                                                                       26670000
*        THIS IS A BRANCH TABLE TO THE ROUTINES TO HANDLE GENERATOR     26700000
*        OP CODES.  EACH ENTRY IS A TWO BYTE INDEX TO THE ROUTINES      26730000
*        RELATIVE TO MOPRTNS, AND IS USED IN AN INDEXED BRANCH TO THAT  26760000
*        ROUTINE AFTER THE TABLE ENTRY IS SELECTED BY A COMPUTATION ON  26790000
*        THE INTERNAL OP CODE.                                          26820000
*                                                                       26850000
         SPACE 3                                                        26880000
         ORG   *-2*LOGENOP              SET TABLE START                 26910000
MOPTABLE EQU   *                        GIVE IT A NAME                  26940000
         ORG   ,                        AND RESET LOCATION COUNTER      26970000
         GENOPS MACRO,MACRO             MACRO HEADER                    27000000
         GENOPS ACTR .                  ACTR                            27030000
         GENOPS AGO,MBRANCH1 .          AGO                             27060000
         GENOPS AIF                     AIF                             27090000
         GENOPS SETA .                  SETA                            27120000
         GENOPS SETB .                  SETB                            27150000
         GENOPS SETC .                  SETC                            27180000
         GENOPS MEXIT,MEND1 .           MEXIT                           27210000
         GENOPS MEND,MEND1 .            MEND                            27240000
         GENOPS CALL                    MACRO CALL                      27270000
         GENOPS CPKEY                   CALL PARAMETER--KEYWORD         27300000
         GENOPS CPPOS                   CALL PARAMETER--POSITIONAL      27330000
         GENOPS PROTO                                                   27360000
         GENOPS PPKEY                   PROTOTYPE PARM--KEYWORD         27390000
         GENOPS PPPOS                   PROTOTYPE PARM--POSITIONAL      27420000
         GENOPS PEND                    PARAMETER LIST END--ALL         27450000
         ORG   ,                             END OF TABLE               27480000
         EJECT                                                          27510000
*TITLE-                                                               * 27540000
*        MOPRTNS/GENERATOR OPCODE ROUTINE BASE                        * 27570000
*                                                                     * 27600000
*FUNCTION/OPERATION-                                                  * 27630000
*        PROVIDE BASE FOR ALL GENERATOR OPCODE HANDLING ROUTINES.     * 27660000
*   THIS VALUE IS USED FOR COMPUTING INDEX FOR TABLE LOOKUP BY        * 27690000
*   STATEMENT TYPE TO SELECT THE APPROPRIATE ROUTINE.  ALSO INCLUDES  * 27720000
*   MERROR, WHICH IS THE EXIT FOR INVALID OPCODE TYPES (PROGRAM LOGIC * 27750000
*   ERROR).                                                           * 27780000
*                                                                     * 27810000
         SPACE 3                                                        27840000
MOPRTNS  EQU   *                        BASE ONLY--NOT AN ENTRY POINT   27870000
         EJECT                                                          27900000
*TITLE--                                                              * 27930000
*   MACRO/MACRO STATEMENT UTILITY ROUTINE                             * 27960000
*                                                                     * 27990000
*FUNCTION/OPERATION--                                                 * 28020000
*   A MACRO STATEMENT CAN OCCUR UNEXPECTEDLY, DENOTING THE BEGINNING  * 28050000
*   OF TEXT OF A PROGRAMMER MACRO DEFINITION, OR EXPECTED, DENOTING   * 28080000
*   THE FIRST TEXT RECORD OF A CALLED MACRO. THIS ROUTINE CONTROLS THE* 28110000
*   SWITCHES THAT KEEP THE TWO MODES STRAIGHT.                        * 28140000
*                                                                     * 28170000
*   IF OPEN CODE, THE ROUTINE TURNS ON SWITCH 'INMACDEF', WHICH STAYS * 28200000
*   ON UNTIL A MEND STATEMENT IS FOUND.  WHILE THIS SWITCH IS ON, ALL * 28230000
*   RECORDS ARE PASSED THROUGH AS PRINT ONLY, FOR LISTING PURPOSES    * 28260000
*   ONLY.                                                             * 28290000
*                                                                     * 28320000
*   WHEN A MACRO IS CALLED, MCALL TURNS ON SWITCH 'CALLING' INDICATING* 28350000
*   THAT A CALL IS IN PROGRESS.  IF THIS SWITCH IS ON, MACRO JUST     * 28380000
*   TURNS IT OFF, BYPASSING REFERENCE TO 'INMACDEF' SWITCH.           * 28410000
*                                                                     * 28440000
*INPUT--NONE                                                          * 28470000
*OUTPUT--NONE                                                         * 28500000
*ENTRY POINTS--MACRO                                                  * 28530000
*EXTERNAL ROUTINES--NONE                                              * 28560000
*EXITS--BR RETURN                                                     * 28590000
*TABLES/WORK AREAS--                                                  * 28620000
*   SWITCHES INMACDEF AND CALLING, LOCATED IN GENCOM.                 * 28650000
*                                                                     * 28680000
*ATTRIBUTES--REFRESHABLE                                              * 28710000
*NOTES--                                                                28740000
*   IF NESTED DEFINITIONS ARE EVER ALLOWED, SWITCH 'INMACDEF' WILL BE * 28770000
*   REPLACED WITH A COUNTER WHICH WILL BE DECREMENTED BY MEND STATE-  * 28800000
*   MENTS.                                                            * 28830000
         SPACE                                                          28860000
MACRO    EQU   *                                                        28890000
         SPACE                                                          28920000
         GOIF  CALLING,ON=MACRO20       IF ON, THIS IS PART OF A CALL   28950000
         SET   INMACDEF,ON              ELSE IT MUST BE LISTING ONLY    28980000
         USING JTEXT,INPTR                                              29010000
         DROP  INPTR                                                    29070000
         BAL   RETURN,PRINT90           PRINT A COPY                    29100000
         B     MINPUT                   GO BACK FOR NEXT STATEMENT      29130000
         SPACE 3                                                        29160000
MACRO20  EQU   *                                                        29190000
         SPACE                                                          29220000
         BAL   RETURN,PRINT30           PRINT IF MLOGIC OPTION IS ON    29250000
         SET   CALLING,OFF                                              29280000
         B     MINPUT                   GO BACK FOR NEXT STATEMENT      29310000
         EJECT                                                          29340000
*TITLE--                                                              * 29370000
*   MPROTO/MACRO PROTOTYPE HANDLER                                    * 29400000
*                                                                     * 29430000
*FUNCTION/OPERATION--                                                 * 29460000
*   UNDEFINED--MAY BE DICTIONARY                                      * 29490000
         SPACE                                                          29520000
MPROTO   EQU   *                                                        29550000
         BAL   RETURN,PRINT30           PRINT IF MLOGIC OPTION IS ON    29580000
         B     MINPUT                   GO BACK FOR NEXT STATEMENT      29610000
         EJECT                                                          29640000
*TITLE--                                                              * 29670000
*   MPARM/MACRO CALL AND PARAMETER ROUTINE                            * 29700000
         SPACE                                                          29730000
*FUNCTION/OPERATION--                                                 * 29760000
*   POINTS REG10 TO THE LENGTH PORTION OF THE OPERAND OF A PARAMETER  * 29790000
*   RECORD, AND CALLS THE APPROPRIATE DICTIONARY ROUTINE TO PLACE THE * 29820000
*   PARAMETER IN THE PARAMETER TABLE.                                 * 29850000
         SPACE                                                          29880000
*ENTRY POINTS--                                                       * 29910000
*   MCPKEY     CALL KEYWORD PARAMETER                                 * 29940000
*   MCPPOS     CALL POSITIONAL PARAMETER                              * 29970000
*   MPPKEY     PROTOTYPE KEYWORD PARAMETER                            * 30000000
*   MPEND      END OF PARAMETER LIST                                  * 30030000
*   MCALL      BEGIN MACRO CALLING SEQUENCE                           * 30060000
         SPACE                                                          30090000
*INPUT--                                                              * 30120000
*   TEXT RECORD POINTED TO BY INPTR                                   * 30150000
         SPACE                                                          30180000
*OUTPUT--NONE                                                         * 30210000
         SPACE                                                          30240000
*EXTERNAL ROUTINES--                                                  * 30270000
*        MACRKWRD   CALL KEYWORD        DICTIONARY ACCESS INTERFACE   * 30300000
*        MACRPOST   CALL POSITIONAL        ''        ''      ''       * 30330000
*        PROTOKWD   PROTOTYPE KEYWORD      ''        ''      ''       * 30360000
*        MACRCALL   INITIATE CALL          ''         ''       ''     * 30390000
*        CALLEND    CALL END               ''         ''       ''     * 30420000
*        PROTOEND   PROTOTYPE END          ''         ''       ''     * 30450000
         SPACE                                                          30480000
*EXITS--                                                              * 30510000
*   NORMAL--BRANCH TO MINPUT                                          * 30540000
         SPACE                                                          30570000
*TABLES/WORK AREAS--N/A                                               * 30600000
         SPACE 3                                                        30630000
MPPKEY   LA    RMOVE,PROTOKWD           PROTOTYPE KEYWORD               30660000
         B     MPARM                    GO TO PIVOT                     30690000
MCPKEY   LA    RMOVE,MACRKWRD           CALL KEYWORD                    30720000
         B     MPARM                      AND TAKE PIVOT                30750000
MCPPOS   LA    RMOVE,MACRPOST           CALL POSITIONAL                 30780000
MPARM    EQU   *                        COMMON PARAMETER PIVOT          30810000
         USING JTEXT,INPTR              TEXT BASE                       30840000
         GOIF  NOCALL,ON=MINPUT         ABORTED CALL, DON'T PROCESS.    30870000
         LR    METAPTR,INPTR            PICK UP TEXT BASE AND           30900000
         AH    METAPTR,JTOPP            DEVELOP OPERAND POINTER AND     30930000
         USING JTMFLG,METAPTR             DECLARE AS META TEXT BASE.    30960000
         LR    R10,METAPTR              TEMPORARY                       30990000
         SH    R10,=H'5'                BACK UP TO HDR DATA START       31020000
         ST    R10,GENRTRN              PRESERVE PTR TO HDR FLAGS       31030000
         USING PFLAG,R10                                                31050000
         SPACE                                                          31080000
         GOIF  JTCPKEY,EQ=MPARM9        CALL KEYWORD, BRANCH            31110000
         GOIF  JTPPKEY,NE=MPARM10       NOT PROTOTYPE KEYWORD, BRANCH   31140000
         SPACE                                                          31170000
*        KEYWORD PROCESSING--SKIP KEYWORD ON FIRST SUBELEMENT ONLY      31200000
         SPACE                                                          31230000
MPARM9   EQU   *                        KEYWORD HANDLING                31260000
         GOIF  (PSUB,PSUBF),MIX=MPARM10                                X31290000
               BRANCH IF NOT A SUBLIST OR IF NOT FIRST SUB-OPERAND      31320000
         SR    R1,R1                    ZERO LENGTH REGISTER            31330000
         IC    R1,JTMLNG                PICK UP KEYWORD LENGTH          31350000
         LA    METAPTR,JTMSTRNG(R1)     AND BUMP STRING POINTER OVER   X31380000
                                          FLAG, LENGTH, AND KEYWORD.    31410000
MPARM10  EQU   *                        METAPTR NOW POINTS TO FIRST FLAG31440000
                                          IN META TEXT DESCRIBING      X31470000
                                          THE PARAMETER.                31500000
         GOIF  JSUBOPND,ON=MPARM11      SKIP AHEAD IF WE HAVE SUBSTITU- 31530000
         LA    METAPTR,JTMLNG             TION, ELSE JUST POINT TO      31560000
         LR    R11,METAPTR                                              31590000
         B     MPARM30                    LENGTH AND PUT IN DICTIONARY. 31620000
         DROP  METAPTR                                                  31650000
         SPACE                                                          31680000
MPARM11  EQU   *                        PARAMETER IS TO BE DEVELOPED   X31710000
                                          FROM META TEXT.               31740000
         SPACE                                                          31770000
         GOIF  PPASS,OFF=MPARM20        NOT PASSED PARM, SUBSTITUTE     31800000
         SPACE                                                          31830000
MPARM12  BAL   RETURN,EVALINIT          EVALUATE THE PARM REFERENCE     31860000
*        REFERENCE IS NOW AT BOTTOM OF EVAL STACK.                      31890000
         LA    R10,STACK                POINT TO TERM IN STACK          31920000
         SET   CHARMODE,ON              INDICATE CHAR STRINGS WANTED    31950000
         JCALL RESOLVE                  AND RESOLVE IT.                 31980000
         SET   CHARMODE,OFF             CLEAN UP CHAR STRING FLAG       32010000
*        NOW R14 POINTS TO REFERENCED PARAMETER, R11 POINTS TO STRING.  32040000
         USING PFLAG,R14                TEMPORARY BASE FOR PARM ENTRY   32130000
         GOIF  PSUB,OFF=MPARM15         BRANCH IF PARAM NOT SUBLIST     32140000
         L     R10,GENRTRN              RESTORE PTR TO HDR FLAGS        32150000
         TM    D0(R10),BIT0             SEE IF SUBLIST A SUBOPERAND     32160000
         BO    MPARM20                  MAKE STRING OF IT IF SO         32170000
         DROP  R14                                                      32220000
MPARM15  EQU   *                                                        32250000
         LR    R11,R14                  ELSE PUT PARM POINTER IN R11    32280000
         SET   PASSPARM,ON              INDICATE PARM PASSED AS PRM     32310000
*        DICTIONARY ENTRY                                               32340000
MPARM30  L     R12,DICTBASE             DICTIONARY BASE                 32370000
         LR    R10,INPTR                TEXT BASE FOR DICTIONARY ENTRY  32400000
         STC   RMOVE,NDXVAL             SET UP PROPER ENTRY INDEX       32430000
         BALR  R9,R12                   LINK TO DICTIONARY ROUTINE      32460000
         B     ERRDUMP                  RETURN FOR NEXT RECORD          32490000
         SPACE                                                          32520000
MPARM20  LA    VTXTOUT,STRING1          POINT TO A BUFFER               32550000
         LA    RCOMP1,STACK-STKENTRY    INITIALIZE                      32580000
         ST    RCOMP1,STACKLVL            EVAL STACK.                   32610000
         MVI   STRING1,D0               SET TO NULL STRING              32640000
         JCALL GENSTRNG                 AND GENERATE THE STRING.        32670000
         LR    R11,VTXTOUT              STRING POINTER FOR DICTIONARY   32700000
         B     MPARM30                  GO ENTER IN THE DICTIONARY      32760000
         SPACE                                                          32790000
MPEND    EQU   *                                                        32820000
         GOIF  JERR,OFF=MPEND05         BRANCH IF NO PARAM ERRORS       32850000
         L     R1,TXTOUT                GET PTR TO PROTOTYPE OR CALL    32880000
         USING MTEXT,R1                                                 32910000
         SET   MERR,ON                  TRANSFER ERROR FLAG TO TEXT     32940000
         DROP  R1                                                       33000000
         L     R1,ACTRCNT               PICK UP CURRENT ACTR VALUE      33007000
         SRL   R1,D1                    HALVE IT ON EDITOR ERROR        33014000
         ST    R1,ACTRCNT               SAVE NEW ACTR VALUE             33021000
MPEND05  EQU   *                                                        33030000
         SPACE                                                          33060000
         GOIF  NOCALL,OFF=MPEND10       NOT ABORTED CALL, PROCEED.      33090000
         SET   NOCALL,OFF               ELSE TURN OFF SWITCH,           33120000
         B     ERRDUMP                  AND EXIT                        33150000
MPEND10  GOIF  CALLING,ON=MCALLEND      BRANCH IF MACRO CALL SEQUENCE   33180000
         DICTCALL PROTOEND                ELSE ASSUME PROTOTYPE END     33210000
         SPACE                                                          33240000
         B     ERRDUMP                  RETURN FOR NEXT RECORD          33270000
         SPACE                                                          33300000
MCALLEND EQU   *                                                        33330000
         JGETL FILE=FILE1               FETCH NEXT TEXT RECORD          33360000
         USING JTEXT,R11                                                33390000
         GOIF  JTERROR,NE=MPEND15       PROCEED IF NOT ERROR RECORD     33420000
         JPUTM FILE=FILE2,ADDR=(R11)    FLUSH PAST ERROR RECORD(S)      33450000
         B     MCALLEND                 GO BACK FOR NEXT TEXT RECORD    33480000
         DROP  R11                                                      33510000
MPEND15  EQU   *                                                        33540000
         SPACE                                                          33570000
         SET   INMACRO,ON               INDICATE WE ARE NOW IN A MACRO  33600000
         DICTCALL CALLEND                                               33630000
         B     MINPUT                   RETURN FOR NEXT RECORD          33660000
         SPACE 3                                                        33690000
MCALL    EQU   *                        MACRO CALL                      33720000
         GOIF  (CALLING,NOCALL),ANY=MFEVAL RE-DIRECT CALL CONTINUATIONS 33750000
         SET   NOCALL,ON                ASSUME BAD INITIALLY            33780000
         SPACE                                                          33810000
         LA    R11,MACRCALL             SET ENTRY DISPLACEMENT          33930000
         LH    VTXTIN,JTOCP             GET OP CODE DISPLACEMENT        33960000
         AR    VTXTIN,INPTR             GET OP CODE POINTER             33990000
         BAL   RETURN,METAINIT          INITIALIZE META TEXT POINTER    34020000
         LR    R10,VTXTIN               SET UP FOR DICT ROUTINE         34050000
         SPACE                                                          34080000
         DICTCALL MACRCALL                                              34110000
         SPACE                                                          34140000
*        ON RETURN, R11 CONTAINS--                                      34170000
*              0    OK                                                * 34200000
*              4    MACRO NOT FOUND                    ERROR            34230000
*              8    INVALID PROTOTYPE                  ERROR          * 34260000
*              12   NO MACRO STATEMENT                 ERROR          * 34290000
*              16   BOOKNAME DOES NOT MATCH PROTOTYPE  ERROR          * 34320000
         SPACE                                                          34350000
*        SO WE'LL DO AN INDEXED BRANCH                                  34380000
         B     CALLTABL(R11)            DO INDEXED BRANCH               34410000
         SPACE                                                          34440000
CALLTABL EQU   *                        BRANCH TABLE ORIGIN             34470000
         SPACE                                                          34500000
         B     MCALL10                  WE MADE IT OK.                  34530000
         B     LOGERR78                 THAT'S                          34560000
         B     LOGERR87                   NOT                           34590000
         B     LOGERR85                    A                            34620000
         B     LOGERR88                    MACRO.                       34650000
         B     LOGER100                 NO DICTIONARY                   34680000
         SPACE                                                          34710000
MCALL10  SET   (CALLING,NOCALL),FLIP    CALLING ON, NOCALL OFF          34740000
         L     R1,MACROLVL              INCREMENT                       34770000
         LA    R1,D1(,R1)                    MACRO NEST DEPTH           34800000
         ST    R1,MACROLVL                        BY ONE                34830000
         L     RCOMP1,SYSNDX           PICK UP CURRENT SYSNDX           34837000
         LA    RCOMP1,D1(,RCOMP1)       INCREMENT IT BY 1 FOR CALL      34844000
         ST    RCOMP1,SYSNDX            PUT IT BACK, UPDATED            34851000
         B     MFEVAL                   LET FEVAL GENERATE IMAGES       34860000
         SPACE 10                                                       34866000
* DUMMY ROUTINE TO HANDLE PROTOTYPE PARAMETERS, POSITIONAL -            34872000
* SIMPLE RETURN FOR NEXT RECORD                                         34878000
MPPPOS   B     MINPUT                   RETURN FOR NEXT RECORD          34884000
         SPACE                                                          34890000
         EJECT                                                          34920000
LOGERR78 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  34950000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          34980000
         DC    AL1(SEV78,ERR78)         ERROR PARAMETERS                35010000
LOGCOMN  EQU   *                                                        35040000
         BAL   RETURN,PRINT90           PUT OUT COPY OF BOGUS MACRO     35070000
         B     ERRDUMP                  GO TERMINATE STATEMENT          35100000
LOGERR85 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  35130000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          35160000
         DC    AL1(SEV85,ERR85)         ERROR PARAMETERS                35190000
         B     LOGCOMN                  GO MAKE REAL ERROR ENTRY        35220000
LOGERR87 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  35250000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          35280000
         DC    AL1(SEV87,ERR87)         ERROR PARAMETERS                35310000
         B     LOGCOMN                  GO MAKE REAL ERROR ENTRY        35340000
LOGERR88 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  35370000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          35400000
         DC    AL1(SEV88,ERR88)         ERROR PARAMETERS                35430000
         B     LOGCOMN                  GO MAKE REAL ERROR ENTRY        35460000
LOGERR90 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  35490000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          35520000
         DC    AL1(SEV90,ERR90)         ERROR PARAMETERS                35550000
         B     ERRDUMP                  GO TERMINATE STATEMENT          35580000
LOGER100 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  35610000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          35640000
         DC    AL1(SEV100,ERR100)       ERROR PARAMETERS                35670000
         B     LOGCOMN                  GO MAKE REAL ERROR ENTRY        35700000
LOGER118 LA    R12,LOGERR01             GET BASE FOR ERROR LOGGING RTN  35730000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          35760000
         DC    AL1(SEV118,ERR118)       ERROR PARAMETERS                35790000
         B     MEND11                   PROCEED ON ACTR OVERRUN         35820000
         EJECT                                                          35850000
*TITLE-                                                               * 35880000
*        MBRANCH/GENERATOR TEXT BRANCH ROUTINE                        * 35910000
*                                                                     * 35940000
*FUNCTION/OPERATION-                                                  * 35970000
*        HANDLES CONDITIONAL ASSEMBLY BRANCHING.  FOR AIF STATEMENTS, * 36000000
*    CALLS BEVAL TO DETERMINE IF BRANCH IS TO BE TAKEN.  FOR AGO      * 36030000
*    STATEMENTS, AND AIF STATEMENTS IF CONDITION IS YES, CALLS MPOINTR* 36060000
*    TO EFFECT THE BRANCH.                                            * 36090000
*                                                                     * 36120000
         SPACE 3                                                        36150000
MBRANCH1 EQU   *                        AGO ENTRY POINT                 36180000
         SPACE                                                          36210000
         BAL   RETURN,PRINT10           PRINT IF OPTIONS ARE ON         36240000
         USING JTEXT,INPTR              BASE FOR TEXT                   36270000
         LH    VTXTIN,JTOPP             GET OPERAND POINYER             36300000
         AR    VTXTIN,INPTR             MAKE ABSOLUTE                   36330000
         BAL   RETURN,METAINIT          GET PTP TO META TEXT START      36360000
         SPACE                                                          36390000
MBRANCH2 EQU   *                                                        36420000
         SPACE                                                          36450000
         L     RCOMP1,ACTRCNT           PICK UP ACTR COUNT              36480000
         GOIF  (RCOMP1),NOTPOS=LOGER118 ACTR RAN OUT, LOG THE MESSAGE   36510000
         BCTR  RCOMP1,D0                ELSE DECREMENT ACTR             36540000
         ST    RCOMP1,ACTRCNT           AND REPLACE                     36570000
         LR    R10,VTXTIN               SET UP META TEXT PTR FOR DICT   36600000
         SPACE                                                          36630000
         DICTCALL SEQSYMBR              BRANCH TO THE SEQUENCE SYMBOL   36660000
         SPACE                                                          36690000
         SPACE                                                          36720000
         BNZ   ERRDUMP                  GO GET NEXT RCD IF ALL OK       36750000
         B     LOGERR90                 GO DIAGNOSE SITUATION           36780000
         DROP  INPTR                                                    36810000
         EJECT                                                          36840000
*TITLE-                                                               * 36870000
*        MEND/GENERATOR MEND MEXIT END ROUTINE                        * 36900000
*                                                                     * 36930000
*FUNCTION/OPERATION-                                                  * 36960000
*        HANDLES END OF FILE PROCESSING FOR EACH TEXT SEGMENT.  RE-   * 36990000
*    CEIVES CONTROL EITHER UPON ENCOUNTERING AN END, MEND, OR MEXIT   * 37020000
*    STATEMENT IN THE TEXT STREAM.  END CAUSES TERMINATION OF PHASE.  * 37050000
*    MEND OR MEXIT CAUSE TERMINATION OF THE CURRENT MACRO, CALLS FOR  * 37080000
*    RESETTING TEXT TO POINT AT WHICH THE MACRO WAS CALLED, AND RE-   * 37110000
*    SETS DICTIONARY POINTERS TO THE LOCAL DICTIONARY OF THE CALLING  * 37140000
*    TEXT SEGMENT.                                                    * 37170000
*                                                                     * 37200000
*ENTRY POINTS-                                                        * 37230000
*        MEND1--MEND/MEXIT PROCESSING                                 * 37260000
*        MEND2--END PROCESSING                                        * 37290000
*                                                                     * 37320000
         SPACE 3                                                        37350000
MEND1    EQU   *                                                        37380000
         SPACE                                                          37410000
         BAL   RETURN,PRINT30           PRINT IF OPTIONS ARE ON         37440000
MEND11   EQU   *                                                        37470000
         L     RCOMP1,MACROLVL          PICK UP CURRENT MACRO NEST LVL  37480000
         GOIF  (RCOMP1),POS=MEND12      CHEK IF ACTR OVFLO IN OPEN CD   37490000
         SET   FLUSH3,ON                GENERATE END CARD               37496000
         B     ERRDUMP                  GO TO DIAGNOSE AND EXIT         37510000
MEND12   EQU   *                                                        37520000
         BCT   RCOMP1,MEND1A            ADJUST BY ONE. IF ZERO,         37530000
         SET   INMACRO,OFF                THEN TURN OFF SWITCH INMACRO. 37590000
MEND1A   ST    RCOMP1,MACROLVL          IN EITHER CASE, SAVE THE COUNT. 37620000
         DICTCALL MACRFINI              POP THE DICTIONARY LEVEL ALSO   37630000
         B     ERRDUMP                  RETURN TO GET NEXT RECORD       37650000
         SPACE 3                                                        37680000
         EJECT                                                          37710000
*TITLE-                                                               * 37740000
*   MSET/MACRO GENERATOR SET STATEMENT PROCESSOR                      * 37770000
         SPACE                                                          37800000
*FUNCTION/OPERATION-                                                  * 37830000
*   CALLS EVAL TO CONVERT OPERAND META TEXT TO CHARACTER OR ARITHMETIC* 37860000
*   FORM, THEN PASSES VALUE THROUGH DICTIONARY LINKAGE FOR ENTRY.    *  37890000
         SPACE                                                          37920000
MSETA    EQU   *                        SETA ENTRY                      37950000
MSETB    EQU   *                        SETB ENTRY                      37980000
MSETC    EQU   *                        SETC ENTRY                      38010000
MAIF     EQU   *                        AIF ENTRY                       38040000
MACTR    EQU   *                        ACTR ENTRY                      38070000
         SPACE                                                          38100000
*                                       MERCY--THEY'RE ALL THE SAME.    38130000
         SPACE                                                          38160000
         BAL   RETURN,PRINT10           PRINT IF OPTIONS ARE ON         38190000
         USING JTEXT,FTXTIN             FIXED INPUT BASE                38220000
         LH    VTXTIN,JTOPP               OPERAND DISPLACEMENT          38250000
         AR    VTXTIN,FTXTIN              MAKE ABSOLUTE                 38280000
         LA    VTXTOUT,STRING1          OUTPUT POINTER--A BUFFER        38310000
         SPACE                                                          38340000
         BAL   RETURN,METAINIT          GO INITIALIZE META TEXT         38370000
         BAL   RETURN,EVALINIT          GO INITIALIZE EVAL STACKS       38400000
         SPACE                                                          38430000
         GOIF  JTSETB,GT=MSETC10        IF SETC, GO DO IT               38460000
         SPACE                                                          38490000
         LR    VTXTIN,R10               RESTORE THE REAL TEXT POINTER   38520000
*        LAST ELEMENT IN STACK MAY NOT BE SELF DEFINING TERM.           38550000
         LA    R10,STACK                SO POINT TO IT,                 38580000
         JCALL RESOLVE                      AND RESOLVE IT.             38610000
*        NOW R11 CONTAINS THE VALUE.                                    38640000
         SPACE                                                          38670000
         GOIF  JTACTR,EQ=ACTR           IF ACTR, GO DO IT               38700000
         GOIF  JTAIFB,LE=AIF,ELSE=MSET20                               X38730000
                                        GO DO AIF, ELSE SKIP TO SETAB   38760000
         SPACE                                                          38790000
MSETC10  EQU   *                        SETC--CHARACTER STRING          38820000
         SPACE                                                          38850000
         LA    R11,STRING1              GET POINTER TO STRING           38880000
         SPACE                                                          38910000
MSET20   EQU   *                        NOW GET READY FOR DICTIONARY DO 38940000
         SPACE                                                          38970000
SET20    LH    VTXTIN,JTNMP             GET NAME FIELD POINTER          39000000
         AR    VTXTIN,FTXTIN            MAKE ABSOLUTE                   39030000
         DROP  FTXTIN                                                   39060000
         ST    R11,STRRTRN              STORE VALUE IN R11              39090000
         BAL   RETURN,METAINIT          INITIALIZE NAME FIELD META      39120000
         LA    RCOMP1,STACK-STKENTRY    POINT TO START OF EVAL STACK    39150000
         ST    RCOMP1,STACKLVL            AND SAVE AS STACK POINTER     39180000
         L     R12,=A(EVAL)             GO EVALUATE THE                 39210000
         BALR  RETURN,R12                 SET TARGET                    39240000
         L     R11,STRRTRN              RESTORE R11 TO SET VALUE        39270000
         LA    R10,STACK                POINT TO TERM--NOW IN STACK     39300000
         SPACE                                                          39330000
         USING JTMFLG,R10               BASE FOR SET SYMBOL             39360000
         GOIF  JTMGBL,ON=SET32          GLOBAL, GO DO GLOBAL SET        39390000
         DROP  R10                                                      39420000
         SPACE                                                          39450000
SET30    DICTCALL LCLDICTS              LOCAL SET                       39480000
         B     ERRDUMP                  RETURN TO GET NEXT RECORD       39510000
         SPACE                                                          39540000
SET32    DICTCALL GBLDICTS              GLOBAL SET                      39570000
         B     ERRDUMP                  RETURN TO GET NEXT RECORD       39600000
         SPACE 3                                                        39630000
AIF      EQU   *                        AIF ENTRY                       39660000
         SPACE                                                          39690000
         LR    R10,VTXTIN               TEXT POINTER IN R10 AS A PARAM-X39720000
                                          ETER--POINTS TO SEQUENCE SYM. 39750000
         GOIF  (R11),ZERO=ERRDUMP,ELSE=MBRANCH2                        X39780000
                                        RETURN IF ZERO ELSE POINT TEXT  39820000
         SPACE 3                                                        39870000
ACTR     EQU   *                                                        39900000
         SPACE                                                          39930000
*        NEW ACTR VALUE IS IN REG R11                                   39960000
         SPACE                                                          39990000
         ST    R11,ACTRCNT              STORE AS NEW ACTR               40020000
         B     ERRDUMP                  RETURN TO GET NEXT RECORD       40050000
         EJECT                                                          40080000
EVALINIT EQU   *                        INITIALIZE EVAL ROUTINE         40110000
         SPACE                                                          40140000
         SET   CCOMP,OFF                ASSUME ARITHMETIC COMPARES      40170000
         LA    RCOMP1,STACK-STKENTRY    NOTHING IN THE STACK            40200000
         ST    RCOMP1,STACKLVL          POINT TO START OF EVAL STACK    40230000
         LA    RCOMP1,STRING1           FIRST STRING BUFFER             40260000
         ST    RCOMP1,STRPTR1             AND SAVE IT                   40290000
         MVI   STRING1,D0               NULL STRING                     40320000
         MVI   STRING2,D0               NULL STRING                     40350000
         L     R12,=A(EVAL)             POINT TO EVAL ROUTINE           40380000
         BR    R12                        AND GO.  RETURN VIA R9.       40410000
         EJECT                                                          40440000
METAINIT EQU   *                        POINT TO START OF META TEXT     40470000
         SPACE                                                          40500000
         SH    VTXTIN,=H'2'             GET PTR TO META TEXT LENGTH     40530000
         MVC   JHWORD1,D0(VTXTIN)       ALIGN 2-BYTE META TEXT LENGTH   40560000
        SH    VTXTIN,JHWORD1            DEVELOP PTR TO META TEXT START  40590000
         BR    RETURN                   RETURN TO CALLER                40620000
         EJECT                                                          40650000
         DS    0H                                                       40680000
MOVEFLD  EQU   *                                                        40710000
         SPACE                                                          40740000
         USING JTEXT,FTXTIN                                             40770000
         USING MTEXT,FTXTOUT                                            40800000
         USING MTOCO,VTXTOUT            VARIABLE TEXT OUTPUT            40830000
         USING JTOCO,VTXTIN               AND INPUT BASES.              40860000
         SPACE                                                          40890000
         AR    VTXTIN,FTXTIN            VTXTIN CONTAINS DISPLACEMENT-- X40920000
                                          ADD TEXT POINTER TO GET FIELDX40950000
                                          POINTER FOR INPUT.            40980000
         LR    R0,VTXTIN                SAVE INPUT POINTER              41010000
         AR    VTXTOUT,FTXTOUT          ADD RECORD BASE FOR OUTPUT      41040000
         SPACE                                                          41070000
MOVFLD5  GOIF  JTOCOCD,OFF=MOVFLD10     NO CARD POINTER, SKIP.          41100000
         MVC   MTOCO,JTOCO                ELSE MOVE IT                  41130000
         LA    VTXTIN,JTOCL               AND ADJUST INPUT POINTER      41160000
         LA    VTXTOUT,MTOCL              AND OUTPUT POINTER.           41190000
         SPACE                                                          41220000
MOVFLD10 EQU   *                        MOVE THE COLUMN POINTER         41250000
         SPACE                                                          41280000
         MVC   MTOCO,JTOCO              MOVE 1 BYTE                     41310000
         LA    VTXTIN,JTOCL             ADJUST INPUT                    41340000
         LA    VTXTOUT,MTOCL              AND OUTPUT POINTERS           41370000
         ST    VTXTOUT,GENRTRN          SAVE POINTER TO LENGTH.         41400000
         SPACE                                                          41430000
         USING JTOCL,VTXTIN             NEW BASE IN                     41460000
         USING MTOCL,VTXTOUT            NEW BASE OUT                    41490000
         SPACE                                                          41520000
         MVI   MTOCL,D0                 INITIALLY A ZERO LENGTH STRING  41550000
         SPM   RETURN                   RECOVER ENTRY CONDITION CODE    41580000
         BO    GENFLD                     GO TO GENFLD IF SUBSTITUTION  41610000
         SPACE                                                          41640000
         IC    RMOVE,JTOCL              PICK UP LENGTH                  41700000
MOVFLD20 EX    RMOVE,MVCFLD10             AND EXECUTE FIELD MOVE OF    X41730000
                                          FIELD PLUS LENGTH.            41760000
         LA    VTXTOUT,D1(RMOVE,VTXTOUT)     ADJUST OUTPUT POINTER      41790000
         SR    VTXTOUT,FTXTOUT            AND REDUCE TO DISPLACEMENT.   41820000
         BR    RETURN                   RETURN TO CALLER                41850000
         SPACE                                                          41880000
MVCFLD10 MVC   MTOCL(D0),JTOCL          REMOTE FIELD MOVE               41910000
         SPACE                                                          41940000
         DROP  VTXTIN,VTXTOUT,FTXTIN,FTXTOUT                            41970000
         EJECT                                                          42000000
*TITLE--                                                                42030000
*   GENFLD/GENERATE A FIELD                                             42060000
         SPACE                                                          42090000
         DS    0H                                                       42120000
GENFLD   EQU   *                                                        42150000
         SPACE                                                          42180000
*        ON ENTRY, VTXTIN POINTS TO REAL START OF VIRTUAL TEXT          42210000
         SPACE                                                          42240000
         LR    VTXTIN,R0                RECOVER INPUT POINTER           42270000
         LR    FLDLN,RETURN             SAVE THE RETURN ADDRESS         42300000
         BAL   RETURN,METAINIT          GET PTR TO META TEXT START      42330000
         SPACE                                                          42360000
*        NOW VTXTIN POINTS TO START OF META TEXT.                       42390000
         SPACE                                                          42420000
         ST    FTXTOUT,OUTPTR           SAVE THE REAL OUTPUT POINTER    42450000
         LA    RCOMP1,STACK-STKENTRY    START OF STACK BECOMES          42480000
         ST    RCOMP1,STACKLVL            INTIAL STACK POINTER          42510000
         JCALL GENSTRNG                 GENERATE A CHARACTER STRING     42540000
         SPACE                                                          42570000
GENFLD90 EQU   *                        GENFLD EXIT ROUTINE             42600000
         SPACE                                                          42630000
         LR    VTXTOUT,R10              PICK UP NEW FIELD POINTER       42660000
         L     FTXTOUT,OUTPTR           RESTORE THE OUTPUT POINTER      42690000
         SR    VTXTOUT,FTXTOUT          REDUCE OUTPUT POINTER TO       X42720000
                                        DISPLACEMENT.                   42750000
         BR    FLDLN                    RETURN ON THE SAVED RETURN REG  42780000
         EJECT                                                          42810000
*        CONSTANTS FOR X3A                                              42840000
         SPACE                                                          42870000
DICTBASE DC    A(DICTENTR)              DICTIONARY INTERFACE BASE       42900000
DUMYEND  DC    AL2(24),AL1(JPSOP+JDEF+JREF,0,JTEND,0),AL2(17,19,17,17,1X42910000
               7),AL1(0),AL2(0),AL1(10,3,JE,JN,JD)                      42920000
         JEXTRN (X3N01=DICTENTR)          DECLARE IT EXTERNAL           42930000
CHKSYMLN DC    Y(MAXSYM)                HALFWORD CONSTANT TO CHECK SYM-X42960000
                                          BOL LENGTH OVERFLOW           42990000
HHDRLN   DC    Y(JTHDRLN)               TEXT RECORD HEADER LENGTH       43020000
         SPACE                                                          43050000
         DS    0H                                                       43140000
         SPACE 3                                                        43170000
* LOGERR - THIS SUBROUTINE MAKES AN ENTRY FOR A SINGLE ERROR IN THE     43200000
*          ERROR STACK AND INCREMENTS THE ERROR COUNT BY 1.             43230000
*                                                                       43260000
LOGERR01 EQU   *                                                        43290000
         JENTRY (X3A02=LOGERR01)                                        43320000
         USING LOGERR01,R12                                             43350000
         STM   R14,R15,GENREGS          SAVE WORK REGISTERS             43360000
         CLI   D0(R9),D4                LOOK FOR SEVERITY 4 MESSAGE     43370000
         BNH   LOGERR03                 BRANCH IF NOT GT 4              43380000
         L     R14,ACTRCNT              PICK UP CURRENT ACTR VALUE      43390000
         SRL   R14,D1                   HALVE IT ON GENERATE ERROR      43400000
         ST    R14,ACTRCNT              SAVE NEW ACTR VALUE             43410000
LOGERR03 CLC   JMSGL,D0(R9)             SEE IF MESSAGE SHOULD BE PUT    43420000
         BH    LOGERR02                 RETURN IF NOT                   43430000
         CLC   D0(D1,R9),JSEVER         IS THIS HIGHER                  43470000
         BNH   LOGERR04                 BRANCH IF NOT                   43477000
         MVC   JSEVER(D1),D0(R9)        ENTER HIGH                      43484000
LOGERR04 LH    R14,ERRCNT               PICK UP CURRENT ERROR COUNT     43491000
         LA    R14,D1(,R14)             ADJUST FOR ERROR JUST ADDED     43500000
         STH   R14,ERRCNT               SAVE NEW ERROR COUNT            43530000
         L     R15,ESTKNDX               GET PTR TO NEXT ERROR SLOT     43560000
         MVC   D0(D2,R15),D0(R9)         INSERT SEV CODE ERR NUMBER     43590000
         MVI   D2(R15),J0                INSERT DATA LENGTH             43620000
         CH    R14,=H'6'                 SEE IF 7TH OR MORE MESSAGE     43650000
         BNL   LOGERR02                 BRANCH IF SO                    43680000
         LA    R15,D3(,R15)             ADJUST STACK PTR FOR NEW ENTRY  43710000
         ST    R15,ESTKNDX              SAVE FOR NEXT ERROR ENTRY       43740000
LOGERR02 EQU   *                                                        43770000
         LM    R14,R15,GENREGS          RESTORE SAVED REGIS0ERS         43800000
         B     D2(,R9)                  RETURN TO CALLING RTN           43830000
         DROP  R12                                                      43860000
         SPACE 3                                                        43870000
         JPATCH  X3A00,E44              PATCH AREA                      43880000
         EJECT                                                          43890000
         JCSECT (X3A03)                                                 43900000
         SPACE                                                          43910000
*TITLE--                                                              * 43920000
*                                                                     * 43950000
*   RESOLVE/RESOLVE TERMS ROUTINE                                     * 43980000
*                                                                     * 44010000
*FUNCTION/OPERATION--                                                 * 44040000
*                                                                     * 44070000
*   PROCESSES ALL TERMS, LOOKING UP THOSE THAT ARE VARIABLE.  ON ENTRY* 44100000
*   R10 POINTS TO TERM.  ON OUTPUT, R11 CONTAINS VALUE OF THE TERM IF * 44130000
*   ARITHMETIC MODE, OR A POINTER TO L FIELD OF STRING IF CHARACTER.  * 44160000
*                                                                     * 44190000
         SPACE                                                          44220000
RESOLVE  EQU   *                                                        44250000
         SPACE                                                          44280000
RESOLV00 STM   R2,R9,RESOLVST           SAVE CALLERS REGISTERS          44290000
         LR    R8,R12                   ESTABLISH BASE FOR RTN          44300000
         USING RESOLV00,R8                                              44310000
         SPACE                                                          44340000
         USING JTMFLG,R10               DUMMY BASE                      44370000
         SET   CTYPE,OFF                INITIALLY ASSUME ARITHMETIC IN  44400000
         GOIF  JTMGBL,ON=RESOLV08       IF GLOBAL, GO SET SWITCH,       44430000
         SET   GLOBAL,OFF               ELSE MAKE SURE IT IS OFF        44460000
         B     RESOLV09                 AND CONTINUE AT COMMON POINT    44490000
RESOLV08 SET   GLOBAL,ON                MUST DO GLOBAL LOOKUP           44520000
RESOLV09 SET   JTMCSW,OFF               MAKE SURE FLAG IS CLEAN         44550000
         SPACE                                                          44580000
         GOIF  JTMSDT,EQ=RESOLV30       SELF DEFINING TERM              44610000
         GOIF  JTMSVC,EQ=RESOLV10,LT=RESOLV12     SET SYMBOL            44640000
         GOIF  JTMOSA,LT=RESOLV10,      GLOBAL SETC                    X44670000
               EQ=RESOLV80,             ORDINARY SYMBOL                X44700000
               ELSE=RESOLV70            PARAMETER OR SYSLIST            44730000
         DROP  R10                                                      44760000
         SPACE                                                          44790000
RESOLV10 EQU   *                        SET SYMBOL--SETC                44820000
         SET   CTYPE,ON                 INDICATE CHARACTER TYPE         44850000
RESOLV12 EQU   *                        SETA, SETB ENTRY                44880000
         GOIF  GLOBAL,OFF=RESOLV14      NOT GLOBAL, DO LOCAL LOOKUP     44910000
RESOLV13 DICTCALL GBLDICTR,POINTER==A(DICTENTR)   GLOBAL REFERENCE      44940000
         B     RESOLV15                 GO TO EXIT SEQUENCE             44970000
RESOLV14 DICTCALL LCLDICTR,POINTER==A(DICTENTR)   LOCAL REFERENCE       45000000
RESOLV15 GOIF  CTYPE,OFF=RESOLV17       NOT CHARACTER TYPE IN, BRANCH   45030000
RESOLV16 GOIF  CHARMODE,ON=RESOLV90,    CHARACTER IN, SAME OUT, EXIT   X45060000
               ELSE=ARTHCONV              ELSE CONVERT TO ARITHMETIC    45090000
RESOLV17 GOIF  CHARMODE,OFF=RESOLV90,   ARITH IN, ARITH OUT, EXIT      X45120000
               ELSE=CHARCONV              ELSE CONVERT TO CHARACTER     45150000
         SPACE 3                                                        45180000
RESOLV30 EQU   *                        SELF DEFINING TERM              45210000
         SPACE                                                          45240000
         USING STACK,R10                BASE FOR TERM                   45270000
         L     R11,STACKVAL             PICK UP VALUE                   45300000
         DROP  R10                                                      45330000
         B     RESOLV90                   AND RETURN                    45360000
         SPACE 3                                                        45390000
         SPACE                                                          45420000
RESOLV70 EQU   *                        SYSLIST OR PARAMETER            45450000
         SPACE                                                          45480000
         DICTCALL PARMTBLR,POINTER==A(DICTENTR)  DICTIONARY CALL        45510000
*        R11 NOW POINTS TO PARAMETER ENTRY HEADER.                      45540000
         SPACE                                                          45570000
         LR    R14,R11                  SAVE PARAMETER POINTER          45600000
         USING PARMTAB,R14              BASE FOR PARAMETER              45630000
         GOIF  PSUB,ON=RESOLV71         SUBLIST, SKIP AHEAD             45660000
         LA    R11,PKAT                 ELSE POINT TO CHARACTER STRING  45690000
         SET   SUBLIST,OFF              TURN SUBLIST FLAG OFF           45700000
         B     RESOLV72                 LENGTH AND EXIT.                45720000
RESOLV71 MVC   JHWORD1,PNAT             SUBLIST, ALIGN N ATTRIBUTE      45750000
         SET   SUBLIST,ON               AND TURN ON SUBLIST FLAG        45780000
         XC    JFWORD1,JFWORD1          CLEAR HOLDING AREA              45820000
         MVC   JFWORD1+D1(D3),PLIST     ALIGN SUBLIST VECTOR POINTER.   45870000
         SPACE                                                          45900000
RESOLV72 EQU   *                       GET PARAMETER BINARY VALUE.      45930000
         SPACE                                                          45960000
         GOIF  CHARMODE,YES=RESOLV90    CHARACTERS, RETURN.             45990000
         GOIF  PSUB,ON=LOGER113         ILLEGAL SUBLIST REFERENCE       46020000
         GOIF  PSDT,OFF=ARTHCONV        NOT SDT, GO CONVERT TO BINARY   46050000
         MVC   JFWORD1,PVAL             ALIGN THE VALUE                 46080000
         DROP  R14                                                      46110000
         L     R11,JFWORD1              AND PICK IT UP.                 46140000
         B     RESOLV90                 EXIT.                           46170000
         SPACE 3                                                        46200000
RESOLV80 EQU   *                        ORDINARY SYMBOL REFERENCE       46230000
         SPACE                                                          46260000
         DICTCALL ORDSYMBR,POINTER==A(DICTENTR) ORDINARY SYMBOL REF     46290000
         LR    R14,R11                  SAVE THE POINTER.               46320000
         B     RESOLV90                   AND RETURN.                   46350000
         SPACE 3                                                        46380000
LOGER113 L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    46410000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          46440000
         DC    AL1(SEV113,ERR113)       ERROR PARAMETERS                46470000
         SET   SUBLIST,OFF              CLEAN UP SUBLIST SWITCH         46480000
         SR    R11,R11                  SET UP DEFAULT VALUE TO RETURN  46500000
         B     RESOLV99                 PROCEED AS NORMAL               46530000
LOGER107 L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    46560000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          46590000
         DC    AL1(SEV107,ERR107)       ERROR PARAMETERS                46620000
         B     RESOLV98                 CONTINUE AT COMMON POINT        46650000
LOGER108 L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    46680000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          46710000
         DC    AL1(SEV108,ERR108)       ERROR PARAMETERS                46740000
         B     RESOLV98                 CONTINUE AT COMMON POINT        46770000
LOGER109 L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    46800000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          46830000
         DC    AL1(SEV109,ERR109)       ERROR PARAMETERS                46860000
         B     RESOLV98                 CONTINUE AT COMMON POINT        46890000
LOGER127 L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    46920000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          46950000
         DC    AL1(SEV127,ERR127)       ERROR PARAMETERS                46980000
RESOLV98 EQU   *                                                        47010000
         SR    R11,R11                  SET UP DEFAULT VALUE TO RETURN  47040000
RESOLV90 EQU   *                        EXIT FROM ROUTINE               47070000
         SPACE                                                          47100000
RESOLV99 LM    R2,R9,RESOLVST           RESTORE CALLERS REGISTERS       47120000
         BR    R9                       RETURN TO CALLER                47140000
         EJECT                                                          47160000
*TITLE--                                                              * 47190000
*   ARTHCONV/CONVERT CHARACTER STRING TO ARITHMETIC VALUE             * 47220000
*                                                                     * 47250000
         SPACE                                                          47280000
*        ON ENTRY R11 POINTS TO L FIELD OF CHARACTER STRING             47310000
         SPACE                                                          47340000
ARTHCONV EQU   *                                                        47370000
         SPACE                                                          47400000
         USING JTMLNG,R11               BASE                            47430000
         GOIF  JTMLNG,MAXDEC,GT=LOGER107 TOO LONG TO CONVERT, ERROR     47460000
         SR    R1,R1                    CLEAR                           47490000
         IC    R1,JTMLNG                PICK UP STRING LENGTH           47520000
         DROP  R11                                                      47550000
         SPACE                                                          47580000
*        MAKE SURE WE HAVE ALL NUMERICS                                 47610000
         SPACE                                                          47640000
         GOIF  (R1),ZERO=LOGER109       NULL STRING, ERROR              47670000
         AR    R1,R11                   POINT PAST END OF STRING        47700000
ACONV10  EQU   *                                                        47730000
         USING JTMSTRNG,R1              NEW BASE                        47760000
         GOIF  JTMSTRNG,JNUMMAX,GT=LOGER108 NOT NUMERIC, ERROR          47790000
         BCTR  R1,D0                    COUNT BACK DOWN TO START        47820000
         GOIF  (R1),(R11),HI=ACONV10    MORE, ITERATE                   47850000
         SPACE                                                          47880000
*        NOW WE CAN CONVERT                                             47910000
         SPACE                                                          47940000
         USING JTMLNG,R1                                                47970000
         IC    R11,JTMLNG               PICK UP LENGTH OF CONVERT STRNG 48000000
         BCTR  R11,D0                   MAKE LENGTH L-1 FOR EXECUTE     48030000
         EX    R11,STRNGTRL             TRANSLATE STRING TO ZONED       48060000
         EX    R11,STRNGPCK             PACK ZONED TO PACKED            48090000
         EX    R11,STRNGTRL             TRANSLATE ZONED TO STRING       48120000
         OI    JDWORD+L'JDWORD-D1,JC    OR IN A PLUS FOR SIGN           48150000
         CLC   JDWORD,=PL8'2147483647'  CHECK FOR MAXIMUM ARITH VALUE   48180000
         BH    LOGER127                 TOO HIGH, ERROR                 48210000
         CVB   R11,JDWORD               AND CONVERT TO BINARY           48240000
         SPACE                                                          48270000
*        R11 CONTAINS RESULTANT VALUE                                   48300000
         SPACE                                                          48330000
         B     RESOLV90                 RETURN TO CALLER                48360000
STRNGTRL TR    JTMSTRNG(D0),JTRTABLE    EXECUTED STRING TRANSLATE       48390000
STRNGPCK PACK  JDWORD,JTMSTRNG          EXECUTED STRING PACK            48420000
         DROP  R1                                                       48450000
         EJECT                                                          48480000
*TITLE                                                                * 48510000
*   CHARCONV/CONVERT ARITHMETIC TO CHARACTER STRING                   * 48540000
*                                                                     * 48570000
         SPACE                                                          48600000
*        ON ENTRY R11 CONTAINS VALUE                                    48630000
         SPACE                                                          48660000
CHARCONV EQU   *                                                        48690000
         SPACE                                                          48720000
         CVD   R11,JDWORD               CONVERT TO P&CKED DECIMAL       48750000
         UNPK  UNPKBUF,JDWORD             AND UNPACK                    48780000
         NC    UNPKBUF,ZONEMASK         TRANSLATE TO INTERNAL           48810000
         GOIF  INMACRO,OFF=CCONV05      SYSNDX NOT IN OPEN CODE         48840000
         USING JTMFLG,R10                                               48870000
         GOIF  JTMSVA,GT=CCONV05        BRANCH IF NOT LOCAL SETA        48900000
         LA    R1,UNPKBUF+D12           SET UP PTR TO LEFT OF SYSNDX    48930000
         CLC   JTMPTR,=F'0'             SEE BY PTR IF SYSNDX            48960000
         BZ    CCONV10                  LEAVE ZEROS IF SYSNDX VALUE     48990000
         DROP  R10                                                      49020000
CCONV05  EQU   *                                                        49050000
         TRT   UNPKBUF,ZONEMASK         FIND FIRST SIGNIFICANT DIGIT    49080000
         BNZ   CCONV10                  EXIT POINTING                   49110000
         LA    R1,UNPKLAST              FAKE ONE IF NONE                49140000
         SPACE                                                          49170000
CCONV10  EQU   *                                                        49200000
         SPACE                                                          49230000
*        R1 CONTAINS ADDRESS OF FIRST NON-ZERO CHARACTER                49260000
         SPACE                                                          49290000
         LA    RCOMP0,UNPKEND           POINT TO ONE PAST END OF STRING 49320000
         SR    RCOMP0,R1                  AND COMPUTE STRING LENGTH     49350000
         BCTR  R1,D0                    BACK UP TO SPACE BEFORE THE     49380000
         LR    R11,R1                     STRING, USE R11 TO POINT TO   49410000
         USING JTMLNG,R11                 IT, AND STORE THE STRING      49440000
         STC   RCOMP0,JTMLNG              LENGTH IN IT.                 49470000
         DROP  R11                                                      49500000
         SPACE                                                          49530000
*        ON RETURN, R11 MUST POINT TO THE LENGTH FIELD OF THE STRING    49560000
         SPACE                                                          49590000
         B     RESOLV90                 EXIT                            49620000
         EJECT                                                          49650000
*TITLE--                                                              * 49680000
*   EVAL/GENERAL EVALUATION OF ALL META TEXT                          * 49710000
*                                                                     * 49740000
*FUNCTION/OPERATION--                                                 * 49770000
*   CONVERTS META TEXT FROM THE EDITOR INTO APPROPRIATE CHARACTER     * 49800000
*   STRINGS OR ARITHMETIC VALUES.  META TEXT IS AN ORDERED SEQUENCE   * 49830000
*   OF META TERMS AND OPERATORS.  TERMS ARE ENTERED IMMEDIATELY INTO  * 49860000
*   A PUSH DOWN STACK.  OPERATORS REMOVE TERMS FROM THE TOP OF THE    * 49890000
*   STACK AND RETURN VALUES TO THE STACK.  CHARACTER STRINGS ARE NOT  * 49920000
*   KEPT IN THE STACK, BUT ARE BUILT IN BUFFERS OR DIRECTLY IN TEXT.  * 49950000
*   THE FINAL RESULT OF EVALUATION IS A SINGLE TERM IN THE STACK,     * 49980000
*   WHOSE LOCATION IS KNOWN TO ALL CALLING ROUTINES.                  * 50010000
         SPACE 3                                                        50040000
EVAL     EQU   *                                                        50070000
         SPACE                                                          50100000
EVAL00   STM   R2,R9,EVALST             SAVE CALLERS REGISTERS          50110000
         LR    R8,R12                   ESTABLISH BASE FOR RTN          50120000
         USING EVAL00,R8                                                50130000
         SPACE                                                          50160000
         USING JTMOP,VTXTIN                                             50190000
         SPACE                                                          50220000
         L     STACKPTR,STACKLVL        GET STACK POINTER               50250000
EVAL10   GOIF  JTMHIOP,GT=EVAL80        TERMS GET PROCESSED OVER THERE  50280000
         SPACE                                                          50310000
*        BRANCH TABLE FOR OPERATORS                                     50340000
         SPACE                                                          50370000
         SR    INDEX1,INDEX1            CLEAR A REGISTER                50400000
         IC    INDEX1,JTMOP             PICK UP AN OPERATOR             50430000
         AR    INDEX1,INDEX1            DOUBLE IT                       50460000
         LH    INDEX1,OPTAB(INDEX1)     GET BRANCH DISPLACEMENT         50490000
         LA    VTXTIN,JTMPTR            BUMP PAST FLAG                  50520000
         B     EVALOPS(INDEX1)          BRANCH TO OP ROUTINE            50550000
         DROP  VTXTIN                                                   50580000
         SPACE                                                          50610000
OPTAB    DS    0H                       OPERATOR BRANCH TABLE           50640000
         SPACE                                                          50670000
         OPS   SCM                      START CHARACTER MODE            50700000
         OPS   PER                      PERIOD--CONCATENATION OPERATOR  50730000
         OPS   PLUS                     UNARY PLUS                      50760000
         OPS   MIN                      UNARY MINUS                     50790000
         OPS   MULT                     BINARY MULTIPLY                 50820000
         OPS   DIV                      BINARY DIVIDE                   50850000
         OPS   ADD                      BINARY ADD                      50880000
         OPS   SUB                      BINARY SUBTRACT                 50910000
         OPS   GT                       GREATER THAN                    50940000
         OPS   GE                       GREATER/EQUAL                   50970000
         OPS   LT                       LESS THAN                       51000000
         OPS   LE                       LESS/EQUAL                      51030000
         OPS   EQ                       EQUAL                           51060000
         OPS   NE                       NOT EQUAL                       51090000
         OPS   NOT                      NOT                             51120000
         OPS   AND                      AND                             51150000
         OPS   OR                       OR                              51180000
         OPS   STR                      SUB STRING OPERATION            51210000
         OPS   DUP                      DUPLICATION OPERATION           51240000
         OPS   DIM                      DIMENSION                       51270000
         OPS   DIM2                     SYSLIST(N,M) FIRST DIMENSION    51300000
         OPS   DIM3                     SYSLIST(N,M) SECOND DIMENSION   51330000
         OPS   STRM                     STATEMENT TERMINATOR            51360000
         OPS   TAT                      TYPE ATTRIBUTE                  51390000
         OPS   LAT                      LENGTH ATTRIBUTE                51420000
         OPS   SAT                      SCALE ATTRIBUTE                 51450000
         OPS   IAT                      INTERGER ATTRIBUTE              51480000
         OPS   KAT                      COUNT ATTRIBUTE                 51510000
         OPS   NAT                      NUMBER ATTRIBUTE                51540000
         SPACE                                                          51570000
EVALOPS  EQU   *                        ROOT FOR EVALUATION OPERATORS   51600000
         EJECT                                                          51630000
EVALDIM3 EQU   *                        APPLY SYSLIST(N,M) M TERM       51660000
         SPACE                                                          51690000
         USING JTMFLG,STACKPTR          BASE FOR TERM IN STACK          51720000
         SET   SUBSCR2,ON               INDICATE SECOND SUBSCRIPT       51750000
         SPACE                                                          51780000
EVALDIM  EQU   *                        DIMENSION OPERATOR              51810000
         SPACE                                                          51840000
*        DIMENSION IS THE LAST OPERATOR IN EVAL STACK, AND NEEDS TO BE  51870000
*        INSERTED INTO THE PRECEEDING ENTRY IF WITHIN RANGE.            51900000
         SPACE                                                          51930000
         BAL   RETURN,PREFXRES          RESOLVE LAST TERM               51960000
*        VALUE IS RETURNED IN EVEN REG.  STACKPTR IS NOT DECREMENTED.   51990000
         SH    STACKPTR,=Y(STKENTRY)    SO DECREMENT IT.                52020000
         GOIF  (EVEN),NEG=LOGER111      BRANCH IF SUBSCRIPT INVALID     52050000
         GOIF  JTMLSTO,EQ=DIM09         ACCEPT ZERO SUBSCRIPT IN BOTH   52080000
         CLI   JTMFLG,JTMLSTO+JTMCSW    SYSLIST CASES --                52110000
         BNE   DIM10                    SYSLIST(N) AND SYSLIST(N,M)     52140000
DIM09    GOIF  SUBSCR2,OFF=DIM11        BUT NOT IN M TERM OF (N,M)      52170000
DIM10    EQU   *                                                        52200000
         GOIF  (EVEN),POS=DIM11         ACCEPT ONLY POSITIVE OTHERWISE  52230000
LOGER111 EQU   *                                                        52260000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    52290000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          52320000
         DC    AL1(SEV111,ERR111)       ERROR PARAMETERS                52350000
         OI    JTMD,BIT0                INDICATE DEAD TERM              52380000
         SR    EVEN,EVEN                MAKE SURE DIMEN IS LOW VALUE    52410000
DIM11    EQU   *                                                        52440000
         STH   EVEN,JHWORD1             PUT IN STORAGE FOR SS USAGE     52470000
         GOIF  JTMCSW,OFF=DIM15         SKIP AHEAD IF NOT CHARACTER     52500000
         SET   JTMCSW,OFF               ELSE TURN OFF SWITCH IN TERM    52530000
         SET   CHARMODE,ON                AND ON FOR CHARACTER MODE.    52560000
DIM15    EQU   *                                                        52590000
         GOIF  SUBSCR2,ON=DIM19         BRANCH IF M OF SYSLIST(N,M)     52620000
         GOIF  JTMLSTO,EQ=DIM40,        BRANCH IF N OF SYSLIST(N)      X52650000
               GT=DIM20                 OR N OF PARAMETER(N)            52680000
         GOIF  JHWORD1,JTMD,LE=DIM20    GO ON WITH VALID DIMENSION      52710000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    52740000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          52770000
         DC    AL1(SEV112,ERR112)       ERROR PARAMETERS                52800000
         OI    JTMD,BIT0                INDICATE DEAD TERM              52830000
         B     DIM22                    CONTINUE WITH MAXIMUM DIMEN     52860000
DIM19    SET   SUBSCR2,OFF              CLEAN UP SECOND SUBSCRIPT FLAG  52890000
         MVI   JTMFLG,JTMPPAR           CONVERT SYSLIST TO PARAM REFER  52900000
DIM20    TM    JTMD,BIT0                SEE IF DEAD TERM FLAG ALREADY   52920000
         BO    DIM22                    BRANCH IF ON. OTHERWISE,        52950000
         MVC   JTMD,JHWORD1             APPLY THE DIMENSION             52980000
DIM22    GOIF  CHARMODE,OFF=EVAL10      EXIT IF NOT CHARACTER MODE      53010000
         L     FLDLN,RESRTRN            RESTORE LENGTH COUNTER          53040000
         LR    R10,STACKPTR             RESOLVE WANTS POINTER IN R10    53070000
         JCALL RESOLVE                  GET A CHARACTER STRING          53100000
         DROP  STACKPTR                                                 53130000
         L     R8,=A(GENSTRNG)          BASE FOR GENSTRNG ROUTINE       53190000
         USING GENSTRNG,R8                DECLARE--                     53250000
         B     GENSTR1X                 PASS RESULT TO GENSTRNG         53280000
         USING EVAL,R8                  RECOVER ROUTINE BASE            53310000
DIM40    EQU   *                                                        53370000
         USING JTMFLG,STACKPTR                                          53400000
         TM    JTMD,BIT0                SEE IF DEAD TERM FLAG ALREADY   53430000
         BO    DIM22                    BRANCH IF ON. OTHERWISE,        53460000
         MH    EVEN,=H'3'               CALCULATE SYSLIST VECTOR PTR    53490000
         ST    EVEN,JFWORD1             TEMPORARILY SAVE AND            53520000
         MVI   JTMFLG,JTMPPAR           CONVERT SYSLIST TO PARAM REFER  53530000
         MVC   JTMLSTN,JFWORD1+D1       INSERT INTO PTR FIELD OF TERM   53550000
         MVC   JTMLSTM,=H'0'            RESET DIMEN FLAG IN TERM        53580000
         B     DIM22                    GO BACK TO RESOLVE TERM         53610000
         DROP STACKPTR                                                  53640000
EVALDIM2 EQU   *                        APPLY SPECIAL SYSLIST DIMENSION 53670000
         SPACE                                                          53700000
         USING JTMFLG,STACKPTR          BASE FOR TERM IN STACK          53730000
         BAL   RETURN,PREFXRES          RESOLVE THE DIMENSION           53760000
         SH    STACKPTR,=Y(STKENTRY)      AND UPDATE THE STACK POINTER  53790000
         GOIF  (EVEN),NOTNEG=EDIM2A     OK FOR SYSLIST IF ZERO OR POS   53820000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    53850000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          53880000
         DC    AL1(SEV130,ERR130)       ERROR PARAMETERS                53910000
         OI    JTMD,BIT0                INDICATE DEAD TERM              53940000
         B     EVAL10                   AND CONTINUE                    53970000
EDIM2A   EQU   *                                                        54000000
         MH    EVEN,=H'3'               MAKE INTO A POINTER,            54030000
         ST    EVEN,JFWORD1             ALIGN,                          54060000
         MVC   JTMLSTN,JFWORD1+D1       AND MOVE INTO PTR IN TERM       54090000
         B     EVAL10                     AND CONTINUE.                 54120000
         DROP  STACKPTR                                                 54150000
         SPACE 3                                                        54180000
EVALSTR  EQU   *                                                        54210000
         SPACE                                                          54240000
*        LAST TWO STACK ENTRIES REPRESENT VALUES OF EXPRESSION 1 AND 2  54270000
*              OF SUBSTRING EXPRESSION.                                 54300000
         SPACE                                                          54330000
         BAL   RETURN,INFIXRES          RESOLVE TWO TERMS               54360000
*        NOW EXPRESSION 1 VALUE IS IN EVEN REG AND EXPRESSION 2 IN      54390000
*              ODD REG.                                                 54420000
         SH    STACKPTR,=Y(STKENTRY)    DELETE XTRA TERM FROM STACK     54450000
         LA    R15,STRING2               POINT TO 2ND STRING            54480000
         GOIF  (R15),NEWSTRNG,LE=STR20  SKIP IF IN BUFFER 2             54510000
         LA    R15,STRING1              ELSE RESET TO FIRST STRING      54540000
         SPACE                                                          54570000
STR20    EQU   *                                                        54600000
         SPACE                                                          54630000
         USING JTMLNG,R15               BASE FOR STRING                 54660000
*        COMPUTE LENGTH OF CURRENT STRING--INITIAL STRING LENGTH MINUS  54690000
*              PREVIOUS STRING LENGTH.                                  54720000
         SPACE                                                          54750000
         SR    RCOMP1,RCOMP1            CLEAR A REGISTER                54780000
         IC    RCOMP1,JTMLNG            GET THE CURRENT LENGTH          54810000
         SH    RCOMP1,STRNGLN            SUBTRACT PREVIOUS LENGTH       54840000
         GOIF  (EVEN),POS=STR21         GO ON IF EXPRESSION 1 OK        54870000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    54900000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          54930000
         DC    AL1(SEV115,ERR115)       ERROR PARAMETERS                54960000
         SR    RCOMP1,RCOMP1            GIVE NULLSTRING                 54990000
         B     STR35                    FINISHED                        55000000
STR21    GOIF  (ODD),NOTNEG=STR22       GO ON IF EXPRESSION 2 OK        55020000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    55050000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          55080000
         DC    AL1(SEV116,ERR116)       ERROR PARAMETERS                55110000
         SR    RCOMP1,RCOMP1            GIVE NULLSTRING                 55140000
         B     STR35                    FINISHED                        55150000
STR22    GOIF  (RCOMP1),(EVEN),NOTLO=STR23 GO ON IF EXPR 1 OK WITH STR  55170000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    55200000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          55230000
         DC    AL1(SEV117,ERR117)       ERROR PARAMETERS                55260000
         SR    RCOMP1,RCOMP1            GIVE NULLSTRING                 55290000
         B     STR35                    FINISHED                        55300000
STR23    EQU   *                                                        55320000
         BCTR  EVEN,D0                  REDUCE TO ZERO ORIGIN           55350000
         SR    RCOMP1,EVEN              COMPUTE BALANCE OF STRING       55380000
         L     VTXTOUT,NEWSTRNG         START OF 'TO' FIELD             55410000
         A     EVEN,NEWSTRNG            START OF 'FROM' FIELD           55440000
         GOIF  (ODD),(RCOMP1),HIGH=STR30 ERROR IF EXPR 2 HIGH           55470000
         LR    RCOMP1,ODD               ELSE MOVE REQUESTED LENGTH      55500000
         B     STR32                    GO MOVE STRING                  55530000
         SPACE                                                          55540000
STR30    EQU   *                                                        55550000
         SPACE                                                          55580000
STR32    EX    RCOMP1,MOVESTR           REMOTE MOVE                     55590000
STR35    AH    RCOMP1,STRNGLN           ADD LENGTH OF REST OF TOTAL     55600000
         USING JTMLNG,R15               BASE FOR TOTAL STRING           55680000
         STC   RCOMP1,JTMLNG             STORE NEW LENGTH               55710000
         DROP  R15                                                      55740000
         B     EVAL10                   ITERATE                         55770000
MOVESTR  MVC   D0(D0,VTXTOUT),D0(EVEN)  REMOTE MOVE FOR STRING OPERATOR 55800000
         SPACE 3                                                        55830000
EVALDUP  EQU   *                        DUPLICATION FACTOR              55860000
         SPACE                                                          55890000
*        DUPLICATION FACTOR IS REPRESENTED BY LAST STACK ENTRY.         55920000
         SPACE                                                          55950000
         BAL   RETURN,PREFXRES          RESOLVE DUP FACTOR              55980000
         SPACE                                                          56010000
*        VALUE IS NOW IN EVEN REGISTER.                                 56040000
         SPACE                                                          56070000
         SH    STACKPTR,=Y(STKENTRY)    DELETE XTRA TERM FROM STACK     56100000
*        COMPUTE LENGTH OF CURRENT STRING AND GET POINTER TO STRING.    56130000
         SPACE                                                          56160000
         LA    R15,STRING2              POINT TO SECOND STRING          56190000
         GOIF  (R15),NEWSTRNG,LE=DUP20  SKIP IF IN BUFFER 2             56220000
         LA    R15,STRING1              ELSE POINT TO BUFFER 1          56250000
         SPACE                                                          56280000
DUP20    EQU   *                                                        56310000
         SPACE                                                          56340000
         LR    R0,R15                   SAVE STRING BUFFER POINTER      56370000
         USING JTMLNG,R15               BASE FOR STRING BUFFER          56400000
         SR    RCOMP1,RCOMP1            CLEAR A REGISTER                56430000
         IC    RCOMP1,JTMLNG            PICK UP THE STRING LENGTH       56460000
         DROP  R15                                                      56490000
         SH    RCOMP1,STRNGLN           SUBTRACT PRIOR STRING LENGTH    56520000
         LR    R14,RCOMP1               LENGTH OF STRING                56530000
         BCTR  R14,R0                   MACHINE LENGTH                  56540000
         USING STRING1,R15              DUMMY TEMPORARY BASE            56550000
         LA    R15,STRING2              COMPUTE A STOPPER               56580000
         SR    R15,RCOMP1                                               56610000
         DROP  R15                                                      56640000
         L     ODD,NEWSTRNG              START OF 'FROM' FIELD          56670000
         LR    VTXTOUT,ODD              START OF 'TO' FIELD             56700000
         SPACE                                                          56730000
*        START OF STRING IS IN 'ODD' AND LENGTH IS IN 'RCOMP1'          56760000
         SPACE                                                          56790000
         GOIF  (EVEN),ZERO=DUP90,POS=DUP30 PROCEED IF DUP FACTOR OK     56820000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    56850000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          56880000
         DC    AL1(SEV114,ERR114)       ERROR PARAMETERS                56910000
         B     DUP90                    GET OUT NOW WITH NULL           56940000
DUP30    EQU   *                        DUP LOOP (DOOP LUP)             56970000
         GOIF  (VTXTOUT),(R15),HIGH=DUP80    NOT ENOUGH ROOM, FAKE IT   57000000
DUP32    EX  R14,DUPMOVE                MOVE THE STRING                 57030000
DUP34    AR    VTXTOUT,RCOMP1           ADD LENGTH OF MOVED STRING      57060000
         BCT   EVEN,DUP30               LOOP CONTROL                    57090000
         SPACE                                                          57120000
*        DONE--BE SURE LENGTH IS UPDATED                                57150000
         SPACE                                                          57180000
DUP90    LR    R15,R0                   RESTORE STRING BUFFER BASE      57210000
         SR    VTXTOUT,R15              NEW LENGTH OF TOTAL STRING      57240000
         BCTR  VTXTOUT,D0               DONT COUNT LENGTH BYTE          57270000
         USING JTMSTRNG,R15                                             57300000
         STC   VTXTOUT,JTMSTRNG         STORE STRING LENGTH             57330000
         DROP  R15                                                      57360000
         B     EVAL10                   EXIT TO EVAL ITERATION POINT    57390000
DUPMOVE  MVC   D0(D0,VTXTOUT),D0(ODD)   REMOTE MOVE FOR DUP FACTOR      57420000
         SPACE 3                                                        57450000
DUP80    EQU   *                        MOVE A PARTIAL STRING           57480000
         SPACE                                                          57510000
         GOIF  ERR105SW,ON=DUP85        BYPASS IF ERROR ALREADY LOGGED  57540000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    57550000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          57560000
         DC    AL1(SEV105,ERR105)       ERROR PARAMETER                 57570000
         SET   ERR105SW,ON              INDICATE ERROR LOGGED ONCE      57580000
DUP85    AR    RCOMP1,R15               END OF BUFFER                   57590000
         SR    RCOMP1,VTXTOUT           REMAINING LENGTH                57600000
         LTR   R14,RCOMP1                                               57610000
         BZ    DUP90                    DONE IF NOTHING TO MOVE         57620000
         LA    EVEN,D1                  TO GET OUT OF LOOP              57630000
         B     DUP32                    GO MOVE                         57640000
         SPACE 3                                                        57690000
EVALSCM  EQU   *                        START CHARACTER MODE            57720000
         SPACE                                                          57750000
         SET   CCOMP,ON                 DO CHARACTER RELATIONALS        57780000
         L     VTXTOUT,STRPTR1            GET CURRENT CHARACTER BUFFER X57810000
                                          POINTER.                      57840000
         SPACE                                                          57870000
         ST    STACKPTR,STACKLVL        SAVE THE STACK POIN0ER          57900000
         L     R12,=A(GENSTRNG)         GENSTRING BASE                  57930000
         BALR  RETURN,R12                 AND LINK TO GENERATE A STRING 57960000
         LR    VTXTIN,R11               RECOVER META TEXT POINTER       57990000
EVALPER  EQU   *                                                        58000000
         SPACE                                                          58020000
         XC    STRPTR1,STRPTR2          FLIP BUFFERS                    58050000
         B     EVAL10                   DO SOME MORE.                   58080000
         SPACE 3                                                        58110000
         SPACE 3                                                        58260000
EVALSTRM EQU   *                        EXIT                            58290000
         SPACE                                                          58320000
         ST    STACKPTR,STACKLVL        SAVE THE STACK POINTER          58350000
         LR    R10,VTXTIN               META TEXT POINTER AS PARAMETER  58380000
EVAL99   LM    R2,R9,EVALST             RESTORE CALLERS REGISTERS       58400000
         BR    R9                       RETURN TO CALLER                58420000
         EJECT                                                          58440000
         USING STACK,STACKPTR           BASE FOR STACK OPERATIONS       58470000
         SPACE                                                          58500000
EVALADD  EQU   *                        ADD                             58530000
         SPACE                                                          58560000
         BAL   RETURN,INFIXRES          RESOLVE TWO TERMS               58590000
         SPACE                                                          58620000
         AR    EVEN,ODD                 ADD                             58650000
         BNO   ADD80                    GO ON IF NO OVERFLOW            58680000
LOGER110 L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    58710000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          58740000
         DC    AL1(SEV110,ERR110)       ERROR PARAMETERS                58770000
         SR    EVEN,EVEN                SET UP DEFAULT VALUE            58800000
ADD80    ST    EVEN,STACKVAL            STORE THE VALUE                 58830000
         B     ARTHEXIT                   AND GO CLEAN UP               58860000
         SPACE 3                                                        58890000
EVALSUB  EQU   *                        SUBTRACT                        58920000
         SPACE                                                          58950000
         BAL   RETURN,INFIXRES          RESOLVE TWO TERMS               58980000
         SPACE                                                          59010000
         SR    EVEN,ODD                 SUBTRACT                        59040000
         BO    LOGER110                 DIAGNOSE THE OVERFLOW           59070000
         B     ADD80                    OTHERWISE, FINISH UP NORMALLY   59100000
         SPACE 3                                                        59130000
EVALDIV  EQU   *                        DIVIDE                          59160000
         SPACE                                                          59190000
         BAL   RETURN,INFIXRES          RESOLVE TWO TERMS               59220000
         GOIF  (ODD),ZERO=DIV80         SKIP DIVIDE ON ZERO DIVISOR     59250000
         LR    R0,ODD                   DIVISOR                         59280000
         SRDA  EVEN,D32                 SET UP DIVIDEND                 59310000
         DR    EVEN,R0                  DIVIDE                          59340000
DIV80    ST    ODD,STACKVAL             STORE DIVIDEND                  59370000
         B     ARTHEXIT                   AND GO CLEAN UP               59400000
         SPACE 3                                                        59430000
EVALMULT EQU   *                        MULTIPLY                        59460000
         SPACE                                                          59490000
         BAL   RETURN,INFIXRES          RESOLVE TWO TERMS               59520000
         SPACE                                                          59550000
         MR    EVEN,EVEN                MULTIPLY                        59580000
         LTR   EVEN,EVEN                CHECK FOR OVERFLOW              59610000
         BNM   MULT79                   BRANCH IF NOT NEGATIVE SIGN     59640000
         LCR   EVEN,EVEN                CONVERT NEGATIVE TO POSITIVE    59670000
         BCTR  EVEN,D0                  DECREMENT. IF 1, WILL BE ZERO   59700000
         LTR   EVEN,EVEN                TEST FOR ZERO. IF NOT,          59730000
MULT79   EQU   *                                                        59760000
         BNZ   LOGER110                 GO TO PUT ERROR, SET DEFAULT    59790000
         ST    ODD,STACKVAL             RESULT GOES TO THE STACK        59820000
         B     ARTHEXIT                 AND GO CLEAN UP                 59850000
         DROP  STACKPTR                                                 59880000
         SPACE 3                                                        59910000
INFIXRES EQU   *                        RESOLVE FOR INFIX OPERATIONS    59940000
         SPACE                                                          59970000
         ST    RETURN,INFIXRTN          SAVE THE RETURN REGISTER        60000000
         LR    R10,STACKPTR             REGISTER FOR RESOLVE            60030000
         JCALL RESOLVE                  RESOLVE TO ARITHMETIC           60060000
         LR    ODD,R11                  PLACE VALUE IN COMP REGISTER    60090000
         SH    STACKPTR,=Y(STKENTRY)    BACK UP ONE TERM IN STACK       60120000
         SPACE                                                          60150000
INFIX50  EQU   *                        ENTRY FOR SINGLE TERM RESOLVE   60180000
         SPACE                                                          60210000
         LR    R10,STACKPTR             RESOLVE NEEDS IT IN R10         60240000
         JCALL RESOLVE                  RESOLVE TO ARITHMETIC           60270000
         LR    EVEN,R11                 PLACE VALUE IN OTHER COMP REG   60300000
         L     RETURN,INFIXRTN          RESTORE RETURN REGISTER         60330000
         BR    RETURN                     AND RETURN TO CALLER          60360000
         SPACE 3                                                        60390000
PREFXRES EQU   *                        RESOLVE FOR PREFIX OPERATIONS   60420000
         SPACE                                                          60450000
         ST    RETURN,INFIXRTN          SAVE THE RETURN REGISTER        60480000
         B     INFIX50                  AND RESOLVE ONE TERM            60510000
         SPACE 3                                                        60540000
RELATE   EQU   *                        ENTER IN THE STACK              60570000
         SPACE                                                          60600000
         USING JTMOP,VTXTIN             BASE FOR OPERATOR               60630000
         LA    VTXTIN,JTMPTR            SKIP UP TO NEXT OPERATOR/TERM   60660000
         DROP  VTXTIN                                                   60690000
         SPACE                                                          60720000
         USING STACK,STACKPTR           BASE FOR STACK ENTRY            60750000
         ST    EVEN,STACKVAL            STACK THE RESULT                60780000
         DROP  STACKPTR                                                 60810000
         B     RELTEXIT                 GO TO FINISH UP RELATIONALLY    60840000
         SPACE 3                                                        60870000
EVAL80   EQU   *                        ENTER ALL TERMS IN STACK        60900000
         SPACE                                                          60930000
         USING STACK,STACKPTR           BASE FOR STACK ENTRY            60990000
         USING JTMFLG,VTXTIN            BASE FOR TERM INPUT             61020000
         MVC   STACKNXT(TERMLNTH),JTMFLG  MOVE TERM TO STACK            61050000
         SET   JTMCSW,OFF               BE SURE TEXT SWITCHES ARE CLEAN 61080000
         LA    VTXTIN,JTMFLG+TERMLNTH   BUMP TEXT OVER TERM             61110000
         LA    STACKPTR,STACKNXT          AND OVER TERM IN STACK        61140000
         B     EVAL10                   GO BACK FOR MORE                61170000
         DROP  STACKPTR,VTXTIN                                          61200000
         SPACE 3                                                        61230000
EVALGT   EQU   *                        GENERAL                         61260000
EVALGE   EQU   *                          ENTRY                         61290000
EVALLT   EQU   *                            FOR                         61320000
EVALLE   EQU   *                              RELATIONAL                61350000
EVALEQ   EQU   *                                OPERATIONS              61380000
EVALNE   EQU   *                                  IS HERE.              61410000
         SPACE                                                          61440000
         BCTR  VTXTIN,D0                BACK UP TO RELATIONAL OPERATOR  61470000
         GOIF  CCOMP,ON=CHARREL         SWITCH ON, DO CHARACTER COMPARE 61500000
         SPACE                                                          61530000
ARTHREL  EQU   *                        ARITHMETIC RELATIONAL           61560000
         SPACE                                                          61590000
         BAL   RETURN,INFIXRES          RESOLVE TWO TERMS               61620000
         GOIF  (EVEN),(ODD),MODE=A,HI=EVALHI,LO=EVALLO                 X61650000
                                        COMPARE AND BRANCH              61680000
         SPACE                                                          61710000
EVALEQU  EQU   *                        WE HAVE AN EQUAL COMPARE        61740000
         SPACE                                                          61770000
         USING JTMFLG,VTXTIN            BASE TO CHECK OPERATOR          61800000
         GOIF  JTMGE,LO=EVALNO          BRANCH IF OPERATOR IS GT        61830000
         GOIF  JTMLE,HI=EVALNO,         BRANCH IF OPERATOR IS LT, NE   X61860000
               ELSE=EVALYES             ELSE IT MUST BE GE, LE, EQ      61890000
         SPACE                                                          61920000
EVALHI   EQU   *                        HIGH COMPARE                    61950000
         SPACE                                                          61980000
         GOIF  JTMGE,LE=EVALYES         OPERATOR IS GE, GT              62010000
         GOIF  JTMNE,EQ=EVALYES,        OPERATOR IS NE                 X62040000
               ELSE=EVALNO              OPERATOR IS EQ, LE, LT          62070000
         SPACE                                                          62100000
EVALLO   EQU   *                        LOW COMPARE                     62130000
         SPACE                                                          62160000
         GOIF  JTMLE,GE=EVALYES,        OPERATOR IS LE, LT, NE         X62190000
               ELSE=EVALNO              OPERATOR IS GT, GE, EQ          62220000
         SPACE                                                          62250000
EVALYES  EQU   *                        YESS                            62280000
         SPACE                                                          62310000
         LA    EVEN,D1                  GIVE YES RESPONSE               62340000
         B     RELATE                     AND GO STORE IT               62370000
         SPACE                                                          62400000
EVALNO   EQU   *                        NO--                            62430000
         SPACE                                                          62460000
         SR    EVEN,EVEN                ZERO THE RESULT (NO)            62490000
         B     RELATE                     AND GO STORE IT               62520000
         DROP  VTXTIN                                                   62550000
         SPACE 3                                                        62580000
CHARREL  EQU   *                        CHARACTER RELATIONAL            62610000
         SPACE                                                          62640000
         SET   CCOMP,OFF                TURN OFF CHARACTER RELATIONAL  X62670000
                                          SWITCH.                       62700000
         USING STACK,STACKPTR           BASE FOR TERM STACK             62730000
         LA    STACKPTR,STACKNXT        A CHARACTER RELATIONAL CAUSES AX62760000
                                          NEW TERM TO BE ENTERED IN THEX62790000
                                          STACK--MAKE ROOM FOR IT.      62820000
         DROP  STACKPTR                                                 62880000
         CLC   STRING1(D1),STRING2      COMPARE STRING LENGTHS          62910000
         BH    EVALHI                   LONG                            62940000
         BL    EVALLO                   SHORT                           62970000
         IC    RMOVE,STRING1            ELSE COMPARE CHARACTERS--       63000000
         EX    RMOVE,TR1                BUFFER 1 TO EXTERNAL            63030000
         EX    RMOVE,TR2                BUFFER 2 TO EXTERNAL            63060000
         EX    RMOVE,COMP12             EXECUTED COMPARE                63090000
         EX    RMOVE,TR1                BUFFER 1 BACK AGAIN             63120000
         EX    RMOVE,TR2                BUFFER 2 BACK AGAIN             63150000
         BL    EVALLO                   LOW                             63180000
         BH    EVALHI                   HIGH                            63210000
         B     EVALEQU                  EQUAL                           63240000
         SPACE                                                          63270000
COMP12   CLC   STRING1(D0),STRING2      REMOTE COMPARE                  63300000
TR1      TR    STRING1(D0),JTRTABLE     REMOTE TRANSLATE STRING1        63330000
TR2      TR    STRING2(D0),JTRTABLE     LIKEWISE STRING2                63360000
         SPACE 3                                                        63390000
         USING STACK,STACKPTR           BASE FOR STACK OPERATIONS       63420000
         SPACE                                                          63450000
EVALOR   EQU   *                        OR                              63480000
         SPACE                                                          63510000
         BAL   RETURN,INFIXRES          RESOLVE TWO TERMS               63540000
         OR    EVEN,ODD                 DO THE OR                       63570000
         ST    EVEN,STACKVAL            STORE THE RESULT                63600000
         B     ARTHEXIT                   AND EXIT.                     63630000
         SPACE                                                          63660000
EVALAND  EQU   *                        AND                             63690000
         SPACE                                                          63720000
         BAL   RETURN,INFIXRES          RESOLVE TWO TERMS               63750000
         NR    EVEN,ODD                 DO THE AND                      63780000
         ST    EVEN,STACKVAL            STORE THE RESULT                63810000
         B     ARTHEXIT                   AND EXIT                      63840000
         SPACE                                                          63870000
EVALNOT  EQU   *                        NOT                             63900000
         SPACE                                                          63930000
         BAL RETURN,PREFXRES            RESOLVE ONE TERM                63960000
         X     EVEN,=F'1'               REVERSE THE BIT                 63990000
         CL    EVEN,=F'1'               GT THAN ONE ?          @AZ10934 64000000
         BNH   EVALNOT5                 BR IF NOT, ELSE SET-   @AZ10934 64010000
         SR    EVEN,EVEN                TO ZERO                @AZ10934 64012000
EVALNOT5 EQU   *                                               @AZ10934 64014000
         ST    EVEN,STACKVAL            STORE THE RESULT                64020000
         B     ARTHEXIT                   AND EXIT                      64050000
         SPACE                                                          64080000
EVALMIN  EQU   *                        MINUS--UNARY                    64110000
         SPACE                                                          64140000
         BAL   RETURN,PREFXRES          RESOLVE ONE TERM                64170000
         LCR   EVEN,EVEN                COMPLEMENT                      64200000
         ST    EVEN,STACKVAL            STORE THE RESULT                64230000
         B     ARTHEXIT                   AND EXIT                      64260000
         DROP  STACKPTR                                                 64290000
         SPACE                                                          64320000
EVALPLUS EQU   *                        PLUS--UNARY                     64350000
         SPACE                                                          64380000
         B     EVAL10                   A NO-OP, EFFECTIVELY            64410000
RELTEXIT EQU   *                                                        64440000
         MVI   STRING1,D0               DROP STRING IF ANY              64470000
         MVI   STRING2,D0               DROP STRING IF ANY              64500000
ARTHEXIT EQU   *                        EXIT ROUTINE TO FOLLOW ARITH-  X64530000
                                          METIC OPERATIONS.             64560000
         USING STACK,STACKPTR                                           64590000
         MVI   STACKFLG,JTMSDT          NOW IT'S A SELF DEFINING TERM   64620000
         B     EVAL10                   AND RETURN TO EVAL MAINLINE     64650000
         DROP  STACKPTR                                                 64680000
         SPACE 3                                                        64710000
EVALTAT  EQU   *                        TYPE ATTRIBUTE                  64740000
         L     VTXTOUT,STRPTR1          SET UP PTR TO STRING BUFFER     64770000
         SPACE                                                          64800000
         SET   CCOMP,ON                 INDICATE CHARACTER COMPARES     64830000
         USING JTMFLG,STACKPTR          BASE FOR TERM                   64860000
         GOIF  JTMSVC,LT=TAT22          A OR B TYPE VARIABLE            64890000
         GOIF  JTMOSA,LT=TAT24          C TYPE VARIABLE                 64920000
         DROP  STACKPTR                                                 64950000
         LR    R10,STACKPTR             POINT TO TERM                   64980000
         SET   CHARMODE,ON              NO ARITHMETIC CONVERSION        65010000
         JCALL RESOLVE                  RESOLVE IT                      65040000
         SET   CHARMODE,OFF                                             65070000
*        R14 POINTS TO HEADER                                           65130000
         USING PARMTAB,R14              BASE FOR ENTRY                  65160000
         GOIF  PTAT,JU,NE=TAT15         PICK UP TYPE IF NOT U           65190000
         GOIF  TDEFALT,ON=TAT23         DIAGNOSE IF U DEFAULTED         65200000
TAT15    IC    RMOVE,PTAT               PICK UP TYPE                    65210000
         DROP  R14                                                      65220000
         USING JTMLNG,VTXTOUT           BASE FOR OUTPUT                 65250000
TAT20    STC   RMOVE,JTMSTRNG           STORE TYPE                      65280000
         MVI   JTMLNG,D1                LENGTH OF 1                     65310000
         DROP  VTXTOUT                                                  65340000
         SH    STACKPTR,=Y(STKENTRY)    DELETE TERM FROM STACK          65350000
         XC    STRPTR1,STRPTR2          SWITCH BUFFERS.                 65370000
         B     EVAL10                   AND EXIT TO MAINLINE EVAL.      65400000
         SPACE                                                          65430000
TAT22    LA    RMOVE,JN                 TYPE N FOR A AND B VARIABLES    65460000
         B     TAT20                    CONTINUE                        65490000
TAT23    L     R12,=A(LOGERR01)         LOG ERROR 119                   65497000
         BALR  R9,R12                                                   65504000
         DC    AL1(SEV119,ERR119)                                       65511000
TAT24    LA    RMOVE,JU                 TYPE U FOR C VARIABLES          65520000
         B     TAT20                    CONTINUE                        65550000
         SPACE 3                                                        65580000
EVALSAT  EQU   *                        SCALE ATTRIBUTE                 65610000
         SPACE                                                          65640000
         USING JTMFLG,STACKPTR          BASE FOR TERM                   65670000
         GOIF  JTMLSTO,GT=SAT10         GO ON IF SCALE ATTR VALID       65700000
         GOIF  JTMOSA,EQ=SAT10          I.E., ORD SYMB OR PARAM         65730000
SAT05    L     R12,=A(LOGERR01)         ERROR ROUTINE                   65760000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          65790000
         DC    AL1(SEV123,ERR123)       ERROR PARAMETERS                65820000
         B     SAT07                    GET DEFAULT VALUE               65850000
SAT06    L     R12,=A(LOGERR01)         ERROR ROUTINE                   65856000
         BALR  R9,R12                                                   65862000
         DC    AL1(SEV80,ERR80)         UNDEFINED SYMBOL                65868000
SAT07    SR    EVEN,EVEN                SET UP DEFAULT VALUE            65874000
         B     SAT20                    GO TO ASSIGN IT NORMALLY        65880000
SAT10    EQU   *                                                        65910000
         LR    R10,STACKPTR             POINTER FOR DICTIONARY CALL     65940000
         SET   CHARMODE,ON              NO ARITHMETIC CONVERSION        65970000
         JCALL RESOLVE                  RESOLVE THE TERM                66000000
         SET   CHARMODE,OFF                                             66030000
         USING PARMTAB,R14              BASE FOR ATTRIBUTE REFERENCE    66060000
         GOIF  PTAT,JN,EQ=SAT05         LOOK FOR SELFDEFINING TERM      66066000
         GOIF  UDEFALT,ON=SAT06         REFERENCE TO UNDEFINED SYMBOL   66072000
         GOIF  SDEFALT,ON=SAT05         GOIF DEFAULTED VALUE            66078000
SAT15    EQU   *                                                        66084000
         XC    JFWORD1,JFWORD1          CLEAR                           66090000
         MVC   JFWORD1+D2(D2),PSAT      ALIGN                           66110000
         L     EVEN,JFWORD1             PICK UP                         66130000
         USING STACK,STACKPTR           BASE FOR NEW STACK ENTRY        66150000
SAT20    EQU   *                                                        66180000
         ST    EVEN,STACKVAL            AND STORE.                      66210000
         MVI   STACKFLG,JTMSDT          MAKE A SELF DEFINING TERM       66240000
         B     EVAL10                   BACK TO MAINLINE EVAL           66270000
         DROP  STACKPTR,R14                                             66300000
         SPACE 3                                                        66330000
EVALLAT  EQU   *                        LENGTH ATTRIBUTE                66360000
         SPACE                                                          66390000
         USING JTMFLG,STACKPTR          BASE FOR TERM                   66420000
         GOIF  JTMLSTO,GT=LAT10         GO ON IF LENGTH ATTR VALID      66450000
         GOIF  JTMOSA,EQ=LAT10          OR IF DIRECT ORD SYMB REFER     66480000
LAT05    L     R12,=A(LOGERR01)         ERROR ROUTINE                   66510000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          66540000
         DC    AL1(SEV120,ERR120)       ERROR PARAMETERS                66570000
         B     LAT07                    GET DEFAULT VALUE               66600000
LAT06    L     R12,=A(LOGERR01)         ERROR ROUTINE                   66606000
         BALR  R9,R12                                                   66612000
         DC    AL1(SEV80,ERR80)         UNDEFINED SYMBOL                66618000
LAT07    L     EVEN,=F'1'               SET UP DEFAULT VALUE            66624000
         B     LAT20                    GO TO ASSIGN IT NORMALLY        66630000
LAT10    EQU   *                                                        66660000
         LR    R10,STACKPTR             POINTER FOR RESOLVE CALL        66690000
         SET   CHARMODE,ON              NO ARITHMETIC CONVERSION        66720000
         JCALL RESOLVE                  RESOLVE THE TERM                66750000
         SET   CHARMODE,OFF                                             66780000
         USING PARMTAB,R14              BASE FOR REFERENCED ITEM        66810000
         GOIF  PTAT,JN,EQ=LAT05         CHECK IF SELFDEFINED TERM       66840000
         GOIF  UDEFALT,ON=LAT06         CHECK IF UNDEFINED SYMBOL       66850000
         GOIF  LDEFALT,ON=LAT05         CHECK IF DEFAULTED VALUE        66860000
         XC    JFWORD1,JFWORD1          CLEAR                           66870000
         MVC   JFWORD1+D2(D2),PLAT      ALIGN                           66880000
         L     EVEN,JFWORD1             PICK UP                         66890000
         USING STACK,STACKPTR           BASE FOR NEW STACK ENTRY        66900000
LAT20    EQU   *                                                        66930000
         ST    EVEN,STACKVAL            AND STORE.                      66960000
         MVI   STACKFLG,JTMSDT          MAKE INTO SELF DEFINING TERM    66990000
         B     EVAL10                   RETURN TO EVAL MAINLINE         67020000
         DROP  R14,STACKPTR                                             67050000
         SPACE 3                                                        67080000
EVALIAT  EQU   *                        INTEGER ATTRIBUTE               67110000
         SPACE                                                          67140000
         USING JTMFLG,STACKPTR          BASE FOR TERM                   67170000
         GOIF  JTMLSTO,GT=IAT10         GO ON IF INTEGER ATTR VALID     67230000
         GOIF  JTMOSA,NE=IAT15          I.E., ORD SYMB OR PARAM         67300000
IAT10    EQU   *                                                        67410000
         DROP  STACKPTR                                                 67440000
         LR    R10,STACKPTR             POINTER FOR RESOLVE             67470000
         SET   CHARMODE,ON              NO ARITHMETIC CONVERSION        67500000
         JCALL RESOLVE                  RESOLVE THE TERM                67530000
         SET   CHARMODE,OFF                                             67560000
         USING PARMTAB,R14              BASE FOR REFERENCED ITEM        67590000
         GOIF  PTAT,JN,EQ=IAT15         CHECK IF SELFDEFINED TERM       67620000
         GOIF  UDEFALT,ON=IAT16         CHECK IF UNDEFINED SYMBOL       67630000
         GOIF  LDEFALT,ON=IAT17         CHECK IF LENGTH DEFAULTED       67640000
         XC    JFWORD1,JFWORD1          CLEAR                           67650000
         MVC   JFWORD1+D2(D2),PLAT      ALIGN                           67660000
         L     EVEN,JFWORD1             PICK UP                         67670000
IAT12    GOIF  SDEFALT,ON=IAT18         CHECK IF SCALE DEFAULTED        67680000
         XC    JFWORD1,JFWORD1          CLEAR                           67690000
         MVC   JFWORD1+D2(D2),PSAT      ALIGN                           67700000
         L     ODD,JFWORD1              PICK UP                         67710000
IAT13    LA    RCOMP1,PTAT              POINT TO TYPE ATTRIBUTE         67720000
         USING PTAT,RCOMP1              BASE FOR TYPE ATTRIBUTE         67770000
         GOIF  PTAT,JD,EQ=FLPIN         D IS FLOATING POINT             67800000
         GOIF  PTAT,JE,EQ=FLPIN         E IS TOO                        67830000
         GOIF  PTAT,JL,EQ=FLPIN         L IS ALSO                       67860000
         GOIF  PTAT,JK,EQ=FLPIN         K IS FLOATING PT, EXPLICIT LEN  67890000
         GOIF  PTAT,JP,EQ=PDECIN        P IS PACKED DECIMAL             67920000
         GOIF  PTAT,JZ,EQ=ZDECIN        Z IS ZONED DECIMAL              67950000
         GOIF  PTAT,JG,EQ=FXPIN         G IS FIXED PT, EXPLICIT LENGTH  67980000
         GOIF  PTAT,JF,EQ=FXPIN         F IS FIXED POINT                68010000
         GOIF  PTAT,JH,EQ=FXPIN         H LIKEWISE                      68030000
IAT15    L     R12,=A(LOGERR01)         ERROR ROUTINE                   68050000
         BALR  R9,R12                                                   68055000
         DC    AL1(SEV124,ERR124)                                       68060000
         SR    EVEN,EVEN                DEFAULT VALUE                   68065000
         B     IAT20                    GO TO BUILD RESULTANT TERM      68070000
IAT16    L     R12,=A(LOGERR01)         ERROR ROUTINE                   68071000
         BALR  R9,R12                                                   68072000
         DC    AL1(SEV80,ERR80)         UNDEFINED SYMBOL                68073000
         SR    EVEN,EVEN                SET UP DEFAULT VALUE            68074000
         B     IAT20                    STORE VALUE                     68075000
IAT17    L     R12,=A(LOGERR01)         ERROR ROUTINE                   68076000
         BALR  R9,R12                                                   68077000
         DC    AL1(SEV120,ERR120)                                       68078000
         L     EVEN,=F'1'               DEFAULT VALUE                   68079000
         B     IAT12                    GET SCALE ATTRIBUTE             68080000
IAT18    L     R12,=A(LOGERR01)         ERROR ROUTINE                   68081000
         BALR  R9,R12                                                   68082000
         DC    AL1(SEV123,ERR123)                                       68083000
         SR    ODD,ODD                  DEFAULT SCALE ATTRIBUTE         68084000
         B     IAT13                    CALCULATE INTEGER ATTRIBUTE     68085000
         SPACE                                                          68100000
*INTEGER ATTRIBUTE IS COMPUTED AS FOLLOWS--                             68130000
*        FIXED POINT     I'=(L'*8)-1-S'                                 68160000
*        FLOATING POINT  I'=(L'-1)*2-S'      SHORT                      68190000
*                        I'=(L'-2)*2-S'      LONG                       68220000
*        PACKED DECIMAL  I'=(L'-2)-1-S'                                 68250000
*        ZONED DECIMAL   I'=L'-S'                                       68280000
         SPACE                                                          68310000
FXPIN    EQU   *                        FIXED POINT ENTRY               68340000
         SLL   EVEN,TIMES8              L' * 8                          68370000
         BCTR  EVEN,D0                  MINUS ONE                       68400000
         B     ZDECIN                   FIXED POINT CONTINUE            68430000
FLPIN    EQU   *                        FLOATING POINT ENTRY            68460000
         BCTR  EVEN,D0                  LENGTH ATTR MINUS ONE           68490000
         CH    EVEN,=H'7'               IF LENGTH IS M OR LESS,         68520000
         BNH   FLP2                     SKIP AROUND.                    68550000
         BCTR  EVEN,D0                  ELSE, MINUS ONE AGAIN           68580000
FLP2     AR    EVEN,EVEN                TIMES 2                         68610000
         B     ZDECIN                   FLOATING POINT CONTINUE         68640000
PDECIN   EQU   *                        PACKED DECIMAL ENTRY            68670000
         AR    EVEN,EVEN                L' * 2                          68700000
         BCTR  EVEN,D0                  MINUS ONE                       68730000
ZDECIN   EQU   *                        ZONED DECIMAL ENTRY             68760000
         SR    EVEN,ODD                 - S'                            68790000
         USING STACK,STACKPTR           STACK BASE                      68820000
IAT20    EQU   *                                                        68850000
         ST    EVEN,STACKVAL            STORE THE RESULT                68880000
         MVI   STACK,JTMSDT             AND MAKE IT A SELF DEFINING    X68910000
                                          TERM.                         68940000
         B     EVAL10                   BACK TO EVAL MAINLINE.          68970000
         DROP  STACKPTR,R14                                             69000000
         DROP  RCOMP1                                                   69030000
         SPACE 3                                                        69060000
EVALKAT  EQU   *                        COUNT ATTRIBUTE                 69090000
         SPACE                                                          69120000
         USING JTMFLG,STACKPTR          BASE FOR TERM                   69150000
         GOIF  JTMOSA,LT=KATT50         SET VARIABLE                    69180000
         GOIF  JTMLSTO,GT=KATT30        GO ON IF COUNT ATTR VALID       69210000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    69240000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          69270000
         DC    AL1(SEV121,ERR121)       ERROR PARAMETERS                69300000
         SR    EVEN,EVEN                SET UP DEFAULT VALUE            69330000
         B     KATT90                   GO TO ASSIGN IT NORMALLY        69360000
         SPACE                                                          69390000
KATT30   EQU   *                        PARAMETER COUNT ATTRIBUTE       69420000
         LR    R10,STACKPTR             TERM POINTER PASSED             69450000
         SET   CHARMODE,ON              NO ARITHMETIC CONVERSION        69480000
         JCALL RESOLVE                  AND RESOLVE THE TERM.           69510000
         SET   CHARMODE,OFF                                             69540000
         USING PARMTAB,R14                                              69570000
         GOIF  PSUB,ON=KATT34           SUBLIST REFERENCE               69600000
         SR    EVEN,EVEN                CLEAR A REGISTER                69630000
         IC    EVEN,PKAT                AND PICK UP K ATTRIBUTE         69660000
         USING STACK,STACKPTR           BASE FOR NEW STACK ENTRY        69690000
KATT90   ST    EVEN,STACKVAL            STORE IN THE STACK              69720000
         MVI   STACKFLG,JTMSDT            AND MAKE IT AN SDT.           69750000
         B     EVAL10                   RETURN                          69780000
         SPACE                                                          69810000
KATT34   MVC   JHWORD1,PKATSUB          ALIGN SUBOPERAND K ATTRIBUTE    69840000
KATT35   LH    EVEN,JHWORD1             PICK UP VALUE                   69870000
         MVC   JHWORD1,PNAT             ALIGN AND                       69900000
         AH    EVEN,JHWORD1             ADD N ATTRIBUTE                 69930000
         LA    EVEN,D1(EVEN)            ADD 1--ACCOUNTS FOR COMMAS AND X69960000
                                          PARENS ADDED ON OUTPUT.       69990000
         B     KATT90                     AND CONTINUE                  70020000
         SPACE                                                          70050000
KATT50   EQU   *                        SET VARIABLE K ATTRIBUTE        70080000
         LR    R10,STACKPTR             TERM POINTER                    70110000
         SET   CHARMODE,ON                WE WANT CHARACTERS BACK       70140000
         JCALL RESOLVE                  RESOLVE THE TERM TO A STRING    70170000
         SET   CHARMODE,OFF             (SWITCH BACK OFF)               70200000
         USING JTMLNG,R11               BASE FOR STRING                 70230000
         SR    EVEN,EVEN                CLEAR A REGISTER                70260000
         IC    EVEN,JTMLNG              PICK UP LENGTH AS K ATTRIBUTE   70290000
         DROP  R11                                                      70320000
         B     KATT90                   CONTINUE                        70350000
         DROP  R14,STACKPTR                                             70380000
         SPACE 3                                                        70410000
EVALNAT  EQU   *                        NUMBER ATTRIBUTE                70440000
         SPACE                                                          70470000
         USING JTMFLG,STACKPTR          BASE FOR TERM                   70500000
         GOIF  JTMLSTO,EQ=NAT40,        BRANCH IF SYSLIST REFERENCE    X70530000
               GT=NAT10                 BRANCH IF PARAMETER REFER       70560000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    70590000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          70620000
         DC    AL1(SEV122,ERR122)       ERROR PARAMETERS                70650000
         SR    EVEN,EVEN                SET UP DEFAULT VALUE            70680000
         B     KATT90                   GO TO ASSIGN IT NORMALLY        70710000
NAT10    LR    R10,STACKPTR             TERM POINTER                    70740000
         SET   CHARMODE,ON              NO ARITHMETIC CONVERSION        70770000
         JCALL RESOLVE                  RESOLVE THE TERM                70800000
         SET   CHARMODE,OFF                                             70830000
         USING PARMTAB,R14              BASE FOR PARAMETER              70860000
         GOIF  PSUB,ON=NAT20            SUBLIST, SKIP AHEAD             70890000
         GOIF  POMIT,ON=NAT50           CHECK FOR OMITTED OPERAND       70920000
         LA    EVEN,D1                  ELSE N ATTRIBUTE IS 1           70950000
         B     KATT90                   EVIT                            70980000
NAT20    MVC   JHWORD1,PNAT             ALIGN                           71010000
         LH    EVEN,JHWORD1             PICK UP VALUE                   71040000
         SET   SUBLIST,OFF              CLEAR SUBLIST SWITCH   @OX09721 71050005
         B     KATT90                   AND EXIT                        71070000
         SPACE                                                          71100000
NAT40    EQU   *                        SYSLIST                         71130000
         TM    JTMLSTM,BIT0             LOOK FOR DEAD TERM              71160000
         BO    NAT50                    GIVE DEFAULT IF FOUND           71190000
         SPACE                                                          71220000
         LH    EVEN,NOFSYSLS            ELSE LOAD N'SYSLIST             71280000
         B     KATT90                   AND EXIT.                       71310000
NAT50    SR    EVEN,EVEN                SET N ATTRIBUTE TO ZERO         71340000
         B     KATT90                   AND EXIT                        71370000
         DROP  STACKPTR,R14                                             71400000
         EJECT                                                          71940000
*TITLE                                                                * 71970000
*   GENSTRING/GENERATE A CHARACTER STRING                             * 72000000
         SPACE                                                          72030000
*NOTES-                                                               * 72060000
*   REGISTERS--                                                       * 72090000
*                                                                     * 72120000
*   ENTRY--                                                           * 72150000
*                                                                     * 72180000
*   VTXTOUT    LENGTH FIELD OF CURRENT STRING                         * 72210000
*   VTXTIN     META TEXT                                              * 72240000
*                                                                     * 72270000
*   EXIT--                                                            * 72300000
*                                                                     * 72330000
*   R10        NEXT AVAILABLE OUTPUT POSITION                         * 72360000
*   R11        NEXT META FLAG                                         * 72390000
*        STACKPTR   CURRENT EVALUATION STACK ENTRY                      72420000
         SPACE                                                          72450000
GENSTRNG EQU   *                                                        72480000
GENSTR00 STM   R2,R9,GENSTRST           SAVE CALLERS REGISTERS          72490000
         LR    R8,R12                   ESTABLISH BASE FOR RTN          72500000
         USING GENSTR00,R8                                              72510000
         SPACE                                                          72540000
         USING JTOPL,VTXTOUT            DUMMY OUTPUT BASE               72570000
         ST    VTXTOUT,GENPTR           SAVE POINTER TO LENGTH          72600000
         SR    FLDLN,FLDLN              CLEAR A REGISTER                72630000
         IC    FLDLN,JTOPL              PICK UP CURRENT STRING LENGTH   72660000
         LA    VTXTOUT,JTOPND(FLDLN)      AND STEP TO END OF STRING.    72690000
         ST    VTXTOUT,NEWSTRNG         SAVE THIS STRING START          72720000
         STH   FLDLN,STRNGLN            AND PREVIOUS LENGTH             72750000
         USING JTOPND,VTXTOUT           RESET BASE                      72780000
         SET   CHARMODE,ON              WE WANT CHARACTERS BACK         72810000
         SET   ERR105SW,OFF             CLEAR ERROR LOGGED SWITCH       72840000
         SET   SUBLIST,OFF              CLEAR SUBLIST SWITCH            72870000
         SPACE                                                          72900000
GENSTR10 EQU   *                        ITERATION POINT                 72930000
         SPACE                                                          72960000
         USING JTMOP,VTXTIN             VTXTIN POINTS TO META OPERATOR  72990000
         GOIF  SUBLIST,ON=GENSTR32      IF SUBLIST SWITCH IS ON, MUST  X73020000
                                          MOVE ENTIRE SUBLIST.  REENTERX73050000
                                          AT GENSTR14 AFTER PREPARATION 73080000
         GOIF  JTMSTRM,EQ=GENSTR90      EXIT IF STATEMENT TERMINATOR    73110000
         GOIF  JTMECM,EQ=GENSTR80         OR END CHARACTER MODE.        73140000
         SPACE                                                          73170000
         GOIF  JTMCS,NE=GENSTR12        NOT CHARACTER STRING, SKIP      73200000
         SR    RMOVE,RMOVE              HAS GARBAGE ON RECURSION        73230000
         IC    RMOVE,JTMLNG               BEFORE PROCEEDING,            73260000
         LA    R11,JTMLNG               POINT R11 TO L FIELD OF STRING  73290000
         LA    VTXTIN,JTMSTRNG(RMOVE)   AND UPDATE THE META TEXT PTR    73320000
         B     GENSTR16                 SKIP AHEAD                      73350000
         SPACE                                                          73380000
GENSTR12 EQU   *                        PREPARE TO RESOLVE TERM         73410000
         SPACE                                                          73440000
         GOIF  JTMLSTO,EQ=GENSTR15      SYSLIST, GO GET DIMENSION       73470000
         GOIF  JTMD,FZERO,EQ=GENSTR13   NO DIMENSION, PROCEED           73500000
GENSTR15 SET   JTMCSW,ON                ELSE SET TEMPORARY CHARACTER   X73590000
                                          FLAG.                         73620000
         SET   CHARMODE,OFF             NO LONGER IN CHARACTER MODE     73650000
         ST    FLDLN,RESRTRN            SAVE STRING LENGTH COUNTER      73680000
         L     STACKPTR,STACKLVL        PICK UP CURRENT STACK POINTER   73710000
         L     R8,=A(EVAL)              BASE FOR EVAL ROUTINE           73740000
         USING EVAL,R8                    DECLARED--                    73770000
         B     EVAL80                   GO EVALUATE DIMENSION           73800000
         USING GENSTRNG,R8              RE-DECLARE ROUTINE BASE         73830000
         SPACE                                                          73860000
GENSTR13 EQU   *                                                        73890000
         SPACE                                                          73920000
         LR    R10,VTXTIN               R10 WANTS TERM POINTER          73950000
         LA    VTXTIN,JTMNEXT             AND VTXTIN NEEDS UPDATE       73980000
         JCALL RESOLVE                  RESOLVE PRODUCES A STRING       74010000
         DROP  VTXTIN                                                   74040000
         USING JTMLNG,R11               BASE                            74070000
GENSTR1X EQU   *                                                        74080000
         GOIF  SUBLIST,ON=GENSTR30      SUBLIST SWITCH ON, BRANCH       74100000
GENSTR14 SR    RMOVE,RMOVE              CLEAR A REGISTER                74130000
         IC    RMOVE,JTMLNG             PICK UP STRING LENGTH           74160000
GENSTR16 EQU   *                                                        74190000
         GOIF  (RMOVE),ZERO=GENSTR10    NULL STRING IF L=0              74220000
         DROP  R11                                                      74250000
         AR    FLDLN,RMOVE              INCREMENT LENGTH COUNTER        74280000
         GOIF  (FLDLN),HMAXCHAR,GT=LOGER105  GENERATED STRING TOO LONG  74310000
GENSTR18 EQU   *                                                        74340000
         BCTR  RMOVE,D0                 DECREMENT TO MOVE LENGTH        74370000
         EX    RMOVE,GENMOVE            EXECUTED MOVE                   74400000
         LA    VTXTOUT,D1(RMOVE,VTXTOUT)     INCREMENT OUTPUT POINTER  X74430000
                                               TO END OF STRING         74460000
         B     GENSTR10                 ITERATE                         74490000
         SPACE                                                          74520000
         USING JTMLNG,R11                                               74550000
GENMOVE  MVC   JTOPND,JTMSTRNG          REMOTE MOVE CHARACTER STRING TOX74580000
                                          OUTPUT.                       74610000
         DROP  R11,VTXTOUT                                              74640000
GENSTR80 EQU   *                        END CHARACTER MODE              74670000
GENSTR90 EQU   *                        END OF STATEMENT                74700000
         SPACE                                                          74730000
         L     INDEX1,GENPTR            PICK UP LENGTH POINTER          74760000
         USING JTMLNG,INDEX1              AND USE AS BASE               74790000
         STC   FLDLN,JTMLNG             STORE FIELD LENGTH              74820000
         DROP  INDEX1                                                   74850000
         LR    R10,VTXTOUT              SAVE THE OUTPUT POINTER         74880000
         SET   CHARMODE,OFF             INACTIVATE CHARACTER MODE SW    74910000
         USING JTMFLG,VTXTIN            BASE FOR INPUT                  74940000
         LA    R11,JTMPTR               BUMP TO NEXT POTENTIAL FLAG     74970000
         DROP  VTXTIN                                                   75000000
GENSTR99 LM    R2,R9,GENSTRST           RESTORE CALLERS REGISTERS       75020000
         BR    R9                       RETURN TO CALLER                75040000
         SPACE                                                          75060000
GENSTR30 EQU   *                        STRING IS ENTIRE SUBLIST        75090000
         SPACE                                                          75120000
         LR    R10,R14                  COMPUTE SUBLIST                 75150000
         A     R10,JFWORD1              VECTOR POINTER.                 75180000
         LA    FLDLN,D1(,FLDLN)         INCREMENT STRING COUNT          75210000
         GOIF  (FLDLN),HMAXCHAR,GT=LOG105X   GENERATED STRING TOO LONG  75240000
         USING JTOPND,VTXTOUT           BASE FOR OUTPUT                 75270000
         MVI   JTOPND,JLPARN            OUTPUT A LEFT PAREN             75300000
         DROP  VTXTOUT                                                  75330000
         LA    VTXTOUT,D1(VTXTOUT)      UPDATE THE OUTPUT POINTER       75360000
         B     GENSTR35                 AND SKIP AHEAD                  75390000
         SPACE                                                          75420000
GENSTR32 LH    R15,JHWORD1              DECREMENT                       75450000
         GOIF  (R15),ZERO=GENSTR33      EXIT ON SUBOPERANDS EXHAUSTED   75460000
         BCT   R15,GENSTR34               PARAMETER COUNT AND CONTINUE. 75480000
         STH   R15,JHWORD1              PRESERVE SUBOPERAND COUNT (0)   75490000
         LA    FLDLN,D1(,FLDLN)         BUMP OUTPUT COUNT               75510000
         GOIF  (FLDLN),HMAXCHAR,GT=LOG105X GENERATED STRING TOO LONG    75540000
         USING JTOPND,VTXTOUT                                           75570000
         MVI   JTOPND,JRPARN            OUTPUT TERMINATING RIGHT PAREN  75600000
         DROP  VTXTOUT                                                  75630000
         LA    VTXTOUT,D1(,VTXTOUT)     UPDATE THE OUTPUT PTR           75660000
GENSTR33 EQU   *                                                        75670000
         SET   SUBLIST,OFF              TURN OFF THE SUBLIST FLAG AND   75690000
         B     GENSTR10                 GO BACK FOR MORE STRINGING      75720000
         SPACE                                                          75750000
GENSTR34 STH   R15,JHWORD1              ELSE SAVE THE COUNT.            75780000
         LA    FLDLN,D1(FLDLN)          BUMPT OUTPUT COUNT.             75810000
         GOIF  (FLDLN),HMAXCHAR,GT=LOG105X   GENERATED STRING TOO LONG  75840000
         USING JTOPND,VTXTOUT           BASE FOR OUTPUT TEXT            75870000
         MVI   JTOPND,JCOMMA            MOVE COMMA TO TEXT              75900000
         DROP  VTXTOUT                                                  75930000
         LA    VTXTOUT,D1(VTXTOUT)        AND UPDATE OUTPUT POINTER.    75960000
GENSTR35 SH    R10,=H'3'                BACK UP TO NEXT SUBLIST VECTOR  75990000
         MVC   JFWORD1+D1(D3),D0(R10)   ALIGN THE VECTOR                76020000
         L     R11,JFWORD1              PICK UP THE VECTOR              76050000
         USING PFLAG,R14                BASE FOR SUBOPERAND FETCH       76080000
         LA    R11,PKAT(R11)            POINT TO SUBOPERAND.            76110000
         B     GENSTR14                 AND CONCATENATE IT TO STRING    76140000
         SPACE                                                          76170000
LOG105X  LA    RMOVE,D1                 SET UP COUNT ON OVERFLO CHAR    76200000
LOGER105 GOIF  ERR105SW,ON=GENSTR50     BYPASS IF ERROR ALREADY LOGGED  76230000
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    76260000
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          76290000
         DC    AL1(SEV105,ERR105)       ERROR PARAMETERS                76320000
         SET   ERR105SW,ON              INDICATE ERROR LOGGED ONCE      76350000
GENSTR50 EQU   *                                                        76380000
         SR    FLDLN,RMOVE              GET BASE STRING LENGTH          76410000
         LH    RMOVE,HMAXCHAR           SET UP MAXIMUM STRING LENGTH    76440000
         SR    RMOVE,FLDLN              COMPUTE ALLOWABLE INCREMENT     76470000
         LTR   RMOVE,RMOVE              SEE IF INCREMENT ZERO           76500000
         BZ    GENSTR10                 IF SO, DON'T BOTHER, ELSE       76530000
         AR    FLDLN,RMOVE              ADJUST LENGTH FOR FRAGMENT      76560000
         B     GENSTR18                 GO BACK TO ADD MAXIMUM POSSIB   76590000
         EJECT                                                          76620000
ZONEMASK DC    X'00',15X'0F'            MASK TO DROP LEADING ZEROS OR  X76650000
                                          MASK OUT ZONES AFTER UNPACK   76680000
HMAXCHAR DC    Y(MAXCHAR)               MAXIMUM STRING LENGTH           76710000
FZERO    DC    F'0'                     ZEROS FOR COMPARES              76740000
         SPACE 3                                                        76770000
         SPACE 3                                                        76830000
         JPATCH  X3A03,B4A              PATCH AREA                      76860000
         END   MENTRY                                                   76890000
./  ADD  SSI=71710240,NAME=IFNX3B
         JHEAD 'SYMBOL RESOLUTION PREPROCESSOR',                       ,00300000
               PHASEID=X3B,                                            ,00600000
               LEVEL=10                                                 00900000
*                                                                     * 00906000
*FUNCTION/OPERATION-                                                  * 00912000
*   THE SYMBOL RESOLUTION PREPROCESSOR SCANS ALL GENERATED STATEMENTS * 00918000
*   AND PRODUCES A SEQUENTIAL FILE OF ALL NECESSARY RECORDS REQUIRED  * 00924000
*   BY THE ASSEMBLER SYMBOL RESOLUTION PHASE.  THIS FILE CONSISTS OF  * 00930000
*   THE FOLLOWING TYPES OF RECORDS-                                   * 00936000
*        1.   RECORDS GENERATED BY 'PUNCH' AND 'REPRO' STATEMENTS     * 00942000
*             BEFORE THE ESD.                                         * 00948000
*        2.   SYMBOL DEFINITIONS.                                     * 00954000
*        3.   SYMBOL REFERENCES.                                      * 00960000
*        4.   LITERALS.                                               * 00966000
*        5.   OTHER ASSEMBLER OPERATIONS AFFECTING THE ESD OR STORAGE * 00972000
*             ASSIGNMENT (START, CSECT, DSECT, COM, DXD, ENTRY,       * 00978000
*             EXTRN, WXTRN, EQU, ORG, LTORG, CNOP, DC, DS, END)       * 00984000
*                                                                     * 00990000
*ENTRY POINT-                                                         * 00996000
*        X3B01                                                        * 01002000
*                                                                     * 01008000
*INPUT-                                                               * 01014000
*   'TXTOUT' IS A POINTER TO THE GENERATED RECORD.                    * 01020000
*                                                                     * 01026000
*OUTPUT-                                                              * 01032000
*   FILE 3 IS A FILE OF THE RECORDS DESCRIBED ABOVE.                  * 01038000
*                                                                     * 01044000
*EXTERNAL ROUTINES-                                                   * 01050000
*   ROUTINES 'JPUTL' AND 'JPUTM' INT THE CONTROLLER TO WRITE THE      * 01056000
*   OUTPUT RECORDS.                                                   * 01062000
*                                                                     * 01068000
*EXITS, NORMAL-                                                       * 01074000
*   RETURN TO THE MACRO GENERATOR.                                    * 01080000
*                                                                     * 01086000
*EXITS, ERROR-                                                        * 01092000
*   NONE                                                              * 01098000
*                                                                     * 01104000
*TABLE/WORK AREAS-                                                    * 01110000
*   NONE                                                              * 01116000
*                                                                     * 01122000
*ATTRIBUTES-                                                          * 01128000
*   REFRESHABLE                                                       * 01134000
*                                                                     * 01140000
*NOTES-                                                               * 01146000
         EJECT                                                          01152000
         COPY  JCOMMON                                                  01200000
         EJECT                                                          01500000
         COPY  JTEXT                                                    01800000
         EJECT                                                          02100000
         COPY  GENCOM                                                   02400000
         EJECT                                                          02700000
         COPY  RSYMRCD                                                  03000000
         EJECT                                                          03300000
*A690500-692500,708500                                         @OZ01688 03350005
*D690500-692500,708500                                         @OY09620 03400005
         JCSECT  (X3B00)                                                03600000
         JMODID                                                         03900000
X3B01    STM   R8,R9,SAVVY              SAVE VASE AND VETURN VEGISTERS  04200000
         LR    R8,R12                   MY BASE                         04500000
         JENTRY  (X3B01=X3B01)          ENTRY                           04800000
         USING X3B01,R8                 USING                           05100000
         USING JTEXT,R5                 USING                           05400000
         USING RRCDL,R11                USING                           05700000
         L     R5,TXTOUT                RECORD POINTER                  06000000
         LR    R4,R5                    TEXT POINTER                    06300000
         AH    R4,JTOPP                 OPERAND POINTER                 06600000
         SR    R6,R6                    INITIALIZE OP LENGTH            06900000
         ST    R6,SYMBLCNT              INITIALIZE                      07200000
         MVC   LFLGA(D3),JTFLGA         RECORD TYPE                     07500000
         GOIF  JDEF,OFF=EXTRACT              NO DEFINITION RECORD       07800000
         GOIF  (JINPC,JINHB),NONE=LOCTR1     SKIP IF PC NOT REQUIRED    08100000
         TS    INHI                          SEE IF IN SECTION          08400000
         BNZ   LOCTR1                   SKIP IF ALREADY IN SECTION      08700000
         GOIF  JINHB,ON=LOCTR1          SKIP IF PC NOT REQUIRED         09000000
         JPUTM FILE=FILE3,ADDR=LOCTRUPC INITIATE PC                     09300000
LOCTR1   GOIF  JPSOP,OFF=LOCTR3         SEE IF MACHINE OP               09600000
         SET   FRCMI,ON                 INDICATE PSEUDO OP              09650000
         GOIF  JTEND,EQUAL=LOCTR0       END                             09900000
         GOIF  JTUSING,EQUAL=USING      FINISHED IF USING               10200000
         GOIF  JTPUNCH,EQUAL=PUNCH      SKIP IF PUNCH                   10500000
         GOIF  JTREPRO,EQUAL=REPRO      SKIP IF REPRO                   10800000
         GOIF  JTCXD,EQUAL=LOCTR2       SET OP LENGTH TO 4              11100000
         GOIF  JTCCW,NOTEQ=LOCTR4       SKIP IF NOT CCW                 11400000
         LA    R6,D4                    SET OP LENGTH TO 4              11700000
LOCTR2   LA    R6,D4(,R6)               SET OP LENGTH TO 4 OR 8         12000000
         B     LOCTR4                   CONTINUE                        12300000
LOCTR3   MVI   LFLGA+D2,JTPMOP          PSEUDO OP CODE FOR MACHINE OP   12600000
         IC    R6,JTFLGA                GET OP LENGTH                   12900000
         N     R6,=F'3'                 ISOLATE SIGNIFICANT BITS        13200000
         LA    R6,D2(R6,R6)             COMPUTE LENGTH                  13500000
LOCTR4   SET   JSYSGEN,ON               CALL X4                         13800000
LOCTR0   LR    R3,R5                    POINTER                         14100000
         AH    R3,JTNMP                 NAME POINTER                    14400000
         SR    R2,R2                    INITIALIZE TO ZERO              14700000
         GOIF  JNMERR,ON=LOCTR7         NO NAME, NO ERROR               15000000
         CLI   JTNML-JTNMO(R3),D0         SEE IF NAMED                  15300000
         BNZ   LOCTR5                       THERE'S A NAME              15600000
LOCTRR   GOIF  JPSOP,ON=LOCTR7          FORCE PSEUDO OP                 15950000
         GOIF  FRCMI,ON=LOCTR7,ELSE=EXTRACT1 FORCE FIRST MACHINE INSTR  16000000
LOCTR5   CLI   JTNAME-JTNMO(R3),JPERIOD     SEE IF SEQUENCE SYMBOL      16200000
         BE    LOCTRR                     NOT REALLY A NAME             16500000
LOCTR6   LA    R2,D10                   LENGTH OF NAME APPENDAGE        16800000
LOCTR7   STH   R2,NAMELNG                 SAVE                          17100000
         LA    R2,D12(,R2)                  RECORD LENGTH               17400000
         GOIF  (JPSOP,JREQOP),NOTALL=LOCTR8   SKIP NOT REQUIRED OPERAND 17700000
         TM    JTOPO-JTOPO(R4),JTOPOCD      SEE IF SWITCH ON            18000000
         BZ    LOCTRA                     NO                            18300000
         LA    R4,JTOPL-JTOPO(,R4)      BUMP                            18600000
LOCTRA   CLI   JTOPL-JTOPO(R4),D0       SEE IF ZERO                     18900000
         BZ    LOCTR8                   SKIP IF NOT                     19200000
         SR    R1,R1                    CLEAR REGISTER                  19500000
         IC    R1,JTOPL-JTOPO(,R4)      GET OPERAND LENGTH              19800000
         LA    R2,D2(R1,R2)             RECORD LENGTH                   20100000
LOCTR8   GOIF  JPSOP,ON=PASSIT          BRANCH IF PSEUDO OP             20150000
         SET   FRCMI,OFF                INDICATE MACHINE INSTRUCTION    20200000
PASSIT   JPUTL FILE=FILE3,BUFREQ=(R2)   GET BUFFER                      20400000
         STH   R2,RRCDL                 RECORD LENGTH                   20700000
         MVC   RFLGA(D3),LFLGA          RECORD TYPE                     21000000
         XC    RFLDI(D3),RFLDI          INITIALIZE TO ZERO              21300000
         MVI   RFLGB,D0                 DON'T PASS FLGB                 21600000
         L     R0,LCR                   GET LOCATION COUNTER            21900000
         ST    R0,RLCTR                 PASS IN RECORD                  22200000
         SR    R0,R0                    PUT A ZERO                      22500000
         ST    R0,LCR                   BACK                            22800000
         CLI   NAMELNG+D1,D0            SEE IF ANME APPENDAGE           23100000
         BZ    LOCTR9                   SKIP IF NO NAME                 23400000
         IC    R1,JTNML-JTNMO(,R3)      GET NAME LENGTH                 23700000
         BCTR  R1,D0                      GET MACHINE LENGTH            24000000
         MVC   RNAME+D1(D7),=7AL1(JBLANK)   PAD WITH BLANKS             24300000
         EX    R1,LOCTRMVC                MOVE IN NAME                  24600000
         LA    R1,RFIELDN(,R1)          SET FLAG ON                     24900000
         STC   R1,RFLDI                 PASS FIELD INDICATORS           25200000
         STH   R6,RLNGQ                 PASS LENGTH ATTRIBUTE           25500000
         SH    R2,NAMELNG               COMPENSATE FOR RECORD LENGTH    25800000
LOCTR9   SH    R2,=H'14'                SEE IF OPERAND PRESENT          26100000
         BNP   EXTRACT                  SKIP IF NO OPERAND              26400000
         SET   RFIELDX,ON               INDICATE OPERAND PRESENT        26700000
         AH    R11,NAMELNG              BUMP PAST NAME, IF PRESENT      27000000
         EX    R2,LOCTRMOV              MOVE IN OPERAND                 27300000
         AR    R11,R2                   BUMP PAST OPERAND               27600000
         MVI   RFLDA,JBLANK             AND INSERT A BLANK              27900000
EXTRACT  GOIF  JREF,OFF=FINIS           EXIT IF NOT REQUESTED           28200000
EXTRACT1 TM    JTOPO-JTOPO(R4),JTOPOCD  SEE IF CARD POINTER             28500000
         BZ    EXTRACT0                 NAH                             28800000
         LA    R4,JTOPL-JTOPO(,R4)      HOP                             29100000
EXTRACT0 CLI   JTOPL-JTOPO(R4),D0       SEE IF OPERAND                  29400000
         BZ    FINIS                    EXIT IF NO OPERAND              29700000
         SET   (VCONV,MODV),OFF         CLEAR VCON BITS                 29800000
         SET   (VCONW,MODW),OFF         CLEAR VCON BITS                 29900000
         SR    R3,R3                    CLEAR REGISTER                  30000000
         IC    R3,JTOPL-JTOPO(,R4)      GET OPERAND LENGTH              30300000
         LA    R5,D1(R3,R4)             POINT TO END-OF-OPERAND         30600000
         LA    R3,D2(,R4)               POINT TO START-OF-OPERAND       30900000
         LA    R4,D1                    INCREMENT                       31200000
EXTRACT4 TM    LFLGA,JPSOP+JEXTB        SEE IF EXTERNAL SYMBOL          31500000
         BNO   EXTRACT2                 SKIP IF NOT                     31800000
EXTRACT5 CLI   D0(R3),JAT               SEE IF INVALID CHARACTER        32100000
         BH    FINIS                    INVALID CHARACTER               32400000
         CLI   D0(R3),J9                SEE IF INVALID CHARACTER        32700000
         BH    SYMBOL                   POSSIBLE EXTERNAL SYMBOL        33000000
         B     FINIS                    SYNTAX ERROR                    33300000
EXTRACT2 MVC   SUPPRESV,LFLGA           SET SUPPRESS SWITCH             33600000
         SET   VCONV,OFF                CLEAR VCON BIT                  33700000
         SET   MODV,OFF                 CLEAR MODIFIER BIT              33800000
EXTRACT3 MVC   SUPPRESW,SUPPRESV        SET SUPPRESS SWITCH             33900000
LOOK     CLI   D0(R3),JEQUAL            SEE IF ALPHANUMERIC             34200000
         BL    ALPHANUM                 GO IF ALPHANUMERIC              34500000
LOOKY    CLI   D0(R3),JPERIOD           SEE IF VALID CHARACTER          34800000
         BH    FINIS                    GO IF INVALID CHARACTER         35100000
         SR    R2,R2                    ZERO INDEX                      35400000
         TRT   D0(D1,R3),INDEX          COMPUTE INDEX                   35700000
         B     PIVOT(R2)                INVESTIGATE SPECIAL CHARACTER   36000000
COMMA    CH    R4,PARENCNT              SEE IF INSIDE PARENS            36300000
PIVOT    EQU   COMMA                    SAME                            36600000
         BNH   ADVANCE                  IGNORE IF INSIDE PARENS         36900000
         BXLE  R3,R4,EXTRACT2           END-OF-OPERAND ENCOUNTERED      37200000
         B     FINIS                    END-OF-OPERAND                  37500000
LPARN    SET   SUPPRESS,OFF             SET SUPPRESS SWITCH OFF         37800000
         LH    R1,PARENCNT              GET PAREN COUNT                 38100000
         GOIF  VCONW,ON=CHCKMOD         CHECK IF VCON                   38400000
LPARN1   AR    R1,R4                    BUMP IT BY ONE                  38500000
         B     STPAR                    CONTINUE                        38700000
RPARN    LH    R1,PARENCNT              GET PAREN COUNT                 39000000
         BCT   R1,STPAR                 WATCH PAREN LEVEL               39300000
         EX    R0,EXTRACT3              SET SUPPRESS SWITCH             39600000
STPAR    STH   R1,PARENCNT              SAVE PAREN COUNT                39900000
ADVANCE  BXLE  R3,R4,LOOK                 LOOK AT NEXT CHARACTER        40200000
FINIS    A     R6,LCR                       ADD LENGTH OF CURRENT OP    40500000
         ST    R6,LCR                         SAVE FOR BYRON            40800000
         L     R2,TXTOUT                        RECORD POINTER          41100000
         MVC   JTSYMCNT-JTRLI(D1,R2),SYMBLCNT+D1  SYMBOL COUNT          41400000
         LM    R8,R9,SAVVY                      RESTORE REGISTERS       41700000
         BR    R9                             RETURN TO BYRON           42000000
USING    SET   JSYSGEN,ON               INDICATE X4 TO BE CALLED        42100000
         B     EXTRACT1                 SCAN OPERAND                    42200000
EQUAL    TM    LFLGA,JPSOP                  SEE IF MACHINE OP           42300000
         BO    FINIS                      LITERAL ILLEGAL OTHERWISE     42600000
         SR    R5,R3                    GET LENGTH OF LITERAL           42900000
         CLI   D1(R3),JBLANK            CAN'T HAVE A BLANK FOLLOWING    43100000
         BE    FINIS                    OR IT'S CURTAINS FOR THIS GUY   43300000
         LA    R2,D14(,R5)              LENGTH OF RECORD                43500000
         JPUTL FILE=FILE3,BUFREQ=(R2)   GET BUFFER                      43800000
         STH   R2,RRCDL                 RECORD LENGTH                   44100000
         MVC   RFLGA(D6),LITRHDR        RECORD HEADER                   44400000
         L     R0,LCR                   LOCATION COUNTER                44700000
         ST    R0,RLCTR                 PASS IN RECORD                  45000000
         SR    R0,R0                    PUT A ZERO BACK                 45300000
         ST    R0,LCR                   INTO THE LOCATION COUNTER       45600000
         EX    R5,LITRMVC               MOVE LITERAL INTO RECORD        45900000
         STC   R5,RLNGA                 PASS LENGTH OF LITERAL          46200000
         AR    R11,R5                   LOCATE THE END OF LITERAL       46500000
         MVI   RFLDA,JBLANK             AND APPEND A BLANK              46800000
         LH    R0,SYMBLCNT              GET COUNT OF SYMBOLS            47100000
         AR    R0,R4                    BUMP COUNT BY ONE               47400000
         STH   R0,SYMBLCNT              SAVE COUNT OF SYMBOLS           47700000
         SET   (VPSOP,SUPPREST),ON      SET SUPPRESS SWITCH ON          48000000
         AR    R5,R3                    POINT TO THE END OF OPERAND     48300000
         AR    R3,R4                      BUMP COLUMN POINTER           48600000
         B     EXTRACT3                     LOOK FOR MORE SYMBOLS       48900000
ALPHANUM GOIF  (WPSOP,SUPPRESS),ALL=CHCKVCON SUPPRESS CONDITION ON      49200000
         CLI   D0(R3),JA                    SEE IF ALPHA                49500000
         BL    ELFLUSHO                   DECIMAL SELF-DEFINING-VALUE   49800000
         CLI   D1(R3),JQUOTE            SEE IF FOLLOWED BY A QUOTE      50100000
         BNE   SYMBOL                   SYMBOL ENCOUNTERED              50400000
         CLI   D0(R3),JL                SEE IF LENGTH ATTRIBUTE         50700000
         BXH   R3,R4,FINIS              BUMP COLUMN POINTER BY ONE      51000000
         BE    ADVANCE                  LENGTH ATTRIBUTE REFERENCE      51300000
QUOTE    BALR  R1,D0                    PIVOT                           51600000
         BXH   R3,R4,FINIS              BUMP COLUMN POINTER             51900000
         CLI   D0(R3),JQUOTE            LOOKING FOR QUOTES ONLY         52200000
         BNER  R1                       IGNORE THE OTHERS               52500000
         BXH   R3,R4,FINIS              BUMP COLUMN POINTER             52800000
         CLI   D0(R3),JQUOTE            CHECK FOR PAIRED QUOTES         53100000
         BNE   LOOK                     VALID DELIMITER                 53400000
         BR    R1                       TREAT AS ONE                    53700000
ELFLUSHO BALR  R1,D0                    PIVOT                           54000000
         BXH   R3,R4,FINIS              BUMP COLUMN POINTER             54300000
         CLI   D0(R3),JEQUAL            TEST FOR DELIMITERS             54600000
         BLR   R1                       LOOP ON LOW                     54900000
         B     LOOKY                    CHECK THIS ONE OUT              55200000
SYMBOL   LR    R2,R3                    SAVE COLUMN POINTER             55500000
SYMBOL1  BXH   R2,R4,SYMBOL2            ADVANCE COLUMN POINTER          55800000
         CLI   D0(R2),JEQUAL            LOOK FOR DELIMITER              56100000
         BL    SYMBOL1                  LOOP IF NOT FOUND               56400000
SYMBOL2  SR    R2,R3                    FIND LENGTH OF SYMBOL           56700000
         CH    R2,=H'8'                 MUST NOT BE MORE THAN 8 CHARS   57000000
         BH    FINIS                    OR IT'S A BADDIE                57300000
         TM    LFLGA,JPSOP+JEXTB        SEE IF EXTERNAL SYMBOL          57600000
         BNO   SYMBOLS                  SKIP IF NOT                     57900000
         LA    R1,D0(R2,R3)             UPDATE COLUMN POINTER           58200000
         CR    R1,R5                    SEE IF END-OF-OPERAND           58500000
         BH    SYMBOLS                  SKIP IF SO                      58800000
         CLI   D0(R1),JBLANK            SEE IF END-OF-OPERAND           59100000
         BE    SYMBOLS                  SKIP IF SO                      59400000
         CLI   D0(R1),JCOMMA            SEE IF VALID DELIMITER          59700000
         BNE   FINIS                    INVALID DELIMITER               60000000
SYMBOLS  LH    R1,SYMBLCNT              GET SYMBOL COUNT                60300000
         AR    R1,R4                    BUMP IT BY ONE                  60600000
         STH   R1,SYMBLCNT              SAVE SYMBOL COUNT               60900000
         SET   JSYSGEN,ON               CALL X4                         61200000
         JPUTL FILE=FILE3,BUFREQ=D24    GO FIND A BUFFER                61500000
         MVC   RRCDL(D24),SYMBOL4       BUILD RECORD HEADER             61800000
         BCTR  R2,D0                    GET LENGTH OF SYMBOL            62100000
         EX    R2,SYMBOL3               MOVE IN SYMBOL                  62400000
         GOIF  (VCONW,MODW),ALL=NOTVCON,NONE=NOTVCON                    62700000
         OI    RNAME,BIT0               INDICATE VCON OPERAND           62800000
NOTVCON  AR    R3,R2                    UPDATE COLUMN POINTER           62900000
         LA    R2,RFIELDN(,R2)          FLAG                            63000000
         STC   R2,RFLDI                 PASS SYMBOL LENGTH IN RECORD    63300000
         TM    LFLGA,JPSOP+JEXTB        SEE IF EXTERNAL SYMBOL          63600000
         BNO   ADVANCE                  SKIP IF NOT                     63900000
         MVC   RTYPE,LFLGA+D2           SET TYPE                        64200000
         CLI   D1(R3),JCOMMA            SEE IF MULTIPLE OPERAND         64500000
         BNE   FINIS                    END-OF-OPERAND                  64800000
         AR    R3,R4                    UPDATE COLUMN POINTER           65100000
         BXLE  R3,R4,EXTRACT5           CHECK OUT NEXT OPERAND          65400000
         B     FINIS                    ALL DONE OTHERWISE              65700000
SYMBOL3  MVC   RNAME(D0),D0(R3)         EXECUTED INSTRUCTION            66000000
SYMBOL4  DC    H'24',AL1(JPSOP,D0,JTSYMBL,D0),3H'0',8AL1(JBLANK),H'0' X 66300000
CHCKVCON CLI   D0(R3),JV                CHECK IF VCON                   66310000
         BNE   ELFLUSHO                 CONTINUE IF NOT                 66320000
         SET   VCONV,ON                 INDICATE VCON                   66330000
         SET   VCONW,ON                 INDICATE VCON                   66340000
         B     ELFLUSHO                 CONTINUE                        66350000
CHCKMOD  LTR   R1,R1                    CHECK PAREN COUNT               66360000
         BNZ   LPARN1                   BR IF WITHIN PARENS             66370000
         SR    R3,R4                    POINT TO CHAR BEFORE LEFT       66380000
         CLI   D0(R3),JL                LENGTH MODIFIER                 66390000
         BE    CHCKMOD5                 BRANCH IF YES                   66400000
         CLI   D0(R3),JE                EXPONENT MODIFIER               66410000
         BE    CHCKMOD5                 BRANCH IF SO                    66420000
         CLI   D0(R3),JS                SCALE MODIFIER                  66430000
         BNE   CHCKMOD6                 VCON IF NOT                     66440000
CHCKMOD5 SET   MODW,ON                  INDICATE MODIFIER               66450000
CHCKMOD6 AR    R3,R4                    UPDATE POINTER                  66460000
         B     LPARN1                   CONTINUE                        66470000
REPRO    LR    R4,R5                    TEXT POINTER                    66600000
         AH    R4,JTCPR                 COMMENT POINTER                 66900000
PUNCH    GOIF  INHIBIT,ON=FINIS         EXIT IF ON                      67200000
         GOIF  (JDECK,JLINK),NONE=FINIS   SKIP IF NOT OPTIONED          67500000
         SET   JPRESD,ON                PINCHED                         67800000
         SR    R3,R3                    CLEAR REGISTER                  68100000
         IC    R3,JTOPL-JTOPO(,R4)      GET OPERAND LENGTH              68400000
         LA    R2,D7(,R3)               GET RECORD LENGTH               68700000
         JPUTL FILE=FILE3,BUFREQ=(R2)   GET BUFFER                      69000000
         STH   R2,RRCDL                 RECORD LENGTH                   69300000
         MVC   RFLGA(D4),PUNCHEAD       PUNCH RECORD HEADER             69600000
         EX    R3,PUNCHMVC              MOVE IN OPERAND                 69900000
         GOIF  JTPUNCH,EQUAL=FINIS      SKIP IF PUNCH STATEMENT         70200000
         MVI   RTYPE,JTPREP             REPRO                           70250000
         B     FINIS                     FINIS                          70800000
PUNCHEAD DC    AL1(D0,D0,JTPPCH,D1)        TYPE                         71100000
PUNCHMVC MVC   RESDI(D0),JTOPL-JTOPO(R4)     EXECUTED INSTRUCTION       71400000
LITRMVC  MVC   RLNGA(D0),D0(R3)                EXECUTED INSTRUCTION     71700000
LITRHDR  DC    AL1(JPSOP+JDEF,D0,JTLITR,RFIELDX) LITERAL RECORD HEADER  72000000
LOCTRUPC DC    H'8',AL1(JPSOP,D0,JTINPC,D0)    UNINITIATED PRIVATE CODE 72300000
LOCTRMVC MVC   RNAME(D0),JTNAME-JTNMO(R3)    EXECUTED INSTRUCTION       72600000
LOCTRMOV MVC   RLNGA(D0),JTOPL-JTOPO(R4)   EXECUTED INSTRUCTION         72900000
INDEX    EQU   *-JEQUAL                  TABLE ORIGIN                   73200000
         DC    YL1(EQUAL-PIVOT)         EQUAL SIGN                      73500000
         DC    YL1(LPARN-PIVOT)         LEFT PAREN                      73800000
         DC    YL1(ADVANCE-PIVOT)       PLUS SIGN                       74100000
         DC    YL1(ADVANCE-PIVOT)       MINUS SIGN                      74400000
         DC    YL1(ADVANCE-PIVOT)       ASTERISK                        74700000
         DC    YL1(ADVANCE-PIVOT)       SLASH                           75000000
         DC    YL1(RPARN-PIVOT)         RIGHT PAREN                     75300000
         DC    YL1(COMMA-PIVOT)         COMMA                           75600000
         DC    YL1(FINIS-PIVOT)         BLANK                           75900000
         DC    YL1(QUOTE-PIVOT)         QUOTE                           76200000
         DC    YL1(FINIS-PIVOT)         AMPERSAND                       76500000
         DC    YL1(ADVANCE-PIVOT)       PERIOD                          76800000
         JPATCH X3B00,41F                                               76850000
         END                                                            77100000
./  ADD  SSI=71710241,NAME=IFNX3K
         GENOP PHASE=3,                                                X30000000
               LEVEL=1                                                  30640800
         END                                                            60000000
./  ADD  SSI=71710242,NAME=IFNX3N
         JHEAD 'GENERATE PHASE DICTIONARY ROUTINES',                   X00060020
               PHASEID=X3N,                                            X00120020
               LEVEL=10                                                 00180020
*FUNCTION/OPERATION-                                                  * 00240020
*   THE GENERATE PHASE DICTIONARY ROUTINES ARE A SET OF SUBROUTINES.  * 00300020
*   THESE SUBROUTINES PROVIDE ALL THE FUNCTIONS REQUIRED BY THE       * 00360020
*   GENERATE PHASE RELATIVE TO THE GENERATION TIME DICTIONARIES. THE  * 00420020
*   FUNCTIONS PROVIDED ARE- INITIALIZATION, SETTING, AND REFERENCING. * 00480020
*   THESE FUNCTIONS ARE REQUESTED DURING THE EXPANSION OF MACRO       * 00540020
*   INSTRUCTIONS AND IN CONDITIONAL ASSEMBLY FOR THE GENERATION OF    * 00600020
*   THE TEXT TO BE PROCESSED BY THE ASSEMBLY PHASE. THE PERTINENT     * 00660020
*   DICTIONARIES ARE- GLOBAL DICTIONARY, ORDINARY SYMBOL REFERENCE    * 00720020
*   DICTIONARY, AND THE DICTIONARY FOR THE TEXT SEGMENT CURRENTLY     * 00780020
*   BEING USED BY THE GENERATE PHASE. THE DICTIONARY FOR A TEXT       * 00840020
*   SEGMENT INCLUDES THE SKELETON DICTIONARY BUILT BY THE DICTIONARY  * 00900020
*   INTERLUDE PHASE FOR THAT TEXT SEGMENT (CONSISTING OF THE          * 00960020
*   DICTIONARY HEADER, THE GLOBAL VECTOR, AND THE SEQUENCE SYMBOL     * 01020020
*   REFERENCE DICTIONARY), THE LOCAL DICTIONARY, AND, IN THE CASE     * 01080020
*   OF A MACRO DEFINITION, THE MACRO PARAMETER WORK AREA.             * 01140020
*                                                                     * 01200020
*ENTRY POINT-                                                         * 01260020
*        DICTENTR                                                     * 01320020
*              THE CALLING SEQUENCE IS-                               * 01380020
*                  DICTCALL ENTRY                                     * 01440020
*              WHICH GENERATES-                                       * 01500020
*                  L     LINK,POINTER                                 * 01560020
*                  BAL   RETURN,ENTRY(,LINK)                          * 01620020
*              WHERE LINK IS THE STANDARD REGISTER FOR THE ADDRESS    * 01680020
*                             OF THE CALLED ROUTINE                   * 01740020
*                    POINTER CONTAINS THE ADDRESS OF THE DICTIONARY   * 01800020
*                            ENTRY ROUTINE                            * 01860020
*                    ENTRY IS THE NAME OF THE DICTIONARY FUNCTION     * 01920020
*                             REQUIRED (ENTRY NAMES ARE EQUATED TO    * 01980020
*                             ABSOLUTE VALUES USED AS DISPLACEMENTS   * 02040020
*                             INTO A BRANCH TABLE                     * 02100020
*                    RETURN IS THE STANDARD REGISTER FOR THE RETURN   * 02160020
*                             ADDRESS                                 * 02220020
*                                                                     * 02280020
*INPUT-                                                               * 02340020
*   FILE 1 - SKELETON DICTIONARY FOR EACH TEXT SEGMENT                * 02400020
*   FILE 1 - OVERFLOW DICTIONARIES                                    * 02460020
*   FILE 2 - MACRO DEFINITION VECTOR                                  * 02520020
*          - ORDINARY SYMBOL REFERENCE DICTIONARY                     * 02580020
*          - OPSYN TABLE                                              * 02640020
*                                                                     * 02700020
*OUTPUT-                                                              * 02760020
*   FILE 1 - OVERFLOW DICTIONARIES                                    * 02820020
*                                                                     * 02880020
*EXTERNAL ROUTINES-                                                   * 02940020
*                                                                     * 03000020
*                                                                     * 03060020
*                                                                     * 03120020
*EXITS,NORMAL-                                                        * 03180020
*   EXIT TO THE CONTROLLER WITH THE COMPLETION CODE SET TO A ZERO     * 03240020
*   VALUE.                                                            * 03300020
*                                                                     * 03360020
*EXITS,ERROR-                                                         * 03420020
*   EXIT TO THE CONTROLLER WITH THE COMPLETION CODE SET TO A NON-ZERO * 03480020
*   VALUE, THE SPECIFIC VALUE INDICATING THE ACTION TO BE TAKEN BY    * 03540020
*   THE CONTROLLER.                                                   * 03600020
*                                                                     * 03660020
*TABLES/WORK AREAS-                                                   * 03720020
*   MACRO DEFINITION VECTOR - A SEQUENTIAL TABLE. THERE IS ONE ENTRY  * 03780020
*        IN THE TABLE FOR EACH TEXT SEGMENT. EACH ENTRY CONSISTS      * 03840020
*        OF THE NOTE/POINT ADDRESS OF THE EDITED TEXT (NOT PRESENT    * 03900020
*        IN THE ENTRY FOR OPEN CODE), THE NOTE/POINT ADDRESS OF THE   * 03960020
*        SKELETON DICTIONARY, AND THE SIZE OF SKELETON DICTIONARY.    * 04020020
*   GLOBAL DICTIONARY - THE AREA IN WHICH THE VALUES OF THE VARIABLE  * 04080020
*        SYMBOLS ASSIGNED AS GLOBAL VARIABLES IN THE EDIT PHASE ARE   * 04140020
*        SET AND REFERENCED IN THE GENERATE PHASE DURING THE          * 04200020
*        EXPANSION OF MACRO INSTRUCTIONS AND IN CONDITIONAL ASSEMBLY. * 04260020
*   ORDINARY SYMBOL REFERENCE DICTIONARY - A SEQUENTIAL TABLE. THERE  * 04320020
*        IS ONE ENTRY IN THE TABLE FOR EACH ORDINARY SYMBOL           * 04380020
*        REFERENCED IN ATTRIBUTE REFERENCES OR IN MACRO INSTRUCTION   * 04440020
*        OPERANDS (LESS THOSE RESOLVED AS DUPLICATES). EACH ENTRY     * 04500020
*        CONSISTS OF THE TYPE, LENGTH, AND SCALE ATTRIBUTES OF THE    * 04560020
*        CORRESPONDING ORDINARY SYMBOL.                               * 04620020
*   DICTIONARY FOR A TEXT SEGMENT - THE SKELETON DICTIONARY (CONSIS-  * 04680020
*        TING OF THE DICTIONARY HEADER, THE GLOBAL VECTOR, AND THE    * 04740020
*        SEQUENCE SYMBOL REFERENCE DICTIONARY) PLUS THE LOCAL DIC-    * 04800020
*        TIONARY PLUS, IN THE CASE OF A MACRO DEFINITION, THE MACRO   * 04860020
*        PARAMETER WORK AREA.                                         * 04920020
*      --DICTIONARY HEADER - WORK AREA CONTAINING ALL THE OVERHEAD    * 04980020
*              PECULIAR TO THE DICTIONARY FOR A TEXT SEGMENT.         * 05040020
*      --GLOBAL VECTOR - A SEQUENTIAL TABLE OF POINTERS, ONE FOR      * 05100020
*              EACH SYSTEM GLOBAL VARIABLE AND ONE FOR EACH OF THE    * 05160020
*              VARIABLE SYMBOLS IN THE TEXT SEGMENT ASSIGNED          * 05220020
*              AS GLOBAL VARIABLES IN THE EDIT PHASE, EACH POINTING   * 05280020
*              TO THE CORRESPONDING ENTRY IN THE GLOBAL DICTIONARY.   * 05340020
*      --SEQUENCE SYMBOL REFERENCE DICTIONARY - A SEQUENTIAL TABLE    * 05400020
*              OF NOTE/POINT ADDRESSES, ONE FOR EACH SEQUENCE SYMBOL  * 05460020
*              REFERENCE IN THE TEXT SEGMENT (LESS THOSE RESOLVED     * 05520020
*              AS DUPLICATES), EACH POINTING TO THE POSITION IN THE   * 05580020
*              EDITED TEXT WHERE THE CORRESPONDING SEQUENCE SYMBOL    * 05640020
*              IS DEFINED.                                            * 05700020
*      --LOCAL DICTIONARY - THE AREA IN WHICH THE VALUES OF THE       * 05760020
*              VARIABLE SYMBOLS ASSIGNED AS LOCAL VARIABLES FOR THE   * 05820020
*              TEXT SEGMENT IN THE EDIT PHASE ARE SET AND REFERENCED  * 05880020
*              IN THE GENERATE PHASE DURING THE EXPANSION OF MACRO    * 05940020
*              INSTRUCTIONS AND IN CONDITIONAL ASSEMBLY.              * 06000020
*      --MACRO PARAMETER WORK AREA - THE KEYWORD PARAMETER VECTOR     * 06060020
*              PLUS THE POSITIONAL PARAMETER VECTOR PLUS THE          * 06120020
*              PARAMETER TABLE, CONSISTING OF THE VALUES OF ALL       * 06180020
*              THE MACRO INSTRUCTION OPERANDS.                        * 06240020
*                                                                     * 06300020
*ATTRIBUTES-                                                          * 06360020
*   REFRESHABLE                                                       * 06420020
*                                                                     * 06480020
*NOTES-                                                               * 06540020
*                                                                     * 06600020
*                                                                     * 06660020
*                                                                     * 06720020
         EJECT                                                          06780020
         COPY  JCOMMON                                                  06840020
         EJECT                                                          06900020
         COPY  JTMTXT                                                   06960020
         EJECT                                                          07020020
         COPY  GENCOM                                                   07080020
         EJECT                                                          07140020
*                                                                       07200020
* THIS DSECT MAPS THE MACRO DEFINITION VECTOR ENTRY.                    07260020
*                                                                       07320020
MDVNTRY  DSECT                                                          07380020
MNPTXT   DS    XL8                      TEXT FILE N/P     8 BYTES       07440020
MNPSD    DS    XL8                      SKEL DICTION N/P  8 BYTES       07500020
MSDL     DS    XL3                      SKEL DICT LENGTH  3 BYTES       07560020
MDVEND   EQU   *                                                        07620020
*                                                                       07680020
* THIS DSECT MAPS THE HEADER FOR THE SKELETON DICTIONARY.               07740020
*                                                                       07800020
SKDCTHDR DSECT                                                          07860020
SKSRDPT  DS    XL3                      DISPL SEQ SYM DIC 3 BYTES       07920020
SKLDADR  DS    XL3                      LCL DICT PTR      3 BYTES       07980020
SKLDLNG  DS    XL3                      LCL DICT LENGTH   3 BYTES       08040020
SKMPADR  DS    XL3                      MACRO PARAM PTR   3 BYTES       08100020
SKKVADR  DS    XL3                      KEYWD VECTR PTR   3 BYTES       08160020
SKADNLD  DS    XL4                      DICT ADR NXT LVL  4 BYTES       08220020
SKNPNLT  DS    XL8                      TEXT N/P NXT LVL  8 BYTES       08280020
SKACTRV  DS    XL4                      ACTR VALUE        4 BYTES       08340020
SKNOFSLS DS    XL2                      N'&SYSLIST        2 BYTES       08400020
SKHDREND EQU   *                                                        08460020
*                                                                       08520020
* THIS DSECT MAPS THE MACRO CALL META-TEXT.                             08580020
*                                                                       08640020
MCRCAL   DSECT                                                          08700020
MDVPNT   DS    XL3                      PTR TO MDV ENTRY FOR MACRO      08760020
*                                                                       08820020
*                                                                       08880020
* THIS DSECT MAPS THE GLOBAL AND LOCAL REFERENCE META-TEXT.             08940020
*                                                                       09000020
VREF     DSECT                                                          09060020
VFLAG    DS    X                        META-TEXT FLAG/OPERATOR         09120020
VPNT     DS    XL3                      PTR TO DICT/VECTOR ENTRY        09180020
VSUBS    DS    XL2                      VARIABLE SUBSCRIPT/DIMENSION    09240020
*                                                                       09300020
* THIS DSECT MAPS THE SEQUENCE SYMBOL REFERENCE META-TEXT.              09360020
*                                                                       09420020
SEQREF   DSECT                                                          09480020
SFLAG    DS    X                        META-TEXT FLAG/OPERATOR         09540020
SEQPNT   DS    XL3                      PTR TO DICTIONARY ENTRY         09600020
SEQPAD   DS    XL2                      PADDING                         09660020
*                                                                       09720020
* THIS DSECT MAPS THE ORDINARY SYMBOL REFERENCE META-TEXT.              09780020
*                                                                       09840020
ORDREF   DSECT                                                          09900020
OFLAG    DS    X                        META-TEXT FLAG/OPERATOR         09960020
ORDPNT   DS    XL3                      PTR TO DICTIONARY ENTRY         10020020
ORDPAD   DS    XL2                      PADDING                         10080020
*                                                                       10140020
* THIS DSECT MAPS THE PARAMETER REFERENCE META-TEXT.                    10200020
*                                                                       10260020
PARMREF  DSECT                                                          10320020
PARMFLG  DS    X                        META-TEXT FLAG/OPERATOR         10380020
PARMPNT  DS    XL3                      PTR TO PARAM VECTOR ENTRY       10440020
PARMPAD  DS    XL2                      PADDING                         10500020
         ORG   PARMPAD                  ORIGIN FOUR                     10560020
PARMSUB  DS    XL2                      SUBOPERAND NUMBER               10620020
*                                                                       10680020
* THIS DSECT MAPS THE ENTRY IN THE GLOBAL OR LOCAL DICTIONARY FOR A     10740020
*        SETA VARIABLE.                                                 10800020
*                                                                       10860020
SETANTRY DSECT                                                          10920020
SETAVAL  DS    XL4                      DICT ENTRY, SETA VARIABLE       10980020
*                                                                       11040020
* THIS DSECT MAPS THE ENTRY IN THE GLOBAL OR LOCAL DICTIONARY FOR A     11100020
*        SETB VARIABLE.                                                 11160020
*                                                                       11220020
SETBNTRY DSECT                                                          11280020
SETBVAL  DS    X                                                        11340020
*                                                                       11400020
* THIS DSECT MAPS THE ENTRY IN THE GLOBAL OR LOCAL DICTIONARY FOR A     11460020
*        SETC VARIABLE.                                                 11520020
*                                                                       11580020
SETCNTRY DSECT                                                          11640020
SETCLEN  DS    C                        LENGTH BYTE, SETC VARIABLE      11700020
SETCVAL  DS    CL8                      DICT ENTRY, SETC VARIABLE       11760020
         ORG   SETCVAL+D5               ORIGIN SIX                      11820020
SETCPTR  DS    XL3                      PTR TO VALUE, EXTENDED SETC     11880020
*                                                                       11940020
* THIS DSECT MAPS THE ENTRIES FOR THE SYSTEM GLOBAL VARIABLES           12000020
*        AT THE HEAD OF THE GLOBAL DICTIONARY.                          12060020
GSYSVALS DSECT                                                          12120020
PARMLEN  DS    C                        LENGTH SYSPARM VALUE            12180020
PARMVAL  DS    CL8                      SYSPARM VALUE                   12240020
TIMELEN  DS    C                        LENGTH, SYSTIME VALUE           12300020
TIMEVAL  DS    CL8                      SYSTIME VALUE                   12360020
DATELEN  DS    C                        LENGTH, SYSDATE VALUE           12420020
DATEVAL  DS    CL8                      SYSDATE VALUE                   12480020
*                                                                       12540020
* THIS DSECT MAPS THE ENTRIES FOR THE SYSTEM LOCAL VARIABLES            12600020
*        AT THE HEAD OF EACH LOCAL DICTIONARY                           12660020
*                                                                       12720020
LSYSVALS DSECT                                                          12780020
INDXVAL  DS    XL4                      SYSNDX VALUE                    12840020
SECTLEN  DS    CL1                      LENGTH, SYSECT VALUE            12900020
SECTVAL  DS    CL8                      SYSECT VALUE                    12960020
*                                                                       13020020
* THIS DSECT MAPS THE LOGICAL RECORD FOR A MACRO INSTRUCTION            13080020
*        OR MACRO PROTOTYPE OPERAND.                                    13140020
*                                                                       13200020
         COPY  JTEXT                                                    13260020
*                                                                       13320020
* THIS DSECT MAPS THE ERROR STACK ENTRY                                 13380020
*                                                                       13440020
ERRMESS  DSECT                                                          13500020
EMSGSVTY DS    C                        ERROR SEVERITY CODE             13560020
EMSGCODE DS    C                        ERROR NUMBER                    13620020
EMSGHL   EQU   *-EMSGSVTY                                               13680020
ENTRYLNG DS    C                        LENGTH, SNAPSHOT DATA           13740020
EMSGNTRY DS    CL8                      SNAPSHOT DATA                   13800020
*                                                                       13807020
*        MORE DISPLACEMENT EQUATES                                      13814020
*                                                                       13821020
D36      EQU   36                       DISPLACEMENT                    13828020
D44      EQU   44                       DISPLACEMENT                    13835020
D48      EQU   48                       DISPLACEMENT                    13842020
D256     EQU   256                      MAXIMUM MOVE LENGTH             13849020
         EJECT                                                          13860020
         COPY JERMSGCD                                                  13920020
         EJECT                                                          13980020
SAVMDVNP EQU   JDPASS                   SAVE AREA, MDV ADDRESS          14030020
SAVMDVLN EQU   JDPASS+D8                SAVE AREA, MDV LENGTH           14080020
SAVGDLNT EQU   JDPASS+D12               SAVE AREA GLOBAL DICT ALLOC     14130020
SAVOSDNP EQU   JDPASS+D16               SAVE AREA, OSRD ADDRESS         14180020
SAVOSDLN EQU   JDPASS+D24               SAVE AREA, OSRD LENGTH          14230020
SAVOVFPT EQU   JDPASS+D28               SAVE AREA, END OF FILE 1 ADDR   14280020
SAVOPTNP EQU   JDPASS+D36               SAVE AREA, OPSYN TABLE ADDRESS  14330020
SAVOPTLN EQU   JDPASS+D44               SAVE AREA, OPSYN TABLE LENGTH   14380020
SAVERRNP EQU   JDPASS+D48               SAVE AREA, ERROR BLOCK ADDRESS  14430020
GBLVCTEL EQU   3                        GLOBAL VECTOR ENTRY LENGTH      14480020
OPNDSTR  EQU   BIT7                     CHARACTER STRING PARAM FLAG     14530020
OPNDTRM  EQU   BIT6                     SELF-DEF TERM PARAM FLAG        14580020
OPNDORD  EQU   BIT5                     ORDINARY SYMBOL PARAM FLAG      14630020
OPNDOMT  EQU   BIT4                     OMITTED OPERAND PARAM FLAG      14680020
OPNDPRM  EQU   BIT3                     PASSED PARAMETER PARAM FLAG     14730020
OPNDSUB  EQU   BIT0                     SUBOPERAND PARAM FLAG           14780020
OPNDSUBF EQU   BIT2                     FIRST SUBOPERAND PARAM FLAG     14830020
OPNDSUBL EQU   BIT1                     LAST SUBOPERAND PARAM FLAG      14880020
MINRECSZ EQU   18                       MINIMUM I/O LENGTH              14930020
WORK1    EQU   R1                       SCRATCH REGISTER                14980020
WORKX    EQU   R1                       SCRATCH REGISTER                15030020
LOCTR    EQU   R2                       PTR TO NEXT BYTE FOR ALLOCAT    15080020
MDVPTR   EQU   R2                       PTR TO MDV ENTRY                15130020
PTPTR    EQU   R2                       PTR TO NEXT PARAM TBL SLOT      15180020
KEYPTR   EQU   R2                       PTR TO KEYWORD IN PARAM RECORD  15230020
KCPTR    EQU   R2                       PTR TO KEYWORD CHAIN ENTRY      15280020
SKDCTPTR EQU   R2                       PTR TO START OF SKEL DICT       15330020
PARAMPTR EQU   R2                       PTR TO PARAM TBL ENTRY          15380020
EPTR     EQU   R3                       PTR TO ERROR RCD IN ERROR BLOCK 15430020
PVEPTR   EQU   R3                       PTR TO NEXT PARAM VECTOR SLOT   15480020
KEYLEN   EQU   R3                       KEYWORD LENGTH REGISTER         15530020
SETPTR   EQU   R3                       PTR TO GBL/LCL DICT ENTRY, LIMB 15580020
OVLPTR   EQU   R4                       PTR TO ALLOC ADJUSTED FOR OVRLP 15630020
KEYCHAIN EQU   R4                       PTR TO KEYWORD CHAIN ENTRY      15680020
DICTPTR  EQU   R4                       PTR TO GBL/LCL DICT ENTRY, ROOT 15730020
VALLEN   EQU   R5                       PARAM VALUE LENGTH REGISTER     15780020
SETLEN   EQU   R5                       SETC VALUE LENGTH REGISTER      15830020
TXTPTR   EQU   R6                       PTR TO PARAM RECORD HDR DATA    15880020
RETURN   EQU   R9                       LINKAGE REGISTER                15930020
RTNLNK   EQU   R9                       LINKAGE REGISTER                15980020
PARMA    EQU   R10                      PARAMETER PASSAGE REGISTER      16030020
PARMB    EQU   R11                      PARAMETER PASSAGE REGISTER      16080020
WORKA    EQU   R14                      SCRATCH REGISTER                16130020
WORK2    EQU   R14                      SCRATCH REGISTER                16180020
WORKY    EQU   R14                      SCRATCH REGISTER                16230020
PAIRE    EQU   R14                      EVEN REGISTER OF PAIR           16280020
WORKB    EQU   R15                      SCRATCH REGISTER                16330020
WORK3    EQU   R15                      SCRATCH REGISTER                16380020
WORKZ    EQU   R15                      SCRATCH REGISTER                16430020
PAIRO    EQU   R15                      ODD REGISTER OF PAIR            16480020
         EJECT                                                          17160020
         JCSECT (X3N00)                                                 17220020
* VS1 RELEASE 2 CHANGES                                                 17270020
*C374400,378200                                                 OX00049 17270420
*A377900-378000                                                 OX00049 17270820
*A751700-751700                                                 OX00218 17272020
*A754700-754784                                                 OX00218 17274020
* VS1 RELEASE 4 CHANGES                                                 17276002
*A568000                                                        OY01298 17278002
         JMODID                                                         17280020
*DICTIONARY ENTRY ROUTINE - ALL CALLS TO THE GENERATE PHASE           * 17340020
*   DICTIONARY ROUTINES ENTER THROUGH THE FOLLOWING BRANCH TABLE      * 17400020
*   WHICH PROVIDES THE LINK TO THE REQUIRED ROUTINE.                  * 17460020
*                                                                     * 17520020
         USING DICTENTR,R12                                             17580020
DICTENTR B     DICTSAVE                 LINK TO ENTRY/SAVE ROUTINE      17640020
         DC    AL2(PHASENTR-DICTENTR)   DISPL TO PHASENTR ROUTINE       17700020
         DC    AL2(MACRCALL-DICTENTR)   DISPL TO MACRCALL ROUTINE       17760020
         DC    AL2(CALLEND-DICTENTR)    DISPL TO CALLEND  ROUTINE       17820020
         DC    AL2(MACRKWRD-DICTENTR)   DISPL TO MACRKWRD ROUTINE       17880020
         DC    AL2(MACRPOST-DICTENTR)   DISPL TO MACRPOST ROUTINE       17940020
         DC    AL2(PROTOKWD-DICTENTR)   DISPL TO PROTOKWD ROUTINE       18000020
         DC    AL2(PROTOEND-DICTENTR)   DISPL TO PROTOEND ROUTINE       18060020
         DC    AL2(GBLDICTR-DICTENTR)   DISPL TO GBLDICTR ROUTINE       18120020
         DC    AL2(GBLDICTS-DICTENTR)   DISPL TO GBLDICTS ROUTINE       18180020
         DC    AL2(LCLDICTR-DICTENTR)   DISPL TO LCLDICTR ROUTINE       18240020
         DC    AL2(LCLDICTS-DICTENTR)   DISPL TO LCLDICTS ROUTINE       18300020
         DC    AL2(PARMTBLR-DICTENTR)   DISPL TO PARMTBLR ROUTINE       18360020
         DC    AL2(SEQSYMBR-DICTENTR)   DISPL TO SEQSYMBR ROUTINE       18420020
         DC    AL2(ORDSYMBR-DICTENTR)   DISPL TO ORDSYMBR ROUTINE       18480020
         DC    AL2(MACRFINI-DICTENTR)   DISPL TO MACRFINI ROUTINE       18540020
         SPACE 5                                                        18600020
         JENTRY (X3N01=DICTENTR)                                        18660020
         EJECT                                                          18720020
*                                                                       18780020
* THIS SUBROUTINE IS USED BY ALL THE DICTIONARY ROUTINES TO SAVE        18840020
*        REGISTERS AND ESTABLISH ADDRESSABILITY.                        18900020
*                                                                       18960020
DICTSAVE STM   R2,R9,REGSTACK           PRESERVE CALLERS REGISTERS      19020020
         LR    R8,R12                   SET UP DICT RTN BASE ADDR       19080020
         USING DICTENTR,R8                                              19140020
         DROP  R12                                                      19200020
         LH    R9,ENTRYNDX              PICK UP ENTRY PT FLAG           19260020
         LH    R9,DICTENTR+D4(R9)       GET DISPL TO REQ'D RTN          19320020
         B     DICTENTR(R9)             ENTER DICTIONARY SUBRTN         19380020
         SPACE 10                                                       19440020
*                                                                       19500020
* THIS ROUTINE IS THE COMMON EXIT POINT FOR THE DICTIONARY ROUTINES.    19560020
*                                                                       19620020
DICTEXIT LM    R2,R9,REGSTACK           RESTORE CALLERS REGISTERS       19680020
         BR    R9                       RETURN TO CALLER                19740020
         EJECT                                                          19800020
*PHASENTR - THIS ROUTINE IS CALLED AT THE START OF THE GENERATE       * 19860020
*   PHASE. ITS FUNCTION IS TO FETCH THE MACRO DEFINITION VECTOR,      * 19920020
*   GET THE SPACE FOR AND INITIALIZE THE GLOBAL DICTIONARY, FETCH     * 19980020
*   THE ORDINARY SYMBOL REFERENCE DICTIONARY, FETCH THE SKELETON      * 20040020
*   DICTIONARY FOR OPEN CODE, AND GET THE SPACE FOR AND INITIALIZE    * 20100020
*   THE LOCAL DICTIONARY FOR OPEN CODE.                               * 20160020
*        INPUT - NONE.                                                * 20220020
*        OUTPUT - NONE.                                               * 20280020
*                                                                     * 20340020
PHASENTR EQU   *                                                        20400020
         XC    DICTCOMS(DICTCOME-DICTCOMS),DICTCOMS CLEAR COMMON AREA   20460020
         L     R11,=A(X'1FFFF0')        MAX CORE REQUEST IN DW          20520020
         JGETCORE MINDBL=750,MAXDBL=(R11) GET FREE SPACE                20580020
         ST    R10,FREESTRT             SAVE START PTR                  20640020
         AR    R11,R10                  DETERMINE END PTR               20700020
         ST    R11,FREEEND              SAVE END PTR                    20760020
         ST    R11,SPACEAH              SET UP FREE AREA END FIRST      20820020
         LR    LOCTR,R10                SET UP MAIN ALLOCATION PTR      20880020
         MVC   PIOPARMB,SAVMDVLN        GET LENGTH OF MDV               20940020
         ST    LOCTR,PIOPARMA           SET UP TO READ IN MDV           21000020
         L     WORK1,PIOPARMB           PICK UP MOV LENGTH              21060020
         MVC   JFWORD1,SAVGDLNT         GET GLOBAL DICT SIZE            21120020
         A     WORK1,JFWORD1            ADD IN FOR CALCULATION          21180020
         MVC   JFWORD1,SAVOSDLN         GET ORD SYMB REF DICT SIZE      21240020
         A     WORK1,JFWORD1            ADD IN FOR CALCULATION          21300020
         MVC   JFWORD1,SAVOPTLN         PICK UP OPSYN TABLE LENGTH      21360020
         A     WORK1,JFWORD1            ADD IN FOR CALCULATION          21420020
         AR    WORK1,LOCTR              DEVELOP OVERLAP POINTER         21480020
         CL    WORK1,FREEEND            LOOK FOR OVERLAP                21540020
         BNL   OVERLP4A                 BRANCH IF NO ROOM FOR GBL DICTS 21600020
         ST    LOCTR,MDVSTRT            SAVE AS MDV PTR                 21660020
         JPOINT FILE=FILE2,ADDR=SAVMDVNP,NEXT=READ POINT TO MDV         21720020
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD THIS FILE 21780020
         LA    R6,FILE2                 SET UP FILE POINTER             21840020
         BAL   RTNLNK,BUFREAD           GO GET MDV FROM FILE 2          21900020
         A     LOCTR,PIOPARMB           BUMP PTR PAST MDV               21960020
         CLC   SAVOPTLN(D4),=D'0'       SEE IF OPSYN TABLE REQ'D        22020020
         BZ    SKPOPSYN                 BRANCH IF NOT                   22080020
         ST    LOCTR,PIOPARMA           SET UP I/O AREA POINTER         22140020
         ST    LOCTR,OPSNSTRT           SET UP OPSYN TABLE POINTER      22170020
         MVC   PIOPARMB,SAVOPTLN        SET UP OPSYN TABLE LENGTH       22200020
         JPOINT FILE=FILE2,ADDR=SAVOPTNP,NEXT=READ POINT TO OPSYN TBL   22260020
         LH    R5,JMAXRL2               GET MAX RECD LNGT FOR FILE      22320020
         LA    R6,FILE2                 GET FILE INDICATOR              22380020
         BAL   RTNLNK,BUFREAD           GO FETCH OPSYN TABLE            22440020
         A     LOCTR,PIOPARMB           BUMP PTR PAST OPSYN TABLE       22500020
SKPOPSYN EQU   *                                                        22560020
         ST    LOCTR,GDSTRT             SAVE AS GBL DICT PTR            22620020
         MVC   JFWORD1,SAVGDLNT         GET LENGTH OF GBL DICT          22680020
         L     WORK1,JFWORD1            PICK IT UP FOR CLEARING DICT    22740020
         LR    WORKA,LOCTR              SET UP PTR TO AREA TO CLEAR     22800020
         LA    WORKB,D1(,WORKA)         SET UP DESTINATION POINTER      22860020
         MVI   D0(WORKA),J0             INSERT CHARACTER TO PROPAGATE   22920020
         BAL   RETURN,MOVLOP            GO CLEAR OUT AREA               22980020
         USING GSYSVALS,LOCTR                                           23040020
         L     WORK2,JSYSPARM           PICK UP SYSPARM PTR IN COMMON   23100020
         LTR   WORK2,WORK2              SEE IF SYSPARM SPECIFIED        23160020
         BZ    SKIPPARM                 BRANCH IF NOT                   23220020
         IC    WORK3,D0(,WORK2)         PICK UP SYSPARM LENGTH          23280020
         STC   WORK3,PARMLEN            INSERT IN SYSPARM ENTRY         23340020
         CLI   PARMLEN,L'PARMVAL        SEE IF LENGTH OVER 8            23400020
         BH    SKIPPARM                 IF YES, LEAVE POINTER ZERO      23460020
         BCTR  WORK3,D0                 OTHERWISE, GET MOVE LENGTH      23520020
         EX    WORK3,SYSPMOVE           MOVE SYSPARM VALUE INTO ENTRY   23580020
SKIPPARM EQU   *                                                        23640020
         LA    WORK3,L'JSYSTIME         GET LENGTH FOR SYSTIME ENTRY    23700020
         STC   WORK3,TIMELEN            INSERT IN DICTIONARY            23760020
         MVC   TIMEVAL(L'JSYSTIME),JSYSTIME INSERT SYSTIME VALUE        23820020
         LA    WORK3,L'JSYSDATE         GET LENGTH FOR SYSDATE ENTRY    23880020
         STC   WORK3,DATELEN            INSERT IN DICTIONARY            23940020
         MVC   DATEVAL(L'JSYSDATE),JSYSDATE  INSERT SYSDATE VALUE       24000020
         A     LOCTR,JFWORD1            BUMP PTR PAST GLOBAL DICT       24060020
         CLC   SAVOSDLN(D4),=D'0'       SEE IF OSRD LENGTH FOR READ     24120020
         BZ    SKPOSRD                  BRANCH IF YES                   24180020
         MVC   PIOPARMB,SAVOSDLN        PICK UP OSRD LENGTH FOR READ    24240020
         ST    LOCTR,PIOPARMA           SET UP TO READ IN OSRD          24300020
         ST    LOCTR,OSRDSTRT           SAVE AS OSRD PTR                24360020
         JPOINT FILE=FILE2,ADDR=SAVOSDNP,NEXT=READ POINT TO OSRD        24420020
         LH    R5,JMAXRL2               SET UP MAXIMUM RECORD THIS FILE 24480020
         LA    R6,FILE2                 SET UP FILE POINTER             24540020
         BAL   RTNLNK,BUFREAD           GO GET OSRD FROM FILE 2         24600020
         A     LOCTR,PIOPARMB           BUMP PTR PAST OSRD              24660020
SKPOSRD  EQU   *                                                        24720020
         ST    LOCTR,OVLYSTRT           SAVE AS DICT AREA START PTR     24780020
         BAL   RETURN,OVERLP4B          GO DUMP INTERLUDE ERRORS        25280020
         ST    LOCTR,SPACEAL            SET UP FREE SPACE LOW ADDR      25920020
         LCR   WORK1,LOCTR              GET COMPLEMENT FOR CALCULATE    25980020
         A     WORK1,SPACEAH            COMPUTE LENGTH OF FREE SPACE    26040020
         ST    WORK1,SPACEAE            SAVE FREE SPACE LENGTH          26100020
         ST    LOCTR,PIOPARMA           SET UP TO READ O.C. SKEL DICT   26160020
         L     PARMA,MDVSTRT            GET PTR TO OPEN CODE ENTRY      26220020
         USING MDVNTRY,PARMA                                            26280020
         CLC   MNPSD,=D'0'              SEE IF OPEN CODE OVERFLOWED     26300020
         BZ    OVERLP4F                 BRANCH IF IT DID                26320020
         MVC   PIOPARMB+(L'PIOPARMB-L'MSDL)(L'MSDL),MSDL               X26340020
               SET UP LENGTH OF O.C. SKELETON DICTIONARY                26400020
         L     R0,PIOPARMB              LENGTH OF SKEL DICTIONARY       26460020
         C     R0,SPACEAE               CHECK FOR SPACE OVERLAP         26479620
         BNL   OVERLP4C                 BRANCH IF OVERLAP FOUND         26520020
         LCR   R0,R0                    SUBTRACT LENGTH FROM            26570020
         A     R0,SPACEAE               FREE SPACE                      26572020
         ST    R0,SPACEAE                                               26574020
         ST    LOCTR,CURRDICT           SAVE AS CURRENT DICT PTR        26580020
         BAL   RETURN,DCTFETCH          GO TO BRING IN SKEL DICT        26640020
         USING SKDCTHDR,LOCTR                                           26700020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDLNG)(L'SKLDLNG),SKLDLNG        X26760020
               GET LOCAL DICTIONARY SIZE                                26820020
         L     R0,HIBYTE0               AND PICK IT UP                  26880020
         CL    R0,SPACEAE               CHECK FOR SPACE OVERLAP         26940020
         BNL   OVERLP4C                 BRANCH IF OVERLAP FOUND         27000020
         BAL   RETURN,PTRINIT           GO TO SET UP DICT POINTERS      27060020
         CLC   CURRLOCL,SPACEAL         SEE IF ANY LOCAL DICT ALLOCTD   27120020
         BNL   NOLCLOC                  BRANCH IF NOT                   27180020
         LR    WORK1,R0                 GET LCL DICT LENGTH FOR MOVLOP  27210020
         BAL   RETURN,LOCLINIT           INITIALIZE LOCAL DICTIONARY    27240020
NOLCLOC  EQU   *                                                        27300020
NOLOCAL  EQU   *                                                        27360020
         MVC   ACTRCNT,=F'4096'         INITIATE ACTR COUNT             27420020
         B     OVERLP4E                 BRANCH TO REPOSITION TEXT       27440020
OVERLP4A LA    RETURN,OVERLP4C          SET UP FOR FULSH EXIT,SEQUENCE  27460020
OVERLP4B ST    RETURN,REGSAVEB          PRESERVE LINK REGISTER          27480020
         JPOINT FILE=FILE2,NEXT=START   REPOSITION TEXT OUTPUT FILE     27500020
         MVC   D0(L'JNOTEVAL,LOCTR),SAVERRNP SET UP N/P CHAIN           27520020
         ST    LOCTR,PIOPARMA           SET UP I/O AREA POINTER         27540020
         MVC   PIOPARMB,=F'190'         SET UP ERROR BLOCK LENGTH       27560020
INLP     CLC   D0(L'JNOTEVAL,LOCTR),=D'0'   SEE IF ANY ERROR BLOCKS     27580020
         L     RETURN,REGSAVEB          RESTORE LINK REGISTER           27600020
         BZR   RETURN                   BRANCH IF NOT                   27620020
         JPOINT FILE=FILE1,ADDR=(LOCTR),NEXT=READ POINT TO ERROR BLOCK  27640020
         LH    R5,JMAXRL1               SET UP MAX RCD LENGTH FOR FILE  27660020
         LA    R6,FILE1                 SET UP FILE INDICATOR           27680020
         BAL   RTNLNK,BUFREAD           GO FETCH ERROR BLOCK            27700020
         LA    EPTR,L'JNOTEVAL(,LOCTR)  GET PTR TO ERROR RECORD         27720020
         USING JTEXT,EPTR                                               27740020
OUTLP    CLC   JTRLI,=H'0'              LOOK FOR END OF BLOCK FLAG      27760020
         BE    INLP                     BRANCH IF FOUND                 27780020
         JPUTM FILE=FILE2,ADDR=(EPTR)   PUT ERROR,RCD TO TXT FILE       27800020
         LA    EPTR,D36(,EPTR)          BUMP TO NEXT ERROR RECORD       27820020
         B     OUTLP                    GO BACK TO HANDLE NEXT ONE      27840020
OVERLP4C JPUTM FILE=FILE2,ADDR==AL1(D0,D12,JPSOP,JNOCNT,JTERROR,D0,D0,DX27860020
               0,D0,SEV89,ERR89,D0) PUT ERROR RECORD INTO TEXT FILE     27880020
         SET   INMACRO,OFF              INDICATE NOT IN MACRO NEST      27900020
OVERLP4D SET   FLUSH2,ON                INDICATE TEXT TO BE FLUSHED     27920020
OVERLP4E JPOINT FILE=FILE1,ADDR=SAVOVFPT,NEXT=WRITE                    X27940020
               POINT TO END OF FILE PRIOR TO REWIND                     27960020
         JPOINT FILE=FILE1,NEXT=START   REWIND TEXT FILE FOR GENERATOR  27980020
         B     DICTEXIT                 RETURN TO GENERATOR             28000020
OVERLP4F JPUTM FILE=FILE2,ADDR==AL1(D0,D12,JPSOP,JNOCNT,JTERROR,D0,D0,DX28020020
               0,D0,SEV133,ERR133,D0) PUT ERROR RECORD INTO TEXT FILE   28040020
         B     OVERLP4D                 GO SET FLUSH SWITCH,ETC.        28060020
         USING GSYSVALS,LOCTR                                           28140020
SYSPMOVE MVC   PARMVAL(D0),D1(WORK2)    EXECUTED SYSPARM MOVE           28200020
         DROP  LOCTR                                                    28260020
         DROP  EPTR                                                     28320020
         DROP  PARMA                                                    28380020
         EJECT                                                          28440020
*MACRCALL - THIS ROUTINE IS CALLED WHEN A MACRO INSTRUCTION IS        * 28500020
*   ENCOUNTERED. ITS FUNCTION IS TO PERFORM THE INITIALIZATION        * 28560020
*   REQUIRED TO BEGIN PARAMETER PROCESSING AND TO SUBSEQUENTLY        * 28620020
*   FETCH THE SKELETON DICTIONARY FOR THE MACRO DEFINITION.           * 28680020
*        INPUT - A POINTER IN R10 TO THE MACRO DEFINITION VECTOR      * 28740020
*                POINTER IN THE MACRO INSTRUCTION.                    * 28800020
*        OUTPUT - ON VALID MACRO CALL, R11 SET TO ZERO.               * 28860020
*                 ON UNDEFINED OP CODE, R11,SET TO VALUE INDICATING   * 28920020
*                 REASON FOR NON-DEFINITION.                          * 28980020
*                                                                     * 29040020
MACRCALL EQU   *                                                        29100020
         USING MCRCAL,PARMA                                             29160020
         MVC   HIBYTE0+(L'HIBYTE0-L'MDVPNT)(L'MDVPNT),MDVPNT           X29220020
               SAVE MDV PTR FROM TEXT FOR CURRENT AND LATER USE         29280020
         L     MDVPTR,MDVSTRT           GET BASE PTR TO MDV             29340020
         A     MDVPTR,HIBYTE0           DEVELOP PTR TO PROPER MDV SLOT  29400020
         ST    MDVPTR,MDVPTRSV          SAVE THIS POINTER FOR LATER     29460020
         USING MDVNTRY,MDVPTR                                           29520020
         SR    PARMB,PARMB              CLEAR RTN REG. CALL ASSUMED OK  29580020
         CLC   MNPTXT,=D'0'             CHECK FOR INVALID OP CODE       29640020
         BZ    BADCALL                  IF INVALID, BRANCH              29700020
         MVC   PPARMCNT,=F'-1'          INITIALIZE POSITIONAL COUNT     29760020
         XC    PRMTBLDS(L'PRMTBLDS+L'PVECTDIS+L'KVECTDIS+L'KCHANPTR),PRX29820020
               MTBLDS INITIALIZE OTHER CRUCIAL PARAMETER PROCESS VALUES 29880020
         MVI   PRMSWTCH,J0              INITIALIZE PARAMETER SWITCHES   29940020
         B     DICTEXIT                 RETURN                          30000020
BADCALL  IC    PARMB,MSDL+(L'MSDL-D1)   PICK UP FLAG FOR INVALID TYPE   30060020
         B     DICTEXIT                 RETURN                          30120020
         DROP  PARMA                                                    30180020
         DROP  MDVPTR                                                   30240020
         EJECT                                                          30300020
*CALLEND - THIS ROUTINE IS CALLED WHEN THE END-OF-PARAMETERS RECORD   * 30360020
*   IS ENCOUNTERED FOLLOWING A MACRO INSTRUCTION. ITS FUNCTION IS     * 30420020
*   TO NOTE AND SAVE THE TEXT RESUMPTION POINT FOR THE CURRENT TEXT   * 30480020
*   SEGMENT AND TO POSITION THE TEXT FILE TO THE START OF THE MACRO   * 30540020
*   DEFINITION TEXT SEGMENT.                                          * 30600020
*        INPUT - NONE.                                                * 30660020
*        OUTPUT - NONE.                                               * 30720020
*                                                                     * 30780020
CALLEND  EQU   *                                                        30840020
         JNOTE FILE=FILE1               NOTE TEXT FILE AT END OF CALL   30900020
         MVC   NOTESAVE,JNOTEVAL        SAVE N/P  TEMPORARILY           30960020
         L     MDVPTR,MDVPTRSV          GET PTR TO MDV ENTRY CALLED     31020020
         USING MDVNTRY,MDVPTR                                           31080020
         JPOINT FILE=FILE1,ADDR=MNPTXT,NEXT=GET POINT TO START OF TEXT  31140020
         B     DICTEXIT                 RETURN                          31200020
         DROP  MDVPTR                                                   31260020
         EJECT                                                          31320020
*MACRKWRD - THIS ROUTINE IS CALLED WHEN A KEYWORD PARAMETER RECORD    * 31380020
*   IS ENCOUNTERED FOLLOWING A MACRO INSTRUCTION. ITS FUNCTION IS     * 31440020
*   TO ADD THE PARAMETER VALUE TO THE KEYWORD PARAMETER CHAIN IN      * 31500020
*   PARAMETER TABLE.                                                  * 31560020
*        INPUT - A POINTER IN R10 TO THE PARAMETER RECORD.            * 31620020
*              - A POINTER IN R11 TO THE PARAMETER VALUE LENGTH       * 31680020
*                ( 1 BYTE) FOLLOWED BY THE PARAMETER VALUE CHARACTER  * 31740020
*                STRING (1-255 BYTES).                                  31800020
*        OUTPUT - NONE.                                               * 31860020
*                                                                     * 31920020
MACRKWRD EQU   *                                                        31980020
         SET   KEYFLG,ON                INDICATE KEYWORD PARAMETER      32040020
         L     PTPTR,PRMTBLAD           GET PTR TO BASE OF PARAM TABLE  32100020
         A     PTPTR,PRMTBLDS           GET PTR TO NEXT PARAM SLOT      32160020
         L     PVEPTR,PVECTPTR          GET PTR TO BASE OF POSIT VECTR  32220020
         S     PVEPTR,PVECTDIS          GET PTR TO END OF VECTOR        32280020
         S     PVEPTR,KVECTDIS          ALLOW FOR KEYWORDS UP TO HERE   32340020
         LR    OVLPTR,PTPTR             SET UP PTR FOR OVERLAP CHECK    32400020
         SR    VALLEN,VALLEN            CLEAR KEYWORD/VALUE LENGTH      32460020
         USING JTEXT,PARMA                                              32520020
         LH    TXTPTR,JTOPP             GET DISPL TO OPERAND FIELD      32580020
         AR    TXTPTR,PARMA             GET PTR TO OPERAND FIELD        32640020
         SH    TXTPTR,=H'5'              BACK UP TO START OF HEADER     32700020
         TM    D0(TXTPTR),OPNDSUB+OPNDSUBF BYPASS KEYWORD ENTRY IF NOT  32760020
         BM    MP0                      OPERAND OR FIRST SUBOPERAND     32820020
MK1      LA    WORKA,D5(,TXTPTR)        GET PTR TO OPERAND FIELD        32880020
         IC    VALLEN,D1(,WORKA)        GET KEYWORD LENGTH              32940020
         LA    OVLPTR,D5(VALLEN,OVLPTR) MAKE OVERLAP CALCULATION        33000020
         CLR   OVLPTR,PVEPTR            AND CHECK FOR OVERLAP           33060020
         BH    OVERLAP1                 BRANCH IF PARAM WON'T FIT       33120020
         MVC   D0(D4,PTPTR),KCHANPTR    PUT KEYWORD CHAIN PTR IN TBL    33180020
         LA    PTPTR,D0(,PTPTR)         MAKE FIRST BYTE ZERO            33230020
         ST    PTPTR,KCHANPTR           UPDATE KEYWORD CHAIN PTR        33420020
         EX    VALLEN,KEYMOVE           PUT KEYWORD LEN,KEYWORD IN TBL  33480020
         LA    PTPTR,D5(VALLEN,PTPTR)   UPDATE PARAMETER TABLE PTR      33540020
         SR    VALLEN,VALLEN            INSURE ZERO LENGTH REG          33570020
         B     MP0                      CONTINUE AS POSITIONAL PARAM    33600020
KEYMOVE  MVC   D4(D0,PTPTR),D1(WORKA)   EXECUTED KEYWORD MOVE           33660020
         DROP  PARMA                                                    33720020
         EJECT                                                          33780020
*MACRPOST - THIS ROUTINE IS CALLED WHEN A POSITIONAL PARAMETER        * 33840020
*   RECORD IS ENCOUNTERED FOLLOWING A MACRO INSTRUCTION. ITS FUNCTION * 33900020
*   IS TO ADD THE PARAMETER VALUE TO THE PARAMETER TABLE AND TO       * 33960020
*   MAKE AN ENTRY IN THE POSITIONAL VECTOR.                           * 34020020
*        INPUT - A POINTER IN R10 TO THE PARAMETER RECORD.            * 34080020
*              - A POINTER IN R11 TO THE PARAMETER VALUE LENGTH       * 34140020
*                ( 1 BYTE) FOLLOWED BY THE PARAMETER VALUE CHARACTER  * 34200020
*                STRING (1-255 BYTES).                                * 34260020
*        OUTPUT - NONE.                                               * 34320020
*                                                                     * 34380020
MACRPOST EQU   *                                                        34440020
         SET   KEYFLG,OFF               INDICATE POSITIONAL PARAM       34500020
         L     PTPTR,PRMTBLAD           GET PTR TO BASE OF PARAM TABLE  34560020
         A     PTPTR,PRMTBLDS           GET PTR TO NEXT PARAM SLOT      34620020
         L     PVEPTR,PVECTPTR          GET PTR TO BASE OF POSIT VECTR  34680020
         S     PVEPTR,PVECTDIS          GET PTR TO END OF VECTOR        34740020
         LR    OVLPTR,PTPTR             SET UP PTR FOR OVERLAP CHECK    34800020
         SR    VALLEN,VALLEN            CLEAR VALUE LENGTH              34860020
         USING JTEXT,PARMA                                              34920020
         LH    TXTPTR,JTOPP             GET DISPL TO OPERAND FIELD      34980020
         AR    TXTPTR,PARMA             GET PTR TO OPERAND FIELD        35040020
         SH    TXTPTR,=H'5'             BACK UP TO START OF HDR DATA    35100020
MP0      TM    D0(TXTPTR),OPNDSUB+OPNDSUBF LOOK FOR SUBOPERAND FLAGS    35160020
         BZ    MP2                      BRANCH IF NOT SUBOPERAND        35220020
         BM    MP3                      BRANCH IF NOT FIRST SUBOPER     35280020
         XC    SUBCNT(L'SUBCNT+L'SUBLEN+L'SUBVCTDS),SUBCNT             X35340020
               INITIALIZE SUBOPERAND PROCESSING VALUES                  35400020
MP2      ST    PTPTR,PRMPTRSV           SAVE POINTER TO STRT OF PARAM   35460020
MP3      TM    D0(TXTPTR),OPNDPRM       SEE IF PARAM PASSED FROM OUTER  35520020
         BO    MP3B                     BRANCH IF THE CASE              35580020
         TM    D0(TXTPTR),OPNDOMT       SEE IF OMITTED OPERAND. IF SO,  35640020
         BO    MP3A                     SKIP PICK UP OF VALUE LENGTH    35700020
         IC    VALLEN,D0(,PARMB)        PICK UP LENGTH OF PARAM VALUE   35760020
MP3A     LA    OVLPTR,D7(VALLEN,OVLPTR) MAKE OVERLAP CALCULATION        35850020
         CLR   OVLPTR,PVEPTR            SEE IF PARAMETER WILL FIT       35940020
         BH    OVERLAP2                 BRANCH IF NOT                   36000020
MP3B     TM    D0(TXTPTR),OPNDSUB+OPNDSUBF LOOK FOR SUBOPERAND FLAGS    36060020
         BZ    MP5                      BRANCH IF NOT SUBOPERAND        36120020
         BM    MP4                      BRANCH IF NOT FIRST SUBOPERAND  36180020
         LA    OVLPTR,D13(,OVLPTR)      DEVELOP POSSIBLE OVERLAP PTR    36240020
         CLR   OVLPTR,PVEPTR            CHECK IF OVERLAP MAY OCCUR      36300020
         BH    OVERLAP2                 BRANCH IF YES                   36360020
         MVC   D0(D13,PTPTR),=X'80000000000000000000000000'            X36420020
               PUT SUBLIST HEADER IN TO PARAM TABLE                     36480020
         LA    PTPTR,D13(,PTPTR)        ALLOW FOR SUBLIST HEADER        36540020
MP4      LR    WORKA,PVEPTR             GET POSIT VECTOR PTR FOR CALC   36600020
         S     WORKA,SUBVCTDS           DISPL TO END OF SUBLIST VECTOR  36660020
         SH    WORKA,=H'3'              ADJUST FOR ENTRY TO BE MADE     36720020
         LR    WORKB,PTPTR              GET PARAM TBL POINTER           36780020
         S     WORKB,PRMPTRSV           GET REL PTR TO SUBOPERAND       36840020
         ST    WORKB,HIBYTE0            SAVE COMPUTED DISPL             36900020
         MVC   D0(D3,WORKA),HIBYTE0+D1  INSERT IN SUBLIST VECTOR ENTRY  36960020
         LR    WORKB,PVEPTR             GET PTR TO PARAM VCTR END       37020020
         SR    WORKB,WORKA              GET NEW DISPL FOR SUBLST VCTR   37080020
         ST    WORKB,SUBVCTDS           SAVE DISPL FOR NEXT TIME        37140020
MP5      TM    D0(TXTPTR),OPNDPRM       SEE IF PARAM PASSED FROM OUTER  37200020
         BO    MP12                     BRANCH IF THE CASE              37260020
         TM    D0(TXTPTR),OPNDOMT       SEE IF OMITTED OPERAND          37320020
         BZ    MP6                      BRANCH IF NOT THE CASE          37380020
MPOMIT   MVC   D0(D8,PTPTR),=AL1(OPNDOMT,JO,J0,J1,J0,J0,X'60',J0)      X37440020
               SET ENTRY TYPE FLAG, ATTRIBUTES, AND LENGTH      OX00049 37500020
         LA    PTPTR,D8(,PTPTR)         ADJUST PARAM TBL POINTER        37560020
         B     MP9                      GO FINISH UP WITH THIS PARAM    37620020
MP6      TM    D0(TXTPTR),OPNDSTR       SEE IF CHARACTER STRING         37680020
         BZ    MP7                      BRANCH IF NOT THE CASE          37740020
         TM    D0(TXTPTR),OPNDORD       CHECK FOR COMPOS OPERAND        37750020
         BZ    MP6B                     BRANCH IF SIMPLE STRING         37760020
         MVI   D0(PTPTR),OPNDSTR        PUT IN STRING FLAG              37770020
         B     MP8A                     GO HANDLE AS ORD SYMBOL REFER   37780020
MP6B     LTR   VALLEN,VALLEN            IF NULL STRING          OX00049 37790020
         BZ    MPOMIT                   OMITTED OPERAND         OX00049 37800020
         MVC   D0(D7,PTPTR),=AL1(OPNDSTR,JU,J0,J1,J0,J0,X'60')  OX00049X37820020
               SET ENTRY TYPE FLAG AND ATTRIBUTES               OX00049 37860020
         LA    PTPTR,D7(,PTPTR)         ADJUST PARAM TBL POINTER        37890020
MP6A     EQU   *                                                        37920020
         EX    VALLEN,STRINGMV          INSERT VALUE LENGTH, VALUE      37980020
         LA    PTPTR,D1(VALLEN,PTPTR)   ADJUST PARAM TBL POINTER        38040020
         B     MP9                      GO FINISH UP WITH THIS PARAM    38100020
MP7      TM    D0(TXTPTR),OPNDTRM       SEE IF SELF-DEFINING TERM       38160020
         BZ    MP8                      BRANCH IF NOT THE CASE          38220020
         MVC   D0(D2,PTPTR),=AL1(OPNDTRM,JN) SET ENTRY TYPE FLAG,ATTRS  38280020
         MVC   D2(D4,PTPTR),D1(TXTPTR)  INSERT BINARY VALUE             38340020
         LA    PTPTR,D7(,PTPTR)         ADJUST PARAM TBL POINTER        38370020
         B     MP6A                     GO HANDLE VALUE                 38400020
MP8      MVI   D0(PTPTR),OPNDORD        INSERT TYPE FLAG (ORDINARY SYM) 38460020
         USING ORDREF,TXTPTR                                            38520020
MP8A     EQU   *                                                        38550020
         MVC   HIBYTE0+(L'HIBYTE0-L'ORDPNT)(L'ORDPNT),ORDPNT           X38580020
               PICK UP DICTIONARY POINTER FROM META TEXT                38640020
         L     WORKA,HIBYTE0            GET IT FOR POINTER CALCULATION  38700020
         CLC   OSRDSTRT,=D'0'           SEE IF ANY OSRD PRESENT         38720020
         BZ    MP8NG                    BRANCH IF NOT                   38740020
         A     WORKA,OSRDSTRT           DEVELOP PTR TO DICT ENTRY       38760020
         MVC   D1(D6,PTPTR),D0(WORKA)   PULL ACROSS ORDINARY SYMB ATTR  38820020
         LA    PTPTR,D7(,PTPTR)         ADJUST PARAM TBL POINTER        38850020
         B     MP6A                     GO HANDLE VALUE                 38880020
MP8NG    MVC   D1(D6,PTPTR),=AL1(JU,J0,J1,J0,J0,X'E0')   DEFAULT        38900020
         LA    PTPTR,D6(,PTPTR)         ADJUST PARAM TBL POINTER        38910020
         B     MP6A                     GO ON WITH PROCESS              38920020
MP9      TM    D0(TXTPTR),OPNDSUB       LOOK FOR SUBOPERAND FLAG        38940020
         BZ    MP10                     BRANCH IF NOT SUBOPERAND        39000020
         LH    WORKA,SUBCNT             GET CURRENT SUBOPERAND COUNT    39060020
         LA    WORKA,D1(,WORKA)         INCREMENT BY ONE                39120020
         STH   WORKA,SUBCNT             SAVE NEW COUNT                  39180020
         LH    WORKA,SUBLEN             GET CURRENT SUBLIST LENGTH      39240020
         AR    WORKA,VALLEN             INCREMENT BY SUBOPERAND LENGTH  39300020
         STH   WORKA,SUBLEN             SAVE NEW LENGTH                 39360020
         TM    D0(TXTPTR),OPNDSUBL      LOOK FOR LAST SUBOPER FLAG      39420020
         BZ    MP11                     BRANCH IF NOT LAST SUBOPER      39480020
         L     WORKA,PRMPTRSV           GET PTR TO SUBLIST HEADER       39540020
         MVC   D6(L'SUBCNT+L'SUBLEN,WORKA),SUBCNT INSERT SUBOPERAND    X39600020
               COUNT AND SUBLIST LENGTH IN HEADER DATA                  39660020
         MVC   D1(D5,WORKA),D14(WORKA)  INSERT ATTRIBUTES OF FIRST     X39720020
               SUBOPERAND AS ATTRIBUTES OF SUBLIST                      39780020
         LR    WORKB,PTPTR              GET PTR TO PARAM TABLE          39840020
         SR    WORKB,WORKA              GET LENGTH OF SUBLIST ENTRY     39900020
         A     WORKB,SUBVCTDS           GET DISPL TO SUBLIST VCTR STRT  39960020
         ST    WORKB,JFWORD1            SAVE DISPL TO SUBLIST VECTOR    40020020
         MVC   D10(D3,WORKA),JFWORD1+D1 INSERT INTO SUBLIST HEADER      40080020
         L     WORK1,SUBVCTDS           GET LENGTH OF SUBLIST VECTOR    40140020
         LR    WORKA,PVEPTR             GET PTR TO END OF SUBLST VCTR   40200020
         SR    WORKA,WORK1              GET PTR TO STRT OF SUBLST VCTR  40260020
         LR    WORKB,PTPTR              GET PTR TO PARAM TABLE          40320020
         BAL   RETURN,MOVLOP            GO MERGE VECTOR WITH SUBLIST    40380020
         A     PTPTR,SUBVCTDS           ADJUST PTR FOR SUBLIST VECTOR   40440020
MP10     GOIF  KEYFLG,ON=MP11           BRANCH IF KEYWORD OPERAND       40500020
         L     WORKA,PRMPTRSV           GET PTR TO PARAMETER START      40560020
         S     WORKA,PRMTBLAD           GET DISPL TO PARAM IN TABLE     40620020
         SH    PVEPTR,=H'3'             GET PTR TO NEXT VECTOR ENTRY    40680020
         ST    WORKA,HIBYTE0            SAVE DISPL TO PARAM ENTRY       40740020
         MVC   D0(D3,PVEPTR),HIBYTE0+D1 AND PUT INTO VECTOR ENTRY       40800020
         L     WORKA,PVECTPTR           PICK UP PARAM VECTOR BASE       40860020
         SR    WORKA,PVEPTR             GET DISPL TO NEW END OF VECTOR  40920020
         ST    WORKA,PVECTDIS           SAVE DISPLACEMENT               40980020
         L     WORKA,PPARMCNT           GET CURRENT POSIT PARAM COUNT   41040020
         LA    WORKA,D1(,WORKA)         INCREMENT BY ONE                41100020
         ST    WORKA,PPARMCNT           SAVE NEW COUNT                  41160020
MP11     S     PTPTR,PRMTBLAD           GET NEW PARAM TBL LENGTH        41220020
         ST    PTPTR,PRMTBLDS           SAVE DISPL                      41280020
         B     DICTEXIT                 RETURN                          41340020
MP12     GOIF  PASSPARM,ON=MP12A        GO TO HANDLE PARAM AS PARAM     41350020
         IC    VALLEN,D0(,PARMB)        PICK UP LENGTH OF PARAM STRING  41360020
         LA    OVLPTR,D7(VALLEN,OVLPTR) CALCULATE OVERLAP POINTER       41370020
         CLR   OVLPTR,PVEPTR            SEE IF OVERLAP OCCURRED         41380020
         BH    OVERLAP2                 BRANCH IF SO. OTHERWISE,        41390020
         B     MP6B                     HANDLE PARAM AS STRING          41400020
MP12A    EQU   *                                                        41410020
         TM    D0(PARMB),OPNDSUB        SEE IF PASSING A SUBLIST        41460020
         BZ    MP13                     BRANCH IF NOT SUBLIST           41520020
         MVC   HIBYTE0+D1(D3),D10(PARMB) PICK UP PTR TO SUBLIST VCTR    41580020
         L     WORK1,HIBYTE0            GET IT AS SUBLIST LENGTH        41640020
         B     MP13A                    GO CHECK FOR OVERLAP CONDITION  41760020
MP13     IC    VALLEN,D7(,PARMB)        PICK UP VALUE LENGTH            41820020
         LA    WORK1,D8(,VALLEN)        GET WHOLE PARAMETER LENGTH      41880020
MP13A    LA    OVLPTR,D3(WORK1,OVLPTR)  DEVELOP OVERLAP PTR             41940020
         CLR   OVLPTR,PVEPTR            CHECK FOR POSSIBLE OVERLAP      42000020
         BH    OVERLAP2                 BRANCH IF YES                   42060020
         LR    R0,WORK1                 PRESERVE PARAMETER LENGTH       42120020
         LR    WORKA,PARMB              GET PTR TO PARAMETER VALUE      42180020
         LR    WORKB,PTPTR              GET PTR TO PARAMETER TABLE      42240020
         BAL   RETURN,MOVLOP            GO TO PUT PARAM VALUE IN TABLE  42300020
         AR    PTPTR,R0                 ADJUST PTR FOR PARAM VALUE      42360020
         SET   PASSPARM,OFF             CLEAN UP PASSED PARAM SWITCH    42390020
         B     MP9                      GO FINISH UP WITH THIS PARAM    42420020
STRINGMV MVC   D0(D0,PTPTR),D0(PARMB)   EXECUTE PARM VALUE MOVE         42480020
OVERLAP1 EQU   *                                                        42540020
OVERLAP2 EQU   *                                                        42600020
         SET   (CALLING,NOCALL),FLIP    RESET SWITCHES FOR REST OF CALL 42660020
         SET   DEFLG,OFF                SET FLAG FOR DEFAULT OVERLAP    42720020
         BAL   R2,ERRRTN                GO TO LOG ERROR AND FIX COUNT   42780020
         B     DICTEXIT                 RETURN TO GENERATOR             42840020
         DROP  PARMA                                                    42900020
         DROP  TXTPTR                                                   42960020
         EJECT                                                          43020020
* PROTOKWD - THIS ROUTINE IS CALLED WHEN A KEYWORD PARAMETER RECORD   * 43080020
*   IS ENCOUNTERED FOLLOWING A PROTOTYPE STATEMENT. ITS FUNCTION IS   * 43140020
*   TO ADD THE DEFAULT PARAMETER VALUE TO THE KEYWORD PARAMETER       * 43200020
*   CHAIN IN THE PARAMETER TABLE IF THE KEYWORD PARAMETER WAS NOT     * 43260020
*   SPECIFIED ON THE MACRO INSTRUCTION. IT ALSO MAKES AN ENTRY IN     * 43320020
*   THE KEYWORD VECTOR.                                               * 43380020
*        INPUT - A POINTER IN R10 TO THE PARAMETER RECORD.            * 43440020
*              - A POINTER IN R11 TO THE PARAMETER VALUE LENGTH       * 43500020
*                ( 1 BYTE) FOLLOWED BY THE PARAMETER VALUE CHARACTER  * 43560020
*                STRING (1-255 BYTES).                                * 43620020
*        OUTPUT - NONE.                                               * 43680020
*                                                                     * 43740020
PROTOKWD EQU   *                                                        43800020
         USING JTEXT,PARMA                                              43860020
         LH    KEYPTR,JTOPP             GET DISPL TO OPERAND FIELD      43920020
         AR    KEYPTR,PARMA             GET PTR TO STRT OF OPRND FIELD  43980020
         GOIF  BYFLG,ON=PK8             BRANCH IF BYPASS FLAG ON        44040020
         GOIF  ENFLG,ON=PK7             BRANCH IF ENTRY FLAG ON         44100020
         SET   PREVDEF,OFF              INITIALIZE DUPLICATION SWITCH   44160020
         SR    KEYLEN,KEYLEN            CLEAR REG FOR KEYWORD LENGTH    44220020
         IC    KEYLEN,D1(,KEYPTR)       PICK UP KEYWORD LENGTH          44280020
         BCTR  KEYLEN,D0                DROP AMPERSAND                  44340020
         STC   KEYLEN,KEYLENSV          SAVE FOR LENGTH COMPARISON      44400020
         BCTR  KEYLEN,D0                GET MOVE LENGTH OF KEYWORD      44460020
         L     KEYCHAIN,KCHANPTR        PICK UP KEYWORD CHAIN POINTER   44520020
PK1      LTR   KEYCHAIN,KEYCHAIN        SEE IF CHAIN PTR ZERO (END)     44580020
         BZ    PK5                      BRANCH IF END TO ENTER DEFAULT  44640020
         TM    D0(KEYCHAIN),BIT0        LOOK FOR PROCESSED INDICATOR    44700020
         BO    PK2                      BRANCH IF ON TO GET NEXT ENTRY  44760020
         CLC   KEYLENSV,D4(KEYCHAIN)    COMPARE KEYWORD LENGTHS         44820020
         BNE   PK2                      BRANCH IF UNALIKE TO GET NEXT   44880020
         EX    KEYLEN,KEYCOMP           COMPARE KEYWORDS                44940020
         BE    PK3                      BRANCH IF IDENTICAL             45000020
PK2      MVC   HIBYTE0(D4),D0(KEYCHAIN) GET CHAIN PTR FROM ENTRY        45060020
         NI    HIBYTE0,BITFF-BIT0       STRIP OUT HIGH BIT IF THERE     45120020
         L     KEYCHAIN,HIBYTE0         MAKE IT THE NEW CHAIN POINTER   45180020
         B     PK1                      GO BACK TO CONTINUE SEARCH      45240020
PK3      GOIF  PREVDEF,ON=KDUPLERR      BRANCH IF MATCH ALREADY FOUND   45300020
         SET   PREVDEF,ON               INDICATE INITIAL MATCH          45360020
         LR    WORKX,KEYPTR             SET UP OPERAND FIELD PTR        45420020
         SH    WORKX,=H'5'              GET PTR TO START OF HEADER      45480020
         TM    D0(WORKX),OPNDSUB+OPNDSUBF+OPNDSUBL                     X45520020
               CHECK SUBOPERAND FLAGS                                   45560020
         BNM   PK4                      BRANCH IF NOT SUBOPERAND (NTH)  45600020
         SET   BYFLG,ON                 SET BYPASS FLAG ON              45660020
PK4      EQU   *                                                        45720020
         BAL   R9,KWDEND                GO TO FINISH KEYWORD ENTRY      46020020
         B     PK2                      GO BACK TO COMPLETE SCAN        46460020
PK5      GOIF  PREVDEF,ON=DICTEXIT      DONT ENTER DEFALT OF DUPLICATE  46500020
         LR    WORKX,KEYPTR             SET UP OPERAND FIELD PTR        46560020
         SH    WORKX,=H'5'              GET PTR TO START OF HEADER      46620020
         TM    D0(WORKX),OPNDSUB+OPNDSUBF+OPNDSUBL                     X46660020
               CHECK SUBOPERAND FLAGS                                   46700020
         BNM   PK6                      BRANCH IF NOT SUBOPERAND (NTH)  46740020
         SET   ENFLG,ON                 SET ENTRY FLAG ON               46800020
PK6      SET   DEFLG,ON                 INDICATE DEFAULT VALUE ASSGNMT  46860020
         LR    R12,R8                   SET UP DUMMY BASE ADDR          46920020
         MVC   RECURSTK(D32),REGSTACK   PRESERVE OUTER LEVEL REGISTERS  46980020
         LA    R11,D5(KEYLEN,KEYPTR)    GET PTR TO PARAM STRING         47040020
         MVI   NDXVAL,D6                SET UP FOR MACRKWRD ENTRY       47100020
         BALR  R9,R12                   MAKE RECURRSIVE ENTRY           47160020
         MVC   REGSTACK(D32),RECURSTK   RESTORE OUTER LEVEL REGISTERS   47220020
         GOIF  DEFLG,OFF=OVERLAP3       BRANCH IF OVERLAP OCCURRED      47280020
         GOIF  ENFLG,ON=DICTEXIT        FINISHED WITH SUBOPERAND        47320020
         B     PK7A                     GO TO MAKE VECTOR ENTRY         47400020
PK7      MVC   RECURSTK(D32),REGSTACK   PRESERVE OUTER LEVEL REGISTERS  47460020
         LR    R12,R8                   SET UP DUMMY BASE ADDR          47520020
         LA    R11,D1(,KEYPTR)          GET PTR TO PARAM STRING         47580020
         MVI   NDXVAL,D6                SET UP FOR MACRKWRD ENTRY       47640020
         BALR  R9,R12                   MAKE RECURRSIVE ENTRY           47700020
         MVC   REGSTACK(D32),RECURSTK   RESTORE OUTER LEVEL REGISTERS   47760020
PK71     EQU   *                                                        47820020
         GOIF  DEFLG,OFF=OVERLAP3       BRANCH IF OVERLAP OCCURRED      47880020
         LR    WORKX,KEYPTR             SET UP OPERAND FIELD PTR        47940020
         SH    WORKX,=H'5'              GET PTR TO START OF HEADER      48000020
         TM    D0(WORKX),OPNDSUBL       LOOK FOR LAST SUBOPERAND FLAG   48060020
         BZ    DICTEXIT                 BRANCH IF NOT FOUND             48120020
         SET   ENFLG,OFF                TURN OFF ENTRY FLAG             48180020
PK7A     L     KEYCHAIN,KCHANPTR        PICK UP PTR TO KEYWORD ENTERED  48240020
         SR    KEYLEN,KEYLEN            CLEAR REG FOR KEYWORD LENGTH    48300020
         IC    KEYLEN,KEYLENSV          PICK UP SAVED KEYWORD LENGTH    48360020
         BAL   R9,KWDEND                GO TO FINISH KEYWORD ENTRY      48400020
         B     DICTEXIT                 DONE WITH THIS ENTRY            48440020
PK8      LR    WORKX,KEYPTR             SET UP OPERAND FIELD PTR        48480020
         SH    WORKX,=H'5'              GET PTR TO START OF HEADER      48540020
         TM    D0(WORKX),OPNDSUBL       LOOK FOR LAST SUBOPERAND FLAG   48600020
         BZ    DICTEXIT                 BRANCH IF NOT FOUND             48660020
         SET   BYFLG,OFF                TURN OFF BYPASS FLAG            48720020
         B     DICTEXIT                 RETURN                          48780020
KWDEND   L     WORKZ,PVECTPTR           GET PTR TO END OF PARAM VCTRS   48784020
         S     WORKZ,PVECTDIS           GET PTR TO START OF POSIT VCTR  48788020
         SH    WORKZ,=H'3'              GET PTR TO FIRST KEYWORD SLOT   48792020
         S     WORKZ,KVECTDIS           DISPLACE TO NEXT KEYWORD SLOT   48796020
         LA    WORKY,D6(KEYLEN,KEYCHAIN) GET PTR TO PARAM TBL ENTRY     48800020
         S     WORKY,PRMTBLAD           GET DISPL TO PARAM TBL ENTRY    48804020
         ST    WORKY,JFWORD1            SAVE DISPLACEMENT AND           48808020
         MVC   D0(D3,WORKZ),JFWORD1+D1  INSERT INTO KEYWORD VECTOR SLOT 48812020
         L     WORKY,KVECTDIS           PICK UP CURRENT KEYWORD VECTOR  48816020
         AH    WORKY,=H'3'              LENGTH, ADJUST FOR NEW PARAM,   48820020
         ST    WORKY,KVECTDIS           AND SAVE ADJUSTED LENGTH        48824020
         OI    D0(KEYCHAIN),BIT0        INDICATE KEYWORD ENTRY PROCESSD 48828020
         BR    R9                       RETURN TO CALLER                48832020
KEYCOMP  CLC   D5(D0,KEYCHAIN),D3(KEYPTR) EXECUTED KEYWORD COMPARE      48862020
KDUPLERR L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    48900020
         JEXTRN (X3A02=LOGERR01)                                        48960020
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          49020020
         DC    AL1(SEV91,ERR91)         ERROR PARAMETERS                49080020
         L     WORKX,ESTKNDX            PICK UP ERROR STACK POINTER     49140020
         MVC   D0(D8,WORKX),=8AL1(JBLANK) INSERT NAME PADDING           49200020
         IC    WORKY,D4(,KEYCHAIN)      PICK UP KEYWORD LENGTH          49260020
         BCTR  WORKX,D0                 BACK UP TO LAST ENTRY           49320020
         EX    WORKY,KEYDUPMV          INSERT KEYWORD IN MESSAGE        49380020
         LA    WORKX,D9(,WORKX)         ADJUST ERROR STACK POINTER      49440020
         ST    WORKX,ESTKNDX            SAVE ERROR STACK POINTER        49500020
         L     R15,TXTOUT               PICK UP PTR TO LAST TEXT RCD    49560020
         USING JTEXT,R15                                                49620020
         SET   JERR,ON                  INDICATE AN ERROR FOLLOWS       49680020
         OI    D0(KEYCHAIN),BIT0        INDICATE KEYWORD ENTRY PROCESSD 49720020
         B     PK2                      GO BACK FOR FURTHER SCAN        49760020
KEYDUPMV MVC   D0(D0,WORKX),D4(KEYCHAIN) EXECUTED MOVE OF DUPL KEYWRD   49810020
         DROP  PARMA                                                    49860020
         DROP  R15                                                      49920020
         EJECT                                                          49980020
*PROTOEND - THIS ROUTINE IS CALLED WHEN THE END-OF-PARAMETERS RECORD  * 50040020
*   IS ENCOUNTERED FOLLOWING A PROTOTYPE STATEMENT. ITS FUNCTION IS   * 50100020
*   TO CHECK FOR AND FLAG UNDECLARED KEYWORD PARAMETERS, TO COMPLETE  * 50160020
*   THE PARAMETER PROCESSING AND TO MERGE THE PARAMETER VECTORS       * 50220020
*   AND THE PARAMETER TABLE INTO THE MACRO PARAMETER WORK AREA, TO    * 50280020
*   ALLOCATE THE SPACE FOR AND FETCH THE SKELETON DICTIONARY FOR      * 50340020
*   THE MACRO DEFINITION, AND TO ALLOCATE THE SPACE FOR AND           * 50400020
*   INITIALIZE THE LOCAL DICTIONARY FOR THE MACRO DEFINITION. IF      * 50460020
*   NECESSARY TO GET THE SPACE FOR THE DICTIONARY BEING BUILT, THE    * 50520020
*   DICTIONARY(S) FOR THE HIGHER LEVEL TEXT SEGMENT(S) ARE SAVED      * 50580020
*   ON A WORKFILE.                                                    * 50640020
*        INPUT - NONE.                                                * 50700020
*        OUTPUT - NONE.                                               * 50760020
*                                                                     * 50820020
PROTOEND EQU   *                                                        50880020
         L     KCPTR,KCHANPTR           PICK UP KEYWORD CHAIN PTR       50940020
PE0      LTR   KCPTR,KCPTR              SEE IF END OF CHAIN INDICATED   51000020
         BZ    PE2                      BRANCH IF YES                   51060020
         TM    D0(KCPTR),BIT0           SEE IF KEYWORD DEFINED          51120020
         BO    PE1                      BRANCH IF YES AND MATCH FOUND   51180020
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    51240020
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          51300020
         DC    AL1(SEV92,ERR92)         ERROR PARAMETERS                51360020
         L     WORKX,ESTKNDX            PICK UP ERROR STACK POINTER     51420020
         MVC   D0(D8,WORKX),=8AL1(JBLANK) INSERT NAME PADDING           51480020
         IC    WORKY,D4(,KCPTR)         PICK UP KEYWORD LENGTH          51540020
         BCTR  WORKX,D0                 BACK UP TO LAST ENTRY           51600020
         EX    WORKY,KEYUNDMV           INSERT KEYWORD IN MESSAGE       51660020
         LA    WORKX,D9(,WORKX)         ADJUST ERROR STACK POINTER      51720020
         ST    WORKX,ESTKNDX            SAVE ERROR STACK POINTER        51780020
         L     R15,TXTOUT               PICK UP PTR TO LAST TEXT RCD    51840020
         USING JTEXT,R15                                                51900020
         SET   JERR,ON                  INDICATE AN ERROR FOLLOWS       51960020
PE1      NI    D0(KCPTR),BITFF-BIT0     STRIP OFF FLAG BIT              52020020
         MVC   HIBYTE0(D4),D0(KCPTR)    GET CHAIN POINTER FROM ENTRY    52080020
         L     KCPTR,HIBYTE0            PICK UP PTR FOR NEXT ENTRY      52140020
         B     PE0                      GO BACK TO REPEAT PROCESS       52200020
PE2      EQU   *                                                        52260020
         L     WORK1,PVECTDIS           GET LENGTH OF POSITIONAL VCTR   52320020
         A     WORK1,KVECTDIS           GET LENGTH OF BOTH VECTORS      52380020
         LTR   WORK1,WORK1              SEE IF ANY VECTORS TO MOVE      52440020
         BZ    PE3                      IF NOT, SKIP MOVE               52500020
         ST    WORK1,KVECTDIS           PRESERVE LENGTH OF VECTORS      52560020
         L     WORKB,PRMTBLAD           GET PTR TO START OF PARAM TBL   52620020
         A     WORKB,PRMTBLDS           GET PTR TO END OF PARAM TBL     52680020
         L     WORKA,PVECTPTR           GET PTR TO END OF VECTORS       52740020
         SR    WORKA,WORK1              GET PTR TO START OF VECTORS     52800020
         BAL   RETURN,MOVLOP            GO MOVE PARAM VECTORS TO TABLE  52860020
PE3      EQU   *                                                        52920020
         JNOTE FILE=FILE1               KEEP PTR TO TEXT FILE           52980020
         MVC   SAVENOTE,JNOTEVAL        SAVE NOTE/POINT ADDR            53040020
         L     SKDCTPTR,CURRDICT        GET PTR TO CALLING LEVEL DICT   53100020
         USING SKDCTHDR,SKDCTPTR                                        53160020
         MVC   SKACTRV,ACTRCNT          SAVE CURRENT ACTR VALUE         53220020
         MVC   SKNOFSLS,NOFSYSLS        SAVE POSITIONAL PARAM COUNT     53280020
         ST    SKDCTPTR,ALTPTRSV        SAVE DICT PTR TEMPORARILY       53340020
         L     SKDCTPTR,SPACEAL         GET PTR TO STRT OF FREE AREA    53400020
         A     SKDCTPTR,PRMTBLDS        ALLOW FOR PARAMETER TABLE       53460020
         A     SKDCTPTR,KVECTDIS        ALLOW FOR PARAMETER VECTORS     53520020
         ST    SKDCTPTR,PIOPARMA        SET UP PTR FOR DICT SKEL FETCH  53580020
         L     PARMA,MDVPTRSV           GET PTR TO MDV ENTRY            53640020
         USING MDVNTRY,PARMA                                            53700020
         MVC   PIOPARMB+(L'PIOPARMB-L'MSDL)(L'MSDL),MSDL               X53760020
               SET UP SKEL DICT LENGTH                                  53820020
         L     R0,PRMTBLDS              LENGTH OF PARAMETERS TABLE      53880020
         A     R0,KVECTDIS              LENGTH OF PARAMETER VECTORS     53930020
         A     R0,PIOPARMB              LENGTH OF SKEL DICTIONARY       53932020
         C     R0,SPACEAE               CHECK FOR SPACE OVERLAP         53934020
         BNL   OVERLAP5                 BRANCH IF INSUFF SPACE          53940020
         LCR   R0,R0                    SUBTRACT LENGTH FROM            53990020
         A     R0,SPACEAE               FREE SPACE                      53992020
         ST    R0,SPACEAE                                               53994020
         BAL   RETURN,DCTFETCH          GO TO FETCH SKELETON DICT       54000020
         MVC   SKNPNLT,NOTESAVE         PUT TXT N/P IN SKEL DICT HDR    54060020
         MVC   SKKVADR,PVECTDIS+(L'PVECTDIS-L'SKKVADR) GET POSITIONAL  X54120020
               VECTOR LENGTH FOR HEADER                                 54180020
         MVC   SKADNLD,ALTPTRSV         SAVE PTR TO NEXT LEVEL DICT     54240020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDLNG)(L'SKLDLNG),SKLDLNG        X54270020
               GET LOCAL DICT LENGTH FROM DICT HEADER                   54300020
         L     R0,HIBYTE0               PICK UP LENGTH FOR INITIAL      54330020
         CL    R0,SPACEAE               SEE IF SPACE OVERLAP OCCURS     54360020
         BNL   OVERLAP5                 BRANCH ON OVERLAP               54480020
         ST    SKDCTPTR,CURRDICT        SET UP NEW CURRENT DICT PTR     54540020
         LR    WORK1,SKDCTPTR           GET PTR TO DICT AREA BASE       54580020
         S     WORK1,SPACEAL            COMPUTE PARAM TBL LENGTH        54620020
         ST    WORK1,HIBYTE0            SAVE TEMPORARILY AND INSERT     54660020
         MVC   SKMPADR,HIBYTE0+(L'HIBYTE0-L'SKMPADR) IN DICT HDR        54720020
         BAL   RETURN,PTRINIT           GO INITIALIZE DICT POINTERS     54780020
         CLC   CURRLOCL,SPACEAL         SEE IF LOCAL DICT LENGTH ZERO   54840020
         BE    NOLCLMD                  SKIP INITIALIZATION IF SO       54900020
         LR    WORK1,R0                 GET LOCAL LENGTH FOR MOVLOP     54930020
         BAL   RETURN,LOCLINIT           GO INITIZE LOCAL DICTIONARY    54960020
         L     WORK1,CURRLOCL           GET PTR TO LOCAL DICT BASE      55020020
         USING LSYSVALS,WORK1                                           55080020
         MVC   INDXVAL,SYSNDX           PUT SYSNDX VALUE IN LCL DICT    55140020
         IC    WORK3,SYSECTL            GET LENGTH OF SYSECT VALUE      55200020
         EX    WORK3,SECTMOVE           PUT SYSECT VALUE,LEN IN LCL DT  55260020
NOLCLMD  EQU   *                                                        55320020
         MVC   ACTRCNT,=F'4096'         INITIALIZE ACTR VALUE           55380020
         L     WORK2,PPARMCNT           PICK UP FINAL POSITIONAL COUNT  55440020
         LTR   WORK2,WORK2              SEE IF ANY WERE PRESENT         55500020
         BNM   GOODCNT                  BRANCH IF ONE OR MORE           55560020
         SR    WORK2,WORK2              SET COUNT TO ZERO               55620020
GOODCNT  STH   WORK2,NOFSYSLS           SAVE POSITIONAL COUNT FOR DICT  55680020
         JPOINT FILE=FILE1,ADDR=SAVENOTE,NEXT=GET REPOSITION TEXT       55740020
         JGETL FILE=FILE1               DUMMY GET ON TEXT FILE          55800020
         B     DICTEXIT                 RETURN                          55860020
SECTMOVE MVC   SECTLEN(D0),SYSECTL      EXECUTED SYSECT MOVE            55910020
KEYUNDMV MVC   D0(D0,WORKX),D4(KCPTR)   EXECUTED MOVE OF UNDEF KEYWORD  55960020
OVERLAP5 SET   CALLING,OFF              EFFECTIVELY ABORT CALL          56010020
         BAL   R2,ERRRTN                GO TO LOG OVERLAP ERROR         56040020
OVERLAP3 EQU   *                                                        56070020
         NI    EVALSW01,BITFF-(CALLING+NOCALL)                  OY01298 56080002
         JPOINT FILE=FILE1,ADDR=NOTESAVE,NEXT=GET REPOSITION TEXT FILE  56100020
         B     DICTEXIT                 EXIT                            56220020
         DROP  PARMA                                                    56280020
         DROP  SKDCTPTR                                                 56340020
         DROP  R15                                                      56400020
         EJECT                                                          56460020
*GBLDICTR/GBLDICTS - THIS ROUTINE IS CALLED WHEN THE VALUE OF A       * 56520020
*   GLOBAL VARIABLE IS TO BE SET OR IS REFERENCED. ITS FUNCTION       * 56580020
*   IS TO LOCATE THE APPROPRIATE ENTRY IN THE GLOBAL DICTIONARY       * 56640020
*   THROUGH THE GLOBAL VECTOR AND TO EITHER SET THE GLOBAL DICTIONARY * 56700020
*   ENTRY TO A SPECIFIED VALUE (ENTRY AT 'GBLDICTS') OR GET THE       * 56760020
*   VALUE OF THE GLOBAL DICTIONARY ENTRY FOR THE GENERATOR (ENTRY     * 56820020
*   AT 'GBLDICTR').                                                   * 56880020
*                           * ENTRY AT GBLDICTS *                     * 56940020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 57000020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 57060020
*                FOLLOWED BY THE EFFECTIVE SUBSCRIPT (2 BYTES)        * 57120020
*              - SETA VARIABLE, VALUE TO BE ASSIGNED IN R11           * 57180020
*                SETB VARIABLE, ZERO VALUE IN R11 TO SET VARIABLE OFF * 57240020
*                               NON-ZERO VALUE IN R11 TO SET VARIABLE * 57300020
*                                       ON                            * 57360020
*                SETC VARIABLE, POINTER TO CHARACTER STRING TO BE     * 57420020
*                                       ASSIGNED IN R11               * 57480020
*        OUTPUT - NONE.                                               * 57540020
*                           * ENTRY AT GBLDICTR *                     * 57600020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 57660020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 57720020
*                FOLLOWED BY THE EFFECTIVE SUBSCRIPT (2 BYTES)        * 57780020
*        OUTPUT - SETA VARIABLE, VALUE OF VARIABLE IN R11             * 57840020
*                 SETB VARIABLE, ZERO VALUE IN R11 IF VARIABLE OFF    * 57900020
*                                NON-ZERO VALUE IN R11 IF VARIABLE ON * 57960020
*                 SETC VARIABLE, POINTER TO CHARACTER STRING IN R11   * 58020020
*                                                                     * 58080020
GBLDICTR EQU   *                                                        58140020
         SET   REFFLAG,ON               INDICATE REFERENCE ENTRY        58200020
         B     GCOM                     CONTINUE AT GLOBAL COMMON       58260020
GBLDICTS EQU   *                                                        58320020
         SET   REFFLAG,OFF              INDICATE SET ENTRY              58380020
GCOM     EQU   *                                                        58440020
         SET   GBLCALL,ON               INDICATE GLOBAL ENTRY           58500020
         L     SETPTR,CURRGLBL          PICK UP CURRENT GBL VCTR PTR    58560020
         USING VREF,PARMA                                               58620020
         MVC   HIBYTE0+(L'HIBYTE0-L'VPNT)(L'VPNT),VPNT                 X58680020
               PICK UP PTR TO GBL VECTOR ENTRY FROM TEXT                58740020
         A     SETPTR,HIBYTE0           DEVELOP PTR TO GBL VECTOR ENTRY 58800020
         CLC   D0(GBLVCTEL,SETPTR),=X'FFFFFE' LOOK FOR GBL ERROR FLAG   58860020
         BE    GBLERR                   BRANCH IF FOUND                 58920020
         MVC   HIBYTE0+(L'HIBYTE0-GBLVCTEL)(GBLVCTEL),D0(SETPTR)       X58980020
               PICK UP PTR TO GBL DICT FROM GBL VECTR ENTRY             59040020
         L     SETPTR,HIBYTE0           SET IT UP AND ADD TO GBL        59100020
         A     SETPTR,GDSTRT            DICT BASE ADDR                  59160020
         B     ALLCOM                   GO TO COMMON HANDLING           59220020
GBLERR   GOIF  REFFLAG,ON=REFERR         DIVERGE ON REFERENCE OR SET    59280020
SETERR   EQU   *                                                        59340020
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    59400020
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          59460020
         DC    AL1(SEV131,ERR131)       ERROR PARAMETERS                59520020
         B     DICTEXIT                 RETURN                          59580020
REFERR   EQU   *                                                        59640020
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    59700020
         BALR  R9,R12                   MAKE ERROR STACK ENTRY          59760020
         DC    AL1(SEV132,ERR132)       ERROR PARAMETERS                59820020
DEADEXIT EQU   *                                                        59880020
         SR    R11,R11                  SET UP SETA/SETB DEFAULT        59940020
         CLI   VFLAG,JTMSVC             SET IF SETA OR SETB REFERENCE   60000020
         BL    DICTEXIT                 RETURN DIRECTLY IF SO           60060020
         LA    R11,=9X'00'              SET UP DEFAULT FOR SETC REFER   60120020
         B     DICTEXIT                 RETURN                          60180020
         DROP  PARMA                                                    60240020
         EJECT                                                          60300020
*LCLDICTR/LCLDICTS - THIS ROUTINE IS CALLED WHEN THE VALUE OF A       * 60360020
*   LOCAL VARIABLE IS TO BE SET OR IS REFERENCED. ITS FUNCTION        * 60420020
*   IS TO LOCATE THE APPROPRIATE ENTRY IN THE LOCAL DICTIONARY        * 60480020
*   AND TO EITHER SET THE LOCAL DICTIONARY ENTRY TO A SPECIFIED       * 60540020
*   VALUE (ENTRY A 'LCLDICTS') OR GET THE VALUE OF THE LOCAL          * 60600020
*   DICTIONARY ENTRY FOR THE GENERATOR (ENTRY AT 'LCLDICTR').         * 60660020
*                           * ENTRY AT LCLDICTS *                     * 60720020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 60780020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 60840020
*                FOLLOWED BY THE EFFECTIVE SUBSCRIPT (2 BYTES)        * 60900020
*              - SETA VARIABLE, VALUE TO BE ASSIGNED IN R11           * 60960020
*                SETB VARIABLE, ZERO VALUE IN R11 TO SET VARIABLE OFF * 61020020
*                               NON-ZERO VALUE IN R11 TO SET VARIABLE * 61080020
*                                       ON                            * 61140020
*                SETC VARIABLE, POINTER TO CHARACTER STRING TO BE     * 61200020
*                                       ASSIGNED IN R11               * 61260020
*        OUTPUT - NONE.                                               * 61320020
*                           * ENTRY AT LCLDICTR *                     * 61380020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 61440020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 61500020
*                FOLLOWED BY THE EFFECTIVE SUBSCRIPT (2 BYTES)        * 61560020
*        OUTPUT - SETA VARIABLE, VALUE OF VARIABLE IN R11             * 61620020
*                 SETB VARIABLE, ZERO VALUE IN R11 IF VARIABLE OFF    * 61680020
*                                NON-ZERO VALUE IN R11 IF VARIABLE ON * 61740020
*                 SETC VARIABLE, POINTER TO CHARACTER STRING IN R11   * 61800020
*                                                                     * 61860020
LCLDICTR EQU   *                                                        61920020
         SET   REFFLAG,ON               INDICATE REFERENCE ENTRY        61980020
         B     LCOM                     CONTINUE AT LOCAL COMMON        62040020
LCLDICTS EQU   *                                                        62100020
         SET   REFFLAG,OFF              INDICATE SET ENTRY              62160020
LCOM     EQU   *                                                        62220020
         SET   GBLCALL,OFF              INDICATE LOCAL ENTRY            62280020
         L     SETPTR,CURRLOCL          PICK UP CURRENT LCL DICT PTR    62340020
         USING VREF,PARMA                                               62400020
         MVC   HIBYTE0+(L'HIBYTE0-L'VPNT)(L'VPNT),VPNT                 X62460020
               PICK UP PTR TO LCL DICT ENTRY FROM TEXT                  62520020
         A     SETPTR,HIBYTE0           ADD TO DICT BASE                62580020
ALLCOM   EQU   *                                                        62640020
         TM    VSUBS,BIT0               SEE IF DEAD TERM                62700020
         BNZ   DEADTERM                 BRANCH IF SO                    62760020
         MVC   JHWORD1,VSUBS            GET SUBSCRIPT FIELD FROM TEXT   62820020
         LH    PAIRE,JHWORD1            PICK IT UP FOR CALCULATION      62880020
         LTR   PAIRE,PAIRE              TEST FOR ZERO SUBSCRIPT         62940020
         BZ    TYPETEST                 BRANCH IF ZERO                  63000020
         BCTR  PAIRE,D0                 ADJUST THE SUBSCRIPT            63060020
TYPETEST CLI   VFLAG,JTMSVB             TEST FOR SET VARIABLE TYPE      63120020
         BL    TYPEA                    BRANCH IF FLAG FOR A-TYPE       63180020
         CLI   VFLAG,JTMSVC             TEST FOR TYPE AGAIN             63240020
         BNL   TYPEC                    BRA CH IF FLAG FOR C-TYPE       63300020
         SRDL  PAIRE,D3                 DIVIDE SETB SUBSCRIPT BY 8      63360020
         SRL   PAIRO,D29                GET THE REMAINDER               63420020
         LA    WORK1,BIT0               INSERT A BIT FOR MASK GENERAT   63480020
         SRL   WORK1,D0(PAIRO)          SHIFT BY REMAINDER FOR MASK     63540020
         ALR   SETPTR,PAIRE             PUT PTR TO REQUIRED ENTRY       63600020
         USING SETBNTRY,SETPTR                                          63660020
         GOIF  REFFLAG,ON=REFSETB       BRANCH IF VARB REFERENCE        63720020
         LTR   PARMB,PARMB              TEST FOR CONDITION TO BE SET    63780020
         BZ    SETBOFF                  BRANCH IF SET TO ZERO           63840020
         EX    WORK1,SETONE             SET IT ON USING OR MASK         63900020
         B     DICTEXIT                 GO TO COMMON EXIT               63960020
SETBOFF  LA    WORK1,D1(,WORK1)         INCREMENT OR MASK BY ONE AND    64020020
         LCR   WORK1,WORK1              DEVELOP AND MASK                64080020
         EX    WORK1,SETZERO            SET IT OFF USING AND MASK       64140020
         B     DICTEXIT                 GO TO COMMON EXIT               64200020
REFSETB  EX    WORK1,TESTINST           TEST IF SETB ON                 64260020
         BO    SETBON                   BRANCH IF ON                    64320020
         SR    PARMB,PARMB              INDICATE SETB OFF TO GENERATOR  64380020
         B     DICTEXIT                 GO TO COMMON EXIT               64440020
SETBON   LA    PARMB,D1                 INDICATE SETB ON TO GENERATOR   64500020
         B     DICTEXIT                 GO TO COMMON EXIT               64560020
TESTINST TM    SETBVAL,D0               EXECUTED SETB VARB TEST         64620020
SETONE   OI    SETBVAL,D0               EXECUTED TURN-ON FOR SETB VARB  64680020
SETZERO  NI    SETBVAL,D0               EXECUTED TURN-OFF FOR SETB VARB 64740020
DEADTERM GOIF  REFFLAG,OFF=DICTEXIT,    IGNORE ATTEMPT TO SET VARIABLE X64800020
               ELSE=DEADEXIT            GET DEFAULT (NULL) ON REFERENCE 64860020
TYPEA    EQU   *                                                        64920020
         SLL   PAIRE,D2                 MULTIPLY SUBSCRIPT BY 4         64980020
         ALR   SETPTR,PAIRE             DEVELOP PTR TO ARRAY ENTRY      65040020
         USING SETANTRY,SETPTR                                          65100020
         GOIF  REFFLAG,ON=REFSETA       BRANCH IF VARB NOT TO BE SET    65160020
         ST    PARMB,JFWORD1            STORE VALUE FROM GENERATOR      65220020
         MVC   SETAVAL,JFWORD1          INSERT INTO DICT ENTRY          65280020
         B     DICTEXIT                 GO TO COMMON EXIT               65340020
REFSETA  MVC   JFWORD1,SETAVAL          GET DICT ENTRY                  65400020
         L     PARMB,JFWORD1            PICK IT UP FOR GENERATOR        65460020
         B     DICTEXIT                 GO TO COMMON EXIT               65520020
TYPEC    EQU   *                                                        65580020
         MH    PAIRE,=H'9'              MULTIPLY SUBSCRIPT BY 9         65640020
         ALR   SETPTR,PAIRE             DEVELOP PTR TO ARRAY ENTRY      65700020
         LR    DICTPTR,SETPTR           PRESERVE ORIGINAL DICT PTR      65760020
         CLI   D0(DICTPTR),J8           SEE IF SETC EXTENDED            65820020
         BNH   REFCHEK                  BRANCH IF NOT                   65880020
         MVC   HIBYTE0+D1(D3),D6(SETPTR) PICK UP PTR TO EXTENSION ENTRY 65940020
         GOIF  GBLCALL,ON=GETGBLEX      BRANCH IF GLOBAL EXTENSION      66000020
         L     SETPTR,HIBYTE0           PICK UP DISPLACEMENT            66060020
         A     SETPTR,CURRLOCL          COMPUTE PTR TO LOCAL EXTENSION  66120020
REFCHEK  GOIF  REFFLAG,ON=REFSETC       BRANCH IF SETC REFERENCE ONLY   66180020
         SR    PAIRO,PAIRO              CLEAR REG FOR EXTENSION CALCS   66240020
         IC    PAIRO,D0(,PARMB)         PICK UP STRING LENGTH           66300020
         L     PAIRE,=F'-16'            SET UP INITIAL MASK             66360020
         AR    PAIRO,PAIRO              SHIFT LENGTH LEFT ONE           66420020
         NR    PAIRO,PAIRE              DROP OFF LOW ORDER FOUR BITS    66480020
HSHLP    LR    SETLEN,PAIRO             PRESERVE CURRENT LENGTH         66540020
         AR    PAIRE,PAIRE              SHIFT MASK LEFT ONE             66600020
         NR    PAIRO,PAIRE              AND TO GET NEXT EXTENSION LNGT  66660020
         BNZ   HSHLP                    RETRY IF NOT LARGER THAN STRING 66720020
         CLI   D0(DICTPTR),J8           SEEIF ENTRY EXTENDED            66780020
         BH    EXTEST                   IF YES, LOOK AT EXTENSION       66840020
         CLI   D0(PARMB),J8             SEE IF SET VALUE WILL FIT       66900020
         BNH   PUTSET                   BRANCH IF IT WILL FIT           66960020
         B     TPCHEK                   GO TO EXTEND DICTIONARY ENTRY   67020020
EXTEST   CLC   D0(D1,DICTPTR),D0(PARMB) SEE IF SET VALUE WILL FIT       67080020
         BNL   PUTSET                   BRANCH IF IT WILL FIT           67140020
TPCHEK   EQU   *                                                        67200020
         GOIF  GBLCALL,ON=GBLEXTND      BRANCH IF GLOBAL EXTENSION REQD 67260020
         CL    SETLEN,SPACEAE           SEE IF ROOM IS AVAILABLE        67320020
         BNL   OVERLAP9                 BRANCH IF NOT                   67380020
         L     SETPTR,SPACEAL           SET UP PTR TO EXTENSION ENTRY   67440020
         LR    WORK1,SETPTR             SET UP EXTENSION BASE ADDR      67500020
         S     WORK1,CURRLOCL           COMPUTE DISPL TO LCL ENTRY      67560020
         ST    WORK1,JFWORD1            SAVE TEMPORARILY                67620020
         MVC   D6(D3,DICTPTR),JFWORD1+D1 INSERT IN ORIGINAL DICT ENTRY  67680020
         L     SKDCTPTR,CURRDICT        SET UP PTR TO DICT HDR          67740020
         USING SKDCTHDR,SKDCTPTR                                        67800020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDLNG)(L'SKLDLNG),SKLDLNG        X67860020
               PICK UP CURRENT LOCAL DICTIONARY LENGTH                  67920020
         L     WORK1,HIBYTE0            SET UP TO ADD EXTENSION ENTRY   67980020
         AR    WORK1,SETLEN             ADJUST FOR EXTENSION            68040020
         ST    WORK1,JFWORD1            SAVE TEMPORARILY AND REPLACE    68100020
         MVC   SKLDLNG,JFWORD1+(L'JFWORD1-L'SKLDLNG) IN DICT HEADER     68160020
         LA    WORK1,D0(SETLEN,SETPTR)  DEVELOP NEW LOW SPACE ADDR      68220020
         ST    WORK1,SPACEAL            SAVE NEW LOW SPACE ADDR         68280020
         L     WORK2,SPACEAH            PICK UP HIGH SPACE ADDR         68340020
         SR    WORK2,WORK1              SUBTRACT LOW SPACE ADDR         68400020
         ST    WORK2,SPACEAE            SAVE NEW SPACE EXTENT           68460020
SETMAX   BCTR  SETLEN,D0                GET EXTENSION LENGTH -1         68520020
         STC   SETLEN,D0(,DICTPTR)      PUT IN PRIMARY DICT ENTRY       68580020
         USING SETCNTRY,SETPTR                                          68640020
PUTSET   IC    SETLEN,D0(,PARMB)        PICK UP STRING LENGTH           68700020
         EX    SETLEN,MOVEINST          MOVE STRING INTO SETC ENTRY     68760020
         B     DICTEXIT                 RETURN                          68820020
GETGBLEX CLC   HIBYTE0,=D'0'            SEE IF EXTENDED SYSPARM         68880020
         BZ    GGX1                     BRANCH IF IT IS                 68940020
         L     SETPTR,FREEEND           PICK UP EXTENSION AREA BASE     69000020
         S     SETPTR,HIBYTE0           COMPUTE PTR TO GLOBAL EXTENSION 69060020
         B     REFCHEK                  RETURN TO MAIN FLOW             69120020
REFSETC  LR    PARMB,SETPTR             GET PTR FOR GENERATOR TO SETC   69180020
         B     DICTEXIT                 RETURN                          69240020
GGX1     L     PARMB,JSYSPARM           PICK UP SYSPARM POINTER         69300020
         B     DICTEXIT                 RETURN                          69360020
OVERLAP8 EQU   *                                                        69420020
OVERLAP9 EQU   *                                                        69480020
         BAL   R2,ERRRTN                 GO TO LOG ERROR AND FIX COUNT  69540020
         GOIF  FLUSH2,OFF=MACRPOP,      BRANCH IF NO OVERLAP FOUND     X69600020
               ELSE=DICTEXIT            IN OPEN CODE                    69660020
GBLEXTND CL    SETLEN,SPACEAE           SEE IF ENOUGH ROOM IN AREA      69720020
         BNL   OVERLAP8                 BRANCH IF NOT                   69780020
         L     SETPTR,SPACEAH           PICK UP AREA HIGH ADDRESS       69840020
         SR    SETPTR,SETLEN            ADJUST FOR STRING BYTES         69900020
         ST    SETPTR,SPACEAH           SAVE NEW AREA HIGH ADDRESS      69960020
         LR    WORK1,SETPTR             GET NEW AREA HIGH ADDRESS       70020020
         S     WORK1,SPACEAL            SUBTRACT AREA LOW ADDRESS       70080020
         ST    WORK1,SPACEAE            SAVE NEW AREA LENGTH            70140020
         L     WORK1,FREEEND            GET EXTENSION BASE PTR          70200020
         SR    WORK1,SETPTR             COMPUTE DISPLACEMENT            70260020
         ST    WORK1,JFWORD1            SAVE TEMPORARILY AND INSERT     70320020
         MVC   D6(D3,DICTPTR),JFWORD1+D1 IN ORIGINAL DICTIONARY ENTRY   70380020
         B     SETMAX                   GO TO COMPLETE SET              70440020
MOVEINST MVC   SETCLEN(D0),D0(PARMB)    EXECUTED ASSIGN FOR SETC VARB   70500020
         DROP  PARMA                                                    70560020
         DROP  SKDCTPTR                                                 70620020
         DROP  SETPTR                                                   70680020
         EJECT                                                          70740020
*PARMTBLR - THIS ROUTINE IS CALLED WHEN THE VALUE OF A PARAMETER IS   * 70800020
*   REFERENCED. ITS FUNCTION IS TO LOCATE THE APPROPRIATE ENTRY IN    * 70860020
*   THE PARAMETER TABLE THROUGH THE APPROPRIATE VECTOR, KEYWORD OR    * 70920020
*   POSITIONAL, AND TO GET THE VALUE OF THE PARAMETER TABLE ENTRY     * 70980020
*   FOR THE GENERATOR.                                                * 71040020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 71100020
*                FOLLOWED BY THE VECTOR POINTER (3 BYTES)             * 71160020
*                FOLLOWED BY PADDING (2 BYTES) IF NOT A SUBOPERAND    * 71220020
*                REFERENCE OR BY SUBOPERAND NUMBER (2 BYTES) IF A     * 71280020
*                SUBOPERAND REFERENCE                                 * 71340020
*        OUTPUT - A POINTER IN R11 TO THE PARAMETER TABLE ENTRY       * 71400020
*                                                                     * 71460020
PARMTBLR EQU   *                                                        71520020
         USING PARMREF,PARMA                                            71580020
         TM    PARMSUB,BIT0             LOOK FOR DEAD TERM FLAG         71640020
         BO    PTR1X                    BRANCH IF FOUND                 71700020
         CLI   PARMFLG,JTMKPAR          SEE IF KEYWORD REFERENCE        71760020
         BNE   PTR1                     BRANCH IF NOT                   71820020
         L     PARAMPTR,CURRKEYD        GET POINTER TO KEYWORD VECTOR   71880020
         B     PTR2                     GO JOIN MAIN FLOW               71940020
PTR1     LH    WORK1,NOFSYSLS           PICK UP POSITIONAL COUNT        72000020
         MH    WORK1,=H'3'              GET MAXIMUM VECTOR DISPL        72060020
         ST    WORK1,JFWORD1            SET ASIDE FOR PTR COMPARE       72120020
         CLC   PARMPNT,JFWORD1+(L'JFWORD1-L'PARMPNT) COMPARE DISPLS     72480020
         BNH   PTR0                     BRANCH IF PARAM IN RANGE        72540020
PTR1X    LA    PARMB,=AL1(OPNDOMT,JO,J0,J1,J0,J0,X'60',J0)  OMITTED     72600020
         B     DICTEXIT                 RETURN TO GENERATOR             72660020
PTR0     L     PARAMPTR,CURRPOST        GET POINTER TO POSITIONAL VCTR  72720020
PTR2     EQU   *                                                        72780020
         MVC   HIBYTE0+(L'HIBYTE0-L'PARMPNT)(L'PARMPNT),PARMPNT        X72840020
               PICK UP PTR TO PARAM VECTOR SLOT                         72900020
         S     PARAMPTR,HIBYTE0         DEVELOP PTR TO VECTOR ENTRY     72960020
         MVC   HIBYTE0+D1(D3),D0(PARAMPTR) PICK UP VECTOR ENTRY         73020020
         L     PARMB,HIBYTE0            GET FOR PARAM TBL REFERENCE     73080020
         A     PARMB,CURRPARM           DEVELOP PTR TO PARAM ENTRY      73140020
         CLC   PARMPAD,=D'0'            SEE IF SUBOPERAND REFERENCE     73200020
         BZ    DICTEXIT                 IF NOT, RETURN                  73260020
         MVC   JHWORD1,PARMSUB          PICK UP SUBOPERAND NUMBER       73320020
         TM    D0(PARMB),OPNDSUB        SEE IF SUBLIST BEING REFER'D    73380020
         BO    PTR4                     IF SO, PROCEED                  73440020
         CLC   JHWORD1,=H'1'            SEE IF SUBOPERAND 1 REFER'D     73500020
         BE    DICTEXIT                 IF SO, RETURN WHOLE PARAM PTR   73560020
         B     PTR1X                    GO RETURN DEFAULT               73620020
PTR4     CLC   JHWORD1,D6(PARMB)        SEE IF SUBOPERAND IN RANGE      73680020
         BH    PTR1X                    GO RETURN DEFAULT               73740020
         LH    WORK1,JHWORD1            GET SUBOPERAND NUMBER           73800020
         MH    WORK1,=H'3'              CONVERT TO VECTOR INDEX         73860020
         LR    WORK2,PARMB              GET PARAM ENTRY PTR FOR CALC    73920020
         MVC   HIBYTE0+D1(D3),D10(PARMB) PICK UP SUBLIST VECTOR PTR     73980020
         A     WORK2,HIBYTE0            GET PTR TO STRT OF SUBL VCTR    74040020
         SR    WORK2,WORK1              GET PTR TO SUBLIST VECTR ENTRY  74100020
         MVC   HIBYTE0+D1(D3),D0(WORK2) PICK UP SUBLIST VECTOR ENTRY    74160020
         A     PARMB,HIBYTE0            DEVELOP PTR TO SUBOPERAND       74220020
         B     DICTEXIT                 RETURN                          74280020
         DROP  PARMA                                                    74340020
         EJECT                                                          74400020
*SEQSYMBR - THIS ROUTINE IS CALLED WHEN A REFERENCE TO A SEQUENCE     * 74460020
*   SYMBOL IS ENCOUNTERED. ITS FUNCTION IS TO LOCATE THE APPROPRIATE  * 74520020
*   ENTRY IN THE SEQUENCE SYMBOL REFERENCE DICTIONARY AND TO GET      * 74580020
*   THE NOTE/POINT ADDRESS IN THE SEQUENCE SYMBOL REFERENCE           * 74640020
*   DICTIONARY ENTRY FOR THE GENERATOR.                               * 74700020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 74760020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 74820020
*        OUTPUT - A POINTER IN R11 TO THE NOTE/POINT ADDRESS          * 74880020
*                                                                     * 74940020
SEQSYMBR EQU   *                                                        75000020
         L     SKDCTPTR,CURRSEQS        GET PTR TO SEQ SYMB REF DICT    75060020
         USING SEQREF,PARMA                                             75120020
         USING JTEXT,R5                                         OX00218 75170020
         MVC   HIBYTE0+(L'HIBYTE0-L'SEQPNT)(L'SEQPNT),SEQPNT           X75180020
               GET DISPL TO SEQ SYMB REF DICT ENTRY                     75240020
         A     SKDCTPTR,HIBYTE0         DEVELOP PTR TO DICT ENTRY       75300020
         CLC   D0(D8,SKDCTPTR),=D'0'    LOOK FOR UNDEFINED SEQ SYM      75360020
         BZ    DICTEXIT                 RETURN DIRECTLY IF THE CASE     75420020
         GOIF  JERR,OFF=NOERREC         ANY ERROR IN REC        OX00218 75470020
ERREC    JGETL FILE=FILE1               YES, GET ERROR REC      OX00218 75472020
         LR    R5,R11                   LOAD BASE FOR TEXT      OX00218 75472420
         GOIF  JTERROR,NE=NOERREC       IS THE REC ERROR REC    OX00218 75474020
         JPUTM FILE=FILE2,ADDR=(R5)     YES,PUT IT OUT          OX00218 75476020
         B     ERREC                    SEE IF MORE ERROR REC   OX00218 75478020
NOERREC  EQU   *                        NO MORE OR NO ERROR REC OX00218 75478420
         JPOINT FILE=FILE1,ADDR=(SKDCTPTR),NEXT=GET POSITION TEXT FILE  75480020
         CLI   *,BITFF                  SET COND CODE FOR DEF SEQ SYM   75540020
         B     DICTEXIT                 RETURN TO GENERATOR             75600020
         DROP  PARMA                                                    75660020
         EJECT                                                          75720020
*ORDSYMBR - THIS ROUTINE IS CALLED WHEN A REFERENCE TO AN ORDINARY    * 75780020
*   SYMBOL IS ENCOUNTERED. ITS FUNCTION IS TO LOCATE THE APPROPRIATE  * 75840020
*   ENTRY IN THE ORDINARY SYMBOL REFERENCE DICTIONARY AND TO GET      * 75900020
*   THE TYPE, LENGTH, AND SCALE ATTRIBUTES OF THE ORDINARY SYMBOL     * 75960020
*   IN THE ORDINARY SYMBOL REFERENCE DICTIONARY ENTRY FOR THE         * 76020020
*   GENERATOR.                                                        * 76080020
*        INPUT - A POINTER IN R10 TO THE TEXT FLAG (1 BYTE)           * 76140020
*                FOLLOWED BY THE DICTIONARY POINTER (3 BYTES)         * 76200020
*                FOLLOWED BY 2 BYTES OF PADDING                       * 76260020
*        OUTPUT - A POINTER IN R11 TO THE TYPE ATTRIBUTE (1 BYTE)     * 76320020
*                 FOLLOWED BY THE LENGTH ATTRIBUTE (2 BYTES)          * 76380020
*                 FOLLOWED BY THE SCALE ATTRIBUTE (2 BYTES)           * 76440020
*                 ATTRIBUTES                                          * 76500020
*                                                                     * 76560020
ORDSYMBR EQU   *                                                        76620020
         CLC   OSRDSTRT,=D'0'           SEE IF ANY OSRD PRESENT         76640020
         BZ    OSRDBAD                  BRANCH IF NONE (OVERFLOWED)     76660020
         USING ORDREF,PARMA                                             76680020
         MVC   HIBYTE0+(L'HIBYTE0-L'ORDPNT)(L'ORDPNT),ORDPNT           X76740020
               PICK UP DICTIONARY POINTER FROM META-TEXT                76800020
         L     PARMB,HIBYTE0            GET IT FOR POINTER CALCULATION  76860020
         A     PARMB,OSRDSTRT           DEVELOP PTR TO DICT ENTRY       76920020
         BCTR  PARMB,D0                 BACK UP PTR FOR GEN USEAGE      76980020
         B     DICTEXIT                 RETURN TO GENERATOR             77040020
OSRDBAD  LA    PARMB,=AL1(OPNDSTR,JU,J0,J0,J0,J0) RETURN DEFAULT ATTRS  77060020
         B     DICTEXIT                 RETURN                          77080020
         DROP  PARMA                                                    77100020
         EJECT                                                          77160020
*MACRFINI - THIS ROUTINE IS CALLED WHEN THE EXPANSION OF A MACRO      * 77220020
*   INSTRUCTION IS COMPLETED. ITS FUNCTION IS TO RESTORE THE          * 77280020
*   DICTIONARY FOR THE NEXT HIGHER LEVEL TEXT SEGMENT AS THE CURRENT  * 77340020
*   DICTIONARY AND TO REPOSITION THE TEXT FILE TO THE RESUMPTION      * 77400020
*   POINT IN THE NEXT HIGHER LEVEL TEXT SEGMENT.                      * 77460020
*        INPUT - NONE.                                                * 77520020
*        OUTPUT - NONE.                                               * 77580020
*                                                                     * 77640020
MACRFINI EQU   *                                                        77700020
MACRPOP  EQU   *                                                        77760020
         L     SKDCTPTR,CURRDICT        GET CURRENT DICT PTR            77820020
         USING SKDCTHDR,SKDCTPTR                                        77880020
MACRPOS  EQU   *                                                        77940020
         JPOINT FILE=FILE1,ADDR=SKNPNLT,NEXT=GET REPOSITION TEXT FILE   78000020
         MVC   CURRDICT,SKADNLD         SET UP NEW CURRENT DICT PTR     78060020
         L     SKDCTPTR,CURRDICT        POINT TO SKEL DICT HDR          78120020
         MVC   ACTRCNT,SKACTRV          RESTORE ACTR COUNT              78180020
         MVC   NOFSYSLS,SKNOFSLS        RESTORE POSITIONAL PARAM COUNT  78240020
         BAL   RETURN,PTRINIT           REESTABLISH DICTIONARY POINTERS 78300020
         B     DICTEXIT                 RETURN TO GENERATOR             78360020
         DROP  SKDCTPTR                                                 78420020
         EJECT                                                          78480020
*                                                                       78540020
* THIS SUBROUTINE PERFORMS A BUFFERED READ FROM ANY FILE.               78600020
*        IT IS CALLED FROM THE FOLLOWING ROUTINES                       78660020
*                   PHASENTR                                            78720020
*                   PROTOEND                                            78780020
*                                                                       78840020
BUFREAD  EQU   *                                                        78900020
         ST    RTNLNK,REGSAVEA          PRESERVE LINK REGISTER          78960020
         LM    R3,R4,PIOPARMB           PICK UP I/O PARAMETERS          79020020
BRD1     CLR   R3,R5                    SEE IF RECORD LESS THAN MAX     79080020
         BH    BRD4                     BRANCH IF NOT                   79140020
         CH    R3,=AL2(MINRECSZ)        SEE IF BLOCK OVER MINIMUM       79200020
         BNL   BRD11                    BRANCH IF MORE OR JUST ENUF     79260020
         LA    R3,MINRECSZ              IF NOT, USE MINIMUM SIZE        79320020
BRD11    STH   R3,PIOPARMC              SET UP RECORD LENGTH            79380020
         SR    R3,R3                    INDICATE LAST READ              79440020
BRD2     JREAD FILE=(R6),PARM=PIOPARMA  READ RECORD FROM PROPER FILE    79500020
         JCHECK FILE=(R6)               CHECK THE READ                  79560020
         LTR   R3,R3                    SEE IF READ COMPLETE            79620020
         BNZ   BRD3                     DKIP AHEAD IF NOT               79680020
         L     RTNLNK,REGSAVEA          RESTORE LINK REGISTER           79740020
         BR    RTNLNK                   RETURN TO CALLING ROUTINE       79800020
BRD3     EQU   *                                                        79860020
         AR    R4,R5                    DEVELOP PTR TO NEXT I/O AREA    79920020
         ST    R4,PIOPARMA              PUT PTR IN I/O CONTROL AREA     79980020
         B     BRD1                     GO SET UP NEW READ LENGTH       80040020
BRD4     STH   R5,PIOPARMC              SET UP MAXIMUM RECORD LENGTH    80100020
         SR    R3,R5                    ADJUST READ LENGTH              80160020
         B     BRD2                     GO READ NEXT RECORD             80220020
*                                                                       80280020
* THIS SUBROUTINE MOVES DATA TO AN AREA POINTED TO BY WORKB FROM        80340020
*        AN AREA POINTED TO BY WORKA USING THE LENGTH IN WORK1.         80400020
*        IT IS CALLED FROM THE FOLLOWING ROUTINES -                     80460020
*        PHASENTR, PROTOEND, MACRPOST                                   80520020
*                                                                       80580020
MOVLOP1  MVC   D0(D256,WORKB),D0(WORKA) MOVE BLOCK OF 256 BYTES         80640020
         LA    WORKA,D256(,WORKA)       ADJUST SOURCE POINTER           80700020
         LA    WORKB,D256(,WORKB)       ADJUST DESTINATION POINTER      80760020
MOVLOP   SH    WORK1,=H'256'            SEE IF ONE MOVE WILL DO IT      80820020
         BP    MOVLOP1                  BRANCH IF NOT                   80880020
         AH    WORK1,=H'255'            GET MOVE LENGTH REMAINING       80940020
         EX    WORK1,MOVLOP2            MOVE REMAINING SEGMENT          81000020
         BR    RETURN                   RETURN                          81060020
MOVLOP2  MVC   D0(D0,WORKB),D0(WORKA)   EXECUTED MOVE - 256 OR LESS     81120020
*                                                                       81180020
* THIS SUBROUTINE LOGS THE OVERLAP ERROR MESSAGE AND DECREMENTS THE     81240020
*        MACRO NEST COUNT. IT ADJUSTS THE 'INMACRO' SWITCH IF           81300020
*        NECESSARY.                                                     81360020
*                                                                       81420020
ERRRTN   EQU   *                                                        81480020
         L     R12,=A(LOGERR01)         GET PTR TO ERROR LOGGING RTN    81540020
         BALR  R9,R12                   GO MAKE ERROR STACK ENTRY       81600020
         DC    AL1(SEV89,ERR89)         ERROR PARAMETERS                81660020
         L     R9,MACROLVL              GET CURRENT MACRO NEST COUNT    81720020
         GOIF  (R9),NOTZERO=ERRRTN0     BRANCH IF NOT OPEN CODE         81780020
         SET   FLUSH2,ON                INDICATE TEXT TO BE FLUSHED     81870020
         BR    R2                       EXIT DIRECTLY                   81960020
ERRRTN0  EQU   *                                                        82020020
         BCT   R9,ERRRTN1               DECREMENT BY ONE. IF ZERO,      82080020
         SET   INMACRO,OFF              INDICATE POPPED TO OPEN CODE    82140020
ERRRTN1  ST    R9,MACROLVL              SAVE ADJUSTED MACRO NEST COUNT  82200020
         BR    R2                       RETURN                          82260020
*                                                                       82320020
* THIS SUBROUTINE SETS UP IN THE COMMON AREA THE POINTERS TO THE        82380020
*        VARIOUS GENERATION-TIME DICTIONARY ELEMENTS. THE POINTERS      82440020
*        ARE COMPUTED FROM VALUES IN THE DICTIONARY HEADER.             82500020
*        IT IS CALLED BY THE FOLLOWING ROUTINES -                       82560020
*        MACRFINI,PHASENTR,PROTOEND                                     82620020
*                                                                       82680020
PTRINIT  EQU   *                                                        82740020
         L     SKDCTPTR,CURRDICT        GET PTR TO DICT FOR INIT'ATION  82800020
         LR    WORK1,SKDCTPTR           GET COPY FOR CALCULATION        82860020
         USING SKDCTHDR,SKDCTPTR                                        82920020
         LA    WORK1,SKHDREND-SKDCTHDR(,WORK1) GET PTR TO GBL VECTOR    82980020
         ST    WORK1,CURRGLBL           SET ASIDE FOR GLBL REFERENCES   83040020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKSRDPT)(L'SKSRDPT),SKSRDPT        X83100020
               GET LENGTH OF GLOBAL VECTOR FROM DICT HEADER             83160020
         A     WORK1,HIBYTE0            CALCULATE PTR TO SEQ SYMB DICT  83220020
         ST    WORK1,CURRSEQS           SET ADIDE FOR SEQ SYMB REFERS   83280020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDADR)(L'SKLDADR),SKLDADR        X83340020
               GET LENGTH OF SEQ SYMB REFERENCE DICT FROM DICT HDR      83400020
         A     WORK1,HIBYTE0            CALCULATE PTR TO LOCAL DICT     83460020
         ST    WORK1,CURRLOCL           SET ASIDE FOR LOCAL REFERS      83520020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKLDLNG)(L'SKLDLNG),SKLDLNG        X83580020
               GET LENGTH OF LOCAL DICT FROM DICT HEADER                83640020
         A     WORK1,HIBYTE0            CALCULATE PTR TO END OF SPACE   83700020
         ST    WORK1,SPACEAL            SET ASIDE FOR FREE SPACE LOW    83760020
         LCR   WORK1,WORK1              COMPLEMENT FOR CALCULATION      83820020
         A     WORK1,SPACEAH            ADD FREE SPACE HIGH             83880020
         ST    WORK1,SPACEAE            SAVE FREE SPACE EXTENT          83940020
         LR    WORK1,SKDCTPTR           RE-GET CALCULATION BASE         84000020
         SH    WORK1,=H'3'              GET PTR TO POSITIONAL VECTOR    84060020
         ST    WORK1,CURRPOST           SAVE FOR POSIT PARAM REFERS     84120020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKKVADR)(L'SKKVADR),SKKVADR        X84180020
               GET LENGTH OF POSITIONAL VECTOR FROM DICT HEADER         84240020
         S     WORK1,HIBYTE0            GET PTR TO KEYWORD VECTOR       84300020
         ST    WORK1,CURRKEYD           SET ASIDE FOR KEYWORD REFERS    84360020
         MVC   HIBYTE0+(L'HIBYTE0-L'SKMPADR)(L'SKMPADR),SKMPADR        X84420020
               PICK UP PARAM TBL LENGTH FROM DICT HEADER                84480020
         S     SKDCTPTR,HIBYTE0         CALCULATE PTR TO PARAM TABLE    84540020
         ST    SKDCTPTR,CURRPARM        SET ASIDE FOR PARAM REFERS      84600020
         BR    RETURN                   RETURN                          84660020
         DROP  SKDCTPTR                                                 84720020
*                                                                       84780020
* THIS SUBROUTINE INITIALIZES THE LOCAL DICTIONARY SPACE TO ZEROES.     84840020
*        IT IS CALLED FROM THE FOLLOWING ROUTINES -                     84900020
*        PHASENTR,PROTOEND                                              84960020
*                                                                       85020020
LOCLINIT EQU   *                                                        85080020
         LR    R12,RETURN               PRESERVE RETURN REGISTER        85140020
         L     WORKA,CURRLOCL           GET PTR TO START OF LOCAL DICT  85200020
         LA    WORKB,D1(,WORKA)         GET PTR TO SINK LOCATION        85260020
         MVI   D0(WORKA),J0             INSERT ZERO TO BE PROPAGATED    85320020
         BAL   RETURN,MOVLOP            GO TO CLEAR LOCAL DICT SPACE    85380020
         BR    R12                      RETURN                          85440020
*                                                                       85500020
* THIS SUBROUTINE FETCHES A SKELETON DICTIONARY INTO THE FREE           85560020
*        SPACE. THE I/O PARAMETERS ARE SET UP IN PIOPARMA AND           85620020
*        PIOPARMB, AND R10 POINTS TO THE MDV ENTRY.                     85680020
*        IT IS CALLED FROM THE FOLLOWING ROUTINES-                      85740020
*        PHASENTR,PROTOEND                                              85800020
*                                                                       85860020
DCTFETCH EQU   *                                                        85920020
         ST    RETURN,REGSAVEB          SAVE LINK REGISTER              85980020
         USING MDVNTRY,PARMA                                            86040020
         LA    R11,MNPSD                GET PTR TO N/P ADDRESS          86100020
         JPOINT FILE=FILE1,ADDR=(R11),NEXT=READ POSITION TO DICTIONARY  86160020
         LH    R5,JMAXRL1               SET UP FILES BLOCK SIZE         86220020
         LA    R6,FILE1                 SET UP FILE INDICATOR           86280020
         BAL   RTNLNK,BUFREAD           LINK TO BUFFERED READ RTN       86340020
         L     RETURN,REGSAVEB          RESTORE LINK REGISTER           86400020
         BR    RETURN                   RETURN                          86460020
         DROP  PARMA                                                    86520020
         EJECT                                                          86580020
         LTORG                                                          86640020
         SPACE 3                                                        86700020
         JPATCH X3N00,E40               X3N PATCH AREA                  86760020
         END                                                            86820020
./  ADD  SSI=71710243,NAME=IFNX4D
X4D      XDCDS TESTRAN=NO                                               30000000
         JPATCH X4D00,646                                               30050000
         END                                                            60000000
./  ADD  SSI=71710244,NAME=IFNX4E
X4E      XDICT                                                          30000000
         JPATCH X4E00,7BE                                               30050000
         END                                                            60000000
./  ADD  SSI=81850027,NAME=IFNX4M
X4M      XFOUR TESTRAN=NO                                               30000000
         JPATCH X4M00,C0E                                               30050000
         END   I                                                        60000000
./  ADD  SSI=71710246,NAME=IFNX4N
X4N      XDCDS TESTRAN=YES                                              30000000
         JPATCH X4N00,896                                               30050000
         END                                                            60000000
./  ADD  SSI=71710247,NAME=IFNX4S
X4S      XSTBL                                                          30000000
         JPATCH X4S00,182                                               30050000
         END                                                            60000000
./  ADD  SSI=81850028,NAME=IFNX4T
X4T      XFOUR TESTRAN=YES                                              30000000
         JPATCH X4T00,D35                                               30050000
         END   I                                                        60000000
./  ADD  SSI=71710250,NAME=IFNX4V
X4V      XEVAL                                                          30000000
         JPATCH X4V00,592                                               30050000
         END                                                            60000000
./  ADD  SSI=71710251,NAME=IFNX5A
* /* START OF SPECIFICATIONS ****                                       00010020
*02* PROCESSOR = ASSEMBLER                                              00020020
**** END OF SPECIFICATIONS ***/                                         00030020
         GBLC  &COMPNM,&ASMID                                           00050020
         JHEAD 'ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE',          X00070020
               PHASEID=X5A,                                            X00140020
               LEVEL=13                                                 00210003
*FUNCTION/OPERATION-                                                  * 00280020
*   THIS SUBROUTINE IS CALLED FOR EACH ASSEMBLER OPCODE ENCOUNTERED   * 00350020
*   IN THE TEXT STREAM.  THIS ROUTINE IS CALLED BY MAINLINE CONTROL.  * 00420020
*   THE ONLY ASSEMBLER OPCODES THAT CAUSE PUNCH OR LINK OUTPUT IS DC'S* 00490020
*   CCW'S AND CNOP'S. ALL ASSEMBLER OPCODES CAUSE THE PRINT ROUTINE   * 00560020
*   TO BE CALLED. THE ASSEMBLER OPCODES ARE EVALUATED AND THE PROPER  * 00630020
*   TABLES ARE UPDATED OR THE PUNCH TEXT IS PREPARED THEN THE OUTPUT  * 00700020
*   ROUTINE IS CALLED. FOR DC'S THE OUTPUT ROUTINE WILL BE CALLED FOR * 00770020
*   EACH 8 BYTES, OR FRACTION THEREOF, OF PUNCHED OUTPUT.             * 00840020
*                                                                     * 00910020
*ENTRY POINT-                                                         * 00980020
*        AOP100                                                       * 01050020
*                                                                     * 01120020
*INPUT-                                                               * 01190020
*   INTERNAL TEXT RECORDS RETRIEVED IN MAINLINE CONTROL.              * 01260020
*   SYMBOL REFERENCE FILE.                                            * 01330020
*                                                                     * 01400020
*OUTUT-                                                               * 01470020
*   LISTING OF ASSEMBLER OPCODES.                                     * 01540020
*   PUNCH FILE OUTPUT FOR DC'S, CCW'S AND CNOP'S.                     * 01610020
*                                                                     * 01680020
*EXTERNAL ROUTINES-                                                   * 01750020
*        FORMATING, PRINT AND PUNCH ROUTINE                           * 01820020
*        EVAL - EXPRESSION EVALUATION.                                * 01890020
*        DCEVAL- DC EVALUATION ROUTINE                                * 01960020
*                                                                     * 02030020
*EXITS, NORMAL-                                                       * 02100020
*   EXITS TO MAINLINE CONTROL.                                        * 02170020
*                                                                     * 02240020
*EXITS, ERROR-                                                        * 02310020
*   NONE                                                              * 02380020
*                                                                     * 02450020
*TABLES/WORK AREAS-                                                   * 02520020
*   ASSEMBLY COMMON                                                   * 02590020
*   USING TABLE                                                       * 02660020
*                                                                     * 02730020
*ATTRIBUTES-                                                          * 02800020
*   REFRESHABLE                                                       * 02870020
*                                                                     * 02940020
*NOTES-                                                               * 03010020
*   NONE                                                              * 03080020
*                                                                     * 03150020
*                                                                     * 03220020
         SPACE 2                                                        03222020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -03230020
               - COPY CODE '                                            03240020
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   03250020
         COPY  JCOMMON                                                  03290020
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE     03340020
         COPY  JTEXT                                                    03430020
         PRINT OFF                      DON'T PRINT X5COM COPY CODE     03480020
         COPY  X5COM                                                    03570020
         PRINT ON                       PRINT RSYMRCD COPY CODE         03620020
DSECT10  DSECT ,                        DEFINE RESOLUTION DATA DSECT    03710020
         COPY  RSYMRCD                  COPY DSECT ITEMS                03780020
         PRINT OFF                      DON'T PRINT JRXLFMTS COPY CODE  03830020
         COPY  RXLFMTS                  POST PROCESSOR RECORD FORMATS   03920020
         PRINT OFF                      DON'T PRINT JERRMSGCD COPY CODE 03970020
         COPY  JERMSGCD                 DEFINE ERROR CODES AND SEVERITY 04060020
         PRINT OFF                      DON'T PRINT JERRCD COPY CODE    04110020
         COPY  JERRCD                   COPY ERR RECORD FORMAT          04130020
         PRINT ON                       THAT'S ALL THE COPY CODE        04160020
         SPACE 3                                                        04162020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -04170020
               - INITIALIZATION '                                       04180020
         JCSECT (X5A00)                 START CSECT                     04270020
* VS1 RELEASE 2 CHANGES                                                 04330020
*D159320                                                        OX00216 04330103
*C133500                                                        OX00219 04330203
*C214900-215600                                                 OX00220 04330503
* VS1 RELEASE 2.6 CHANGES                                               04330903
*A484500,485000,485600-485780,514420                            OX00222 04331303
*C503300,513800                                                 OX00222 04331403
*D485100,486280-487900                                          OX00222 04331503
* VS1 RELEASE 3 CHANGES                                                 04331803
*D492800                                                        OX00086 04332403
*A493600,494000                                                 OX00086 04332503
*C158900,158920,159000                                          OX01760 04382503
* VS1 RELEASE 3.1 CHANGES                                               04384531
*D484500                                                        OY01863 04386502
*A485742                                                        OY01863 04388502
*C164500,903700,905100                                          OX02675 04390531
*A199900-200900                                                 OX05796 04390931
*C202300                                                        OX05796 04391331
*A208400-208520                                                 OX05796 04391731
*C208600                                                        OX05796 04392131
*A199500,199600,208000,208100                                   OY06130 04392231
*C199900,208400                                                 OY06130 04392331
* VS1 RELEASE 040 CHANGES                                               04392403
*A158300                                                       @OY06117 04398203
*C653800,654500,664300,665000,670600,702100,702800             @OX08876 04398305
*A658500,712400                                                @OX08876 04398405
*D684600,685300                                                @OX08876 04398505
*D870800,A885300                                               @OX11000 04398906
*A211000,213400-213932,214167-214191                           @AZ07356 04399006
*A056700                                                       @AY12907 04399106
         JMODID ,                       MODULE IDENTIFICATION           04404203
         USING JTEXT,R5                 FIXED TEXT PART                 04410020
         USING JTEXTA,R4                VARIABLE TEXT PART              04480020
         USING X5COM,R7                 PHASE COMMON AREA               04550020
         USING DSECT10,R11              RESOLVED SYMBOL DATA USING      04620020
         SPACE 2                                                        04640020
AOP100   JSAVE BASE=YES                 SAVE CALLING REGISTERS          04760020
         LA    R3,AOP100+4095           SET UP USING REGISTER           04830020
         LA    R3,D1(R3)                INCREMENT 1                     04900020
         USING AOP100+4096,R3           SET USING FOR OVER 4K SIZE      04970020
         JENTRY (X5A01=AOP100)          ENTRY POINT                     05040020
         GOIF  JTEND,LT=AOP400          JUST LIST GENERATOR OPS         05110020
         GOIF  JPRONLY,ON=AOP350        IS RECORD PRINT ONLY            05180020
         SR    R11,R11                  CLEAR FOR INSERT CHARACTER      05250020
         IC    R11,JTIOP                PICK UP OP-CODE                 05320020
         LA    R10,JTEND                LESS OP-CODES NOT IN TABLE WILL 05390020
         SR    R11,R10                  CALCULATE BRANCH TABLE OP-CODE  05460020
         AR    R11,R11                  DOUBLE FOR BRANCH TABLE INDEX   05530020
         LH    R11,AOP200(R11)          GET ROUTINE DISPLACEMENT        05600020
         XC    DUMSW,DUMSW              CLEAR DS SW            @AY12907 05650006
         B     AOP200(R11)              BRANCH TO ASSEMBLER OP ROUTINE  05670020
         SPACE 3                                                        05672020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -05680020
               - BRANCH TABLE AND EXIT ROUTINES'                        05690020
*   BRANCH TABLE FOR ASSEMBLER OPCODES                                  05740020
AOP200   EQU   *                        BEGINNING OF BRANCH TABLE       05810020
         ORG   AOP200+2*(0-JTEND+JTEND)      BRANCH DISPLACEMENT END    05880020
         DC    AL2(END100-AOP200)            TABLE ENTRY FOR END        05950020
         ORG   AOP200+2*(0-JTEND+JTDXD)      BRANCH DISPLACEMENT DXD    06020020
         DC    AL2(DXD100-AOP200)            TABLE ENTRY FOR DXD        06090020
         ORG   AOP200+2*(0-JTEND+JTEQU)      BRANCH DISPLACEMENT EQU    06160020
         DC    AL2(EQU100-AOP200)            TABLE ENTRY FOR EQU        06230020
         ORG   AOP200+2*(0-JTEND+JTORG)      BRANCH DISPLACEMENT ORG    06300020
         DC    AL2(ORG100-AOP200)            TABLE ENTRY FOR ORG        06370020
         ORG   AOP200+2*(0-JTEND+JTCNOP)     BRANCH DISPLACEMENT CNOP   06440020
         DC    AL2(CNOP00-AOP200)            TABLE ENTRY FOR CNOP       06510020
         ORG   AOP200+2*(0-JTEND+JTCCW)      BRANCH DISPLACEMENT CCW    06580020
         DC    AL2(CCW100-AOP200)            TABLE ENTRY FOR CCW        06650020
         ORG   AOP200+2*(0-JTEND+JTDC)       BRANCH DISPLACEMENT DC     06720020
         DC    AL2(DC0100-AOP200)            TABLE ENTRY FOR DC         06790020
         ORG   AOP200+2*(0-JTEND+JTDS)       BRANCH DISPLACEMENT DS     06860020
         DC    AL2(DS0100-AOP200)            TABLE ENTRY FOR DS         06930020
         ORG   AOP200+2*(0-JTEND+JTSTART)    BRANCH DISPLACEMENT START  07000020
         DC    AL2(START0-AOP200)            TABLE ENTRY FOR START      07070020
         ORG   AOP200+2*(0-JTEND+JTCSECT)    BRANCH DISPLACEMENT CSECT  07140020
         DC    AL2(CSECT0-AOP200)            TABLE ENTRY FOR CSECT      07210020
         ORG   AOP200+2*(0-JTEND+JTDSECT)    BRANCH DISPLACEMENT DSECT  07280020
         DC    AL2(DSECT0-AOP200)            TABLE ENTRY FOR DSECT      07350020
         ORG   AOP200+2*(0-JTEND+JTCOM)      BRANCH DISPLACEMENT COM    07420020
         DC    AL2(COM100-AOP200)            TABLE ENTRY FOR COM        07490020
         ORG   AOP200+2*(0-JTEND+JTENTRY)    BRANCH DISPLACEMENT ENTRY  07560020
         DC    AL2(ENTRY0-AOP200)            TABLE ENTRY FOR ENTRY      07630020
         ORG   AOP200+2*(0-JTEND+JTEXTRN)    BRANCH DISPLACEMENT EXTRN  07700020
         DC    AL2(EXTRN0-AOP200)            TABLE ENTRY FOR EXTRN      07770020
         ORG   AOP200+2*(0-JTEND+JTWXTRN)  BRANCH DISPLACEMENT WXTRN    07840020
         DC    AL2(EXTRN0-AOP200)         TABLE ENTRY FOR WXTRN         07910020
         ORG   AOP200+2*(0-JTEND+JTCXD)      BRANCH DISPLACEMENT CXD    07980020
         DC    AL2(CXD100-AOP200)            TABLE ENTRY FOR CXD        08050020
         ORG   AOP200+2*(0-JTEND+JTLTORG)    BRANCH DISPLACEMENT LTORG  08120020
         DC    AL2(LTORG0-AOP200)            TABLE ENTRY FOR LTORG      08190020
         ORG   AOP200+2*(0-JTEND+JTLITR)     BRANCH DISPLACEMENT LITR   08260020
         DC    AL2(LITR00-AOP200)            TABLE ENTRY FOR LITERAL    08330020
         ORG   AOP200+2*(0-JTEND+JTSYMBL)    BRANCH DISPLACEMENT SYMBOL 08400020
         DC    AL2(AOP300-AOP200)            TABLE ENTRY FOR SYMBOL     08470020
         ORG   AOP200+2*(0-JTEND+JTPUNCH)    BRANCH DISPLACEMENT PUNCH  08540020
         DC    AL2(PUNCH0-AOP200)            TABLE ENTRY FOR PUNCH      08610020
         ORG   AOP200+2*(0-JTEND+JTREPRO)    BRANCH DISPLACEMENT REPRO  08680020
         DC    AL2(REPRO0-AOP200)            TABLE ENTRY FOR REPRO      08750020
         ORG   AOP200+2*(0-JTEND+JTPUSH)  ORG FOR PUSH BRANCH ADDRESS   08820020
         DC    AL2(PUSH00-AOP200)       DISPLACEMENT TO PUSH            08890020
         ORG   AOP200+2*(0-JTEND+JTPOP) ORG FOR POP BRANCH ADDRESS      08960020
         DC    AL2(POP100-AOP200)       DISPLACEMENT TO POP             09030020
         ORG   AOP200+2*(0-JTEND+JTPRINT)    BRANCH DISPLACEMENT PRINT  09100020
         DC    AL2(PRINT0-AOP200)            TABLE ENTRY FOR PRINT      09170020
         ORG   AOP200+2*(0-JTEND+JTUSING)    BRANCH DISPLACEMENT USING  09240020
         DC    AL2(USING0-AOP200)            TABLE ENTRY FOR USING      09310020
         ORG   AOP200+2*(0-JTEND+JTDROP)     BRANCH DISPLACEMENT DROP   09380020
         DC    AL2(DROP00-AOP200)            TABLE ENTRY FOR DROP       09450020
         ORG   AOP200+2*(0-JTEND+JTCMNT)     BRANCH DISPLACEMENT COMNT  09520020
         DC    AL2(AOP400-AOP200)            TABLE ENTRY FOR COMMENT    09590020
         ORG   AOP200+2*(0-JTEND+JTHCMNT)   BRANCH DISPLACEMENT HCMNT   09660020
         DC    AL2(AOP400-AOP200)       TABLE ENTRY FOR HIDDEN COMMENT  09730020
         ORG   AOP200+2*(0-JTEND+JTERROR)    BRANCH DISPLACEMENT ERROR  09800020
         DC    AL2(ERROR0-AOP200)            TABLE ENTRY FOR ERROR      09870020
         ORG   AOP200+2*(0-JTEND+JTSPACE)    BRANCH DISPLACEMENT SPACE  09940020
         DC    AL2(SPACE0-AOP200)            TABLE ENTRY FOR SPACE      10010020
         ORG   AOP200+2*(0-JTEND+JTEJECT)    BRANCH DISPLACEMENT EJECT  10080020
         DC    AL2(EJECT0-AOP200)            TABLE ENTRY FOR EJECT      10150020
         ORG   AOP200+2*(0-JTEND+JTTITLE)    BRANCH DISPLACEMENT TITLE  10220020
         DC    AL2(TITLE0-AOP200)            TABLE ENTRY FOR TITLE      10290020
         ORG   AOP200+2*(0-JTEND+JTMNOTE)    BRANCH DISPLACEMENT MNOTE  10360020
         DC    AL2(MNOTE0-AOP200)            TABLE ENTRY FOR MNOTE      10430020
         ORG   AOP200+2*(0-JTEND+JTSICTL)    RESTORE STANDARD           10450020
         DC    AL2(SICTL-AOP200)        ICTL                            10470020
         ORG   ,                        REORG TO THE END OF TABLE       10500020
         SPACE                                                          10530020
AOP300   GOIF  JERR,OFF=AOP310          IS THERE AN ERROR IN RECORD     10570020
         LA    R10,ERROUT               YES, LOAD PRINT INDEX           10640020
         JCALL OUTPUT                   GO PRINT ERROR FLAG IN TEXT     10710020
AOP310   JRETURN ,                      EXIT                            10780020
AOP350   GOIF  JTEND,NE=AOP375          IS THIS AN END STATEMENT        10800020
         MVC   ENDSTMNO,STMTN           YES, SAVE THE STATEMENT NUMBER  10820020
AOP375   GOIF  JTREPRO,NE=AOP400        IS THIS A REPRO CARD            10821020
         GOIF  JPSOP,OFF=AOP400         IS STMT A PSEUDO OP    @AY13962 10821406
         GOIF  REPCARD,ON=REPRO0        IS IT EXPECTED GO PRINT         10822020
         SET   REPCARD,ON               NEXT STATEMENT TO BE IN 1 LINE  10823020
AOP400   MVI   LHFLGS,DNTPLH            SET PRINT FLAGS                 10850020
AOP405   LA    R10,LSTOUT               LOAD PRINT INDEX                10920020
AOP410   JCALL OUTPUT                   GO PRINT                        10990020
         B     AOP300                   EXIT PHASE                      11060020
         JEXTRN (X5P01=OUTPUT)          PRINT PUNCH ENTRY POINT         11130020
AOP440   LA    R10,LSTOUT               GET BRANCH DISPLACEMENT PRINT   11200020
         OI    LHFLGS,DNTPLH            TURN ON DON'T PRINT LEFT HALF   11270020
AOP450   JCALL OUTPUT                   CALL OUT PUT ROUTINE            11340020
         BR    R6                       RETURN TO CALLING ROUTINE       11410020
         EJECT                                                          11480020
AOP500   L     R14,OPNADR               POINT TO OPERAND BEGINNING      11550020
         L     R15,OPNEND               POINT TO OPERAND END            11620020
         LA    R11,X5ATEMP              POINT BUILD AREA WORK REGISTER  11690020
         LR    R4,R11                   REMEMBER WHERE WE STARTED AT    11760020
         GOIF  D0(R14),JQUOTE,NE=AOP590 NO LEADING QUOTE                11830020
AOP540   LA    R14,D1(,R14)             STEP WORK REGISTER              11900020
         CR    R14,R15                  IS OPERAND COMPLETE             11970020
         BNL   AOP595                   YES, GO LOG ERROR               12040020
         GOIF  D0(R14),JQUOTE,EQ=AOP560   CHECK FOR QUOTE               12110020
         GOIF  D0(R14),JAMPER,EQ=AOP560   CHECK FOR AMPERSAND           12180020
AOP550   MVC   D0(D1,R11),D0(R14)       MOVE CHARACTER TO OUTPUT        12250020
         LA    R11,D1(,R11)             STEP OUTPUT POINTER             12320020
         B     AOP540                   GO STEP TO NEXT CHARACTER       12390020
AOP560   CLC   D0(D1,R14),D1(R14)       IS AMPERSAND OR QUOTE A DUPLICT 12460020
         LA    R14,D1(,R14)             INCREMENT POINTER               12530020
         BE    AOP550                   GO OUTPUT CHARACTER             12600020
         BCTR  R14,0                    DECREMENT POINTER               12670020
         GOIF  D0(R14),JAMPER,EQ=AOP580 UNPAIRES AMPERSAND              12740020
         CLI   D1(R14),JBLANK           DO BLANK FOLLOW TERM QUOTE      12780020
         BNE   AOP585                   IF NOT ERROR                    12820020
         SR    R11,R4                   GET LENGTH OF FIELD             12880020
         BR    R6                       RETURN TO CALLING ROUTINE       12950020
         JEXTRN (X5L01=LOGERR)                                          13020020
AOP580   SET   TPTEXT,ON                INDICATE BAD OPERAND            13090020
         ST    R14,ERRPTR               IT IS ALSO ERROR POINTER        13160020
         X5ERRL 176,CLMPTR              UNPAIRED AMPERSAND              13230020
         BR    R6                       RETURN TO CALLER                13300020
AOP585   LA    R14,D1(R14)              POINT TO CHR AFTER QUOT OX00219 13350020
         ST    R14,ERRPTR               SAVE POINTER FOR LOGGING        13400020
         SET   TPTEXT,ON                INDICATE BAD OPERAND            13450020
         X5ERRL 185,CLMPTR              BLANK DO NOT FOLLOW TERM QUOTE  13500020
         BR    R6                       RETURN TO CALLER                13550020
AOP590   X5ERRL 175,0                   NO LEADING QUOTE                13650020
         SET   TPTEXT,ON                INDICATE BAD OPERAND            13700020
         BR    R6                       RETURN TO CALLER                13720020
AOP595   X5ERRL 240,0                   ENDING QUOTE MISSING, LOG IT    13790020
         SET   TPTEXT,ON                INDICATE BAD OPERAND            13840020
         BR    R6                       RETURN TO CALLER                14000020
         SPACE 2                                                        14070020
*                                                                     * 14140020
*   COMMON CALL OF EVAL.                                              * 14210020
*                                                                     * 14280020
AOP600   JCALL EVAL                     GO EVALUATE EXPRESSION          14350020
         BR    R6                       RETURN TO CALLING LOCATION      14420020
         JEXTRN (X5V01=EVAL)            DEFINITION OF EVAL              14490020
         SPACE 4                                                        14500020
*                                                                       14510020
*   REPLACE THE USER ICTL WITH STANDARD ICTL IN CASE WE HAVE THE SYSMAC 14520020
*   OPTION AND ARE GOING TO PRINT OUT MACRO DEFINITIONS                 14530020
*                                                                       14540020
SICTL    MVC   JBGNCL(L'JBGNCL*3),=Y(1,16,71)    RESTORE STD ICTL       14550020
         B     AOP310                   RETURN TO GET NEXT RECORD       14560020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -14570020
               - ''END'' STATEMENT PROCESSOR'                           14620020
*                                                                     * 14630020
*   END STATEMENT PROCESSING                                            14700020
*                                                                       14770020
END100   L     R10,OPNADR               GET OPERAND POINTER             14840020
         MVC   ENDSTMNO,STMTN           SAVE END STATEMENT NUMBER       14870020
         GOIF  OPNPRS,OFF=END450        OPERAND PRESENT ?               14910020
         GOIF  D0(R10),JCOMMA,EQ=END400 1ST OPERAND OMITTED ?           14980020
         SPACE                                                          15260020
END150   BAL   R6,AOP600                GO EVALUATE OPERAND             15330020
         BNH   END350                   ERROR IF NOT RELOCATABLE        15400020
         CH    R10,=H'4096'             IS ESDID VALID?                 15540020
         BNL   END350                   NO,GO LOG ERROR                 15610020
         ST    R11,LCTRSAV              PUT VALUE IN WORK AREA          15660020
         TM    LCTRSAV+D3,D1            IS IT EVEN                      15670020
         BNZ   END600                   ERROR IF NOT                    15672020
         ST    R11,LOCATN               STORE VALUE FOR PRINTING        15680020
         ST    R11,JENTRYPT             SAVE ENTRY POINT FOR END CARD   15750020
         STH   R10,JESDID               SAVE ENTRY POINT ESD            15820020
         NI    JESDID,X'F7'             CLEAR FLAGBIT 5        @YA06117 15830003
         SET   JESDCHK,ON               INDICATE ESD INF FOR END CARD   15870020
END200   GOIF  D0(R14),JBLANK,EQ=END250 WAS DELIMIT A BLANK-OK  OX01760 15890003
         GOIF  D1(R14),JLPARN,EQ=END210 IS DELIMITER A PAREN    OX01760 15892003
         GOIF  D1(R14),JBLANK,EQ=END250 2ND OPERAND OMITTED ?   OX01760 15900003
         B     END230                   ERROR IN 2ND IDR ITEM IF NONE   15902020
END210   MVI   JIDR,X'02'               INDICATE A 2ND IDR ITEM         15904020
         SR    R6,R6                                                    15910020
         AH    R14,=H'1'                                                15912020
END225   AH    R14,=H'1'               COUNT COLUMN POINTER             15920020
         GOIF  D0(R14),JCOMMA,EQ=END235 SUBITEMS DEL BY COMMA           15930020
         AH    R6,=H'1'                COUNT CHAR. IN PID ORDER NUMBER  15932820
         IC    R9,D0(R14)               MOVE CHAR TO IDR SAVE LOC       15932920
         STC   R9,JIDR+D19(R6)                                          15933020
         CH    R6,=H'10'                MAX 10 CHARACTERS ALLOWED       15933120
         BNH   END225                   GET NEXT CHAR IF MORE ALLOWED   15938120
END230   X5ERRL 254,CLMPTR              LOG ERR IN 2ND IDR ITEM         15942020
         CLI   JIDR,X'02'               IS FLAG BYTE SET TO 2           15942420
         BNE   END250                   BRANCH IF NOT                   15942820
         MVI   JIDR,X'01'               RESET IT TO ONE                 15943220
         MVI   JIDR+D20,X'2F'           RESET 2ND IDR PART OF JIDR      15943620
         MVC   JIDR+D21(D19),JIDR+D20     TO BLANKS                     15943720
         B     END250                                                   15943820
END235   CH    R6,=H'10'                WAS THERE 10 CHARACTERS         15944020
         BNL   END240                   YES                             15951020
         LA    R6,D1(R6)                STEP UP INDEX                   15958020
         IC    R9,=X'2F'                NO   - PAD WITH BLANKS          15965020
         STC   R9,JIDR+D19(R6)                                          15972020
         B     END235                   CHECK AGAIN                     15979020
END240   MVC   JIDR+D30(D4),D1(R14)     MOVE 2ND SUBITEM TO SAVE LOC    15986020
         MVC   JIDR+D31+D3(D5),D6(R14)  MOVE 3RD SUBITEM TO SAVE LOC    15993020
         GOIF  D11(R14),JRPARN,NE=END230  IS DELIM A PAREN              16000020
END250   SR    R10,R10                  SET PRINT ROUTINE INDEX         16007020
         BAL   R6,AOP450                GO PRINT END                    16014020
         GOIF  JERR,OFF=END300          IF NO ERROR,CHECK LITERALS      16030020
         LA    R10,ERROUT               YES, SET *** ERROR *** INDEX    16100020
         JCALL OUTPUT                   GO PRINT IT                     16170020
END300   LH    R1,LITPID                GET LITERAL POOL ID             16240020
         GOIF  JSYSGEN,OFF=AOP310       EXIT IF X4 NOT LOADED           16270020
         LA    R1,D1(R1)                INCREMENT BY 1                  16310020
         STH   R1,LITPID                SAVE IT                         16380020
         L     R1,SYMXRF                GET SYMBOL XREFED       OX02675 16450031
         SR    R2,R2                    CLEAR R2                        16520020
         IC    R2,SYMCNT                GET SYMBOL COUNT                16590020
         SR    R2,R1                    GET REMAINING SYMBOLS           16660020
         BNH   END345                   BRANCH IF NOT HIGH              16730020
END325   LH    R10,JINFILE              GET JINFILE INDEX               16800020
         JGETL FILE=(R10)               GET SYMBOL                      16870020
         BCT   R2,END325                FINISH FLUSHING?                16940020
         SPACE                                                          17010020
END345   MVI   SYMCNT,D0                ZEROED OUT SYMBOL COUNT         17080020
         B     LTO200                   GO CHECK LITERALS               17150020
END350   OI    LHFLGS,DNTPLH            TURN ON DON'T PRINT LEFT HALF   17220020
         X5ERRL 217,CLMPTR              RELOCATEBILITY ERROR            17240020
         B     END200                   GO CHECK 2ND OPERAND            17260020
END400   OI    LHFLGS,DNTPLH            TURN ON DON'T PRINT LEFT HALF   17290020
         LR    R14,R10                                                  17300020
         B     END200                   GO PRINT END                    17360020
END450   OI    LHFLGS,DNTPLH            SET DONT PRINT LEFT HALF        17370020
         B     END250                   GO PRINT END STATEMENT          17380020
END500   ST    R14,ERRPTR               SAVE COLUMN PTR FOR LOGGING     17570020
         X5ERRL 185,CLMPTR,END400       INVALID DELIMITER ERROR         17640020
         SPACE                                                          17690020
END600   X5ERRL 220,CLMPTR,END400       LOG ALIGNMENT ERROR             17700020
         SPACE 3                                                        17702020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -17760020
               - ''DXD'' STATEMENT PROCESSOR'                           17770020
DXD100   SET   DXDSW,ON                 INDICATE DXD FOR DCEVAL         18060020
         BAL   R6,COMCALL               GO GET GOOD OPERAND NUMBER      18130020
         MVC   ELCTR+D4(4),ELCTR        SAVE CURR. LOCTR                18200020
         MVC   ELCTR+D8(2),EESDI        SAVE CURR. ESDID                18270020
         XC    ELCTR,ELCTR              CLEAR LOCTR                     18340020
         XC    EESDI,EESDI              CLEAR ESDID                     18410020
         L     R10,OPNADR               POINT TO OPERAND                18480020
         JCALL DCEVAL                   GO EVALUATE                     18550020
         SET   DCMOP,ON                 TURN ON MOP-UP SWITCH           18620020
         LA    R10,DC0OUT               SET PRINT INDEX                 18690020
         JCALL OUTPUT                   CALL OUTPUT                     18760020
         SET   DXDSW,OFF                TURN OF SWITCH                  18830020
         MVC   ELCTR,ELCTR+D4           RESTORE CURR. LOCTR             18900020
         MVC   EESDI,ELCTR+D8           RESTORE CURR. ESDID             18970020
         B     AOP300                   EXIT                            19040020
         SPACE                                                          19050020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -19090020
               - COMMON ROUTINE FOR DC, DS AND DXD PROCESSORS'          19100020
COMCALL  L     R11,SYMDEF               GET SYMBOL FILE RECORD PTR      19180020
         GOIF  NAMPRS,ON=COMCALL2       SKIP IF NAME PRESENT            19200020
         GOIF  DXDSW,OFF=COMCALL1       NOT DXD - GET RECORD            19220020
         SR    R10,R10                  CLEAR REG                       19240020
         GOIF  JNMERR,ON=COMCALL3       DO NOT LOG NAME ERR AGAIN       19250020
         X5ERRL 163,0,COMCALL3          INVALID DXD NAME- NO NAME       19260020
COMCALL1 LH    R10,JINFILE              GET INPUT FILE NO               19320020
         JGETL FILE=(R10)               GET SYMBOL FILE RECORD          19390020
         SPACE                                                          19530020
COMCALL2 SR    R10,R10                  CLEAR REG                       19600020
         IC    R10,RFLGA                GET GOOD OPERAND COUNT          19670020
COMCALL3 STH   R10,LCTRSAV+D8           SAVE FOR DCEVAL USE             19740020
         SET   (DCSWH,DCCOMP,DCMOP,DCSTRT),OFF RESET DCFLGS FOR SAFE    19790020
         BR    R6                       RETURN TO CALLER                19810020
         SPACE 3                                                        19880020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -19930020
               - ''EQU'' STATEMENT PROCESSOR'                           19940020
EQU100   LH    R12,JTNMP                COMPUTE ADDR TO         OY06130 19950031
         AR    R12,R5                   NAME FIELD              OY06130 19960031
         CLI   D0(R12),X'00'            TST FOR NO NAME         OY06130 19990031
         BNE   EQU150                                           OX05796 20040031
         X5ERRL 163,0,AOP400                                    OX05796 20090031
EQU150   L    R11,SYMDEF                GET NAME RECORD PTR     OX05796 20230031
         MVC   ADDRS2,RLCTR             MOVE SYMBOL VALUE               20300020
         SET   PRDEFREQ,ON              TURN PRIORDEF REQ BIT ON        20440020
         L     R10,OPNADR               GET OPERAND POINTER             20510020
         IC    R6,RFLGB                 SAVE FLAGS                      20520020
         GOIF  NAMPRS,ON=EQU250         ANY NAME                        20540020
         X5ERRL 163,0                   LOG MISSING NAME ERROR          20570020
         SPACE                                                          20790020
EQU250   LH    R12,JTOPP                COMPUTE ADDR TO         OY06130 20800031
         AR    R12,R5                   OPERAND FIELD           OY06130 20810031
         CLI   D0(R12),X'00'            TST FOR NO OPERAND      OY06130 20840031
         BNE   EQU275                                           OX05796 20850031
         X5ERRL 177,0,AOP400                                    OX05796 20852031
EQU275   JCALL EVAL                     GO EVALUATE             OX05796 20860031
         BC    CMPX,EQUER1              IS EQU COMPLEXLY RELOCATABLE    20930020
         BC    ERRX,EQU300              BRANCH IF SYNTAX ERROR          21000020
         GOIF  D0(R14),JBLANK,EQ=EQU225 OK IF BLANK                     21080020
         GOIF  D0(R14),JCOMMA,NE=EQUER3 ERROR IF NOT COMMA              21090020
         SET   EQUOPR,ON                MORE THAN 1 OPR IN EQU @AZ07356 21100006
EQU225   ST    R11,ADDRS2               SAVE VALUE IN LEFTHLF           21140020
EQU200   EX    R6,EQUCPR                CHECK FOR CIRCULAR DEFINTION    21170020
         BE    EQU300                   NO                              21200020
         X5ERRL 237,0                   CIRCULAR DEFINITION             21220020
EQU300   SET   PRDEFREQ,OFF             RESET PRIOR DEFINITION SWITCH   21240020
         SET   EOUBIT,ON                INDICATE EQU                    21290020
         GOIF  EQUOPR,OFF=AOP405        BR IF NO 2ND OPER      @AZ07356 21340006
         GOIF  D1(R14),JCOMMA,EQ=EQU800 BR IF 2ND OPER OMITTED @AZ07356 21344006
         LA    R10,D1(R14)              BUMP POINTER           @AZ07356 21346006
         JCALL EVAL                     GO EVAL 2ND OPER       @AZ07356 21348006
         BC    (X'F'-CMPX),EQU400       BR IF NOT COMPLEX RELO @AZ07356 21348406
         X5ERRL 213,CLMPTR              ERR: COMPLEXLY RELOC   @AZ07356 21348806
EQU400   GOIF  D0(R14),JBLANK,EQ=EQU650 BR IF 3RD OPER         @AZ07356 21349206
         GOIF  D0(R14),JCOMMA,NE=EQU650 BR IF 3RD OPER INVALID @AZ07356 21349606
         LA    R10,D1(R14)              BUMP POINTER           @AZ07356 21349706
EQU500   JCALL EVAL                     GO EVAL 3RD OPER       @AZ07356 21349806
         BC    (X'F'-CMPX),EQU600       BR IF NOT COMPLEX RELO @AZ07356 21349906
         X5ERRL 213,CLMPTR              ERR: COMPLEX RELOC     @AZ07356 21373206
EQU600   GOIF  D0(R14),JBLANK,NE=EQU650 BR IF INVALID DELIM    @AZ07356 21383206
EQU650   SET   EQUOPR,OFF               RESET FOR NEXT STMT    @AZ07356 21393206
         B     AOP405                   NO EXIT                         21396706
EQU800   LA    R10,D2(R14)              BUMP POINTER           @AZ07356 21416706
         GOIF  D2(R14),JBLANK,EQ=EQU650 BR IF 3RD OPER OMITTED @AZ07356 21418706
         B     EQU500                   GO EVAL 3RD OPER       @AZ07356 21419106
EQUER1   CLI   EVALSW1,D0               ANY SYNTACTIC ERROR?            21420020
         BNE   EQU300                   YES, EXIT               OX00220 21490020
         X5ERRL 213,CLMPTR,EQU300       COMPLEXLY RELOCATABLE   OX00220 21560020
EQUER3   X5ERRL 216,CLMPTR,EQU200       ILLEGAL OPERAND FORMAT          21700020
EQUCPR   CLI   EVALSW1,*-*              EXECUTED CIRCULAR DEF CHEK      21720020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -21750020
               - ''ORG'' STATEMENT PROCESSOR'                           21760020
ORG100   L     R11,SYMDEF               GET SYMBOL DEFINITION POINTER   22050020
         GOIF  NAMPRS,OFF=ORG200        IS STATEMENT NAMED              22120020
         MVC   LOCATN,RLCTR             MOVE IN DEFINITION LOCATION     22190020
         B     ORG300                   GO GET ORG VALUE                22260020
ORG200   MVC   LOCATN,ELCTR              DATA, GET LOCATION COUNTER     22330020
ORG300   LH    R10,JINFILE              POINT TO INPUT FILE             22400020
         JGETL FILE=(R10)               GET ORG VALUE                   22470020
         MVC   ADDRS2(D4),RLCTR         MOVE ORGED VALUE TO PRINT       22540020
         GOIF  OPNPRS,OFF=ORG700        BRANCH IF OPERAND NOT PRESENT   22610020
         L     R10,OPNADR               GET OPERAND POINTER             22680020
         CLC   D0(2,R10),=AL1(JCOMMA,JBLANK) IS OPERAND MISSING?        22750020
         BE    ORG700                   BRANCH IF MISSING               22820020
         SET   PRDEFREQ,ON              TURN ON PRIORDEF REQ BIT        22890020
         MVC   DWORD2(1),RFLGB          SAVE FLAG BYTE                  22960020
         JCALL EVAL                     EVALUATE OPERAND FOR ERRORS     23030020
         BC    8,ORGERR1                ORG VALUE ABSOLUTE              23100020
         BC    4,ORG600                 IF ERROR BRANCH                 23170020
         BC    1,ORG400                 SYNTACTIC ERRORS                23240020
         CLI   D0(R14),JBLANK           IS DELIMITER BLANK?             23310020
         BNE   ORGERR2                  BRANCH IF NOT BLANK             23380020
         CH    R10,EESDI                SAME ESDID?                     23450020
         BNE   ORGERR3                  ESDID NOT ALIKE                 23520020
         GOIF  WRPFLG,ON=ORG500         DO NOT LOC OVERFLOW AGAIN       23570020
         C     R11,=A(X'FFFFFF')        DID LCTR WRAPPED?               23590020
         BH    ORGERR5                  YES, GO LOG ERROR               23660020
ORG500   TM    DWORD2,BIT0              ANY ERROR IN ORG OPERAND ?      23730020
         BNO   ORGERR4                  YES,GO LOG ERROR                23800020
ORG700   MVC   ELCTR,ADDRS2             PUT IN NEW LOCTR VALUE          23870020
ORG400   IC    R4,EESDI                 SAVE DSECT INDICATOR            23940020
         MVI   EESDI,BIT1+BIT2          INDICATE DSECT OR COM           24010020
         SR    R10,R10                  SET PRINT INDEX                 24080020
         SET   EOUBIT,ON                INDICATE ORG                    24150020
         BAL   R6,AOP450                GO PRINT RECORD                 24220020
         STC   R4,EESDI                 RESTORE ESD                     24290020
         SET   PRDEFREQ,OFF             RESET PRDEFREQ BIT              24360020
         B     AOP300                   EXIT                            24430020
ORGERR1  X5ERRL 174,0,ORG400            ORG VALUE ABSOLUTE              24500020
ORGERR2  X5ERRL 185,CLMPTR,ORG700       INCORRECT DELIMITER             24570020
ORGERR3  X5ERRL 173,0,ORG400            ESDID NOT ALIKE                 24640020
ORGERR4  X5ERRL 172,0,ORG400            ORG VALUE NEGATIVE              24710020
ORG600   CLI   EVALSW1,D0               ANY NON-SYSTACTIC ERROR?        24780020
         BNE   ORG400                   YES,BRANCH TO EXIT              24850020
         X5ERRL 213,CLMPTR,ORG400       LOG ERROR THEN EXIT             24920020
ORGERR5  SET   WRPFLG,ON                INDICATE WE LOGGED THE ERROR    24960020
         X5ERRL 246,0,ORG700            INVALID ORG OPERAND             25000020
         SPACE 3                                                        25060020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -25110020
               - ''CNOP'' STATEMENT PROCESSOR'                          25120020
CNOP00   LA    R2,D1                    GET MAXIMUM ALIGNMENT           25340020
         EX    R2,ALNTST                IS ALIGNMENT NECESSARY          25410020
         BZ    CNP100                   NO, SKIP                        25480020
         JCALL ALIGN                    GO ALIGN CNOP                   25550020
         OI    LHFLGS,ENTALN+D1         SET OUTPUT LENGTH AND FLAGS     25620020
         SR    R10,R10                  SET OUTPUT INDEX                25690020
         JCALL OUTPUT                   GO PRINT ALIGNMENT              25760020
CNP100   GOIF  OPNPRS,OFF=CNPER7        ERROR IF NO OPERAND             25830020
         L     R10,OPNADR               POINT TO OPERAND                25860020
         MVC   LOCATN,ELCTR             MOVE LOCATION TO LEFT HALF      25900020
         SET   PRDEFREQ,ON              TURN ON PRIORDEF REQ BIT        25970020
         JCALL EVAL                     CALL EVALUATION ROUTINE         26040020
         BNZ   CNPER1                   MUST BE ABSOLUTE                26110020
         SET   PRDEFREQ,OFF             TURN OFF PRIOEDEF REQ BIT       26180020
         GOIF  (R11),NEG=CNPER5         ERROR IF NEGATIVE               26250020
         CH    R11,=H'8'                IS VALUE VALID?                 26320020
         BNL   CNPER5                   VALUE ERROR IN OPERAND 1        26390020
         EX    R11,BITTST               IS OPERAND VALUE ODD            26410020
         BNZ   CNPER5                   YES, GO LOG ERROR               26430020
CNP150   LR    R4,R11                   SAVE FIRST OPERAND VALUE        26460020
         GOIF  D0(R14),JCOMMA,NE=CNPER2 CHECK SYNTAX - MUST BE A COMMA  26530020
         LA    R10,D1(,R14)             INITIALIZE EVAL POINTER         26600020
         SET   PRDEFREQ,ON              TURN PRIORDEF REQ BIT           26670020
         JCALL EVAL                     GO EVALUATE SECOND OPERAND      26740020
         BNZ   CNPER8                   MUST BE ABSOLUTE                26810020
         SET   PRDEFREQ,OFF             TURN OFF PRIORDEF REQ BIT       26880020
         CH    R11,=H'8'                IS SECOND OPERAND AN 8          26950020
         BE    CNP200                   YES, GO CHECK FIRST OPERAND     27020020
         CH    R11,=H'4'                IS IT 4                         27090020
         BNE   CNPER4                   NO, GO LOG ERROR                27160020
CNP200   CR    R4,R11                   IS OPERAND 1 NOT LESS THAN 2ND  27230020
         BNL   CNPER6                   YES, GO LOG ERROR               27440020
         GOIF  INVCNOP,OFF=CNP250       DO ALIGN IF CNOP OPERAND OK     27470020
         SET   INVCNOP,OFF              RESET BAD OPERAN INDICATOR      27490020
         B     AOP400                                                   27510020
CNP250   LNR   R2,R11                   COMPLEMENT  2ND OPERAND VALUE   27530020
         L     R1,ELCTR                 GET LOCATION COUNTER            27580020
         NR    R1,R2                    ALIGN IT TO PREVIOUS BOUNDARY   27650020
         AR    R1,R4                    ADD FIRST OPERAND BOUNDRY       27720020
         C     R1,ELCTR                 HAS ALIGNMENT REQUESTED CORRECT 27790020
         BNL   CNP300                   YES, ALIGNMENT COMPLETE         27860020
         AR    R1,R11                   NO, ADD SECOND OPERAND VALUE    27930020
CNP300   S     R1,ELCTR                 CALCULATE CNOP LENGTH           28000020
         EX    R1,ORLEN                 INDICATE OUTPUT LENGTH          28070020
         ST    R1,LOCLEN                SAVE CNOP LENGTH                28140020
         JCALL LOCUPD                   GO UPDATE LOCATION COUNTER      28210020
         MVC   DCDATA(D6),=X'070007000700'  MOVE IN PAD BYTES           28280020
         SET   ENTDC,ON                 SET PRINT FLAG                  28350020
         LA    R10,DC0OUT               GET PRINT INDEX                 28420020
         JCALL OUTPUT                   CALL PRINT                      28490020
         SET   DCMOP,ON                 SET MOP-UP SWITCH ON            28560020
         LA    R10,DC0OUT               GET DCPRINT INDEX               28630020
         JCALL OUTPUT                   CALL PRINT                      28700020
         B     AOP300                   GO CHECK ERROR FLAG             28770020
         SPACE                                                          28840020
CNPER1   SET   PRDEFREQ,OFF             TURN PRIORDEF REQ BIT OFF       28910020
         SET   INVCNOP,ON               INDICATE ERROR IN CNOP OPERAND  28940020
         X5ERRL 179,CLMPTR,CNP150       OPERAND NOT ABSOLUTE            28980020
         SPACE                                                          29050020
CNPER2   ST    R14,ERRPTR               SET COLUMN POINTER              29120020
         SET   INVCNOP,OFF              RESET CNOP OPERAND ERROR IND    29150020
         X5ERRL 178,CLMPTR,AOP400       COMMA EXPECTED                  29190020
         SPACE                                                          29260020
CNPER4   SET   INVCNOP,ON               INDICATE ERROR IN CNOP OPERAND  29330020
         X5ERRL 180,CLMPTR,CNP200       VALUE ERROR- SHOULD BE 4 OR 8   29360020
         SPACE                                                          29400020
CNPER5   SET   INVCNOP,ON               INDICATE ERROR IN CNOP OPERAND  29470020
         X5ERRL 181,CLMPTR,CNP150       VALUE ERROR OPERAND IS ODD      29500020
         SPACE                                                          29540020
CNPER6   SET   INVCNOP,OFF              RESET CNOP OPERAND ERROR IND    29610020
         X5ERRL 182,0,AOP400            OPERAND 2 LARGER THAN 1         29615020
CNPER7   SET   INVCNOP,OFF              RESET CNOP OPERAND ERROR IND    29620020
         X5ERRL 177,0,AOP400            OPERAND REQUIRED                29625020
CNPER8   SET   PRDEFREQ,OFF             TURN PRIORDEF REQ BIT OFF       29630020
         X5ERRL 179,CLMPTR,AOP400       OPERAND NOT ABSOLUTE            29640020
BITTST   TM    =X'01',D0                EXECUTEC LOW BIT TEST           29680020
         SPACE 3                                                        29750020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -29800020
               - ''CCW'' STATEMENT PROCESSOR'                           29810020
CCW100   LA    R2,D7                    GET ALIGNMENT CHECK BITS        30100020
         EX    R2,ALNTST                CHECK ALIGNMENT                 30170020
         BZ    CCW150                   NO ALIGNMENT REQUIRED           30240020
         JCALL ALIGN                    CALL ALIGNMENT ROUTINE          30310020
         L     R2,FULLWD                GET ALIGNMENT LENGTH            30380020
         EX    R2,ORLEN                 OR LENGTH INTO OUTPUT DATA      30450020
         SET   ENTALN,ON                TURN ON ALIGNMENT INDICATOR     30520020
         SR    R10,R10                  SET PRINT INDEX                 30590020
         JCALL OUTPUT                   GO PRINT LENGTH                 30660020
CCW150   MVC   LOCATN,ELCTR             MOVE IN ALIGNED LOCATION CTR    30730020
         XC    DCDATA(D8),DCDATA        CLEAR OBJECT CODE               30800020
         OI    LHFLGS,D8+ENTDC          INDICATE LENGTH                 31080020
         GOIF  OPNPRS,OFF=CCWER1        ERROR IF NO OPERAND             31130020
         L     R10,OPNADR               GET OPERAND POINTER             31150020
         JCALL EVAL                     EVALUATE OPERAND                31220020
         BNZ   CCWER2                   GO LOG ERROR IF OPERAND BAD     31290020
         CH    R11,=H'255'              IS VALUE TOO LARGE              31360020
         BH    CCWER3                   GO LOG ERROR IF IT IS           31430020
         LTR   R11,R11                  TEST FOR NEGATIVE VALUE         31500020
         BM    CCWER15                  ERROR IF NEGATIVE               31570020
CCW200   STC   R11,DCDATA               SAVE VALUE FOR OUTPUT           31640020
CCW225   GOIF  D0(R14),JCOMMA,NE=CCWER4 IS SYNTAX OK                    31710020
         LA    R10,D1(,R14)             STEP PAST COMMA                 31780020
         JCALL EVAL                     GO EVALUATE SECOND OPERAND      31850020
         ST    R11,DWORD2               SAVE VALUE                      31920020
         MVC   DCDATA+D1(D3),DWORD2+D1  MOVE VALUE TO OUTPUT AREA       31990020
         BC    ABSX,CCW250              SKIP RLD IF ABSOLUTE            32060020
         BC    ERRX,CCW250              SKIP RLD IF FATAL ERROR         32110020
         LR    R4,R14                   SAVE OPERAND SCAN POINTER       32130020
         L     R1,LOCATN                GET CCW LOCATION                32200020
         LA    R1,D1(,R1)               STEP FOR RLD LOCATION           32270020
         ST    R1,DWORD1                SAVE FOR RLD OUTPUT             32340020
         MVI   DWORD1,D0                SET RLD TYPE FLAG               32410020
         LA    R1,D3                    GET LENGTH                      32480020
         STH   R1,DWORD2                SAVE FOR RLD OUTPUT             32550020
         JCALL RLDOUT                   GO LOG RLD                      32620020
         LR    R14,R4                   RESTORE OPERAND SCAN POINTER    32690020
CCW250   L     R11,DWORD2               GET VALUE BACK                  32760020
         GOIF  (R11),NEG=CCWER14        ERROR IF NEGATIVE               32830020
         C     R11,=A(X'FFFFFF')        MAXIMUM VALUE                   32900020
         BH    CCWER14                  GO LOG ERROR                    32970020
CCW275   GOIF  D0(R14),JCOMMA,NE=CCWER6 COMMA EXPECTED                  33040020
         LA    R10,D1(,R14)             STEP PAST COMMA                 33110020
         JCALL EVAL                     GO EVALUATE THIRD OPERAND       33180020
         BNZ   CCWER7                   MUST BE ABSOLUTE                33250020
         CH    R11,=H'255'              IS VALUE TOO BIG                33460020
         BH    CCWER9                   YES, GO LOG ERROR               33530020
CCW300   STC   R11,DCDATA+D4            SAVE VALUE FOR OUTPUT           33600020
         TM    DCDATA+D4,BIT6+BIT7      IS BIT 38 AND 39 ZERO           33670020
         BNZ   CCWER8                   NO  - ERROR                     33720020
CCW325   GOIF  D0(R14),JCOMMA,NE=CCWER10 IS SYNTAX STILL OK             33730020
         LA    R10,D1(,R14)             STEP PAST COMMA                 33740020
         JCALL EVAL                     GO EMULATE FORUTH OPERAND       33810020
         BNZ   CCWER11                  MUST BE ABSOLUTE                33880020
         C     R11,=F'65535'            VALUE MUST FIT IN TWO BYTES     33950020
         BH    CCWER12                  LOG ERRER IF TOO LARGE          34020020
CCW400   STH   R11,DCDATA+D6            SAVE VALUE                      34090020
CCW425   GOIF  D0(R14),JBLANK,NE=CCWER13 IS SYSNTAX STILL OK            34160020
         SPACE                                                          34280020
CCW500   LA    R10,D8                   SET ALIGNMENT                   34290020
         ST    R10,LOCLEN               SAVE FOR LOCUPD                 34292020
         JCALL LOCUPD                   CALL LOCATION UPDATE            34294020
         LA    R10,DC0OUT               SET PRINT INDEX                 34295020
         JCALL OUTPUT                   CALL PRINT ROUTINE              34296020
         SET   DCMOP,ON                 INDICATE MOP-UP                 34297020
         LA    R10,DC0OUT               SET PRINT INDEX                 34298020
         B     AOP410                   GO DO DC MOP-UP PRINT CALL      34299020
ALNTST   TM    ELCTR+D3,D0              EXECUTED ALIGNMENT TEST         34300020
ORLEN    OI    LHFLGS,D0                EXECUTED OR OF ALIGNMENT LENGTH 34370020
CCWER1   MVC   ERRPTR,OPNADR            SET COLUMN POINTER              34510020
         X5ERRL 177,CLMPTR,CCW500       MISSING OPERAND                 34580020
CCWER2   X5ERRL 179,CLMPTR,CCW500       OPERAND NOT ABSOLUTE            34650020
CCWER3   X5ERRL 183,CLMPTR,CCW225       INVALID RANGE 255 MAXIMUM       34720020
CCWER4   X5ERRL 178,CLMPTR,CCW500       COMMA EXPECTED                  34790020
CCWER6   X5ERRL 178,CLMPTR,CCW500       COMMA EXPECTED                  34860020
CCWER7   X5ERRL 179,CLMPTR,CCW325       OPERAND NOT ABSOLUTE            34930020
CCWER8   X5ERRL 244,CLMPTR,CCW325       BIT 38 AND 39 NOT SERP          34980020
CCWER9   X5ERRL 183,CLMPTR,CCW325       INVALID RANGE 255 MAXIMUM       35070020
CCWER10  X5ERRL 178,CLMPTR,CCW500       COMMA EXPECTED                  35140020
CCWER11  X5ERRL  179,CLMPTR,CCW425      OPERAND NOT ABSOLUTE            35210020
CCWER12  X5ERRL 184,CLMPTR,CCW425       INVALID RANGE 65535 MAXIMUM     35280020
CCWER13  X5ERRL 185,CLMPTR,CCW500       INVALID DELIMITER               35350020
CCWER14  X5ERRL 241,CLMPTR,CCW275       INVALID RANGE X'FFFFFF' MAX     35420020
CCWER15  X5ERRL 243,CLMPTR,CCW500       CCW OPCODE NEGATIVE             35490020
         SPACE 3                                                        35560020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -35610020
               - ''DC && DS'' STATEMENT - CALL DC EVAL'                 35620020
*                                                                       35630020
*   DC STATEMENT - CALL DC EVAL                                         35680020
*                                                                       35690020
DC0100   BAL   R6,COMCALL               GO GET GOOD OPERAND COUNT       35840020
         L     R10,OPNADR               GET OPERAND ADDRESS             35910020
         JCALL DCEVAL                   CALL DC EVALUATION              35980020
         SET   DCMOP,ON                 TURN MOP-UP SWITCH              36050020
         LA    R10,DC0OUT               SET PRINT INDEX                 36120020
         JCALL OUTPUT                   GO COMPLETE DC OUTPUT           36190020
         JEXTRN (X5D01=DCEVAL)          DEFINE EXTERNAL SYMBOL          36260020
         B     AOP300                   EXIT TO MAINLINE                36330020
         SPACE 5                                                        36400020
*                                                                       36470020
*   DS STATEMENT - CALL DC EVAL                                         36540020
*                                                                       36610020
DS0100   SET   DSSW,ON                  INDICATE ENTRY IS A DS          36680020
         BAL   R6,COMCALL               GO GET GOOD OPERAND COUNT       36750020
         L     R10,OPNADR               POINT TO OPERAND                36820020
         JCALL DCEVAL                   CALL DC EVALUATION              36890020
         SET   DCMOP,ON                 SET MOP UP SWITCH ON            36960020
         LA    R10,DC0OUT               LOAD PRINT INDEX                37030020
         JCALL OUTPUT                   GO MOP UP DS                    37100020
         SET   DSSW,OFF                 TURN OFF DS SWITCH              37170020
         B     AOP300                   EXIT                            37240020
         SPACE 3                                                        37310020
      TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR- ASSEMBLY PHASE-37360020
               - ''START, CSECT, DSECT && COM'' STATEMENT PROCESSOR'    37370020
START0   L     R11,SYMDEF               GET DATA POINTER                37375020
DSECT0   EQU   START0                   DEFINE DSECT ENTRY POINT        37380020
COM100   EQU   START0                   DEFINE COM ENTRY POINT          37430020
CSECT0   EQU   START0                   DEFINE CSECT ENTRY POINT        37440020
         GOIF  NAMPRS,ON=STR100         IS CONTROL SECTOIN NAMED        37660020
         LH    R10,JINFILE              GET INPUT FILE NUMBER           37730020
         JGETL FILE=(R10)               GET RESOLUTION DATA             37800020
         SPACE                                                          37870020
STR100   GOIF  JTSTART,NE=STR110        ARE WE PROCESSING START CARD?   37940020
         TM    RFLGB,BIT0               IS IT VALID?                    38010020
         BO    STR110                   BRANCH AROUND IF YES            38080020
         X5ERRL 164,0                   INVALID START CARD              38150020
         SPACE                                                          38220020
STR110   MVC   ELCTR,RLCTR              START LOCATION COUNTER          38290020
         MVC   EESDI,RESDI              INITIALIZE ESD FOR THIS CSECT   38360020
         MVC   LOCATN,RLCTR             MOVE VALUE TO LEFT HALF PRINT   38430020
         CLC   ELCTR,=A(X'FFFFFF')      IS CSECT START LOC BELOW LIMIT  38480020
         BNH   AOP405                   YES , GO PRINT AND EXIT         38490020
         GOIF  WRPFLG,ON=AOP405         GO PRINT IF ALREADY LOGGED      38500020
         SET   WRPFLG,ON                INDICATE ERROR LOGGED           38550020
         X5ERRL 246,0                   LOG LOCATION COUNTER ERROR      38560020
         B     AOP405                   GO PRINT AND EXIT               38570020
         SPACE 3                                                        38850020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -38900020
               - ''ENTRY && EXTRN'' STATEMENT PROCESSOR'                38910020
ENTRY0   GOIF  OPNPRS,OFF=ENXER1        IS OPERAND BLANK                39130020
EXTRN0   EQU   ENTRY0                   DEFINE EXTRN ERTRY POINT        39200020
         L     R4,OPNADR                POINT TO THE OPERAND            39270020
ENX100   LR    R1,R4                    INITIALIZE SCAN REGISTER        39340020
         ST    R1,ERRPTR                SAVE OPERAND PTR FOR LOGGING    39410020
         GOIF  D0(R1),JALFAMIN,LT=ENXER2 FIRST CHARACTER NON-NUMERIC    39480020
ENX200   GOIF  D0(R1),JALFAMAX,GT=ENX300 IS CHARACTER LEGAL IN SYMBOL   39550020
         LA    R1,D1(,R1)               STEP TO NEXT CHARACTER          39620020
         B     ENX200                   CONTINUE SCAN                   39690020
ENX300   GOIF  D0(R1),JBLANK,EQ=ENX325  WAS DELIMITER A BLANK           39720020
         GOIF  D0(R1),JCOMMA,NE=ENXER2  NO, WAS DELIMITER A COMMA       39750020
ENX325   SR    R1,R4                    GET LENGTH OF SYMBOL            39780020
         BZ    ENXER2                   SHOULD NOT BE ZERO              39840020
         CH    R1,=H'8'                 IS SYMBOL 8 CHARACTERS OR LESS  39900020
         BH    ENXER4                   NO, GO LOG ERROR                39970020
         AR    R4,R1                    POINT TO DELIMITER              40040020
         LH    R10,JINFILE              POINT TO INPUT FILE             40110020
         JGETL FILE=(R10)               GET NEXT RECORD                 40180020
         GOIF  JTENTRY,EQ=ENX400        IS ENTRY AN ENTRY               40250020
         LA    R2,BASE                  INDICATE BASE FOR XREF          40320020
         GOIF  PRIORDEF,OFF=ENX350      IF NOT DUPLICATE BRANCH AROUND  40390020
         ST    R11,ERRPTR               STORE OPERAND POINTER           40460020
         X5ERRL 196,DTAPTR              LOG DUPLICATE NAME ERROR        40530020
         LA    R2,DUPL                  INDICATE DUP FOR XREF           40600020
         SPACE                                                          40670020
ENX350   JCALL XREF                     GO MAKE XREF                    40740020
         B     ENX500                   SKIP ENTRY ERROR CHECKING       40810020
ENX400   LA    R2,REF                   INDICATE REFERENCE FOR XREF     40880020
         JCALL XREF                     GO MAKE XREF FOR ENTRY          40950020
         TM    RFLGB,BIT2               VALID ENTRY?                    41020020
         BZ    ENXER6                   BRANCH IF ENTRY INVALID         41090020
ENX500   GOIF  D0(R4),JBLANK,EQ=AOP400  WAS DELIMITER A BLANK           41160020
         LA    R4,D1(,R4)               YES, STEP PAST COMMA            41300020
         B     ENX100                   CONTINUE SCAN                   41370020
         SPACE                                                          41440020
ENXER1   X5ERRL 177,0,AOP400            MISSING OPERAND                 41510020
         SPACE                                                          41580020
ENXER2   X5ERRL 186,CLMPTR,AOP400       INVALID SYMBOL                  41680020
         SPACE                                                          41790020
ENXER4   X5ERRL 187,CLMPTR,AOP400       INVALID SYMBOL - TOO LONG       41860020
         SPACE                                                          41930020
ENXER6   X5ERRL 189,0,ENX500            LOG ENTRY ERROR                 42000020
         SPACE                                                          42070020
         SPACE 3                                                        42210020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -42260020
               - ''CXD'' STATEMENT PROCESSOR'                           42270020
CXD100   LA    R2,D3                    GET MAXIMUM ALIGNMENT           42490020
         EX    R2,ALNTST                DO WE NEED TO ALIGN LOCATION    42560020
         BZ    CXD200                   NO, CONTINUE CXD PROCESSING     42630020
         GOIF  JALGN,OFF=CXD200         DON'T ALIGN IF NOALIGN OPTION   42660020
         JCALL ALIGN                    GO DETERMINE ALIGNMENT          42700020
         L     R2,FULLWD                SAVE ALIGNMENT LENGTH           42770020
         EX    R2,ORLEN                 INDICATE OUTPUT LENGTH          42840020
         SET   ENTALN,ON                INDICATE ALIGNMENT              42910020
         SR    R10,R10                  LOAD OUTPUT INDEX               42980020
         JCALL OUTPUT                   GO OUTPUT ALIGNMENT             43050020
CXD200   OI    LHFLGS,ENTDC+D4          SET LENGTH AND PRINT FLAGS      43120020
         MVC   LOCATN,ELCTR             MOVE LOCATION COUNTER TO PRINT  43190020
         LA    R1,D4                    GET LENGTH OF DXD               43260020
         ST    R1,LOCLEN                SAVE LENGTH                     43330020
         STH   R1,DWORD2                SAVE CXD LENGTH                 43400020
         JCALL LOCUPD                   UPDATE LOCATION COUNTER         43470020
         TM    EESDI,BIT1+BIT2+BIT3     ARE WE IN DSECT OR COMMON       43540020
         BNZ   AOP405                   BRANCH IF YES                   43610020
         MVC   DWORD1+D1(D3),LOCATN+D1  MOVE CXD LOCATION FOR OUTPUT    43680020
         MVI   DWORD1,BIT2+BIT3         SET CXD FLAGS                   43750020
         MVC   RLIST,EESDI              POSITION AND RELOCATION ID SAME 43820020
         MVI   RELOCTR,D1               INDICATE ONLY 1 ESDID.          43890020
         JCALL RLDOUT                   GO MAKE RLD ENTRY               43920020
         XC    D8(D2,R11),D8(R11)       SET RELID TO ZERO               43960020
         B     AOP405                   GO PRINT AND EXIT               44030020
         SPACE 3                                                        44100020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -44150020
               - ''LTORG'' STATEMENT PROCESSOR'                         44160020
LTORG0   LH    R1,LITPID                GET POOL ID                     44450020
         LA    R1,D1(,R1)               ADD 1                           44520020
         STH   R1,LITPID                STORE NEW POOL ID               44590020
LTO050   LA    R2,D7                    GET ALIGNMENT FACTOR            44660020
         EX    R2,ALNTST                IS ALIGNMENT NECESSARY          44730020
         BZ    LTO100                   NO, SKIP ALIGNMENT              44800020
         GOIF  JALGN,OFF=LTO100         DON'T ALIGN IF NOALIGN OPTION   44830020
         JCALL ALIGN                    YES, GO ALIGN LOCATION CTR      44870020
         SPACE                                                          45850020
LTO100   MVC   LOCATN,ELCTR             MOVE LOCATION FOR PRINTING      45920020
         GOIF  JTLTORG,NE=LTO200        IS IT A LTORG STATEMENT?        45990020
         SR    R10,R10                  SET PRINT INDEX                 46060020
         JCALL OUTPUT                   GO PRINT RECORD                 46130020
         GOIF  JERR,OFF=LTO200          ANY ERROR IN LTORG STMNT        46200020
         LA    R10,ERROUT               YES  LOAD PRINT INDEX           46250020
         JCALL OUTPUT                   GO PRINT ERROR FLAG             46260020
LTO200   L   R2,ELCTR                   IS LOCATION COUNTER GREATHER    46262020
         C     R2,=A(X'FFFFFF')         THAN MAXIMUM                    46264020
         BNH   LTO210                                                   46266020
         GOIF  WRPFLG,ON=LTO210         FORGET ERROR IF ALREADY LOGGED  46268020
         SET   WRPFLG,ON                INDICATE LCTR ERROR LOGGED      46268420
         X5ERRL  246,0                  LOG - LOCATION COUNTER ERROR    46268820
         LA    R10,ERROUT                                               46269220
         JCALL OUTPUT                   PRINT *** ERROR ***             46269620
LTO210   LH    R10,JINFILE              POINT TO SYMBOL DATA FILE       46269720
         JGETL FILE=(R10)               GET NEXT RECORD                 46270020
         GOIF  JTEND,EQ=LTO300          ARE WE PROCESSING END CARD?     46340020
         LR    R5,R11                   SAVE TEXT POINTER               46410020
         GOIF  JTADJII,EQ=LITR00        IS ENTRY A LITERAL DC           46550020
         GOIF  JTLTEND,EQ=AOP310        NO, IS IT END OF LITERAL POOL   46620020
         X5ERRL 167,0,AOP310            SYMBOL FILE OUT OF SYNC         46760020
         SPACE                                                          46830020
LTO300   CLI  RTYPE,JTLTEND             IF LITERAL END, THEN EXIT       46900020
         BC    8,AOP310                 YES,EXIT                        46970020
         MVC   ELCTR,RLCTR              RESUMED LOCATION COUNTER        47040020
         MVC   EESDI,RESDI              RESUME ESDID                    47110020
         MVI   JTIOP1,X'00'             ZEROED OUT OPCODE               47180020
         B     LTO050                   GO CHECK ALIGNMENT              47250020
         SPACE 3                                                        47320020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -47370020
               - ''LITR'' STATEMENT PROCESSOR'                          47380020
LITR00   L     R1,STMTN                 GET STATEMENT NUMBER            47600020
         LA    R1,1(,R1)                INCREMENT 1                     47670020
         C     R1,=F'65535'             IS IT THE LIMIT ?               47740020
         BNH   LITR05                   NO,BRANCH AROUND                47810020
         SR    R1,R1                    YES START FROM ZERO             47880020
         SPACE                                                          47950020
LITR05   ST    R1,STMTN                 SAVE IT                         48020020
         MVC   LITRSD,JTNMP             SAVE LITR * LOCATION            48090020
         MVC   LITRLC,JTOCP             SAVE LITR * ESD                 48160020
         MVI   SYMCNT,D0                ZERO NUMBER OF SYMBOLS THIS REC 48230020
         SET   LITRSW,ON                INDICATE A LITR FOR DCEVAL      48300020
         SR    R2,R2                    CLEAR REGISTER                  48370020
         LH    R2,RRCDL                 GET RECORD LENGTH               48420020
         BCTR  R2,0                     MAKE IT MOVE LENGTH             48430020
         CH    R2,=H'255'               LONGER THAN MAX MOVE LENGTH     48430220
         BNH   LITR10                  NO MOVE WILL WORK                48430420
         SH    R2,=H'256'               COMPUTE REMAINDER               48430620
         EX    R2,LITMOV2               MOVE REMAINDER                  48430820
         LH    R2,=H'255'               MOVE FIRST 256 BYTES            48431020
LITR10   EQU   *                                                        48431220
         EX    R2,LITMOV                MOVE LITERAL TO X5ATEMP         48432020
         SR    R2,R2                    CLEAR REGISTER                  48434020
         IC    R2,RLNGA                 GET MACHINE LENGTH OF LITERAL   48440020
         LA    R5,X5ALIT                TREAT IT AS TEXT FILE RECORD    48490020
         EX    R2,LITMVX                MOVE LITERAL IN RECORD  OX00222 48500026
         MVC   JTRLI(D23),=AL1(0,0,0,0,X'2C',0,0,18,0,18,0,20,0,18,0,18*48560026
               ,0,0,0,0,16,0,JEQUAL)    BUILT TEXT REC FOR LIT  OX00222 48570026
         MVC   JTFLGA(D1),RFLGA         MOVE IN FLAG A          OX00222 48572026
         LA    R2,D1(R2)                INCREMENT BY 1          OY01863 48572402
         STC   R2,D21(R5)               INSERT LIT TRUE LENGTH  OX00222 48574026
         LA    R1,D23(R2)               COMPUTE REC LENGTH      OX00222 48576026
         STH   R1,JTRLI                 PUT IN REC LENGTH       OX00222 48578026
         LH    R10,JOUTFILE             POINT TO OUTPUT FILE            48860020
         JPUTL FILE=(R10),BUFREQ=(R1)   LOCATE NEXT BUFFER              48930020
         USING XRFIN,R11                XREF RECORD USING               49000020
         LA    R1,D20(R2)               COMPUTE LENGTH                  49070020
         STH   R1,XRECLN                PUT IN DEFINITION RECORD        49140020
         MVC   XFLAG(4),=AL2(0,LITTYPE*256)  XREF RECORD HEADER         49210020
         STC   R2,LITDTL                PUT IN LITERAL LENGTH           49350003
         BCTR  R2,0                     GIVE TRUE LENGTH        OX00086 49360003
         EX    R2,LITRMV                MOVE LITERAL TO RECORD  OX00086 49400003
         MVC   XRFSYM(D4),ELCTR         MOVE LOCATION TO XREF RECORD    49420020
         MVC   XRFSYM+D4(D2),EESDI      MOVE ESD TO XREF RECORD         49490020
         MVC   XRFSYM+6(1),LITPID+1     MOVE LITPOOL ID TO XREF RECORD  49560020
         MVI   XRFSYM+7,X'00'           ZEROED OUT BYTE                 49630020
         MVI   XRFFLG,BASE              INDICATE BASE REFERENCE         49700020
         MVC   XRFSTM,STMTN+D2          STATEMENT NUMBER TO RECORD      49770020
         SR    R10,R10                  CLEAR REGISTER                  49840020
         IC    R10,JTFLGA               GET LENTH ATTRIBUTE             49910020
         LA    R10,D1(,R10)             INCREMENT BY 1                  49980020
         STH   R10,LCTRSAV              SAVE FOR MOVING                 50050020
         MVC   XRFLEN,LCTRSAV           MOVE TO XREF RECORD             50120020
         SPACE                                                          50190020
         LH    R1,JTRLI                 GET RECORD LENGTH               50260020
         LA    R10,D23(R5)              POINT AT EXPRESSION     OX00222 50330026
         ST    R10,OPNADR               SAVE OPERAND ADDRESS            50400020
         ST    R5,TXTPTR                SAVE LITERAL TEXT PTR           50470020
         AR    R1,R5                    ADD RECORD LENGTH TO RECORD PTR 50540020
         ST    R1,OPNEND                SAVE OPERAND END                50610020
         SET   (DCSWH,DCCOMP,DCMOP,DCSTRT),OFF TURN OFF ALL DC FLAGS    50660020
         JCALL DCEVAL                   GO TO DC EVALUATION ROUTINE     50680020
         SET   LITRSW,OFF               TURN OFF LITERAL SWITCH         50750020
         SET   DCMOP,ON                 TURN MOP-UP SWITCH ON           50820020
         LA    R10,DC0OUT               GET DC PRINT INDEX              50890020
         JCALL OUTPUT                   CALL OUTPUT                     50960020
         GOIF  JERR,OFF=LTO200          ANY ERRORS FLAGGED?             51030020
         LA    R10,ERROUT               LOAD ERROR FLAG INDEX           51100020
         SET   PERR,OFF                 TURN PRINT ERROR FLAG  OFF      51170020
         JCALL OUTPUT                   GO PRINT ERROR FLAG             51240020
         B     LTO200                   GO SEE IF THERE IS MORE LITR'S  51310020
LITRMV   MVC   LITDTA(0),D22(R5)        MOVE LITERAL            OX00222 51380026
LITMOV   MVC   X5ALIT(0),D0(R11)        MOVE LITERAL RECORD TO X5ALIT   51430020
LITMOV2  MVC   X5ALIT+256(0),256(R11)   MOVE FIRST 256 IF TOO LONG      51440020
LITMVX   MVC   D23(0,R5),D13(R11)       REBUILT LIT REC         OX00222 51442026
         SPACE 3                                                        51450020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -51500020
               - ''PUNCH'' && ''REPRO'' STATEMENT PROCESSOR'            51510020
*                                                                       51520020
*   PUNCH STATEMENT PROCESSING                                          51570020
*                                                                       51580020
PUNCH0   BAL   R6,AOP440                GO PRINT PUNCH STATEMENT        51730020
         BAL   R6,AOP500                GO CLEAR DUPLICATE QUOTES       51800020
         GOIF  TPTEXT,ON=PUNCH3         FORGET PUNCH IF OPERAND ERROR   51920020
         CH    R11,=H'80'               IS LENGTH > 80?                 51940020
         BNH   PUNCH1                   BRANCH AROUND IF NOT HIGH       52010020
PUNER1   X5ERRL 165,0,AOP300            LOG PUNCH OPERAND ERROR         52080020
         SPACE                                                          52150020
PUNCH1   LTR   R11,R11                  IS LENGTH =0?                   52220020
         BZ    PUNER1                   IF YES GO LOG ERROR             52290020
         GOIF  JSYSGEN,OFF=PUNCH2       NEED TO CHECK? NO,BRANCH        52360020
         GOIF  JPRESD,ON=AOP300         RECORD PUNCHED ALREADY?         52430020
         SPACE                                                          52500020
PUNCH2   LA    R10,PUNOUT               LOAD PUNCH INDEX                52570020
         B     AOP410                   GO PUNCH STATEMENT              52640020
         SPACE                                                          52650020
PUNCH3   SET   TPTEXT,OFF               RESET BAD OPERAND INDICATOR     52690020
         B     AOP300                   GET OUT                         52700020
         SPACE 3                                                        52710020
*                                                                       52780020
*   REPRO STATEMENT PROCESSING                                          52850020
*                                                                       52920020
REPRO0   LA    R10,RPOOUT               LOAD INDEX FOR REPRO CARD       52990020
         B     AOP410                   GO PUNCH AND PRINT              53060020
         SPACE 3                                                        53130020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -53180020
               - ''PUSH'' STATEMENT PROCESSOR'                          53190020
PUSH00   GOIF  OPNPRS,OFF=PUSHR1        ERROR NO OPERAND                53200020
         L     R4,OPNADR                POINT TO OPERAND                53270020
PSH100   CLC   D0(D5,R4),PSPOUS         PUSH USING                      53340020
         ST    R4,ERRPTR                SAVE COLUMN PTR                 53410020
         BE    PSH400                   YES, GO PUSH USING DOWN LEVEL   53480020
         CLC   D0(D5,R4),PSPOPR         PUSH PRINT                      53550020
         BNE   PUSHR2                   NO - REQUEST INVALID            53620020
         LH    R1,PRPU                  GET PRINT PUSH COUNT            53690020
         CH    R1,=AL2(PUPOLV)          DOES REQUEST EXCEED LEVEL       53760020
         BNL   PUSHR3                   YES, GO LOG ERROR               53830020
         LA    R2,PRPU+D2(R1)           POINT TO PUSH PRINT SAVE AREA   53900020
         MVC   D0(D1,R2),PRINTSW        SAVE PRINT SWITCHES             53970020
         LA    R1,D1(,R1)               STEP COUNT BY 1                 54040020
         STH   R1,PRPU                  SAVE NEW LEVEL COUNT            54110020
         GOIF  PSTMT,ON=PSH200          IF PRINT ON OK                  54130020
         SET   PRPP,ON                  ELSE FORCE PRINT OF PUSH        54150020
PSH200   GOIF  D5(R4),JBLANK,EQ=AOP400  OPERAND FOLLOWED BY A BLANK     54180020
         GOIF  D5(R4),JCOMMA,NE=PUSHR4  NO, IS COMMA FOLLOWING          54250020
         LA    R4,D6(,R4)               YES, STEP TO NEXT OPERAND       54320020
         B     PSH100                   CONTINUE SCAN                   54390020
PSH400   LH    R1,USPHL                 GET USING PUSH DOWN LEVEL       54460020
         CH    R1,=AL2(PUPOLV)          IN MAX. LEVEL EXCEEDED          54530020
         BNL   PUSHR3                   YES,ERROR                       54600020
         LA    R1,D1(,R1)               STEP LEVEL COUNT                54670020
         STH   R1,USPHL                 SAVE NEW COUNT                  54740020
         MH    R1,=AL2(USTL)            POINT TO SPACE TO PUSH          54810020
         LA    R1,USINGT(R1)             USING TABLE                    54880020
         MVC   D0(USTL,R1),USINGT       SAVE USING TABLE                54950020
         B     PSH200                   CONTINUE SCAN                   55020020
         SPACE                                                          55090020
PUSHR1   MVC   ERRPTR,OPNADR            SET COLUMN PTR                  55160020
         X5ERRL 177,CLMPTR,AOP400       MISSING OPERAND                 55230020
         SPACE                                                          55300020
PUSHR2   X5ERRL 190,CLMPTR,AOP400       UNDEFINED PUSH REQUEST          55370020
         SPACE                                                          55440020
PUSHR3   X5ERRL 191,CLMPTR,AOP400       PUSH LEVEL EXCEEDED - PRINT     55510020
         SPACE                                                          55580020
PUSHR4   X5ERRL 185,CLMPTR,AOP400       INVALID DELIMITER -BLANK        55650020
         SPACE 3                                                        55720020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -55770020
               - ''POP'' STATEMENT PROCESSOR'                           55780020
POP100   GOIF  OPNPRS,OFF=POPER1        DOES POP HAVE AN OPERAND        55790020
         L     R4,OPNADR                POINT TO OPERAND                55860020
POP200   CLC   D0(D5,R4),PSPOUS         ARE WE POPING USING             55930020
         ST    R4,ERRPTR                SAVE COLUMN PTR                 56000020
         BE    POP400                   YES, GO MOVE USING UP A LEVEL   56070020
         CLC   D0(D5,R4),PSPOPR         POP PRINT REQUESTED             56140020
         BNE   POPER2                   NO, ERROR UNDEFINED OPERATION   56210020
         LH    R1,PRPU                  GET PRINT PUSH LEVEL            56280020
         LTR   R1,R1                    IS TI ZERO                      56350020
         BZ    POPER3                   YES, EXCEEDED PUSH LEVEL        56420020
         BCTR  R1,0                     DECREMENT COUNT                 56490020
         LA    R2,PRPU+D2(R1)           POINT TO LAST LEVEL SAVED       56560020
         MVC   PRINTSW,D0(R2)           RESTORE PREVIOUS PRINT SWITCH   56630020
         STH   R1,PRPU                  SAVE NEW PUSH COUNT             56700020
         GOIF  PSTMT,ON=POP300          IF PRINT ON OK                  56720020
         SET   PRPP,ON                  ELSE FORCE PRINT OF POP         56740020
POP300   GOIF  D5(R4),JBLANK,EQ=AOP400  IS PUSH OPERAND FOLLOWED BLANK  56770020
         GOIF  D5(R4),JCOMMA,NE=POPER4  NO, CHECK COMMA - IF NO ERROR   56840020
         LA    R4,D6(,R4)               YES, POINT TO NEXT OPERAND      56910020
         B     POP200                   CONTINUE SCAN OF OPERAND        56980020
POP400   LH    R1,USPHL                 GET USING PUSH LEVEL            57050020
         LTR   R2,R1                    SAVE AND TEST FOR ZERO          57120020
         BZ    POPER3                   NO MORE LEVEL TO POP            57190020
         MH    R1,=AL2(USTL)            POINT TO USING PUSH DOWN        57260020
         LA    R1,USINGT(R1)             SEGMENT FOR RESTORE            57330020
         MVC   USINGT(USTL),D0(R1)      RESTORE USING TABLE             57400020
         BCTR  R2,0                     DECREMENT PUSH DOWN LEVEL       57470020
         STH   R2,USPHL                 SAVE NEW PUSH COUNT             57540020
         B     POP300                   CONTINUE SCAN                   57610020
         SPACE                                                          57680020
POPER1   MVC   ERRPTR,OPNADR            SET COLUMN PTR                  57750020
         X5ERRL 177,CLMPTR,AOP400       MISSING OPERAND                 57820020
         SPACE                                                          57890020
POPER2   X5ERRL 192,CLMPTR,AOP400       INVALID (UNDEFINED) POP REQUEST 57960020
         SPACE                                                          58030020
POPER3   X5ERRL 193,CLMPTR,AOP400       NO LEVEL LEFT TO POP FOR PRINT  58100020
         SPACE                                                          58170020
POPER4   X5ERRL 185,CLMPTR,AOP400       INVALID DELIMITER - BLANK       58240020
PUPOLV   EQU   4                        PUSH LEVEL MAXIMUM              58310020
USTL     EQU   (17*8)                   USING TABLE LENGTH              58380020
PSPOUS   JGENIN 'USING'                 INTERNAL DC -USING-             58450020
PSPOPR   JGENIN 'PRINT'                 INTERNAL DC -PRINT-             58520020
         SPACE 3                                                        58590020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -58640020
               - ''PRINT'' STATEMENT PROCESSOR'                         58650020
PRINT0   IC    R2,PRINTSW               SAVE PRINT SWITCH               58870020
         SET   (PSTMT,PGEN),ON          FORCE PRINT ON                  58940020
         BAL   R6,AOP440                GO PRINT PRINT STATEMENT        59010020
         STC   R2,PRINTSW               RESTORE PRINT SWITCH            59080020
         GOIF  OPNPRS,OFF=PRTER1        GO LOG ERROR IF NO OPERAND      59150020
         L     R10,OPNADR               GET OPERAND POINTER             59220020
         L     R11,OPNEND               GET OPEREND END                 59290020
         SR    R14,R14                  ZERO REGISTER TO CLEAR 3 BYTES  59360020
PRT100   LA    R15,PRTBL                POINT TO POSSIBLE PRINT OPERNDS 59430020
         CR    R10,R11                  ARE WE TO THE END OF OPERAND    59500020
         BNL   PRT350                   YES,GO LOG ERROR                59570020
PRT300   IC    R14,D0(,R15)             GET LENGTH OF TABLE ENTRY       59640020
         EX    R14,PRTCLC               IS THIS THE PRINT OPTION        59710020
         BE    PRT400                   YES, GO SET PRINT FLAGS         59780020
         LA    R15,D3(R14,R15)          POINT TO NEXT TABLE ENTRY       59850020
         GOIF  D0(R15),BITFF,NE=PRT300  HAVE WE SCANNED THE WHOLE TABLE 59920020
         SPACE                                                          59990020
PRT350   ST    R10,ERRPTR               SAVE OPERAND COLUMN PTR         60060020
         X5ERRL 194,CLMPTR,AOP300       INVALID PRINT REQUEST           60130020
PRT400   ST    R10,ERRPTR               SAVE ERROR PTR                  60180020
         LA    R10,D1(R14,R10)          POINT TO NEXT OPERAND           60190020
         GOIF  D0(R10),JBLANK,EQ=PRT450 OK IF DELIMITED BY BLANK        60200020
         GOIF  D0(R10),JCOMMA,NE=PRTER2 ERROR IF NOT DELIMITED BY COMMA 60250020
         SPACE                                                          60260020
PRT450   TM    D1(R15),BIT7             HOW TO TURN FLAG                60270020
         BO    PRT600                   GO TO TURN FLAG OFF             60320020
         OC    PRINTSW,D1(R15)          TURN FLAG ON                    60330020
         SPACE                                                          60340020
PRT500   GOIF  D0(R10),JCOMMA,NE=AOP300  FINISH IF NOT COMMA            60390020
         LA    R10,D1(R10)              STEP PASS COMMA                 60400020
         B     PRT100                   GO SCAN NEXT OPERAND            60410020
PRT600   NC    PRINTSW,D1(R15)          TURN OF FLAG                    60760020
         B     PRT500                   GO STEP TO NEXT OPERAND         60830020
PRTER1   X5ERRL 177,0,AOP300            NO OPERAND                      60900020
PRTER2   X5ERRL 185,CLMPTR,AOP300       INVALID DELIMITER               60970020
PRTCLC   CLC   D0(0,R10),D2(R15)        COMPARE EXECUTED ABOVE          61040020
PRTBL    DC    AL1(L'GON-1)             LENGTH OF 'ON' -1               61110020
         DC    AL1(PSTMT)               OR FLAG TO TURN ON PSTMT        61180020
GON      JGENIN 'ON'                    ON - INTERNAL                   61250020
         DC    AL1(L'GOFF-1)            LENGTH OF 'OFF' -1              61320020
         DC    AL1(BITFF-PSTMT)         AND FLAG TO TURN OF PSTMT       61390020
GOFF     JGENIN 'OFF'                   OFF - INTERNAL                  61460020
         DC    AL1(L'GGEN-1)            LENGTH OF 'GEN' -1              61530020
         DC    AL1(PGEN)                OR FLAG TO TURN ON PGEN         61600020
GGEN     JGENIN 'GEN'                   GEN - INTERNAL                  61670020
         DC    AL1(L'GDATA-1)           LENGTH OF 'DATA' -1             61740020
         DC    AL1(PDATA)               OR FLAG TO TURN ON PDATA        61810020
GDATA    JGENIN 'DATA'                  DATA - INTERNAL                 61880020
         DC    AL1(L'GNOGN-1)           LENGTH OF 'NOGEN' -1            61950020
         DC    AL1(BITFF-PGEN)          AND FLAG TO TURN OFF PGEN       62020020
GNOGN    JGENIN 'NOGEN'                 NOGEN-INTERNAL                  62090020
         DC    AL1(L'GNODTA-1)          LENGTH OF 'NODATA' -1           62160020
         DC    AL1(BITFF-PDATA)         AND FLAG TO TURN OFF PDATA      62230020
GNODTA   JGENIN 'NODATA'                                                62300020
         DC    AL1(BITFF)                                               62370020
         SPACE 3                                                        62440020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -62490020
               - ''USING'' STATEMENT PROCESSOR'                         62500020
USING0   GOIF  OPNPRS,ON=USI050         OPERAND PRESENT?                62720020
         X5ERRL 210,0,AOP405            LOG ERROR AND EXIT              62790020
         SPACE                                                          62860020
USI050   XC    LHSAVE(2),LHSAVE         CLEAR SAVE AREA                 62930020
         L     R10,OPNADR               GET OPERAND POINTER             63000020
         ST    R10,ERRPTR               SAVE COLUMN PTR                 63070020
         GOIF  D0(R10),JASTER,GT=USI800 IS 1ST OPERAND PRESENT?         63140020
         LH    R2,LHSAVE                GET OPERAND COUNT               63210020
         LA    R2,D1(R2)                INCREMENT BY 1                  63280020
         STH   R2,LHSAVE                STORE OPERAND COUNT             63350020
         BAL   R6,AOP600                GO EVALUATE FIRST OPERAND       63420020
         BC    CMPX+ERRX,USI900         IS 1ST OPERAND VALID?           63490020
         LR    R6,R11                   SAVE REGISTER                   63560020
         LTR   R11,R11                  IS VALUE NEGATIVE               63630020
         BNM   USI085                   NO,BRANCH AROUND                63700020
         LCR   R6,R11                   COMPLEMENT VALUE                63770020
         SPACE                                                          63840020
USI085   STM   R10,R11,DWORD1           SAVE ESD AND VALUE              63980020
         GOIF  D0(R14),JCOMMA,NE=USI600 IF NOT A COMMA-SYNTATIC ERROR   64050020
         MVC   ADDRS2(D4),DWORD1+D4     MOVE VALUE TO LEFT HALF         64120020
         SET   EOUBIT,ON                INDICATE NO LOCTR IN LISTING    64170020
USI100   LA    R10,D1(,R14)             POINT TO NEXT OPERAND           64190020
         LH    R2,LHSAVE                GET OPERAND COUNT               64260020
         LA    R2,D1(R2)                INCREMENT OPERAND COUNT BY 1    64330020
         STH   R2,LHSAVE                STORE OPERAND COUNT             64400020
         CH    R2,=H'17'                TOO MANY OPERAND?               64470020
         BNH   USI110                   NO,BRANCH AROUND                64540020
         X5ERRL 211,0,AOP405            LOG ERROR AND EXIT              64610020
         SPACE                                                          64680020
USI110   BAL   R6,AOP600                GO EVALUATE                     64750020
         BNZ   USI700                   GO LOG ERROR IF NOT ABSOLUTE    64820020
         STH   R11,DWORD2               SAVE REGISTER NUMBER            64890020
         CL    R11,=A(HIREG)            IS REGISTER NUMBER TO HIGH      64960020
         BH    USI700                   YES, GO LOG ERROR               65030020
         GOIF  (R11),ZERO=USI500        IS REGISTER NUMBER ZERO         65100020
USI120   LA    R4,USINGT                POINT TO USING TABLE            65170020
         USING UESD,R4                  ESTABLISH USING FOR USING TABLE 65240020
         LR    R1,R14                   SAVE OPERAND TERMINATOR POINTER 65310020
USI200   TM    UREG,X'0F'               ARE WE TO THE END OF   @OX08876 65380005
         BO    USI300                    TABLE - YES, TRM SCN  @OX08876 65450005
         CLC   UREG,DWORD2              NO, CHECK REGISTER              65520020
         BE    USI320                   BRANCH IF REPLACING REGISTER    65590020
         LA    R4,USNXT                 POINT TO NEXT ENTRY             65660020
         B     USI200                   CONTINUE SCAN                   65730020
USI300   XC    USNXT(USSL),USNXT        MAKE SURE END OF TABLE DEFINED  65800020
         MVI   USNXT+D6,X'0F'           IND END OF TABLE       @OX08876 65850005
USI320   MVC   UESD(USSL),DWORD1+D2     MOVE IN NEW USING ENTRY         65870020
         NC    UESD,UESD                IS ESD ZERO                     65940020
         BNZ   USI340                   NO, NOT ABSOLUTE                66010020
         SET   ABSUS,ON                 TURN ABSOLUTE USING SWITCH      66080020
USI340   LA    R6,USINGT                PREPARE FOR BUBBLE SORT         66150020
         USING JTEXTA,R4                RE-ESTABLISH OPERAND USING      66220020
         USING UESD,R6                  CHANGE USING FOR USING TABLE    66290020
         SET   USSRT,OFF                TURN OFF SORT SWITCH            66360020
USI360   TM    USNXT+D6,X'0F'           HAVE WE  END OF TABLE  @OX08876 66430005
         BO    USI400                   YES, SORT COMPLETE?    @OX08876 66500005
         CLC   UESD(2),USNXT            COMPARE ESD'S                   66570020
         BL    USI380                   GO TO EXCHANGE IF LOW           66640020
         BH    USI370                   GO TO NEXT IF HIGH              66710020
         L     R15,UVAL                 GET USING VALUE                 66780020
         C     R15,USNXT+D2             COMPARE VALUES                  66850020
         BL    USI380                   GO TO EXCHANGE IF LOW           66920020
         BH    USI370                   GO TO NEXT ENTRY IF HIGH        66990020
         CLC   UREG+D1(1),USNXT+D7      COMPARE REGISTER NR    @OX08876 67060005
         BL    USI380                   NO, GO EXCHANGE ENTRIES         67130020
USI370   LA    R6,USNXT                 STEP TO NEXT ENTRY              67200020
         B     USI360                   CONTINUE SORT                   67270020
USI380   XC    UESD(USSL),USNXT         EXCHANGE (SORT)                 67340020
         XC    USNXT(USSL),UESD           ENTRIES                       67410020
         XC    UESD(USSL),USNXT             IN USING TABLE              67480020
         SET   USSRT,ON                 TURN ON SORT FLAG               67550020
         B     USI370                   GO CONTINUE SORT                67620020
USI400   GOIF  USSRT,ON=USI340          IS SORT COMPLETE                67690020
USI420   EQU   *                        STEP TO NEXT OPERAND            67760020
         GOIF  D0(R14),JBLANK,EQ=AOP405  ARE WE AT THE END OF OPERAND   67900020
         GOIF  D0(R14),JCOMMA,NE=USI600  IS TERMINATOR A COMMA          67970020
         L     R2,DWORD1+D4             YES, GET VALUE                  68040020
         AH    R2,=H'4096'              ADD 4096 FOR SECOND USING       68110020
         ST    R2,DWORD1+D4             SAVE NEW VALUE                  68180020
         B     USI100                   GO GET NEXT REGISTER            68250020
USI500   CLC   LHSAVE(2),=H'2'          IS REGISTER ZERO THE FIRST OPRA 68320020
         BNE   USI700                   NO,GO LOG ERROR                 68390020
         XC    DWORD1+D4(L'UVAL),DWORD1+D4 NO, ZERO VALUE               68600020
         B     USI120                   GO ENTER ENTRY                  68670020
USI600   X5ERRL 178,CLMPTR,AOP405       SYNTAX ERROR                    68740020
USI700   X5ERRL 195,CLMPTR,AOP405       INVALID REGISTER                68810020
USI800   X5ERRL 216,CLMPTR,AOP405       ILLEGAL FORMAT                  68880020
USI900   X5ERRL 217,CLMPTR,AOP405       RELOCATABILITY ERROR            68950020
         SPACE 3                                                        69090020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -69140020
               - ''DROP'' STATEMENT PROCESSOR'                          69150020
DROP00   L     R10,OPNADR               GET OPERAND POINTER             69370020
         GOIF  OPNPRS,OFF=DRP400        DROP ALL IF OPERAND EMPTY       69440020
         CLC   D0(2,R10),=AL1(JCOMMA,JBLANK) IS OPERAND MISSING?        69510020
         BE    DRP400                   BRANCH IF YES                   69580020
         GOIF  D0(R10),JASTER,GT=DRP800 IS OPERAND MISSING?             69650020
DRP100   BAL   R6,AOP600                GO EVALUATE OPERAND             69720020
         BNZ   DRP700                   EVAL ERRORS OR RELOCATABLE      69790020
         CL    R11,=A(HIREG)            IS REGISTER VALID               69860020
         BH    DRP700                   NO GO LOG ERROR                 69930020
         LA    R4,USINGT                POINT TO USING TABLE            70000020
         DROP  R6                       ELIMINATE USING THIS REGISTER   70070020
         USING UESD,R4                  DEFINE USING FOR TABLE SCAN     70140020
DRP200   TM    UREG,X'0F'               IS SCAN COMPLETE       @OX08876 70210005
         BO    DRP500                   YES8 REG NOT IN USE    @OX08876 70280005
         CH    R11,UREG                 IS THIS REGISTER TO BE DROPPED  70350020
         BE    DRP300                   REGISTER FOUND GO DELETE        70420020
         LA    R4,USNXT                 STEP TO NEXT ENTRY              70490020
         B     DRP200                   CONTINUE SCAN                   70560020
DRP300   LA    R2,USINGT+USSL*(HIREG+D2)-D1  POINT END OF TABLE         70630020
         SR    R2,R4                    GET MOVE LENGTH REMAINDER TABLE 70700020
         BNH   DRPABT                   ABORT SOMETHING IS WRONG        70770020
         EX    R2,DRPMVC                OVERLAY DROPED REGISTER         70840020
DRP350   GOIF  D0(R14),JBLANK,EQ=AOP400 REGISTER(S) DROPPED EXIT        70910020
         GOIF  D0(R14),JCOMMA,NE=DRP600 INVALID SYNTAX                  70980020
         LA    R10,D1(,R14)             POINT TO NEXT OPERAND           71050020
         B     DRP100                   GO REPEAT PROCESS               71120020
DRP400   XC    USINGT(USSL),USINGT      INITAILIZE USING TABLE          71190020
         MVI   USINGT+D6,X'0F'          IND END OF TABLE       @OX08876 71240005
         SET   ABSUS,OFF                TURN OFF ABSOLUTE USING SWITCH  71260020
         B     AOP400                   GO PRINT AND EXIT               71330020
DRP500   X5ERRL 195,CLMPTR,AOP400       INVALID REGISTER                71400020
DRP600   X5ERRL 178,CLMPTR,AOP400       SYNTAX ERROR                    71470020
DRP700   LR    R2,R14                   SAVE TEXT POINTER               71540020
         X5ERRL 195,CLMPTR              INVALID REGISTER                71610020
         LR    R14,R2                   RESTORE TEXT POINTER            71680020
         B     DRP350                   GO CONTINUE SCAN                71750020
DRP800   EQU   *                                                        71820020
         ST    R10,ERRPTR               SAVE COLUMN PTR                 71890020
         X5ERRL 216,CLMPTR,AOP400       ILLEGAL OPERAND FORMAT          71960020
DRPABT   DC    H'0'                                                     72030020
DRPMVC   MVC   UESD(0),USNXT            EXECUTED MVC LENGTH OR-ED IN    72100020
         SPACE 3                                                        72170020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -72220020
               - ''SPACE'' AND ''EJECT'' STATEMENT PROCESSOR'           72230020
SPACE0   GOIF  OPNPRS,OFF=SPC200        GO SPACE 1 IF NO OPERAND        72800020
         L     R10,OPNADR               POINT TO OPERAND                72870020
         LR    R11,R10                  SAVE OPERAND POINTER            72940020
         CLC   D0(2,R11),=AL1(JCOMMA,JBLANK) IS OPERAND MISSING?        73010020
         BE    SPC200                   BRANCH IF MISSING               73080020
SPC050   CLI   D0(R11),JNUMMAX          IS IT NUMERIC?                  73150020
         BH    SPC075                   NO,GO CHECK FURTHER             73220020
         LA    R11,D1(R11)              SKIP TO NEXT CHARACTER          73290020
         B     SPC050                   CONTINUE SCAN                   73360020
SPC075   CLI   D0(R11),JBLANK           IS IT BLANK?                    73430020
         BNE   SPCER1                   ERROR IF NOT BLANK              73500020
         JCALL EVAL                     GO EVALUATE                     73570020
         BO    AOP400                   EVAL ERROR EXIT                 73640020
         BNZ   SPCER1                   OPERAND CANNOT BE RELOCATABLE   73710020
         LTR   R11,R11                  IS VALUE ZERO                   73780020
         BZ    AOP300                   YES, EXIT                       73850020
         BM    SPCER1                   IF NEGATIVE ERROR               73920020
SPC100   LA    R10,CAROUT               GET PRINT INDEX                 73990020
         B     AOP410                   GO SPACE PRINTER                74060020
SPC200   LA    R11,D1                   INDICATE 1 SPACE                74130020
         B     SPC100                   EXIT                            74200020
SPCER1   X5ERRL 242,CLMPTR,AOP400       OPERAND INVALID                 74270020
         SPACE 3                                                        74480020
EJECT0   LNR   R11,R13                  LOAD NEGATIVE VALUE IN REGISTER 74760020
         LA    R10,CAROUT               LOAD CARRIAGE CONTROL INDEX     74830020
         B     AOP410                   GO EJECT PAGE                   74900020
         SPACE 3                                                        74970020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -75020020
               - ''TITLE'' STATEMENT PROCESSOR'                         75030020
TITLE0   BAL   R6,AOP500                GO SQUEEZE OUT QUOTE AND AMPSND 75250020
         MVI   JTITLE,JBLANK                  BLANK OUT TITLE           75390020
         MVC   JTITLE+D1(L'JTITLE-D1),JTITLE  HOLD AREA FOR NEW TITLE   75460020
         GOIF  (R11),ZERO=TTL150        NULL OPERAND - BLANK TITLE      75510020
         GOIF  TPTEXT,ON=TTL300         FORGET TITLE IF OPERAND ERROR   75520020
         CH    R11,H100                 IS TITLE LENGTH GT. 100         75530020
         BH    TTL200                   YES, SAVE ONLY 100 CHARACTERS   75600020
         BCTR  R11,0                    GET MOVE LENGTH                 75670020
         EX    R11,TTLMVC               MOVE TITLE                      75740020
TTL100   GOIF  PSTMT,OFF=AOP310         EXIT IF PRINT OFF               75810020
         GOIF  JGEN,OFF=TTL150          BRANCH AROUND IF NOT GENERATED  75880020
         GOIF  PGEN,ON=TTL150           BRANCH IF PRINT GEN             75950020
         B     AOP310                   EXIT IF PRINT NOGEN             76020020
         SPACE                                                          76090020
TTL150   LNR   R11,R13                  LOAD NEGATIVE VALUE FOR EJECT   76230020
         LA    R10,CAROUT               LOAD CARRIAGE CONTROL FOR EJECT 76300020
         JCALL OUTPUT                   CALL PRINT                      76370020
         SET   TWASLC,ON                SET BUFFER AVAIL. FLAG          76420020
         B     AOP300                   EXIT                            76430020
TTL200   X5ERRL 171,0                   TITLE LENGTH GREATER THAN 100   76440020
         MVC   JTITLE,D0(R4)            MOVE ONLY 100 CHARACTERS        76510020
         B     TTL100                   GO ESTABLISH PRINT INDEXES      76580020
TTL300   SET   TPTEXT,OFF               RESET BAD OPERAND INDICATOR     76630020
         B     AOP400                   GO PRINT TITLE STATEMENT        76640020
H100     DC    H'100'                   MAX. LENGTH OF TITLE            76650020
TTLMVC   MVC   JTITLE(D0),D0(R4)        EXECUTE MOVE OF NEW TITLE       76720020
         SPACE 3                                                        76790020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -76840020
               - ''MNOTE'' STATEMENT PROCESSOR'                         76850020
MNOTE0   GOIF  OPNPRS,ON=MNO100         CHECK IF OPERAND PRESENT        77070020
         X5ERRL 177,0,AOP400            MISSING OPERAND                 77140020
MNO050   MVI   LHFLGS,DNTPLH            SET DON'T PRINT LEFTHALF        77490020
         GOIF  PSTMT,OFF=MNO075                                         77520020
         GOIF  JLIST,OFF=MNO075                                         77521020
         LA    R10,LSTOUT               GET PRINT INDEX FOR LISTING     77560020
         JCALL OUTPUT                   CALL PRINT                      77700020
MNO075   SET   MNOPRT,OFF               RESET MNOTE FLAG                77730020
         B     AOP300                   EXIT                            77770020
MNO085   GOIF  PSTMT,OFF=MNO075         EXIT IF PRINT OFF               77780020
         GOIF  JLIST,OFF=MNO075         EXIT IF NOLIST                  77790020
         SET   MNOPRT,OFF               ELSE GO EVALUATE FOR PRINT      77800020
         LA    R10,MNOOUT               LOAD MNOTE PRINT INDEX          77840020
         JCALL OUTPUT                   GO GET BUILD AREA RECORD        78270020
         LR    R2,R11                   SAVE PRINT BUFFER POINTER       78400020
         MVC   STMTNO(D5,R2),DWORD2     MOVE STATEMENT NUMBER TO PRINT  78470020
         LH    R6,JENDCL                END COLUMN                      78540020
         AR    R6,R11                   POINT TO END OF PRINT BUFFER    78610020
         B     MNO135                   GO EVALUATE                     78630020
MNO100   SET   MNOPRT,ON                INDICATE SCAN OF OPERAND        78650020
MNO135   L     R4,OPNADR                GET OPERAND POINTER             78680020
         GOIF  D0(R4),JASTER,EQ=MNO800  CHECK MNOTE SEVERITY            78750020
         GOIF  D0(R4),JNUMMAX,GT=MNO250 IS SEVERITY NUMERIC             78820020
         LR    R10,R4                   YES, SAVE PARAMETER             78890020
         JCALL EVAL                     CALL EVALUATION ROUTINE         78960020
         BNZ   MNOER1                   GO LOG ERROR                    79030020
         CH    R11,=H'255'              IS SEVERITY WITHIN RANGE        79100020
         BH    MNOER2                   NO, ERROR                       79170020
MNO150   EX    R11,PRNTLEV              IS MSG TO BE LOGGED (MSGLEVEL)  79180020
         BH    MNO200                   NO                              79190020
         GOIF  MNOPRT,OFF=MNO200        DO NOT LOG ERR IF MSG BUILD ON  79195020
         X5ERRL 197,0                   FLAG AS MNOTE ....              79200020
         EX    R11,SEVTST               IS SEVERITY HIGHER THAN RECORD  79240020
         BNL   MNO200                   NO,DONT SAVE NEW SEVERITY       79310020
         STC   R11,JSEVER               YES, SAVE NEW SEVERITY          79380020
MNO200   GOIF  MNOPRT,ON=MNO225         IF NO PRINT SKIP MOVE           79450020
         LR    R11,R14                  GET MOVE LENGTH                 79480020
         SR    R11,R4                     LENGTH OF                     79520020
         LA    R2,D4(,R2)               MNOTE WITH SEVERITY DISPLACEMT  79590020
         EX    R11,SEVMOV               MOVE TO PRINT - BY EXECUTE-     79660020
         LA    R2,D1(R11,R2)            STEP PRINT BUFFER POINTER       79730020
MNO225   GOIF  D0(R14),JCOMMA,NE=MNOER3 ERROR IF NEXT CHAR NOT ,        79800020
         LA    R4,D1(,R14)              STEP OVER COMMA                 79870020
MNO300   GOIF  D0(R4),JQUOTE,NE=MNOER3  NEED A QUOTE NOW                79940020
         LA    R4,D1(,R4)               STEP OVER QUPTE                 80010020
MNO400   GOIF  D0(R4),JQUOTE,EQ=MNO700  ELIMINATE DUPLICATE QUOTES      80080020
         GOIF  D0(R4),JAMPER,EQ=MNO750   AND AMPERSANDS                 80150020
         C    R4,OPNEND                 COMPARE WITH OPERAND END        80220020
         BNL   MNO875                   YES CHECK DELIMITER             80290020
MNO500   GOIF  MNOPRT,ON=MNO550         NO PRINT OF MNOTE ?             80360020
         MVC   MNOALN(D1,R2),D0(R4)     MOVE CHARACTER TO PRINT         80390020
         LA    R4,D1(,R4)               STEP TO NEXT CHARACTER          80430020
         LA    R2,D1(,R2)               STEP PRINT OUTPUT               80500020
         CR    R2,R6                    END OF PRINT BUFFER             80570020
         BNL   MNO600                   YES, GO PRINT LINE              80640020
         B     MNO400                   NO, CONTINUE SCAN               80710020
MNO550   LA    R4,D1(R4)                STEP TO NEXT CHAR               80750020
         B     MNO400                   CONTINUE SCAN                   80790020
MNO250   GOIF  D0(R4),JCOMMA,EQ=MNO275   COMMA ALLOWED                  80850020
         GOIF  D0(R4),JBLANK,NE=MNO300  ERROR IF NOT BLANK EITHER       80860020
         LA    R4,D1(R4)                STEP UP POINTER                 80870020
         B     MNO250                   SCAN FOR DELIMITER              80880020
MNO275   LA    R11,D1                   SET SEVERITY TO ONE             80890020
         LR    R14,R4                   POINT R14 AT COMMA (,) ALSO     80930020
         B     MNO150                   GO PROCESS SEVERITY             80990020
MNO600   GOIF  D0(R4),JQUOTE,EQ=MNO650  IS NEXT CHARACTER A QUOTE       81060020
MNO610   GOIF  MNOPRT,ON=MNO400         CONTINUE SCAN IF NOT PRINTED    81130020
         LA    R10,MNOOUT               LOAD INDEX FOR PRINT            81160020
         MVI   MNOALN(R2),JX            PUT IN CONTINUATION CHAR        81200020
         JCALL OUTPUT                   GO GET NEXT LINE BUFFER         81270020
         LR    R2,R11                   SAVE PRINT BUFFER POINTER       81340020
         LH    R6,JENDCL                END COLUMN                      81410020
         AR    R6,R11                   POINT TO END OF PRINT BUFFER    81480020
         B     MNO400                   CONTINUE SCAN                   81550020
MNO650   GOIF  D1(R4),JQUOTE,EQ=MNO610  IS QUOTE A TERMINATOR           81620020
         B     MNO900                   YES, CHECK DELIMITER            81690020
MNO700   GOIF  D1(R4),JQUOTE,NE=MNO900  QUOTE IS AN ENDING TERMINATOR   81760020
MNO710   LA    R4,D1(,R4)               NO, ELIMINATE EXTRA             81830020
         B     MNO500                   CONTINUE SCAN                   81900020
MNO750   GOIF  D1(R4),JAMPER,EQ=MNO710,ELSE=MNO500 IS AMPERSAND TWO     81970020
MNO800   GOIF  D1(R4),JCOMMA,NE=MNOER3  DOES COMMA FOLLOW ASTERISK      82040020
         GOIF  MNOPRT,ON=MNO850         BRANCH AROUND MOVE IF NO PRINT  82070020
         MVC   MNOALN(D2,R2),D0(R4)     YES, MOVE BOTH TO PRINT         82110020
         LA    R2,D2(,R2)               STEP POINTERS PAST              82180020
MNO850   LA    R4,D2(R4)                ASTERISK AND COMMA              82250020
         B     MNO300                   CONTINUE OUTPUT                 82320020
MNO875   BCTR  R4,0                     ADJUST REGISTER FOR DELIM TEST  82321020
MNO900   CLI   D1(R4),JBLANK            DO BLANK FOLLOW TERM QUOTE      82330020
         BNE   MNOER4                   ERROR IF NOT                    82340020
         GOIF  MNOPRT,ON=MNO085         BRANCH IF SCAN ONLY             82350020
         B     MNO075                   BRANCH IF MESSAGE BUILD DONE    82370020
MNOER1   X5ERRL 179,CLMPTR,MNO050       SEVERITY CODE MUST BE ABSOLUTE  82390020
MNOER2   X5ERRL 183,CLMPTR,MNO050                                       82460020
         SPACE                                                          82490020
MNOER3   ST    R4,ERRPTR                SAVE COLUMN PTR FOR LOGGING     82520020
         X5ERRL 178,CLMPTR,MNO050       SYNTAX ERROR - NOT A COMMA      82550020
MNOER4   ST  R4,ERRPTR                  SAVE COLUMN POINTER FOR LOGGING 82560020
         X5ERRL 185,CLMPTR,MNO050       SYNTAX ERROR NO BLANK           82570020
         SPACE                                                          82580020
PRNTLEV  CLI   JMSGL,*-*                EXECUTED MSGLEVEL CHECK         82620020
SEVTST   CLI   JSEVER,D0                EXECUTE SEVERITY CHECK          82670020
SEVMOV   MVC   MNOALN(D0,R2),D0(R4)     EXECUTED SEVERITY MOVE          82740020
MNOOUT   EQU   24                       MNOTE PRINT INDEX               82810020
STMTNO   EQU   X'23'                    STATEMENT NUMBER DISPLACEMENT   82880020
MNOALN   EQU   41                       MNOTE PRINT DISPLACEMENT        82950020
         SPACE 3                                                        83090020
    TITLE '&COMPNM&ASMID - ASSEMBLER OPCODE PROCESSOR - ASSEMBLY PHASE -83140020
               - ERROR RECORD PROCESSING '                              83150020
ERROR0   SET   JERRCHK,ON               SET ERROR RECORDS PRESENT       83440020
         DROP  R11                      DROP REG. FOR LATER USE         83510020
         USING JERRCD,R5                SET UP BASE FOR ERR RECORD      83580020
         MVC   JESTMTNO,STMTN+D4-L'JESTMTNO  PUT STATMENT NO. IN ERR RD 83620020
         CLI   JERCDE,ERR60             GENERATED END STATEMENT ERROR   83660020
         BNE   ERROR1                   NO                              83670020
         MVC   JESTMTNO,ENDSTMNO+D4-L'JESTMTNO  GET SAVED STATEMENT NO. 83690020
         USING JTEXT,R5                 SET UP BASE FOR TEXT RECORD     83720020
ERROR1   LH    R10,JOUTFILE             POINT TO ERROR RECORD           83790020
         JPUTM FILE=(R10),ADDR=JTEXT    OUTPUT ERROR RECORD             83860020
         XC    SYMCNT,SYMCNT            CLEAR SYMBOL COUNT              83930020
         B     AOP310                   EXIT                            84000020
         SPACE 3                                                        84002020
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - PATCH AREA '           84010020
         JPATCH X5A00,15B0              5% PATCH AREA                   84050020
    TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - ALIGNMENT ROUTINE '         84100020
         JCSECT (X5A20)                 DEFINE CSECT                    84210020
ALIGN    JSAVE BASE=YES                 SAVE REGISTERS                  84280020
         JENTRY (X5A21=ALIGN)           DEFINE MODULE ENTRY POINT       84350020
ALIGN0   L     R1,ELCTR                 GET LOCATION COUNTER            84460020
         GOIF  VLIT,ON=ALIGN1           BRANCH AROUND IF ON             84490020
         ST    R1,LOCATN                STORE FOR PRINT                 84560020
ALIGN1   AR    R1,R2                    ADD MAX ALIGN ADJUSTMENT        84700020
         LCR   R2,R2                    CREATE MASK TO GET ALIGNED      84770020
         BCTR  R2,0                       LOCATION COUNTER              84840020
         NR    R2,R1                    DETERMINE ALIGNED VALUE         84910020
         S     R2,ELCTR                 GET NUMBER OF PADDING BYTES     84980020
         ST    R2,LOCLEN                SAVE FOR LOCATION COUNTER       85050020
         ST    R2,FULLWD                SAVE ALIGNMENT                  85120020
         JCALL LOCUPD                   CALL LOCATION COUNTER UPDATE    85190020
ALNEND   JRETURN ,                      EXIT                            85260020
         JPATCH X5A20,54                5% PATCH AREA                   85330020
         SPACE 3                                                        85400020
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - LOCATION COUNTER UPDATE85450020
               E ROUTINE '                                              85460020
         JCSECT (X5A30)                 DEFINE CSECT                    85470020
LOCUPD   JSAVE BASE=YES                 SAVE REGISTERS                  85540020
         JENTRY (X5A31=LOCUPD)          DEFINE MODULE ENTRY POINT       85610020
         GOIF  LTDECV,ON=LUDEND         EXIT IF LITERAL REFERENCE       85680020
         L     R1,ELCTR                 GET LOCATION COUNTER            85750020
         A     R1,LOCLEN                ADD LENGTH OF DC                85820020
         ST    R1,ELCTR                 SAVE NEW LOCATION               85890020
         C     R1,=X'1000000'           IS IT GREATER THAN MAXIMUM?     85960020
         BL    LUDEND                   BRANCH IF NOT                   86030020
         GOIF  WRPFLG,ON=LUDEND         HAS ERROR BEEN LOGGED           86100020
         SET   WRPFLG,ON                NO, SET FLAG                    86170020
         X5ERRL 246,0,LUDEND            LOCATION COUNTER ERROR          86240020
LUDEND   JRETURN ,                      EXIT                            86380020
         SPACE 3                                                        86390020
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - LOCATION COUNTER UPDATE86400020
               E ROUTINE - PATCH AREA '                                 86410020
         JPATCH X5A30,68                5% PATCH AREA                   86430020
         SPACE 3                                                        86520020
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - RLD OUTPUT ROUTINE '   86570020
         JCSECT (X5A40)                 DEFINE CSECT                    86590020
RLDOUT   JSAVE BASE=YES                 SAVE REGISTERS                  86660020
         JENTRY (X5A41=RLDOUT)          DEFINE MODULE ENTRY POINT       86730020
         GOIF  LTDECV,ON=RLDEND         EXIT IF LITERAL REFERENCE       86800020
         GOIF  (DSSW,DXDSW),ANY=RLDEND  SKIP RLD IF DS OR DXD           86870020
         TM    EESDI,BIT1+BIT2+BIT3     IS THIS IN DSECT OR COMMON      86940020
         BNZ   RLDEND                   YES, NO RLD - EXIT              87010020
         SR    R4,R4                    ZERO REGISTER                   87150020
         IC    R4,RELOCTR               GET NUMBER OF RLD'S TO PUT      87220020
         GOIF  (R4),NOTPOS=RLDEND       DON'T PUT RLD IF NOT POSITIVE   87290020
         LA    R6,RLIST                 POINT TO ESD LIST               87360020
RLD100   LH    R10,JOUTFILE             POINT TO OUTPUT FILE            87430020
RLD115   LH    R1,D0(R6)                GET RELOCATION ID               87500020
         LTR   R1,R1                    IS IT NEGATIVE?                 87570020
         BNZ   RLD125                   BRANCH AROUND IF NOT ZERO       87640020
         LA    R6,D2(R6)                SKIP TO NEXT ESDID              87710020
         B     RLD115                   GO TRY AGAIN                    87780020
         SPACE                                                          87850020
RLD125   BNM   RLD150                   NO BRANCH AROUND                87920020
         OI    X5VSW,BIT2               SET BIT TO INDICATE NEGATIVE    87990020
         LCR   R1,R1                    COMPLEMENT ESDID                88060020
         STH   R1,D0(R6)                STORE BACK                      88130020
         SPACE                                                          88200020
RLD150   LR    R2,R1                    SAVE R1                         88270020
         TM    D0(R6),BIT1+BIT3         IS IT IN A DSECT                88340020
         BNZ   RLDER1                   ERRONEOUS RELID                 88410020
         JPUTL FILE=(R10),BUFREQ=RLDND  GO GET BUFFER                   88480020
         SET   JRLDCHK,ON               INDICATE RLD PRESENT   @OX11000 88530006
         USING RLDIN,R11                ESTABLISH USING                 88550020
         MVC   RLDIN(D6),=AL1(0,RLDND,0,0,RLDTYPE,0) INITIALIZE RECORD  88620020
         MVC   POSID,EESDI              GET POSITION ID                 88690020
         MVC   RLDFLG,DWORD1            MOVE TYPE TO FLAG               88760020
         MVC   RLDVAL,DWORD1+D1         MOVE VALUE TO RECORD            88830020
         STH   R2,RELID                 PUT IN RELID                    88900020
         NI    RELID,D15                MASK OUT HIGH ORDER HALF BYTE   88970020
         TM    X5VSW,BIT2               IS ESDID NEGATIVE?              89040020
         BNO   RLD200                   NO,BRANCH AROUND                89110020
         NI    X5VSW,BITFF-BIT2         TURN OFF BIT2                   89180020
         OI    RLDFLG,BIT6              INDITATE NEGATIVE RELOCATION    89250020
RLD200   LH    R1,DWORD2                GET LENGTH                      89320020
         BCTR  R1,0                     DECREMENT IT                    89390020
         SLL   R1,D2                    POSITION IT FOR FLAG BYTE       89460020
         EX    R1,RLDORL                OR IN LENGTH-1                  89530020
         LA    R6,D2(,R6)               STEP TO NEXT ESD                89670020
         BCT   R4,RLD100                CONTINUE IF COUNT NOT DEPLETE   89740020
RLDEND   JRETURN ,                      EXIT                            89810020
RLDER1   X5ERRL 158,CLMPTR,RLDEND                                       89880020
RLDORL   OI    RLDFLG,D0                EXECUTE OR OF LENGTH-1          89950020
         JPATCH X5A40,F2                5 % PATCH AREA                  90020020
         SPACE 3                                                        90090020
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - XREF OUTPUT ROUTINE '  90140020
         JCSECT (X5A50)                 DEFINE CSECT                    90160020
XREF     JSAVE BASE=YES                 SAVE REGISTERS                  90230020
         JENTRY (X5A51=XREF)            DEFINE ENTRY POINT              90300020
         L     R1,SYMXRF                GET NBR SYMBOLS XREF    OX02675 90370031
         LA    R1,D1(,R1)                THIS STATEMENT AND ADD 1       90440020
         ST    R1,SYMXRF                STORE NEW COUNT         OX02675 90510031
         GOIF  (JXREF,JLIST),NOTALL=XRFXIT  BOTH SWITCHES MUST BE ON    90580020
         LR    R4,R11                   SAVE REFERENCE DATA POINTER     90650020
         SET   JXREFCHK,ON              SET FLAG TO INDICATE XREF MADE  90720020
         USING DSECT10,R4               ESTABLISH USING                 90790020
         USING XRFIN,R11                ESTABLISH USING                 90860020
         LH    R10,JOUTFILE             POINT TO OUTPUT FILE            90930020
         JPUTL FILE=(R10),BUFREQ=XRFND  GET OUTPUT BUFFER               91000020
         MVC   XRECLN(D6),=AL2(XRFND,0,XRFTYPE*256)  INITIALISE HEADER  91070020
         STC   R2,XRFFLG                INDICATE DUP OR REF             91140020
         MVC   XRFSYM,RNAME             MOVE SYMBOL TO XREF RECORD      91210020
         MVC   XRFSTM,STMTN+D2          STATEMENT NUMBER TO RECORD      91280020
         MVC   XRFLEN,RLNGQ             LENGTH ATTRIBUTE TO RECORD      91350020
         MVC   XRFVAL,RLCTR             LOCATION TO RECORD              91420020
         LR    R11,R4                   RESTORE INPUT POINTER           91490020
XRFXIT   JRETURN ,                      EXIT                            91560020
         SPACE 3                                                        91610020
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - XREF OUTPUT ROUTINE - X91620020
               PATCH AREA '                                             91622020
         JPATCH X5A50,7E                5% PATCH AREA                   91630020
         END                                                            91700020
./  ADD  SSI=71710252,NAME=IFNX5C
* /* START OF SPECIFICATIONS ****                                       00070000
*02* PROCESSOR = ASSEMBLER                                              00140000
**** END OF SPECIFICATIONS ***/                                         00210000
         LCLC  &TBP                     TEXT BASE POINTER               00300000
         LCLC  &BAL                     LINK REGISTER                   00600000
         LCLC  &OPT                     OUTPUT POINTER                  00900000
         LCLC  &LEN                     FIELD LENGTH                    01200000
         LCLC  &SCR                     SCRATCH REGISTER                01500000
         LCLC  &SCH                     ALSO SCRATCH                    01800000
         LCLC  &COM                     PHASE WORK AREA POINTER         02100000
         LCLC  &IPT                     INPUT FIELD ADDRESS             02400000
         LCLC  &PRN                     PRINT BUFFER POINTER            02700000
         SPACE 5                                                        03000000
         GBLC  &COMPNM,&ASMID                                           03050000
         SPACE 5                                                        03100000
&SCR     SETC  'R1'                                                     03300000
&COM     SETC  'R7'                                                     03600000
&OPT     SETC  'R3'                                                     03900000
&IPT     SETC  'R4'                                                     04200000
&BAL     SETC  'R6'                                                     04500000
&TBP     SETC  'R5'                                                     04800000
&LEN     SETC  'R14'                                                    05100000
&PRN     SETC  'R2'                                                     05400000
&SCH     SETC  'R15'                                                    05700000
         SPACE 5                                                        06000000
         JHEAD 'ASSEMBLY PHASE - MAINLINE CONTROL - PROLOG',           X06300000
               PHASEID=X5C,                                            X06600000
               LEVEL=10                                                 06900000
*FUNCTION/OPERATION-                                                  * 07200000
*   THIS PHASE ACCEPTS THE MACRO GENERATION PHASE AND THE SYMBOL      * 07500000
*   RESOLUTION PHASE OUTPUT AND COMPLETES THE ASSEMBLY PROCESS.  THIS * 07800000
*   IS THE MAINLINE CONTROL FOR THE ASSEMBLY PHASE. CONTROL IS PASSED * 08100000
*   TO THE ASSEMBLY PHASE BY THE SYMBOL RESOLUTION INTERLUDE PHASE.   * 08400000
*   PHASE INITIALIZE ROUTINE IS CALLED TO ALLOCATE ALL OF THE NEC-    * 08700000
*   ESSARY WORK STORAGE AND BUFFERS, AND SET ANY REQUIRED ENTRY CON-  * 09000000
*   DITIONS. THE GET TEXT ROUTINE IS THEN CALLED TO BRING IN THE FIRST* 09300000
*   TEXT RECORD. CONTROL IS THEN PASSED TO THE APPROPIATE ROUTINES TO * 09600000
*   PERFORM THE ASSEMBLY FOR THAT RECORD. THE RECORD IS THEN OUTPUT   * 09900000
*   THROUGH THE PRINT AND PUNCH ROUTINE. THE GET TEXT ROUTINE IS      * 10200000
*   CALLED TO GET THE NEXT RECORD AND THE PROCESS IS REPEATED.        * 10500000
*                                                                     * 10800000
*ENTRY POINT-                                                         * 11100000
*        MLC100                                                       * 11400000
*INPUT-                                                               * 12000000
*   INTERNAL TEXT FILE FROM THE GENERATOR PHASE.                      * 12300000
*   RESOLVED SYMBOLS IN ORDER OF OCCURANCE FROM THE SYMBOL RESOLUTION * 12600000
*   PHASE.                                                            * 12900000
*                                                                     * 13200000
*OUTPUT-                                                              * 13500000
*   RELOCATABLE OBJECT TEXT TO THE PUNCH FILE.                        * 13800000
*   ASSEMBLY LISTINGS TO THE PRINT FILE.                              * 14100000
*   RELOCATION DICTIONARY ENTRIES TO THE POST PROCESSOR.              * 14400000
*   CROSS REFERENCE ENTRIES TO THE POST PROCESSOR.                    * 14700000
*   ERROR RECORDS TO THE DIAGNOSTIC PHASE.                            * 15000000
*                                                                     * 15300000
*EXTERNAL ROUTINES-                                                   * 15600000
*        TEXT GET                                                     * 15900000
*        ASSEMBLER OPCODE PROCESSOR                                   * 16200000
*        MACHINE OPCODE PROCESSOR                                     * 16500000
*                                                                     * 16800000
*EXITS, NORMAL-                                                       * 17100000
*   EXITS TO THE POST PROCESS PHASE.                                  * 17400000
*EXITS, ERROR-                                                        * 18000000
*   N/A                                                               * 18300000
*                                                                     * 18600000
*TABLES/WORK AREAS-                                                   * 18900000
*   THESE ARE ALLOCATED IN THE INITIALIZATION MODULE AND ARE          * 19200000
*   DESCRIBED THERE.                                                  * 19500000
*                                                                     * 19800000
*ATTRIBUTES-                                                          * 20100000
*   REFRESHABLE                                                       * 20400000
*                                                                     * 20700000
*NOTES-                                                               * 21000000
*   N/A                                                               * 21300000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - JCOX21900000
               MMON COPY CODE'                                          21950000
         COPY  JCOMMON                  INCLUDE COMMON DSECT            22200000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - JTEX22500000
               XT COPY CODE'                                            22550000
         COPY  JTEXT                                                    22800000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - X5CX23100000
               OM COPY CODE'                                            23150000
         COPY  X5COM                                                    23400000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - DSEX23700000
               CT10 DEFINITION (RSYMRCD)'                               23750000
DSECT10  DSECT                                                          24000000
         COPY  RSYMRCD                  GET DSECT10 DEFINITION          24300000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - POSX24350000
               T PROCESSOR RECORD DEFNS (BMDSECTS)'                     24400000
         COPY  BMDSECTS                 GET POST PROCESSOR RECORD DEFNS 24600000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - JERX24900000
               MSGCD COPY CODE'                                         24950000
         COPY  JERMSGCD                 DEFINE ERROR CODES AND SEVERITY 25200000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL'      25500000
         JCSECT (X5C00)                 INITIALIZE MODULE CSECT         25800000
* VS1 REL 3.1 CHANGES                                                   25900031
*C714000                                                       @OX02675 25950005
*A714500                                                       @OX10362 26000005
*A369000                                                       @OX08876 26050005
         JMODID ,                       CREATE OBJECT PHASE ID          26100000
*                            USINGS FOR-                                26400000
         USING JTEXT,&TBP               FIXED TEXT PART                 26700000
         USING JTEXTA,&IPT              VARIABLE TEXT PART              27000000
         USING X5COM,&COM               PHASE COMMON AREA               27300000
         USING DSECT10,R11              ESTABLISH DEFINITION FILE USING 27600000
         EJECT                                                          27900000
MLC100   JSAVE BASE=YES                 SAVE CALLING REGISTERS          28200000
         JENTRY (X5C01=MLC100)          DEFINE ENTRY                    28500000
         B     INIT                     INITIALIZE PHASE                28800000
MLC200   B     TEXTGET                  GO GET TEXT RECORD              29100000
MLC250   GOIF  JPRONLY,ON=MLC275        IS RECORD PRINT ONLY            29400000
         GOIF  JPSOP,OFF=MLC285         IS STATEMENT A PSEUDO OP?       29700000
         CLI   JTIOP1,JTERROR           IS IT AN ERROR RECORD?          30000000
         BE    MLC275                   BRANCH AROUND IF YES            30300000
         BAL   R6,GETDFN                GO GET NAME DEFINITION DATA     30600000
MLC275   JCALL ASMOP                    CALL ASSEMBLER OP ROUTINE       30900000
         B     MLC200                   GO GET NEXT RECORD              31200000
MLC285   BAL   R6,GETDFN                GO GET NAME DEFINITION DATA     31500000
         JCALL MACHOP                   CALL MACHINE OP ROUTINE         31800000
         B     MLC200                   GO GET NEXT TEXT RECORD         32100000
         JEXTRN (X5M01=MACHOP)          DEFINE MACHINE OP ENTRY         32400000
         JEXTRN (X5A01=ASMOP)           DEFINE ASSEMBLER OP ENTRY       32700000
         SPACE                                                          33000000
MLC900   JRETURN ,                      EXIT TO CONTROLLER              33300000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - PHAX33600000
               SE INITIALIZATION'                                       33650000
* INIT                                                                  33900000
*                                                                       34200000
*   THIS ROUTINE PERFORMS INITIALIZATION FOR THE ASSEMBLY PHASE         34500000
         SPACE                                                          34800000
INIT     JGETCORE   DBL=X5COMLEN        GET WORK STORAGE                35400000
         LR    &COM,R10                 LOAD BASE FOR COMMON            35700000
* INITIALIZE COMMON                                                     36000000
         XC    PRPU,PRPU                ZERO PRINT PUSH LEVEL COUNTER   36300000
         SET   PRDEFREQ,OFF             TURN OFF PRIOR DEFINITION REQ.  36600000
         XC    USINGT(USSL),USINGT      INITIALIZE USING TABLE          36900000
         MVI   USINGT+D6,X'0F'          IND END USING TABLE    @OX08876 36950005
         XC    LITPID,LITPID            INITIALIZE LITERAL POOL ID      37200000
         TS    SELFDEFN                 SET SELF DEFINITION FLAG ON     37500000
         XC    ELCTR(FLDEND-ELCTR),ELCTR  INITIALIZE TO ZERO            37800000
         MVI   JSEVER,D0                SET HIGH.SEV.CODE TO 0          38100000
         SET   XRFNO,ON                 TURN ON XREF SWITCH             38400000
         MVC   EESDI,JESDID             INITIALIZE ESDID                38700000
         LA    R1,TERMS                 INITIALIZE                      39000000
         ST    R1,ATPTR                   EVALUATION                    39300000
         LA    R1,RLIST                     WORK                        39600000
         ST    R1,ALPTR                       AREA                      39900000
         LA    R1,OPRNS-1                       POINTERS                40200000
         ST    R1,AOPTR                           FOR ASSEMBLY          40500000
         MVI   LNCNT+D3,D1              INITIALIZE LINE COUNT TO 1      40800000
         MVI   JTITLE,JBLANK            BLANK OUT                       41100000
         MVC   JTITLE+D1(L'JTITLE-D1),JTITLE   THE TITLE BUFFER         41400000
         MVI   LISTSW,BITFF             INITIALIZE LIST SWITCH          41700000
         GOIF  JLIST,ON=INIT1           LEAVE ON IF JLIST IS ON         42000000
         NI    LISTSW,BITFF-PSTMT       TURN OFF LIST SWITCH            42300000
INIT1    SET   (JRLDCHK,JXREFCHK,JERRCHK),OFF ASSUME NO RLDS,ERRS,XREFS 42600000
         SPACE                                                          42900000
         L     &SCR,JBEGCL             GET BEGIN COLUMN-1               43200000
         LA    &SCR,D1(,&SCR)          ADD 1                            43500000
         STH   &SCR,JBGNCL             STORE BEGIN COL PTR              43800000
         L     &SCR,JCTBGN              GET CONTINUE COLUMN-1           44100000
         LA    &SCR,D1(,&SCR)           ADD 1                           44400000
         STH   &SCR,JCNTCL              STORE CONT COL PTR              44700000
         L     &SCR,JBEGCL              GET BEGIN COLUMN-1              45000000
         A     &SCR,JSRCLN              ADD SOURCE FIELD MOVE LENGTH    45300000
         LA    &SCR,D1(,&SCR)           AND 1                           45600000
         STH   &SCR,JENDCL              JENDCL NOW CONTAINS END COL-1   45900000
         SPACE                                                          46200000
         SET   (PSTMT,PGEN),ON          INITIALIZE PRINT SWITCH         46500000
         NC    PRINTSW,LISTSW           TURN OFF PSTMT IF JLIST IS OFF  46800000
         JPOINT FILE=FILE2,NEXT=START   REWIND FILE2                    47100000
         B     MLC200                   GO GET FIRST TEXT RECORD        47400000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - GETX47450000
                DEFINITION RECORD ROUTINE'                              47700000
GETDFN   LH    R4,JTNMP                 GET NAME FIELD POINTER          48000000
         SET   NAMPRS,OFF               TURN OF NAME PRESENT SWITCH     48300000
         AR    R4,R5                    ADD TEXT RECORD POINTER         48600000
         GOIF  JTNML,D0,EQ=(R6)         IS NAME PRESENT                 48900000
         GOIF  JPSOP,OFF=GT100          CHECK FOR MACHINE OPERATION     49200000
         GOIF  JTEND,LT=(R6)            DO WE WORRY ABOUT NAME          49500000
         GOIF  JTTITLE,EQ=(R6)          EXIT IF TITLE                   49800000
GT100    CLI   JTNAME,JALFAMAX          SEE IF REAL NAME                50000000
         BHR   R6                       EXIT IF NOT                     50200000
         GOIF  JNMERR,ON=(R6)           IS NAME VALID?                  50400000
         LH    R10,JINFILE              YES, GET FILE NUMBER            50700000
         JGETL FILE=(R10)               GET DEFINITION DATA             51000000
         ST    R11,SYMDEF               SAVE DATA POINTER               51300000
         SET   NAMPRS,ON                TURN ON NAME PRESENT SWITCH     51600000
         SR    R2,R2                    CLEAR REGISTER                  52200000
         IC    R2,JTNML                 GET NAME LENGTH                 52500000
         BCTR  R2,0                     SUBTRACT 1 FOR EXECUTE          52800000
         EX    R2,COMPNAME              GO TO COMPARE NAME              53100000
         BE    GT150                    BRANCH IF EQUAL                 53400000
         X5ERRL 167,0                   SYMBOL FILE OUT OF PHASE        53700000
         LA    R10,LSTOUT               GET PRINT LISTING INDEX         54000000
         JCALL OUTPUT                   CALL PRINT                      54300000
         LA    R10,ERROUT               GET ERROR FLAG INDEX            54600000
         JCALL OUTPUT                   CALL PRINT                      54900000
         B     TEXTGET                  GO BACK TO GET TEXT RECORD      55200000
         JEXTRN (X5P01=OUTPUT)                                          55500000
         SPACE                                                          55800000
GT150    GOIF  JXREF,OFF=GT250          DO WE MAKE CROSS REFERENCES     56100000
         SET   JXREFCHK,ON              YES, TURN ON XREF MADE          56400002
         LR    R4,R11                   SAVE DEFINITION POINTER         56700000
         LH    R10,JOUTFILE             GET OUTPUT FILE NUMBER          57000000
         JPUTL FILE=(R10),BUFREQ=XRFVAL-XRFIN+L'XRFVAL GET XRF OUTPUT   57300000
         USING XRFIN,R11                ESTABLISH USING FOR XREF        57600000
         USING DSECT10,R4               CHANGE USING FOR DEFN DATA      57900000
         MVC   XRECLN(D6),=AL2(XRFND,0,XRFTYPE*256) MOVE HEADER DATA    58200000
         MVC   XRFSYM,RNAME             MOVE NAME TO RECORD             58500000
         MVI   XRFFLG,BASE              SET DEFINITION DATA FLAG        58800000
         MVC   XRFSTM,STMTN+D2          MOVE STATEMENT DATA TO RECORD   59100000
         MVC   XRFLEN,RLNGQ             MOVE LENGTH OF DATA ITEM        59400000
         MVC   XRFVAL,RLCTR             VALUE OR ADDRESS OF ITEM        59700000
         GOIF  PRIORDEF,OFF=GT200       IS THIS A MULTIPLE DEFINITION   60000000
         MVI   XRFFLG,DUPL              YES, CHANGE DEFINITION FLAG     60300000
         ST    R4,ERRPTR                SAVE DEFINITION DATA POINTER    60600000
         X5ERRL 196,DTAPTR              LOG ERROR                       60900000
         BR    R6                       EXIT                            61200000
COMPNAME CLC   2(0,R4),12(R11)          COMPARE NAME IN TEXT & SYMFILE  61500000
GT200    GOIF  DEFINED,OFF=(R6)         HAS IT BEEN DEFINED BEFORE      61800000
         MVI   XRFFLG,REF                                               62100000
         BR    R6                                                       62400000
GT250    LR    R4,R11                   SAVE SYMBOL DEFINITION POINTER  62410000
         GOIF  PRIORDEF,OFF=(R6)        IS THIS A PRIOR DEFINITION      62450000
         ST    R4,ERRPTR                SAVE DEFINITION DATA POINTER    62500000
         X5ERRL 196,DTAPTR              LOG ERROR                       62550000
         BR    R6                       RETURN TO MAINLINE              62600000
         JEXTRN (X5L01=LOGERR)          DEFINE EXTERNAL SYMBOL          62700000
         USING JTEXTA,R4                RESET USING FOR VARIABLE TEXT   63000000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - PHAX63300000
               SE WRAP-UP FUNCTIONS'                                    63350000
* CLOSE                                                                 63600000
*                                                                       63900000
*   THIS ROUTINE PERFORMS PHASE WRAP-UP FUNCTIONS                       64200000
         SPACE                                                          64500000
CLOSE    NC    CRDCNT,CRDCNT            IS BYTES IN PUNCHED CARD ZERO   65100000
         BZ    CLOSE0                   YES, DON'T PLACE IN TEXT CARD   65400000
         L     R1,CRDPTR                GET POINTER TO PUNCH CARD       65700000
         MVC   D10(D2,R1),CRDCNT        MOVE NUMBER BYTES TO CARD       66000000
         SPACE                                                          66300000
CLOSE0   GOIF  (JERRCHK,JXREFCHK,JRLDCHK),OFF=CLOSE1  IS EOF RECORD NEC 66600000
         LH    R10,JOUTFILE             GET OUTPUT FILE POINTER         66900000
         JPUTM FILE=(R10),ADDR=ERREOF   OUTPUT EOF RECORD               67200000
CLOSE1   JFRECORE   ADDR=(&COM)         RELEASE WORK STORAGE            67500000
         LH    R10,JINFILE              SWITCH INPUT AND                67800000
         MVC   JINFILE,JOUTFILE          OUTPUT FILES                   68100000
         STH   R10,JOUTFILE               FOR NEXT PHASE                68400000
         JPOINT FILE=FILE1,NEXT=START   REPOSITION                      68700000
         JPOINT FILE=FILE2,NEXT=START    ALL                            69000000
         JPOINT FILE=FILE3,NEXT=START     WORK FILES                    69300000
         B     MLC900                   THUS ENDETH THE ASSEMBLY        69600000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - TEXX69900000
               T RECORD GET ROUTINE'                                    69950000
* TEXT GET ROUTINE                                                      70200000
*   GETS A TEXT RECORD AND INITIALIZES FOR PROCESSING OF IT             70500000
         SPACE                                                          70800000
TEXTGET  L     R1,SYMXRF                GET NBR OF SYMB XREFED  OX02675 71400031
         MVI   DUMSW,X'00'              CLEAR SW FOR X5L       @OX10362 71450005
         SR    R4,R4                    ZERO REGISTER FOR NEXT USE      71700000
         IC    R4,SYMCNT                GET NUMBER OF SYMBOLS THIS CARD 72000000
         SR    R4,R1                    DETERMINE SYMBOLS REMAINING     72300000
         BNH   TXT040                   ALL SYMBOLS REFERENCED          72600000
TXT010   LH    R10,JINFILE              GET FILE NUMBER                 72900000
         JGETL FILE=(R10)               GET REFERENCE DATA              73200000
         BCT   R4,TXT010                GO BACK IF MORE SYMBOLS         73500000
TXT040   XC    SYMXRF,SYMXRF            RESET REFERENCE COUNT           73800000
         JGETL FILE=FILE2               GET TEXT RECORD                 74100000
         LR    &TBP,R11                 LOAD TEXT BASE REGISTER         74400000
         ST    R5,TXTPTR                SAVE TEXT POINTER               74700000
         GOIF  JTEOF,EQ=CLOSE           GO CLOSE PHASE IF END-OF-FILE   75000000
         GOIF  JPSOP,OFF=TXT045         BRANCH IF NOT PSEUDO OP         75048800
         GOIF  JTERROR,EQ=MLC275        GET OUT IF ERROR                75049200
TXT045   OC    JTFLGB,JPRTONLY          OR IN X4 CATASTROPHIC FLAG      75049700
*   THE FOLLOWING CARDS ARE FOR TSO                                     75050000
         GOIF  JTERM,OFF=TXT050         DO WE PRINT TO TERMINAL?        75100000
         SET   ERRBIT,OFF               TURN ERRBIT OFF                 75200000
         GOIF  TERR,ON=TXT047           CAN THIS BE CONTINUATION        75250000
         GOIF  JTCALL,EQ=ERRSCAN        CAN IT BE MACRO CALL            75251000
         GOIF  JTPROTO,EQ=ERRSCAN       OR A PROTOTYPE                  75252000
TXT0455  GOIF  JPRONLY,OFF=TXT048       CAN IT BE MODEL                 75253000
         GOIF  (JSUBNAME,JSUBOPCD,JSUBOPND),OFF=TXT048 OK IF SUBST REQ  75254000
TXT046   BAL   R6,RECSAVE               SAVE RECORD                     75255000
         B     TXT048                   CONTINUE                        75256000
ERRSCAN  GOIF  JNOCNT,ON=TXT0455        NOT BEGIN OF PROTO OR CALL      75257000
         JNOTE FILE=FILE2               SAVE POSITION OF CALL OR PROTO  75258000
         MVC   MODNOTV,JNOTEVAL         SAVE VALUE                      75259000
         GOIF  JERR,ON=ERRSCAN1         RECORD IN ERROR                 75260000
ERRSCAN0 JGETL FILE=FILE2               GET NEXT RECORD                 75261000
         LR    R5,R11                   GET RECORD ADDRESS              75262000
         GOIF  JTCALL,EQ=ERRSCAN1       CALL ?                          75263000
         GOIF  JTPROTO,EQ=ERRSCAN1      PROTOTYPE ?                     75264000
         JPOINT FILE=FILE2,NEXT=GET,ADDR=MODNOTV POSITION BACK TO START 75265000
         JGETL FILE=FILE2               READ 1ST RECORD AGAIN           75266000
         LR    R5,R11                   ESTABLISH RECORD BASE           75267000
         GOIF  JTCALL,NE=TXT048         IF CALL SAVE RECORD             75268000
         GOIF  JGEN,ON=TXT048           DO NOT SAVE IF INNER CALL       75268100
         BAL   R6,RECSAVE               SAVE CALL                       75269000
         B     TXT048                   CONTINUE                        75270000
ERRSCAN1 GOIF  JERR,OFF=ERRSCAN0        READ NEXT RECORD IF NO ERROR    75271000
         JPOINT FILE=FILE2,NEXT=GET,ADDR=MODNOTV POSITION BACK          75272000
         JGETL FILE=FILE2               GET 1ST RECORD                  75273000
         LR    R5,R11                   GET RECORD ADDRESS              75274000
         SET   TERR,ON                  INDICATE REST TO TERM           75275000
         GOIF  JTCALL,NE=TXT049         SAVE RECORD IF CALL             75276000
         GOIF  JGEN,ON=TXT049           IF INNER CALL DO NOT SAVE       75286000
         BAL   R6,RECSAVE               ELSE CONTINUE                   75300000
         B     TXT049                   CONTINUE SCAN                   75301000
RECSAVE  LH    R4,JTRLI                 GET RECORD LENGTH               75302000
         LA    R3,MODEL                 GET SAVE ADDRESS                75303000
         LR    R2,R5                    SAVE RECORD POINTER             75304000
         SH    R4,=H'256'               CHECK MOVE LENGTH               75305000
         BM    RECSAVE1                 OK                              75306000
         MVC   D0(256,R3),D0(R2)        MOVE 256 FIRST CHAR             75307000
         AH    R3,=H'256'               UPDATE BOTH POINTERS            75308000
         AH    R2,=H'256'                                               75309000
RECSAVE1 EX    R4,RECMOVE               MOVE REST                       75310000
         L     R1,STMTN                 GET STATEMENT NUMBER OF         75311000
         LA    R1,D1(R1)                  NOTED RECORD                  75312000
         STH   R1,MODSTMT               SAVE IT                         75313000
         BR    R6                       CONTINUE                        75314000
RECMOVE  MVC   D0(R0,R3),D0(R2)         MOVE MODEL STATEMENT            75315000
TXT047   GOIF  JNOCNT,ON=TXT049         PRINT ALL LINES OF STMT ON TSO  75316000
         SET   TERR,OFF                 INDICATE ALL PRINTED            75317000
         B     TXT045                   DO ORDINARY CHECK               75318000
TXT048   GOIF  JERR,OFF=TXT050          ANY ERROR RECORD EEXPECTED      75319000
         GOIF  JGEN,OFF=TXT049          SHALL WE GET NOTED STMT         75320000
TXT0485  LH    R10,JOUTFILE             GET FILE UNDEX                  75321000
         JPUTM FILE=(R10),ADDR=MODEL    OUTPUT MODEL STMT               75322000
         MVC   D4(,R11),=AL1(JT,J0)     INDICATE TEXT RECORD            75323000
         MVC   D16(D1,R11),D3(R11)      SAVE FLAGB                      75324000
         MVC   D2(D2,R11),MODSTMT       MOVE IN STATEMENT NUMBER        75325000
TXT049   LH    R10,JOUTFILE             GET FILE INDEX                  75326000
         SET   TERR,ON                  INDICATE MORE LINES CAN COME    75327000
         JPUTM FILE=(R10),ADDR=JTEXT    WRITE OUT TEXT RECORD           75350000
         MVC   D4(,R11),=AL1(JT,J0)     MOVE IN TEXT RECORD OPCODE      75400000
         MVC   D16(D1,R11),D3(R11)      SAVE JTFLGB                     75450000
         L     R1,STMTN                 GET STMT NUMBER                 75500000
         LA    R1,D1(,R1)               INCREMENT 1                     75550000
         STH   R1,D2(R11)               SAVE STMNT NUMBER               75600000
         SET   ERRBIT,ON                YES, TURN 1ST TIME SWITCH OFF   75650000
*   TSO ENDS HERE                                                       75750000
TXT050   LH    R4,JTOPP                 GET OPERAND POINTER             75900000
         AR    R4,R5                    ADD TEXT POINTER                76200000
         GOIF  JTOPOCD,OFF=TXT100       BRANCH IF CARD POINTER          76500000
         LA    R4,D1(,R4)               STEP PAST CARD POINTER          76800000
TXT100   SR  R14,R14                    ZERO WORK REGISTER              77100000
         SET   OPNPRS,OFF               INDICATE OPERAND NOT PRESENT    77400000
         GOIF  JTOPL,D0,EQ=TXT200       ZERO OPERAND LENGTH - NO OPND   77700000
         CLC   JTOPND(D2),=AL1(JCOMMA,JBLANK) IS OPERAND ONLY A COMMA   78000000
         BE    TXT200                   YES, NO OPERAND LEAVE INDICATOR 78300000
         SET   OPNPRS,ON                NO, INDICATE OPERAND PRESENT    78600000
TXT200   IC    R14,JTOPL                GET OPERAND LENGTH              78900000
         LA    R4,JTOPND                POINT TO FIRST CHAR OF OPERAND  79200000
         AR    R14,R4                   POINT TO END OF OPERAND         79500000
         ST    R4,OPNADR                SAVE OPERAND POINTER            79800000
         ST    R14,OPNEND               SAVE POINTER TO END OF OPERAND  80100000
         MVC   CDSTMT,=H'1'             RESET CARD-WITHIN-STMT COUNTER  80400000
         MVC   CLCLNG,=H'1'             DEFAULT LENGTH TO 1 FOR L'*     80500000
         SPACE                                                          80700000
         LH    &SCR,JTSPR               GET STRING GROUP POINTER        81000000
         AR    &SCR,&TBP                ADD TEXT BASE POINTER           81300000
         ST    &SCR,STRADR              STORE STRING GROUP ADDRESS      81600000
         TM    JPRTONLY,BIT0            IS X4 CATASTROPHIC ON           81700000
         BO    TXT250                   YES, NO SYMBOLS TO XREF         81800000
         MVC   SYMCNT,JTSYMCNT          SAVE OPERAND SYMBOL COUNT       81900000
TXT250   SET   PERR,OFF                TURN OFF ERROR SWITCH            82200000
         GOIF  JNOCNT,ON=MLC250         BRANCH IF STATEMENT NOT COUNTED 82500000
         L     &SCR,STMTN               GET STATEMENT NUMBER            82800000
         LA    &SCR,D1(,&SCR)           STEP IT BY 1                    83100000
         C     R1,=F'65535'             IS IT THE LIMIT ?               83400000
         BNH   TXT300                   NO,BRANCH AROUND                83700000
         SR    R1,R1                    YES,START FROM ZERO             84000000
TXT300   ST    &SCR,STMTN               SAVE IT                         84600000
         B     MLC250                   RETURN TO MAINLINE              84900000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - MAINLINE CONTROL - CONX85200000
               STANTS AND PATCH AREA'                                   85250000
ERREOF   DS    0CL8                      EOF RECORD TO OVERFLOW FILE    85800000
         DC    AL2(L'ERREOF)            RECORD LENGTH                   86100000
         DC    AL1(JPSOP,0)             FLAGS                           86400000
         DC    AL1(JTEOF,X'EE',X'00',X'FF')  FLAGS                      86700000
         SPACE 2                                                        86710000
         JPATCH X5C00,520               5% PATCH AREA                   86750000
         END   MLC100                                                   87000000
./  ADD  SSI=81850029,NAME=IFNX5D
* /* START OF SPECIFICATIONS ****                                       00050020
*02* PROCESSOR = ASSEMBLER                                              00100020
**** END OF SPECIFICATIONS ***/                                         00150020
         GBLC  &COMPNM,&ASMID                                           00240020
         SPACE 2                                                        00320020
         JHEAD 'ASSEMBLY PHASE - DC EVALUATION',                       X00400020
               PHASEID=X5D,                                            X00480020
               LEVEL=10                                                 00560020
*                                                                     * 00640020
*FUNCTION                                                             * 00720020
*   1. SCAN DC/DS/DXD OPERAND FIELDS ENCODED IN TEXT-BUCKET FORMAT.   * 00800020
*   NOTE- LITERAL-POOL GENERATED CONSTANTS ARE PROCESSED IN THE SAME  * 00816020
*   MANNER AS DC OPERANDS.                                            * 00832020
*   2. CONVERT ALL CONSTANTS TO HEXADECIMAL AND OUTPUT THE REQUIRED   * 00848020
*   OBJECT CODE, EXCEPT ON DS/DXD CALLS, FOR PRINTING AND/OR PUNCHING.* 00864020
*   3. LIST THE CORRESPONDING SOURCE OR GENERATED STATEMENTS.         * 00880020
*   4. ALIGN AND INCREMENT THE LOCATION-COUNTER FOR EACH CONSTANT     * 00960020
*   THAT DOES NOT HAVE A SYNTACTIC ERROR.  PRINTING AND/OR PUNCHING   * 01040020
*   ALIGNMENT BYTES WHERE REQUIRED.                                   * 01043220
*   5. OUTPUT RLD RECORDS FOR A-, Y-, V- AND Q-TYPE CONSTANTS.        * 01046420
*   7. LOG THOSE ERRORS THAT ARE DETECTED.                            * 01049620
*                                                                     * 01049720
*ENTRY POINT                                                          * 01049820
*        DCEVAL                                                       * 01049920
*                                                                     * 01050020
*INPUT                                                                * 01066020
*   R10 POINTS TO THE 1ST TEXT-BUCKET OF THE OPERAND FIELD.           * 01069220
*   R7 POINTS TO THE ASSEMBLY PHASE WORK AREA, X5COM.                 * 01072420
*   THE HALF-WORD AT LCTRSAV+D8 IS A COUNT OF THE NUMBER OF VALID     * 01075620
*   OPERANDS.                                                         * 01078820
*   FLAGS IN THE COMMON REGION ARE SET TO INDICATE THE TYPE           * 01079420
*   OF CALL-                                                          * 01080020
*   DSSW  - DS STATEMENT                                              * 01080620
*   DXDSW - DXD STATEMENT                                             * 01081220
*                                                                     * 01081820
*OUTPUT                                                               * 01081920
*   NO INFORMATION IS RETURNED TO THE CALLING ROUTINE.  IN DC AND     * 01082020
*   LITERAL-POOL CONSTANTS, OBJECT CODE IS PASSED TO THE PRINT/PUNCH  * 01085220
*   ROUTINE FOR OPTION-CONTROLLED OUTPUT. SIMILARLY, PRINT/PUNCH IS   * 01088420
*   CALLED FOR STATEMENT LISTING.  RLD RECORDS ARE OUTPUT FOR THOSE   * 01089020
*   RELOCATABLE A- AND Y-TYPE CONSTANTS AND VALID V- AND Q-TYPE       * 01089620
*   CONSTANTS WHICH OCCUR IN A DC OR LITERAL-POOL IN A REAL CONTROL-  * 01089720
*   SECTION, WITHOUT A ZERO DUP-FACTOR.                               * 01089820
*   THE LOCATION-COUNTER WILL BE ALIGNED AND INCREMENTED AS REQUIRED. * 01089920
*   SEMANTIC ERRORS ARE LOGGED BUT DO NOT AFFECT THE LOCATION-COUNTER * 01090020
*   ADJUSTMENTS.                                                      * 01090620
*                                                                     * 01091220
*EXTERNAL REFERENCES                                                  * 01091320
*        IFNX5A21 - FOR LOCATION-COUNTER ALIGNMENT                    * 01091420
*        IFNX5A31 - FOR LOCATION-COUNTER INCREMENTING                 * 01094620
*        IFNX5A41 - FOR RLD OUTPUT                                    * 01097820
*        IFNX5A51 - FOR XREF OUTPUT                                   * 01098420
*        IFNX5F01 - FOR FIXED- AND FLOATING-POINT CONVERSION          * 01099020
*        IFNX5L01 - FOR ERROR LOGGING                                 * 01099620
*        IFNX5P01 - FOR PRINT/PUNCH                                   * 01100220
*        IFNX5V01 - FOR EXPRESSION EVALUATION                         * 01100820
*                                                                     * 01100920
*EXITS, NORMAL                                                        * 01101020
*   THIS ROUTINE ALWAYS EXITS NORMALLY, VIA THE JRETURN MACRO.        * 01104220
*                                                                     * 01107420
*EXITS, ERROR                                                         * 01108020
*   NONE                                                              * 01108620
*                                                                     * 01109220
*TABLES/WORK AREAS                                                    * 01109820
*   ONLY ONE INTERNAL TABLE IS USED -                                 * 01110420
*   DCTABLE CONTAINS THE INFORMATION NECESSARY TO PROCESS EACH        * 01110520
*   CONSTANT TYPE.                                                    * 01113720
*   EXTERNAL TABLES ACCESSED ARE -                                    * 01114320
*   JTRTABLE - INTERNAL-TO-EXTERNAL CHARACTER-SET TRANSLATE TABLE,    * 01114420
*   USED FOR C-TYPE CONSTANT.                                         * 01114520
*   USINGT - USED FOR ADDRESS DECOMPOSITION IS S-TYPE CONSTANTS.      * 01114620
*   WORK SPACE IS CURRENTLY 106 BYTES, FULL-WORD ALIGNED, AT LOCATION * 01114720
*   WORKAREA IN THE X5COM  AREA.                                      * 01117920
*                                                                     * 01118520
*ATTRIBUTES                                                           * 01119120
*   REENTRANT, READ-ONLY, REUSABLE                                    * 01119720
*                                                                     * 01119820
*NOTES                                                                * 01119920
*   THE STATUS OF PRINTSW IS SAVED ON ENTRY AND RESTORED ON EXIT.     * 01120020
*                                                                     * 01123220
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - COPY CODE'   01126420
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   01127020
         COPY  JCOMMON                  COPY ASSEMBLER COMMON MODULE    01127620
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE     01128220
         COPY  JTEXT                    GET TEXT DEFINITION             01200020
         PRINT OFF                      DON'T PRINT X5COM COPY CODE     01250020
         COPY  X5COM                    GET COMMON WORK AREA DSECT      01360020
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE  01370020
         COPY  JERMSGCD                 DEFINE ERROR CODES AND SEVERITY 01380020
         PRINT ON                       WE'RE PAST THE COPY CODE        01410020
         SPACE 2                                                        01420020
BASE     EQU   X'01'                    BASE MASK - XREF DEFN           01440020
REF      EQU   X'02'                    REFERENCE MASK - XREF           01520020
DUP      EQU   X'03'                    DUPLICATE MASK - XREF           01600020
         USING X5COM,R7                 ESTABLISH COMMON USING          01680020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - INITIALIZATIO01730020
               ON'                                                      01780020
         JCSECT (X5D00)                 START MODULE CSECT              02000020
* VS1 RELEASE 2 CHANGES                                                 02050020
*A027700-027920,075700                                          OX00221 02060020
* VS1 RELEASE 2.6 CHANGES                                               02070002
*A718900-719120                                                 OX00223 02072026
*A027800-027980,045300,075720                                   OX00107 02074002
*C075700                                                        OX00107 02076002
* VS1 RELEASE 3.1 CHANGES                                               02078031
*C527200,5278800                                                OX02675 02078431
*A027700                                                        OY02614 02078831
* VS2 RELEASE 3.0 CHANGES                                               02079231
*C359200                                                        OY02610 02079631
*A025100                                                       @OX08862 02079705
*A593500,593520                                                @OY06592 02079805
*C593600                                                       @OY06592 02079905
*A480100,481500                                                @OX09734 02080305
*C736800,737000                                                @OX09734 02080705
*C614400,615200                                                @OZ04407 02080805
*C603200,604000                                                @OX08876 02081205
*C623200                                                       @OY11250 02131206
*C475600-480100                                            D78 @AX21436 02135200
         JMODID ,                       CREATE MODULE  ID               02140005
DCEVAL   JSAVE BASE=YES                 SAVE ENTRY REGISTERS            02160020
         JENTRY (X5D01=DCEVAL)          DEFINE ENTRY POINT              02240020
         XC    CLEAR2(CLEAR1-CLEAR2),CLEAR2       CLEAR BIG WORK        02320020
         XC    X5ATEMP,X5ATEMP          CLEAR ERROR LOGGING AREA        02360020
         XC    DCLNG,DCLNG              CLEAR ACC LENGTH AREA           02410020
         XC    ZDUPSW,ZDUPSW            CLEAR ZERO DUPFACTOR SWITCH     02420020
         LR    R6,R10                   SET TEXT POINTER                02460020
         ST    R10,JFWORD2              SAVE OPER ADDR         @OX08862 02510005
LITSKIP  MVC   DCPRSW,PRINTSW           SAVE PRINT SWITCH               02720020
         NI    EVALMODE,BITFF-(SUBLIST) JUST IN CASE            OY02614 02770031
         LR    R4,R10                   SAVE REG                OX00107 02780002
         BCTR  R4,0                     POINT TO LENGTH         OX00107 02790002
         CLI   0(R4),X'00'              LENGTH EQ ZERO          OX00107 02792002
         BNE   LITSKIP1                 BRANCH IF NOT ZERO      OX00107 02794002
         SET   NOOP,ON                  SET FLAG FOR NO OPERAND OX00107 02796002
LITSKIP1 EQU   *                                                OX00107 02798002
         GOIF  DSSW,ON=SETPDUM          IS ENTRY A DS                   02800020
         GOIF  DXDSW,OFF=PNODUM         NO, IS THIS DXD                 02880020
SETPDUM  OI    PRINTSW,BIT5             TURN ON PRINT DUMMY-BIT         02960020
         MVI   DUMSW,TESTER             AND LOCAL DUMMY FLAG            03040020
PNODUM   LA    R5,LEFTHF                SET PRINT-AREA BASE             03120020
         USING LEFTHF,R5                ESTABLISH LEFT HALF USING       03200020
         L     R1,ELCTR                 GET CURRENT LC                  03280020
         LA    R1,D0(,R1)               CLEAR WRAP BITS                 03360020
         ST    R1,LOCATN                TO PRINT                        03440020
         SLL   R1,D3                    CHANGE TO BITS                  03520020
         ST    R1,BITLC                 SET BIT LC                      03600020
         XC    DCDATA,DCDATA            CLEAR PRINT DATA                03680020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - NEXT OPERAND*03730020
                INIT && DUP FACTOR CHECK'                               03810020
NEXTOP   XC    WORKAREA(CLEAR2-WORKAREA),WORKAREA      SMALL CLEAR      03920020
         MVI   TUBEOP,TESTER-TESTER     TURN OFF DUP FACTOR ERROR IND   03960020
         LH    R1,OPNDCT                STEP                            04000020
         LA    R1,D1(,R1)                   OPERAND                     04080020
         STH   R1,OPNDCT                       COUNT                    04160020
         SET   XRFNO,ON                 SET XREF SWITCH ON              04240020
         MVC   LCTRSAV+D12,ELCTR        SAVE LOCATION COUNTER           04320020
         MVC   LCTRSAV+D10(D2),OBITS    SAVE OUTPUT BIT COUNT           04400020
         SPACE 5                                                        04480020
         GOIF  NOOP,ON=NOOPRND          TEST IF NO OPERAND      OX00107 04530002
         LA    R11,D1                   PRE-SET VALUE TO 1.             04560020
         BAL   R9,EVAL1                 GO SET UP EVAL CALL             04640020
         B     DFZCHEK0                 GO CHECK FOR ZERO DUPLICATION   04720020
         GOIF  D0(R6),JLPARN,NE=DFVSET  IS THERE AN EXPRESSION          04800020
         SET   (SUBLIST,PRDEFREQ),ON    INIT SWITCHES ON                04900020
         LR    R10,R6                   POINT AT LEFT PAREN             05040020
         JCALL EVAL                     CALL THE EVALUATION ROUTINE     05120020
         JEXTRN (X5V01=EVAL)            DEFINE EVAL AS EXTERNAL         05200020
         LR    R6,R14                   RESTORE POINTER                 05280020
         BC    D1,DUPERR                FATAL DUP FACTOR ERROR BRANCH   05360020
         BZ    DFZCHEK                  LOG ERROR IF NOT ABSOLUTE       05440020
DSCAN2   MVI   TUBEOP,TESTER            INDICATE DUP FACTOR ERROR       05520020
         LA    R11,D1                   DUMMY UP DUP FACTOR             05600020
         B     DFZCHEK                  GO SAVE DUP FACTOR              05650020
DFZCHEK0 LTR   R11,R11                  SELF DEFINING ZERO              05660020
         BNZ   DFVSET                   SET VALUE                       05670020
         OI    ZDUPSW,BITFF             INDICATE SELFDEF ZERO           05672020
DFZCHEK  LTR   R11,R11                  TEST FOR ZERO DUP FACTOR        05680020
         BP    DFVSET                   NO - POSITIVE - OK              05730020
         BM    DSCAN2                   NO - NEGATIVE - NOT OK          05780020
         OI    ZDUPSW,TESTER            SET ZERO DUP-FACTOR FLAG        05840020
DFVSET   ST    R11,DUPF                 SAVE DUP FACTOR                 05920020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - TYPE RANGE CH06000020
               HECK'                                                    06016020
         GOIF  D0(R6),JALFAMIN,LT=TYPERR CHECK TYPE FOR LEGAL           06080020
         GOIF  D0(R6),JALFAMAX,GT=TYPERR RANGE OF ALLOWABLE TYPES       06160020
         MVC   TYPE(D1),D0(R6)           SAVE TYPE                      06240020
         TR    TYPE(D1),DCTRBL-JALFAMIN  TRANSLATE TYPE                 06320020
         SR    R3,R3                    ZERO REGISTER                   06400020
         IC    R3,TYPE                  GET TYPE                        06480020
         LTR   R3,R3                    IS TYPE VALID                   06560020
         BZ    TYPERR                   BRANCH IF ILLEGAL TYPE          06640020
         BCTR  R3,0                     DECREMEN FOR LOOKUP             06720020
         MH    R3,TABLENG               TIMES LENGTH OF TABLE           06800020
         LA    R3,DCTABLE(R3)           PLUS TABLE ORIGIN               06880020
         LH    R1,IMPLINC(,R3)          IMPLIED LENGTH                  06960020
         ST    R1,LMOD                  TO L-MODIFIER                   07040020
         SLL   R1,D3                    BYTES TO BITS                   07120020
         ST    R1,BITMOD                IN BIT-LENGTH MODIFIER          07200020
         LA    R6,D1(,R6)               STEP TEXT PNTR                  07280020
         B     LTEST                    GO TEST FOR LENGTH MODIFIER     07360020
TYPERR   ST    R6,ERRPTR                SAVE ERROR COLUMN PTR           07440020
         X5ERRL 198,CLMPTR              INVALID DC,DS, OR DXD TYPE      07470020
         TM    TUBEOP,TESTER            DUP FACTOR ERROR                07500020
         BZ    STMEND                   NO                              07530020
DUPERR   X5ERRL 206,0,STMEND            INVALID DUPFACTOR               07560020
NOOPRND  SET   NOOP,OFF                 RESET FLAG              OX00107 07570002
         X5ERRL 62,0,STMEND             OMITTED OPERAND OX00221,OX00107 07572002
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - CHECK AND ALI07576020
               IGNMENT IF NONE'                                         07592020
LTEST    GOIF  D0(R6),JL,NE=LNOBIT      IS THERE A LENGTH MODIFIER      07680020
         LA    R6,D1(,R6)               STEP OVER L BUCKET              07760020
         MVI   LMODSW,TESTER            TURN ON EXPLICIT-LENGTH FLAG    07840020
         GOIF  D0(R6),JPERIOD,NE=LNOBIT IS LENGTH MODIFIER BIT LENGTH   07920020
         TM    FLAGINC(R3),BIT1         IS BIT LENGTH LEGAL             08000020
         BO    LTEST1                   YES,BRANCH AROUND               08080020
         ST    R6,ERRPTR                SAVE COLUMN PTR FOR LOGGING     08160020
         B     LIMITH                   GO LOG LENGTH ERROR             08260020
LTEST1   MVI   BITLSW,TESTER            YES, TURN ON BIT-LENGTH FLAG    08400020
         LA    R6,D1(,R6)               STEP OVER POINT BUCKET          08480020
         B     TUBECHK                  TO CHECK INTERLUDE ERROR        08560020
LNOBIT   LH    R2,OBITS                 GET OUTPUT-BIT COUNT            08640020
         LA    R2,D7(,R2)               PAD PARTIAL BYTE                08720020
         N     R2,BYTEMSK                                               08800020
         STH   R2,OBITS                                                 08880020
         CLI   OBITS+D1,D8*D8           CHECK FULL OUTPUT               08960020
         BL    SETEMP                   NO                              09040020
         LA    R1,ENTDC                 SET FOR DC PRINT                09120020
         L     R12,=A(DCPRINT)          SET FOR DCPRINT                 09200020
         BALR  R9,R12                   BRANCH TO ROUTINE               09280020
SETEMP   L     R1,BITLC                 PAD BIT LOCATION COUNTER        09360020
         AH    R1,SEVEN                 TO BYTES AND                    09440020
         SRL   R1,D3                    STORE IN TEMPORARY LC           09520020
         LA    R1,D0(,R1)               CLEAR WRAP BIT                  09600020
         ST    R1,TEMPLC                                                09680020
         L     R2,ELCTR                 GET NON-WRAP                    09760020
         LA    R2,0(,R2)                CURRENT LC                      09840020
         SR    R1,R2                    CHECK FOR PADDING INCREMENT     09920020
         BZ    NOLCINC                  NO                              10000020
         ST    R1,LOCLEN                YES, SET 1 BYTE INCREMENT       10080020
         JCALL LOCUPD                   CALL LOCATION COUNTER UPDATE    10160020
         JEXTRN (X5A31=LOCUPD)          DEFINE EXTERNAL SYMBOL          10240020
NOLCINC  L     R1,TEMPLC                UPDATE BIT LC                   10320020
         SLL   R1,3                                                     10400020
         ST    R1,BITLC                                                 10480020
         TM    LMODSW,TESTER            WAS THERE AN L-MODIFIER         10560020
         BNZ   TUBECHK                  YES                             10640020
         LH    R2,ALININC(,R3)          NO, GET ALIGNMENT               10720020
         EX    R2,ALNTEST               IS ALIGNMENT REQUIRED           10800020
         BZ    NOLIGN                   NO                              10880020
         TM    ZDUPSW,BITFF             ZERO SELF DEF DUP FACTOR        10890020
         BO    ALIGN0                   YES DO ALWAYS ALIGN IF NEEDED   10892020
         GOIF  JALGN,OFF=NOLIGN         DON'T ALIGN IF NOALIGN OPTION   10900020
ALIGN0   SET   VLIT,ON                  TURN ON SWITCH FOR ALIGN        10960020
         JCALL ALIGN                    CALL ALIGNMENT ROUTINE          11040020
         SET   VLIT,OFF                 TURN OFF SWITCH USED IN ALIGN   11120020
         JEXTRN (X5A21=ALIGN)           DEFINE EXTERNAL SYMBOL          11200020
         MVC   LCTRSAV+D12,ELCTR        SAVE LOC CTR                    11240020
         L     R4,ELCTR                 GET ALIGNED LC                  11280020
         LA    R4,D0(,R4)               CLEAR WRAP BITS                 11360020
         SLL   R4,D3                    UPDATE BIT LC                   11440020
         ST    R4,BITLC                 STORE BIT LOCATION CAONTER      11520020
         TM    DUMSW,TESTER             ARE WE IN DS OR DXD             11600020
         BZ    LNODUM                   NO                              11680020
         MVC   LOCATN,ELCTR             UPDATE PRINT LC                 11760020
         XC    DCDATA,DCDATA            CLEAR PRINT DATA                11840020
         MVI   OBITS+D1,D0              CLEAR OUTPUT-BIT COUNT          11920020
         B     NOLIGN                   TO CHECK PASS 1 ERROR           12000020
* TO PRINT INTER-OPERAND ALIGNMENT ON SEPARATE LINES, REPLACE THE       12080020
* FOLLOWING SEGMENT OF CODE WITH THE COMMENT CODE.                      12160020
LNODUM   CLI   OPNDCT+D1,D1             IS THIS 1ST OPERAND             12240020
         BE    ALINOUT                  YES, PRINT SEPARATE ALIGNMENT   12320020
         LA    R10,ALINMT               POINT TO ALIGN BYTES            12400020
         SR    R2,R2                    CLEAR BIT REMAINDER             12480020
         L     R11,FULLWD               GET BYTE COUNT                  12560020
         SLL   R11,D3                   CONVERT TO BIT COUNT            12640020
         L     R12,=A(KOUTPUT)          CALL OUTPUT                     12720020
         BALR  R9,R12                   BRANCH TO ROUTINE               12800020
         B     NOLIGN                                                   12880020
*LNODUM  CLI   OBITS+D1,D0              CHECK ANY OUTPUT LEFT           12960020
*        BE    ALINOUT                  NO                              13040020
*        LH    R2,OBITS                 YES, PRINT THEM                 13120020
*        LA    R1,X'40'                                                 13200020
*        LA    R12,DCPRINT                                              13280020
*        BALR  R5,R12                                                   13360020
ALINOUT  L     R2,FULLWD                GET BYTES SKIPPED               13440020
         LA    R1,ENTALN                SET FOR ALIGNMENT PRINT         13520020
         L     R12,=A(DCPRINT)          SET FOR DCPRINT                 13600020
         BALR  R9,R12                   CALL ROUTINE                    13680020
TUBECHK  EQU   *                        BRANCH LABEL                    13760020
NOLIGN   TM    TUBEOP,TESTER            INVALID DUP FACTOR              13790020
         BZ    NOLIGN2                  OK                              13820020
         X5ERRL 206,0,STMEND3           INVALID DUP FACTOR              13850020
NOLIGN2  MVC   STRTLC(D4),BITLC         SAVE OPERAND START              13880020
         TM    LMODSW,TESTER            CHECK EXPLICIT LENGTH           13920020
         BZ    STEST                    NO, TO S-MOD TEST               14000020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - EVALUATE LENG14080020
               GTH MODIFIER'                                            14160020
         BAL   R9,EVAL1                 GO SET UP EVAL CALL             14240020
         B     SETLMOD                  TO STORE                        14320020
         CLI   D0(R6),JLPARN            IS IT LEFT PAREN?               14340020
         BNE   LDELIM3                  GO LOG ERROR IF NOT             14360020
         SET   (SUBLIST,PRDEFREQ),ON    SET SUBLIST AND PRDEFREQ BITS   14400020
         LR    R10,R6                   POINT AT LEFT PAREN             14640020
         JCALL EVAL                     CALL THE EVALUATION ROUTINE     14720020
         LR    R6,R14                   RESTORE POINTER                 14800020
         BC    D1,STMEND3               SYNTAX ERROR, EXIT              14880020
         BZ    SETLMOD                  LOG ERROR IF NOT ABSOLUTE       14960020
         X5ERRL 179,CLMPTR,STMEND3      INVALID LENGTH - NOT ABSOLUTE   15040020
         SPACE                                                          15120020
SETLMOD  LR    R1,R11                   SAVE VALUE                      15200020
         ST    R1,LMOD                  STORE L-MOD VALUE               15280020
         TM    BITLSW,TESTER            CHECK BIT-LENGTH                15360020
         BNZ   LBITM                    YES                             15440020
         SLL   R1,D3                    NO, CHANGE TO BITS              15520020
LBITM    ST    R1,BITMOD                SET BIT-LENGTH                  15600020
         LH    R15,HILMINC(,R3)         GET L-MOD HIGH LIMIT            15680020
         TM    DUMSW,TESTER             IS IT DS OR DXD                 15760020
         BZ    LIMITL                   NO                              15840020
         CLI   TYPE,XBKT                YES,IS IT C OR X TYPE?          15920020
         BH    LIMITL                   NO                              16000020
         L     R15,BIGLIM               GET SPECIAL UPPER LIMIT         16080020
LIMITL   CH    R1,LOLMINC(,R3)          IS IT TOO SHORT?                16160020
         BL    LIMITH                   YES, GO LOG ERROR               16260020
         CR    R1,R15                   IS IT TOO LONG ?                16360020
         BNH   STEST                    NO, CONTINUE                    16460020
LIMITH   X5ERRL 199,CLMPTR,STMEND       LENGTH ERROR                    16560020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - SCALE MODIFIE16720020
               ER SCAN && EVALUATION'                                   16736020
STEST    SET   PRDEFREQ,OFF             TURN PRIOR DEF REQ BIT OFF      16770020
         GOIF  D0(R6),JS,NE=ETEST       IS THERE A SCALE FACTOR         16820020
         TM    FLAGINC(R3),BIT2         IS SCALE ALLOWED?               16880020
         BNO   SMBAD                    LOG ERROR IF NOT ALLOWED        16960020
         LA    R6,D1(,R6)               STEP OVER S                     17040020
         MVI   SIGNSW,D0                SET SIGN FLAG PLUS              17120020
         GOIF  D0(R6),JMINUS,EQ=SNEG    IS IT NEGATIVE                  17200020
         GOIF  D0(R6),JPLUS,EQ=SPOS     IS IT POSITIVE                  17280020
         B     SNOSIGN                  NO, TO GET VALUE                17360020
SNEG     MVI   SIGNSW,TESTER            SET SIGN FLAG MINUS             17440020
SPOS     LA    R6,D1(,R6)               STEP OVER SIGN                  17520020
SNOSIGN  BAL   R9,EVAL1                 GO SET UP EVAL CALL             17680020
         B     SLIMCHK                  TO VALIDITY CHECK               17760020
         CLI   D0(R6),JLPARN            IS IT LEFT PAREN?               17780020
         BNE   LDELIM3                  GO LOG ERROR IF NOT             17800020
         SET    SUBLIST,ON              TURN SUBLIST BIT ON             17840020
         LR    R10,R6                   POINT AT LEFT PAREN             18080020
         JCALL EVAL                     CALL THE EVALUATION ROUTINE     18160020
         LR    R6,R14                   RESTORE POINTER                 18240020
         BC    1,STMEND3                SYNTAX ERROR, EXIT              18320020
         BNZ   SMBAD                    TO BAD VALUE                    18400020
SLIMCHK  TM    SIGNSW,TESTER            CHECK MINUS                     18480020
         LR    R1,R11                   GET VALUE                       18560020
         BZ    CHKSBIT                  YES                             18640020
         LCR   R1,R1                    NO, COMPLEMENT VALUE            18720020
CHKSBIT  LH    R14,LOSMINC(,R3)         GET VALUE LIMITS                18800020
         LH    R15,HISMINC(,R3)                                         18880020
         CR    R1,R14                   CHECK LO LIMIT                  18960020
         BL    SMBAD                    TOO LOW                         19040020
         CR    R1,R15                   CHECK HI LIMIT                  19120020
         BH    SMBAD                    TOO HIGH                        19200020
ST0SCAL  ST    R1,SMOD                  STORE GOOD S-MOD                19280020
         B     ETEST                    TO E-MOD TEST                   19360020
SMBAD    BAL  R9,ERLOG                  GO LOG ERROR                    19410020
         DC    AL1(SEV200,ERR200,CLMPTR,0)  INVALID SCALE MODIFIER      19460020
         SR    R1,R1                    SET SCALE TO ZERO               19520020
         B     ST0SCAL                  GO DO IT                        19560020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - EXPONENT MODI19600020
               IFIER SCAN && EVALUATION'                                19616020
ETEST    GOIF  D0(R6),JE,NE=KSCAN       IS THERE AN EXPONENT            19680020
         TM    FLAGINC(R3),BIT3         IS EXPONENT ALLOWED?            19760020
         BNO   EMBAD                    ERROR IF NOT ALLOWED            19840020
         LA    R6,D1(,R6)               STEP OVER E                     19920020
         MVI   SIGNSW,D0                SET SIGN FLAG PLUS              20000020
         GOIF  D0(R6),JMINUS,EQ=ENEG    IS IT NEGATIVE                  20080020
         GOIF  D0(R6),JPLUS,EQ=EPOS     IS IT POSITIVE                  20160020
         B     ENOSIGN                  NO, TO GET VALUE                20240020
ENEG     MVI   SIGNSW,TESTER            SET SIGN FLAG MINUS             20320020
EPOS     LA    R6,D1(,R6)               STEP OVER SIGN                  20400020
ENOSIGN  BAL   R9,EVAL1                 GO SET UP EVAL CALL             20560020
         B     ELIMCHK                  TO VALIDITY CHECK               20640020
         CLI   D0(R6),JLPARN            IS IT LEFT PAREN?               20660020
         BNE   LDELIM3                  GO LOG ERROR IF NOT             20680020
         SET    SUBLIST,ON              TURN SUBLIST BIT ON             20720020
         LR    R10,R6                   POINT AT LEFT PAREN             20960020
         JCALL EVAL                     CALL THE EVALUATION ROUTINE     21040020
         LR    R6,R14                   RESTORE POINTER                 21120020
         BC    D1,STMEND3               SYNTAX ERROR, EXIT              21200020
         BNZ   EMBAD                    TO BAD VALUE                    21280020
ELIMCHK  TM    SIGNSW,TESTER            CHECK MINUS                     21360020
         LR    R1,R11                   GET VALUE                       21440020
         BZ    CHKEBIT                  YES                             21520020
         LCR   R1,R1                    NO, COMPLEMENT VALUE            21600020
CHKEBIT  TM    FLAGINC(R3),EBIT         IS E-MOD LEGAL FOR TYPE         21680020
         BZ    EMBAD                    NO                              21760020
         LH    R14,LOEMINC(,R3)         YES, GET VALUE LIMITS           21840020
         LH    R15,HIEMINC(,R3)                                         21920020
         CR    R1,R14                   CHECK LO LIMIT                  22000020
         BL    EMBAD                    TOO LOW                         22080020
         CR    R1,R15                   CHECK HI LIMIT                  22160020
         BH    EMBAD                    TOO HIGH                        22240020
ST0EXP   ST    R1,EMOD                  STORE GOOD E-MOD                22320020
         B     KSCAN                    TO CONSTANT PRE-SCAN            22400020
EMBAD    BAL   R9,ERLOG                 GO LOG ERROR                    22450020
         DC    AL1(SEV201,ERR201,CLMPTR,0)  INVALID EXPONENT MODIFIER   22500020
         SR    R1,R1                    SET EXPONENT TO ZERO            22560020
         B     ST0EXP                   GO DO IT                        22600020
EVAL1    CLI   D0(R6),JNUMMAX           IS IT NUMERIC?                  22640020
         BC    D2,D4(R9)                NO, RETURN                      22720020
         MVI   SELFDEFN,D0              SET SELF DEFN FLAG OFF          22800020
         LR    R10,R6                   POINT TO NUMBER FOR EVAL        22880020
         L     R12,=A(EVAL)             GET EVAL ADDRESS                22960020
         LR    R2,R9                    SAVE R9                         23040020
         BALR  R9,R12                   CALL EVAL                       23120020
         LR    R9,R2                    RESTORE R9                      23200020
         MVI   SELFDEFN,BITFF           RESET SELFDEFN FLAG             23280020
         LR    R6,R14                   SET TEXT POINTER                23360020
         BR    R9                       RETURN                          23440020
 TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - CONSTANT SCAN' 23520020
KSCAN    ST    R6,ERRPTR                SAVE COL PTR FOR LOGGING        23600020
         TM    DUMSW,TESTER             IS THIS DS OR DXD               23760020
         BZ    LDELIM                   NO                              23840020
         TM    FSTPSW,TESTER            YES, HAVE WE PRINTED YET        23920020
         BNZ   MTCHK                    YES                             24000020
         SR    R1,R1                    FORCE STATEMENT PRINT           24080020
         L     R12,=A(DCPRINT)          SET FOR DCPRINT                 24160020
         BALR  R9,R12                   CALL ROUTINE                    24240020
MTCHK    GOIF  D0(R6),JBLANK,EQ=KEMPTY                                  24320020
         GOIF  D0(R6),JCOMMA,NE=LDELIM  IS DS VARIABLE LENGTH           24400020
KEMPTY   L     R2,BITMOD                YES, FORM TOTAL LENGTH          24480020
         L     R1,DUPF                  IN BITS                         24560020
         MR    R0,R2                                                    24640020
DUPDS    ST    R1,BITMOD                                                24720020
         SLDL  R0,D5                    CHECK ADDRESS OVERFLOW          24800020
         MVI   MTSW,TESTER              TURN ON EMPTY FLAG              24880020
         LTR   R0,R0                                                    24960020
         BZ    KDELIM                   TO OK                           25040020
         ST    R2,BITMOD                TOO BIG, TREAT LIKE NO DUP-F    25120020
         B     LENER2                   GO LOG ERROR                    25140020
LENER    XC    BITMOD,BITMOD            ZERO OUTPUT LENGTH              25160020
LENER2   BAL   R9,ERLOG2                GO LOG LENGTH ERROR             25180020
         DC    AL1(SEV224,ERR224,CLMPTR,0)  LENGTH ERROR                25200020
         B     KDELIM                   PLOW ON                         25240020
         SPACE                                                          25280020
LDELIM   GOIF  D0(R6),JLPARN,NE=LDELIM2 IS IT LEFT PAREN?               25360020
         TM    FLAGINC(R3),BIT0         IS IT ADDRESS TYPE?             25440020
         BO    LDELIM1                  YES,BRANCH AROUND               25520020
LDELIM3  ST    R6,ERRPTR                SAVE COL PTR FOR LOGGING        25600020
         SPACE                                                          25680020
         B     SYN178                   GO LOG SYNTAX ERROR             25760020
         SPACE                                                          25840020
LDELIM2  GOIF  D0(R6),JQUOTE,NE=LDELIM3 IS IT A QUOTE?                  25920020
         TM    FLAGINC(R3),BIT0         IS IT ADDRESS TYPE?             26000020
         BO    LDELIM3                  ERROR IF ADDRESS TYPE           26080020
         SPACE                                                          26160020
LDELIM1  LA    R6,D1(,R6)               STEP OVER QUOTE OR LEFT PAREN   26240020
         ST    R6,KONSTRT               SAVE CONSTANT START PNTR        26320020
         CLC   DUPF,=F'1'               IS DUP FACTOR GREATER THAN 1    26400020
         BNH   DUPLOOP                  NO, DON'T WORRY ABOUT POINT     26480020
         CLI   TYPE,ABKT                IS DC AN ADDRES CONSTANT        26560020
         BL    DUPLOOP                  NO, WILL NOT HAVE TO POINT      26640020
         SET   NOTEWL,ON                SET ON SWITCH TO NOTE IF NECESS 26720020
DUPLOOP  XC    KCOUNT(D2),KCOUNT        CLEAR CONSTANT COUNT            26800020
MLTLOOP  L     R4,ALPTR                 SET EVAL WORK FOR BUILD         26880020
         ST    R4,OUTSTART              SAVE BUILD START ADDRESS        26960020
         L     R15,ADDRINC(,R3)         GET PROCESS LOC FOR TYPE        27040020
         MVI   KLENGTH+D3,D32           SET TRUNCATION INSURANCE        27120020
         BR    R15                                                      27200020
ALNTEST  TM    TEMPLC+D3,D0             DUMMY ALIGNMENT TESTER          27280020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - PROCESS C-TYP27360020
               PE CONSTANT'                                             27376020
CKON     LH    R12,ONE                  SET STEPPER                     27440020
         LR    R15,R4                   SAVE OUTPUT START               27520020
         MVI   D0(R4),EXBLANK           PRE-SET OUTPUT                  27600020
         MVC   D1(D17*D15,R4),D0(R4)    TO EXTERNAL BLANKS              27680020
CNEXTCH  GOIF  D0(R6),JQUOTE,NE=CAMPR   IS IT A QUOTE                   27760020
         GOIF  D1(R6),JQUOTE,EQ=CDOUBL  ARE THEY PAIRED?                27840020
         GOIF  D1(R6),JBLANK,EQ=CENDS   OK IF BLANK                     27920020
         GOIF  D1(R6),JCOMMA,EQ=CENDS   OK IF COMMA                     28000020
         B     LDELIM3                  GO LOG ERROR                    28080020
CAMPR    GOIF  D0(R6),JAMPER,NE=CNOTDBL IS IT AN AMPERSAND              28160020
         GOIF  D1(R6),JAMPER,NE=CERR    ARE THEY PAIRED                 28240020
CDOUBL   AR    R6,R12                   SKIP OVER DOUBLE                28320020
CNOTDBL  MVC   D0(D1,R4),D0(R6)         NEXT CHARACTER TO OUTPUT        28400020
         AR    R6,R12                   STEP POINTER TO NEXT CHARACTER  28480020
         AR    R4,R12                   STEP OUTPUT POINTER             28560020
         C     R6,OPNEND                CHECK FOR END OF OPERAND        28640020
         BL    CNEXTCH                  NO, CONTINUE SCAN               28720020
         X5ERRL 35,0,STMEND3            NO ENDING QUOTE                 28800020
CENDS    SR    R4,R15                   GET DATA LENGTH                 28880020
         LTR   R4,R4                    IS IT ZERO?                     28960020
         BZ    LDELIM3                  ERROR IF YES                    29040020
         LR    R1,R4                    SAVE VALUE                      29120020
         BCTR  R4,0                     FORM MACHINE LENGTH             29200020
         EX    R4,CTRANS                TRANSLATE TO EXTERNAL CODE      29280020
         SLL   R1,D3                    CHANGE IMPL-LENGTH TO BITS      29360020
         TM    LMODSW,TESTER            CHECK EXPLICIT LENGTH           29440020
         BNZ   CSPECL                   YES, TO ERROR CHECK             29520020
         ST    R1,BITMOD                NO SET IMPLICIT LENGTH          29600020
CSPECL   L     R0,BITMOD                GET MOD BIT-LENGTH              29680020
         ST    R0,KLENGTH               SET FOR RIGHT-PADDING           29760020
         B     LJUST                    TO OUTPUT                       29840020
CERR     ST    R6,ERRPTR                SAVE COLUMN PTR FOR LOGGING     29920020
         X5ERRL 176,CLMPTR,STMEND3      UNPAIRED AMPERSAND              30000020
CTRANS   TR   D0(0,R15),JTRTABLE        DUMMY TRANSLATE                 30240020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - PROCESS X-TYP30320020
               PE CONSTANTS'                                            30336020
XKON     SR    R2,R2                    CLEAR CHARACTER REGISTER        30400020
         LR    R1,R2                    ZERO TO INDEX                   30480020
         LA    R14,D4                   SET SHIFT CONTROL               30560020
         LR    R15,R14                  SET SHIFT SWITCHER              30640020
         STH   R2,D0(R4)                CLEAR WORKAREA                  30720020
         MVC   D2(D16*D16,R4),D0(R4)    CLEAR WORKAREA                  30800020
         LA    R0,UNBKT                 SET TEXT-BUCKET START TESTER    30880020
XNEXTCH  IC    R2,D0(R1,R6)             GET NEXT TEXT BYTE              30960020
         CR    R2,R0                    IS IT HEX DIGIT                 31040020
         BL    XDIGIT                   YES                             31120020
         B     XCHECK                   GO CHECK FURTHER                31200020
XDIGIT   SLL   R2,D0(R14)               SHIFT FOUR OR ZERO              31280020
         EX    R2,BSTORE                DIGIT TO OBJECT BYTE            31360020
         LA    R1,D1(,R1)               STEP INDEX                      31440020
         XR    R14,R15                  SWITCH SHIFT CONTROL            31520020
         BZ    XNEXTCH                  CONTINUE IF NEW SHIFT 15 ZERO   31600020
         LA    R4,D1(,R4)               STEP OBJECT POINTER             31680020
         B     XNEXTCH                  CONTINUE                        31760020
XFINISH  AR    R6,R1                    UPDATE TEXT POINTER             31840020
         SLL   R1,2                     HEX COUNT TO BITS               31920020
BFINISH  ST    R1,KLENGTH               STORE IMPLICIT BIT-LENGTH       32000020
         LTR   R1,R1                    IS IT ZERO?                     32080020
         BZ    LDELIM3                  ERROR IF YES=                   32160020
         LA    R4,D1(,R4)               POINT TO PAD BYTES              32240020
         TM    LMODSW,TESTER            CHECK EXPLICIT LENGTH           32320020
         BNZ   LJUST                    YES, TO OUTPUT                  32400020
         AH    R1,SEVEN                 NO, PAD BITS TO BYTES           32480020
         N     R1,BYTEMSK                                               32560020
         ST    R1,BITMOD                SET IMPLICIT LENGTH             32640020
         B     LJUST                    TO LEFT PAD TEST                32720020
BSTORE   OI    D0(R4),D0                DUMMY BIT-STORE                 32800020
         SPACE                                                          32880020
XCHECK   LA    R0,JQUOTE                PUT JQUOTE IN REG               32960020
         CR    R2,R0                    IS IT A QUOTE?                  33040020
         BE    XFINISH                  FINISH IF EQUAL                 33120020
         LA    R0,JCOMMA                GET COMMA TEXT                  33200020
         CR    R2,R0                    IS IT COMMA?                    33280020
         BE    XFINISH                  GO TO FINISH SCAN               33360020
XBERR1   ST    R6,ERRPTR                SAVE COL PTR FOR LOGGING        33440020
         X5ERRL 236,CLMPTR,STMEND3      ILLEGAL CHARACTER               33520020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - PROCESS B-TYP33600020
               PE CONSTANTS'                                            33616020
BKON     SR    R1,R1                    CLEAR BIT-LENGTH                33680020
         STH   R1,D0(,R4)               CLEAR WORK AREA                 33760020
         MVC   D2(D16*D16,R4),D0(R4)    CLEAR WORKAREA                  33840020
         BCTR  R4,0                    COMPENSATE FOR 1ST INCREMENT     33920020
BBITMSK  LA    R15,X'80'                POSITION OBJECT BIT             34000020
         LA    R2,D8                    SET SHIFT COUNTER               34080020
         LA    R4,D1(,R4)               STEP OBJECT POINTER             34160020
BNEXTCH  CLI   D0(R6),D1                IS TEXT BYTE 1                  34240020
         BL    BZERO                    NO, IT IS ZERO                  34320020
         BE    BONE                     YES                             34400020
         CLI   D0(R6),JQUOTE            IS IT A QUOTE?                  34480020
         BE    BFINISH                  FINISH IF EQUAL                 34560020
         CLI   D0(R6),JCOMMA            IS IT COMMA?                    34640020
         BE    BFINISH                  YES, GO TO FINISH               34720020
         B     XBERR1                   GO LOG ERROR                    34800020
BONE     EX    R15,BSTORE               BIT TO OBJECT BYTE              34880020
BZERO    SRL   R15,D1                   SHIFT OBJECT BIT                34960020
         LA    R1,D1(,R1)               STEP BIT-LENGTH                 35040020
         LA    R6,D1(,R6)               STEP TEXT POINTER               35120020
         BCT   R2,BNEXTCH               REDUCE SHIFT COUNTER AND LOOP   35200020
         B     BBITMSK                  GO RE-SET FOR NEW BYTE          35280020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - PROCESS P-TYP35360020
               PE CONSTANTS'                                            35376020
PKON     SR    R2,R2                    CLEAR CHARACTER REGISTER        35440020
         LR    R1,R2                    ZERO TO INDEX                   35520020
         LA    R14,D4                   SET SHIFT CONTROL               35600020
         LR    R15,R14                  SET SHIFT SWITCHER              35680020
         LA    R0,JQUOTE                SET QUOTE TESTER                35760020
         LA    R10,JCOMMA               SET COMMA TESTER                35840020
         XC    D0(D18,R4),D0(R4)        CLEAR 1ST 17 BYTES      OY02610 35920031
         LA    R9,X'0C'                 SET PLUS-ZONE CODE              36000020
         CLI   D0(R6),JPLUS             CHECK PLUS SIGN                 36080020
         BE    PTSTEP                   YES                             36160020
         CLI   D0(R6),JMINUS            NO, CHECK MINUS SIGN            36240020
         BNE   PNEXTCH                  NO                              36320020
         LA    R9,X'0D'                 YES, SET MINUS-ZONE CODE        36400020
PTSTEP   LA    R6,D1(,R6)               STEP TEXT POINTER               36480020
PNEXTCH  IC    R2,D0(R1,R6)             GET NEXT TEXT BYTE              36560020
         LA    R12,D0(R1,R6)            GET OPERAND POINTER             36640020
         CLI   D0(R12),J9               IS IT NUMERIC?                  36720020
         BNH   PDIGIT                   BRANCH IF YES                   36800020
         CLI   D0(R12),JPERIOD          IS IT A PERIOD?                 36880020
         BE    PCHECK                   BRANCH IF EQUAL                 36960020
         CR    R2,R10                   IS IT A COMMA?                  37040020
         BE    PKON1                    BRANCH IF EQUAL                 37120020
         CR    R2,R0                    IS IT A QUOTE?                  37200020
         BNE   XBERR1                   LOG ILLEGAL CHARACTER ERROR     37280020
         SPACE                                                          37360020
PKON1    LTR   R1,R1                    NULL OPERAND?                   37440020
         BZ    LDELIM3                  ERROR IF YES                    37520020
         AR    R6,R1                    DONE, UPDATE TEXT POINTER       37600020
         SLL   R9,D0(R14)               SHIFT ZONE CODE FOUR OR ZERO    37680020
         EX    R9,BSTORE                ZONE TO LAST OBJECT BYTE        37760020
         CH    R1,HISMINC(,R3)          IS IT GREATER THAN 31           37810020
         BH    LENER                    ERROR IF YES                    37820020
         LA    R1,D1(,R1)               INCLUDE ZONE IN COUNT           37840020
         SLL   R1,D2                    DIGIT COUNT TO BITS             37920020
         B     BFINISH                  TO CHECK L-MOD                  38000020
PDIGIT   SLL   R2,D0(R14)               SHIFT FOUR OR ZERO              38080020
         EX    R2,BSTORE                DIGIT TO OBJECT BYTE            38160020
         LA    R1,D1(,R1)               STEP INDEX                      38240020
         XR    R14,R15                  SWITCH SHIFT CONTROL            38320020
         BZ    PNEXTCH                  CONTINUE IF NEW SHIFT IS ZERO   38400020
         LA    R4,D1(,R4)               STEP OBJECT POINTER             38480020
         B     PNEXTCH                  CONTINUE                        38560020
PCHECK   GOIF  VLIT,ON=ZCHECK1          GO IF PERIOD SWITCH IS ON       38660020
         SET   VLIT,ON                  SET PERIOD SWITCH ON            38760020
         B     PTSTEP                   GO SKIP PERIOD                  39120020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - PROCESS Z-TYP39200020
               PE CONSTANTS'                                            39216020
ZKON     SR    R2,R2                    CLEAR CHARACTER REGISTER        39280020
         LR    R1,R2                    ZERO TO INDEX                   39360020
         LA    R0,JQUOTE                SET QUOTE TESTER                39440020
         LA    R10,JCOMMA               SET COMMA TESTER                39520020
         LA    R15,X'F0'                SET NUMERIC ZONE CODE           39600020
         STC   R15,D0(,R4)              PRE-SET 15 PAD BYTES            39680020
         MVC   D1(D14,R4),D0(R4)                                        39760020
         LA    R4,D15(,R4)              STEP OUTPUT OVER PAD            39840020
         LA    R9,X'CF'                 SET PLUS ZONE MASK              39920020
         CLI   D0(R6),JPLUS             CHECK PLUS SIGN                 40000020
         BE    ZTSTEP                   YES                             40080020
         CLI   D0(R6),JMINUS            CHECK MINUS SIGN                40160020
         BNE   ZNEXTCH                  NO                              40240020
         LA    R9,X'DF'                 YES, SET MINUS ZONE MASK        40320020
ZTSTEP   LA    R6,D1(,R6)               STEP TEXT POINTER               40400020
ZNEXTCH  IC    R2,D0(R1,R6)             GET NEXT TEXT BYTE              40480020
         LA    R12,D0(R1,R6)            GET OPERAND POINTER             40560020
         CLI   D0(R12),J9               IS IT NUMERIC?                  40640020
         BNH   ZDIGIT                   BRANCH IF YES                   40720020
         CLI   D0(R12),JPERIOD          IS IT A PERIOD?                 40800020
         BE    ZCHECK                   BRANCH IF EQUAL                 40880020
         CR    R2,R10                   IS IT A COMMA?                  40960020
         BE    ZKON1                    BRANCH IF EQUAL                 41040020
         CR    R2,R0                    IS IT A QUOTE?                  41120020
         BNE   XBERR1                   LOG ILLEGAL CHARACTER ERROR     41200020
         SPACE                                                          41280020
ZKON1    LTR   R1,R1                    IS IT ZERO?                     41360020
         BZ    LDELIM3                  ERROR IF YES                    41440020
         AR    R6,R1                    DONE, UPDATE TEXT POINTER       41520020
         BCTR  R4,0                     BACK UP OUTPUT POINTER          41600020
         AR    R4,R1                    POINT TO LAST OUTPUT BYTE       41680020
         EX    R9,ZSIGN                 CHANGE LAST BYTE ZONE TO SIG    41760020
         CH    R1,HISMINC(,R3)          IS IT GREATER THAN 16           41810020
         BH    LENER                    ERROR IF YES                    41820020
         SLL   R1,D3                    DIGIT COUNT TO BITS             41840020
         TM    LMODSW,TESTER            CHECK EXPLICIT LENGTH           41920020
         BNZ   ZINC                     YES                             42000020
         ST    R1,BITMOD                NO, SET IMPLICIT LENGTH         42080020
ZINC     LA    R1,D8*D15(,R1)           INSURE NEEDED PADDING           42160020
         ST    R1,KLENGTH               STORE IMPLICIT BIT-LENGTH       42240020
         B     LJUST                    TO LEFT PAD TEST                42320020
ZDIGIT   OR    R2,R15                   SET NUMERIC ZONE                42400020
         STC   R2,D0(R1,R4)             STORE OBJECT BYTE               42480020
         LA    R1,D1(,R1)               STEP INDEX                      42560020
         B     ZNEXTCH                  CONTINUE                        42640020
ZCHECK   GOIF  VLIT,ON=ZCHECK1          GO IF PERIOD SWITCH IS ON       42740020
         SET   VLIT,ON                  SET PERIOD SWITCH ON            42840020
         B     ZTSTEP                   GO SKIP PERIOD                  42960020
ZCHECK1  SET   VLIT,OFF                 SET PERIOD SWITCH OFF           42980020
         ST    R6,ERRPTR                STORE PTR FOR ERROR LOGGING     43000020
SYN178   X5ERRL 178,CLMPTR,STMEND3      ILLEGAL FORMAT                  43020020
ZSIGN    NI    D0(R4),D0                DUMMY ZONE CHANGER              43040020
   TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION - PROCESS L-, D43120020
               D-, E-, F-, H-TYPE CONSTANTS'                            43136020
DKON     LA    R11,WORKAREA             SET PARAMETER POINTER           43200020
         LA    R2,D16*D8                SET TRUNCATION INSURANCE        43280020
         ST    R2,KLENGTH                                               43360020
         LR    R10,R6                   SET TEXT POINTER                43440020
         JCALL DKVERT                   CALL DECIMAL CONVERSION         43520020
         JEXTRN (X5F01=DKVERT)          DEFINE EXTERNAL SYMBOL          43600020
         TM    EBYTE,X'FF'              WERE ANY ERRORS FLAGGED         43680020
         BZ    DKFINISH                 NO, GO TO OUTPUT                43760020
         ST    R10,ERRPTR               SAVE ERROR POINTER              43800020
         LA    R6,ERLOG2                PT TO ERROR LOGGING ROUTINE     43840020
         SPACE 1                                                        43880020
         TM    EBYTE,BIT0               SCALE INVALID ERROR             43920020
         BZ    DK10                     BR NO ERROR                     43960020
         BALR  R9,R6                    GO LOG ERROR                    44000020
         DC    AL1(SEV200,ERR200,CLMPTR,0) SCALE INVALID                44040020
         SPACE 1                                                        44080020
DK10     TM    EBYTE,BIT1               EXPONENT INVALID ERROR          44120020
         BZ    DK20                     BR NO ERROR                     44160020
         BALR  R9,R6                    GO LOG ERROR                    44200020
         DC    AL1(SEV201,ERR201,CLMPTR,0) EXPONENT INVALID             44240020
         SPACE 1                                                        44280020
DK20     TM    EBYTE,BIT2               TRUNCATION ERROR                44320020
         BZ    DK30                     BR NO ERROR                     44360020
         BALR  R9,R6                    GO LOG ERROR                    44400020
         DC    AL1(SEV203,ERR203,CLMPTR,0) TRUNCATION                   44440020
         SPACE 1                                                        44480020
DK30     TM    EBYTE,BIT4               FLOATING POINT CHAR ERROR       44520020
         BZ    DK40                     BR NO ERROR                     44560020
         BALR  R9,R6                    GO LOG ERROR                    44600020
         DC    AL1(SEV239,ERR239,CLMPTR,0) FLOATING POINT CHAR          44640020
         SPACE 1                                                        44680020
DK40     TM    EBYTE,BIT5               PRECISION LOST ERROR            44720020
         BZ    DK50                     BR NO ERROR                     44760020
         BALR  R9,R6                    GO LOG ERROR                    44800020
         DC    AL1(SEV202,ERR202,CLMPTR,0) PRECISION LOST ERROR         44840020
         SPACE 1                                                        44880020
DK50     TM    EBYTE,BIT3+BIT6+BIT7     INVALID DELIMITER ERROR         44920020
         BZ    DKFINISH                 BR NO ERROR                     44960020
         BALR  R9,R6                    GO LOG ERROR                    45000020
         DC    AL1(SEV255,ERR255,CLMPTR,0) INVALID DELIMITER ERROR      45040020
         LR    R6,R10                   RESTORE TEXT POINTER            45060020
         B     NOTINC                   SYNTAX ERROR, FLUSH STATEMENT   45080020
DKFINISH LR    R6,R10                   UPDATE TEXT PTR                 45120020
         LA    R11,D16(,R11)            POINT TO OUTPUT                 45160020
         ST    R11,OUTSTART             ''                              45200020
         B     LJUST                    TO LEFT PAD TEST                45240020
         SPACE                                                          45600020
         SPACE                                                          45640020
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - DC EVALUATION '        45680020
AYKON    LR    R10,R6                   SET TEXT POINTER                45760020
         L     R2,ELCTR                 SAVE CURRENT LOCTR              45840020
         JCALL EVAL                     CALL THE EVALUATION ROUTINE     46160020
         LR    R6,R14                   UPDATE TEXT PTR                 46240020
         ST    R2,ELCTR                 RESTORE CURRENT LOCATION CTR    46290020
         BZ    MAGCHK                   ABSOLUTE, TO SIZE CHECK         46400020
         BH    AYREL                    TO RELOCATABLE                  46480020
         BC    ERRX,STMEND3             SYNTAX ERROR,EXIT               46560020
         GOIF  COMPLEX,EQ=AYREL         IS EXPRESSION COMPLEXLY RELOC   46640020
         SR    R1,R1                    ZERO VALUE                      46800020
         B     NOTY                     TO STORE VALUE                  46880020
AYREL    CLI   D0(R6),JRPARN            IS IT RIGHT PAREN?              46960020
         BE    AYREL1                   BRANCH IF YES                   47040020
         CLI   D0(R6),JCOMMA            IS IT COMMA?                    47120020
         BE    AYREL1                   BRANCH IF YES                   47200020
         B     LDELIM3                  IF NOT GO LOG ERROR             47280020
AYREL1   EQU   *                        BRANCH LABEL                    47360020
         TM    BITLSW,TESTER            CHECK BIT-LENGTH-MOD            47440020
         BZ    YCHK                     NO, OK                          47520020
RELOERR  BAL   R9,ERLOG2                GO LOG ERROR           @AX21436 47560000
         DC    AL1(SEV204,ERR204,0,0)   RELOCATION ERROR       @AX21436 47610000
         SR    R11,R11                  ZERO EXPRESSION VALUE  @AX21436 47660000
         B     MAGCHK                   CHECK FURTHER          @AX21436 47710000
YCHK     L     R1,LMOD                  GET L-MODIFIER         @AX21436 47760000
         LA    R2,2                     SET A L-TESTER         @AX21436 47810000
         CLI   TYPE,YBKT                CHECK Y-TYPE           @AX21436 47860000
         BNE   ALCHK                    NO                     @AX21436 47910000
         BCTR  R2,0                     SET Y L-TESTER         @AX21436 47960000
ALCHK    CLR   R1,R2                    CHECK RELOC LGTH LIMIT @AX21436 48010000
         BNH   RELOERR                  LOG ERROR IF NEEDED    @AX21436 48060000
         CLI   TYPE,YBKT                CHECK Y-TYPE           @AX21436 48110000
         BNE   AYZCHK                   NO                     @AX21436 48160000
         GOIF  JYFLAG,OFF=AYZCHK        SUPR ERR MSG YFLAG OFF @AX21436 48210000
         BAL   R9,ERLOG2                GO LOG ERROR                    48260000
         DC    AL1(SEV205,ERR205,0,0)   RELOCATABLE Y-CON               48310000
AYZCHK   TM    ZDUPSW,TESTER            CHECK ZERO DUP-F                48480020
         BNZ   MAGCHK                   YES, BYPASS RLD                 48560020
         MVC   DWORD1+D1(D3),ELCTR+D1   GET LOCATION OF A OR Y CON      48640020
         ST    R11,EMOD                 SAVE SYMBOL VALUE               48720020
         MVI   DWORD1,D0                SET RLD FLAGS                   48800020
         MVC   DWORD2(D2),LMOD+D2       MOVE LENGTH FOR RLD             48880020
         JCALL RLDOUT                   CALL RLD OUTPUT ROUTINE         48960020
         JEXTRN (X5A41=RLDOUT)          DEFINE EXTERNAL SYMBOL          49040020
         L     R11,EMOD                 RESTORE VALUE                   49120020
MAGCHK   LR    R1,R11                   GET VALUE                       49200020
         CLI   D0(R6),JRPARN            IS IT RIGHT PAREN?              49280020
         BE    MAGCHK1                  BRANCH AROUND IF YES            49360020
         CLI   D0(R6),JCOMMA            IS IT COMMA?                    49440020
         BE    MAGCHK1                  BRANCH AROUND IF YES            49520020
         B     LDELIM3                  LOG ERROR                       49600020
MAGCHK1  EQU   *                        BRANCH LABEL                    49680020
         CLI   TYPE,YBKT                IS IT A Y-CON                   49760020
         BNE   NOTY                     NO                              49840020
         C     R1,YMASK                 YES, IS IT TOO BIG              49920020
         BH    YDATA                    YES                             50000020
         C     R1,YNMASK                TOO SMALL                       50010020
         BNL   NOTY                     NO                              50020020
YDATA    LR    R10,R1                   SAVE REGISTER CONTENT           50050020
         BAL   R9,ERLOG2                GO LOG ERROR                    50070020
         DC    AL1(SEV203,ERR203,CLMPTR,0)  TRUNCATION                  50090020
         LR    R1,R10                   RESTORE REGISTER CONTENT        50130020
*                                                                       50160020
NOTY     ST    R1,0(,R4)                SET OUTPUT                      50240020
         B     LJUST                    TO OUTPUT                       50320020
         EJECT                                                          50400020
VKON     LR    R10,R6                   SET TEXT POINTER                50480020
         LR    R1,R6                    GET OPERAND POINTER             50560020
         GOIF  D0(R6),JALFAMIN,LT=LDELIM3 ERROR IF NOT ALPHABTIC        50640020
VESCAN   GOIF  D0(R1),JALFAMAX,GT=VSCN10  IS SYMBOL CONTINUING          50720020
         LA    R1,D1(,R1)               YES, CHECK NEXT CHARACTER       50800020
         B     VESCAN                   CONTINUE SCAN                   50880020
VSCN10   GOIF  D0(R1),JCOMMA,EQ=VSCN20  V-CON IS DELIMITED BY A COMMA   50960020
         GOIF  D0(R1),JRPARN,EQ=VSCN20   OR A RIGHT PARN                51040020
         ST    R1,ERRPTR                SAVE OPERAND PTR FOR ERROR LOG  51120020
         B     SYN178                   GO LOG SYNTAX ERROR             51200020
VSCN20   SR    R1,R6                    DETERMINE LENGTH OF SYMBOL      51280020
         AR    R6,R1                    STEP OPERAND POINTER            51360020
         CH    R1,=H'8'                 IS SYMBOL LENGTH LEGAL          51440020
         BNH   VSCN30                   YES,GO MAKE RLD                 51520020
VSCN25   EQU   *                        BRANCH LABEL                    51600020
         ST    R6,ERRPTR                SAVE OPERAND PTR FOR ERROR LOG  51680020
         X5ERRL 187,CLMPTR,STMEND3      INVALID SYMBOL                  51760020
VSCN30   LTR   R1,R1                    WAS FIELD NULL                  51840020
         BZ    LDELIM3                  GO LOG ERROR                    51920020
         LH    R10,JINFILE              POINT TO REFERENCE FILE         52000020
         JGETL FILE=(R10)               GET REFERENCE RECORD            52080020
         GOIF  NOTEWL,OFF=VSCN15        IS NOTE NECESSARY?              52160020
         SET   NOTEHS,ON                TURN ON FILE NOTED SWITCH       52240020
         SET   NOTEWL,OFF               TURN OFF NOTE REQUIRED SWITCH   52320020
         LR    R2,R11                   SAVE RECORD POINTER             52360020
         LH    R10,JINFILE              GET INPUT FILE NUMBER           52400020
         JNOTE FILE=(R10)               NOTE INPUT FILE                 52480020
         MVC   NOTEVAL,JNOTEVAL         SAVE NOTED VALUE                52560020
         LR    R11,R2                   RESTORE RECORD POINTER          52600020
VSCN15   EQU   *                                                        52640020
         L     R14,SYMXRF               INCREMENT               OX02675 52720031
         LA    R14,D1(R14)                 SYMBOL COUNT                 52800020
         ST    R14,SYMXRF               RESTORE SYMBOL XREFED   OX02675 52880031
         SPACE                                                          53040020
         TM    ZDUPSW,TESTER            IS DUP FACTOR ZERO              53120020
         BNZ   LJUST                    YES, NO RLD                     53200020
         GOIF  DSSW,ON=LJUST            NO RLD IF DS                    53280020
         MVI   RELOCTR,D1               SET UP RLD DATA                 53360020
         MVC   RLIST,D6(R11)            SAVE ESD                        53440020
         MVC   DWORD1+D1(D3),ELCTR+D1   SAVE LOCATION OF V-CON          53520020
         MVI   DWORD1,BIT3              SET RLD FLAG                    53600020
         MVC   DWORD2(D2),LMOD+D2       MOVE LENGTH FOR RLD             53680020
         JCALL RLDOUT                   GO CREATE RLD                   53760020
         XC    D0(D4,R4),D0(R4)         ZERO OUTPUT AREA                53840020
         B     LJUST                    CONTINUE OUTPUT                 53920020
         EJECT                                                          54000020
QKON     LR    R10,R6                   SET TEXT POINTER                54080020
         GOIF  D0(R10),JALFAMIN,LT=LDELIM3  ERROR IF NOT ALPHABETIC     54160020
QESCAN   GOIF  D0(R10),JALFAMAX,GT=QEND SCAN SYMBOL                     54240020
         LA    R10,D1(,R10)             STEP SCAN POINTER               54320020
         B     QESCAN                   CONTINUE SCAN                   54400020
QEND     GOIF  D0(R10),JCOMMA,EQ=QSCN10 DELIMITER MUST BE A COMMA       54480020
         GOIF  D0(R10),JRPARN,EQ=QSCN10 OR A RIGHT PAREN                54560020
         ST    R10,ERRPTR               SAVE OPERAND PTR FOR ERROR LOG  54640020
         B     SYN178                   GO LOG SYNTAX ERROR             54720020
QSCN10   SR    R10,R6                   DETERMINT SYMBOL LENGTH         54800020
         BZ    LDELIM3                  BRANCH TO LOG ERROR             54880020
         CH    R10,=H'8'                8 CHARACTERS OR LESS            54960020
         BH    VSCN25                   BRANCH TO LOG INVALID SYMBOL    55040020
         AR    R6,R10                   POINT TO DELIMITER              55120020
         LH    R10,JINFILE              POINT TO INPUT FILE             55200020
         JGETL FILE=(R10)               GET NEXT RECORD                 55280020
         TM    D5(R11),BIT1+BIT2        IS IT PREVIOUSLY DEFINED?       55360020
         BO    QSCN15                   BRANCH IF YES                   55440020
         ST    R11,ERRPTR               SAVE RECORD PTR FOR LOGGING     55520020
         BAL   R9,ERLOG2                GO LOG ERROR                    55570020
         DC    AL1(SEV231,ERR231,DTAPTR,0)  SYMBOL NOT PREVIOUSLY DEF'D 55620020
QSCN15   EQU   *                        BRANCH LABEL                    55680020
         GOIF  NOTEWL,OFF=QSCN20        IS NOTE NECESSARY?              55760020
         SET   NOTEHS,ON                TURN ON FILE NOTED SWITCH       55840020
         SET   NOTEWL,OFF               TURN OFF NOTE REQUIRED SWITCH   55920020
         LH    R10,JINFILE              GET INPUT FILE NUMBER           56000020
         LR    R2,R11                   SAVE SYMBOL RECORD PTR          56080020
         JNOTE FILE=(R10)               NOTE INPUT FILE                 56160020
         MVC   NOTEVAL,JNOTEVAL         SAVE NOTED VALUE                56240020
         LR    R11,R2                   RESTOR RECORD PTR               56320020
QSCN20  EQU    *                                                        56400020
         GOIF  XRFNO,OFF=QSCN30         DO WE MAKE XREF?                56560020
         LA    R2,REF                   INDICATE XREF REF               56640020
         JCALL XREF                     GO MAKE XREF ENTRY              56720020
QSCN30   EQU   *                                                        56800020
         TM    ZDUPSW,TESTER            IS DUP FACTRO ZERO?             56880020
         BNZ   LJUST                    BRANCH IF YES                   56960020
         TM    D3(R11),BIT4+BIT6+BIT7   IS IT DSECT OR DXD?             57040020
         BNO   QER4                                                     57120020
         MVI   RELOCTR,D1               SET UP RLD DATA                 57200020
         MVC   RLIST,D6(R11)            SAVE ESD                        57280020
         NI    RLIST,X'0F'              CLEAR FLAG                      57360020
         MVC   DWORD1+D1(D3),ELCTR+D1   SAVE LOCATION FOR RLD           57440020
         MVC   DWORD2(D2),LMOD+D2       SAVE LENGTH FOR RLD             57520020
         MVI   DWORD1,BIT2              SET Q-CON RLD FLAG              57600020
         JCALL RLDOUT                   GO CREATE RLD                   57680020
QRLD1    EQU   *                        BRANCH LABEL                    57730020
         XC    D0(D4,R4),D0(R4)         ZERO WORK AREA                  57760020
         B     LJUST                    GO OUTPUT Q-CON                 57840020
         SPACE                                                          57920020
QER4     BAL   R9,ERLOG2                GO LOG ERROR                    57960020
         DC    AL1(SEV207,ERR207,CLMPTR,0) NOT A DXD OR DSECT NAME      58000020
         B     QRLD1                    PLOW ON                         58040020
         JEXTRN (X5A51=XREF)            DEFINE EXTERNAL SYMBOL          58080020
         EJECT                                                          58160020
SKON     MVI   SIGNSW,0                 TURN OFF SUB-FIELD FLAG         58240020
         XC    DECKON(4),DECKON         CLEAR ESD POINTER               58320020
SVLOOP   LR    R10,R6                   SET TEXT POINTER                58400020
         JCALL EVAL                     CALL THE EVALUATION ROUTINE     58480020
         LR    R6,R14                   UPDATE TEXT PTR                 58560020
         ST    R11,EMOD                 SET EXPRESSION VALUE            58640020
         BZ    SDELIM                   ABSOLUTE, TO CHECK DELIMITER    58720020
         BO    SDELIM                   GO CHECK SUB FIELD              58800020
         BM    SPLEX                    TO NON-SYNTAX ERROR CHECK       58880020
         ST    R10,DECKON               SET EXPRESSION ESD              58960020
         B     SDELIM                   TO CHECK DELIMITER              59040020
SPLEX    XC    EMOD(4),EMOD             ZERO TO VALUE                   59120020
         GOIF  COMPLEX,NE=SDELIM        IS EXPRESSION COMPLEXLY RELOC   59200020
         BAL   R9,ERLOG2                GO LOG ERROR                    59250020
         DC    AL1(SEV213,ERR213,CLMPTR,0)  COMPLEXLY RELOCATABLE       59300020
SDELIM   TM    EVALSW1,FATALER          HAS AN ERROR OCCURED   @OY06592 59350005
         BO    STMEND3                  GO TO NEXT             @OY06592 59352005
         CLI   D0(R6),JLPARN            CHECK SUB-FIELD        @OY06592 59360005
         BNE   SDCHK                    NO, CHECK DECOMPOSE             59440020
         MVI   SIGNSW,TESTER            TURN ON SUB-FIELD FLAG          59520020
         MVC   SMOD(4),EMOD             SET DISPLACEMENT VALUE          59600020
         LA    R6,D1(,R6)               STEP TEXT POINTER               59680020
         B     SVLOOP                   TO SCAN SUB-FIELD               59760020
SDCHK    TM    SIGNSW,TESTER            CHECK IF SUB-FIELD              59840020
         BNZ   SUBF                     YES                             59920020
         L     R9,DECKON                GET POF POINTE                  60000020
         L     R12,EMOD                 GET VALUE                       60080020
         LA    R14,USINGT               POINT TO USING TABLE            60160020
         USING UESD,R14                 ESTABLISH USING                 60240020
SCOMPB   TM    UREG,X'0F'               THE END OF TABLE?      @OX08876 60320005
         BO    SCOMPF                   YES, GO CHECK ABSOLUTE @OX08876 60400005
         CH    R9,UESD                  NO, DO ESD'S COMPARE            60480020
         BH    SADLOG                   NO, GO LOG ADDRESSING ERROR     60560020
         BE    SCOMPD                   YES, GO CHECK DISPLACEMENT      60640020
SCOMPC   LA    R14,USNXT                STEP TO NEXT USING ENTRY        60720020
         B     SCOMPB                   GO CONTINUE SEARCH              60800020
SCOMPD   LR    R1,R12                   GET EXPRESSION VALUE            60880020
         S     R1,UVAL                  SUBTRACT USING VALUE            60960020
         BM    SCOMPC                   USING VALUE TOO LARGE           61040020
         CH    R1,=H'4096'              IS DISPLACEMENT 4096 OR GREATER 61120020
         BNL   SCOMPC                   YES, GO CONTINUE SEARCH         61200020
         LTR   R12,R12                  IS DISPLACEMENT POSITIVE        61280020
         BL    SCOMPE                   NO, GO ALLOW NEG DISPLACEMENT   61360020
         TM    UVAL,BITFF               IS USING OUT OF RANGE   OZ04407 61440005
         BM    SCOMPC                   YES, DON'T ALLOW IT     OZ04407 61520005
SCOMPE   LH    R0,UREG                  GET USING REGISTER              61600020
         SLL   R0,D12                   FORM VALUE                      61680020
         OR    R1,R0                                                    61760020
         B     SKONOUT                  TO SET OUTPUT                   61840020
SCOMPF   LTR   R9,R9                    IS USING ABSOLUTE               61920020
         BNZ   SADLOG                   NO, GO LOG ERROR                62000020
         LR    R1,R12                   GET VALUE                       62080020
         CH    R1,=H'4096'              IS DISPLACEMENT TOO LARGE       62160020
         BNL   SADLOG                   YES, GO LOG ERROR               62240020
         LTR    R1,R1                   IS NEG DISP TO BIG     @OY11250 62320006
         BL    SADLOG                   YES, GO LOG ERROR               62400020
         N     R1,=A(X'FFF')            CLEAR ANY NEGATIVE BITS         62480020
         B     SKONOUT                  GO COMPLETE OUTPUT              62560020
SADLOG   BAL   R9,ERLOG2                GO LOG ERROR                    62610020
         DC    AL1(SEV209,ERR209,CLMPTR,0)  ADDRESSABILITY ERROR        62660020
SZVAL    SR    R1,R1                    ZERO TO VALUE                   62720020
         B     SKONOUT                  TO OUTPUT                       62800020
SUBF     L     R0,DECKON                CHECK ESD PTR                   62880020
         LA    R6,D1(R6)                STEP OVER RIGHT PAREN OF SUBFLD 62960020
         LTR   R0,R0                                                    63040020
         BZ    SDISP                    OK                              63120020
         BAL   R9,ERLOG2                GO LOG ERROR                    63160020
         DC    AL1(SEV159,ERR159,0,0)   RELOCATION ERROR                63200020
         B     SZVAL                    PLOW ON                         63240020
SDISP    L     R1,SMOD                  GET DISPLACEMENT                63280020
         CL    R1,DISPLIM               CHECK TOO BIG                   63360020
         BL    SREG                     OK                              63440020
         BAL   R9,ERLOG2                GO LOG ERROR                    63480020
         DC    AL1(SEV208,ERR208,0,0)  BAD DISPLACEMENT                 63520020
         B     SZVAL                    PLOW ON                         63560020
SREG     L     R2,EMOD                  GET REGISTER                    63600020
         CL    R2,REGLIM                CHECK TOO BIG                   63680020
         BNH   SFVAL                    OK                              63760020
         BAL   R9,ERLOG2                GO LOG ERROR                    63800020
         DC    AL1(SEV230,ERR230,CLMPTR,0) INVALID REGISTER             63840020
         B     SZVAL                    PLOW ON                         63880020
SFVAL    SLL   R2,12                    FORM VALUE                      63920020
         CH    R1,=H'-4096'             IS NEGATIVE DISPLACEMENT TO BIG 64000020
         BL    SADLOG                   YES, GO LOG ERROR               64080020
         N     R1,=A(X'FFF')             CLEAR ANY NEGATIVE BITS        64160020
         OR    R1,R2                                                    64240020
SKONOUT  ST    R1,0(,R4)                SET OUTPUT                      64320020
         EJECT                                                          64400020
LJUST    GOIF  LITRSW,ON=LITEV          OPERAND OF LITERAL ?            64440020
         CLC   OPNDCT(D2),LCTRSAV+D8    OVER OPERAND COUNT              64460020
         BH    NOTINC                   YES FORGET OUTPUT               64480020
LITEV    TM    ZDUPSW,TESTER            CHECK ZERO DUP FACTOR           64500020
         BZ    NOZDP2                   NO                              64560020
         XC    BITMOD(4),BITMOD         YES, CLEAR BIT-LENGTH           64640020
         B     KDELIM                   SKIP OUTPUT                     64720020
NOZDP2   TM    DUMSW,TESTER             IS THIS A DXD OR DS             64800020
         BNZ   KDELIM                   YES, SKIP OUTPUT                64880020
         L     R10,BITMOD               GET EXPLICIT BIT-LENGTH         64960020
         S     R10,KLENGTH              SUBTRACT IMPLICIT LENGTH        65040020
         BZ    KNORMAL                  TO NO PAD OR TRUNCATION         65120020
         BP    KPAD                     TO OUTPUT PADDING               65200020
         LCR   R10,R10                  GET POSITIVE DIFFERENCE         65280020
         SRDL  R10,3                    CHANGE TO BYTES                 65360020
         A     R10,OUTSTART             TRUNCATED START ADDRESS         65440020
         LR    R2,R11                   SET BIT REMAINDER               65520020
         SRL   R2,29                                                    65600020
         L     R11,BITMOD               SET TRUNCATED COUNT             65680020
         B     KALLOUT                  TO OUTPUT                       65760020
KPAD     LR    R11,R10                  SET PAD OUTPUT COUNT            65840020
         SR    R2,R2                    CLEAR BIT REMAINDER             65920020
         LA    R10,1(,R4)               SET PAD OUTPUT POINTER          66000020
         L     R12,=A(KOUTPUT)          CALL OUTPUT                     66080020
         BALR  R9,R12                   BRANCH TO ROUTINE               66160020
KNORMAL  L     R10,OUTSTART             SET CONSTANT START              66240020
         SR    R2,R2                    CLEAR BIT REMAINDER             66320020
         L     R11,KLENGTH              SET CONSTANT BIT LENGTH         66400020
KALLOUT  L     R12,=A(KOUTPUT)          CALL OUTPUT                     66480020
         BALR  R9,R12                   BRANCH TO ROUTINE               66560020
         EJECT                                                          66640020
KDELIM   L     R1,BITLC                 INCREMENT BIT LOCATION COUNTER  66720020
         A     R1,BITMOD                                                66800020
         LR    R0,R1                    SAVE IT                         66880020
         L     R2,ELCTR                 GET CURRENT LC                  66960020
         LA    R2,0(,R2)                CLEAR WRAP BITS                 67040020
         SRL   R0,3                     TRUNCATE BIT LC TO BYTES        67120020
         N     R1,WRAPMSK               CLEAR BIT LC WRAP               67200020
         ST    R1,BITLC                 SET UPDATED BIT LC              67280020
         SR    R0,R2                    FORM LC INCREMENT               67360020
         BZ    NOTINC                   TO NO INCREMENT                 67440020
         ST    R0,LOCLEN                STORE INCREMENT                 67520020
         JCALL LOCUPD                   CALL LOCATION COUNTER UPDATE    67600020
NOTINC   SET   VLIT,OFF                 TURN OFF PERIOD SWITCH          67680020
         L     R1,LMOD                  ACCUMULATE LENGTH OF DC         67700020
         A     R1,DCLNG                                                 67720020
         ST    R1,DCLNG                 SAVE ACCUMULATED LENGTH         67740020
         TM    MTSW,TESTER              IS EMPTY DS SWITCH ON?          67760020
         BNZ   OPEND                    YES, TO FINISH OPERAND          67840020
         CLI   0(R6),JCOMMA             CHECK MULTIPLE CONSTANT         67920020
         LA    R6,1(,R6)                STEP OVER DELIMITER             68000020
         BE    MLTKON                   YES                             68080020
         L     R1,DUPF                  REDUCE DUP-FACTOR               68160020
         SH    R1,ONE                                                   68240020
         ST    R1,DUPF                                                  68320020
         BNP   OPEND                    TO NO DUPLICATE SCAN            68400020
         GOIF  LTDECV,ON=STMEND         IS THIS A LITERAL REFERENCE     68480020
         GOIF  DSSW,OFF=NOTDS           IS ENTRY A DS                   68560020
         L     R2,BITLC                 FORM BIT INCREMENT              68640020
         S     R2,STRTLC                                                68720020
         MR    R0,R2                    TIMES DUP FACTOR LESS 1         68800020
         SR    R2,R2                                                    68880020
         B     DUPDS                    TO OVERFLOW CHECK               68960020
NOTDS    BCTR  R6,0                     BACK-UP TEXT POINTER            69040020
         SET   XRFNO,OFF                TURN OFF XREF                   69120020
         MVI   SKLOG,TESTER             TURN OFF ERLOG                  69200020
         TM    FLAGINC(R3),ABIT         CHECK ADDRESS-TYPE              69280020
         BO    REPSCAN                  YES, TO SCAN AGAIN              69360020
         LH    R0,KCOUNT                TEST MULTIPLE CONSTANTS         69440020
         LTR   R0,R0                                                    69520020
         BZ    LJUST                    NO, TO REPEAT OUTPUT            69600020
REPSCAN  L     R6,KONSTRT               RE-SET TEXT POINTER             69680020
         SET   DUPEVAL,ON               INDICATE DUPLICATE EVALUATION   69730020
         GOIF  NOTEHS,OFF=DUPLOOP       IS POINT NECESSARY              69760020
         LH    R10,JINFILE              POINT TO INPUT FILE             69840020
         JPOINT FILE=(R10),NEXT=GET,ADDR=NOTEVAL POINT BACK FOR SYMBOLS 69920020
         SET   XRFNO,OFF                TURN XREF OFF                   70000020
*                                                TO BE RESCANNED        70080020
         B     DUPLOOP                                                  70160020
MLTKON   LH    R1,KCOUNT                STEP CONSTANT COUNT             70240020
         LA    R1,1(,R1)                                                70320020
         STH   R1,KCOUNT                                                70400020
         B     MLTLOOP                  TO SCAN NEXT CONSTANT           70480020
         EJECT                                                          70720020
OPEND    SET   (NOTEWL,NOTEHS),OFF      TURN OFF NOTE POINT SWITCHES    70800020
         SET   DUPEVAL,OFF              RESET DUP EVALUATION            70850020
         GOIF  LTDECV,ON=OPEND1         IF LITERAL,EXIT                 70880020
         GOIF  LITRSW,ON=STMEND         IF LITERAL DC THEN EXIT         70960020
         CLI   D0(R6),JCOMMA            IS COMMA NEXT                   71120020
         BNE   STMEND1                  GO CHECK FOR BLANK              71200020
         LA    R6,1(,R6)                YES, STEP OVER COMMA            71280020
         B     NEXTOP                   TO NEXT OPERAND                 71360020
OPEND1   LR    R10,R6                   RESTORE OPERAND POINTER         71440020
         B     KLEANUP                  GO CLEAN UP AND EXIT            71520020
STMEND3  EQU   *                        BRANCH LABEL                    71600020
         MVC   ELCTR,LCTRSAV+D12        RESTORE LOCTR                   71680020
         MVC   OBITS(2),LCTRSAV+D10     RESTORE OUTPUT BIT COUNT        71760020
         SET   (NOTEWL,NOTEHS),OFF      TURN OFF NOTE SWITCHES          71840020
         TM    DUMSW,TESTER             IS IT A DS              OX00223 71890026
         BZ    NOFNINC                  NO, GO TO EXIT          OX00223 71900026
         GOIF  PGEN,ON=NOFNINC          YES, IF PRT GEN ON EXIT OX00223 71910026
         MVI   FSTPSW,D0                NO, CLEAR FIRST PRNT SW OX00223 71912026
         B     NOFNINC                  GO TO EXIT                      71920020
STMEND1  GOIF  D0(R6),JBLANK,EQ=OPEND2  IS IT BLANK?                    72000020
         BAL   R9,ERLOG                 GO LOG ERROR                    72080020
         DC    AL1(SEV178,ERR178,CLMPTR,0)  BLANK EXPECTED              72160020
OPEND2   CLC   OPNDCT(2),LCTRSAV+D8     OVER OPERAND COUNT?             72240020
         BNH   STMEND                   BRANCH AROUND IF NO             72320020
         MVC   ELCTR,LCTRSAV+D12        RESTORE LOCTR                   72400020
         MVC   OBITS(2),LCTRSAV+D10     RESTORE OUTPUT BIT COUNT        72480020
         B     NOFNINC                  EXIT                            72560020
         EJECT                                                          72720020
STMEND   L     R1,BITLC                 PADDED BIT LOCATION COUNTER     72800020
         AH    R1,SEVEN                 TO BYTES                        72880020
         SRL   R1,3                                                     72960020
         L     R2,ELCTR                 GET CURRENT LC                  73040020
         LA    R2,0(,R2)                CLEAR WRAP BITS                 73120020
         SR    R1,R2                    IS INCREMENT NEEDED             73200020
         BZ    NOFNINC                  NO                              73280020
         ST    R1,LOCLEN                YES, SET INCREMENT = 1          73360020
         LR    R10,R6                   SAVE TEXT POINTER               73440020
         SET   (NOTEWL,NOTEHS),OFF      BE SURE NOTE-POINT SWITCHES OFF 73520020
         JCALL LOCUPD                   CALL LOCATION COUNTER UPDATE    73600020
NOFNINC  CLI   DCLNG,X'00'              IS DC TOO LONG         @OX09734 73680005
         BE    OKLNG                                           @OX09734 73700005
         X5ERRL 157,0                   LENGTH ERROR                    73720020
OKLNG    SR    R1,R1                                                    73740020
         TM    DUMSW,TESTER             IS THIS DS OR DXD               73760020
         BNZ   CHEK1ST                  YES                             73840020
         LH    R2,OBITS                 NO, SET OUTPUT BIT COUNT        73920020
         LA    R1,ENTDC                 SET FOR DC PRINT                74000020
         LTR   R2,R2                    CHECK UNPRINTED DATA            74080020
         BNZ   FPRCALL                  YES                             74160020
CHEK1ST  TM    FSTPSW,TESTER            HAVE WE PRINTED YET             74240020
         BNZ   KLEANUP                  YES                             74320020
FPRCALL  L     R12,=A(DCPRINT)          SET FOR DCPRINT                 74400020
         BALR  R9,R12                   BRANCH TO ROUTINE               74480020
KLEANUP  SET   XRFNO,ON                 TURN ON XREF                    74560020
         MVC   PRINTSW,DCPRSW           RESTORE PRINT SWITCH            74640020
         SET   PRDEFREQ,OFF             TURN PRIOR DEF REQUIRED OFF     74720020
GETOT    JRETURN ,                      EXIT                            74800020
         JEXTRN (X5L01=LOGERR)          DEFINE EXTRNAL SYMBOL           74880020
DISPLIM  DC    F'4096'                  DISPLACEMENT UPPER LIMIT        74960020
REGLIM   DC    F'15'                    REGISTER UPPER LIMIT            75040020
BIGLIM   DC    F'524280'                L-MOD BIT LIMIT FOR C/X IN DS   75120020
YMASK    DC    X'00007FFF'              Y-CON OVERFLOW CHECKER          75200020
YNMASK   DC    X'FFFF8000'              Y-CON LOWER LIMIT               75250020
WRAPMSK  DC    X'07FFFFFF'              BIT LOCTR WRAP MASK             75280020
BYTEMSK  DC    X'FFFFFFF8'              PARTIAL-BYTE PAD MASK           75360020
ALINMT   DC    4F'0'                    ALIGNMENT BYTES FOR PRINT       75440020
TABLENG  DC    H'20'                    TYPE-TABLE ITEM LENGTH          75520020
ONE      DC    H'1'                                                     75600020
SEVEN    DC    H'7'                                                     75760020
         EJECT                                                          75762020
*                                                                       75764020
*  SUBROUTINE LINKAGE TO CHECK FOR DUPLICATE ERROR MESSAGES AND TO      75766020
*  CALL THE ERROR LOGGING ROUTINE IF IT IS NOT                          75768020
*                                                                       75770020
*  NOTE - R0 AND R1 ARE DESTROYED                                       75772020
*                                                                       75774020
ERLOG    ST    R6,ERRPTR                SAVE COLUMN POINTER             75776020
ERLOG2   SR    R0,R0                    ZERO FOR INSERT                 75778020
         IC    R0,D1(,R9)               PICK UP THE ERROR CODE          75780020
         SLL   R0,D24                   POSITON IT                      75782020
         SRA   R0,D16                      WITH A SIGN                  75784020
         IC    R0,KCOUNT+D1                  AND COUNT                  75786020
         L     R1,X5ATEMP               GET INDEX                       75788020
         LTR   R1,R1                    ARE ANY LOGGED YET THIS OPERAND 75790020
         BZ    LOGIT                    NO, DO IT                       75792020
LOGLOOP  CH    R0,X5ATEMP+D2(R1)        YES, IS IT A DUPLICATE          75794020
         BE    D4(R9)                   YES, BYPASS ERROR LOGGING       75796020
         BCTR  R1,0                     BACK UP THE INDEX               75798020
         BCT   R1,LOGLOOP               TO NEXT COMPARE                 75800020
LOGIT    CLI   X5ATEMP+D3,ELIM          ANY ROOM LEFT                   75802020
         BE    NOTABE                   NO, SKIP ENTRY                  75804020
         L     R1,X5ATEMP               YES, REFRESH INDEX              75806020
         STH   R0,X5ATEMP+D4(R1)        PLUG CODE & CONSTANT ID         75808020
         LA    R1,D2(,R1)               BUMP INDEX                      75810020
         ST    R1,X5ATEMP               AND SAVE IT                     75812020
NOTABE   L     R12,=A(LOGERR)           POINT AT ERROR ROUTINE          75814020
         BR    R12                      GO THERE                        75816020
ELIM     EQU   L'X5ATEMP-D4             MAXIMUM ERROR ENTRY DISP        75818020
         LTORG                                                          75840020
DCTRBL   DC    26X'00'                  DC TYPE TRANSLATE TABLE         75920020
DCTABLE  DC    0F'0'                                                    76000020
         DC    H'1,0,1,2048,0,0,0,0',B'01000000',AL3(CKON)            C 76080020
         DC    H'1,0,1,2048,0,0,0,0',B'01000000',AL3(XKON)            X 76160020
         DC    H'1,0,1,2048,0,0,0,0',B'01000000',AL3(BKON)            B 76240020
         DC    H'1,0,1,128,0,31,0,0',B'01000000',AL3(PKON)            P 76320020
         DC    H'1,0,1,128,0,16,0,0',B'01000000',AL3(ZKON)            Z 76400020
         DC    H'16,7,1,128,0,28,-85,75',B'01110000',AL3(DKON)        L 76480020
         DC    H'8,7,1,64,0,14,-85,75',B'01110000',AL3(DKON)          D 76560020
         DC    H'4,3,1,64,0,14,-85,75',B'01110000',AL3(DKON)          E 76640020
         DC    H'4,3,1,64,-187,346,-85,75',B'01110000',AL3(DKON)      F 76720020
         DC    H'2,1,1,64,-187,346,-85,75',B'01110000',AL3(DKON)      H 76800020
         DC    H'4,3,1,32,0,0,0,0',B'11000000',AL3(AYKON)             A 76880020
         DC    H'2,1,1,16,0,0,0,0',B'11000000',AL3(AYKON)             Y 76960020
         DC    H'4,3,24,32,0,0,0,0',B'10000000',AL3(VKON)             V 77040020
         DC    H'4,3,8,32,0,0,0,0',B'10000000',AL3(QKON)              Q 77120020
         DC    H'2,1,16,16,0,0,0,0',B'10000000',AL3(SKON)             S 77200020
         EJECT                                                          77280020
KOUTPUT  JSAVE BASE=YES                 SAVE REGISTERS                  77360020
         MVC   FULLWD(4),0(R10)         GET 1ST 4 BYTES                 77440020
         LR    R4,R7                    SAVE REGISTER                   77520020
         L     R7,FULLWD                GET FIRST 4 BYTES               77600020
         LA    R10,4(,R10)              SET FOR NEXT PICKUP             77680020
         LA    R3,32                    SET INPUT BIT COUNT             77760020
         SLL   R7,D0(R2)                TRUNCATE 1ST BYTE               77840020
         SR    R3,R2                    ADJUST IN-BIT COUNT             77920020
         B     KOBCHEK                  TO CHECK OUT-BIT LIMIT          78000020
KOUTSET  LH    R14,OBITS                GET PRINT BIT COUNT             78080020
         SRDL  R14,3                    DIVIDE BY 8                     78160020
         LA    R9,DCDATA(R14)           POINT TO CURRENT PRINT BYTE     78240020
         SR    R14,R14                                                  78320020
         SLDL  R14,3                    8 - REMAINDER                   78400020
         LA    R2,8                     INTO SHIFT CONTROL              78480020
         SR    R2,R14                                                   78560020
         SR    R3,R2                    ADJUST INBIT COUNT BY SHIFT     78640020
         BM    KNEGCT                   TO NOT ENOUGH IN-BITS           78720020
         SR    R6,R6                    CLEAR OUTPUT REGISTER           78800020
         SLDL  R6,0(R2)                 SHIFT IN BITS                   78880020
         EX    R6,KBITOR                OR BITS TO PRINT                78960020
         AH    R2,OBITS                 INCREMENT OUT-BIT COUNT         79040020
         STH   R2,OBITS                                                 79120020
         SRA   R2,6                     IS PRINT FULL                   79200020
         BZ    KOUTSET                  NO, KEEP SHIFTING               79280020
* PRINT 8 BYTES HERE                                                    79360020
         LA    R2,64                    CALL PRINT FOR                  79440020
         LA    R1,ENTDC                 SET FOR DC PRINT                79520020
         STM   R10,R11,PREGSV           SAVE IN-BIT CONTROLS            79600020
         XR    R7,R4                    EXCHANGE                        79680020
         XR    R4,R7                      REGISTERS                     79760020
         XR    R7,R4                        FOR NEXT ROUTINE            79840020
         LA    R12,DCPRINT                                              79920020
         BALR  R9,R12                   BRANCH TO ROUTINE               80000020
         XR    R7,R4                    RESTORE                         80080020
         XR    R4,R7                      BY EXCHANGING                 80160020
         XR    R7,R4                        THEM                        80240020
         LM    R10,R11,PREGSV           RESTORE IN-BIT CONTROLS         80320020
         B     KOUTSET                  TO NEXT OUTPUT                  80400020
KNEGCT   LCR   R1,R3                    SET ZERO-FILL SHIFT             80480020
         AR    R2,R3                    REDUCE INITIAL SHIFT            80560020
         SR    R6,R6                    CLEAR OUTPUT REGISTER           80640020
         SLDL  R6,0(R2)                 SHIFT IN REMAINING BITS         80720020
         SLL   R6,0(R1)                 POSITION FOR OUTPUT             80800020
         EX    R6,KBITOR                OR BITS TO PRINT                80880020
         AH    R2,OBITS                 INCREMENT OUT-BIT COUNT         80960020
         STH   R2,OBITS                 FULL PRINT IS IMPOSSIBLE        81040020
         MVC   FULLWD(4),0(R10)         GET NEXT 4 BYTES                81120020
         L     R7,FULLWD                GET NEXT 4 BYTES                81200020
         LA    R10,4(,R10)              SET FOR NEXT PICKUP             81280020
         LA    R3,32                    RE-SET INPUT BIT COUNT          81360020
KOBCHEK  SR    R11,R3                   REDUCE TOTAL IN-BIT COUNT       81440020
         BNM   KOUTSET                  TO OUTPUT UNLESS NEGATIVE       81520020
         AR    R3,R11                   FORM REMAINING IN-BIT COUNT     81600020
         BP    MORPRNT                  EXIT IF ZERO                    81680020
KXIT     JRETURN ,                      EXIT                            81760020
MORPRNT  SR    R11,R11                  ZERO TO TOTAL REMAINDER         81840020
         B     KOUTSET                  TO OUTPUT THE REST              81920020
KBITOR   OI    D0(R9),D0                EXECUTED OR FOR PRINT           82000020
         DROP  R5                       RETURN TO COMMON USING REGISTER 82080020
         EJECT                                                          82160020
         PRINT DATA                                                     82240020
* SUBROUTINE TO CALL PRINT                                              82320020
* TO CALL -  LA R12,DCPRINT  -  BALR R5,R12                             82400020
* SAVES R3 THRU R13                                                     82480020
* CLEARS PRINT DATA, CONTROL BYTE, AND OBITS AFTER PRINT                82560020
* TURNS OFF 1ST TIME SWITCH IF NOT ALIGN CALL                           82640020
* PRINT LOCATION COUNTER IS UPDATED AFTER PRINT                         82720020
* PARAMETERS -                                                          82800020
*        R1 = 0 FORCES ENTIRE STATEMENT PRINT, NO DATA (FOR DS, DXD)    82880020
*        R1 = X'80' FORCES ALIGNMENT PRINT                              82960020
*           R2 = ALIGNMENT BYTE COUNT                                   83040020
*        R1 = X'40' FORCES DATA PRINT                                   83120020
*           R2 = OUTPUT BIT COUNT (PARTIAL BYTE GETS PADDED)            83200020
DCPRINT  JSAVE BASE=YES                 SAVE REGISTERS                  83280020
         STM   R10,R12,PRNTSV           SAVE REGISTERS                  83360020
         LTR   R1,R1                    CHECK STATEMENT PRINT           83440020
         BNZ   DCPACT                   NO                              83520020
         SR    R2,R2                    ZERO DATA BYTES                 83600020
         MVI   LHFLGS,D0                YES, ZERO CONTROL BYTE          83680020
         MVI   FSTPSW,TESTER            TURN OFF 1ST TIME SWITCH        83760020
         GOIF  DXDSW,OFF=DCPCALL        IS THIS DXD                     83840020
         MVI   LHFLGS,DNTPLH            SET NO LEFT-HALF                83920020
         B     DCPCALL                  TO PRINT                        84000020
DCPACT   LA    R0,ENTALN                CHECK ALIGN CALL                84080020
         CLR   R1,R0                                                    84160020
         BNE   POBITS                   NO                              84240020
         XC    DCDATA,DCDATA            CLEAR PRINT DATA                84320020
         B     PCTROL                   TO SET CONTROL                  84400020
POBITS   LA    R2,7(,R2)                PAD PARTIAL BYTE                84480020
         SRL   R2,3                     FORM BYTE COUNT                 84560020
         MVI   FSTPSW,TESTER            TURN OFF 1ST TIME SWITCH        84640020
PCTROL   LA    R1,0(R1,R2)              SET CONTROL BYTE                84720020
         STC   R1,LHFLGS                SET LEFT HALF FLAGS             84800020
DCPCALL  LA    R10,DC0OUT               SET PRINT INDEX                 84880020
         LR    R3,R2                    SAVE DATA BYTES                 84960020
         L     R5,TXTPTR                GET TEXT POINTER                85040020
         JCALL OUTPUT                   CALL PRINT PUNCH ROUTINE        85120020
         LA    R5,LEFTHF                POINT TO WORK AREA              85200020
         JEXTRN (X5P01=OUTPUT)          DEFINE EXTERNAL SYMBOL          85280020
         XC    DCDATA,DCDATA            CLEAR DATA                      85360020
         MVI   OBITS+1,0                CLEAR OUTPUT-BIT COUNT          85440020
         L     R1,LOCATN                INCREMENT PRINT LOCATION        85520020
         ALR   R1,R3                    OR ALIGNMENT BYTES              85600020
         ST    R1,LOCATN                STORE NEW LOCATION COUNTER      85680020
         LM    R10,R12,PRNTSV           RESTORE REGISTERS               85760020
DCXIT    JRETURN ,                      EXIT                            85840020
         EJECT                                                          86000020
* DC CHARACTERISTICS AND GO-TO TABLE                                    86080020
* EACH TABLE ITEM IS 20 BYTES LONG                                      86160020
*       BYTES 0-1 - IMPLIED LENGTH                                      86240020
*       BYTES 2-3 - ALIGNMENT FACTOR                                    86320020
*       BYTES 4-5 - LENGTH-MOD LOWER LIMIT                              86400020
*       BYTES 6-7 - LENGTH-MOD UPPER LIMIT                              86480020
*       BYTES 8-9 - SCALE-MOD LOWER LIMIT                               86560020
*       BYTES 10-11 - SCALE-MOD UPPER LIMIT                             86640020
*       BYTES 12-13 - EXPONENT-MOD LOWER LIMIT                          86720020
*       BYTES 14-15 - EXPONENT-MOD UPPER LIMIT                          86800020
*       BYTE 16 - FLAG BYTE                                             86880020
*          BIT 0 = 1 IF ADDRESS TYPE                                    86960020
*          BIT 1 = 1 IF BIT-LENGTH LEGAL                                87040020
*          BIT 2 = 1 IF SCALE-MOD LEGAL                                 87120020
*          BIT 3 = 1 IF EXPONENT-MOD LEGAL                              87200020
*          BITS 4 - 7 CURRENTLY UNUSED                                  87280020
*       BYTES 17-19 - BRANCH ADDRESS FOR CONSTANT SCAN                  87360020
IMPLINC  EQU   0                        IMPLICIT LENGTH ACCESS          87440020
ALININC  EQU   2                        ALIGNMENT ACCESS                87520020
LOLMINC  EQU   4                        LO L-MOD ACCESS                 87600020
HILMINC  EQU   6                        HI L-MOD ACCESS                 87680020
LOSMINC  EQU   8                        LO S-MOD ACCESS                 87760020
HISMINC  EQU   10                       HI S-MOD ACCESS                 87840020
LOEMINC  EQU   12                       LO E-MOD ACCESS                 87920020
HIEMINC  EQU   14                       HI E-MOD ACCESS                 88000020
FLAGINC  EQU   16                       FLAG BYTE ACCESS                88080020
ADDRINC  EQU   16                       ADDRESS WORD ACCESS             88160020
ABIT     EQU   X'80'                    ADDRESS TYPE TESTER             88240020
EBIT     EQU   X'10'                    E-MOD VALIDITY TESTER           88480020
CBKT     EQU   1                        C  TYPE FLAG  (DC)              88560020
XBKT     EQU   CBKT+1                   X  TYPE FLAG  (DC)              88640020
BBKT     EQU   XBKT+1                   B  TYPE FLAG  (DC)              88720020
PBKT     EQU   BBKT+1                   P  TYPE FLAG  (DC)              88800020
ZBKT     EQU   PBKT+1                   Z  TYPE FLAG  (DC)              88880020
LBKT     EQU   ZBKT+1                   L  TYPE FLAG  (DC)              88960020
DBKT     EQU   LBKT+1                   D  TYPE FLAG  (DC)              89040020
EBKT     EQU   DBKT+1                   E  TYPE FLAG  (DC)              89120020
FBKT     EQU   EBKT+1                   F  TYPE FLAG  (DC)              89200020
HBKT     EQU   FBKT+1                   H  TYPE FLAG  (DC)              89280020
ABKT     EQU   HBKT+1                   A  TYPE FLAG  (DC)              89360020
YBKT     EQU   ABKT+1                   Y  TYPE FLAG  (DC)              89440020
VBKT     EQU   YBKT+1                   V  TYPE FLAG  (DC)              89520020
QBKT     EQU   VBKT+1                   Q  TYPE FLAG  (DC)              89600020
SBKT     EQU   QBKT+1                   S  TYPE FLAG  (DC)              89680020
         ORG   DCTRBL+JC-JALFAMIN       ORG TO CORRECT PLACE FOR C      89760020
         DC    AL1(CBKT)                C ENTRY IN TABLE                89840020
         ORG   DCTRBL+JX-JALFAMIN       ORG TO CORRECT PLACE FOR X      89920020
         DC    AL1(XBKT)                X ENTRY IN TABLE                90000020
         ORG   DCTRBL+JB-JALFAMIN       ORG TO CORRECT PLACE FOR B      90080020
         DC    AL1(BBKT)                B ENTRY IN TABLE                90160020
         ORG   DCTRBL+JP-JALFAMIN       ORG TO CORRECT PLACE FOR P      90240020
         DC    AL1(PBKT)                P ENTRY IN TABLE                90320020
         ORG   DCTRBL+JZ-JALFAMIN       ORG TO CORRECT PLACE FOR Z      90400020
         DC    AL1(ZBKT)                Z ENTRY IN TABLE                90480020
         ORG   DCTRBL+JL-JALFAMIN       ORG TO CORRECT PLACE FOR L      90560020
         DC    AL1(LBKT)                L ENTRY IN TABLE                90640020
         ORG   DCTRBL+JD-JALFAMIN       ORG TO CORRECT PLACE FOR D      90720020
         DC    AL1(DBKT)                D ENTRY IN TABLE                90800020
         ORG   DCTRBL+JE-JALFAMIN       ORG TO CORRECT PLACE FOR E      90880020
         DC    AL1(EBKT)                E ENTRY IN TABLE                90960020
         ORG   DCTRBL+JF-JALFAMIN       ORG TO CORRECT PLACE FOR F      91040020
         DC    AL1(FBKT)                F ENTRY IN TABLE                91120020
         ORG   DCTRBL+JH-JALFAMIN       ORG TO CORRECT PLACE FOR H      91200020
         DC    AL1(HBKT)                H ENTRY IN TABLE                91280020
         ORG   DCTRBL+JA-JALFAMIN       ORG TO CORRECT PLACE FOR A      91360020
         DC    AL1(ABKT)                A ENTRY IN TABLE                91440020
         ORG   DCTRBL+JY-JALFAMIN       ORG TO CORRECT PLACE FOR Y      91520020
         DC    AL1(YBKT)                Y ENTRY IN TABLE                91600020
         ORG   DCTRBL+JV-JALFAMIN       ORG TO CORRECT PLACE FOR V      91680020
         DC    AL1(VBKT)                V ENTRY IN TABLE                91760020
         ORG   DCTRBL+JQ-JALFAMIN       ORG TO CORRECT PLACE FOR Q      91840020
         DC    AL1(QBKT)                Q ENTRY IN TABLE                91920020
         ORG   DCTRBL+JS-JALFAMIN       ORG TO CORRECT PLACE FOR S      92000020
         DC    AL1(SBKT)                S ENTRY IN TABLE                92080020
         ORG   , GET LOCATION COUNTER IN STEP                           92120020
         EJECT                                                          92160020
TESTER   EQU   X'F0'                    FLAG TEST MASK                  92320020
EXBLANK  EQU   X'40'                    EXTERNAL BLANK CODE             92640020
UNBKT    EQU   X'10'                    UNCLASSIFIED TEXT BKT TYPE      93520020
         JPATCH X5D00,122C              5% PATCH AREA                   93620020
         END                                                            93760020
./  ADD  SSI=71710254,NAME=IFNX5F
         JHEAD 'DC FIXED-FLOATING POINT CONVERSION',                   X00100000
               PHASEID=X5F,                                            X00200000
               LEVEL=10                                                 00300000
         COPY  JCOMMON                  GET COMMON DEFINITION           00400000
         EJECT                                                          00500000
         COPY  X5COM                    GET PHASE COMMON DEFINITION     00600000
         EJECT                                                          00700000
*                                                                       00800000
*DUMMY SECTION FOR WORKING STORAGE                                      00900000
*                                                                       01000000
WSDSECT  DSECT                                                          01100000
HOLD     DS    D                        DOUBLE WORD FOR CVB INST        01200000
AFIRST   DS    F                        SAVE AREA FOR BEGINNING POINTER 01300000
SAVEAD   DS    F                        SAVE AREA FOR ENDING POINTER    01400000
* ZWDE THRU ZWACC ARE STORED AND LOADED BY MULTIPLE OPS                 01500000
* AND MUST BE IN GIVEN SEQUENCE.                                        01600000
ZWDE     DS    F                   DECIMAL EXPONENT                     01700000
ZWSF     DS    F                   FIXED PT SCALE AND FLOATING PT EXPON 01800000
ZWTXPT   DS    F                   SAVE TEXT POINTER                    01900000
         DS    0F                  ENSURE WORD ALIGNMENT OF ZWACC       02000000
ZWACC    DS    XL20                ACCUMULATOR                          02100000
         DS    0F                  SET PROPER ALIGNMENT FOR ZWW1        02200000
ZWW1     DS    XL56                WORK AREA                            02300000
ZWW2     EQU   ZWW1+L'ZWW1-4       LOW WORD OF WORK AREA                02400000
*                                                                       02500000
DCLNGTH  DS    F                        LENGTH MODIFIER                 02600000
VASCTL   DS    C                        DECON FLAG                      02700000
ZWSW     DS    C                   CONTROL SWITCHES AND VALUE SIGN      02800000
*                             BIT 7 X'01' = FLOATING POINT  (ELSE FIXD) 02900000
*                                 6    2  = VALUE FOUND (MAYBE ZERO)    03000000
*                                 5    4  = FLT.PT IS INITIALIZED (WSF) 03100000
*                                 4    8  = FLT.PT IS L-CON             03200000
*                                                                       03300000
         EJECT                                                          03400000
*TITLE 'FFPCONV'                                                      * 03500000
*FUNCTION/OPERATION - TO DO ALL FIXED OR FLOATING POINT CONVERSION FOR* 03600000
*   DC STATEMENTS.  IT IS CALLED BY          ONCE FOR EACH CONSTANT TO* 03700000
*   BE CONVERTED.                                                     * 03800000
*ENTRY POINT- L     R12,                                              * 03900000
*            BALR R9,R12                                              * 04000000
*INPUT- R10 WILL POINT TO AN UNCLASSIFIED TEXT BUCKET CONTAINING THE  * 04100000
*          CONSTANT TO BE CONVERTED.  THE FIRST BYTE OF THE TEXT      * 04200000
*          BUCKET IS THE BUCKET CODE (NOT USED).  THE SECOND BYTE     * 04300000
*          CONTAINS THE LENGTH - 1 OF THE CONSTANT THAT FOLLOWS.      * 04400000
*       R11 WILL POINT TO AN INPUT ARRAY OF 8 FULLWORDS, FULLWORD     * 04500000
*          ALIGNED.  IF BYTE 1, WORD 1 = 1, THEN THE LENGTH IS IN BITS* 04600000
*          OTHERWISE THE LENGTH IS IN BYTES.  BYTE 4, WORD 1 IS THE   * 04700000
*          TYPE (19=L-CON, 1A=DOUBLE WORD, 1B=FLOATING POINT FULLWORD,* 04800000
*          1C=FIXED POINT FULLWORD, AND 1D=HALFWORD).  WORD 2 IS THE  * 04900000
*          LENGTH IN BYTES OR BITS, DEPENDENT ON BYTE 1, WORD 1.  WORD* 05000000
*          3 IS THE SCALING FACTOR, AND WORD 4 IS THE EXTERNAL        * 05100000
*          EXPONENT.  WORDS 5-8 ARE NOT USED FOR INPUT.               * 05200000
*       $HEVAL+4 WILL POINT TO AN AREA OF CORE FOR WORKING STORAGE    * 05300000
*OUTPUT-R10 POINTS TO A , OR A ' BUCKET.                              * 05400000
*       R11 POINTS TO THE INPUT ARRAY.  BYTE 2 WORD 1 IS THE ERROR    * 05500000
*          CODE BYTE.  WORDS 5-8 ARE THE RIGHT JUSTIFIED CONSTANT.    * 05600000
*EXTERNAL ROUTINES- NONE                                              * 05700000
*EXITS- NORMAL - $EXIT                                                * 05800000
*       ERROR - SAME, EXCEPT THE ERRORS ARE LOGGED IN THE ERROR BYTE. * 05900000
*TABLES/WORK AREAS-                                                   * 06000000
*                   (ZWDE)     F   MODIFIED EXPONENT SAVE AREA        * 06100000
*                   (ZWSF)     F   FIXED PT SCALE & FLOATING PT EXPON * 06200000
*                   (ZWTXPT)   F   TEXT POINTER SAVE AREA             * 06300000
*                   (ZWACC)   5F   ACCUMULATOR                        * 06400000
*                   (ZWW1)   56C   WORK AREA                          * 06500000
*                   (DCLNG)    F   LENGTH MODIFIER                    * 06600000
*                   (VASCTL)   C   DECON FLAG BYTE                    * 06700000
*                   (ZWSW)     C   CONTROL SWITCH AND VALUE SIGN      * 06800000
*                   (SAVEAD)   F   POINTER SAVE AREA                  * 06900000
*                   (AFIRST)   F   POINTER SAVE AREA                  * 07000000
*                   (HOLD)     D   DOUBLE WORD FOR CVB                * 07100000
*ATTRIBUTES- N/A                                                      * 07200000
*NOTES-                                                               * 07300000
         EJECT                                                          07400000
*                                                                       07500000
*    INITIALIZATION                                                     07600000
*                                                                       07700000
         USING WSDSECT,R4                                               07800000
         USING X5COM,R7                 DEFINE COMMON USING             07900000
         JCSECT (X5F00)                 INITIATE CSECT                  08000000
*C127000                                                       @AX14184 08050006
         JMODID ,                       CREATE ROUTINE IDENTIFIER       08100000
FXFLCV   JSAVE BASE=NO                  SAVE REGISTERS                  08200000
         JENTRY (X5F01=FXFLCV)          DEFINE ENTRY                    08300000
         USING FXFLCV,R3                DEFINE PHASE USING              08400000
         LR    R3,R12                   ESTABLISH BASE                  08500000
         L     R4,ALPTR                 FETCH WORKING STORAGE POINTER   08600000
         MVI   ZARYERR(R11),BIT0-BIT0   ZERO ERROR BYTE                 08700000
         L     R2,ZARYLEN(0,R11)        FETCH LENGTH MODIFIER VALUE     08800000
         TM    ZARYSGN(R11),BIT0        IS LENGTH MODIFIER BITS         08900000
         BO    CNV3                     YES                             09000000
         SLL   R2,3                     NO, BYTES, SO SHIFT FOR BITS    09100000
CNV3     BCTR  R2,0                     DECREMENT BIT LENGTH BY ONE     09200000
         ST    R2,DCLNGTH               SAVE BIT LENGTH VALUE           09300000
         CLI   ZARYTYPE(R11),BTYPEFL    IS THIS FLOATING POINT          09400000
         BH    ZWFXCV                     NO.  FIXED POINT              09500000
         CLI   ZARYTYPE(R11),BTYPEL     IS THIS AN L-CON                09600000
         BH    ZWFLCV                     NO.  FLOATING POINT           09700000
         MVI   ZWSW,BIT4+BIT7             YES. SET INDICATOR FOR L-CON  09800000
         B     ZWA1                     GO INITIALIZE                   09900000
         SPACE                                                          10000000
ZWFLCV   MVI   ZWSW,BIT7                SET INDICATOR FOR FLOATING PT   10100000
ZWA1     XR    ZWRD,ZWRD                LOWER LIMIT SCALE FACTOR        10200000
         LA    ZWRE,30                  UPPER LIMIT SCALE FACTOR        10300000
         B     ZWA2                       GO AROUND FIXED POINT SET UP  10400000
         SPACE                                                          10500000
ZWFXCV   MVI   ZWSW,BIT0-BIT0           SET INDICATOR FOR FIXED POINT   10600000
         LA    ZWRD,187                 LOWER                           10700000
         LCR   ZWRD,ZWRD                  LIMIT SCALE FACTOR            10800000
         LA    ZWRE,346                 UPPER LIMIT SCAL FACTOR         10900000
ZWA2     LR    ZWRARY,R11               SAVE INPUT ARRAY POINTER        11000000
         L     ZWRA,ZARYSCL(ZWRARY)     FETCH SCALE FACTOR              11100000
         L     ZWRH,ZARYEXP(ZWRARY)     FETCH EXTRN EXPONENT MODIFIER   11200000
         LR    ZWRB,R10                 LOAD SCAN CHAR POINTER          11300000
         STM   ZWRH,ZWRB,ZWDE           SAVE EXP, SCALE MOD AND TXT PTR 11400000
         XC    ZWACC,ZWACC         CLEAR ACCUMULATOR                    11500000
         SR    ZWRL,ZWRL           PREPARE TO MARK DECIMAL POINT        11600000
         LR    ZWRF,ZWRB           SET UP FOR NO EXP DIGITS TEST        11700000
         LR    ZWRI,ZWRH           SAVE EXPONENT MODIFIER               11800000
         EJECT                                                          11900000
*B                                                                      12000000
*B SCAN TEXT MARKING DECIMAL,END OF VALUE,FIRST TERMINATOR.             12100000
*B CONVERT EXPONENT IF ANY AND MODIFY.                                  12200000
*B                                                                      12300000
ZWB1     LR    ZWRJ,ZWRB           MARK END OF VALUE FIELD              12400000
         GOIF  D0(ZWRB),JCOMMA,EQ=ZWC1  CHECK FOR END OF OPERAND        12500000
         GOIF  D0(ZWRB),JQUOTE,EQ=ZWC1  CHECK FOR END OF OPERAND        12600000
         GOIF  D0(ZWRB),JBLANK,EQ=ZWZ4  CHECK FOR END OF OPER  @AX14184 12700006
         CLI   0(ZWRB),JE               BRANCH                          12800000
         BNE   ZWB3                     IF CHARACTER NOT E              12900000
         LA    ZWRB,1(ZWRB)             STEP OVER E                     13000000
         BAL   ZWRG,ZWS1           STEP OVER SIGN IF PRESENT            13100000
         BAL   ZWRG,DECON          CONVERT EXPONENT                     13200000
         LR    ZWRLAST,ZWRB             SET TERMINATOR POINTER          13300000
         GOIF  D0(ZWRB),JCOMMA,EQ=ZWB1A  OK IF COMMA                    13400000
         GOIF  D0(ZWRB),JQUOTE,EQ=ZWB1A  OK IF QUOTE                    13500000
         B     ZWZ4                     GO LOG ERROR AND EXIT           13600000
ZWB1A    EQU   *                        BRANCH LABEL                    13700000
         CLI   1(ZWRJ),JMINUS      BRANCH                               13800000
         BNE   ZWB2                     UNLESS EXP NEGATIVE             13900000
         LCR   ZWRH,ZWRH           COMPLEMENT EXPONENT                  14000000
         SPACE                                                          14100000
ZWB2     AR    ZWRI,ZWRH           ADD TO EXP MODIFIER                  14200000
         ST    ZWRI,ZWDE           STORE MODIFIED EXP                   14300000
         B     ZWC1                     EXIT-ALL CHAR HAVE BEEN SCANNED 14400000
         SPACE                                                          14500000
ZWB3     CLI   0(ZWRB),JPERIOD          BRANCH                          14600000
         BNE   ZWB4                     UNLESS CHAR DECIMAL POINT       14700000
         LR    ZWRL,ZWRB           MARK DECIMAL POINT                   14800000
ZWB4     LA    ZWRB,1(ZWRB)             ADVANCE TEXT POINTER            14900000
         B     ZWB1                     CONTINUE LOOP                   15000000
*C                                                                      15100000
*C SAVE POINTER TO TERMINATOR.CHECK EXPONENT AND SCALE FACTOR RANGE AND 15200000
*C CHECK FOR NO EXPONENT DIGITS. SET UP TO SCAN VALUE.                  15300000
*C                                                                      15400000
ZWC1     AH    ZWRI,=H'5'               MAKE RANGE SYMETRIC             15500000
         LR    ZWRLAST,ZWRB             SAVE TERMINATOR POINTER         15600000
         LPR   ZWRI,ZWRI           TAKE MAGNITUDE                       15700000
         CH    ZWRI,=H'80'         BRANCH                               15800000
         BNH   ZWC2                     IF EXPONENT WITHIN RANGE        15900000
         OI    ZARYERR(ZWRARY),ZRCD13   SET EXPONENT OUT OF RANGE INDIC 16000000
         SR    ZWRI,ZWRI                SET EXPONENT TO ZERO AND        16100000
         ST    ZWRI,ZWDE                  CONTINUE AS IF EXP WAS ZERO   16200000
         SPACE                                                          16300000
ZWC2     LA    ZWRH,ZRCD11              SET NO. FOR SCL FAC RANGE ERROR 16400000
         CR    ZWRA,ZWRD           BRANCH                               16500000
         BL    ZWZ3                     IF SF TOO SMALL                 16600000
         CR    ZWRA,ZWRE           BRANCH                               16700000
         BH    ZWZ3                     IF SF TOO LARGE                 16800000
         CR    ZWRB,ZWRF           BRANCH TO ERROR ROUTINE              16900000
         BE    ZWZ4                     IF NO EXP DIGIT OR TEXT         17000000
         L     ZWRB,ZWTXPT         RESET TEXT POINT TO BEGINNING VALUE  17100000
         BAL   ZWRG,ZWS1           STEP OVER VALUE SIGN IF PRESENT      17200000
         SPACE                                                          17300000
         LTR   ZWRL,ZWRL           IF NO DECIMAL                        17400000
         BNZ   ZWD1                  SET MARK TO                        17500000
         LR    ZWRL,ZWRJ             END OF VALUE                       17600000
         EJECT                                                          17700000
*D                                                                      17800000
*D STEP OVER DECIMAL POINT. CHECK FOR END OF VALUE.                     17900000
*D                                                                      18000000
ZWD1     CR    ZWRB,ZWRL           IF NEXT CHAR                         18100000
         BNE   ZWD2                     DECIMAL POINT                   18200000
         LA    ZWRB,1(ZWRB)             ADVANCE VALUE POINTER           18300000
         LR    ZWRL,ZWRB             AND DECIMAL MARKER                 18400000
ZWD2     CR    ZWRB,ZWRJ           IF END OF VALUE                      18500000
         BNL   ZWM1                  BRANCH                             18600000
*E                                                                      18700000
*E CONVERT PIECE OF VALUE.CHECK FOR ZERO.COMPUTE ADJUSTED EXP FOR PIECE 18800000
*E                                                                      18900000
ZWE1     BAL   ZWRG,DECON          CONVERT PIECE OF VALUE               19000000
         TM    VASCTL,BIT0+BIT1    IF ONE OR MORE DIGITS CONVERTED      19100000
         BZ    ZWE2                     AND NON-DIGIT REACHED, BRANCH   19200000
         TM    VASCTL,BIT0         IF NO DIGITS FOUND                   19300000
         BO    ZWZ4                     BRANCH TO INVALID TERM. MESSAGE 19400000
         LA    ZWRB,9(ZWRF)        CORRECT VALUE POINTER                19500000
ZWE2     OI    ZWSW,BIT6           SET VALUE FOUND SWITCH               19600000
         LTR   ZWRD,ZWRH           COPY AND TEST VALUE                  19700000
         BZ    ZWD1                     BRANCH IF ZERO                  19800000
         LR    ZWRG,ZWRL           LOCATION DECIMAL                     19900000
         SR    ZWRG,ZWRB             MINUS LOCATION CHAR AFTER FLD CNVT 20000000
         A     ZWRG,ZWDE             PLUS EXP GIVES ADJ EXP FOR THIS    20100000
*                                    PIECE OF VALUE                     20200000
         TM    ZWSW,BIT5+BIT7      BRANCH UNLESS FIRST NON-ZERO         20300000
         BNM   ZWG1                  PIECE FLOATING VALUE               20400000
*F                                                                      20500000
*F IF FLOATING PT COMPUTE WORKING SCALE FACTOR.                         20600000
*F                                                                      20700000
         LCR   ZWRC,ZWRG           COMPLEMENT ADJ EXP                   20800000
         MH    ZWRC,=HS13'3.322'   MULT BY LOG 10 BASE 2 (3.527 HEX)    20900000
         SRA   ZWRC,13             SCALE PRODUCT                        21000000
ZWF1     BCTR  ZWRC,0              COUNT NUMBER BITS                    21100000
         SRA   ZWRD,1                AND SUBTRACT                       21200000
         BP    ZWF1                     FROM PRODUCT                    21300000
         SRA   ZWRC,2              ROUND DOWN TO MULTIPLE OF 4          21400000
         SLA   ZWRC,2                                                   21500000
         AH    ZWRC,=H'124'          AND ADD 124                        21600000
         ST    ZWRC,ZWSF           STORE WORKING SCALE FACTOR           21700000
         OI    ZWSW,BIT5           SET FL PT INIT SWITCH                21800000
         LPR   ZWRF,ZWRC           IF WORKING SCALE FACTOR WILL         21900000
         CH    ZWRF,=H'400'          PRODUCE INVALID CHARACTERISTIC     22000000
         BH    ZWQ7                     BRANCH TO INVALID EXP MSG       22100000
*G                                                                      22200000
*G COMPUTE AMT OF BINARY SHIFT. SPLIT INTO WORD INDEX AND BIT SHIFT.    22300000
*G RESET WORKING AREA. TEST SIGN OF ADJ EXPONENT.                       22400000
*G                                                                      22500000
ZWG1     LA    ZWRC,32             32                                   22600000
         AR    ZWRC,ZWRG             PLUS ADJ EXP                       22700000
         A     ZWRC,ZWSF           PLUS SCALE FACTOR GIVES BIN SHIFT    22800000
         SPACE                                                          22900000
* NOTE - ZWSF HAS S-MODIFIER VALUE IF F-, H-CON,                        23000000
*             OR THE WORKING SCALE FACTOR IF L-, D-, OR E-CON.          23100000
         SRDA  ZWRC,5              SEPARATE INTO BIT AND WORD SHIFTS    23200000
         SRL   ZWRD,27             POSITION BIT SHIFT                   23300000
         SLL   ZWRC,2              POSITION WORD SHIFT                  23400000
         XC    ZWW1,ZWW1           CLEAR WORK AREA                      23500000
         LTR   ZWRG,ZWRG           TEST ADJ EXP                         23600000
         BNP   ZWI1                BRANCH IF ZERO OR NEG                23700000
         EJECT                                                          23800000
*H                                                                      23900000
*H ADJ EXP IS PLUS.  MULTIPLY VALUE BY 5 TO THE GIVEN POWER.            24000000
*H                                                                      24100000
         ST    ZWRH,ZWW2           STORE VALUE                          24200000
         LR    ZWRA,ZWRC           WORD SHIFT IN BYTES                  24300000
         SH    ZWRA,=H'16'           LESS 16 = LEFT LIMIT OF WORK AREA  24400000
         BP    ZWJ8                     BRANCH IF LIMIT DEFINES NO WORK 24500000
ZWH1     SR    ZWRI,ZWRI           RESET WORK AREA POINTER              24600000
         SR    ZWRH,ZWRH           CLEAR CARRY REG                      24700000
ZWH2     L     ZWRF,ZWW2(ZWRI)     LOAD PART OF VALUE                   24800000
         M     ZWRE,=F'5'          TIMES 5                              24900000
         ALR   ZWRF,ZWRH           ADD CARRY                            25000000
         BC    12,ZWH3             PROPAGATE                            25100000
         AH    ZWRE,=H'1'            CARRY                              25200000
ZWH3     LTR   ZWRH,ZWRE           SAVE CARRY AND TEST SIGN             25300000
         BNM   ZWH4                  IF NEGATIVE                        25400000
         AH    ZWRH,=H'5'            CORRECT                            25500000
ZWH4     ST    ZWRF,ZWW2(ZWRI)     STORE PARTIAL PRODUCT                25600000
         SH    ZWRI,=H'4'          STEP AREA POINTER LEFT               25700000
         CR    ZWRI,ZWRA           IF LEFT LIMIT NOT REACHED            25800000
         BNL   ZWH2                  BRANCH                             25900000
         LTR   ZWRH,ZWRH           TEST FINAL CARRY                     26000000
         BZ    ZWH5                     IF NOT ZERO                     26100000
         OI    ZARYERR(ZWRARY),DCTRUN   SET TRUNCATION INDICATOR        26200000
ZWH5     BCT   ZWRG,ZWH1           DECREMENT ADJ EXP AND CLOSE LOOP     26300000
         B     ZWJ1                     SHIFT VALUE                     26400000
*I                                                                      26500000
*I ADJ EXP IS NOT PLUS. SHIFT VALUE AS INDICATED BY THE WORD INDEX AND  26600000
*I DIVIDE BY 5 TO THE MAGNITUDE OF THE GIVEN POWER. RESET WORD INDEX    26700000
*I                                                                      26800000
ZWI1     LCR   ZWRC,ZWRC           COMPLEMENT WORD SHIFT GIVES LEFT     26900000
*                                    LIMIT WORK AREA                    27000000
         BP    ZWD1                     BRANCH IF LIMIT DEFINES NO WORK 27100000
         ST    ZWRH,ZWW2(ZWRC)     STORE VALUE IN WORK AREA SHIFTED     27200000
         LCR   ZWRG,ZWRG           COMPLEMENT AND TEST ADJ EXP GIVES    27300000
*                                    COUNT FOR NUMBER TIMES TO DIVIDE   27400000
         BZ    ZWI5                     BRANCH IF ZERO                  27500000
ZWI2     LR    ZWRI,ZWRC           SET WORKING POINTER TO LEFT LIMIT    27600000
         SR    ZWRE,ZWRE           CLEAR UPPER DIVIDEND REG             27700000
ZWI3     L     ZWRF,ZWW2(ZWRI)     LOAD PART OF DIVIDEND                27800000
         D     ZWRE,=F'10'         DIVIDE                               27900000
         SLL   ZWRF,1                BY 5                               28000000
         CH    ZWRE,=H'5'          IF REMAINDER                         28100000
         BL    ZWI4                     TOO LARGE                       28200000
         SH    ZWRE,=H'5'            CORRECT REMAINDER                  28300000
         AH    ZWRF,=H'1'            AND DIVIDEND                       28400000
ZWI4     ST    ZWRF,ZWW2(ZWRI)     STORE PARTIAL QUOTIENT               28500000
         AH    ZWRI,=H'4'          STEP WORKING POINTER RIGHT           28600000
         BNP   ZWI3                REPEAT UNTIL RIGHT LIMIT REACHED     28700000
         BCT   ZWRG,ZWI2           REDUCE COUNT AND CLOSE LOOP          28800000
ZWI5     SR    ZWRC,ZWRC           CLEAR WORD SHIFT                     28900000
         OC    ZWW1(L'ZWW1-L'ZWACC),ZWW1  TEST HI PART OF WORK AREA     29000000
         BE    ZWJ1                     IF NOT ZERO                     29100000
         OI    ZARYERR(ZWRARY),DCTRUN   SET TRUNCATION INDICATOR        29200000
         EJECT                                                          29300000
*J                                                                      29400000
*J SHIFT VALUE PER WORD SHIFT AND BIT SHIFT. TRUNCATE TO 160            29500000
*J BITS AND ADD TO ACCUMULATOR.                                         29600000
*J                                                                      29700000
ZWJ1     SR    ZWRG,ZWRG           RESET CARRY REG                      29800000
         LA    ZWRH,16             INIT ACCUMULATOR POINTER             29900000
ZWJ2     SR    ZWRE,ZWRE           RESET WORKING REGISTERS              30000000
         SR    ZWRF,ZWRF                                                30100000
         LTR   ZWRC,ZWRC           TEST WORD INDEX                      30200000
         BP    ZWJ4                     IF PLUS LEAVE WORK AREA CLEAR   30300000
         BZ    ZWJ3                     IF ZERO FETCH ONE WORD OF RESLT 30400000
         L     ZWRF,ZWW2+4(ZWRC)   FETCH LO WORD OF RESULT              30500000
ZWJ3     L     ZWRE,ZWW2(ZWRC)     FETCH HI WORD OF RESULT              30600000
ZWJ4     SLDL  ZWRE,0(ZWRD)        BIT SHIFT                            30700000
         ALR   ZWRE,ZWRG           ADD IN CARRY                         30800000
         BC    3,ZWJ5              BRANCH IF CARRY LEAVING ONE IN ZWRG  30900000
         SR    ZWRG,ZWRG           RESET CARRY                          31000000
ZWJ5     LTR   ZWRH,ZWRH           END OF ACCU                          31100000
         BM    ZWJ7                     YES, BRANCH                     31200000
         AL    ZWRE,ZWACC(ZWRH)    ADD IN PIECE FROM ACCUMULATOR        31300000
         BC    12,ZWJ6             BRANCH IF NO CARRY                   31400000
         LA    ZWRG,1              SET CARRY                            31500000
ZWJ6     ST    ZWRE,ZWACC(ZWRH)    STEP WORKAREA PT                     31600000
         SH    ZWRC,=H'4'          STEP ACCU PT                         31700000
         SH    ZWRH,=H'4'          REPEAT FOR EACH WORD OF ACCU         31800000
         B     ZWJ2                     LOOP                            31900000
ZWJ7     LTR   ZWRE,ZWRE           TEST CARRY                           32000000
         BZ    ZWD1                     IF ON                           32100000
ZWJ8     OI    ZARYERR(ZWRARY),DCTRUN   SET TRUNCATION INDICATOR        32200000
         B     ZWD1                     STEP OVER DECIMAL POINT         32300000
*M                                                                      32400000
*M SET UP TO FORMAT RESULT. BRANCH TO APPROPRIATE ROUTINE.              32500000
*M                                                                      32600000
ZWM1     LM    ZWRL,ZWRJ,ZWSF      GET SCALE FACTOR AND TEXT POINTER,   32700000
         L     ZWRC,DCLNGTH             GET BIT LENGTH                  32800000
         LCR   ZWRC,ZWRC             AND COMPLEMENT                     32900000
         TM    ZWSW,BIT5+BIT6      WHAT FORMAT REQUIRED                 33000000
         BZ    ZWZ4                     BRANCH IF TEXT TRIVIAL          33100000
         BO    ZWP1                     BRANCH IF FLOAT PT AND NON-ZERO 33200000
         EJECT                                                          33300000
*N                                                                      33400000
*N FORMAT FIXED POINT RESULT.                                           33500000
*N                                                                      33600000
ZWN1     TM    ZWACC+L'ZWACC-4,BIT0     TEST DROPPED BIT                33700000
         BZ    ZWN2                       NO ROUND NEEDED               33800000
         LA    ZWRI,L'ZWACC-4           LOAD INDEX REG                  33900000
ZWN3     LA    ZWRA,1                   LOAD ROUND/CARRY BIT            34000000
         AL    ZWRA,ZWACC-4(ZWRI)       ADD IN PIECE OF VALUE           34100000
         ST    ZWRA,ZWACC-4(ZWRI)                                       34200000
         BC    12,ZWN2                  IF NO CARRY, GO QUIT            34300000
         SH    ZWRI,=H'4'                 ELSE PROPAGATE CARRY          34400000
         BP    ZWN3                         THRU ALL OF ZWACC           34500000
         OI    ZARYERR(ZWRARY),DCTRUN   IF CARRY OUT, SET TRUNC. INDIC. 34600000
ZWN2     CLI   0(ZWRJ),JMINUS           IF VALUE SIGN IS NEGATIVE       34700000
         BE    ZWN4                       GO DO NEG. OUTPUT             34800000
* VALUE IS POSITIVE.  MOVE INTACT TO OUTPUT.                            34900000
         LM    ZWRG,ZWRB,ZWACC                                          35000000
         STM   ZWRG,ZWRB,ZARYCON(ZWRARY)  STORE IN OUTPUT AREA          35100000
* TEST FOR TRUNCATION OF HIGH-ORDER BITS (POSITIVE DATA)                35200000
         CH    ZWRC,=H'-63'             IS LENGTH OVER 2 WORDS          35300000
         BL    ZWN6                       YES.  GO DO HI 2 WORDS        35400000
         OR    ZWRG,ZWRH                TEST HI 2 WORDS FIRST           35500000
         BNZ   ZWN8                     SHOULD BE ZERO                  35600000
         SLDA  ZWRA,63(ZWRC)            TEST TRUN. IN BITS OF LO 2 WDS  35700000
         B     ZWN6+L'ZWN6                THEN GO TEST                  35800000
ZWN6     SLDA  ZWRG,127(ZWRC)           TEST TRUN. IN BITS OF HI 2 WDS  35900000
         BC    10,ZWZ5                  IF OKAY GO PUT IT OUT           36000000
         B     ZWN8                     ELSE GO LOG ERROR               36100000
* VALUE IS NEGATIVE.  COMPLIMENT IT AND PUT IN OUTPUT.                  36200000
ZWN4     LA    ZWRI,L'ZWACC-4           LOAD UP INDEX                   36300000
         SR    ZWRA,ZWRA                CLEAR REDUCTION BIT             36400000
ZWN5     L     ZWRB,ZWACC-4(ZWRI)       PICK UP A WORD                  36500000
         LCR   ZWRB,ZWRB                COMPLIMENT IT, 2'S COMP         36600000
         SLR   ZWRB,ZWRA                REDUCE TO 1'S COMP IF ABOVE    X36700000
                                            FIRST NON-ZERO WORD         36800000
         BC    2,ZWN0                   BRANCH IF VALUE IS STILL ZERO   36900000
* BRANCH GOES WRONG IF ZERO IS DEVELOPED ABOVE 1ST NON-ZERO. BUT THAT'S 37000000
*  OKAY, AS, ONCE ZWRA IS = 1, RELOADING IT DOESN'T MATTER ANYWAY.      37100000
         LA    ZWRA,1                   BEGIN 1'S COMPLIMENT NEXT WORD  37200000
ZWN0     ST    ZWRB,ZARYCON-4(ZWRARY,ZWRI) STORE IN OUTPUT AREA         37300000
         SH    ZWRI,=H'4'               NEXT                            37400000
         BP    ZWN5                       WORD                          37500000
* TEST FOR TRUNCATION OF HIGH-ORDER BITS (NEGATIVE DATA)                37600000
         LM    ZWRG,ZWRB,ZARYCON(ZWRARY) PICK UP COMP. VALUE            37700000
         CH    ZWRC,=H'-63'             IS LENGTH OVER 2 WORDS          37800000
         BL    ZWN7                       YES.  GO DO HI 2 WORDS        37900000
         SLDA  ZWRG,63                  TEST HI 2 WORDS FIRST           38000000
         BC    3,ZWN8                   SHOULD BE MAX NEG OR ZERO       38100000
         SLDA  ZWRA,63(ZWRC)            TEST TRUN. IN BITS OF LO 2 WDS  38200000
         B     ZWN7+L'ZWN7                THEN GO TEST                  38300000
ZWN7     SLDA  ZWRG,127(ZWRC)           TEST TRUN. IN BITS OF HI 2 WDS  38400000
         BC    12,ZWZ5                  IF OKAY GO PUT IT OUT           38500000
* SET TRUNCATION INDICATOR AND GO PUT OUT VALUE                         38600000
ZWN8     OI    ZARYERR(ZWRARY),DCTRUN   ELSE SET TRUNCATION BIT         38700000
         B     ZWZ5                         THEN GO PUT IT OUT.         38800000
         EJECT                                                          38900000
*P                                                                      39000000
*P NORMALIZE FLOATING POINT RESULT                                      39100000
*P                                                                      39200000
ZWP1     L     ZWRD,ZARYSCL(ZWRARY)     GET S-MODIFIER                  39300000
         CLI   ZWACC,BIT3               IS HIGH HEX DIGIT GT 0          39400000
         BNL   ZWP2                     -YES.                           39500000
* VALUE NEEDS NORMALIZATION.            -NO.                            39600000
         MVC   ZWW1(L'ZWACC),ZWACC      PUT IN TEMP STORAGE             39700000
         MVO   ZWACC+10(10),ZWW1+10(10) SHIFT VALUE LEFT 4 BITS         39800000
         MVO   ZWACC+00(11),ZWW1+00(11)                                 39900000
         AH    ZWRL,=H'4'               ADJUST WORKING SCALE FACTOR     40000000
         B     ZWP1                     RETEST NORMALIZATION            40100000
* ROUND VALUE TO LENGTH                                                 40200000
*   CALCULATE LEFT SHIFT FOR ROUNDING-BIT                               40300000
ZWP2     LR    ZWRE,ZWRD                GRAB S-MOD (HEX BYTES)          40400000
         SLA   ZWRE,2                     MAKE INTO BITS                40500000
         TM    ZWSW,BIT4                IS THIS AN L-CON                40600000
         BZ    ZWP3                       NO. GO TO  D-,E- FORMULA      40700000
         CH    ZWRC,=H'-63'               YES. IS LENGTH .GT. 64 BITS   40800000
         BNL   ZWP3                         NO. USE D,E-CON FORMULA     40900000
         CH    ZWRC,=H'-71'                 YES. IS LENGTH .GT. 72      41000000
         BL    ZWP4                           YES. USE LONG L FORMULA   41100000
         SH    ZWRE,=H'-71'                   NO. SPECIAL L FORMULA,    41200000
         B     ZWP5                             GO SHIFT                41300000
ZWP4     AH    ZWRE,=H'8'               LONG L-CON FORM.                41400000
ZWP3     AH    ZWRE,=H'134'             SHORT L-CON, D-E-CON.           41500000
         AR    ZWRE,ZWRC                SUBTRACT LENGTH-1               41600000
*                                                                       41700000
ZWP5     CH    ZWRE,=H'127'             WILL ANY OF VALUE BE RETAINED   41800000
         BH    ZWQ1                       NO.  SKIP ROUNDING.           41900000
         SRDL  ZWRE,5                   SPLIT SHIFT INTO                42000000
         SRL   ZWRF,32-5                  BITS AND                      42100000
         SLL   ZWRE,2                     WORDS  (IN BYTE TERMS).       42200000
         LCR   ZWRE,ZWRE                                                42300000
         LA    ZWRI,L'ZWACC-4(,ZWRE)    INIT INDEX WORD-SHIFT ADJUSTED  42400000
         LA    ZWRA,1                   LOAD ROUND BIT                  42500000
         SLL   ZWRA,0(ZWRF)             POSITION IT                     42600000
ZWP6     AL    ZWRA,ZWACC-4(ZWRI)       ADD IN PIECE OF VALUE           42700000
         ST    ZWRA,ZWACC-4(ZWRI)                                       42800000
         BC    12,ZWQ1                  IF NO CARRY, GO QUIT            42900000
         LA    ZWRA,1                     ELSE LOAD CARRY REGISTER,     43000000
         SH    ZWRI,=H'4'                                               43100000
         BP    ZWP6                       GO PROPAGATE CARRY            43200000
*OVERFLOW ON ROUNDING. NUTS.                                            43300000
         MVI   ZWACC,X'10'              PUT CORRECTED VALUE             43400000
         SH    ZWRL,=H'4'  (ART'S FIX)  ADJUST WORKING SCALE FACTOR     43500000
         EJECT                                                          43600000
*Q                                                                      43700000
*Q SHIFT RIGHT PER SCALE MOD., PLACE EXPONENT(S), POSITION FOR OUTPUT   43800000
*Q                                                                      43900000
ZWQ1     LR    ZWRB,ZWRD                GET S-MOD                       44000000
         AH    ZWRB,=H'1'               BUMP TO MOVE EXTRA BYTE IF     X44100000
                                          S-MOD IS ODD                  44200000
         SRA   ZWRB,1                   MAKE INTO BYTES                 44300000
         XC    ZWW1(L'ZWACC-3),ZWW1     CLEAR NEW HIGH BYTES            44400000
         LA    ZWRI,ZWW1+1(ZWRB)        INDEX MOVE. ADD 1 FOR EXP.      44500000
         MVC   0(L'ZWACC-5,ZWRI),ZWACC  MOVE AND SHIFT BY BYTES         44600000
         TM    ZARYSCL+3(ZWRARY),BIT7   WAS S-MOD ODD                   44700000
         BZ    ZWQ2                       NO. LET IT SIT                44800000
         MVO   ZWW1+1(16),ZWW1+1(16)    SHIFT BACK 1 HEX DIGIT          44900000
ZWQ2     MVC   ZWACC(L'ZWACC-3),ZWW1    BRING IT HOME                   45000000
*VALUE IN ZWW1 USED LATER IN LOST PRECISION TEST                        45100000
*                                                                       45200000
*CALCULATE EXPONENT BYTE AND INSERT IT IN VALUE                         45300000
         LA    ZWRB,384                 FORM                            45400000
         SR    ZWRB,ZWRL                  CHARACTERISTIC                45500000
         SRA   ZWRB,2                                                   45600000
         AR    ZWRB,ZWRD                ADJUST FOR S-MODIFIER           45700000
         LR    ZWRA,ZWRB                                                45800000
         SRA   ZWRA,7                   TEST FOR                        45900000
ZWQ7     LA    ZWRH,ZRCD70              CHARACTERISTIC                  46000000
         BNZ   ZWZ3                       OUT OF BOUNDS                 46100000
         CLI   0(ZWRJ),JMINUS           IF VALUE IS NEGATIVE            46200000
         BNE   ZWQ6                       NOT NEG                       46300000
         LA    ZWRB,X'80'(,ZWRB)          PUT - SIGN                    46400000
ZWQ6     STC   ZWRB,ZWACC               PLUG IN EXPONENT                46500000
         TM    ZWSW,BIT4                IS THIS A L-CON                 46600000
         BZ    ZWQ3                       NO.  GO DO FINALS.            46700000
*THIS IS AN L-CON, PROCESS LOWER EXPONENT                               46800000
         LM    ZWRE,ZWRF,ZWACC+8        PICK LOW 2 WORDS                46900000
         SRDL  ZWRE,8                   MAKE ROOM FOR EXPONENT          47000000
         STM   ZWRE,ZWRF,ZWACC+8                                        47100000
         STM   ZWRE,ZWRF,ZWW1+8         SAVE FOR LATER TEST             47200000
         SH    ZWRB,=H'14'              LOWER EXPONENT IS 14 LESS       47300000
         STC   ZWRB,ZWACC+8             PLUG IT IN                      47400000
* IF LOW EXPONENT UNDERFLOWED, THE SIGN BIT WILL BE WRONG.              47500000
*  CORRECT FOR THAT POSSIBILITY.                                        47600000
         NI    ZWACC+8,BITFF-BIT0       KILL WHATEVER SIGN BIT          47700000
         CLI   0(ZWRJ),JMINUS           IS VALUE NEGATIVE               47800000
         BNE   ZWQ3                     BIF NO                          47900000
         OI    ZWACC+8,BIT0             YES, PUT - SIGN                 48000000
* CLODDY LOOP TO SHIFT VALUE FROM ZWACC TO DCVW, AND ALSO MOVE          48100000
* TEST VALUE FROM ZWW1 TO LOW ZWW1.                                     48200000
ZWQ3     AH    ZWRC,=H'127'             COMPUTE SHIFT                   48300000
         SRDL  ZWRC,5                                                   48400000
         SRL   ZWRD,32-5                BIT SHIFT                       48500000
         SLL   ZWRC,2                   WORD SHIFT IN BYTES             48600000
         XC    ZARYCON(12,ZWRARY),ZARYCON(ZWRARY)  CLEAR RECEIVING AREA 48700000
         XC    ZWW1+16(12),ZWW1+16      CLEAR RECIEVING AREA            48800000
         SR    ZWRI,ZWRI                CLEAR LOOP INDEX                48900000
         SR    ZWRG,ZWRG                CLEAR CARRY REG                 49000000
         SR    ZWRH,ZWRH                CLEAR CARRY REG                 49100000
ZWQ4     L     ZWRE,ZWACC(ZWRI)         PICK UP WORD                    49200000
         L     ZWRL,ZWW1(ZWRI)          PICK UP WORD                    49300000
         SR    ZWRF,ZWRF                CLEAR RH WORD                   49400000
         SR    ZWRJ,ZWRJ                CLEAR RH WORD                   49500000
         SRDL  ZWRE,0(ZWRD)             SHIFT PER BIT SHIFT             49600000
         SRDL  ZWRL,0(ZWRD)             SHIFT PER BIT SHIFT             49700000
         OR    ZWRE,ZWRG                PUT IN BIT FROM PREVIOUS WORD   49800000
         OR    ZWRL,ZWRH                PUT IN BIT FROM PREVIOUS WORD   49900000
         LR    ZWRG,ZWRF                SAVE OUTSHIFT FOR NEXT WORD     50000000
         LR    ZWRH,ZWRJ                SAVE OUTSHIFT FOR NEXT WORD     50100000
         LA    ZWRB,0(ZWRI,ZWRC)        ADD 2 INDEX REGS TOGETHER       50200000
         ST    ZWRE,ZARYCON(ZWRARY,ZWRB)  PUT WORD OFFSET PER WD SHIFT  50300000
         ST    ZWRL,ZWW1+16(ZWRB)       PUT WORD OFFSET PER WD SHIFT    50400000
         AH    ZWRI,=H'4'               BUMP INDEX                      50500000
         CH    ZWRB,=H'12'              TEST WHERE LATEST WD STORED     50600000
         BL    ZWQ4                       BR IF NOT LAST WORD           50700000
* TEST THE VALUE AT ZWW1+4 FOR LOST PRECISION                           50800000
         OC    ZWW1+16(16),ZWW1+16      ZERO IF SHIFTED OUT ALL BITS    50900000
         BNZ   ZWZ5                       IF BIT, GO OUTPUT             51000000
         LA    ZWRH,ZRCD109                                             51100000
         BAL   ZWRG,MERROR              POST ERROR MESSAGE, THEN        51200000
         B     ZWZ5                       GO OUTPUT                     51300000
         EJECT                                                          51400000
*S1                                                                     51500000
*S1 STEP OVER SIGN.                                                     51600000
*S1                                                                     51700000
ZWS1     CLI   0(ZWRB),JPLUS            IF CHARACTER IS PLUS            51800000
         BE    ZWS11                    BRANCH                          51900000
         CLI   0(ZWRB),JMINUS           IF CHARACTER                    52000000
         BCR   7,ZWRG                IS - RETURN                        52100000
ZWS11    LA    ZWRB,1(ZWRB)        STEP TEXT POINTER                    52200000
         BR    ZWRG                     RETURN                          52300000
*Z                                                                      52400000
*Z ERROR ROUTINE  AND RETURN ROUTINE.                                   52500000
*Z                                                                      52600000
ZWZ4     LA    ZWRH,ZRCD39              LOAD ERROR NUMBER               52700000
ZWZ3     BAL   ZWRG,MERROR         STORE ERROR MESSAGE                  52800000
         XC    16(16,ZWRARY),16(ZWRARY) CLEAR OUTPUT AREA               52900000
ZWZ5     LR    R10,ZWRLAST              LOAD POINTER TO TERM CHAR       53000000
         LR    R11,ZWRARY               RESTORE INPUT ARRAY POINTER     53100000
XIT      JRETURN ,                      EXIT                            53200000
*                                                                       53300000
MERROR   STC   ZWRH,ZARYERR(0,ZWRARY)   SET ERROR                       53400000
         BR    ZWRG                     AND RETURN                      53500000
         EJECT                                                          53600000
*DECON- CONVERT A PIECE OF THE VALUE                                    53700000
*       INPUT- CONDEX POINTS TO FIRST CHAR                              53800000
*       OUTPUT-BINVAL CONTAINS CONVERTED VALUE                          53900000
*              CONDEX TO TERMINATING CHAR                               54000000
*              ZWRF POINTS TO FIRST CHAR OF FIELD                       54100000
*              VASCTL CONTAINS X'00'  NO ERRORS                         54200000
*                        BIT1  X'40'  TOO LONG                          54300000
*                        BIT0  X'80'  NO CHAR TO CONVERT                54400000
         SPACE 2                                                        54500000
DECON    MVI   VASCTL,BIT0-BIT0         AND FLAG                        54600000
         ST    CONDEX,AFIRST            SAVE POINTER TO BEGINNING-1     54700000
ADDIT    CLI   0(CONDEX),J9             IS CHARACTER NUMERIC            54800000
         BH    SETUP                    NO, BRANCH                      54900000
         LA    CONDEX,1(0,CONDEX)       UP TO NEXT CHAR                 55000000
         B     ADDIT                    LOOP, LOOKING FOR NON-NUMERIC   55100000
SETUP    ST    CONDEX,SAVEAD            SAVE END POINTER                55200000
         LR    CNT,CONDEX               LOAD ENDING POINTER             55300000
         L     CONDEX,AFIRST            BEGIN AT BEGINNING              55400000
         SR    CNT,CONDEX               MINUS BEGINNING PTR = # OF CHAR 55500000
         BZ    ZNONE                    BRANCH IF NO CHAR TO CONVERT    55600000
SET1     CH    CNT,=H'10'               YES, IS IT GREATER THAN MAX     55700000
         BL    GOTOIT                   NO, OK                          55800000
         BH    GTTEN                    YES, TRY TO GET DOWN TO NINE    55900000
         CLC   0(10,CONDEX),=X'02010407040803060407'  =10 CHARS, IS IT X56000000
                                                        .GT. 2**31-1    56100000
         BNH   GOTOIT                   NO, CONVERT                     56200000
ZLONG    OI    VASCTL,BIT1              YES, SET FLAG                   56300000
         LA    CNT,9                    AND CONVERT 9                   56400000
GOTOIT   BCTR  CNT,0                    DECREMENT FOR MOVE              56500000
         EX    CNT,PACKIT               PACK VALUE INTO HOLD            56600000
         OI    HOLD+7,BIT4+BIT5         SET POSITIVE SIGN               56700000
         CVB   BINVAL,HOLD              CONVERT HOLD TO BINARY          56800000
LEAV     LR    ZWRF,CONDEX              SET TO FIRST CHAR               56900000
         L     CONDEX,SAVEAD            SET TO TERMINATOR               57000000
         BR    REG                      RETURN                          57100000
GTTEN    CLI   0(CONDEX),J0             IS FIRST CHARACTER A ZERO       57200000
         BNE   ZLONG                    NO, TOO LONG                    57300000
         LA    CONDEX,1(0,CONDEX)       YES, IGNORE ZERO                57400000
         BCTR  CNT,0                    DECREMENT COUNT                 57500000
         LTR   CNT,CNT                  ARE THERE CHAR TO CONVERT       57600000
         BNZ   SET1                    YES, NOW SEE IF SHORT ENOUGH     57700000
ZNONE    OI    VASCTL,BIT0              SET CODE, NONE TO CONVERT       57800000
         B     LEAV                     AND EXIT                        57900000
PACKIT   PACK  HOLD(8),0(00,CONDEX)     EXECUTED PACK TO PACK HOLD      58000000
         EJECT                                                          58100000
*                                                                       58200000
*LITERAL POOL                                                           58300000
*                                                                       58400000
         SPACE                                                          58500000
         LTORG                                                          58600000
*                                                                       58700000
         EJECT                                                          58800000
*                                                                       58900000
*REGISTER EQUATES                                                       59000000
*                                                                       59100000
ZWRA     EQU   R0                       REGISTERS- SCALE FACTOR         59200000
ZWRB     EQU   R1                                  POINTER TO SCAN CHAR 59300000
ZWRARY   EQU   R2                                  POINTER TO IN ARRAY  59400000
ZWRLAST  EQU   R5                                  LAST CONSTANT ADDR   59500000
ZWRC     EQU   R6                                  WORKING SCALE FACTOR 59600000
ZWRD     EQU   R7                                  LOWER LIMIT SCALE    59700000
ZWRE     EQU   R8                                  UPPER LIMIT SCALE    59800000
ZWRF     EQU   R9                                  LOW WORD OF RESULT   59900000
ZWRL     EQU   R10                                 POSITION OF DEC PONT 60000000
ZWRJ     EQU   R11                                 END POINTER          60100000
ZWRI     EQU   R12                                 EXPONENT MODIFIER    60200000
ZWRG     EQU   R14                                 ADJECTIVE EXPONENT   60300000
ZWRH     EQU   R15                                 BINARY RESULT        60400000
CONDEX   EQU   ZWRB                     POINTER TO SCAN CHAR            60500000
CNT      EQU   ZWRF                     COUNTER FOR CHAR TO CONVERT     60600000
REG      EQU   ZWRG                     RETURN REGISTER-DECON           60700000
BINVAL   EQU   ZWRH                     BINARY VALUE-DECON              60800000
*                                                                       60900000
*ERROR CODE EQUATES                                                     61000000
*                                                                       61100000
ZRCD11   EQU   BIT0                     SCALE MODIFIER ERROR            61200000
ZRCD13   EQU   BIT1                     EXPONENT MODIFIER ERROR         61300000
DCTRUN   EQU   BIT2                     TRUNCATION ERROR                61400000
ZRCD39   EQU   BIT3                     INVALID DELIMITER               61500000
ZRCD70   EQU   BIT4         FLOATING POINT CHARACTERISTIC OUT OF RANGE  61600000
ZRCD109  EQU   BIT5                     PRECISION LOST                  61700000
*                                                                       61800000
*MODIFIER TYPES                                                         61900000
*                                                                       62000000
BTYPEFL  EQU   X'08'                    MODIFIER TYPE - FLOATING POINT  62100000
BTYPEL   EQU   X'06'                    L-CON MODIFIER TYPE             62200000
*                                                                       62300000
*INPUT ARRAY EQUATES                                                    62400000
*                                                                       62500000
*LENGTH IN BYTES IF SIGN = 0, LENGTH IN BITS IF SIGN = 1                62600000
ZARYSGN  EQU   0                        INPUT ARRAY - SIGN              62700000
ZARYERR  EQU   1                                      ERROR CODE        62800000
ZARYTYPE EQU   3                                      TYPE(BUCKET CODE) 62900000
ZARYLEN  EQU   4                                      LENGTH            63000000
ZARYSCL  EQU   8                                      SCALE FACTOR      63100000
ZARYEXP  EQU   12                                     EXTERNAL EXPONENT 63200000
ZARYCON  EQU   16                                     RIGHT JUSTIFIED  X63300000
                                                        CONSTANT        63400000
         JPATCH X5F00,5FA                                               63450000
         END                                                            63500000
./  ADD  SSI=71710255,NAME=IFNX5L
* /* START OF SPECIFICATIONS ****                                       00010000
*02* PROCESSOR = ASSEMBLER                                              00020000
**** END OF SPECIFICATIONS ***/                                         00030000
         GBLC  &COMPNM,&ASMID                                           00050000
         JHEAD 'ASSEMBLY PHASE - ERROR LOGGING ROUTINE',               X01000000
               PHASEID=X5L,                                            X02000000
               LEVEL=10                                                 03000000
*                                                                     * 04000000
*FUNCTION/OPERATION                                                   * 05000000
*   THIS ROUTINE IS CALLED TO GENERATE ERROR RECORDS FOR ANY ERRORS   * 06000000
*   DETECTED IN THE ASSEMBLY PHASE. THIS ROUTINE WILL ALSO CALL THE   * 07000000
*   PRINT ROUTINE TO PRINT *** ERROR *** FOLLOWING THE STATEMENT IN   * 08000000
*   ERROR.                                                            * 09000000
*                                                                     * 10000000
*ENTRY POINT-                                                         * 11000000
*                                                                     * 12000000
*        LGR100                                                       * 13000000
*INPUT-                                                               * 14000000
*   ERROR CODE IN R10                                                 * 15000000
*   POINTER TO DATA IN ERROR IN R11                                   * 16000000
*                                                                     * 17000000
*OUTPUT                                                               * 18000000
*   ERROR RECORDS DEFINED IN THE DIAGNOSTIC PHASE                     * 19000000
*                                                                     * 20000000
*EXTERNAL ROUTINES-                                                   * 21000000
*        PRINT ROUTINE                                                * 22000000
*                                                                     * 23000000
*EXITS, NORMAL-                                                       * 24000000
*   EXITS TO THE CALLING ROUTINE THROUGH THE JRETURN MACRO            * 25000000
*                                                                     * 26000000
*EXITS, ERROR-                                                        * 27000000
*   NONE                                                              * 28000000
*                                                                     * 29000000
*TABLES/WORK AREA                                                     * 30000000
*   NONE                                                              * 31000000
*                                                                     * 32000000
*ATTRIBUTES-                                                          * 33000000
*   REFRESHABLE                                                       * 34000000
*                                                                     * 35000000
*NOTES-                                                               * 36000000
*   NONE                                                              * 37000000
*                                                                     * 38000000
         SPACE 5                                                        38050000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   38100000
         COPY  JCOMMON                  INCLUDE COMMON DSECT            39000000
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE     40000000
         COPY  JTEXT                    INCLUDE TEXT DSECT              41000000
         PRINT OFF                      DON'T PRINT X5COM COPY CODE     42000000
         COPY  X5COM                    INCLUDE ASSEMBLY PHASE COMMON   43000000
         PRINT OFF                      DON'T PRINT JERRCD COPY CODE    44000000
         COPY  JERRCD                                                   45000000
         PRINT ON                       THAT'S THE END OF THE COPY CODE 45050000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - ERROR LOGGING ROUTINE X46000000
               - RSYMRCD COPY CODE'                                     46050000
RSYMRCD  DSECT                                                          47000000
         COPY  RSYMRCD                                                  48000000
         TITLE '&COMPNM&ASMID - ASSEMBLY PHASE - ERROR LOGGING ROUTINE' 49000000
         JCSECT (X5L00)                 START MODULE CSECT              50000000
* APAR CHANGES                                                          50050005
*A830500-832000,950500                                         @OX08862 50100005
*C840000,850000                                                @OX08862 50250005
*A700500,702000                                                @OX10348 50300005
*A710500,712500                                                @OX10348 50302005
*A790500-792000                                                @AZ07356 50302406
         JMODID ,                       CREATE MODULE ID                51000000
         USING JTEXT,R5                 TEXT USING                      52000000
         USING JTEXTA,R4                VARIABLE TEXT USING             53000000
         USING X5COM,R7                 ASSEMBLY COMMON USING           54000000
LGR100   LR    R0,R9                    SAVE POINTER TO PARAMETER LIST  55000000
         LA    R9,D4(R9)                SET UP RETURN REGISTER TO RETURN56000000
                                           BEYOND THE PARAMETER LIST    57000000
LGR200   JSAVE BASE=NO                  SAVE CALLING REGISTERS          58000000
         LR    R8,R12                   SET UP SUBRTN BASE              59000000
         USING LGR100,R8                USING FOR SUBRTN                60000000
         LR    R3,R0                    RETRIEVE POINTER TO PARAM LIST  60600000
         L     R5,TXTPTR                GET TEXT RECORD POINTER         61200000
         STM   R10,R11,X5LSAV           SAVE REGISTERS 10 AND 11        62000000
         ST    R14,X5LSAV+D8            SAVE REGISTER 14                63000000
         JENTRY (X5L01=LGR100)          DEFINE ENTRY                    64000000
         USING RSYMRCD,R2               USING FOR RSYMRCD DSECT         65000000
         USING JERRCD,R11               ERROR RECORD USING              66000000
         GOIF  DUPEVAL,ON=LGR700        DO NOT LOG ERR IF DUP EVAL      66050000
*    TSO CODE STARTS HERE                                               66080000
         GOIF  JTERM,OFF=LABL1          DO WE PRINT TO TERMINAL?        66160000
         CLI   D1(R3),ERR197            LOG MNOTE                       66170000
         BE    LABL00                   DO NOT CHECK MSGLEVEL           66180000
         CLC   D0(D1,R3),JMSGL          CHECK MESSAGE LEVEL             66190000
         BL    LABL1                    IF NOT TO BE LOGGED NO TERM     66200000
LABL00   GOIF  ERRBIT,ON=LABL1          BRANCH AROUND IF ERRBIT ON      66240000
         GOIF  JGEN,OFF=LABL0           SHALL WE FETCH MODEL            66250000
         LH    R10,JOUTFILE             GET FILE INDEX                  66260000
         JPUTM FILE=(R10),ADDR=MODEL    OUTPUT MODEL STMT               66270000
         MVC   D4(,R11),=AL1(JT,J0)     INDICATE TEXT RECORD            66280000
         MVC   D16(D1,R11),D3(R11)      SAVE FLAGB                      66290000
         MVC   D2(D2,R11),MODSTMT       INSERT STMT NUMBER              66300000
LABL0    LH    R10,JOUTFILE             GET FILE INDEX                  66320000
         JPUTM FILE=(R10),ADDR=JTEXT    WRITE OUT TEXT RECORD           66400000
         MVC   D4(,R11),=AL1(JT,J0)     MOVE IN TEXT RECORD OPCODE      66480000
         CLI   D1(R3),ERR197            MNOTE?                          66530000
         BNE   LABL05                   NO NO CHANGE                    66540000
         MVI   D5(R11),JM               INDICATE MNOTE MESSAGE          66550000
LABL05   MVC   D16(D1,R11),D3(R11)      SAVE JTFLGB                     66560000
         MVC   D2(D2,R11),STMTN+D2      SAVE STMNT NUMBER               66640000
         SET   ERRBIT,ON                TURN ERRBIT ON                  66720000
         SPACE                                                          66800000
*    TSO CODE ENDS HERE                                                 66880000
LABL1    L     R5,TXTPTR                GET TEXT POINTER                67000000
ERR197   EQU   197                      ERROR NUMBER FOR MNOTE          67200000
         CLI   D1(R3),ERR197            IS THIS MNOTE ?                 67400000
         BE    NOLEVT                   YES, LOG IT                     67600000
         CLC   D0(D1,R3),JMSGL          IF SEVERITY CODE LOWER THAN MSG 68300000
         BL    LGR900                   LEVEL, RETURN TO CALLER         69000000
         SET   JERR,ON                  INDICATE ERROR FLAG             70000000
         TM    DUMSW,TESTER             IS IT A DS             @OX10348 70050005
         BZ    NOLEVT                   NO                     @OX10348 70100005
         GOIF  PGEN,ON=NOLEVT           YES, IF PRT GEN ON     @OX10348 70150005
         MVI   FSTPSW,D0                CLEAR FIRST PRINT SW   @OX10348 70200005
NOLEVT   SET   JERRCHK,ON               TURN ON ERROR FLAG IN COMMON    71000000
         TM    DUMSW,TESTER                                    @OX10348 71050005
         BZ    LABL2                                           @OX10348 71100005
         GOIF  PGEN,ON=LABL2                                   @OX10348 71150005
         MVI   FSTPSW,X'00'                                    @OX10348 71200005
LABL2    EQU   *                                               @OX10348 71250005
         LH    R10,JOUTFILE             GET ADDRESS OF OUTPUT FILE      72000000
         JPUTL FILE=(R10),BUFREQ=27     GET OUTPUT BUFFER               74000000
         MVC   JEFLGA(D3),=AL1(0,8,JTERROR)  SET UP FIXED PART OF RCD   76000000
         LH    R1,=AL2(JEDATA-JERECL)   ACCUMULATE RECORD LENGTH        77000000
         MVC   JESTMTNO,STMTN+D4-L'JESTMTNO PUT IN THE STATEMENT NUMBER 78000000
         MVC   JESEV(D2),D0(R3)         MOVE ERROR & SEV CODE TO ERRRCD 79000000
         GOIF  EQUOPR,OFF=COLPTR1       BR IF NOT 2ND-3RD OPER @AZ07356*79050006
                                        IN AN EQU STMT         @AZ07356 79100006
         MVI   JESEV,X'04'              RESET SEV CODE         @AZ07356 79150006
COLPTR1  EQU   *                                               @AZ07356 79200006
         L     R2,ERRPTR                GET ADDR OF COL PTR OR DATA     81000000
         TM    D2(R3),BIT0              CHECK FOR COLUMN POINTER        82000000
         BZ    DATACK                   IF SW OFF GO CHECK FOR DATA     83000000
         TM    DUMSW,TESTER             IS IT DS OR DXD        @OX08862 83050005
         BZ    COLPTR                   NO                     @OX08862 83100005
         S     R2,JFWORD2               YES, COMP OPR COL PTR  @OX08862 83150005
         B     COLPTRDS                                        @OX08862 83200005
COLPTR   S     R2,OPNADR                COMP OPERANDCOL PTR    @OX08862 84000005
COLPTRDS LA    R2,D1(R2)                CONV TO 1 ORIGON COUNT @OX08862 85000005
         STC   R2,JECOLPTR              INSERT IN INTO ERROR RECORD     86000000
         B     LGREXIT                  EXIT                            87000000
DATACK   TM    D2(R3),BIT1              CHECK FOR DATA TO APPEND        88000000
         BZ    LGREXIT                  IF NO DATA, EXIT                89000000
         MVC   JEDATA(D8),RNAME         MOVE DATA TO ERROR RECORD       90000000
         LA    R1,D8(R1)                ADD DATA LENGTH TO RCD LGTH     91000000
LGREXIT  STH   R1,JERECL                PUT RECORD LENGTH INTO RECORD   92000000
LGR700   LM    R10,R11,X5LSAV           RESTORE REGISTERS 10 AND 11     93000000
         L     R14,X5LSAV+D8            RESTORE REGISTER 14             94000000
LGR900   JRETURN ,                      EXIT                            95000000
TESTER   EQU   X'F0'                    FLAG TEST MASK         @OX08862 95050005
         JPATCH X5L00,135               5% PATCH AREA                   95200000
         END                                                            96000000
./  ADD  SSI=81850030,NAME=IFNX5M
* /* START OF SPECIFICATIONS ****                                       00050000
*02* PROCESSOR = ASSEMBLER                                              00052000
**** END OF SPECIFICATIONS ***/                                         00054000
         TITLE ' TEXT AND MITAB MACRO DEFINITIONS '                     00060000
         MACRO                                                          00120000
&LABEL   TEXT  &ADDR1,&DELIM,&ADDR2                                     00180000
.*********************************************************************. 00240000
.*  CHECK FOR DELIMITER AND ADVANCE TEXT POINTER WHEN APPROPRIATE    *. 00300000
.*********************************************************************. 00360000
         GBLC  &TCP                                                     00420000
&LABEL   C     &TCP,OPNEND              DOES TEXT END HERE ?            00480000
         BNL   &ADDR1                   YES                             00540000
         AIF   ('&DELIM' EQ '').MEND    GO IF NO DELIMITER SPECIFIED    00600000
         GOIF  &DELIM,NE=&ADDR2         GO IF DELIMITER NOT IN TEXT     00660000
         LA    &TCP,NXTCH               POINT TO NEXT CHARACTER         00720000
.MEND    MEND                                                           00780000
         SPACE 5                                                        00840000
         MACRO                                                          00900000
&NAME    MITAB                                                          00960000
.*********************************************************************. 01020000
.* THIS MACRO IS ONLY CALLED ONCE.ITS PURPOSE IS TO SET THE GLOBAL   *. 01080000
.* VARIABLES USED IN THE CONSTRUCTION OF THE FAR TABLE.THE VARIABLES *. 01140000
.* CORRESPOND TO THE BIT SETTINGS DEFINED IN THE FARENT DSECT - IE   *. 01200000
.* &FSNLIT CORRESPONDS TO FSNLIT ETC.                                *. 01260000
.*********************************************************************. 01320000
         GBLA  &FSNLIT,&FSALOC,&FILEN,&FIALOC                           01380000
         GBLA  &RIDEC,&RIBND,&RIDIV                                     01440000
         GBLA  &RSMOD,&RSALW,&RSDIV                                     01500000
&FSNLIT  SETA  32768                                                    01560000
&FSALOC  SETA  4096                                                     01620000
&FILEN   SETA  2048                                                     01680000
&FIALOC  SETA  256                                                      01740000
&RIDEC   SETA  128                                                      01800000
&RIBND   SETA  16                                                       01860000
&RIDIV   SETA  1                                                        01920000
&RSMOD   SETA  &RIDEC                                                   01980000
&RSALW   SETA  8                                                        02040000
&RSDIV   SETA  &RIDIV                                                   02100000
&NAME    EQU   *                                                        02160000
         MEND                                                           02220000
         TITLE ' OPND MACRO DEFINITION '                                02280000
         MACRO                                                          02340000
&NAME    OPND  &T,                      TYPE                           X02400000
               &A,                      ALLOCATION                     X02460000
               &R                       RESTRICTIONS                    02520000
.*********************************************************************. 02580000
.* THIS MACRO IS CALLED TO CONSTRUCT AN OPERAND ENTRY IN THE FAR     *. 02640000
.* TABLE.NO CODE IS GENERATED - THE TABLE ENTRY IS PASSED IN THE     *. 02700000
.* GLOBAL &E(&I) TO THE NEAREST FOLLOWING OPCD MACRO.                *. 02760000
.* THE VALID PARAMETER FORMATS ARE -                                 *. 02820000
.*                                                                   *. 02880000
.* PARM MEANING      FORMAT   DESCRIPTION                            *. 02940000
.* ---  -------      ------   -----------                            *. 03000000
.* &T   TYPE         I OR R   IMMEDIATE,REGISTER OR MASK.            *. 03060000
.*                   S        STORAGE,SHIFT OR I/O UNIT.FORMAT D(B). *. 03120000
.*                   SX       INDEXED STORAGE.FORMAT IS D(X,B).      *. 03180000
.*                   SL       STORAGE WITH LENGTH.FORMAT IS D(L,B).  *. 03240000
.* &A   ALLOCATION   N        N IS 1,2 OR 3 AND SETS  ALLOCATION FOR *. 03300000
.*                            TYPE I OPERANDS TO FIRST,SECOND OR     *. 03360000
.*                            BOTH HOLFBYTES OF SECOND INSTR BYTE.   *. 03420000
.*                            FOR TYPE S OPERANDS,SETS ALLOCATION TO *. 03480000
.*                            SECOND,THIRD OR FOURTH HALWORD,RESP.   *. 03540000
.*                   (N,M)    USED FOR SX AND SL TYPE OPERANDS.N     *. 03600000
.*                            GIVE S PART ALLOCATION M I PART ALLOC. *. 03660000
.* &R   RESTRICTIONS N OR (N,M) FOR I OPERANDS.N IS DIVISIBILITY     *. 03720000
.*                            (POWER OF 2) AND M IS UPPER BOUND      *. 03780000
.*                            (POWER OF 2).                          *. 03840000
.*                   A OR                                            *. 03900000
.*                   (A,B,..) FOR S,SX AND SL OPERANDS.A,B ETC CAN   *. 03960000
.*                            BE EITHER OF                           *. 04020000
.*                            H,F,D     H,F OR D ALIGNMENT           *. 04080000
.*                            ALW       ALWAYS CHECK ALIGNMENT       *. 04140000
.*                            NLIT      NO LITERAL ALLOWED           *. 04200000
.*                            MOD       MODIFIED AT EXECUTION        *. 04260000
.*********************************************************************. 04320000
         GBLA  &E(5)                    FAR ENTRY CANDIDATE             04380000
         GBLA  &I                       ENTRY INDEX                     04440000
         GBLA  &M                       MAXIMUM NUMBER OF OPERANDS      04500000
         GBLB  &ERR                     ERROR HAS OCCURRED              04560000
         GBLA  &FSNLIT,&FSALOC,&FILEN,&FIALOC     FLAGS                 04620000
         GBLA  &RIDEC,&RIBND,&RIDIV     MORE FLAGS                      04680000
         GBLA  &RSMOD,&RSALW,&RSDIV     GOOD GRIEF,MORE FLAGS           04740000
         LCLA  &J                       SUBSCRIPT                       04800000
&I       SETA  &I+1                     POINT TO NEXT ENTRY             04860000
         AIF   (&I LE &M).CT                                            04920000
         MNOTE 8,'TOO MANY OPERANDS'                                    04980000
.ERR     ANOP                                                           05040000
&ERR     SETB  1                                                        05100000
         MEXIT                                                          05160000
.* CHECK TYPE                                                           05220000
.*                                                                      05280000
.CT      AIF   ('&T' EQ 'R' OR '&T' EQ 'I').I                           05340000
         AIF   ('&T' EQ 'S').S                                          05400000
         AIF   ('&T' EQ 'SX').SX                                        05460000
         AIF   ('&T' EQ 'SL').SL                                        05520000
         MNOTE 8,'INVALID TYPE'                                         05580000
         AGO   .ERR                                                     05640000
.* I (OR R) TYPE OPERAND                                                05700000
.*                                                                      05760000
.I       AIF   (N'&A NE 1).IVP                                          05820000
         AIF   (&A EQ 1 OR &A EQ 2).I12                                 05880000
&E(&I)   SETA  &A*&FIALOC               SET FIALOC                      05940000
         AGO   .RIDIV                                                   06000000
.I12     ANOP                                                           06060000
&E(&I)   SETA  (3-&A)*&FIALOC                                           06120000
.RIDIV   AIF   (N'&R EQ 0).OK                                           06180000
         AIF   (K'&R(1) EQ 0).RIBND                                     06240000
&E(&I)   SETA  &E(&I)+&R(1)*&RIDIV      SET RIDIV                       06300000
.RIBND   AIF   (N'&R EQ 1).OK                                           06360000
         AIF   (K'&R(2) EQ 0).RIDEC                                     06420000
&E(&I)   SETA  &E(&I)+&R(2)*&RIBND      SET RIBND                       06480000
.RIDEC   AIF   (N'&R EQ 2).OK                                           06540000
         AIF   ('&R(3)' NE 'DEC').IVP                                   06600000
&E(&I)   SETA  &E(&I)+&RIDEC            SET RIDEC                       06660000
         AGO   .OK                                                      06720000
.* S TYPE OPERAND                                                       06780000
.S       AIF   (N'&A NE 1).IVP                                          06840000
.SP      ANOP                                                           06900000
&E(&I)   SETA  &E(&I)+&A(1)*&FSALOC     SET FSALOC                      06960000
.RS      AIF   (&J GE N'&R).OK                                          07020000
&J       SETA  &J+1                                                     07080000
         AIF   ('&R(&J)' EQ 'H').H                                      07140000
         AIF   ('&R(&J)' EQ 'F').F                                      07200000
         AIF   ('&R(&J)' EQ 'D').D                                      07260000
         AIF   ('&R(&J)' EQ 'ALW').RSALW                                07320000
         AIF   ('&R(&J)' EQ 'NLIT').FSNLIT                              07380000
         AIF   ('&R(&J)' EQ 'MOD').RSMOD                                07440000
.IVP     MNOTE 8,'INVALID PARAMETER'                                    07500000
         AGO   .ERR                                                     07560000
.H       ANOP                                                           07620000
&E(&I)   SETA  &E(&I)+1*&RSDIV          SET RSDIV FOR H ALIGNMENT       07680000
         AGO   .RS                                                      07740000
.F       ANOP                                                           07800000
&E(&I)   SETA  &E(&I)+2*&RSDIV          SET RSDIV FOR F ALIGNMENT       07860000
         AGO   .RS                                                      07920000
.D       ANOP                                                           07980000
&E(&I)   SETA  &E(&I)+3*&RSDIV          SET RSDIV FOR D ALIGNMENT       08040000
         AGO   .RS                                                      08100000
.RSALW   ANOP                                                           08160000
&E(&I)   SETA  &E(&I)+&RSALW            SET RSALW                       08220000
         AGO   .RS                                                      08280000
.FSNLIT  ANOP                                                           08340000
&E(&I)   SETA  &E(&I)+&FSNLIT           SET FSNLIT                      08400000
         AGO   .RS                                                      08460000
.RSMOD   ANOP                                                           08520000
&E(&I)   SETA  &E(&I)+&RSMOD            SET RSMOD                       08580000
         AGO   .RS                                                      08640000
.* SX TYPE OPERAND                                                      08700000
.*                                                                      08760000
.SX      AIF   (N'&A NE 2).IVP                                          08820000
         AIF   (&A(2) EQ 1 OR &A(2) EQ 2).SX12                          08880000
&E(&I)   SETA  &E(&I)+&A(2)*&FIALOC     SET FIALOC                      08940000
         AGO   .SP                                                      09000000
.SX12    ANOP                                                           09060000
&E(&I)   SETA  &E(&I)+(3-&A(2))*&FIALOC                                 09120000
         AGO   .SP                                                      09180000
.* SL TYPE OPERAND                                                      09240000
.*                                                                      09300000
.SL      ANOP                                                           09360000
&E(&I)   SETA  &E(&I)+&FILEN            SET FILEN                       09420000
         AGO   .SX                                                      09480000
.OK      ANOP                                                           09540000
         MEND                                                           09600000
         TITLE ' OPCD MACRO DEFINITION '                                09660000
         MACRO                                                          09720000
&NAME    OPCD  &O                                                       09780000
.*********************************************************************. 09840000
.* THIS MACRO IS CALLED TO GENERATE AN INSTRUCTION ENTRY IN THE FAR  *. 09900000
.* TABLE (IF AN IDENTICAL ONE IS NOT ALREADY THERE) AND TO CONSTRUCT *. 09960000
.* A POINTER IN THE FGT OR FGTX TABLE TO THE FAR ENTRY FOR THE       *. 10020000
.* INSTRUCTION.                                                      *. 10080000
.* THE OPERAND IS THE ONE- OR TWOBYTE OPCODE FOR THE INSTRUCTION.    *. 10140000
.* FOR EXTENDED BRANCHES,TWO BYTES MUST BE USED - EG X'07F0' FOR BR  *. 10200000
.*********************************************************************. 10260000
         GBLA  &E(5)                    CANDIDATE FOR FAR ENTRY         10320000
         GBLA  &I                       INDEX IN ENTRY                  10380000
         GBLB  &ERR                     ERROR HAS OCCURRED              10440000
         GBLA  &M                       MAXIMUM NUMBER OF OPERANDS      10500000
         GBLA  &F1(255),&F2(255),&F3(255),&F4(255),&F5(255)             10560000
         GBLA  &FGT1(128),&FGT2(128)    **** STUPID ASSEMBLER ***       10620000
         GBLA  &FGTXO(255),&FGTXP(255)  FGT FOR EXTENDED OPCODES        10680000
         GBLA  &FP                      FAR POINTER                     10740000
         GBLA  &XOCP                    POINTER FOR EXTENDED OPCODES    10800000
         LCLA  &J,&N                    INDICES                         10860000
         LCLC  &FOP(5)                  FAR OPERANDS                    10920000
         AIF   (&ERR).ERR                                               10980000
.L1      ANOP                                                           11040000
&J       SETA  &J+1                                                     11100000
         AIF   (&J GT &FP).NEW          GO MAKE NEW ENTRY               11160000
         AIF   (&F1(&J) NE &E(1)).L1    GO IF 1:ST OPND NOT EQUAL       11220000
         AIF   (&F2(&J) NE &E(2)).L1    GO IF 2=ND OPND NOT EQUAL       11280000
         AIF   (&F3(&J) NE &E(3)).L1    GO IF 3=RD OPND NOT EQUAL       11340000
         AIF   (&F4(&J) NE &E(4)).L1    GO IF 4=TH OPND NOT EQUAL       11400000
         AIF   (&F5(&J) NE &E(5)).L1    GO IF 5=TH OPND NOT EQUAL       11460000
.OLD     AIF   (&O GT X'FF').XOC        GO IF EXTENDED OPCODE           11520000
         AIF   (&O GT 127).FGT2                                         11580000
&FGT1(&O+1)   SETA  &J-1                SET FAR POINTER IN FGT          11640000
         AGO   .OK                                                      11700000
.FGT2    ANOP                                                           11760000
&FGT2(&O-127) SETA  &J-1                SET FAR POINTER IN FGT          11820000
         AGO   .OK                                                      11880000
.XOC     ANOP                                                           11940000
&XOCP    SETA  &XOCP+1                                                  12000000
&FGTXO(&XOCP) SETA &O                                                   12060000
&FGTXP(&XOCP) SETA  &J-1                SET FAR POINTER IN FGTX         12120000
         AGO   .OK                                                      12180000
.NEW     ANOP                                                           12240000
&N       SETA  2                                                        12300000
.L2      AIF   (&N GT &M).GEN                                           12360000
&FOP(&N) SETC  ','.'&E(&N)'                                             12420000
&N       SETA  &N+1                                                     12480000
         AGO   .L2                                                      12540000
.GEN     ANOP                                                           12600000
&NAME    DC  AL2(&E(1)&FOP(2)&FOP(3)&FOP(4)&FOP(5))                     12660000
&FP      SETA  &FP+1                                                    12720000
&F1(&FP) SETA  &E(1)                                                    12780000
&F2(&FP) SETA  &E(2)                                                    12840000
&F3(&FP) SETA  &E(3)                                                    12900000
&F4(&FP) SETA  &E(4)                                                    12960000
&F5(&FP) SETA  &E(5)                                                    13020000
         AGO   .OLD                                                     13080000
.ERR     MNOTE 8,'NO TABLE ENTRIES GENERATED'                           13140000
         AGO   .END                                                     13200000
.OK      ANOP                                                           13260000
         MNOTE *,'FAR ENTRY NUMBER IS &J'                               13320000
.END     ANOP                                                           13380000
&E(1)    SETA  0                                                        13440000
&E(2)    SETA  0                                                        13500000
&E(3)    SETA  0                                                        13560000
&E(4)    SETA  0                                                        13620000
&E(5)    SETA  0                                                        13680000
&I       SETA  0                                                        13740000
&ERR     SETB  0                                                        13800000
         MEND                                                           13860000
         TITLE ' MIEND MACRO DEFINITION '                               13920000
         MACRO                                                          13980000
&NAME    MIEND                                                          14040000
.*********************************************************************. 14100000
.* THIS MACRO IS ONLY CALLED ONCE.ITS PURPOSE IS TO GENERATE CODE    *. 14160000
.* FOR THE FGT AND FGTX TABLES THAT HAVE BEEN GUILT BY PRECEDING     *. 14220000
.* OPCD MACRO INSTRUCTIONS.                                          *. 14280000
.*********************************************************************. 14340000
         GBLA  &FGT1(128),&FGT2(128)                                    14400000
         GBLA  &FGTXO(255),&FGTXP(255),&XOCP                            14460000
         LCLA  &J,&N                                                    14520000
&NAME    EQU   *    FAR GET TABLE FOR INSTRUCTIONS WITH ONE-BYTE OPCODE 14580000
.L1      AIF   (&J GE 256).XOC                                          14640000
         AIF   (&J GT 127).FGT2                                         14700000
         DC    AL1(&FGT1(&J+1),&FGT1(&J+2),&FGT1(&J+3),&FGT1(&J+4),&FGT?14760000
               1(&J+5),&FGT1(&J+6),&FGT1(&J+7),&FGT1(&J+8))             14820000
         AGO   .COM                                                     14880000
.FGT2    ANOP                                                           14940000
         DC    AL1(&FGT2(&J-127),&FGT2(&J-126),&FGT2(&J-125),&FGT2(&J-1X15000000
               24),&FGT2(&J-123),&FGT2(&J-122),&FGT2(&J-121),&FGT2(&J-1X15060000
               20))                                                     15120000
.COM     ANOP                                                           15180000
&J       SETA  &J+8                                                     15240000
         AGO   .L1                                                      15300000
.XOC     ANOP                                                           15360000
&J       SETA  1                                                        15420000
&NAME.X  EQU   *    FAR GET TABLE FOR INSTRUCTIONS WITH EXTENDED OPCODE 15480000
.*                                                                      15540000
.* THIS SECTION ASSUMES THAT EXTENDED INSTRUCTIONS HAVE BEEN ENTERED    15600000
.* SORTED IN ASCENDING ORDER ON THE OPCODE.                             15660000
&N       SETA  1                                                        15720000
         AIF   (&XOCP EQ 0).OUT                                         15780000
.L2      AIF   (&FGTXO(&J)/256 NE &FGTXO(&N)/256).GEN                   15840000
         AIF   (&FGTXP(&J) NE &FGTXP(&N)).GEN                           15900000
&N       SETA  &N+1                                                     15960000
         AIF   (&N LE &XOCP).L2                                         16020000
.GEN     DC    AL2(&FGTXO(&N-1))        MAX OPCODE                      16080000
         DC    AL1(&FGTXP(&N-1))        FAR ENTRY NUMBER                16140000
&J       SETA  &N                                                       16200000
         AIF   (&N LE &XOCP).L2                                         16260000
.OUT     MEND                                                           16320000
         TITLE ' GLOBAL DECLARATIONS AND INITIAL SETTINGS FOR X5M '     16380000
* THE GLOBAL &M IS THE MAXIMUM NUMBER OF OPERANDS IN ANY MACHINE        16440000
* INSTRUCTION.EACH ENTRY IN FAR CONSISTS OF &M HALFWORDS.THE            16500000
* MAXIMUM NUMBER THAT CAN BE ACCOMODATED WITH PRESENT BIT ASSIGNMENTS   16560000
* IS 5 - THREE STORAGE OPERANDS AND TWO IMMEDIATE OPERANDS.             16620000
         GBLA &M                                                        16680000
* REGISTERS                                                             16740000
         GBLC  &SCH                     SCRATCH REG                     16800000
         GBLC  &RTN                     RETURN REG                      16860000
         GBLC  &COM                     PHASE COMMON AREA ADDRESS       16920000
         GBLC  &SCR                     SCRATCH - LOCAL USE ONLY        16980000
         GBLC  &WRK                     WORK                            17040000
         GBLC  &TBP                     TEXT BASE POINTER               17100000
         GBLC  &TCP                     TEXT CURRENT POINTER            17160000
         GBLC  &FRG                     FAR TABLE POINTER               17220000
         GBLC  &ESD1                    ESDID OF EXPRESSION 1           17280000
         GBLC  &EXP1                    VALUE OF EXPRESSION 1           17340000
         SPACE 2                                                        17400000
&M       SETA  3                                                        17460000
&COM     SETC  'R7'                                                     17520000
&SCR     SETC  'R14'                                                    17580000
&WRK     SETC  'R6'                                                     17640000
&TBP     SETC  'R5'                                                     17700000
&TCP     SETC  'R10'                                                    17760000
&SCH     SETC  'R15'                                                    17820000
&RTN     SETC  'R9'                                                     17880000
&ESD1    SETC  'R6'                                                     17940000
&EXP1    SETC  'R4'                                                     18000000
&FRG     SETC  'R3'                                                     18060000
* NOTE - R1 AND R2 ARE DESTROYED IN THIS MODULE                         18120000
         JHEAD 'MACHINE INSTRUCTION PROCESSOR',                        X18180000
               PHASEID=X5M,                                            X18240000
               LEVEL=10                                                 18300000
*FUNCTION/OPERATION-                                                  * 18360000
*   ASSEMBLE MACHINE INSTRUCTIONS.                                    * 18420000
*   THE OPERAND LIST OF A MACHINE INSTRUCTION CONSISTS OF NONE OR     * 18480000
*   MORE OPERANDS,SEPARATED BY COMMAS.EACH OPERAND IS CONSIDERED      * 18540000
*   TO CONSIST OF AN OPTIONAL 'I PART' AND AN OPTIONAL 'S PART'.      * 18600000
*   THE FOLLOWING OPERAND TYPES ARE RECOGNIZED -                      * 18660000
*                                                                     * 18720000
*   TYPE FORMAT DESCRIPTION                       I PART   S PART     * 18780000
*   ---- ------ -----------                       -----    ------     * 18840000
*   I    I      IMMEDIATE,MASK OR REGISTER FIELD   I        N/A       * 18900000
*   S    D(B)   STORAGE,OR SHIFT OR I/O UNIT       N/A      D(B)      * 18960000
*   SX   D(X,B) INDEXED STORAGE OPERAND            X        D(B)      * 19020000
*   SL   D(L,B) STORAGE OPERAND WITH LENGTH FIELD  L        D(B)      * 19080000
*                                                                     * 19140000
*   EACH OPERAND IS PROCESSED SEPARATELY.THE PROCESSING IS DRIVEN     * 19200000
*   BY A TABLE -FAR- THAT DESCRIBES THE OPERAND FORMAT,ALLOCATION     * 19260000
*   (IN ASSEMBLED INSTRUCTION) AND RESTRICTIONS.THE TABLE ENTRY       * 19320000
*   FORMAT IS DESCRIBED WITH THE DSECT 'FARENT'.                      * 19380000
*                                                                     * 19440000
*ENTRY POINT-                                                         * 19500000
*        X5M.                                                         * 19560000
*                                                                     * 19620000
*INPUT-                                                               * 19680000
*   INTERNAL TEXT RECORD - READ BY PHASE MAINLINE TO JTEXT BUFFER.    * 19740000
*                                                                     * 19800000
*OUTPUT-                                                              * 19860000
*   ASSEMBLED TEXT IN LEFTHF (IN PHASE COMMON).                       * 19920000
*                                                                     * 19980000
*EXTERNAL ROUTINES-                                                   * 20040000
*        X5V - EVALUATE EXPRESSIONS.                                  * 20100000
*        X5P - PRINT AND PUNCH.                                       * 20160000
*        X5L - LOG ERRORS.                                            * 20220000
*                                                                     * 20280000
*EXITS,NORMAL-                                                        * 20340000
*   RETURN TO PHASE MAINLINE.                                         * 20400000
*                                                                     * 20460000
*EXITS,ERROR-                                                         * 20520000
*   N/A                                                               * 20580000
*                                                                     * 20640000
*TABLES/WORK AREAS-                                                   * 20700000
*   FAR - MACHINE INSTRUCTION TABLE(SEE ABOVE).                       * 20760000
*   USING - USING TABLE.                                              * 20820000
*                                                                     * 20880000
*ATTRIBUTES-                                                          * 20940000
*   REFRESHABLE.                                                      * 21000000
*                                                                     * 21060000
*NOTES-                                                               * 21120000
*   INSTRUCTIONS FOR MODIFYING THE FAR TABLE ARE INCLUDED WITH THE    * 21180000
*   TABLE.TO ACCOMODATE MORE THAN 3 OPERANDS,CHANGE THE GLOBAL &M.    * 21240000
*   TO HANDLE THREE STORAGE OPERANDS,LEFTHF MUST BE EXPANDED.         * 21300000
*                                                                     * 21360000
         SPACE 2                                                        21380000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   21470000
         COPY  JCOMMON                  JCOMMON COPY CODE               21480000
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE     21530000
         COPY  JTEXT                    JTEXT COPY CODE                 21600000
         PRINT OFF                      DON'T PRINT THE X5COM COPY CODE 21660000
         COPY  X5COM                    X5COM COPY CODE                 21720000
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE  21760000
         COPY  JERMSGCD                 DEFINE ERROR CODES AND SEVERITY 21770000
         PRINT ON                       THAT'S ALL THE COPY CODE        21772000
         SPACE 5                                                        21780000
JTEXTA   DSECT                          RESUME VARIABLE PART OF TEXT    21840000
         ORG   JTEXTA                   REORG FOR CURRENT CHARACTER     21900000
CURCH    DBV   COMMA(JCOMMA),                                          X21960000
               LPAREN(JLPARN),                                         X22020000
               RPAREN(JRPARN)                                           22080000
NXTCH    EQU   *                        NEXT CHARACTER                  22140000
         EJECT                                                          22200000
FGTXE    DSECT                          ENTRY IN FGT FOR EXTENDED OPS   22260000
XOPCM    DS    CL2                      OPCODE MASK - TWO BYTES         22320000
XFPTR    DS    C                        FAR POINTER                     22380000
XNEXT    EQU   *                        NEXT ENTRY                      22440000
         COPY  RXLFMTS                  POST PROCESSOR RECORD FORMATS   22500000
         EJECT                                                          22560000
* FARENT                                                                22620000
*                                                                       22680000
*   THIS DSECT DESCRIBES THE FORMAT OF AN OPERAND ENTRY IN FAR.         22740000
*   EACH INSTRUCTION ENTRY IN FAR CONSISTS OF A FIXED NUMBER OF         22800000
*   FAR OPERAND ENTRIES.THE FIXED NUMBER IS THE MAXIMUM NUMBER OF       22860000
*   OPERANDS IN ANY MACHINE INSTRUCTION AND IS SET THROUGH THE          22920000
*   GLOBAL &M.                                                          22980000
*   EACH FAR OPERAND ENTRY CONSISTS OF TWO BYTES.THE FORMAT OF THE      23040000
*   FIRST BYTE IS -                                                     23100000
*                                                                       23160000
*   NAME     BITS   DESCRIPTION                                         23220000
*   ----     ----   -----------                                         23280000
*   FSNLIT   0      1    LITERAL NOT ALLOWED (WHEN FSALOC NONZERO)      23340000
*            1           NOT USED                                       23400000
*   FSALOC   2-3    00   NO S PART                                      23460000
*                   01   S PART ASSEMBLED INTO HALFWORD 1               23520000
*                   10   S PART ASSEMBLED INTO HALFWORD 2               23580000
*                   11   NOT USED                                       23640000
*   FILEN    4      1    SUBTRACT 1 FROM EVALUATED I PART(LENGTH FIELD) 23700000
*            5           NOT USED                                       23760000
*   FIALOC   6-7    00   NO I PART                                      23820000
*                   01   I PART ASSEMBLED INTO BITS 12-15               23880000
*                   10   I PART ASSEMBLED INTO BITS 8-11                23940000
*                   11   I PART ASSEMBLED INTO BITS 8-15                24000000
*                                                                       24060000
*   THE FORMAT OF THE SECOND BYTE FOR OPERANDS WITHOUT S PART IS -      24120000
*                                                                       24180000
*   NAME     BITS   DESCRIPTION                                         24240000
*   ----     ----   -----------                                         24300000
*   RIDEC    0      1    DECIMAL DIGIT                                  24360000
*            1           NOT USED                                       24420000
*   RIBND    2-3    00   FIELD WIDTH ONLY BOUND FOR VALUE               24480000
*                   01   NOT USED                                       24540000
*                   10   NOT USED                                       24600000
*                   11   VALUE LESS THAN 8                              24660000
*            4-5         NOT USED                                       24720000
*   RIDIV    6-7    00   NO DIVISIBILITY CONSTRAINTS                    24780000
*                   01   VALUE DIVISIBLE BY 2                           24840000
*                   10   VALUE DIVISIBLE BY 4                           24900000
*                   11   NOT USED                                       24960000
*                                                                       25020000
*   THE FORMAT OF THE SECOND BYTE FOR OPERANDS WITH S PART IS -         25080000
*                                                                       25140000
*   NAME     BITS   DESCRIPTION                                         25200000
*   ----     ----   -----------                                         25260000
*   RSMOD    0      1    OPERAND MODIFIED AT EXECUTION                  25320000
*            1-3         NOT USED                                       25380000
*   RSALW    4      1    CHECK ALIGNMENT EVEN IF NOALGN OPTION          25440000
*            5           NOT USED                                       25500000
*   RSDIV    6-7    00   NO ALIGNMENT RESTRICTIONS                      25560000
*                   01   ALIGN ON HALFWORD BDRY                         25620000
*                   10   ALIGN ON FULLWORD BDRY                         25680000
*                   11   ALIGN ON DOUBLEWORD BDRY                       25740000
*                                                                       25800000
         SPACE                                                          25860000
FARENT   DSECT                                                          25920000
FENT     DS    0H                                                       25980000
FMT      DSW   FSNLIT,                  NO LITERAL                     X26040000
               ,,,                                                     X26100000
               FILEN,                   LENGTH FIELD                   *26160000
               ,                                                       *26220000
               FIAL1                    FIRST BIT OF FIALOC             26280000
FSALOC   EQU   BIT2+BIT3                S ALLOCATION                    26340000
FIALOC   EQU   BIT6+BIT7                I ALLOCATION                    26400000
RIST     DSW   RIDEC                    DECIMAL DIGIT                   26460000
RIBND    EQU   BIT2+BIT3                I FIELD UPPER BOUND             26520000
RIDIV    EQU   BIT6+BIT7                I FIELD DIVISIBILITY            26580000
         ORG   RIST                                                     26640000
RSST     DSW   RSMOD,                   STORAGE MODIFIED               X26700000
               ,,,                                                     X26760000
               RSALW                    ALIGNMENT ALWAYS CHECKED        26820000
RSDIV    EQU   BIT6+BIT7                S DIVISIBILITY(I.E.,ALIGNMENT)  26880000
NXTFENT  EQU   *                        NEXT FAR ENTRY                  26940000
         ORG   FMT                                                      27000000
         DBV   EOP(0)                   END OF OPERAND                  27060000
         EJECT                                                          27120000
         JCSECT (X5M00)                 CREATE CSECT                    27300000
* VS1 RELEASE 3.1 CHANGES                                               27350031
*C579600,580800,594700,594900                                   OX02675 27352031
*A540500,540540                                                @OY09690 27352105
*D540600                                                       @OY09690 27352205
*C536400                                                       @AZ07389 27352306
*A590900                                                       @AX13632 27352406
*C876300,877200,880200,881400,884490,884610                    @AM07317 27355400
         JMODID                         EMBED MODULE IDENTIFIER         27360000
         SPACE                                                          27420000
X5M      JSAVE BASE=YES                 SAVE CALLING REGISTERS          27480000
         JENTRY (X5M01=X5M)             IDENTIFY ENTRY POINT            27540000
         JEXTRN (X5P01=X5P)             ENTRY POINT FOR PRINT AND PUNCH 27600000
         JEXTRN (X5L01=LOGERR)          ENTRY POINT FOR ERROR LOGGING   27660000
         JEXTRN (X5V01=X5V)             ENTRY POINT FOR EXPR EVALUATION 27720000
         USING X5COM,&COM                                               27840000
         USING JTEXT,&TBP                                               27900000
         USING JTEXTA,&TCP                                              27960000
         USING FARENT,&FRG                                              28020000
         USING XRFIN,R11                SETUP BASE FOR XREF RECORD      28080000
         EJECT                                                          28140000
*********************************************************************** 28200000
* INIT                                                                * 28260000
*   INITIALIZE FOR MACHINE INSTRUCTION PROCESSING.                    * 28320000
*********************************************************************** 28380000
         SPACE                                                          28440000
         SET   (TOOMANY,LEAVE),OFF      RESET SWITCHES                  28500000
         SET   ZAPIT,OFF                INITLZ SW FOR ZEROING OP CODE   28530000
         L     &WRK,ELCTR               GET LOCATION COUNTER            28560000
         TM    ELCTR+L'ELCTR-1,BIT7     IS IT ODD ?                     28620000
         BNO   INTLCT                   NO, STORE                       28680000
* PRODUCE ALIGNMENT BYTE FOR PRINTING                                   28740000
         ST    &WRK,LOCATN              STORE LOCATION CTR IN OUTPUT    28800000
         MVI   LHFLGS,D1                LENGTH IS ONE                   28860000
         SET   ENTALN,ON                INDICATE ALIGNMENT              28920000
         LA    R10,LSTOUT               SET PARAMETER FOR X5P           28980000
         JCALL X5P             GO PRINT AND PUNCH ALIGNMENR BYTE        29040000
         LA    &WRK,D1(,&WRK)           ROUND LOCTR TO HALFWORD         29100000
         ST    &WRK,ELCTR               STORE IT                        29160000
INTLCT   ST    &WRK,LOCATN              SET LOCATION FOR INSTRUCTION    29220000
         SPACE                                                          29280000
*   GET LENGTH OF INSTRUCTION(NEEDED IN X5V)                            29340000
         SPACE                                                          29400000
         IC    &SCR,JTFLGA              GET LENGTH FLAGS(IN JTFLGA)     29460000
         SLL   &SCR,D32-JLN4            SHIFT OUT GARBAGE               29520000
         SRL   &SCR,D32-(JLN4+D1)       SHIFT BACK AND MULTIPLY BY 2    29580000
         LA    &SCR,D2(,&SCR)           ADD 2 (BASIC LENGTH)            29640000
         STH   &SCR,CLCLNG              STORE INSTRUCTION LENGTH        29700000
         SPACE                                                          29760000
         XC    LHIMD(LHFLGS-LHIMD),LHIMD  CLEAR LEFTHALF                29820000
         MVC   LHOPCD,JTIOP             MOVE OPCODE TO OUTPUT           29880000
         SPACE                                                          29940000
* GET POINTER TO OPERAND LIST                                           30000000
         SPACE                                                          30060000
         L     &TCP,OPNADR              INITIALIZE TEXT POINTER         30120000
         SPACE                                                          30180000
* GET ADDRESS OF INSTRUCTION ENTRY IN FAR.                              30240000
*   THE ENTRY IS LOOKED UP VIA ONE OF TWO AUXILIARY TABLES,FGT AND      30300000
*   FGTX.FGT IS USED FOR INSTRUCTIONS WITH ONE-BYTE OPCODE AND IS       30360000
*   SIMPLY A TRANSLATION TABLE.FGTX IS USED FOR EXTENDED OPCODE,IE      30420000
*   EXTENDED BRANCHES AND TWO-BYTE OPCODES.ITS ENTRIES ARE SORTED IN    30480000
*   ASCENDING ORDER ON THE OPCODE.                                      30540000
         SPACE                                                          30600000
         SR    R2,R2                    CLEAR POINTER REG               30660000
         GOIF  JEXTB,ON=INTXOC          GO IF EXTENDED OPCODE           30720000
         TRT   JTIOP1,FGT               GET FAR ENTRY NUMBER IN REG 2   30780000
         B     INTGFR                                                   30840000
         SPACE                                                          30900000
INTXOC   LA    &SCR,FGTX                GET FAR-GET-TABLE ADDRESS  FOR  30960000
         USING FGTXE,&SCR               EXT OPCODES                     31020000
INTXCP   CLC   XOPCM,JTIOP              IS THIS THE ENTRY               31080000
         BNL   INTXFD                   YES                             31140000
         LA    &SCR,XNEXT               NO,TRY                          31200000
         B     INTXCP                   NEXT ENTRY                      31260000
INTXFD   IC    R2,XFPTR                 GET FAR ENTRY NUMBER            31320000
         SPACE                                                          31380000
INTGFR   MH    R2,=Y(&M*L'FENT)         GET ADDR (REL TO FAR) OF ENTRY  31440000
         LA    &FRG,FAR(R2)             ADD FAR BASE POINTER            31500000
         LA    &SCR,FARENT+&M*L'FENT    GET ADDR OF FAR ENTRY END       31560000
         ST    &SCR,FNTEND              STORE IT                        31620000
         TEXT  DRVCKE                   GO IF NO OPERAND THERE          31680000
         CLC   D0(,&FRG),=H'0'          ZERO FAR ENTRY. TREAT OPND AS   31720000
         BNE   DRVRST                    A COMMENT                      31760000
         B     CLOSE                    GO OUTPUT                       31780000
*   END OF INITIALIZATION                                               31800000
         EJECT                                                          31860000
*********************************************************************** 31920000
* DRIVER                                                              * 31980000
*   FUNCTION                                                          * 32040000
*    -MONITOR OPERAND PROCESSING.                                     * 32100000
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  * 32160000
*      ERROR                                 ACTION                   * 32220000
*      ----                                  ------                   * 32280000
*      TOO FEW OPERANDS                      LEAVE *                  * 32340000
*      TOO MANY OPERANDS                     SCAN SUPERFLUOUS OPERANDS* 32400000
*                                            FOR ERRORS               * 32460000
*      COMMA EXPECTED AFTER OPERAND          LEAVE                    * 32520000
*                                                                     * 32580000
*      *'LEAVE' MEANS THAT CONTROL IS RETURNED TO PHASE MAINLINE,WITH * 32640000
*        UNPROCESSED OPERANDS SET TO ZERO.                            * 32700000
*********************************************************************** 32760000
         SPACE 2                                                        32820000
DRIVERZ  SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            32880000
DRIVER   GOIF  LEAVE,ON=CLOSEZ          EXIT IF UNRECOVERABLE ERROR    *32940000
                                        OCCURRED DURING OPERAND PROC    33000000
         LA    &FRG,NXTFENT             GET NEXT FORMAT                 33060000
         CLI   D0(R10),JBLANK           IS IT BLANK?                    33120000
         BE    DRVCKE                   YES,GO CHECK IF IT SHOILD BE    33180000
         TEXT  DRVCKE,COMMA,DRVNCM      GO TO DRVCKE IF END OF TEXT,   *33240000
                                        DRVNCM IF NOT SO AND NO COMMA   33300000
         GOIF  EOP,EQ=DRV2MN            GO IF END OF FORMAT             33360000
         C     &FRG,FNTEND                   LIKE-                      33420000
         BNL   DRV2MN                        WISE                       33480000
DRVRST   EQU   *                   RESET SWITCHES AND WORK AREAS        33540000
         SET   (E2PR,E3PR,E1ERR,E2ERR,E3ERR),OFF       RESET SWITCHES   33600000
         XC    MWORK(MWLEN),MWORK       CLEAR WORK AREA                 33660000
         SR    &ESD1,&ESD1              CLEAR                           33720000
         SR    &EXP1,&EXP1              CLEAR                           33780000
         MVI   LQ1+L'LQ1-1,1            SET INITIAL LENGTH ATTR TO 1    33840000
         B     COLLECT                  GO SCAN OPERAND                 33960000
         SPACE                                                          34020000
DRVCKE   EQU   *                   NO MORE TEXT.CHECK IF IT SHOULD BE.  34080000
         GOIF  EOP,EQ=CLOSE             GO IF FORMAT END (ALL OK)       34140000
         C     &FRG,FNTEND                   LIKE-                      34200000
         BNL   CLOSE                         WISE                       34260000
         X5ERRL 210,0,CLOSEZ            TOO FEW OPERANDS                34320000
         SPACE                                                          34380000
DRVNCM   X5ERRL 178,CLMPTR,CLOSEZ       SYNTAX ERROR                    34432000
         SPACE                                                          34440000
DRV2MN   EQU   *                   TOO MANY OPERANDS                    34500000
         GOIF  TOOMANY,ON=DRVRST        GO IF ALREADY DIAGNOSED         34560000
         X5ERRL 211,0                   TOO MANY OPERANDS               34620000
         SET   TOOMANY,ON               REMEMBER WE DID                 34680000
         SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            34730000
         B     DRVRST                   CONTINUE                        34740000
         SPACE 5                                                        34790000
CLOSEZ   SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            34800000
         EJECT                                                          34860000
*********************************************************************** 34920000
* CLOSE                                                               Q 34980000
*   WRAP UP INSTRUCTION PROCESSING.CALL PRINT ROUTINE.EXIT            * 35040000
*********************************************************************** 35100000
         SPACE 2                                                        35160000
CLOSE    L     &SCR,ELCTR               TAKE A LOCATION COUNTER         35280000
         LH    &SCH,CLCLNG              ... AND ITS LENGTH              35340000
         AR    &SCR,&SCH                    ADD THEM TOGETHER           35400000
         ST    &SCR,ELCTR               AND YOU HAVE A NEW,BETTER LOCTR 35460000
         STC   &SCH,LHFLGS              SET LENGTH FOR OUTPUT           35520000
         GOIF  ZAPIT,OFF=CLOSE0         BR IF NO ERROR                  35530000
         BCTR  &SCH,0                   DECR LNG BY 1                   35540000
         EX    &SCH,ZAPER               ZERO OP CODE                    35550000
         SPACE                                                          35560000
CLOSE0   C     R14,=X'1000000'          IS IT GREATER THAN MAXIMUM?     35580000
         BL    CLOSE1                   BRANCH AROUND IF BELOW LIMIT    35640000
         GOIF  WRPFLG,ON=CLOSE1         BRANCH AROUND IF NOT FIRST      35700000
         SET   WRPFLG,ON                SET WRAPFLAG                    35760000
         X5ERRL 246,0                   LOCATION COUNTER OVERFLOW       35820000
         SPACE                                                          35880000
CLOSE1   LA    R10,LSTOUT               SET PARAMETER FOR X5P           35940000
         JCALL X5P                      PRINT AND/OR PUNCH INSTR        36000000
         GOIF  JERR,OFF=X5M99           WAS AN ERROR FLAGGED            36060000
         LA    R10,ERROUT               YES, LOAD ERROR FLAG INDEX      36120000
         JCALL X5P                      GO PRINT FLAG                   36180000
X5M99    JRETURN ,                      RETURN TO PHASE MAINLINE        36240000
ZAPER    XC    LHOPCD(*-*),LHOPCD       ZERO OPCODE                     36270000
         EJECT                                                          36300000
*********************************************************************** 36360000
* COLLECT                                                             * 36420000
* FUNCTION                                                            * 36480000
*  -SCAN ONE OPERAND AND COLLECT DATA                                 * 36540000
*  -DIAGNOSE THE FOLLOWING ERRORS-                                    * 36600000
*    ERROR                                   ACTION                   * 36660000
*    -----                                   ------                   * 36720000
*    PREMATURE END OF OPERAND                LEAVE                    * 36780000
*    RIGHT PARENTHESES EXPECTED              LEAVE                    * 36840000
*    COMPLEXLY RELOCATABLE OPERAND           SET TO ZERO              * 36900000
*    ILLEGAL LITERAL USAGE                   -                        * 36960000
*                                                                     * 37020000
*    THE FOLLOWING FORMATS ARE ACCEPTED,REGARDLESS OF FORMAT SPECIFIED* 37080000
*    IN FAR TABLE                                                     * 37140000
*        EXP1                                                         * 37200000
*        EXP1(EXP2)                                                   * 37260000
*        EXP1(,EXP3)                                                  * 37320000
*        EXP1(EXP2,EXP3)                                              * 37380000
*        LITERAL                                                      * 37440000
*   ALL OTHERS ARE FLAGGED AS SYNTAX ERRORS EITHER BY X5V OR BY THIS  * 37500000
*   ROUTINE.                                                          * 37560000
*********************************************************************** 37620000
         SPACE 2                                                        37680000
COLLECT  EQU   *                                                        37740000
         TEXT  COLPME                   GO IF PREMATURE END OF OPERAND  37800000
         GOIF  D0(R10),JEQUAL,EQ=LIT100 IS OPERAND A LITERAL            37860000
         GOIF  D0(R10),JCOMMA,NE=CONTIN CONTINUE IF NOT COMMA           37920000
         X5ERRL 210,CLMPTR,COLFAT       OPERAND MISSING                 37980000
         SPACE                                                          38040000
CONTIN   JCALL X5V                      EVALUATE EXPRESSION 1           38220000
         ST    R14,ERRPTR               SAVE COLUMN PTR FOR LOGGING     38280000
         BC    ERRX,COLFAT              GO IF FATAL EVALUATION ERROR    38340000
         BC    CMPX,COLCMP              GO IF NONFATAL ERROR            38400000
         LR    &ESD1,R10                SET ESDID OF EXPR 1             38460000
         LR    &EXP1,R11                SET VALUE OF EXPR1              38520000
         MVC   LQ1,IMPLNG               ... AND LENGTH ATTRIBUTE        38580000
         SPACE                                                          38640000
COLCLP   LR    &TCP,R14                 RECOVER TEXT POINTER FROM X5V   38700000
         TEXT  COLOUT,LPAREN,COLOUT     GO TO COLOUT IF END OF OPERAND *38760000
                                        LIST OR NOT LEFT PAREN          38820000
         TEXT  COLPME,COMMA,COLEE2      GO TO COLPME IF END OF OPERAND,*38880000
                                        TO COLEE2 IF NOT COMMA          38940000
         TM    FMT,FIALOC               IS EXP2 ALLOWED                 38990000
         TM    FMT,FIALOC               IS THERE AN I PART              38992000
         BZ    IPROC1                   NO, LOG AN ERROR                38994000
         TM    FMT,FSALOC               IS THERE AN S PART              38996000
         BZ    IPROC1                   NO, LOG AN ERROR                38998000
         SPACE                                                          39000000
COLEE3   JCALL X5V                      EVALUATE EXPRESSION 3           39060000
         ST    R14,ERRPTR               SAVE COLUMN PTR FOR LOGGING     39120000
         LR    &TCP,R14                 RECOVER TEXT POINTER FROM X5V   39180000
         BC    ERRX,COLFAT              GO IF FATAL EVALUATION ERROR    39240000
         BC    ABSX,COLE3A              GO IF EXP3 ABSOLUTE             39300000
         SET   E3ERR,ON                 NOT ABSOLUTE - SET ERROR FLAG   39360000
         B     COLE3P                                                   39420000
         SPACE                                                          39480000
COLE3A   ST    R11,EXP3                 SET EXP3 VALUE                  39540000
COLE3P   SET   E3PR,ON                  SET EXP3 PRESENT                39600000
COLCRP   TEXT  COLPME,RPAREN,COLRPE     GO TO COLPME IF END OF OPERAND,*39660000
                                        TO COLRPE IF NOT RIGHT PAREN    39720000
         TM    FMT,FSALOC               IS THERE AN S PART              39729000
         BZ    IPROC1                   NO, LOG AN ERROR                39738000
         GOIF  E3PR,OFF=COLOUT          IF ONLY EXP2, EXIT              39747000
         TM    FMT,FIALOC               IS THERE AN I PART              39756000
         BZ    IPROC1                   NO, LOG AN ERROR                39765000
COLOUT   GOIF  TOOMANY,ON=DRIVER        GO IF THIS IS ONE OF TOO MANY   39780000
         TM    FMT,FSALOC               ANY S PART                      39840000
         BZ    IPROC                    NO                              39900000
         TM    FMT,FIALOC               ANY I PART                      39960000
         BZ    SPROC                    NO                              40020000
         GOIF  FILEN,OFF=SXPROC         GO IF SX OPERAND                40080000
         B     SLPROC                   GO PROCESS SL OPERAND           40140000
COLPME   X5ERRL 212,CLMPTR              PREMATURE END OF OPERAND        40200000
COLFAT   SET   LEAVE,ON                 FATAL ERROR - DONT COLLECT MORE 40260000
         B     COLOUT                   TRY WITH WHAT YOU GOT           40320000
         SPACE                                                          40380000
COLCMP   EQU   *                   EXP1 COMPLEXLY RELOCATABLE,OR WHAT ? 40440000
         SET   ZAPIT,ON                 SET TO ZERO LEFT HALF           40480000
         GOIF  COMPLEX,NE=COLCLP        IF NOT COMPLEX,NON-SYNTATIC     40520000
         SET   E1ERR,ON                 SET EXPRESSION 1 ERROR          40560000
         X5ERRL 213,CLMPTR,COLCLP       COMPLEXLY RELOCATABLE           40620000
         SPACE                                                          40800000
COLLIT   GOIF  FSNLIT,OFF=COLOUT        GO IF LITERAL ALLOWED           40860000
         SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            40910000
         X5ERRL 214,CLMPTR,COLOUT       ILLEGAL LITERAL USAGE           40920000
         SPACE                                                          40980000
COLEE2   JCALL X5V                      EVALUATE EXPRESSION 2           41100000
         ST    R14,ERRPTR               SAVE COLUMN PTR FOR LOGGING     41160000
         LR    &TCP,R14                 RECOVER TEXT POINTER FROM X5V   41220000
         BC    ERRX,COLFAT              GO IF FATAL EVALUATION ERROR    41280000
         BC    ABSX,COLE2A              GO IF EXP2 ABSOLUTE             41340000
         SET   E2ERR,ON                 NOT ABSOLUTE - SET ERROR FLAG   41400000
         B     COLE2P                                                   41460000
         SPACE                                                          41520000
COLE2A   ST    R11,EXP2                 SET EXP2 VALUE                  41580000
COLE2P   SET   E2PR,ON                  SET EXP2 PRESENT                41640000
         TEXT  COLPME,COMMA,COLCRP      GO TO COLPME IF END OF OPERAND,*41700000
                                        TO COLCRP IF NOT COMMA          41760000
         B     COLEE3                   GO HANDLE EXP3                  41820000
         SPACE                                                          41880000
COLRPE   X5ERRL 215,CLMPTR,COLFAT       RIGHT PAREN EXPECTED            41940000
         EJECT                                                          42000000
*********************************************************************** 42060000
* IPROC                                                               * 42120000
*   FUNCTION                                                          * 42180000
*    -PROCESS I TYPE OPERAND                                          * 42240000
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  * 42300000
*      ERROR                                 ACTION                   * 42360000
*      -----                                 ------                   * 42420000
*      ILLEGAL FORMAT FOR I OPERAND          SET TO ZERO              * 42480000
*      OPERAND IS RELOCATABLE                SET TO ZERO              * 42540000
*      FIELD OVERFLOW                        TRUNCATED                * 42600000
*      BOUND EXCEEDED                        -                        * 42660000
*      DIVISIBILITY ERROR                    -                        * 42720000
*********************************************************************** 42780000
         SPACE                                                          42840000
IPROC    GOIF  (E2PR,E3PR),OFF=IPRNFE   GO IF NEITHER EXP2 NOR EXP3 PR  42900000
         SPACE                                                          42950000
IPROC1   X5ERRL 216,CLMPTR,DRIVERZ      ILLEGAL FORMAT                  42960000
IPRNFE   GOIF  E1ERR,ON=DRIVER          GO IF COMPLEXLY RELOCATABLE     43020000
         LTR   &ESD1,&ESD1              IS IT ABSOLUTE                  43080000
         BZ    IPRABS                   YES                             43140000
         X5ERRL 217,CLMPTR,DRIVERZ      I OPERAND RELOCATABLE           43200000
IPRABS   JCALL CDIV,BASE=NO             CHECK DIVISIBILITY              43260000
         BNZ   IPRBER                   NOT OK, GO LOG ERROR            43320000
         ST    &EXP1,EXP2               SET PARAMETER FOR IASGN         43440000
         JCALL IASGN,BASE=NO            ASSIGN AND CHECK FOR(FIELD)SIZE 43500000
         BL    IPRBND                   GO IF OK                        43560000
         GOIF  RIDEC,ON=IPRDEC          SHOULD IT BE DEC DIGIT ?        43610000
         X5ERRL 219,CLMPTR,DRIVERZ      FIELD OVERFLOW                  43620000
IPRBND   TM    RIST,RIBND+RIDEC         ANY BOUND REQUIREMENT           43680000
         BZ    DRIVER                   NO                              43740000
         GOIF  RIDEC,ON=IPRDEC          GO IF IT SHOULD BE DEC DIGIT    43800000
         SR    R2,R2                    ZERO REGISTER                   43860000
         MVC   DWORD1(L'RIST),RIST      GET RESTRICTION BYTE            43920000
         NI    DWORD1,RIBND             STRIP OFF NON-BOUND BITS        43980000
         IC    R2,DWORD1                GET BOUND BITS                  44040000
         SRL   R2,4                     SHIFT TO LOWER HALF BYTE        44100000
         STC   R2,DWORD1                RESTORE BOUND BITS              44160000
         TRT   DWORD1(L'RIST),IPRTAB    GET TEST BITS IN REG 2          44220000
         LCR   R2,R2                    COMPLEMENT                      44280000
         NR    R2,&EXP1                 RESULT SHOULD BE ZERO           44340000
         BZ    DRIVER                   IT IS                           44400000
IPRBER   X5ERRL 218,0,DRIVERZ           INVALID REGISTER SPECIFICATION  44460000
IPRDEC   C     &EXP1,=F'10'             IS IT A DECIMAL DIGIT           44520000
         BNL   DECERR                   ERROR IF GE THAN 10             44550000
         LTR   R4,R4                    IS IT NEGATIVE                  44580000
         BNM   DRIVER                   OK IF NOT NEGATIVE              44640000
DECERR   X5ERRL 162,CLMPTR,DRIVERZ      DECIMAL DIGIT ERROR             44670000
         SPACE                                                          44700000
IPRTAB   DC    AL1(0,2,4,8)             TABLE OF TEST BITS              44760000
         EJECT                                                          44820000
*********************************************************************** 44880000
* SPROC                                                               * 44940000
*   FUNCTION                                                          * 45000000
*    -REFORMAT THE DATA COLLECTED FOR SPART INPUT                     * 45060000
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  * 45120000
*      ERROR                                 ACTION                   * 45180000
*      -----                                 ------                   * 45240000
*      NO INDEX OR LENGTH FIELD EXPECTED     -                        * 45300000
*********************************************************************** 45360000
         SPACE                                                          45420000
SPROC    GOIF  E3PR,ON=SPRSE3           GO IF EXP3 PRESENT              45480000
         GOIF  E2PR,OFF=SPART           GO IF NO EXP2 PRESENT           45540000
         SET   E3PR,ON                  PRETEND EXP3 IS EXP2            45600000
         MVC   EXP3,EXP2                ---                             45660000
         GOIF  E2ERR,ON=SPRE2R          GO IF REL BASE                  45720000
SPRFG2   SET   E2PR,OFF                 FORGET EXP2                     45780000
         B     SPART                                                    45840000
SPRSE3   GOIF  E2PR,OFF=SPART           DONT MENTION IF EXP2 NOT THERE  45900000
         SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            45950000
         X5ERRL 221,CLMPTR,SPRFG2       ILLEGAL LENGTH OR INDEX         45960000
SPRE2R   SET   E3ERR,ON                 EXP2 WAS EXP3,WASN'T IT ?       46020000
         B     SPART                                                    46080000
         EJECT                                                          46140000
*********************************************************************** 46200000
* SXPROC                                                              * 46260000
*   FUNCTION                                                          * 46320000
*    -PROCESS INDEX FIELD IN SX OPERAND                               * 46380000
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  * 46440000
*      ERROR                                 ACTION                   * 46500000
*      -----                                 ------                   * 46560000
*      INDEX NOT ABSOLUTE                    SET TO ZERO              * 46620000
*      INDEX FIELD OVERFLOW                  TRUNCATED                * 46680000
*********************************************************************** 46740000
SXPROC   EQU   *                                                        46800000
         GOIF  E2PR,OFF=SPART           GO IF INDEX NOT EXPLICIT        46860000
         GOIF  E2ERR,ON=SXPXNA          GO IF INDEX NOT ABSOLUTE        46920000
         OC    EXP2,EXP2                IS INDEX ZERO ?                 46980000
         BZ    SPART                    YES,IGNORE IT                   47040000
         JCALL IASGN,BASE=NO            MOVE INDEX TO OBJECT CODE       47100000
         BL    SPARTX                   GO IF NO OVERFLOW               47160000
         X5ERRL 222,CLMPTR,SPARTXZ      INVALID INDEX                   47220000
         SPACE                                                          47270000
SXPXNA   X5ERRL 223,CLMPTR,SPARTXZ      RELOCATABLE INDEX               47280000
         EJECT                                                          47340000
*********************************************************************** 47400000
* SLPROC                                                              * 47460000
*   FUNCTION                                                          * 47520000
*    -PROCESS LENGTH FIELD IN SL OPERAND                              * 47580000
*    -DIAGNOSE THE FOLLOWING ERRORS-                                  * 47640000
*      ERROR                                 ACTION                   * 47700000
*      -----                                 ------                   * 47760000
*      LENGTH NOT ABSOLUTE                   IMPLIED LENGTH USED      * 47820000
*      LENGTH FIELD OVERFLOW                 TRUNCATED                * 47880000
*********************************************************************** 47940000
         SPACE 2                                                        48000000
SLPROC   EQU   *                                                        48060000
         GOIF  E2PR,ON=SLPLE2           GO IF EXPLICIT LENGTH           48120000
         LH    &SCR,LQ1                 GET IMPLIED LENGTH              48180000
         SPACE                                                          48240000
SLPLS1   LTR   &SCR,&SCR                IS IT ZERO ?                    48300000
         BZ    SPART                    YES                             48360000
         BCTR  &SCR,0                   SUBTRACT 1 FROM LENGTH          48420000
         ST    &SCR,EXP2                STORE MOVE LENGTH IN EXP2       48480000
         JCALL IASGN,BASE=NO            MOVE LENGTH TO OBJECT CODE      48540000
         BL    SPART                    GO IF NOT TOO BIG               48600000
         X5ERRL 224,CLMPTR,SLPROCZ      LENGTH ERROR                    48660000
         SPACE                                                          48710000
SLPLE2   GOIF  E2ERR,ON=SLPELR          GO IF LENGTH ERROR              48720000
         L     &SCR,EXP2                GET EXPLICIT LENGTH             48780000
         B     SLPLS1                                                   48840000
SLPELR   X5ERRL 225,CLMPTR              RELOCATABLE LENGTH              48900000
         SPACE                                                          48960000
SLPROCZ  SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            49010000
         EJECT                                                          49020000
*********************************************************************** 49080000
* SPART                                                               * 49140000
* FUNCTION                                                            * 49200000
*  -PROCESS S PART OF STORAGE OPERAND                                 * 49260000
*  -DECOMPOSE IMPLICIT VALUES INTO BASE-DISPLACEMENT                  * 49320000
*  -DIAGNOSE THE FOLLOWING ERRORS-                                    * 49380000
*    ERROR                                   ACTION                   * 49440000
*    -----                                   ------                   * 49500000
*    RELOCATABLE DISPLACEMENT                SET TO ZERO              * 49560000
*    BASE NOT ABSOLUTE                       SET TO ZERO              * 49620000
*    ADDRESSABILITY ERROR                    BASE,DISP SET TO ZERO    * 49680000
*    BASE REG FIELD OVERFLOW                 TRUNCATED                * 49740000
*    DISPLACEMENT FIELD OVERFLOW                                      * 49800000
*    (IE,DISP NOT IN RANGE -4096 TO 4095)    TRUNCATED                * 49860000
*    ALIGNMENT ERROR                         -                        * 49920000
*    REENTERABILITY ERROR                    -                        * 49980000
* ENTRY POINTS - SPART,SPARTX                                         * 50040000
*********************************************************************** 50100000
         SPACE                                                          50220000
* CHECK ALIGNMENT                                                       50280000
         SPACE                                                          50340000
SPART    GOIF  E3PR,OFF=SPALG1          GO IF NO EXPLICIT BASE          50400000
         OC    EXP3,EXP3                IS BASE ZERO                    50460000
         BNZ   SPARTX                   NO                              50520000
         SPACE                                                          50580000
SPALG1   GOIF  RSALW,ON=SPALGN          GO IF ALGN ALWAYS TO BE CHECKED 50640000
         GOIF  JALGN,OFF=SPARTX         GO IF NOALGN OPTION             50700000
SPALGN   JCALL CDIV,BASE=NO             CHECK ALIGNMENT                 50760000
         BZ    SPARTX                   GO IF OK                        50820000
         X5ERRL 220,CLMPTR,SPARTX       ALIGNMENT ERROR                 50880000
         SPACE                                                          50940000
SPARTXZ  SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            51000000
         SPACE                                                          51060000
SPARTX   GOIF  E3PR,OFF=SPAHK1          GO IF NO EXPLICIT BASE          51120000
         GOIF  E3ERR,OFF=SPAEA1         GO IF BASE OK                   51180000
         X5ERRL 226,CLMPTR              BASE NOT ABSOLUTE               51240000
         SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            51290000
SPAEA1   LTR   &ESD1,&ESD1              IS EXP1 ABSOLUTE                51300000
         BNZ   SPARDP                   NO - RELOCATABLE DISPLACEMENT   51360000
         SPACE                                                          51420000
SPAHKD   STH   &EXP1,DISPL              SAVE DISPLACEMENT               51480000
         CL    &EXP1,=F'4096'           IS IT LT 4096                   51540000
         BL    SPASGN                   NO,ERROR                        51600000
         X5ERRL  208,0,SPASGNZ          DISPLACEMENT TOO LARGE          51760000
         SPACE                                                          51800000
SPARDP   X5ERRL 228,CLMPTR,SPASGNZ      RELOCATABLE DISPLACEMENT        51840000
SPAHK1   GOIF  E1ERR,ON=DRIVER          GO IF EXP1 COMPL RELOCATABLE    52020000
         LTR   &ESD1,&ESD1              IS EXP1 ABSOLUTE                52080000
         BNZ   SPAREL                   NO                              52140000
         GOIF  ABSUS,OFF=SPAHKD         GO IF NO ABS USING IS CURRENT   52200000
         SPACE                                                          52260000
* ATTEMPT DECOMPOSITION                                                 52320000
         SPACE                                                          52380000
SPADEC   LA    &SCH,USINGT              GET USING TABLE ADDRESS         52440000
         USING UESD,&SCH                USE THE USING USING             52500000
         SPACE                                                          52560000
SPATRY   CH    &ESD1,UESD               IS IT SAME ESDID                52620000
         BH    SPAAER                   ADDR ERROR IF HIGH              52680000
         BE    SPAMBS                   EQUAL - MAYBE SUCCESS           52740000
SPAPNE   LA    &SCH,USNXT               POINT TO NEXT ENTRY             52800000
         B     SPATRY                   GO TRY IT                       52860000
SPAMBS   LTR   &ESD1,&ESD1              IS IT ABSOLUTE                  52920000
         BZ    SPAABS                   YES                             52980000
         SPACE                                                          53040000
SPAG1V   LR    &SCR,&EXP1               GET EXP1 VALUE                  53100000
         S     &SCR,UVAL                GET TENTATIVE DISPLACEMENT      53160000
         BM    SPAPNE                   NEG DISP NOT VALID HERE         53220000
         C     &SCR,=F'4096'            IS IT LT 4096                   53280000
         BNL   SPAPNE         *         NO - TRY NEXT (IT WILL FAIL)    53340000
         STH   &SCR,DISPL               SAVE DISPLACEMENT               53400000
         LH    &SCR,UREG      *         GET USING REG                   53460000
         ST    &SCR,EXP3                SAVE IT                         53520000
         B     SPASGN                                                   53580000
SPAABS   CLI   UREG+1,X'00'             REG 0 (END OF TABLE)   @AZ07389 53640006
         BNZ   SPAG1V                   NO                              53700000
         B     SPAHKD                   YES - CHECK DISPLACEMENT        53760000
         SPACE                                                          53820000
SPAREL   GOIF  JRENT,OFF=SPADEC         GO IF NORENT OPTION             53940000
         GOIF  RSMOD,OFF=SPADEC         GO IF OPERAND NOT STORED INTO   54000000
         STH   &ESD1,JHWORD1            TEST FOR OPERAND-      @OY09690 54050005
         TM    JHWORD1,X'50'            IN DSECT OR Q-CONST    @OY09690 54052005
         BM    SPADEC                   BR IF SO.              @OY09690 54054005
         X5ERRL 229,CLMPTR,SPADEC       REENTERABILITY ERROR            54120000
SPAAER   X5ERRL 209,CLMPTR,DRIVERZ      ADDRESSABILITY ERROR            54180000
         SPACE                                                          54240000
SPASGNZ  SET   ZAPIT,ON                 SET TO ZERO LEFTHALF            54290000
         SPACE                                                          54292000
SPASGN   PACK  SALOC,FMT                GET ZERO+GARBAGE+S PART ALLOC   54360000
         NI    SALOC+D1,FSALOC/D16      STRIP OFF GARBAGE               54420000
         LH    &SCH,SALOC               HALFWORD NUMBER INTO REG        54480000
         SLL   &SCH,D2                  MULTIPLY BY 4                   54540000
         ST    &EXP1,ADDRS1-D4(&SCH)    STORE INTO ADDR1 OR -2          54600000
         SRL   &SCH,D1                  DIVIDE OFFSET BY 2              54660000
         LA    &SCH,LHOPCD(&SCH)        SCH NOW CONTAINS TARGET ADDRESS 54720000
         MVC   D0(L'DISPL,&SCH),DISPL   MOVE DISPL TO INSTRUCTION       54780000
         MVO   D0(L'BASEX,&SCH),BASEX   MOVE BASE                       54840000
         CLC   EXP3,=F'16'    *         IS BASE REG LT 16               54900000
         BL    DRIVER                   YES                             54960000
         X5ERRL 230,CLMPTR,DRIVERZ      BASE REGISTER TOO LARGE         55020000
         EJECT                                                          55140000
* CDIV                                                                  55200000
*                                                                       55260000
*   CHECK DIVISIBILITY (FOR PURE I OPERANDS) AND ALIGNMENT ( FOR        55320000
*   OPERANDS WITH S PART).RETURN WITH CC=0 IF OK.REG 2 IS DESTROYED.    55380000
*                                                                       55440000
         SPACE                                                          55500000
CDIV     TM    RIST,RIDIV               ANY DIVISIBILITY REQUIRED ?     55620000
         BZR   &RTN                     NO - RETURN WITH CC 0.          55680000
         MVC   DWORD1(L'RIST),RIST      GET RESTRICTION FIELD           55740000
         NI    DWORD1,RIDIV             STRIP OFF ALL BUT DIV BITS      55800000
         SR    R2,R2                    CLEAR                           55860000
         TRT   DWORD1(L'RIST),CDVTAB    GET TEST BITS IN REG 2          55920000
         NR    R2,&EXP1                 RESULT SHOULD BE ZERO           55980000
         BR    &RTN                     RETURN                          56040000
CDVTAB   DC    AL1(0,1,3,7)             TABLE TO GET TEST BITS          56100000
         EJECT                                                          56160000
* IASGN                                                                 56220000
*                                                                       56280000
*   MOVE I PART VALUE TO INSTRUCTION.SET CC=1 IF NO FIELD OVERFLOW.     56340000
*                                                                       56400000
         SPACE                                                          56580000
IASGN    TM    FMT,FIALOC               IS IT 4-BIT OR 8-BIT FIELD      56640000
         BM    IAS4BT                   4-BIT IF MIXED                  56700000
         MVC   LHIMD,I                  MOVE TO INSTRUCTION             56760000
         CLC   EXP2,=F'256'             SET CONDITION CODE              56820000
         BR    &RTN                                                     56880000
         SPACE                                                          56940000
IAS4BT   GOIF  FIAL1,ON=IASFHB          GO IF FIELD IN FIRST HALF-BYTE  57000000
         MVN   LHIMD,I                  MOVE TO 2ND HALF-BYTE           57060000
         B     IAS4BR                   GO SET CC                       57120000
         SPACE                                                          57180000
IASFHB   MVO   LHIMD,I                  MOVE TO 1ST HALF-BYTE           57240000
         SPACE                                                          57300000
IAS4BR   CLC   EXP2,=F'16'              SET CONDITION CODE              57360000
         BR    &RTN                     RETURN                          57420000
         EJECT                                                          57480000
*********************************************************************** 57540000
*  LITERAL OPERAND PROCESSING                                         * 57600000
*********************************************************************** 57660000
LIT100   LR    R6,R10                   SAVE TEXT POINTER               57720000
         ST    R6,ERRPTR                SAVE COLUMN PTR FOR LOGGING     57750000
         CLI   D1(R10),JBLANK           CAN'T HAVE A BLANK FOLLOWING    57760000
         BE    LIT140                   OR IT'S CURTAINS FOR THIS GUY   57770000
         LH    R10,JINFILE              POINT TO INPUT FILE             57780000
         JGETL FILE=(R10)               GET LITERAL REFERENCE           57840000
         L     R9,SYMXRF                GET SYMBOL XREFED       OX02675 57960031
         LA    R9,D1(R9)                INCREMENT 1                     58020000
         ST    R9,SYMXRF                STORE BACK              OX02675 58080031
         CLI   D4(R11),JTLITII          IS IT LITERAL REFERENCE REC     58140000
         BE    LIT125                   BRANCH AROUND IF YES            58200000
         SPACE                                                          58250000
         X5ERRL 167,0,CLOSEZ            SYMBOL FILE OUT OF PHASE        58260000
         SPACE                                                          58320000
LIT125   LH    R10,D6(R11)              GET LITERAL ESDID               58380000
         LTR   R10,R10                  IS IT ZERO?                     58440000
         BNZ   LIT150                   INVALID LITERAL IF YES          58500000
         SPACE                                                          58550000
LIT140   X5ERRL 161,CLMPTR,CLOSEZ       INVALID LITERAL                 58610000
         SPACE                                                          58680000
LIT150   MVC   LCTRSAV(4),D8(R11)       SAVE LITERAL LOCTR              58740000
         MVC   LCTRSAV+D4(2),D6(R11)    SAVE LITERAL ESDID              58800000
         SR    R2,R2                    CLEAR REGISTER                  58860000
         IC    R2,D2(R11)               GET LENGTH ATTRIBUTE            58920000
         LA    R2,D1(R2)                INCREMENT 1                     58980000
         STH   R2,LQ1                   SAVE IT                         59040000
         SR    R2,R2                    CLEAR REGISTER         @AX13632 59090006
         IC    R2,D5(R11)               GET LITERAL LENGTH              59100000
         LA    R2,D1(R2,R6)             POINT AFTER LITERAL             59160000
         ST    R2,LHSAVE                SAVE IT                         59220000
         SR    R2,R2                    CLEAR REGISTER                  59280000
         IC    R2,D3(R11)               GET SYMBOL COUNT                59340000
         LTR   R2,R2                    IS IT ZERO?                     59400000
         BZ    LIT175                   BRANCH IF YES                   59460000
         L     R9,SYMXRF                GET SYMBOLS XREFED      OX02675 59470031
         AR    R9,R2                    INCREMENT BY NO. OF SYMBOLS     59480000
         ST    R9,SYMXRF                STOR BACK               OX02675 59490031
LIT165   LH    R10,JINFILE              GET INPUT FILE INDEX            59580000
         JGETL FILE=(R10)               GET SYMBOL RECORD               59640000
         BCT   R2,LIT165                GO BACK IF MORE                 59940000
         SPACE                                                          60000000
LIT175   GOIF  (JXREF,JLIST),NOTALL=LIT200 NEED TO XREF?                60060000
         LH    R10,JOUTFILE             GET OUTPUT FILE NUMBER          60120000
         JPUTL FILE=(R10),BUFREQ=D18    LOCATE NEXT BUFFER              60180000
         MVC   XRFIN(6),=AL2(17,0,JY*256)  XREF RECORD HEADER           60240000
         MVC   LITLOCTR(4),LCTRSAV      PUT IN LITERAL LOCTR            60300000
         MVC   LITESDID(2),LCTRSAV+4    PUT IN LITERAL ESDID            60360000
         LH    R6,LITPID                GET POOL ID                     60420000
         LA    R6,1(R6)                 ADD 1                           60480000
         SLL   R6,8                     PUT POOL ID IN THE RIGHT PLACE  60540000
         STH   R6,LITPOLID              PUT POOLID IN RECORD            60600000
         MVI   XRFFLG,REF               INDICATE A REFERENCE            60660000
         MVC   XRFSTM,STMTN+D2          MOVE IN STATEMENT NUMBER        60720000
LIT200   EQU   *                                                        60780000
         L     R10,LHSAVE               RESTORE OPERAND POINTER         60840000
         LH    R6,LCTRSAV+4             PUT IN LITERAL ESDID            60900000
         L     R4,LCTRSAV               PUT IN LITERAL LOCTR            60960000
         B     COLLIT                   GO COLLECT OPERAND              61020000
         EJECT                                                          61080000
*********************************************************************** 61140000
* FAR TABLE                                                           * 61200000
*   THE FUNCTION OF THIS TABLE IS DESCRIBED IN THE MODULE PROLOGUE.   * 61260000
*   THE TABLE,AS WELL AS THE FGT AND FGTX TABLES ARE GENERATED BY     * 61320000
*   FOUR MACROS - MITAB (GLOBAL INITIALIZATION),OPND (DESCRIBE AN     * 61380000
*   OPERAND),OPCD (GIVE INSTRUCTION OPCODE) AND MIEND (WRAP-UP,GENE-  * 61440000
*   RATE FGT AND FGTX TABLES).                                        * 61500000
*    EACH MACHINE INSTRUCTION IS DESCRIBED BY ONE OPND INSTRUCTION    * 61560000
*   PER OPERAND,FOLLOWED BY AN OPCD INSTRUCTION.                      * 61620000
*   NOTE MACHINE INSTRUCTIONS WITH EXTENDED OPCODE MUST BE ENTERED    * 61680000
*   IN ASCENDING SEQUENCE ON THE OPCODE.                              * 61740000
*********************************************************************** 61800000
         SPACE 2                                                        61860000
FAR      MITAB ,                        SET GLOBALS FOR FAR MACROS      61920000
SPM      OPND  R,1                                                      61980000
         OPCD  X'04'                                                    62040000
BALR     OPND  R,1                                                      62100000
         OPND  R,2                                                      62160000
         OPCD  X'05'                                                    62220000
BCTR     OPND  R,1                                                      62280000
         OPND  R,2                                                      62340000
         OPCD  X'06'                                                    62400000
BCR      OPND  I,1                                                      62460000
         OPND  R,2                                                      62520000
         OPCD  X'07'                                                    62580000
SSK      OPND  R,1                                                      62640000
         OPND  R,2                                                      62700000
         OPCD  X'08'                                                    62760000
ISK      OPND  R,1                                                      62820000
         OPND  R,2                                                      62880000
         OPCD  X'09'                                                    62940000
SVC      OPND  I,3                      I FIELD IS IN WHOLE I BYTE      63000000
         OPCD  X'0A'                                                    63060000
MVCL     OPND  R,1,1                    EVEN REGS                       63120000
         OPND  R,2,1                                                    63180000
         OPCD  X'0E'                                                    63240000
CLCL     OPND  R,1,1                                                    63300000
         OPND  R,2,1                                                    63360000
         OPCD  X'0F'                                                    63420000
LPR      OPND  R,1                                                      63480000
         OPND  R,2                                                      63540000
         OPCD  X'10'                                                    63600000
LNR      OPND  R,1                                                      63660000
         OPND  R,2                                                      63720000
         OPCD  X'11'                                                    63780000
LTR      OPND  R,1                                                      63840000
         OPND  R,2                                                      63900000
         OPCD  X'12'                                                    63960000
LCR      OPND  R,1                                                      64020000
         OPND  R,2                                                      64080000
         OPCD  X'13'                                                    64140000
NR       OPND  R,1                                                      64200000
         OPND  R,2                                                      64260000
         OPCD  X'14'                                                    64320000
CLR      OPND  R,1                                                      64380000
         OPND  R,2                                                      64440000
         OPCD  X'15'                                                    64500000
OR       OPND  R,1                                                      64560000
         OPND  R,2                                                      64620000
         OPCD  X'16'                                                    64680000
XR       OPND  R,1                                                      64740000
         OPND  R,2                                                      64800000
         OPCD  X'17'                                                    64860000
LR       OPND  R,1                                                      64920000
         OPND  R,2                                                      64980000
         OPCD  X'18'                                                    65040000
CR       OPND  R,1                                                      65100000
         OPND  R,2                                                      65160000
         OPCD  X'19'                                                    65220000
AR       OPND  R,1                                                      65280000
         OPND  R,2                                                      65340000
         OPCD  X'1A'                                                    65400000
SR       OPND  R,1                                                      65460000
         OPND  R,2                                                      65520000
         OPCD  X'1B'                                                    65580000
MR       OPND  R,1,1                                                    65640000
         OPND  R,2                                                      65700000
         OPCD  X'1C'                                                    65760000
DR       OPND  R,1,1                                                    65820000
         OPND  R,2                                                      65880000
         OPCD  X'1D'                                                    65940000
ALR      OPND  R,1                                                      66000000
         OPND  R,2                                                      66060000
         OPCD  X'1E'                                                    66120000
SLR      OPND  R,1                                                      66180000
         OPND  R,2                                                      66240000
         OPCD  X'1F'                                                    66300000
LPDR     OPND  R,1,(1,3)                                                66360000
         OPND  R,2,(1,3)                                                66420000
         OPCD  X'20'                                                    66480000
LNDR     OPND  R,1,(1,3)                                                66540000
         OPND  R,2,(1,3)                                                66600000
         OPCD  X'21'                                                    66660000
LTDR     OPND  R,1,(1,3)                                                66720000
         OPND  R,2,(1,3)                                                66780000
         OPCD  X'22'                                                    66840000
LCDR     OPND  R,1,(1,3)                                                66900000
         OPND  R,2,(1,3)                                                66960000
         OPCD  X'23'                                                    67020000
HDR      OPND  R,1,(1,3)                                                67080000
         OPND  R,2,(1,3)                                                67140000
         OPCD  X'24'                                                    67200000
LRDR     OPND  R,1,(1,3)                                                67260000
         OPND  R,2,(2,3)                                                67320000
         OPCD  X'25'                                                    67380000
MXR      OPND  R,1,(2,3)                                                67440000
         OPND  R,2,(2,3)                                                67500000
         OPCD  X'26'                                                    67560000
MXDR     OPND  R,1,(2,3)                                                67620000
         OPND  R,2,(1,3)                                                67680000
         OPCD  X'27'                                                    67740000
LDR      OPND  R,1,(1,3)                                                67800000
         OPND  R,2,(1,3)                                                67860000
         OPCD  X'28'                                                    67920000
CDR      OPND  R,1,(1,3)                                                67980000
         OPND  R,2,(1,3)                                                68040000
         OPCD  X'29'                                                    68100000
ADR      OPND  R,1,(1,3)                                                68160000
         OPND  R,2,(1,3)                                                68220000
         OPCD  X'2A'                                                    68280000
SDR      OPND  R,1,(1,3)                                                68340000
         OPND  R,2,(1,3)                                                68400000
         OPCD  X'2B'                                                    68460000
MDR      OPND  R,1,(1,3)                                                68520000
         OPND  R,2,(1,3)                                                68580000
         OPCD  X'2C'                                                    68640000
DDR      OPND  R,1,(1,3)                                                68700000
         OPND  R,2,(1,3)                                                68760000
         OPCD  X'2D'                                                    68820000
AWR      OPND  R,1,(1,3)                                                68880000
         OPND  R,2,(1,3)                                                68940000
         OPCD  X'2E'                                                    69000000
SWR      OPND  R,1,(1,3)                                                69060000
         OPND  R,2,(1,3)                                                69120000
         OPCD  X'2F'                                                    69180000
LPER     OPND  R,1,(1,3)                                                69240000
         OPND  R,2,(1,3)                                                69300000
         OPCD  X'30'                                                    69360000
LNER     OPND  R,1,(1,3)                                                69420000
         OPND  R,2,(1,3)                                                69480000
         OPCD  X'31'                                                    69540000
LTER     OPND  R,1,(1,3)                                                69600000
         OPND  R,2,(1,3)                                                69660000
         OPCD  X'32'                                                    69720000
LCER     OPND  R,1,(1,3)                                                69780000
         OPND  R,2,(1,3)                                                69840000
         OPCD  X'33'                                                    69900000
HER      OPND  R,1,(1,3)                                                69960000
         OPND  R,2,(1,3)                                                70020000
         OPCD  X'34'                                                    70080000
LRER     OPND  R,1,(1,3)                                                70140000
         OPND  R,2,(1,3)                                                70200000
         OPCD  X'35'                                                    70260000
AXR      OPND  R,1,(2,3)                                                70320000
         OPND  R,2,(2,3)                                                70380000
         OPCD  X'36'                                                    70440000
SXR      OPND  R,1,(2,3)                                                70500000
         OPND  R,2,(2,3)                                                70560000
         OPCD  X'37'                                                    70620000
LER      OPND  R,1,(1,3)                                                70680000
         OPND  R,2,(1,3)                                                70740000
         OPCD  X'38'                                                    70800000
CER      OPND  R,1,(1,3)                                                70860000
         OPND  R,2,(1,3)                                                70920000
         OPCD  X'39'                                                    70980000
AER      OPND  R,1,(1,3)                                                71040000
         OPND  R,2,(1,3)                                                71100000
         OPCD  X'3A'                                                    71160000
SER      OPND  R,1,(1,3)                                                71220000
         OPND  R,2,(1,3)                                                71280000
         OPCD  X'3B'                                                    71340000
MER      OPND  R,1,(1,3)                                                71400000
         OPND  R,2,(1,3)                                                71460000
         OPCD  X'3C'                                                    71520000
DER      OPND  R,1,(1,3)                                                71580000
         OPND  R,2,(1,3)                                                71640000
         OPCD  X'3D'                                                    71700000
AUR      OPND  R,1,(1,3)                                                71760000
         OPND  R,2,(1,3)                                                71820000
         OPCD  X'3E'                                                    71880000
SUR      OPND  R,1,(1,3)                                                71940000
         OPND  R,2,(1,3)                                                72000000
         OPCD  X'3F'                                                    72060000
NOPR     OPND  R,2                                                      72120000
         OPCD  X'0700'                                                  72180000
BOR      OPND  R,2                                                      72240000
         OPCD  X'0710'                                                  72300000
BHR      OPND  R,2                      BPR ALSO                        72360000
         OPCD  X'0720'                                                  72420000
BLR      OPND  R,2                      BMR ALSO                        72480000
         OPCD  X'0740'                                                  72540000
BNER     OPND  R,2                      BNZR ALSO                       72600000
         OPCD  X'0770'                                                  72660000
BER      OPND  R,2                      BZR ALSO                        72720000
         OPCD  X'0780'                                                  72780000
BNLR     OPND  R,2                      BNMR ALSO                       72840000
         OPCD  X'07B0'                                                  72900000
BNHR     OPND  R,2                      BNPR ALSO                       72960000
         OPCD  X'07D0'                                                  73020000
BNOR     OPND  R,2                                                      73080000
         OPCD  X'07E0'                                                  73140000
BR       OPND  R,2                                                      73200000
         OPCD  X'07F0'                                                  73260000
STH      OPND  R,1                                                      73320000
         OPND  SX,(1,2),(H,NLIT,MOD)                                    73380000
         OPCD  X'40'                                                    73440000
LA       OPND  R,1                                                      73500000
         OPND  SX,(1,2)                                                 73560000
         OPCD  X'41'                                                    73620000
STC      OPND  R,1                                                      73680000
         OPND  SX,(1,2),(NLIT,MOD)                                      73740000
         OPCD  X'42'                                                    73800000
IC       OPND  R,1                                                      73860000
         OPND  SX,(1,2)                                                 73920000
         OPCD  X'43'                                                    73980000
EX       OPND  R,1                                                      74040000
         OPND  SX,(1,2),(H,ALW)                                         74100000
         OPCD  X'44'                                                    74160000
BAL      OPND  R,1                                                      74220000
         OPND  SX,(1,2),(H,ALW)                                         74280000
         OPCD  X'45'                                                    74340000
BCT      OPND  R,1                                                      74400000
         OPND  SX,(1,2),(H,ALW)                                         74460000
         OPCD  X'46'                                                    74520000
BC       OPND  R,1                                                      74580000
         OPND  SX,(1,2),(H,ALW)                                         74640000
         OPCD  X'47'                                                    74700000
LH       OPND  R,1                                                      74760000
         OPND  SX,(1,2),H                                               74820000
         OPCD  X'48'                                                    74880000
CH       OPND  R,1                                                      74940000
         OPND  SX,(1,2),H                                               75000000
         OPCD  X'49'                                                    75060000
AH       OPND  R,1                                                      75120000
         OPND  SX,(1,2),H                                               75180000
         OPCD  X'4A'                                                    75240000
SH       OPND  R,1                                                      75300000
         OPND  SX,(1,2),H                                               75360000
         OPCD  X'4B'                                                    75420000
MH       OPND  R,1                                                      75480000
         OPND  SX,(1,2),H                                               75540000
         OPCD  X'4C'                                                    75600000
CVD      OPND  R,1                                                      75660000
         OPND  SX,(1,2),(D,NLIT,MOD)                                    75720000
         OPCD  X'4E'                                                    75780000
CVB      OPND  R,1                                                      75840000
         OPND  SX,(1,2),D                                               75900000
         OPCD  X'4F'                                                    75960000
ST       OPND  R,1                                                      76020000
         OPND  SX,(1,2),(F,NLIT,MOD)                                    76080000
         OPCD  X'50'                                                    76140000
N        OPND  R,1                                                      76200000
         OPND  SX,(1,2),F                                               76260000
         OPCD  X'54'                                                    76320000
CL       OPND  R,1                                                      76380000
         OPND  SX,(1,2),F                                               76440000
         OPCD  X'55'                                                    76500000
O        OPND  R,1                                                      76560000
         OPND  SX,(1,2),F                                               76620000
         OPCD  X'56'                                                    76680000
X        OPND  R,1                                                      76740000
         OPND  SX,(1,2),F                                               76800000
         OPCD  X'57'                                                    76860000
L        OPND  R,1                                                      76920000
         OPND  SX,(1,2),F                                               76980000
         OPCD  X'58'                                                    77040000
C        OPND  R,1                                                      77100000
         OPND  SX,(1,2),F                                               77160000
         OPCD  X'59'                                                    77220000
A        OPND  R,1                                                      77280000
         OPND  SX,(1,2),F                                               77340000
         OPCD  X'5A'                                                    77400000
S        OPND  R,1                                                      77460000
         OPND  SX,(1,2),F                                               77520000
         OPCD  X'5B'                                                    77580000
M        OPND  R,1,1                                                    77640000
         OPND  SX,(1,2),F                                               77700000
         OPCD  X'5C'                                                    77760000
D        OPND  R,1,1                                                    77820000
         OPND  SX,(1,2),F                                               77880000
         OPCD  X'5D'                                                    77940000
AL       OPND  R,1                                                      78000000
         OPND  SX,(1,2),F                                               78060000
         OPCD  X'5E'                                                    78120000
SL       OPND  R,1                                                      78180000
         OPND  SX,(1,2),F                                               78240000
         OPCD  X'5F'                                                    78300000
STD      OPND  R,1,(1,3)                                                78360000
         OPND  SX,(1,2),(D,NLIT,MOD)                                    78420000
         OPCD  X'60'                                                    78480000
MXD      OPND  R,1,(2,3)                                                78540000
         OPND  SX,(1,2),D                                               78600000
         OPCD  X'67'                                                    78660000
LD       OPND  R,1,(1,3)                                                78720000
         OPND  SX,(1,2),D                                               78780000
         OPCD  X'68'                                                    78840000
CD       OPND  R,1,(1,3)                                                78900000
         OPND  SX,(1,2),D                                               78960000
         OPCD  X'69'                                                    79020000
AD       OPND  R,1,(1,3)                                                79080000
         OPND  SX,(1,2),D                                               79140000
         OPCD  X'6A'                                                    79200000
SD       OPND  R,1,(1,3)                                                79260000
         OPND  SX,(1,2),D                                               79320000
         OPCD  X'6B'                                                    79380000
MD       OPND  R,1,(1,3)                                                79440000
         OPND  SX,(1,2),D                                               79500000
         OPCD  X'6C'                                                    79560000
DD       OPND  R,1,(1,3)                                                79620000
         OPND  SX,(1,2),D                                               79680000
         OPCD  X'6D'                                                    79740000
AW       OPND  R,1,(1,3)                                                79800000
         OPND  SX,(1,2),D                                               79860000
         OPCD  X'6E'                                                    79920000
SW       OPND  R,1,(1,3)                                                79980000
         OPND  SX,(1,2),D                                               80040000
         OPCD  X'6F'                                                    80100000
STE      OPND  R,1,(1,3)                                                80160000
         OPND  SX,(1,2),(F,NLIT,MOD)                                    80220000
         OPCD  X'70'                                                    80280000
LE       OPND  R,1,(1,3)                                                80340000
         OPND  SX,(1,2),F                                               80400000
         OPCD  X'78'                                                    80460000
CE       OPND  R,1,(1,3)                                                80520000
         OPND  SX,(1,2),F                                               80580000
         OPCD  X'79'                                                    80640000
AE       OPND  R,1,(1,3)                                                80700000
         OPND  SX,(1,2),F                                               80760000
         OPCD  X'7A'                                                    80820000
SE       OPND  R,1,(1,3)                                                80880000
         OPND  SX,(1,2),F                                               80940000
         OPCD  X'7B'                                                    81000000
ME       OPND  R,1,(1,3)                                                81060000
         OPND  SX,(1,2),F                                               81120000
         OPCD  X'7C'                                                    81180000
DE       OPND  R,1,(1,3)                                                81240000
         OPND  SX,(1,2),F                                               81300000
         OPCD  X'7D'                                                    81360000
AU       OPND  R,1,(1,3)                                                81420000
         OPND  SX,(1,2),F                                               81480000
         OPCD  X'7E'                                                    81540000
SU       OPND  R,1,(1,3)                                                81600000
         OPND  SX,(1,2),F                                               81660000
         OPCD  X'7F'                                                    81720000
NOP      OPND  SX,(1,2),(H,ALW)         NOP OPERAND                     81780000
         OPCD  X'4700'                  NOP OP CODE                     81840000
BO       OPND  SX,(1,2),(H,ALW)                                         81900000
         OPCD  X'4710'                                                  81960000
BH       OPND  SX,(1,2),(H,ALW)    BP ALSO                              82020000
         OPCD  X'4720'                                                  82080000
BL       OPND  SX,(1,2),(H,ALW)    BM ALSO                              82140000
         OPCD  X'4740'                                                  82200000
BNE      OPND  SX,(1,2),(H,ALW)                                         82260000
         OPCD  X'4770'                                                  82320000
BE       OPND  SX,(1,2),(H,ALW)                                         82380000
         OPCD  X'4780'                                                  82440000
BNL      OPND  SX,(1,2),(H,ALW)    BNM ALSO                             82500000
         OPCD  X'47B0'                                                  82560000
BNH      OPND  SX,(1,2),(H,ALW)    BNP ALSO                             82620000
         OPCD  X'47D0'                                                  82680000
BNO      OPND  SX,(1,2),(H,ALW)                                         82740000
         OPCD  X'47E0'                                                  82800000
B        OPND  SX,(1,2),(H,ALW)                                         82860000
         OPCD  X'47F0'                                                  82920000
SSM      OPND  S,1                                                      82980000
         OPCD  X'80'                                                    83040000
LPSW     OPND  S,1,(D,ALW)                                              83100000
         OPCD  X'82'                                                    83160000
WRD      OPND  S,1                                                      83220000
         OPND  I,3                                                      83280000
         OPCD  X'84'                                                    83340000
RDD      OPND  S,1,(MOD,NLIT)                                           83400000
         OPND  I,3                                                      83460000
         OPCD  X'85'                                                    83520000
BXH      OPND  R,1                                                      83580000
         OPND  R,2                                                      83640000
         OPND  S,1,(H,ALW)                                              83700000
         OPCD  X'86'                                                    83760000
BXLE     OPND  R,1                                                      83820000
         OPND  R,2                                                      83880000
         OPND  S,1,(H,ALW)                                              83940000
         OPCD  X'87'                                                    84000000
SRL      OPND  R,1                                                      84060000
         OPND  S,1,NLIT                                                 84120000
         OPCD  X'88'                                                    84180000
SLL      OPND  R,1                                                      84240000
         OPND  S,1,NLIT                                                 84300000
         OPCD  X'89'                                                    84360000
SRA      OPND  R,1                                                      84420000
         OPND  S,1,NLIT                                                 84480000
         OPCD  X'8A'                                                    84540000
SLA      OPND  R,1                                                      84600000
         OPND  S,1,NLIT                                                 84660000
         OPCD  X'8B'                                                    84720000
SRDL     OPND  R,1,1                                                    84780000
         OPND  S,1,NLIT                                                 84840000
         OPCD  X'8C'                                                    84900000
SLDL     OPND  R,1,1                                                    84960000
         OPND  S,1,NLIT                                                 85020000
         OPCD  X'8D'                                                    85080000
SRDA     OPND  R,1,1                                                    85140000
         OPND  S,1,NLIT                                                 85200000
         OPCD  X'8E'                                                    85260000
SLDA     OPND  R,1,1                                                    85320000
         OPND  S,1,NLIT                                                 85380000
         OPCD  X'8F'                                                    85440000
STM      OPND  R,1                                                      85500000
         OPND  R,2                                                      85560000
         OPND  S,1,(F,NLIT,MOD)                                         85620000
         OPCD  X'90'                                                    85680000
TM       OPND  S,1                                                      85740000
         OPND  I,3                                                      85800000
         OPCD  X'91'                                                    85860000
MVI      OPND  S,1,(MOD,NLIT)                                           85920000
         OPND  I,3                                                      85980000
         OPCD  X'92'                                                    86040000
TS       OPND  S,1,(MOD,NLIT)                                           86100000
         OPCD  X'93'                                                    86160000
NI       OPND  S,1,(MOD,NLIT)                                           86220000
         OPND  I,3                                                      86280000
         OPCD  X'94'                                                    86340000
CLI      OPND  S,1                                                      86400000
         OPND  I,3                                                      86460000
         OPCD  X'95'                                                    86520000
OI       OPND  S,1,(MOD,NLIT)                                           86580000
         OPND  I,3                                                      86640000
         OPCD  X'96'                                                    86700000
XI       OPND  S,1,(MOD,NLIT)                                           86760000
         OPND  I,3                                                      86820000
         OPCD  X'97'                                                    86880000
LM       OPND  R,1                                                      86940000
         OPND  R,2                                                      87000000
         OPND  S,1,F                                                    87060000
         OPCD  X'98'                                                    87120000
SIO      OPND  S,1,NLIT                                                 87180000
         OPCD  X'9C'                                                    87240000
SIOF     OPND  S,1,NLIT                                                 87260000
         OPCD  X'9C01'                                                  87280000
TIO      OPND  S,1,NLIT                                                 87300000
         OPCD  X'9D'                                                    87360000
CLRIO    OPND  S,1,NLIT                                                 87410000
         OPCD  X'9D01'                                                  87412000
HIO      OPND  S,1,NLIT                                                 87420000
         OPCD  X'9E'                                                    87480000
HDV      OPND  S,1,NLIT                                                 87520000
         OPCD  X'9E01'                                                  87528000
TCH      OPND  S,1,NLIT                                                 87540000
         OPCD  X'9F'                                                    87600000
STNSM    OPND  S,1,(NLIT,MOD)                                  <AM07317 87630000
         OPND  I,3                                                      87650000
         OPCD  X'AC'                                                    87670000
STOSM    OPND  S,1,(NLIT,MOD)                                  <AM07317 87690000
         OPND  I,3                                                      87750000
         OPCD  X'AD'                                                    87780000
SIGP     OPND  R,1                                                      87790000
         OPND  R,2                                                      87800000
         OPND  S,1,NLIT                                                 87802000
         OPCD  X'AE'                                                    87804000
MC       OPND  S,1                                                      87810000
         OPND  I,2                                                      87840000
         OPCD  X'AF'                                                    87870000
LRA      OPND  R,1                                                      87900000
         OPND  SX,(1,2)                                                 87930000
         OPCD  X'B1'                                                    87960000
STIDP    OPND  S,1,(NLIT,MOD)                                  <AM07317 88020000
         OPCD  X'B202'                                                  88060000
STIDC    OPND  S,1,(NLIT,MOD)                                  <AM07317 88100000
         OPCD  X'B203'                                                  88200000
SCK      OPND  S,1                                                      88260000
         OPCD  X'B204'                                                  88320000
STCK     OPND  S,1,(MOD,NLIT)                                           88380000
         OPCD  X'B205'                                                  88440000
SCKC     OPND  S,1,(D,ALW)                                              88443000
         OPCD  X'B206'                                                  88446000
STCKC    OPND  S,1,(D,ALW,NLIT,MOD)                            <AM07317 88449000
         OPCD  X'B207'                                                  88451000
SPT      OPND  S,1,(D,ALW)                                              88453000
         OPCD  X'B208'                                                  88455000
STPT     OPND  S,1,(D,ALW,NLIT,MOD)                            <AM07317 88457000
         OPCD  X'B209'                                                  88464000
SPKA     OPND  S,1,NLIT                                                 88466000
         OPCD  X'B20A'                                                  88466400
IPK      OPCD  X'B20B'                                                  88466800
PTLB     OPCD  X'B20D'                                                  88467000
SPX      OPND  S,1,(F,ALW)                                              88467400
         OPCD  X'B210'                                                  88467800
STPX     OPND  S,1,(F,NLIT,MOD,ALW)                                     88467900
         OPCD  X'B211'                                                  88517900
STAP     OPND  S,1,(H,NLIT,MOD,ALW)                                     88527900
         OPCD  X'B212'                                                  88537900
RRB      OPND  S,1,NLIT                                                 88567900
         OPCD  X'B213'                                                  88617900
STCTL    OPND  R,1                                                      88720000
         OPND  R,2                                                      88728000
         OPND  S,1,(F,MOD,NLIT)                                         88736000
         OPCD  X'B6'                                                    88737600
LCTL     OPND  R,1                                                      88740000
         OPND  R,2                                                      88800000
         OPND  S,1,F                                                    88860000
         OPCD  X'B7'                                                    88920000
CS       OPND  R,1                                                      88970000
         OPND  R,2                                                      88972000
         OPND  S,1,(F,NLIT,MOD,ALW)                                     88974000
         OPCD  X'BA'                                                    88976000
CDS      OPND  R,1,1                                                    88978000
         OPND  R,2,1                                                    88978400
         OPND  S,1,(D,NLIT,MOD,ALW)                                     88978800
         OPCD  X'BB'                                                    88979200
CLM      OPND  R,1                                                      88980000
         OPND  I,2                                                      89040000
         OPND  S,1                                                      89100000
         OPCD  X'BD'                                                    89160000
STCM     OPND  R,1                                                      89220000
         OPND  I,2                                                      89280000
         OPND  S,1,(MOD,NLIT)                                           89340000
         OPCD  X'BE'                                                    89400000
ICM      OPND  R,1                                                      89460000
         OPND  I,2                                                      89520000
         OPND  S,1                                                      89580000
         OPCD  X'BF'                                                    89640000
MVN      OPND  SL,(1,3),(MOD,NLIT)                                      89700000
         OPND  S,2                                                      89760000
         OPCD  X'D1'                                                    89820000
MVC      OPND  SL,(1,3),(MOD,NLIT)                                      89880000
         OPND  S,2                                                      89940000
         OPCD  X'D2'                                                    90000000
MVZ      OPND  SL,(1,3),(MOD,NLIT)                                      90060000
         OPND  S,2                                                      90120000
         OPCD  X'D3'                                                    90180000
NC       OPND  SL,(1,3),(MOD,NLIT)                                      90240000
         OPND  S,2                                                      90300000
         OPCD  X'D4'                                                    90360000
CLC      OPND  SL,(1,3)                                                 90420000
         OPND  S,2                                                      90480000
         OPCD  X'D5'                                                    90540000
OC       OPND  SL,(1,3),(MOD,NLIT)                                      90600000
         OPND  S,2                                                      90660000
         OPCD  X'D6'                                                    90720000
XC       OPND  SL,(1,3),(MOD,NLIT)                                      90780000
         OPND  S,2                                                      90840000
         OPCD  X'D7'                                                    90900000
TR       OPND  SL,(1,3),(MOD,NLIT)                                      90960000
         OPND  S,2                                                      91020000
         OPCD  X'DC'                                                    91080000
TRT      OPND  SL,(1,3)                                                 91140000
         OPND  S,2                                                      91200000
         OPCD  X'DD'                                                    91260000
ED       OPND  SL,(1,3),(MOD,NLIT)                                      91320000
         OPND  S,2                                                      91380000
         OPCD  X'DE'                                                    91440000
EDMK     OPND  SL,(1,3),(MOD,NLIT)                                      91500000
         OPND  S,2                                                      91560000
         OPCD  X'DF'                                                    91620000
SRP      OPND  SL,(1,1),(MOD,NLIT)                                      91680000
         OPND  S,2,NLIT                                                 91740000
         OPND  I,2,(,,DEC)                                              91800000
         OPCD  X'F0'                                                    91860000
MVO      OPND  SL,(1,1),(MOD,NLIT)                                      91920000
         OPND  SL,(2,2)                                                 91980000
         OPCD  X'F1'                                                    92040000
PACK     OPND  SL,(1,1),(MOD,NLIT)                                      92100000
         OPND  SL,(2,2)                                                 92160000
         OPCD  X'F2'                                                    92220000
UNPK     OPND  SL,(1,1),(NLIT,MOD)                                      92280000
         OPND  SL,(2,2)                                                 92340000
         OPCD  X'F3'                                                    92400000
ZAP      OPND  SL,(1,1),(MOD,NLIT)                                      92460000
         OPND  SL,(2,2)                                                 92520000
         OPCD  X'F8'                                                    92580000
CP       OPND  SL,(1,1)                                                 92640000
         OPND  SL,(2,2)                                                 92700000
         OPCD  X'F9'                                                    92760000
AP       OPND  SL,(1,1),(MOD,NLIT)                                      92820000
         OPND  SL,(2,2)                                                 92880000
         OPCD  X'FA'                                                    92940000
SP       OPND  SL,(1,1),(MOD,NLIT)                                      93000000
         OPND  SL,(2,2)                                                 93060000
         OPCD  X'FB'                                                    93120000
MP       OPND  SL,(1,1),(MOD,NLIT)                                      93180000
         OPND  SL,(2,2)                                                 93240000
         OPCD  X'FC'                                                    93300000
DP       OPND  SL,(1,1),(MOD,NLIT)                                      93360000
         OPND  SL,(2,2)                                                 93420000
         OPCD  X'FD'                                                    93480000
         EJECT                                                          93540000
FGT      MIEND                                                          93600000
ESDSECT  DC    HS14'1'                  ESDID FOR A DSECT IS GE THIS    93660000
         JPATCH X5M00,A42               5 % PATCH AREA                  93690000
         END   X5M                      DID I FORGET ANYTHING ?         93720000
./  ADD  SSI=81850031,NAME=IFNX5P
* /* START OF SPECIFICATIONS ****                                       00150000
*02* PROCESSOR = ASSEMBLER                                              00160000
**** END OF SPECIFICATIONS ***/                                         00170000
         LCLC  &TBP                     TEXT BASE POINTER               00180000
         LCLC  &BAL                     LINK REGISTER                   00200000
         LCLC  &OPT                     OUTPUT POINTER                  00300000
         LCLC  &LEN                     FIELD LENGTH                    00400000
         LCLC  &SCR                     SCRATCH REGISTER                00500000
         LCLC  &SCH                     ALSO SCRATCH                    00600000
         LCLC  &COM                     PHASE WORK AREA POINTER         00700000
         LCLC  &IPT                     INPUT FIELD ADDRESS             00800000
         LCLC  &PRN                     PRINT BUFFER POINTER            00900000
         SPACE 5                                                        01000000
&SCR     SETC  'R1'                                                     01100000
&COM     SETC  'R7'                                                     01200000
&OPT     SETC  'R3'                                                     01300000
&IPT     SETC  'R4'                                                     01400000
&BAL     SETC  'R6'                                                     01500000
&TBP     SETC  'R5'                                                     01600000
&LEN     SETC  'R14'                                                    01700000
&PRN     SETC  'R2'                                                     01800000
&SCH     SETC  'R15'                                                    01900000
         SPACE 5                                                        02000000
         JHEAD 'ASSEMBLY PHASE - PRINT ROUTINE',                       X02100000
               PHASEID=X5P,                                            X02200000
               LEVEL=10                                                 02300000
*                                                                     * 02400000
*FUNCTION/OPERATION-                                                  * 02500000
*   THIS ROUTINE IS CALLED TO LIST AND PUNCH ALL TEXT OUTPUT FROM     * 02600000
*   THE ASSEMBLY PORTION OF THE ASSEMBLE. THIS ROUTINE RECONSTRUCTS   * 02700000
*   THE ASSEMBY PORTION OF THE ASSEMBLER. THIS ROUTINE RECONSTRUCTS   * 02800000
*   TEXT FOR THE PRINT FILE FROM THE EDITED TEXT RECORD. IT ALSO USES * 02900000
*   INPUT FROM LEFTHF TO CONSTRUCT THE LEFT HALF OF THE PRINT IMAGE,  * 03000000
*   AND TO BUILD PUNCH RECORD FOR THE PUNCH AND LINK FILES.           * 03100000
*                                                                     * 03200000
*ENTRY POINT-                                                         * 03300000
*        PRN100                                                       * 03400000
*                                                                     * 03500000
*INPUT-                                                               * 03600000
*   EDITED TEXT RECORDS ON JINFILE.                                   * 03700000
*   THE LEFT HALF VALUES IN A 19 BYTE TABLE CALLED LEFT HALF          * 03800000
*                                                                     * 03900000
*OUTPUT-                                                              * 04000000
*   ASSEMBLY LISTINGS TO THE PRINT FILE.                              * 04100000
*   RELOCATABLE OBJECT TEXT TO THE PUNCH AND LINK FILES.              * 04200000
*                                                                     * 04300000
*EXTERNAL ROUTINES                                                    * 04400000
*        JPUTL                                                        * 04500000
*        JPUNCH                                                       * 04600000
*                                                                     * 04700000
*EXITS, NORMAL-                                                       * 04800000
*   EXITS TO THE CALLING ROUTINE THROUGH THE JRETURN MACRO.           * 04900000
*                                                                     * 05000000
*EXITS, ERROR-                                                        * 05100000
*   NONE                                                              * 05200000
*                                                                     * 05300000
*TABLES/WORK AREAS-                                                   * 05400000
*   THE DEFINITION OF LEFTHF IS:                                      * 05500000
*                                                                     * 05600000
*   BYTES BITS  DATA                                                  * 05700000
*                                                                     * 05800000
*                                                                     * 05900000
*   00-03       LOCATION OF ENTRY                                     * 06000000
*   04-11       DC DATA IF ENTRY IS A DC OR CCW                       * 06100000
*   04-05       OPCODE  IF ENTRY IS A MACHINE OPERATION               * 06200000
*               BYTE 05 MAY ALSO CONTAIN LENGTH, REGISTERS, IMEDIATE  * 06300000
*               DATA.                                                 * 06400000
*   06-07       BASE-DISPLACEMENT 1                                   * 06500000
*   08-09       BASE-DISPLACEMENT 2                                   * 06600000
*   10-11       FLAGS                                                 * 06700000
*          0-1  01 ENTRY IS ALIGNMENT.                                * 06800000
*               10 ENTRY IS A DC                                      * 06900000
*               11 ENTRY IS AN EQUATE                                 * 07000000
*           2   BASE-DISPLACEMENT 1 PRESENT                           * 07100000
*           3   BASE-DISPLACEMENT 2 PRESENT                           * 07200000
*          4-7  LENGTH OF ENTRY. (IF ALL BITS ON DON'T PRINT LEFT HALF* 07300000
*   12-15       ADDRESS 1                                             * 07400000
*   16-19       ADDRESS 2                                             * 07500000
*   TOTAL LENGTH OF LEFT HALF IS 20 BYTES                             * 07600000
*                                                                     * 07700000
*ATTRIBUTES-                                                          * 07800000
*   REFRESHABLE                                                       * 07900000
*                                                                     * 08000000
*NOTES                                                                * 08100000
*   NONE                                                              * 08200000
*                                                                     * 08300000
*                                                                     * 08400000
         EJECT                                                          08500000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   08550000
         COPY  JCOMMON                  INCLUDE COMMON DSECT            08600000
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE     08700000
         COPY  JTEXT                    INCLUDED TEXT DSECT             08800000
         PRINT OFF                      DON'T PRINT X5COM COPY CODE     08900000
         COPY  X5COM                    INCLUED ASSEMBLY PHASE COMMON   09000000
         PRINT ON                       PRINT PRINT AREA DSECT          09100000
PRNIMG   DSECT                                                          09200000
*   PRINT WORK AREA                                                     09300000
PRNLN    DS    0CL121                   LENGTH OF PRINT LINE            09400000
CCTRL    DS    C                        CARRIAGE CONTROL                09500000
TITCD    DS    CL8                      TITLE CODE FIELD                09600000
         DS    C                        BLANKS                          09700000
TITLEO   DS    CL100                    TITLE FROM ASSEMBLY             09800000
         DS    2C                       BLANKS                          09900000
PAGEO    DS    CL4                      PAGE FOR HEADING                10000000
PGNO     DS    CL5                      PAGE NUMBER                     10100000
         ORG   PRNIMG                   RE-ORG FOR HEADING LINE 2       10200000
         DS    C                        CARRIAGE CONTROL ALREADY DEFINE 10300000
         DS    2C                       BLANKS                          10400000
SNDHDO   DS    CL56                     HEADING 2                       10500000
         DS    38C                      BLANKS                          10600000
SNDHID   DS    CL24                     ID AND DATE PLUS TIME           10700000
         ORG   PRNIMG                   RE-ORG FOR LIST EACH LINE       10800000
         DS    C                        CARRIAGE CONTROL                10900000
LOCO     DS    CL6                      LOCATION                        11000000
         DS    C                        BLANK                           11100000
OPCDO    DS    CL4                      OP CODE                         11200000
IMEDO    EQU   OPCDO+2                  IMEDIATE, RX, OR LENGTH FIELD   11300000
         DS    C                        BLANK                           11400000
BDPL1    DS    CL4                      BASE-DISPLACEMENT 1             11500000
         DS    C                        BLANK                           11600000
BDPL2    DS    CL4                      BASE-DISPLACEMENT 2             11700000
ADDR1    DS    CL6                      ADDRESS 1                       11800000
ADDR2    DS    CL6                      ADDRESS 2                       11900000
         DS    C                        BLANK                           12000000
STMTNO   DS    CL5                      STATEMENT NUMBER                12100000
GENFLG   DS    C                        GENERATION INDICATION           12200000
NAMFLD   EQU   *                        NAME FIELD                      12300000
COMMENT  DS    0CL80                    COMMENT STATEMENTS COME HERE    12400000
         ORG   PRNIMG                   RE-ORG FOR OPCODE               12500000
OPFLD    DS    0C                       OPCODE FIELD                    12600000
CMNFLD   DS    0C                       COMMENT FIELD                   12700000
OPNFLD   DS    0C                       OPERAND FIELD                   12800000
MRGFLD   DS    0C                       MARGIN OR POST END FIELD        12900000
         ORG   PRNIMG                   REORG FOR ERROR NOTE            13000000
         DS    CL(1+9)                  CARR CTL + BLANK                13100000
ERRLOC   DC    C'*** ERROR ***'                                         13200000
         ORG                                                            13300000
PEJECT   EQU   0                        CARRIAGE CONTROL EJECT          13400000
P1SPACE  EQU   1                        CARRIAGE CONTROL SPACE 1        13500000
P2SPACE  EQU   2                        CARRIAGE CONTROL SPACE 2        13600000
P3SPACE  EQU   3                        CARRIAGE CONTROL SPACE 3        13700000
GENIND   EQU   JPLUS                    MACRO GENERATED INDICATOR       13800000
JTEXTA   DSECT                                                          13900000
         ORG   JTOCO                                                    14000000
OPTR     DSW   CDPTR                    CARD POINTER FLAG               14100000
         ORG   JTOCO                    REORG FOR OTHER POINTERS        14200000
OCPTR    DS    C                        OUTPUT COLUMN POINTER           14300000
LENGTH   DS    C                        FIELD (TRUE) LENGTH             14400000
FIELD    EQU   *                                                        14500000
         EJECT                                                          14600000
CRDSCT   DSECT  ,                       DSECT FOR TXT CARDS             14700000
CRDID    DS    CL4                      12-2-9 PUNCH AND TXT            14800000
         ORG   CRDID+1                  POINT TO AREA THAT NEEDS TRANS  14900000
CRDTR    DS    0CL71                    LENGTH OF TRANSLATE             15000000
         ORG   ,                        ORG BACK TO NEXT BYTE           15100000
         DS    C                        BLANK                           15200000
CRDVLO   DS    CL3                      ADDRESS OF FIRST BYTE OF TEXT   15300000
         DS    2C                       BLANK                           15400000
CRDLEN   DS    CL2                      NUMBER OF BYTES OF TEXT         15500000
         DS    2C                       BLANK                           15600000
CRDESD   DS    CL2                      ESD OF TEXT                     15700000
CRDTXT   DS    CL56                     TEXT - MAXIMUM OF 56 BYTES      15800000
D80      EQU   80                                                       15850000
         PRINT ON                       THAT'S ALL THE COPY CODE        15950000
         EJECT                                                          15960000
         JCSECT (X5P00)                 START MODULE CSECT              16000000
* VS1 RELEASE 2.6 CHANGES                                               16050002
*D301000-305000                                                 OX00222 16060001
*A194100                                                        OX00412 16070001
* VS1 RELEASE 4 CHANGES                                                 16080002
*C608000,617200                                                 OX01764 16090002
*A633900-633940                                                 OX01764 16092002
*A366120,379500,412500                                          OX02266 16094031
*C336200,380000                                                 OX02266 16096031
*A219500                                                       @AZ13709 16096100
*D288000                                                       &AZ13795 16098100
*A633360,633380                                                @AX16963 16098900
*D633380                                                       @AZ29272 16099200
*A633340,633380                                                @AZ29272 16099500
         JMODID ,                       CREAT ROUTINE ID                16100000
         USING JTEXT,R5                 FIXED TEXT USING                16200000
         USING JTEXTA,R4                VARIABLE TEXT USING             16300000
         USING X5COM,R7                 COMMON USING                    16400000
         USING PRNIMG,R2                PRINT BUFFER USING              16500000
PRN100   JSAVE BASE=YES                 SAVE CALLING REGISTERS          16600000
         JENTRY (X5P01=PRN100)          MAKE ENTRY POINT EXTERNAL       16700000
         EJECT                                                          16800000
         GOIF  (JLIST,JDECK,JLINK),     IF DECK, LIST, LINK ARE NOT    X16900000
               OFF=PRNXIT               REQUIRED EXIT                   17000000
         GOIF  LTDECV,ON=PRNXIT         EXIT IF LITERAL REFERENCE       17100000
         CH    R10,=H'4'                IS IT PRNCAR PRINT INDEX        17120000
         BE    PRN110                   YES                             17140000
         SET   SPACECC,OFF              RESET SPACE CONTROL             17160000
PRN110   EQU   *                                                        17180000
         GOIF  JLIST,OFF=INDEX2(R10)    IF LIST IS OF USE BRANCH TABLE X17200000
                                        NUMBER 2                        17300000
         GOIF  PSTMT,OFF=PRN125         IS STATEMENT TO BE PRINTED      17400000
         GOIF  JGEN,ON=PRN150           IS TEXT GENERATED               17500000
         B     INDEX1(R10)              NO, USE BRANCH TABLE NUMBER1    17600000
INDEX1   B     PRNLST                   ENTRY IS FOR STANDARD LISTING   17700000
         B     PRNCAR                   ENTRY IS CARRIAGE CONTROL       17800000
         B     PRNPUN                   ENTRY IS FOR PUNCH STATEMENT    17900000
         B     PRNRPO                   ENTRY IS FOR REPRO CARD         18000000
         B     PRNDC                    ENTRY IS FOR A DC               18100000
         B     PRNERR                   ERROR ROUTINE                   18200000
         B     PRNMNO                   GET BUFFER FOR MNOTE            18300000
INDEX2   B     PUNRTN                   NO LIST - GO CHECK PUNCH OPTION 18400000
         B     PRNXIT                   NO LIST - EXIT                  18500000
         B     PRNPUN                   GO CHECK PUNCH OPTION           18600000
         B     PRNRPO                   GO CHECK PUNCH OPTION           18700000
         B     PUNRTN                   GO CHECK PUNCH OPTION           18800000
         B     PRNXIT                   EXIT IF NOLIST                  18900000
         B     PRNXIT                   EXIT NO MNOTE                   19000000
PRN125   GOIF  PRPP,ON=INDEX1(R10)      WAS PRINT FORCED ?              19030000
         B     INDEX2(R10)              IF NOT USE BRANCH TABLE NR 2    19060000
PRN150   GOIF  PGEN,ON=INDEX1(R10)      CHECK PRINT GEN OPTION IF ON    19100000
         CLI   JTIOP1,JTMNOTE           IS IT AN MNOTE?                 19200000
         BE    INDEX1(R10)              USE INDEX 1 IF MNOTE            19300000
         GOIF  JERR,ON=INDEX1(R10)      USE INDEX 1 IF STMT FLAGGED     19360000
         SET   DCMOP,OFF                CLEAR SWITCH TO BE SURE OX00412 19410001
         B     INDEX2(R10)              ELSE USE INDEX 2                19420000
PRNXIT   SET   (DCSWH,DCCOMP,DCMOP,DCSTRT),OFF  TURN OFF ALL DC FLAGS   19500000
         SET   PRPP,OFF                 RESET FORCED POP PUSH PRINT     19550000
PRN200   XC    DCDATA(L'LEFTHF-L'LOCATN),DCDATA ZERO LEFT HALF          19600000
         SET   COLOVLP,OFF              TURN OVERLAP SWITCH OFF         19700000
PRNLEV   JRETURN ,                      EXIT                            19800000
         EJECT                                                          19900000
PRN800   CVD   &SCR,DWORD1              CONVERT NUMBER TO DECIMAL       20000000
         UNPK  DWORD2(L'STMTNO),DWORD1  UNPACK NUMBER                   20100000
         NC    DWORD2(D5),ZMASK         MASK OUT ZONE BITS              20200000
         LA    &SCR,D4                  GET MAXIMUM BLANKS TO ADD       20300000
         LA    &SCH,DWORD2              POINT TO NUMBER                 20400000
PRN810   CLI   D0(&SCH),J0              IS LEADING DIGIT ZERO           20500000
         BNE   PRN820                   NO                              20600000
         MVI   D0(&SCH),JBLANK          YES,BLANK OUT                   20700000
         LA    &SCH,D1(,&SCH)           BUMP POIMTER                    20800000
         BCT   &SCR,PRN810             GO BACK IF COUNT NOT DEPLETE     20900000
PRN820   BR    R6                       RETURN                          21000000
         SPACE                                                          21100000
PRN600   L     R2,PRNSV1                                                21300000
         JPRINT ,                                                       21400000
         LR    &PRN,R11                 SAVE NEW BUFFER ADDRESS         21500000
         ST    R2,PRNSV1                SAVE PRINT BUFFER POINTER       21600000
         BR    &BAL                     RETURN                          21700000
         EJECT                                                          21800000
PRNLST   BAL   R6,PRINT                 GO GET PRINT LINE               21900000
         SET   SPACECC,OFF              RESET SPACE CONTROL    @AZ13709 21950000
         TM    LHFLGS,DNTPLH            IS LEFT HALF TO BE PRINTED      22000000
         BO    LIST1                    YES, GO PRINT SOURCE            22100000
         UNPK  LHWORK(D15),LEFTHF(D8)         UNPACK THE LEFT HALF OF   22200000
         UNPK  LHWORK+D14(D15),LEFTHF+D7(D8)  THE PRINT LINE FOR        22300000
         UNPK  LHWORK+D28(D15),LEFTHF+D14(D8) PRINTING                  22400000
         NC    LHWORK,ZMASK             MASK OUT ZONE BITS FROM UNPACK  22500000
         GOIF  EOUBIT,ON=PRL300         BRANCH IF ORG EQU OR USING      22550000
         TM    LHFLGS,ENTDC+ENTALN                                      22600000
         MVC   LOCO,ULOCO+D2            MOVE LOCATION TO PRINT LINE     22700000
         BZ    PRL200                   NOT ALIGNMENT OR DC             22800000
         BM    PRL100                   IS ALIGNMENT OR DC              22900000
         B     LIST1                    GO PRINT SOURCE                 23100000
PRL100   IC    R14,LHFLGS               GET LENGTH OF DATA              23200000
         LA    R15,JF                   GET MASK                        23300000
         NR    R14,R15                  AND OUT EXTRA BITS              23400000
         BZ    PRL150                   BRANCH IF NO DATA TO MOVE       23500000
         SLL   R14,D1                   DOUBLE FOR PRINT LENGTH         23600000
         BCTR  R14,0                    GET MOVE LENGTH                 23700000
         EX    R14,MVDCDA               EXECUTE MOVE TO PRINT LINE      23800000
PRL150   EQU   *                        BRANCH LABEL                    23900000
         GOIF  ENTALN,ON=PUNRTN         PRINT COMPLETE FOR ALIGNMENT    24000000
         GOIF  DCSWH,ON=DC100           DC OR CCW                       24100000
         B     LIST1                    GO PRINT CCW                    24200000
MVDCDA   MVC   OPCDO(D0),UOPCOD         EXECUTED MOVE OF DC AND ALIGN   24300000
         EJECT                                                          24400000
PRL200   TM    LHFLGS,DNTPLH            IS LENGTH OF ENTRY ZERO         24500000
         BZ    LIST1                    YES, LEFT HALF COMPLETE         24600000
         MVC   OPCDO,UOPCOD             GET OPCODE AND SECOND BYTE      24700000
         CLI   LHFLGS,D2                IS ENTRY 2 BYTES LONG           24800000
         BE    LIST1                    YES, LEFT HALF COMPLETE         24900000
         MVC   BDPL1,UBASD1             MOVE BASE-DISPLACEMENT 1        25000000
         MVC   ADDR1,UADR1+D2           MOVE ADDRESS 1 TO PRINT         25100000
         CLI   ADDR1,J0                 DOES ADDRES 1 HAVE LEADING 0    25200000
         BNE   PRL250                   NO, LEAVE AS IS                 25300000
         MVI   ADDR1,JBLANK             YES, BLANK OUT ZERO             25400000
PRL250   CLI   LHFLGS,D4                IS ENTRY LENGTH 4               25500000
         BE    LIST1                    YES, LEFT HALF COMPLETE         25600000
         MVC   BDPL2,UBASD2             MOVE BASE-DISPLACEMENT 2        25700000
         MVC   ADDR2,UADR2+D2           MOVE ADDRESS 2 TO PRINT         25800000
         CLI   ADDR2,J0                 DOES ADDRESS 2 HAVE LEADING 0   25900000
         BNE   LIST1                    NO, LEAVE AS IS                 26000000
         MVI   ADDR2,JBLANK             YES, BLANK LEADING ZERO         26100000
         B     LIST1                    GO PRINT RIGHT HALF             26200000
PRL300   MVI   LOCO,X'2F'               ZERO OUT LEFTH HALF             26250000
         MVC   LOCO+D1(D23),LOCO                                        26260000
         MVC   ADDR2-D2(D8),UADR2       MOVE VALUE FOR PRINT            26270000
         CLI   ADDR2-D2,J0              SUPRESS UP TO 3 LEADING ZEROS   26280000
         BNE   PRL400                                                   26290000
         MVI   ADDR2-D2,JBLANK                                          26292000
         CLI   ADDR2-D1,J0                                              26294000
         BNE   PRL400                                                   26296000
         MVI   ADDR2-D1,JBLANK                                          26298000
         CLI   ADDR2,J0                                                 26298400
         BNE   PRL400                                                   26298800
         MVI   ADDR2,JBLANK                                             26299200
PRL400   GOIF  JTORG,NE=LIST1           IS IT ORG ?                     26299600
         MVC   LOCO,ULOCO+D2            YES MOVE LOCTR FOR PRINT        26299700
         B      LIST1                   GO PRINT SOURCE                 26299800
         EJECT                                                          26300000
PRNCAR   LR    R3,R11                   SAVE NUMBER OF LINES TO SPACE   26400000
         GOIF  (R3),NEG=CAR600          IS IT EJECT                     26450000
         GOIF  JLNCT,LNCNT+D2,NE=CAR025  TOP OF PAGE ?                  26500000
         GOIF  SPACECC,OFF=CAR025       FIRST LINE ON NEW PAGE          26510000
         SET   SPACECC,OFF              RESET NEW PAGE INDICATOR        26520000
         LA    R3,D1(R3)                ADD 1 FOR SPACE IN HEADING      26550000
         L     R4,LNCNT                 GET LINES LEFT ON PAGE          26600000
         LA    R4,D1(R4)                COMPENSATE FOR 1 SPACE          26650000
         ST    R4,LNCNT                 SAVE NEW LNCNT                  26660000
CAR025   GOIF  TWASLC,ON=CAR050         BUFF AVAIL SO DO NOT COMP PRT   26670000
         L     R4,LNCNT                 PICK UP LNCNT                   26680000
         LA    R4,D1(R4)                COMPENSATE FOR PRINT            26690000
         ST    R4,LNCNT                 SAVE NEW LNCNT                  26700000
CAR050   BAL   R6,PRINT                 GO GET PRINT LINE               26750000
         L     R4,LNCNT                 PICK UP LNCNT                   26800000
         SR    R4,R3                    SUBTRACT NUMBER OF SPACES       26850000
         BNH   CAR700                   EJECT IF NOT ENOUGH LINES LEFT  26900000
         ST    R4,LNCNT                 STORE REMAINING LINES + COMP    26950000
CAR100   BCT   R3,CAR200                DOES SPACE = 1                  27200000
         B     PRNXIT                   YES, EXIT                       27300000
CAR200   BCT   R3,CAR300                DOES SPACE = 2                  27400000
         MVI   CCTRL,P2SPACE            YES, SET CARRIAGE CONTROL       27500000
         B     PRNXIT                   EXIT                            27600000
CAR300   MVI   CCTRL,P3SPACE            SET CARRIAGE CONTROL = 3        27700000
         BCT   R3,CAR400                STILL MORE LINES TO SPACE       27800000
         B     PRNXIT                   NO, EXIT                        27900000
CAR400   L     R4,LNCNT                 COMP FOR PRT TO PREVENT EJECT   28000000
         LA    R4,D1(R4)                ADD 1 TO COMPENSATE FOR PRINT   28060000
         ST    R4,LNCNT                 STORE REMAINING LINES           28070000
         BAL   R6,PRINT                 PRINT SPACE 3                   28080000
         B     CAR100                   GO CHECK FOR MORE SPACES        28100000
CAR600   GOIF  TWASLC,ON=CAR700         WAS EJECT LAST OP               28200000
         BAL   R6,PRINT                 GET PRINT LINE                  28250000
         GOIF  JLNCT,LNCNT+D2,NE=CAR700 TOP OF PAGE ?                   28300000
         SET   TWASLC,ON                INDICATE BUFFER AVAILABLE       28350000
         B     PRNXIT                   SUPRESS EJECT                   28400000
CAR700   L     R2,PRNSV1                RESTORE BUFFER POINTER          28450000
         BAL   R6,PRNEJT                SET UP RETURN REGISTER          28500000
         B     PRNXIT                   RETURN                          28600000
PRNEJT   ST    R6,PRNSAVE               SAVE RETURN REGISTER            28700000
         SET   TWASLC,ON                INDICATE BUFFER AVAILABLE       28850000
         B     PRT150                   GO PRINT TITLES                 28900000
         EJECT                                                          29000000
* LISTSRC                                                               29100000
*                                                                       29200000
*   THIS ROUTINE RECONSTRUCTS THE SOURCE RECORDS IN THE PRINT AREA      29300000
*   AND CALLS PRINT TO LIST ALL CARDS BUT THE LAST IN THE STATEMENT     29400000
*   THE LAST(OR,MOST OFTEN,THE ONLY)CARD IS PRINTED AFTER PROCESSING    29500000
         SPACE                                                          29600000
LIST1    GOIF  JNOCNT,ON=LST100         DOES STATEMENT GET NUMBER       29700000
         L     R1,STMTN                 GET STATEMENT NUMBER            29800000
         BAL   R6,PRN800                GO CONVERT IT FOR LISTING       29900000
         MVC   STMTNO,DWORD2            MOVE CONVERTED NUMBER TO LIST   30000000
         SPACE                                                          30600000
LST100   SET   COLOVLP,OFF              TURN OFF OVERLAP CHECK BIT      30700000
         XC    COLSAV,COLSAV            ZEROED OUT SAVE AREA            30800000
         LH    R4,JTNMP                 GET NAME POINTER                30900000
         BAL   &BAL,FLDMOVE             MOVE NAME TO OUTPUT             31000000
         SPACE                                                          31100000
*   MOVE OPCODE FIELD                                                   31200000
         SPACE                                                          31300000
         LH    &IPT,JTOCP               GET OPCODE POINTER              31400000
         BAL   &BAL,FLDMOVE             MOVE TO OUTPUT                  31500000
         SPACE                                                          31600000
*   MOVE OPERAND FIELD                                                  31700000
         SPACE                                                          31800000
         LH    &IPT,JTOPP               GET OPERAND POINTER             31900000
         BAL   &BAL,FLDMOVE             MOVE TO OUTPUT                  32000000
         SPACE                                                          32100000
*   MOVE COMMENTS TO OUTPUT                                             32200000
         SPACE                                                          32300000
         LH    &IPT,JTCPR               GET COMMENTS POINTER            32350000
         BAL   &BAL,FLDMOVE             MOVE TO OUTPUT                  32500000
         BAL   &BAL,STRING              INSERT STRINGS INTO PRINT LINE  32520000
         GOIF  JGEN,OFF=LIST6           GOIF NOT GENERATED              32530000
         L     &SCR,DWORD1              GET CONTINUATION COLUMN POINTER 32540000
         CLI   D0(&SCR),JBLANK          IS CONTINUATION COL BLANK       32600000
         BE    LIST6                    YES                             32620000
         MVI   D0(&SCR),JBLANK          NO, MAKE IT SO                  32640000
         SPACE                                                          32700000
LIST6    GOIF  DCSWH,ON=DC300           IS ENTRY A DC                   32800000
         GOIF  ENTDC,ON=PRNXIT          EXIT IF DATA NO TO BE PUNCHED   32900000
         TM    LHFLGS,DNTPLH            ANY PUNCH DATA                  33000000
         BM    PUNRTN                   YES, GO PACK IN PUNCH CARD      33100000
         B     PRNXIT                   RETURN TO MAINLINE              33200000
         EJECT                                                          33300000
* FLDMOVE                                                               33400000
*                                                                       33500000
*   THIS ROUTINE MOVES THE NAME,OPERATION,OPERAND OR COMMENTS FIELD     33600000
*   TO THE PRINT AREA.IF THE FIELD IS TOO LONG TO FIT INTO THE CURRENT  33700000
*   LINE PART OF THE FIELD IS MOVED AND THE LINE IS PRINTED.THIS        33800000
*   PROCESS CONTINUES UNTIL THE WHOLE FIELD IS MOVED.                   33900000
*   CALL BY BAL BAL,FLDMOVE WITH REG IPT CONTAINIG A POINTER TO THE     34000000
*   FIELD GROUP.                                                        34100000
         SPACE                                                          34200000
FLDMOVE  ST    &BAL,FLDSAVE             SAVE LINK REGISTER              34300000
         AR    &IPT,&TBP                TURN POINTER INTO ADDRESS       34400000
         GOIF  CDPTR,OFF=FLD1           TEST IF CARD PTR,GO IF NOT      34500000
         SPACE                                                          34600000
*   HANDLE CARD POINTER                                                 34700000
         SPACE                                                          34800000
         MVC   CARDP,OPTR               SAVE CARD POINTER               34900000
         SET   CDPTR1,OFF               TURN OFF FLAG BIT               35000000
FLD01    SR    &SCR,&SCR                CLEAR REGISTER                  35100000
         IC    &SCR,CARDP               GET CARD POINTER                35200000
         SH    &SCR,CDSTMT              SUBTR CURRENT CARD-WITHIN-STMT  35300000
         BNH   FLD02                    WE ARE DONE IF NOT IN NEW CARD  35400000
         BAL   &BAL,STRING              INSERT STRINGS INTO PRINT LINE  35500000
         BAL   &BAL,PRINT               PRINT CURRENT CARD              35600000
         XC    COLSAV,COLSAV            CLEAR SAVE AREA FOR COLUMN PTR  35700000
         SET   COLOVLP,OFF              TURN OFF OVERLAP CHECK BIT      35800000
         B     FLD01                    GO TEST NEXT CARD               35900000
FLD02    LA    &IPT,L'OPTR(,&IPT)       POINT TO COLUMN POINTER         36000000
         SPACE                                                          36100000
FLD1     SR    &OPT,&OPT                CLEAR REGOSTER                  36200000
         IC    &OPT,OCPTR               GET OUTPUT COLUMN POINYER       36300000
         SR    &LEN,&LEN                CLEAR THIS ONT TOO              36400000
         IC    &LEN,LENGTH              GET FIELD LENGTH                36500000
         GOIF  (R14),NOTZERO=FLD10      CHECK IF OPERAND LENGTH ZERO    36600000
         GOIF  JPSOP,OFF=FLD1A          CAN IT BE ICTL                  36605000
         GOIF  JTICTL,EQ=FLD2           ICTL STATEMENT ?                36610000
FLD1A    GOIF  JPRGICTL,OFF=FLD2        USE STD ICTL            OX02266 36612031
         LH    &SCR,JENDCL              NOT ICTL -GET END COL-1 OX02266 36620031
         B     FLD3                     GO GET OUT                      36630000
FLD2     LA    &SCR,D7*D10+D1           USE STANDARD ICTL               36640000
FLD3     LA    &SCR,NAMFLD(&SCR)        POINT TO END COLUMN             36650000
         ST    &SCR,DWORD1              SAVE IT                         36660000
         L     R6,FLDSAVE               RESTORE LINKAGE REGISTER        36700000
         BR    R6                       RETURN                          36800000
         SPACE                                                          36900000
*   LEN NOW CONTAINS TRUE LENGTH,OPT OUTPUT COLUMN POINTER              37000000
         SPACE                                                          37100000
FLD10    BCTR  &LEN,0                   DECREASE TO MOVE LENGTH         37200000
         GOIF  COLOVLP,OFF=FLD20        BRANCH IF OVERLAP BIT IS OFF    37300000
         CH    R3,COLSAV                DOES FIELD OVERLAP?             37400000
         BNL   FLD20                    NO,BRANCH AROUND                37500000
         LH    R3,COLSAV                GET COLUMN PTR SAVED            37600000
         SPACE                                                          37700000
FLD20    SET   COLOVLP,ON               TURN OVERLAP CHECK BIT ON       37800000
         GOIF  JPSOP,OFF=FLD22          CAN IT BE ICTL                  37850031
         GOIF  JTICTL,EQ=FLD30          ICTL STATEMENT?                 37900000
FLD22    GOIF  JPRGICTL,OFF=FLD30       USE STD ICTL            OX02266 37950031
         LH    &SCR,JENDCL              NOT ICTL -GET END COL-1 OX02266 38000031
         SPACE                                                          38100000
FLD25    SR    &SCR,&OPT                GET MAXIMUM MOVE LENGTH         38200000
         BM    FLD30                    TRY STD ICTL                    38250000
FLD27    LA    R15,D2(R3,R14)           COMPUTE NEXT FIELD PTR          38320000
         STH   R15,COLSAV               SAVE COLUMN PTR FOR NXT FIELD   38400000
         CR    &LEN,&SCR                WILL FIELD FIT INTO THIS LINE   38500000
         LA    &OPT,NAMFLD-D1(&OPT)                                     38600000
         BH    FLD100                   NO                              38700000
         EX    &LEN,MOVE                YES,MOVE IT                     38800000
         L     &BAL,FLDSAVE             RESTORE LINK REGISTER           38900000
         LA    R1,D1(R1,R3)             COMPUTE END COL + 1             38930000
         ST    R1,DWORD1                SAVE IT                         38960000
         BR    &BAL                     RETURN                          39000000
FLD30    LA    R1,D7*D10+D1             USE STD ICTL END COL            39100000
         SR    R1,R3                    NOW TRY MAX MOVE LENGTH         39120000
         BNM   FLD27                    BRANCH IF OK                    39140000
         LA    &OPT,NAMFLD-D1(&OPT)     PT TO PRINT POSITION            39160000
         LA    R6,D1(R1,R3)             COMPUTE END COLUMN + 1          39180000
         LH    R1,=H'-1'                SET TO -1 (0=1 BYTE,-1=NO BYTE) 39200000
         B     FLD101                   NOW SKIP MOVE                   39220000
FLD100   EX    &SCR,MOVE               MOVE PART OF FIELD               39300000
         LA    R6,D1(R1,R3)             COMPUTE END COLUMN + 1          39360000
FLD101   SR    &LEN,&SCR                GET (TRUE) LENGTH OF REMAINDER  39420000
         STH   &LEN,HWD                 SAVE LENGTH                     39500000
         LA    &IPT,D1(&SCR,&IPT)      GET ADDR OF REMAINING PART       39600000
         LR    R1,R6                    TRANSFER END COLUMN+1 TO R1     39700000
         GOIF  LITRSW,ON=FLD102         SKIP IF LITERAL                 39800000
         ST    R1,DWORD1                SAVE IT                         39900000
         BAL   &BAL,STRING              INSERT STRINGS INTO PRINT LINE  40000000
         L     R1,DWORD1                RESTORE R1                      40100000
         SPACE                                                          40200000
FLD102   CLI   D0(R1),JBLANK            IS IT BLANK?                    40300000
         BNE   FLD105                   BRANCH AROUND IF NOT EQUAL      40400000
         MVI   D0(R1),JX                PUT IN CONTINUATION CHAR        40500000
         SPACE                                                          40600000
FLD105   GOIF  DCSWH,ON=DC500           IS ENTRY A DC                   40700000
         SPACE                                                          40800000
FLD110   BAL   &BAL,PRINT               PRINT COMPLETED LINE            40900000
         SPACE                                                          41000000
FLD120   LH    &LEN,HWD                 GET LENGTH AGAIN                41100000
         GOIF  JTICTL,EQ=FLD40          ICTL STATEMENT?                 41200000
         GOIF  JPRGICTL,OFF=FLD40       USE STD ICTL            OX02266 41250031
         LH    &OPT,JCNTCL              SET OUTPUT COL PTR=CONT COL     41300000
         SPACE                                                          41400000
FLD35    XC    COLSAV,COLSAV            ZEROED OUT SAVE AREA            41500000
         SET   COLOVLP,OFF              TURN OFF OVERLAP CHECK BIT      41600000
         B     FLD10                    GO MOVE REMAINING PART          41700000
FLD40    LA    R3,D16                   PUT 16 IN R3                    41800000
         B     FLD35                    GO BACK                         41900000
         EJECT                                                          42000000
* STRING                                                                42100000
*                                                                       42200000
*   EXTRACT STRINGS FROM TEXT RECORD AND INSERT THEM INTO THE           42300000
*   CURRENT PRINT LINE.                                                 42400000
*   PARAMETER - STRADR CONTAINS ADDRESS OF CURRENT STRING GROUP.THIS    42500000
*   FIELD IS UPDATED HERE,AS IS THE CARD-WITHIN-STATEMTNT COUNTER.      42600000
         SPACE                                                          42700000
STRING   LH    &SCR,CDSTMT              GET CARD-WITHIN-STMT COUNTER    42900000
         LA    &SCR,D1(,&SCR)           AND                             43000000
         STH   &SCR,CDSTMT              UPDATE IT                       43100000
         GOIF  JGEN,OFF=STR050          IS STATEMENT GENERATED          43200000
         MVI   GENFLG,GENIND            YES, INDICATE AS SUCH           43300000
         SPACE                                                          43500000
STR050   L     &SCH,STRADR              GET STRING GROUP ADDRESS        43600000
         DROP  &IPT                                                     43700000
         USING JTEXTA,&SCH              DON'T DESTROY IPT-USE SCH       43800000
         CLI   JTSTC,D0                 ANY STRINGS                     43900000
         BER   &BAL                     NO                              44000000
         SR    &SCR,&SCR                ZERO REGISTER                   44100000
         IC    &SCR,JTSTC               GET STRING COUNT                44200000
         LA    &SCH,JTSTO               POINT TO OUTPUT POINTER         44300000
STR100   SR    &LEN,&LEN                CLEAR REGISTER                  44400000
         IC    &LEN,JTSTL2              GET STRING LENGTH               44500000
         BCTR  &LEN,0                   DECREASE TO MOVE LENGTH         44600000
         SR    &OPT,&OPT                CLEAR REGISTER                  44700000
         IC    &OPT,JTSTO2              GET OUTPUT POINTER              44800000
         LA    &OPT,NAMFLD-D1(&OPT)     MAKE IT AN ABS ADDRESS          44900000
         EX    &LEN,STRMOVE             MOVE STRING TO OUTPUT           45000000
         LA    &SCH,JTSTR2+D1(&LEN)     POINT TO NEXT STRING            45100000
         BCT   R1,STR100                GO BACK IF SECOND STRING        45200000
         SPACE                                                          45300000
         ST    &SCH,STRADR              STORE UPDATED STRING POINTER    45400000
         DROP  &SCH                                                     45500000
         USING JTEXTA,&IPT              BACK TO NORMAL REGISTER         45600000
         BR    &BAL                     RETURN                          45700000
         EJECT                                                          45800000
* PRINT                                                                 45900000
*                                                                       46000000
*   THE PRINT BUFFER CONTENTS ARE PRINTED.IF THAT LINE WAS THE          46100000
*   THE LAST ON A PAGE,HEADINGS ARE WRITTEN ON NEXT PAGE.               46200000
         SPACE                                                          46300000
PRINT    ST    &BAL,PRNSAVE             SAVE LINK REGISTER              46500000
         GOIF  TWASLC,OFF=PRT120        WAS LAST STATEMENT TITLE        46600000
         L     R2,PRNSV1                RESTORE PRINT BUFFER POINTER    46700000
         SET   TWASLC,OFF               TURN OFF TITLE INDICATOR        46800000
         BR    R6                       PRINT LINE ALREADY  AVAILABLE   46900000
PRT120   BAL   &BAL,PRN600              GO GET PRINT LINE               47000000
         L     R1,LNCNT                 GET LINE COUNT                  47100000
         BCT   R1,PRT200                DECREMENT AND BRANCH IF NOT 1   47200000
PRT150   MVI   CCTRL,PEJECT             EJECT CARRIAGE CONTROL          47300000
         MVC   TITCD,JDECKID            MOVE DECK ID TO TITLE           47400000
         MVC   TITLEO,JTITLE            MOVE TITLE                      47500000
         MVC   PAGEO,PAGE               MOVE PAGE                       47600000
         LH    R1,JPAGENO               GET PAGE COUNT                  47700000
         LA    R1,D1(,R1)               INCREMENT BY 1                  47800000
         STH   R1,JPAGENO               STORE NEW COUNT                 47900000
         BAL   R6,PRN800                GO CONVERT IT FOR PRINT         48000000
         MVC   PGNO,DWORD2              MOVE TO PRINT LINE              48100000
         BAL   R6,PRN600                GO PRINT AND GET NEXT LINE      48200000
         MVI   CCTRL,P3SPACE            CARRIAGE CONTROL 3 SPACES       48300000
         MVC   SNDHDO,SNDHDR            GET SECOND HEADER               48400000
         MVC   SNDHID,JLVTMDT           GET MODULE ID AND DATE          48500000
         BAL   R6,PRN600                GO PRINT                        48600000
         MVI   CCTRL,P2SPACE            CARRIAGE CONTROL 2 SPACES       48700000
         SET   SPACECC,ON               INDICATE TOP OF PAGE            48750000
         LH    R1,JLNCT                 GET NEW LINE COUNT              48800000
PRT200   ST    R1,LNCNT                 STORE LINES LEFT ON PAGE        48900000
         L     &BAL,PRNSAVE             RESTORE LINK REGISTER           49000000
         BR    &BAL                     ..AND RETURN                    49100000
         EJECT                                                          49200000
PRNERR   GOIF  PERR,ON=PRNXIT           GO IF NOT FIRST ERR THIS STMT   49300000
         BAL   R6,PRINT                 GET POINTER TO PRINT BUFFER     49400000
         SET   PERR,ON                  REMEMBER ERROR HAS OCCURRED     49500000
         MVC   ERRLOC,ERRNOTE           MOVE ***ERROR*** TO PRINT LINE  49600000
         B     PRNXIT                   EXIT                            49700000
         SPACE 5                                                        49800000
PRNMNO   BAL   R6,PRINT                 GET PRINT BUFFER                49900000
         TM    JTFLGB,JGEN              IS IT GENERATED                 49950000
         BZ    PRNMNO1                  BRANCH AROUND IF NOT            49960000
         MVI   GENFLG,GENIND            PUT IN FLAG                     49970000
         SPACE                                                          49980000
PRNMNO1  L     R1,STMTN                 GET STATEMENT NUMBER            50000000
         BAL   R6,PRN800                CONVERT IT FOR PRINTING         50100000
         LR    R11,R2                   RET BUFFER ADDR TO PRINT RTN    50150000
         B     PRN200                   RETURN TO MNOTE ROUTINE         50200000
         EJECT                                                          50300000
PRNDC    SET   DCSWH,ON                 TURN ON DC SWITCH               50400000
         L     R4,OPNADR                PICK UP OPERAND POINTER         50500000
         GOIF  DCMOP,ON=DC200           IS DC COMPLETE                  50600000
         GOIF  DCCOMP,ON=DC220          IS PRINT OF RECORD COMPLETE     50700000
         B     PRNLST                   GO PRINT LEFT HALF              50800000
DC100    GOIF  DCCOMP,ON=PUNRTN              IS LIST OF RECORD COMPLETE 50900000
         GOIF  DCSTRT,OFF=LIST1,ELSE=FLD120  IS THIS FIRST LINE OF DC   51000000
DC200    GOIF  DCCOMP,ON=PRNXIT,ELSE=FLD110  EXIT IF LIST COMPLETE      51100000
DC220    GOIF  PDATA,OFF=PUNRTN,ELSE=PRNLST  IS PRINT DATA ON           51200000
DC300    GOIF  DCMOP,ON=PRNXIT               IS STATEMENT COMPLETED     51300000
         SET   DCCOMP,ON                     TURN ON LIST COMPLETE      51400000
         B     PUNRTN                        GO PUNCH DATA              51500000
DC500    SET   DCSTRT,ON                SET START LIST OF RECORD        51600000
         ST    R4,OPNADR                SAVE OPERAND POINTER            51700000
         GOIF  DCMOP,ON=FLD110          ARE WE MOPPING UP?              51800000
         TM    DCEVSW,DSSW+DXDSW        DS OR DXD?                      51900000
         BZ    PUNRTN                   ID DC GO TO PUNCH RTN           52000000
         B     PRN200                   EXIT                            52100000
         EJECT                                                          52200000
PUNRTN   GOIF  (JDECK,JLINK),NONE=PRN200 EXIT IF DECK AND LINK BOTH OFF 52300000
         TM    EESDI,BIT1+BIT2+BIT3     ARE WE IN DSECT OR COM          52400000
         BNZ   PRN200                   YES, NO PUNCH                   52500000
         TM    LHFLGS,DNTPLH            IS THERE ANY DATA TO PUNCH      52600000
         BNM   PRN200                   NO, EXIT                        52700000
         L     R2,CRDPTR                GET POINTER TO PUNCH RECORD     52800000
         USING CRDSCT,R2                ESTBLISH USING FOR PUNCH RECORD 52900000
         LH    R1,CRDCNT                GET COUNT OF BYTES IN TEXT CARD 53000000
         LTR   R1,R1                    IS IT ZERO                      53100000
         BZ    PUN300                   YES GO GET A NEW CARD           53200000
         CH    R1,=H'56'                IS CARD FULL                    53300000
         BE    PUN300                   YES GO GET A NEW CARD           53400000
         CLC   CRDVAL,LOCATN            HAS LOCATION COUNTER JUMPED     53500000
         BNE   PUN500                   NO, GO PUNCH NEW RECORD         53600000
         CLC   CRDESD,EESDI             DID ESD ID CHANGE               53630000
         BNE   PUN500                   YES                             53660000
PUN100   IC    R10,LHFLGS               GET LENGTH OF PUNCH DATA        53700000
         N     R10,=A(X'0F')            CLEAR EXTRA BITS                53800000
         AR    R1,R10                   COMPUTE NEW LENGTH              53900000
         CH    R1,=H'56'                WILL NEW DATA FIT IN THIS CARD  54000000
         BH    PUN400                   NO GO SPLIT IT                  54100000
         AH    R2,CRDCNT                POINT PAST TEXT ALREADY IN CARD 54200000
         LR    R11,R10                  SAVE LENGTH OF DATA             54300000
         BCTR  R10,0                    GET MOVE LENGTH OF INPUT        54400000
         EX    R10,CRDMVC               MOVE DATA TO CARD               54500000
         A     R11,CRDVAL               ADD TO CARD LOCATION COUNTER    54600000
         ST    R11,CRDVAL               SAVE NEW ADDRESS                54700000
         STH   R1,CRDCNT                SAVE COUNT OF TEXT BYTES        54800000
         B     PRN200                   EXIT                            54900000
PUN500   MVC   CRDLEN,CRDCNT            MOVE TEXT LENGTH                54950000
PUN300   MVC   CRDVAL,LOCATN            UPDATE CARD LOCATION COUNTER    55000000
         BAL   R6,PUN800                GO PUNCH CARD                   55100000
         SR    R1,R1                    ZERO CARD BYTE COUNT            55200000
         XC    CRDCNT,CRDCNT            INITIALIZE BYTE COUNT           55300000
         B     PUN100                   CONTINUE OUTPUT                 55400000
PUN400   LR    R4,R1                    SAVE BYTE COUNT                 55500000
         SH    R4,=H'56'                GET BYTES OVER FIT              55600000
         SR    R10,R4                   GET NUMBER OF BYTES THAT FIT    55700000
         LR    R11,R10                  SAVE COUNT                      55800000
         STH   R10,CRDLAC               SAVE NUMBER BYTES PUT THIS CARD 55900000
         BCTR  R10,0                    GET MOVE LENGTH                 56000000
         AH    R2,CRDCNT                ADD CARD COUNT                  56100000
         EX    R10,CRDMVC               MOVE PART OF INPUT TO TEXT CARD 56200000
         A     R11,CRDVAL               COMPUTE ADDRESS OF NEXT CARD    56300000
         ST    R11,CRDVAL               SAVE NEW ADDRESS                56400000
         BAL   R6,PUN800                GO PUNCH CARD                   56500000
         LH    R10,CRDLAC               GET BYTES PUT LAST CARD         56600000
         AR    R10,R7                   STEP PAST BYTES ALREADY PUT     56700000
         LR    R11,R4                   SAVE LENGTH OF DATA             56800000
         BCTR  R4,0                     GET MOVE LENGTH OF DATA         56900000
         EX    R4,CRDMV2                MOVE REMAINING OUTPUT DATA      57000000
         STH   R11,CRDCNT               SAVE NEW BYTE COUNT             57100000
         A     R11,CRDVAL               COMPUTE NEXT INPUT ADDRESS      57200000
         ST    R11,CRDVAL               SAVE NEW ADDRESS                57300000
         B     PRN200                   EXIT                            57400000
PUN800   JPUNCH SEQ=YES                 PUNCH RECORD                    57700000
         LR    R2,R11                   LOAD TEXT POINTER               57800000
         MVC   CRDID,TXTID              MOVE IDENTIFIER TO TEXT CARD    57900000
         TR    CRDTR,JTRTABLE           TRANSLATE CARD TO EXTERNAL      58000000
         ST    R11,CRDPTR               STORE IT FOR LATER USE          58100000
         MVC   CRDVLO,CRDVAL+D1         MOVE VALUE TO PRINT             58200000
         MVC   CRDESD,EESDI             MOVE TXT ESD                    58300000
         MVC   CRDLEN,=H'56'            MOVE TXT LENGTH                 58400000
         BR    R6                       RETURN TO CALLING LOCATION      58500000
TXTID    JGENIN '2TXT'                  INTERNAL TEXT ID                58600000
CRDMVC   MVC   CRDTXT(0),DCDATA         EXECUTED MOVE TO TXT CARD       58700000
         DROP  R7                       INVALIDATE THIS REGISTER        58800000
         USING X5COM,R10                ESTABLISH NEW USING             58900000
CRDMV2   MVC   CRDTXT(0),DCDATA         EXECUTED MOVE TO NEW CARD       59000000
         DROP  R10                      INVALIDATE THIS REGISTER        59100000
         USING X5COM,R7                 RE-ESTABLISH COMMON USING       59200000
         EJECT                                                          59300000
PRNPUN   GOIF  (JDECK,JLINK),NONE=PRN200  LINK OR DECK MUST BE ON       59400000
         NC    CRDCNT,CRDCNT            IS BYTES IN CARD ZERO           59500000
         BZ    PPUN10                   YES FORGET TEXT CARD            59600000
         L     R2,CRDPTR                POINT TO OUTPUT CARD            59700000
         MVC   CRDLEN,CRDCNT            MOVE NUMBER OF BYTES TO OUTPUT  59800000
         XC    CRDCNT,CRDCNT            ZERO BYTE COUNT                 59900000
PPUN10   LR    R6,R11                   SAVE PUNCH BYTE COUNT           60000000
         JPUNCH SEQ=NO                  GET PUNCH BUFFER                60100000
         BCTR  R6,0                     GET MOVE LENGTH                 60200000
         EX    R6,MOVPUN                MOVE DATA TO PUNCH BUFFER       60300000
         B     PRN200                   EXIT                            60400000
         EJECT                                                          60500000
PRNRPO   GOIF  JLIST,OFF=PRP030         LIST MUST BE ON         OX01764 60800002
         GOIF  PSTMT,OFF=PRPO25         AND PRINT MUST BE ON            60900000
         BAL   R6,PRINT                 GO GET PRINT BUFFER             61000000
         GOIF  JNOCNT,ON=PRP005         IF NOCOUNT ON THEN SKIP         61100000
         L     R1,STMTN                 GET STATEMENT NUMBER            61200000
         BAL   R6,PRN800                CONVERT IT                      61300000
         MVC   D32+D3(D5,R2),DWORD2     MOVE STMT NUM TO PRINTLINE      61400000
         SPACE                                                          61500000
PRP005   LH    R4,JTCPR                 GET COMMENTS POINTER            61600000
         AR    R4,R5                    POINT TO COMMENT FIELD          61650000
         MVC   D32+D9(D80,R2),D2(R4)    MOVE PRINT DATA OF REPRO        61660000
PRP007   GOIF  REPCARD,OFF=PRPO10       PRINT ONLY REPRO CARD   OX01764 61720002
         SET   REPCARD,OFF              YES, RESET BIT AND EXIT         61780000
         GOIF  JPRONLY,ON=PRN200        EXIT IF PRINT ONLY              61840000
         USING CRDSCT,R2                ESTABLISH PUNCH CARD USING      61900000
PRPO10   GOIF  (JDECK,JLINK),NONE=PRN200  ONE AT LEAST MUST BE ON       62000000
         GOIF  JSYSGEN,OFF=PRP015       DO WE NEED TO TEST              62010000
         GOIF  JPRESD,ON=PRN200         IF PRE ESD - EXIT               62050000
PRP015   NC    CRDCNT,CRDCNT            IS BYTES IN CARD ZERO           62100000
         BZ    PRPO20                   YES, NO CARD IN BUFFER          62200000
         L     R2,CRDPTR                POINT TO OUTPUT CARD            62300000
         MVC   CRDLEN,CRDCNT            MOVE NUMBER OF BYTES TO OUTPUT  62400000
         XC    CRDCNT,CRDCNT            ZERO BYTE COUNT                 62500000
PRPO20   JPUNCH SEQ=NO                  GET PUNCH BUFFER                62600000
         MVC   D0(D80,R11),D2(R4)       MOVE REPRO DATA                 62650000
         B     PRN200                   EXIT                            63300000
PRPO25   SET   REPCARD,OFF              CLEAR REP PRT ONLY IND          63332000
         GOIF  JSYSGEN,OFF=PRP027       IF PHASE 4 WAS SKIPPED @AZ29272 63336000
         GOIF  JPRONLY,ON=PRN200        EXIT IF PRINT ONLY     @AX16963 63337000
PRP027   EQU   *                                               @AZ29272 63338000
         LH    R4,JTCPR                 GET COMMENT POINTER             63340000
         AR    R4,R5                    POINT TO COMMENT FIELD          63360000
         B     PRPO10                   GO PUNCH                        63380000
PRP030   LH    R4,JTCPR                 GET COMMENT POINTER     OX01764 63390002
         AR    R4,R5                    POINT TO COMMENT FIELD  OX01764 63392002
         B     PRP007                                           OX01764 63394002
         EJECT                                                          63400000
MOVPUN   MVC   D0(0,R11),D0(R4)         EXECUTED MOVE OF PUNCH CARD     63500000
MOVE     MVC   D0(0,&OPT),FIELD         EXECUTED MOVE-FIELD TO PRINT    63600000
         DROP  &IPT                                                     63700000
         USING JTEXTA,&SCH              USE SCH FOR STRING MOVE         63800000
STRMOVE  MVC   D0(0,&OPT),JTSTR2        EXECUTED - STRING TO OUTPUT     63900000
PAGE     JGENIN 'PAGE'                                                  64000000
SNDHDR   JGENIN 'LOC  OBJECT CODE    ADDR1 ADDR2  STMT   SOURCE STATEMEX64100000
               NT'                      SECOND HEADER IN INTERNAL CODE  64200000
ERRNOTE  JGENIN '*** ERROR ***'         TOO WELL KNOWN TO BE EXPLAINED  64300000
ZMASK    DC    40X'0F'                  MASK TO REMOVE ZONE BITS        64500000
         JPATCH X5P00,8A2               5% PATCH AREA                   64650000
         END                                                            64700000
./  ADD  SSI=71710258,NAME=IFNX5V
X5V      XEVAL                                                          30000000
         JPATCH X5V00,684                                               30050000
         END                                                            60000000
./  ADD  SSI=81850032,NAME=IFNX6A
         JHEAD 'POST PROCESSOR PHASE',                                 *00070000
               PHASEID=X6A,                                            *00140000
               LEVEL=10                                                 00210000
*FUNCTION/OPERATION-                                                  * 00280000
*   THE POST PROCESSOR PHASE SORTS, FORMATS, AND WRITES ON PUNCH/LINK * 00350000
*   FILE(S) THE RELOCATION DICTIONARY (RLD) TO THE DESIRED FORMAT     * 00420000
*   REQUIRED BY THE LINKAGE EDITOR.  THE PHASE ALSO SORTS, FORMATS,   * 00490000
*   AND WRITES OUT ON PRINT FILE THE SYMBOL CROSS REFERENCE, AND THE  * 00560000
*   LITERAL CROSS REFERENCE.                                          * 00630000
*                                                                     * 00700000
*ENTRY POINT-                                                         * 00770000
*        PPENT                                                        * 00840000
*                                                                     * 00910000
*INPUT-                                                               * 00980000
*   INPUT FROM 'JINFILE'.                                             * 01050000
*   RLD RECORDS FORMAT --                                             * 01120000
*   FIELD             BYTES                                           * 01190000
*   RECORD LENGTH     2                                               * 01260000
*   (NOT USED)        2                                               * 01330000
*   RECORD TYPE       2                                               * 01400000
*   POSITION ESD/ID   2                                               * 01470000
*   RELOCATION ESD/ID 2                                               * 01540000
*   SYMBOL ADDRESS    3                                               * 01610000
*   FLAG              1                                               * 01680000
*   BITS                                                              * 01750000
*   0-1  00                                                           * 01820000
*   2-3  00  A-, Y-, Q-TYPE ADDRESS CONSTANT                          * 01890000
*        01  V TYPE ADDRESS CONSTANT                                  * 01960000
*        11 CXD                                                       * 02030000
*   4-5      LENGTH OF ADDRESS CONSTANT MINUS ONE                     * 02100000
*   6        EXD SIGN 0=PLUS, 1=MINUS                                 * 02170000
*   7    1   NEXT ENTRY HAS SAME POSITION AND RELOCATION ID           * 02240000
*        0   NEXT ENTRY HAS DIFFERENT POSITION AND/OR RELOCATION ID   * 02310000
*                                                                     * 02380000
*   XREF RECORDS FORMAT --                                            * 02450000
*   FIELD             BYTES                                           * 02520000
*   RECORD LENGTH       2                                             * 02590000
*   (NOT USED)        2                                               * 02660000
*   RECORD TYPE         2                                             * 02730000
*   SYMBOL              8                                             * 02800000
*   FLAGS               1                                             * 02870000
*   STATEMENT NUMBER    2                                             * 02940000
*   LENGTH              2                                             * 03010000
*   ASSEMBLED ORIGIN    4                                             * 03080000
*                                                                     * 03150000
*   RECORD FORMAT FOR LITERAL PER SE                                  * 03220000
*   FIELD              BYTES                                          * 03290000
*   RECORD LENGTH       2                                             * 03360000
*   (NOT USED)        2                                               * 03430000
*   RECORD TYPE         2                                             * 03500000
*   LITERAL             VARIABLE                                      * 03570000
*                                                                     * 03640000
*   LITERAL CROSS REFERENCE FORMATS                                   * 03710000
*   FIELD              BYTES                                          * 03780000
*   RECORD LENGTH       2                                             * 03850000
*   (NOT USED)          2                                             * 03920000
*   RECORD TYPE         2                                             * 03990000
*   LITERAL POOL ID     8                                             * 04060000
*   FLAGS               1                                             * 04130000
*   STATEMENT NUMBER    2                                             * 04200000
*   ENTRIES AFTER THIS POINT ARE FOR LITERAL XREF DEFINITION          * 04270000
*   RECORD ONLY.                                                      * 04340000
*   ASSEMBLED ORIGIN    4                                             * 04410000
*   N/P VALUE           L'JNOTEVAL                                    * 04480000
*                                                                     * 04550000
*OUTPUT-                                                              * 04620000
*   RLD RECORDS ARE PUNCHED AND/OR LINKED INTO PUNCH/LINK FILE(S).    * 04690000
*   SYMBOL/LITERAL CROSS REFERENCE RECORDS ARE WRITTEN ONTO PRINT FILE. 04760000
*                                                                     * 04830000
*   JOUTFILE AND FILE 2 ARE USED AS SORT/MERGE FILES AT SORT/MERGE TIME 04900000
*                                                                     * 04970000
*EXTERNAL ROUTINE-                                                    * 05040000
*   N/A                                                               * 05110000
*                                                                     * 05180000
*EXIT, NORMAL-                                                        * 05250000
*        JRETURN                                                      * 05320000
*                                                                     * 05390000
*EXITS, ERROR-                                                        * 05460000
*   N/A                                                               * 05530000
*TABLES/WORK AREAS-                                                   * 05600000
*   SORT AREA SIZE VARIES FROM 'MINCNT' BYTES TO 'MAXCNT' BYTES WITH  * 05670000
*   REGISTER 'SORTPTR' POINTS TO POINTERS AREA AND REGISTER 'DATAPTR' * 05740000
*   POINTS TO DATA AREA.                                              * 05810000
*   INPUT/OUTPUT BUFFERS ARE DYNAMICALLY LOCATED ABOVE THE EXECUTABLE * 05880000
*   CODE OF THIS PHASE WITH REGISTER R5 POINTS TO INPUT RECORD,       * 05950000
*   REGISTER 'LOUTNDX' POINTS TO PRINT OUTPUT RECORD, AND REGISTER    * 06020000
*   'COUTNDX' POINTS TO CARD OUTPUT RECORD.                           * 06090000
*                                                                     * 06160000
*ATTRIBUTES-                                                          * 06230000
*   REFRESHABLE                                                       * 06300000
*                                                                     * 06370000
*NOTES-                                                               * 06440000
*   N/A                                                               * 06510000
         EJECT                                                          06580000
         COPY  JCOMMON                                                  06650000
         EJECT                                                          06720000
******************* COMMON AREA FOR POST PROCESSOR ******************** 06790000
X6ACOMM  DSECT                          COMMON FOR X6A                  06860000
         USING X6ACOMM,R7                                               06930000
STRTCOM  EQU   *                        START OF X6A COMMON             07000000
PPSW     DSW   RENT,                    RE-ENTRY TO SPILL ROUTINE      X07070000
               DRDCHK,                  CHECK DUMMY READ               X07140000
               FSW,                     FIRST TIME SWTICH              P07210000
               EOFSW,                   EOF                            P07280000
               HEADOUT,                 HEADER HAS JUST BEEN PRINTED   P07350000
               PROCRLD,                 PROCESSING RLD RECORDS         P07420000
               PROCXRF,                 PROCESSING XREF RECORDS        P07490000
               PROCLIT                  PROCESSING LITERAL XREF RECORDS 07560000
PPSWI    DSW   JINREAD,                 READ(ON)/WRITE(OFF) ON JINFILE X07630000
               LASTDEF,                 LAST XREF REC A DEF REC        X07660000
               LASTREC,                 LAST REC TO OUTPUT             X07670000
               ENDSTR1,                 END OF STRING ON 1             X07680000
               ENDSTR2,                 END OF STRING ON 2             X07690005
               FIRST,                   FIRST RLD PRINT        @OY06558X07692000
               HEADPEND,                IND XREF HEADER PENDING@AZ28946X07694000
               LINKSW                   ROUTER FOR PRINT RUTINE@AZ18946 07696000
CURFLE   DS    3D                       FILE 1                          07700000
GNBLK1   EQU   CURFLE+2                 JINFILE ID                      07770000
CFL1CC   EQU   GNBLK1+2                 STRING (GP) COUNT               07840000
CFL1VV   EQU   CFL1CC+2                 ARGUMENT                        07910000
CURFLE2  EQU   CFL1VV+2                 FILE 2                          07980000
GNBLK2   EQU   CURFLE2+2                JINFILE ID                      08050000
CFL2CC   EQU   GNBLK2+2                 COUNT                           08120000
CFL2VV   EQU   CFL2CC+2                 ARGUMENT                        08190000
CURFLE3  EQU   CFL2VV+2                 FILE 3                          08260000
GNBLK3   EQU   CURFLE3+2                JINFILE ID                      08330000
CFL3CC   EQU   GNBLK3+2                 COUNT                           08400000
CFL3VV   EQU   CFL3CC+2                 ARGUMENT                        08470000
CHKFILE  DS    H                        FILE YET TO BE CHECKED          08540000
RECNUM   DS    H                        NUMBER OF RECORDS               08610000
STMTNUM  DS    F                        XREF STATEMENT NUMBER           08680000
STMTN2   EQU   STMTNUM+2                                                08750000
RTNSV2   DS    F                                                        08820000
NEXTREC  DS    F                                                        08890000
RTNSV1   DS    F                                                        08960000
MRECSV   DS    F                        MERGE RECORD ADDRESS SAVED      09030000
RTNSV    DS    F                        RTN SAVE AREA                   09100000
RFSAVE   DS    2F                       REG SAVE AREA                   09170000
R15SAVE  DS    F                        R15 SAVE AREA                   09240000
SAVEALL  DS    16F                                                      09310000
BUFFER   DC    A(0)                     1                               09380000
         DC    A(0)                     2                               09450000
BUFEND1  DC    A(0)                     3                               09520000
BUFFER2  DC    A(0)                     4                               09590000
         DC    A(0)                     5                               09660000
BUFEND2  DC    A(0)                     6                               09730000
BUFFER3  DC    A(0)                     7                               09800000
         DC    A(0)                     8                               09870000
BUFEND3  DC    A(0)                     9                               09940000
BUFFER4  DC    A(0)                     10                              10010000
         DC    A(0)                     11                              10080000
BUFEND4  DC    A(0)                     12                              10150000
BUFFER5  DC    A(0)                     13                              10220000
         DC    A(0)                     14                              10290000
BUFEND5  DC    A(0)                     15                              10360000
BUFFER6  DC    A(0)                     16                              10430000
         DC    A(0)                     17.                             10500000
BUFEND6  DC    A(0)                     18                              10570000
BUFNDX   DS    F                        CURR REC IN CURR O/P BUFFER     10640000
JINFLP   DS    F                        JINFILE IN INDEX SAVED          10710000
SORTPTR  DS    F                        SORT AREA POINTER               10780000
DATAPTR  DS    F                        DATA AREA POINTER               10850000
R1SAVE   DS    F                        R1 SAVE                         10920000
LOUTSV   DS    2F                       LOUTNDX SAVED                   10990000
XRFPSV   EQU   LOUTSV+4                 XREF REF NEXT AVAIL LOC         11060000
LNCTRSV  DS    F                        LINE COUNTER SAVED              11130000
RTADDR2  DS    F                        RTN SAVED                       11200000
PCHSAVE  DS    F                        PUNCH BUFFER POINTER            11270000
FWORD    DS    F                        WORK AREAS                      11340000
SAVSYM   DS    D                        XREF SYMBOL SAVE AREA           11410000
UNDFSYM  DS    D                        XREF UNDEFINED SYMBOL SAVE AREA 11480000
NOTESV   DS    CL(L'JNOTEVAL)           N/P SAVE AREA                   11550000
DATAAND  DS    F                                                        11620000
LLOCTRSV DS    F                        LITERAL LOCTR SAVED             11690000
SAVE2B   DS CL2                         OVERLAP BYTES SAVED             11760000
         DS    0D                                                       11830000
UNPKAREA DS    CL15                     UNPACK AREA                     11900000
         ORG   UNPKAREA                 REDEFINE                        11970000
UPPOS    DS    CL4                      POSITIONAL ID                   12040000
UPREL    DS    CL4                      RELATIONAL ID                   12110000
UPVAL    DS    CL6                      ASSEMBLED ORIGIN                12180000
UPFLG    DS    CL2                      FLAGS                           12250000
UPFLGN   EQU   UPFLG+1                                                  12320000
         ORG   UNPKAREA                 REDEFINE                        12390000
CVDCML   DS    D                        CONVERT INTO DECIMAL            12460000
UPDCML   EQU   CVDCML+5                 UNPACK 3 BYTES                  12530000
UPXRL    EQU   *-UPDCML                 LENGTH OF 3                     12600000
         ORG   UPVAL+2                  REDEFINE                        12670000
UPX      DS    CL5                      INTO 5-BYTE AREA                12740000
         ORG   UNPKAREA                 REDEFINE                        12810000
UPXVAL   DS    CL9                      XREF VALUE UNPACK AREA          12880000
         ORG                                                            12950000
RTADDR   DS    3D                       SAVE AREA                       13020000
RLDHLD   DS    0CL8                     RLD HOLD AREA                   13090000
RELHLD   DS    CL2                      RELOCATION I.D.                 13160000
POSHLD   DS    CL2                      POSITION I.D.                   13230000
FLGHLD   DS    C                        FLAG                            13300000
ADDRHLD  DS    CL3                      SYMBOL ADDRESS                  13370000
ESDCOMP  DS    0CL4                     ESDID SAVE AREA                 13440000
RELTST   DS    CL2                      RELOCATION I.D.                 13510000
POSTST   DS    CL2                      POSITION I.D.                   13580000
XLDSV    DS    CL20                     LITERAL SAVE AREA               13650000
UPXSV    DS    CL5                      UNDEF SYM STMT NUMBER SAVED     13720000
RECSAVE  DS    CL(121)                  SAVE AREA FOR XREF REC @AZ28946 13750000
         EJECT                                                          13790000
*************************************** EQUATE TABLE ****************** 13860000
LBASE    EQU   2                        LOWER DATA ITEM REGISTER        13930000
SINDEX   EQU   2                        SORT AREA INDEX REG             14000000
COUTNDX  EQU   5                        CARD OUTPUT POINTER             14070000
XRFPTR   EQU   3                        XREF REF ENTRY POINT            14140000
HBASE    EQU   3                        UPPER DATA ITEM REGISTER        14210000
DINDEX   EQU   3                        DATA AREA INDEX REG             14280000
LOUTNDX  EQU   2                        LIST OUTPUT POINTER             14350000
RECCTR   EQU   4                        RECORD COUNTER                  14420000
SRTNTRY  EQU   4                        SORT AREA ENTRY LENGTH          14490000
LINCTR   EQU   RECCTR                   LINE COUNTER                    14560000
RLREG    EQU   5                        RECORD LENGTH REGISTER          14630000
RTN      EQU   6                        RETURN LINKAGE                  14700000
PARM1    EQU   10                       PARAMETER REG 1                 14770000
PARM2    EQU   11                       PARAMETER REG 2                 14840000
LINK     EQU   12                       LINKAGE                         14910000
RLDCNT   EQU   14                       RLD BYTE COUNT                  14980000
HPOINT   EQU   14                       ADDRESS OF UPPER DATA ITEM      15050000
LPOINT   EQU   15                       ADDRESS OF LOWER DATA ITEM      15120000
SAMEID   EQU   1                        XREF DEFINITION ID              15190000
MINCNT   EQU   127                      MINIMUM CORE IN DOUBLE WORDS    15260000
MAXCNT   EQU   4095                     MAXIMUM CORE IN DOUBLE WORDS    15330000
MASKLEN  EQU   4                        MASK LENGTH FOR PAGE COUNT      15400000
XBLANK   EQU   X'40'                    EXTERNAL BLANK                  15470000
JTEOF    EQU   X'FF'                    INTERNAL EOF OP CODE            15610000
JPSOP    EQU   X'80'                                                    15680000
MRGFLE1  EQU   JOUTFILE                 MERGE FILE 1                    15750000
MRGFLE2  EQU   FILE2                    MERGE FILE 2                    15820000
ENDCOMM  DS    0D                       END OF X6A COMMON               15890000
         EJECT                                                          15960000
*************************************** OUTPUT RECORD FORMATS ********* 16030000
RPRINT   DSECT                          RLD PRINT RECORD FORMAT         16100000
         USING RPRINT,LOUTNDX                                           16170000
RCNTRL   DS    C                        RLD PRINT CONTROL BYTE          16240000
         DS    CL1                                                      16310000
POSOUT   DS    CL4                      POSITION ESD/ID                 16380000
         DS    CL5                                                      16450000
RELOUT   DS    CL4                      RELOCATION ESD/ID               16520000
         DS    CL6                                                      16590000
FLGOUT   DS    CL2                      RLD FLAG                        16660000
         DS    CL5                                                      16730000
VALOUT   DS    CL6                      RLD SYMBOL ADDRESS              16800000
         DS    CL87                                                     16870000
         SPACE                                                          16940000
         ORG   RCNTRL                   XREF PRINT RECORD FORMAT        17010000
XCNTRL   DS    C                        XREF PRINT CONTROL BYTE         17080000
XSYMOUT  DS    CL8                      XREF SYMBOL                     17150000
         DS    C                                                        17220000
XLENOUT  DS    CL5                      LENGTH OF XREF                  17290000
         DS    C                                                        17360000
XVALOUT  DS    CL8                      VALUE OF XREF                   17430000
         DS    C                                                        17500000
XDEFOUT  DS    CL5                      ADDRESS WHERE XREF DEFINED      17570000
LITDL    EQU   *-XLENOUT                                                17640000
XDE      DS    CL2                                                      17710000
XDEFLN   EQU   *-XCNTRL                                                 17780000
XRFREF   DS    CL89                     REFERENCES TO SYMBOL            17850000
XPRTND   EQU   *                                                        17920000
         ORG   XRFREF                                                   17990000
XRFENT   DS    CL5                      XREF REFERENCE ENTRY            18060000
         DS    C                        SEPARATOR                       18130000
XRENTL   EQU   *-XRFENT                                                 18200000
         SPACE                                                          18270000
         ORG   XCNTRL                   LIT XREF DEF PRINT RECORD FMT   18340000
LCNTRL   DS    C                        LIT XREF CONTROL CHAR           18410000
LITSYM   EQU   *                        LITERAL XREF DEFINITION         18480000
LITSYM5  EQU   LITSYM+5                                                 18550000
         ORG                                                            18620000
XRL      EQU   *-XCNTRL                                                 18690000
         SPACE                                                          18760000
         ORG   RCNTRL                   LISTING HEADER FORMATS          18830000
CONTROL  DBV   ,                        LIST CONTROL CHARACTER VALUES  X18900000
               EJBYTE(0),               EJECT                          X18970000
               SPACE1(EJBYTE+1),        SINGLE SPACE                   X19040000
               SPACE2(SPACE1+1),        DOUBLE SPACE                   X19110000
               SPACE3(SPACE2+1)         TRIPPLE SPACE                   19180000
TITLE    DS    CL4                      TITLE                           19250000
         DS    CL38                     BLANKS                          19320000
LHDPTR   DS    CL8                      LIT XREF HEADING PTR            19390000
HDGPTR   DS    CL21                     RLD OR XREF PAGE IDENTIFIER     19460000
         DS    CL25                                                     19530000
DTEPTR   DS    CL15                     DATE                            19600000
PGEPTR   DS    CL4                      PAGE                            19670000
PGENUM   DS    CL5                      PAGE NUMBER                     19740000
         SPACE 3                                                        19810000
***************                                                         19880000
RCARD    DSECT                          RLD PUNCH RECORD FORMAT         19950000
         USING RCARD,COUTNDX                                            20020000
CARDID   DS    C                        RLD CARD LAYOUT                 20090000
RLDNAM   DS    CL3                      RLD NAME                        20160000
         DS    CL6                                                      20230000
RLDBYT   DS    CL2                      NUMBER OF BYTES IN DATA FIELD   20300000
         DS    CL4                                                      20370000
RLDFLD   DS    CL56                     RLD DATA FIELD (VARIABLE)       20440000
DECKID   DS    CL4                      ID AND                          20510000
SEQNUM   DS    CL4                      SEQUENCE FIELD                  20580000
RCARDL   EQU   *-CARDID                                                 20650000
         SPACE 3                                                        20720000
*************************************** INPUT RECORD FORMATS ********** 20790000
         COPY  RXLFMTS                                                  20860000
         EJECT                                                          20930000
************************************************************            21000000
*   ENTRY TO POST PROCESSOR                                             21070000
************************************************************            21140000
         JCSECT (X6A00)                                                 21210000
* VS1 RELEASE 2.6 CHANGES                                               21260031
*C381500-382000                                                 OX00413 21262005
*C280000                                                        OX00106 21264005
*A284700-284800                                                 OX00106 21266005
*A722064                                                        OX02645 21268005
*C722060                                                        OX02645 21268405
*C381500                                                        OX02955 21270805
*D382000                                                        OX02955 21271205
*D684400                                                       @OY06121 21271605
*A803400,803500                                                @OY07206 21272005
*A076920,789000,789300                                         @OY06558 21272105
*C789400                                                       @OY06558 21272205
*A613520-613540                                                @OY08038 21272605
*C975800                                                       @OY10363 21272705
*C284700                                                       @OY08064 21272805
*C722350                                                       @AX14198 21274800
*A613504-613516                                                @AX14816 21274900
*A613536-613599,613820-613849                                  @AZ11958 21275000
*D613520,613540                                                @AZ11958 21275100
*A076930,713000-713270,714800-715200,137300,751900             @AZ28946 21277100
*A750500-751030,613509-613516,076950,615850-615880             @AZ28946 21277800
*C613508                                                       @AZ28946 21278500
         JMODID                                                         21280000
PPENT    JSAVE                                                          21350000
         JENTRY (X6A01=PPENT)                                           21420000
         EJECT                                                          21490000
************************************************************            21560000
*   PHASE INITIALIZATION                                                21630000
************************************************************            21700000
         GOIF  (JRLDCHK,JXREFCHK),OFF=RETURN  RETURN TO CONTROLLER      21770000
         LA    R10,(ENDCOMM-STRTCOM+7)/8  SIZE OF X6ACOMM               21840000
         JGETCORE DBL=(R10)             GET CORE FOR COMMON AREA        21910000
         LR    R7,R10                   BASE FOR X6A COMMON AREA        21980000
         BCTR  PARM2,0                  MAKE IT MOVE LENGTH             22050000
         XC    STRTCOM(255),STRTCOM          CLEAR COMMON AREA          22120000
         S     PARM2,F255                                               22190000
         EX    PARM2,CLRCOM             CLEAR COMMON AREA               22260000
         LH    R3,MRGFLE1               INITIALIZE MERGE FILE SWITCHES  22330000
         LA    R4,MRGFLE2                                               22400000
         STH   R3,CURFLE                                                22470000
         STH   R4,CURFLE2                                               22540000
         LH    R3,JINFILE                                               22610000
         STH   R3,CURFLE3                                               22680000
         MVI   GNBLK3,X'80'             JINFILE ID                      22750000
************************************************************            22820000
*   BUFFER AND SORT AREA INITIALIZATION                                 22890000
************************************************************            22960000
X6AENT   EQU   *                                                        23030000
         GOIF  (JDECK,JLINK,JLIST),OFF=RETRN                            23100000
         LH    R3,JMAXRL                ASSURE MINIMUM CORE AVAILABLE   23170000
         LR    R4,R3                      IS JMAXRL*2 PLUS ITS SORTPTR  23240000
         AR    R3,R4                      AREA AND MAXIMUM OF 64K BYTES 23310000
         SR    R2,R2                      WHICH CAN STILL BE EXTENDED   23380000
         LA    R5,RLDND                                                 23450000
         DR    R2,R5                                                    23520000
         SLL   R3,D2                                                    23590000
         AR    R3,R4                    .                               23660000
         AR    R3,R4                    .                               23730000
         AR    R3,R4                    .                               23800000
         AR    R3,R4                    .                               23870000
         AR    R3,R4                    .                               23940000
         AR    R3,R4                    .                               24010000
         SRL   R3,D3                    MAKE IT DOUBLE WORD             24080000
         L     R11,K72D                                                 24150000
         JGETCORE MINDBL=(R3),MAXDBL=(R11)                              24220000
         LA    R5,BUFFER                                                24290000
         LA    R6,D6                    LOOP 6 TIMES                    24360000
INIT     ST    PARM1,D0(,R5)            BUFFER BEGIN                    24430000
         STH   R4,D4(,R5)               JMAXRL                          24500000
         SR    PARM2,R4                                                 24570000
         AR    PARM1,R4                                                 24640000
         ST    PARM1,D8(,R5)            BUFFER END                      24710000
         LA    R5,D12(,R5)                                              24780000
         BCT   R6,INIT                  ITERATE TILL DONE               24850000
         SR    PARM1,R4                 BACK UP                         24920000
         SR    PARM1,R4                 BACK UP                         24990000
         AR    PARM2,R4                 BACK UP                         25060000
         AR    PARM2,R4                 BACK UP                         25130000
         ST    PARM1,SORTPTR            SET START POINT OF SORT AREA    25200000
         LR    R3,PARM2                 GET AVAILABLE CORE SIZE         25270000
         SR    R2,R2                                                    25340000
         LA    R5,XRFND+SRTNTRY         COMPUTE SORT AREA SIZE          25410000
         LH    R14,JLITLNG                                              25480000
         LTR   R14,R14                                                  25550000
         BZ    INIT10                   NO LITERALS                     25620000
         LA    R5,SRTNTRY+LXEND+D3+D1(,R14) COMPUTE DIVISOR             25690000
         N     R5,=X'FFFFFFFC'          WITH FULL-WORD ALIGNMENT.       25760000
INIT10   EQU   *                                                        25830000
         DR    R2,R5                    FIND LENGTH OF                  25900000
         SLL   R3,D2                    SORT AREA AND                   25970000
         AR    R3,PARM1                 SET POINTER TO DATA AREA        26040000
         ST    R3,DATAPTR               AND SAVE                        26110000
         ST    R3,XRFPSV                CREATE DUMMY CONDITION          26180000
         LA    PARM2,D0(PARM2,PARM1)                                    26250000
         ST    PARM2,DATAAND            END OF SORT AREA                26320000
         L     R3,BUFFER3                                               26390000
         LA    R3,D6(,R3)               OVER HEADER                     26460000
         ST    R3,BUFNDX                AND SAVE IT                     26530000
         SET   FSW,ON                                                   26600000
X6AREAD  EQU   *                                                        26670000
         SR    RECCTR,RECCTR            INITIAL RECORD COUNT IS ZERO    26740000
         LM    SINDEX,DINDEX,SORTPTR    GET POINTERS                    26810000
         SPACE                                                          26880000
         USING PPIN,PARM2                                               26950000
         BAL   R6,RDPHYREC              READ PHYSICAL RECORD            27020000
         EJECT                                                          27090000
************************************************************            27160000
*   GTRGTR ROUTINE READS DATA FROM JINFILE AND SELECTIVELY MOVES        27230000
*   RECORDS INTO SORT AREA.                                             27300000
*   BUFFERS USED ARE BUFFER AND BUFFER2.                                27370000
************************************************************            27440000
GTRGTR   BAL   R12,BUFIN                READ RECORDS                    27510000
GTRGTR0  L     R9,DATAPTR               SET UP REGISTERS                27580000
         L     R10,BUFEND2                                              27650000
GTRGTR1  LH    R15,PPRLI                                                27720000
         CLI   PPIOC,XRFTYPE            SELECT THE FOLLOWING            27790000
         BE    GTRGTR15                   THREE TYPES OF RECORDS        27860000
         CLI   PPIOC,RLDTYPE              INTO SORT AREA, AND THROW     27930000
         BE    GTRGTR02                    AWAY OTHERWISE       OX00106 28000031
         CLI   PPIOC,LITTYPE                                            28070000
         BE    GTRGTR5                  LITERAL                         28140000
         CLI   PPIOC,JTEOF              DON'T LET EOF RECORD            28210000
         BNE   GTRGTR4                    SLIP THROUGH                  28280000
         SET   EOFSW,ON                                                 28350000
         B     GTRGTR3                  ITS AS GOOD AS SORT AREA FULL   28420000
GTRGTR02 NI    RELID,X'F3'                                     @OY08064 28470005
         B     GTRGTR2                                          OX00106 28480031
GTRGTR15 EQU   *                                                        28490000
*                                       DON'T PICK UP XREF RECORD IF    28540000
         GOIF  (JLIST,JXREF),NOTALL=GTRGTR4    NO LIST/XREF OPTIONS     28560000
         TR    XRFSYM,JTRTABLE                                          28630000
GTRGTR2  BCTR  R15,0                                                    28700000
         EX    R15,MOVREC               MOVE TO SORT AREA               28770000
         LA    R15,D1(,R15)               AND                           28840000
         ST    DINDEX,D0(,SINDEX)         SET UP ITS POINTER,           28910000
GTRGTR25 LA    SINDEX,SRTNTRY(,SINDEX)                                  28980000
         LA    RECCTR,D1(,RECCTR)       RECORD COUNT                    29050000
         AR    DINDEX,R15                                               29120000
         CR    SINDEX,R9                TEST IF SORT AREA FULL          29190000
         BL    GTRGTR4                  NO, CONTINUE                    29260000
         AR    PARM2,R15                YES                             29330000
         CR    PARM2,R10                TEST IF BUFFER FULL             29400000
         BL    GTRGTR3                  NOT YET                         29470000
         BAL   R12,BUFIN                GET NEXT BUFFER                 29540000
GTRGTR3  ST    PARM2,JINFLP             SAVE NEXT RECORD LOCATION       29610000
         STH   RECCTR,RECNUM                                            29680000
         CLI   PPIOC,JTEOF              END OF FILE                     29730000
         BNE   X6ARD                    GO TO SORT IF NOT EOF           29732000
         SET   EOFSW,ON                 IND END OF FILE                 29740000
         B     X6ARD                    GO TO SORT                      29750000
GTRGTR4  AR    PARM2,R15                TEST IF                         29820000
         CR    PARM2,R10                  BUFFER FULL                   29890000
         BL    GTRGTR1                  NOT YET                         29960000
         B     GTRGTR                   YES                             30030000
GTRGTR5  GOIF  (JLIST,JXREF),NOTALL=GTRGTR4                             30100000
         C     R15,F255                 LITERAL RECORD MIGHT GO         30170000
         BNH   GTRGTR2                    OVER 255 CHARACTERS. SO       30240000
         MVC   D0(255,DINDEX),PPRLI       WATCH OUT HOW YOU MOVE IT     30310000
         S     R15,F255                                                 30380000
         ST    DINDEX,D0(,SINDEX)                                       30450000
         A     DINDEX,F255                                              30520000
         A     PARM2,F255                                               30590000
         EX    R15,MOVREC                                               30660000
         B     GTRGTR25                 CONTINUE                        30730000
MOVREC   MVC   D0(0,DINDEX),PPRLI       OFF-THE-LINE MOVE               30800000
X6ARD    EQU   *                                                        30870000
         LTR   RECCTR,RECCTR            MUST BE EOF IF RECCTR = 0       30940000
         BP    X6ASRT                   NOT ZERO                        31010000
*                                              IF NOT 1ST TIME AND      31040000
         GOIF  (EOFSW,FSW),NOTALL=X6ARDX         EOF THEN FINISH SORT   31070000
         LH    PARM1,JINFILE            GET FILE ID                     31100000
         JCHECK FILE=(R10)              CHECK THE LAST INPUT READ       31130000
         B     RETRN                    NO RECORDS, SO WE'RE DONE       31160000
         EJECT                                                          31220000
X6ASRT   EQU   *                                                        31290000
************************************************************            31360000
*   THIS ROUTINE LINKS TO SORT ROUTINE, SELECTS AN OUTPUT FILE FOR      31430000
*   THE SORTED DATA ACCORDING TO THE PREDETERMINED NUMBER OF STRINGS    31500000
*   TO BE OUTPUT ON THE TWO OUTPUT FILES - CURFLE AND CURFLE2.          31570000
*   IT ALSO PADS THE OUTPUT FILES, IF NECESSARY, TO THE NUMBER OF       31640000
*   STRINGS THAT WILL SATISFY THE REQUIREMENT OF THE CASCADE MERGE.     31710000
************************************************************            31780000
         BAL   RTN,SORT                 SORT RECORDS IN BUFFER          31850000
         GOIF  EOFSW,ON=X6ARDX          DID WE HIT EOF SO FAR           31920000
         SR    RECCTR,RECCTR            NO                              31990000
         LM    SINDEX,DINDEX,SORTPTR    GO BACK TO READ IN              32060000
         L     PARM2,JINFLP               NEXT SORT AREA FULL           32130000
         B     GTRGTR0                    OF RECORDS                    32200000
X6ARDX   EQU   *                                                        32270000
*        END OF SORT. PAD BOTH FILES IF NECESSARY.                      32340000
         CLC   CFL1CC(D2),CFL1VV        HASH OUT HOW MANY STRINGS       32410000
         BNE   RDX10                      WE NEED ON EITHER OF          32480000
         CLC   CFL2CC(D2),CFL2VV          THE TWO FILES, AND HOW MANY   32550000
         BE    RDX40                      HAVE WE GOT ON EACH OF THEM   32620000
RDX10    CLC   CFL1CC(D2),CFL2CC        DICHOTOMY                       32690000
         BH    RDX20                    OK                              32760000
         XC    CURFLE(D8),CURFLE2       GET HIGHER ONE ON CURFLE        32830000
         XC    CURFLE2(D8),CURFLE                                       32900000
         XC    CURFLE(D8),CURFLE2                                       32970000
RDX20    TM    CFL1CC+1,X'01'           TEST ODD/EVEN # OF GPS          33040000
         BO    RDX30                    ODD                             33110000
         BAL   RTN,PADDING1             PAD ONE BLOCK                   33180000
RDX30    SR    R2,R2                                                    33250000
         LH    R3,CFL1CC                TEST IF DIVISIBLE BY 3          33320000
         LA    R1,D3                                                    33390000
         CR    R3,R1                    NO NEED TO TEST IF              33460000
         BL    RDX40                      DIVIDEND IS LESS THAN 3       33530000
         DR    R2,R1                                                    33600000
         LTR   R2,R2                                                    33670000
         BNZ   RDX40                    NOT DIVISIBLE BY 3              33740000
         LH    R3,CFL2CC                ELSE, TEST THE OTHER FILE       33810000
         CR    R3,R1                                                    33880000
         BL    RDX40                    LESS THAN 3 ON THIS ONE TOO     33950000
         DR    R2,R1                                                    34020000
         LTR   R2,R2                                                    34090000
         BNZ   RDX40                    NOT DIVISIBLE BY 3              34160000
         BAL   RTN,PADDING              PAD IT                          34230000
RDX40    SET   EOFSW,OFF                                                34300000
         LH    PARM1,CHKFILE                                            34370000
         JCHECK FILE=(R10)              CHK LAST OUTPUT FOR COMPLETION  34440000
         LH    R10,JINFILE                                              34510000
         JNOTE FILE=(R10)               NOTE LAST RECORD READ           34580000
         MVC   NOTESV(L'JNOTEVAL),JNOTEVAL  SAVE NOTED VALUE            34650000
         LH    R10,CURFLE                                               34720000
         JPOINT FILE=(R10),NEXT=START   REPOSITION ALL FILES            34790000
         LH    R10,CURFLE2                TO START EXCEPT               34860000
         JPOINT FILE=(R10),NEXT=START     JINFILE                       34930000
         LH    R0,CFL1CC                                                35000000
         LH    R1,CFL2CC                                                35070000
         B     MERGE                    ENTER MERGE STAGE               35140000
         SPACE                                                          35210000
PADDING  XC    CURFLE(D8),CURFLE2       THIS IS TO PAD ONE STRING ON    35280000
         XC    CURFLE2(D8),CURFLE         EITHER OF THE TWO FILES, BUT  35350000
         XC    CURFLE(D8),CURFLE2         CHECK LAST OUTPUT FOR         35420000
PADDING1 LH    PARM1,CHKFILE              COMPLETION FIRST              35490000
         JCHECK FILE=(R10)                                              35560000
         L     R2,BUFFER3                                               35630000
         MVC   D6(L'EOFREC,R2),EOFREC                                   35700000
         LH    R3,H1                                                    35770000
         STH   R3,D2(,R2)               LAST BLK IN GP                  35840000
         STH   R3,D4(,R2)               ONE RECORD IN BLK               35910000
         LA    R3,L'EOFREC+D6                                           35980000
         STH   R3,D0(,R2)               RECORD LENGTH                   36050000
         LH    PARM1,CURFLE                                             36120000
         LA    PARM2,BUFFER3                                            36190000
         JWRITE FILE=(R10),PARM=(R11)   PADDED BLK                      36260000
         STH   R10,CHKFILE                                              36330000
         LH    R9,CFL1CC                                                36400000
         LA    R9,D1(,R9)               UP ONE STRING (GP)              36470000
         STH   R9,CFL1CC                                                36540000
         BR    RTN                      RETURN                          36610000
CLRCOM   XC    STRTCOM+255(0),STRTCOM+255 OFF-THE-LINE ZAC              36680000
         EJECT                                                          36750000
*******************************************************************     36820000
*   THIS ROUTINE READS DATA FROM JINFILE.                               36890000
*   BUFFERS USED ARE BUFFER AND BUFFER2.                                36960000
*******************************************************************     37030000
BUFIN    ST    R12,RTNSV2                                               37100000
         LH    PARM1,JINFILE            CHECK JINFILE I/O               37170000
         JCHECK FILE=(R10)                COMPLETION HERE               37240000
         L     PARM2,BUFFER                                             37310000
         LH    R12,D0(,PARM2)                                           37380000
         AR    R12,PARM2                                                37450000
         ST    R12,BUFEND1                                              37520000
         XC    BUFFER(D12),BUFFER2      INTERCHANGE BUFFERS             37590000
         XC    BUFFER2(D12),BUFFER                                      37660000
         XC    BUFFER(D12),BUFFER2                                      37730000
         SH    R12,H8                                                   37800000
         CLC   D2(D3,R12),EOFREC+2      TEST IF LAST INPUT BLOCK        37870000
         BE    BUFIN40                  YES.                            37940000
         BAL   R6,RDPHYREC              NO, READ NEXT BLOCK             38010000
         L     PARM2,BUFFER2                                            38080000
BUFIN40  LA    PARM2,D2(,PARM2)         INCREMENT BY 2          OX02955 38150031
         L     R12,RTNSV2               PREPARE TO RETURN TO CALLER     38220000
         BR    R12                      RETURN TO CALLER                38290000
         SPACE 3                                                        38360000
RDPHYREC LH    PARM1,JINFILE            READ FROM JINFILE               38430000
         LA    PARM2,BUFFER                                             38500000
         JREAD FILE=(R10),PARM=(R11)                                    38570000
         BR    R6                       DON'T WAIT FOR I/O COMPLETION   38640000
         DROP  PARM2                                                    38710000
         EJECT                                                          38780000
************************************************************            38850000
*   SORT ROUTINE SORTS RLD'S, SYMBOL XREF'S, AND LITERAL XREF'S.        38920000
************************************************************            38990000
SORT     EQU   *                                                        39060000
         LA    RLREG,XRFLN-1            GET SORT CONTROL FIELD LENGTH-1 39130000
         LH    R1,RECNUM                NUMBER OF LOGICAL RECORDS IN    39200000
         BCTR  R1,0                          CORE MINUS ONE,            39270000
         SLL   R1,J2                              TIMES FOUR, BECAUSE   39340000
*                                         EACH RECORD CONTAINS 4 BYTES  39390000
         ST    R1,FWORD                                                 39410000
         L     R4,SORTPTR               POINTER TO DATA POINTERS        39480000
         CH    R1,H4                    TEST IF ONLY 2 ENTRIES          39550000
         BE    SORTZ                    YES                             39620000
SORT1    SRL   R1,J1                    MIDDLE OF DATA POINTERS         39690000
         N     R1,ALIGN                 FULL WORD ALIGNMENT             39760000
         BZ    SPILLENT                 END OF SORT                     39830000
SORTZ    EQU   *                                                        39900000
         SR    R0,R0                    INITIALIZE SUB SEQUENCE BASE    39970000
SORT4    LR    HPOINT,R0                                                40040000
SORT2    LR    LPOINT,HPOINT            STEP TO NEXT SUB SEQUENCE PAIR  40110000
SORT3    LA    HPOINT,D0(R1,LPOINT)     UPPER INDEX = LOWER + DELTA     40180000
         C     HPOINT,FWORD             UPPER INDEX = LOWER + DELTA     40250000
         BH    SORT5                    YES, STEP TO NEXT SUB SEQUENCE  40320000
         L     LBASE,D0(LPOINT,R4)      POINTER TO LOWER DATA ITEM      40390000
         L     HBASE,D0(HPOINT,R4)      POINTER TO UPPER DATA ITEM      40460000
         EX    RLREG,COMPARE            COMPARE DATA ITEMS              40530000
         BNH   SORT2                    BRANCH IF IN SEQUENCE           40600000
         ST    LBASE,D0(HPOINT,R4)      LET UPPER ITEM SINK             40670000
         ST    HBASE,D0(LPOINT,R4)      EXCHANGE DATA RECORDS           40740000
         SR    LPOINT,R1                                                40810000
         BNL   SORT3                    POSSIBLY ALL THE WAY            40880000
         B     SORT2                       TO THE BOTTOM.               40950000
SORT5    AH    R0,H4                    STEP TO NEXT SUB-SEQUENCE       41020000
         CR    R0,R1                    TEST FOR END OF PASS            41090000
         BL    SORT4                    NO, SORT NEXT SUB SEQUENCE      41160000
         B     SORT1                    YES, INITIALIZE NEW PASS        41230000
COMPARE  CLC   D4(0,LBASE),D4(HBASE)    COMPARE DATA ITEMS              41300000
         DS    0F                                                       41370000
ALIGN    DC    XL4'FFFFFFFC'            MASK FOR FULL WORD ALIGNMENT    41440000
         EJECT                                                          41510000
************************************************************            41580000
*   THIS ROUTINE HAS THE CONTROL OF THE OUTPUT OF DATA FROM SORT AREA.  41650000
*   IT CONTROLS THE DISTRIBUTION OF STRINGS ONTO THE TWO FILES THAT     41720000
*   ARE TO BECOME THE TWO INITIAL INPUT FILES TO THE CASCADE MERGE.     41790000
************************************************************            41860000
SPILLENT ST    RTN,RTADDR                                               41930000
         SET   RENT,ON                  RE ENTRY TO MERGE ROUTINE       42000000
         SR    R3,R3                                                    42070000
         L     R5,SORTPTR               GET BEGIN OF SORT AREA AND      42140000
*                                         RECORD COUNT                  42190000
         LH    R4,RECNUM                                                42210000
*                                       BRANCH IF ALL RECORDS ARE       42260000
         GOIF  (EOFSW,FSW),ALL=NOMREC     IN THE SORT AREA              42280000
         SPACE 3                                                        42350000
*        SPILL SORTED RECORDS INTO CURFLE AND CURFLE2                   42420000
SPILL    EQU   *                                                        42490000
         GOIF  FSW,OFF=SPILL10                                          42560000
*        FIRST TIME SPILLING            INITIATE STRING CONTROL NUMBER  42630000
         MVI   CFL1VV+1,D3                TO BOTH OUTPUT FILES AND      42700000
         MVI   CFL2VV+1,D1                SPILL STRINGS ONTO BOTH FILES 42770000
SPILL5   L     R2,BUFFER3                 ACCORDINGLY                   42840000
         XC    D2(D2,R2),D2(R2)                                         42910000
         LA    R2,D6(,R2)               BUMP PAST BUFFER HEADER         42980000
         L     R0,BUFEND3                                               43050000
SPILLING L     R1,D0(,R5)               GET THE NEXT DATA RECORD        43120000
         LH    R9,D0(,R1)               GET LENGTH OF DATA RECORD       43190000
SPLNG1   LR    R11,R9                   PUT DATA LENGTH IN REG          43260000
         AR    R11,R2                   ADD IN BEGINNING ADDR OF BUFFER 43330000
         CR    R11,R0                   ARE WE AT THE END OF BUFFER     43400000
         BH    SPILTH                   YES, END OF BUFFER              43470000
         C     R9,F255                  NO, MOVE IN                     43540000
         BNH   SPLNG2                                                   43610000
         MVC   D0(255,R2),D0(R1)        RCD >255, MOVE IN DEFAULT 255   43660000
         S     R9,F255                  ADJUST TO DEFAULT RECORD LENGTH 43750000
         A     R1,F255                  BUMP UP POINTERS                43820000
         A     R2,F255                                                  43890000
SPLNG2   BCTR  R9,0                     NO, MAKE IT MOVE LENGTH         43960000
         EX    R9,SPLMV                   AND MOVE                      44030000
         LR    R2,R11                   UP BUFFER POINTER               44100000
         LA    R3,D1(,R3)               UP RECORD COUNT BY 1            44170000
         LA    R5,SRTNTRY(,R5)          UP SORT AREA POINTER BY 4       44240000
         BCT   R4,SPILLING              GET NEXT RECORD                 44310000
*        WRITE LAST SHORT BLOCK                                         44380000
         SR    R9,R9                    NO MORE RECORD, SO              44450000
         L     R11,BUFFER3              GET START OF BUFF3 FOR WRITE OP 44520000
         OI    D3(R11),X'01'            LAST BLK IN THIS GP             44590000
         B     SPILTH1                  OUT ON FILE                     44660000
SPLMV    MVC   D0(0,R2),D0(R1)                                          44730000
SPILTH   L     R11,BUFFER3              GET ADDR OF BUFFER              44800000
SPILTH1  STM   R0,R9,SAVEALL            CONSTRUCT THE BLOCK             44870000
         SR    R2,R11                   HEADER                          44940000
         STH   R2,D0(,R11)              POINTER TO FIRST RCD IN BLOCK   45010000
         STH   R3,D4(,R11)              NUMBER OF RECORDS IN BLOCK      45080000
         TM    PPSW,FSW+RENT                                            45150000
         BO    SPLOUT                   FIRST TIME ENTRY                45220000
         TM    PPSW,RENT                                                45290000
         BO    CHKIT                    RE-ENTRY. MUST CHECK LAST       45360000
*                                         OUTPUT FILE                   45410000
         LH    PARM1,CURFLE                                             45430000
         JCHECK FILE=(R10)                                              45500000
         B     SPLOUT                                                   45570000
CHKIT    LH    PARM1,CHKFILE                                            45640000
         JCHECK FILE=(R10)              CHECK FOR COMPLETION            45710000
SPLOUT   SET   RENT,OFF                                                 45780000
         LH    PARM1,CURFLE                                             45850000
         LA    PARM2,BUFFER3                                            45920000
         JWRITE FILE=(R10),PARM=(R11)   WRITE ON CURFLE                 45990000
         LM    R0,R9,SAVEALL                                            46060000
         XC    BUFFER3(D12),BUFFER4     ALTER BUFFERS                   46130000
         XC    BUFFER4(D12),BUFFER3                                     46200000
         XC    BUFFER3(D12),BUFFER4                                     46270000
         L     R2,BUFFER3               INITIATE NEXT BUFFER            46340000
         XC    D2(D2,R2),D2(R2)           WHILE CURRENT BUFFER IS       46410000
         LA    R2,D6(,R2)                 BEING WRITTEN OUT             46480000
         L     R0,BUFEND3                                               46550000
         SR    R3,R3                                                    46620000
         LTR   R9,R9                    END OF GP TEST                  46690000
         BP    SPLNG1                   OVERFLOW, NOT END OF STRING     46760000
         STH   R10,CHKFILE                                              46830000
         LH    R11,CFL1CC               END OF GP (STRING)              46900000
         LA    R11,D1(,R11)             INCREMENT STRING COUNT          46970000
         STH   R11,CFL1CC                                               47040000
         L     RTN,RTADDR                                               47110000
         GOIF  FSW,OFF=(RTN)            RETURN IF NOT FIRST ACTION      47180000
         SET   FSW,OFF                  ELSE                            47250000
         XC    CURFLE(D8),CURFLE2       FLIP FIELD                      47320000
         XC    CURFLE2(D8),CURFLE                                       47390000
         XC    CURFLE(D8),CURFLE2                                       47460000
         BR    RTN                      THEN RETURN                     47530000
         SPACE                                                          47600000
SPILL10  EQU   *                                                        47670000
         CLC   CFL1CC(D2),CFL1VV                                        47740000
         BL    SPILL5                   OUTPUT ON SAME FILE             47810000
         XC    CURFLE(D8),CURFLE2       OUTPUT ON THE OTHER FILE        47880000
         XC    CURFLE2(D8),CURFLE                                       47950000
         XC    CURFLE(D8),CURFLE2                                       48020000
         LH    R11,CFL1VV               COMPUTE NEXT STRING CONTROL     48090000
         CH    R11,CFL2VV                 NUMBER ON THIS 'OTHER' FILE   48160000
         BL    SPILL20                    .                             48230000
         SH    R11,CFL2VV                 .                             48300000
         B     SPILL30                    THEN                          48370000
SPILL20  AH    R11,CFL2VV                 .                             48440000
SPILL30  STH   R11,CFL2VV                 .                             48510000
         B     SPILL5                   GO SPILL RECPRDS                48580000
EOFREC   DS    0CL18                    EOF RECORD                      48650000
         DC    AL2(L'EOFREC)            RL                              48720000
         DC    AL1(JPSOP,0)             FLAGS                           48790000
         DC    AL1(JTEOF)               IOC                             48860000
         DC    AL1(X'EE',X'00',X'FF')   SPECIAL ID                      48930000
         DC    2AL1(JASTER,X'EE',X'00',X'FF') PADDING                   49000000
         DC    AL2(0)                   PADDING                         49070000
EOFL     EQU   *-EOFREC                 LENGTH                          49140000
         EJECT                                                          49210000
************************************************************            49280000
*   THIS ROUTINE DOES THE CASCADE MERGE TILL THE NUMBER OF              49350000
*   STRINGS ON BOTH INPUT FILES DECREMENT TO ONE.                       49420000
************************************************************            49490000
*        READ FROM CURFLE AND CURFLE2                                   49560000
*        WRITE ON CURFLE3                                               49630000
*        ALL FILES REPOSITIONED TO GO                                   49700000
MERGE    EQU   *                                                        49770000
         BAL   RTN,READFL1              READ INTO BFRS 1 & 2 FROM FILE1 49840000
         BAL   RTN,READFL2              READ INTO BFRS 3 & 4 FROM FILE2 49910000
MERGE1   SR    R11,R11                                                  49980000
         L     R12,BUFFER5              WRITE BUFFER                    50050000
         XC    D2(D2,R12),D2(R12)                                       50120000
         LA    R12,D6(,R12)                                             50190000
MERGE2   SET   FSW,ON                                                   50260000
         CH    R0,H1                    DO NOT MERGE LAST PASS          50330000
         BH    CPRMRG                   IF                              50400000
         CH    R1,H1                    BOTH FILES HAVE DATA            50470000
         BH    CPRMRG                                                   50540000
         CLC   CFL3CC(D2),H1            IF THIRD FILE CONTAINS DATA     50590000
         BNL   CPRMRG                   CONTINUE MERGE                  50600000
         B     OUTPUTS                  MERGE AS THEY PRINT/PUNCH       50610000
         SPACE 3                                                        50680000
BUMPFL1  LR    R2,R14                                                   50750000
CPRMRG   CLC   D4(XRFLN,R2),D4(R3)                                      50820000
         BL    FL1LO                    FILE 1 LOW                      50890000
         BE    EEREC                    POSSIBLE END OF FILE/GROUP      50960000
FL2LO    LR    R14,R3                   RECORD POINTER                  51030000
         BAL   RTN,PUTREC               PUT ONE RECORD                  51100000
         BCT   R5,BUMPFL2               KEEP TRACK OF COUNT AND BR      51170000
         BCT   R10,CHKFL2               READ IF END OF BLOCK            51240000
         LA    R3,EOFREC                LAST BLK ON GROUP               51310000
         B     CPRMRG                   NEXT RECORD                     51380000
BUMPFL2  LR    R3,R14                   NEXT RECORD                     51450000
         B     CPRMRG                   GO                              51520000
CHKFL2   BAL   RTN,FL2CHECK             CHECK/READ                      51590000
         B     CPRMRG                   COMPARE                         51660000
         SPACE                                                          51730000
FL1LO    LR    R14,R2                                                   51800000
         BAL   RTN,PUTREC                                               51870000
         BCT   R4,BUMPFL1               COUNT/BRANCH                    51940000
         BCT   R9,CHKFL1                CHECK/READ                      52010000
         LA    R2,EOFREC                POINT TO EOFREC                 52080000
         B     CPRMRG                   NEXT REC                        52150000
CHKFL1   BAL   RTN,FL1CHECK             CHECK/READ                      52220000
         B     CPRMRG                   NEXT RECORD                     52290000
EEREC    CLI   D4(R2),JTEOF             TEST IF END OF GROUP            52360000
         BNE   FL1LO                    NO                              52430000
         BAL   RTN,PUTLBLK              OUTPUT LAST BLOCK               52500000
         STM   R0,R1,SAVEALL                                            52570000
         LH    R10,CURFLE3              TO CURFLE3                      52640000
         JCHECK FILE=(R10)              WAIT FOR COMPLETION             52710000
         LM    R0,R1,SAVEALL                                            52780000
         BCTR  R1,0                     MINUS 1 ON CURFLE2 STRING COUNT 52850000
         SH    R0,H1                    MINUS 1 ON CURFLE STRING COUNT  52920000
         STM   R0,R1,SAVEALL                                            52990000
         BP    GPCNT2                   CURFLE=0 STRING                 53060000
         STH   R0,CFL1CC                                                53130000
         XC    CURFLE(D8),CURFLE3       FLIP 1 AND 3                    53200000
         XC    CURFLE3(D8),CURFLE       .                               53270000
         XC    CURFLE(D8),CURFLE3       .                               53340000
         LH    R0,CFL1CC                                                53410000
         ST    R0,SAVEALL                                               53480000
         TM    GNBLK1,X'80'             TEST IF JINFILE                 53550000
         BZ    EEREC2                   NO                              53620000
         LH    R10,CURFLE               YES, POINT BACK TO NOTED LOC    53690000
         LA    R11,NOTESV                                               53760000
         JPOINT FILE=(R10),ADDR=(R11),NEXT=READ                         53830000
         LH    R10,CURFLE                                               53900000
         BAL   RTN,DUMMYRD              GET BY THE NOTED RECORD         53970000
         LH    R10,CURFLE3                                              54040000
         JPOINT FILE=(R10),NEXT=START   REPOSITION CURFLE3              54110000
         B     EERECXY                  NEXT STRING                     54180000
EEREC2   TM    GNBLK3,X'80'                                             54250000
         BZ    EEREC4                   BR IF NOT JINFILE               54320000
         LH    R10,CURFLE3              YES, POINT BACK TO NOTED LOC    54390000
         LA    R11,NOTESV                                               54460000
         JPOINT FILE=(R10),ADDR=(R11),NEXT=WRITE                        54530000
EEREC3   LH    R10,CURFLE                                               54580000
         JPOINT FILE=(R10),NEXT=START   REPOSITION CURFLE               54590000
EERECXY  LM    R0,R1,SAVEALL                                            54740000
         BAL   RTN,READFL1              READ FIRST BLOCK FROM CURFLE    54810000
EERECXZ  BAL   RTN,FL2CHECK             CONTINUE READING CURFLE2        54880000
         B     MERGE1                   CONTINUE PROCESSING             54950000
EEREC4   LH    R10,CURFLE3                                              55020000
         JPOINT FILE=(R10),NEXT=START   REPOSITION CURFLE3              55090000
         B     EEREC3                   .                               55160000
GPCNT2   CH    R1,H1                                                    55230000
         BL    GPCNT3                   CURFLE2=0 STRING                55300000
         BAL   RTN,FL1CHECK             NOT EXHAUSTED YET, READ         55370000
         B     EERECXZ                    NEXT BLOCK AND GO             55440000
GPCNT3   EQU   *                                                        55510000
         STH   R1,CFL2CC                                                55580000
         XC    CURFLE2(D8),CURFLE3      FLIP 2 AND 3                    55650000
         XC    CURFLE3(D8),CURFLE2                                      55720000
         XC    CURFLE2(D8),CURFLE3                                      55790000
         LH    R1,CFL2CC                                                55860000
         ST    R1,SAVEALL+4                                             55930000
         TM    GNBLK2,X'80'             TEST IF JINFILE                 56000000
         BZ    EEREC6                   NO                              56070000
         LH    R10,CURFLE2              YES, POINT TO THE NOTED LOC     56140000
         LA    R11,NOTESV                                               56210000
         JPOINT FILE=(R10),ADDR=(R11),NEXT=READ                         56280000
         LH    R10,CURFLE2                                              56350000
         BAL   RTN,DUMMYRD              GET BY THE NOTED RECORD         56420000
         LH    R10,CURFLE3                                              56490000
         JPOINT FILE=(R10),NEXT=START   REPOSITION CURFLE3              56560000
         B     EERECXX                  NEXT STRING (GP)                56630000
EEREC6   TM    GNBLK3,X'80'                                             56700000
         BZ    EEREC8                   NOT JINFILE                     56770000
         LH    R10,CURFLE3              YES, POINT TO THE NOTED LOC     56840000
         LA    R11,NOTESV                                               56910000
         JPOINT FILE=(R10),ADDR=(R11),NEXT=WRITE                        56980000
EEREC7   LH    R10,CURFLE2                                              57050000
         JPOINT FILE=(R10),NEXT=START   REPOSITION CURFLE2              57120000
EERECXX  LM    R0,R1,SAVEALL                                            57190000
         BAL   RTN,READFL2              READ FROM BOTH INPUT            57260000
         BAL   RTN,FL1CHECK               FILES AND                     57330000
         B     MERGE1                     CONTINUE MERGE PROCESS        57400000
EEREC8   LH    R10,CURFLE3                                              57470000
         JPOINT FILE=(R10),NEXT=START   REPOSITION CURFLE3              57540000
         B     EEREC7                   AND GO                          57610000
         SPACE                                                          57680000
DUMBUFR  EQU   BUFFER6                                                  57750000
DUMMYRD  LA    PARM2,DUMBUFR                                            57820000
*                                       READ THAT BYPASSES THE NOTED    57870000
         JREAD FILE=(R10),PARM=(R11)      RECORD ON JINFILE             57890000
         SET   DRDCHK,ON                                                57960000
         STH   R10,CHKFILE                                              58030000
         BR    RTN                      RETURN                          58100000
         EJECT                                                          58170000
************************************************************            58240000
*   THIS ROUTINE IS THE DRIVER TO PRINT/PUNCH ROUTINES.                 58310000
************************************************************            58380000
         USING PPIN,PARM2                                               58450000
         USING RPRINT,LOUTNDX                                           58520000
         USING RCARD,COUTNDX                                            58590000
OPENTRY  EQU   *                        ENTRY TO OUTPUTS                58660000
*        R2 = CURFLE INDEX                                              58730000
*        R3 = CURFLE2 INDEX                                             58800000
*        R4 = RECORDS IN CURFLE                                         58870000
*        R5 = RECORDS IN CURFLE2                                        58940000
         SPACE                                                          59010000
OUTPUTS  CLC   D4(XRFLN,R2),D4(R3)      HI LO COMPARE                   59080000
         BH    OFL2LO                   FILE 2 LOW                      59150000
         BE    EOFTEST                  POSSIBLE END OF FILE            59220000
         LR    PARM2,R2                 FILE 1 LOW                      59290000
         LH    R14,D0(,R2)              GET REC LENGTH                  59360000
         AR    R2,R14                                                   59430000
         ST    R2,NEXTREC               SAVE NEXT REC ADDR              59432000
         C     R2,BUFEND2               END OF BUFFER                   59440000
         BL    OUTIN                    NO- NOT LAST REC                59450000
         GOIF  ENDSTR1,OFF=OUTIN        NOT IN LAST BLOCK IN STRING     59460000
         CLC   EOFREC,D0(R3)            REC LEFT ON OTH FILE            59470000
         BNE   OUTIN                    YES - NOT LAST                  59480000
         SET   LASTREC,ON               NO THIS IS LAST REC             59490000
         B     OUTIN                    OUTPUT                          59500000
OFL2LO   LR    PARM2,R3                 FILE 2 LOW                      59570000
         LH    R14,D0(,R3)                                              59640000
         AR    R3,R14                                                   59710000
         ST    R3,NEXTREC               SAVE NEXT REC ADDR              59712000
         C     R3,BUFEND4               END OF BUFFER                   59718000
         BL    OUTIN                    NO - NOT LAST REC               59726000
         GOIF  ENDSTR2,OFF=OUTIN        NOT IN LAST BLOCK IN STRING     59734000
         CLC   EOFREC,D0(R2)            REC LEFT ON OTHER FILE          59742000
         BNE   OUTIN                    YES                             59750000
         SET   LASTREC,ON               THIS WAS LAST REC               59758000
OUTIN    L     R12,PRT                  GET OUTPUT ROUTINE BASE         59766000
         ST    R9,RTNSV1                SAVE STRING COUNT               59773000
         BALR  R9,R12                   OUTPUT RECORDS                  59780000
         L     R9,RTNSV1                RESTORE STRING COUNT            59810000
         C     R2,BUFEND2               TEST IF ENDOFBUFFER             59850000
         BL    OEX2                     NO                              59920000
         CLC   EOFREC,D0(R2)            IS IT END OF FILE               59940000
         BE    OEX2                     YES                             59960000
         BCT   R9,OEX1                                                  59990000
         LA    R2,EOFREC                END OF STRING HERE              60060000
         B     OEX2                     .                               60130000
OEX1     BAL   RTN,FL1CHECK             GET NEXT BUFFER                 60200000
OEX2     C     R3,BUFEND4               TEST IF END OF BUFFER           60270000
         BL    OUTPUTS                  NEXT                            60340000
         CLC   EOFREC,D0(R3)            IS IT END OF FILE               60360000
         BE    OUTPUTS                  YES                             60380000
         BCT   R10,OEX3                                                 60410000
         LA    R3,EOFREC                END OF STRING HERE              60480000
         B     OUTPUTS                  NEXT                            60550000
OEX3     BAL   RTN,FL2CHECK             GET NEXT BUFFER                 60620000
         B     OUTPUTS                  CONTINUE                        60690000
         SPACE 3                                                        60760000
NOMREC   SET   EOFSW,OFF                                                60830000
         L     R2,SORTPTR                                               60900000
ONEBFR   L     PARM2,D0(,R2)                                            60970000
         LA    R2,SRTNTRY(,R2)          GET NEXT REC POINTER            60972000
         L     R12,D0(,R2)              GET NEXT REC ADDR               60974000
         ST    R12,NEXTREC              SAVE IT                         60976000
         CH    R4,H1                    LAST REC                        60980000
         BNE   ONEBFR1                  TELL SO                         60990000
         SET   LASTREC,ON                                               61000000
ONEBFR1  L     R12,PRT                  GET OUTPUT RTN ADDR             61010000
         BALR  R9,R12                   GO OUTPUT RECORD                61040000
         BCT   R4,ONEBFR                DECREMENT COUNT                 61180000
         B     EOFOUT                   END OF FILE IF THRU'            61250000
         EJECT                                                          61320000
****************************************                                61325000
*   END OF FILE ROUTINE.                                                61330000
****************************************                                61335000
EOFTEST  CLI   D4(R2),JTEOF             TEST IF EOF RECORD              61340000
         BNE   OFL2LO                   NO, ASSUME FILE 2 LOW           61345000
EOFOUT   EQU   *                                                        61350000
         GOIF  JMINXREF,OFF=EOFOUT5     IF XREF(SHORT)-        @AX14816 61350400
         GOIF  LASTDEF,ON=EOFOUT3       BR IF LAST REC = DEF   @AZ28946 61350800
         GOIF  HEADPEND,OFF=EOFOUT5     BR IF NO HEADER PEND   @AZ28946 61351000
         L     LOUTNDX,LOUTSV           RESTORE BUFFER POINTER @AZ28946 61351100
         MVC   RECSAVE,CONTROL          SAVE CURR XREF REC     @AZ28946 61351200
         SET   LINKSW,ON                HEADER BUT HEADER ONLY @AZ28946 61351400
         L     R12,PRT                  ADDRESS TO-            @AZ28946 61351500
         BALR  R9,R12                   PRINT ROUTINE          @AZ28946 61351600
         MVC   CONTROL(L'RECSAVE),RECSAVE RESTOR CURR XREF REC @AZ28946 61351700
         MVI   XCNTRL,SPACE2            SET SPACE 2            @AZ28946 61351800
         B     EOFOUT5                                         @AZ28946 61352000
EOFOUT3  EQU   *                                               @AZ28946 61352200
         SET   JSUPPRT,ON               LAST DEF PRINT LINE.   @AX14816 61352400
EOFOUT5  EQU   *                                               @AX14816 61352600
         LH    R10,CURFLE               WAIT FOR OUTSTANDING-  @AZ11958 61353600
         BAL   R9,EOFWAIT               I/O ACTIVITY.          @AZ11958 61354000
         LH    R10,CURFLE2              WAIT FOR OUTSTANDING-  @AZ11958 61354400
         BAL   R9,EOFWAIT               I/O ACTIVITY.          @AZ11958 61354800
         LH    R10,CURFLE3              WAIT FOR OUTSTANDING-  @AZ11958 61354900
         BAL   R9,EOFWAIT               I/O ACTIVITY.          @AZ11958 61359900
         LH    PARM1,JINFILE            REWINE INPUT FILE FOR           61365000
         JPOINT FILE=(PARM1),NEXT=START DIAGNOSTICS PHASE               61370000
RETRN    JFRECORE ADDR=(R7)             FREE X6A COMMON AREA            61375000
RETURN   JRETURN                        RETURN TO SYSTEM                61380000
EOFWAIT  LA    R1,D0(R13,R10)           R1 POINTS TO DECB      @AZ11958 61382000
         TM    D0(R1),X'40'             TEST IF COMPLETED I/O  @AZ11958 61384000
         BOR   R9                       RETURN IF COMPLETED I/O@AZ11958 61384400
         WAIT  ECB=(R1)                 WAIT FOR COMPLEATION   @AZ11958 61384800
         BR    R9                       RETURN FOR MORE TESTS  @AZ11958 61384900
         EJECT                                                          61385000
*   READ ROUTINE READS PHYSICAL RECORDS                                 61390000
*   FROM CURFLE INTO BUFFER/BUFFER2                                     61391000
****************************************                                61392000
READFL1  STM   R0,R15,SAVEALL           FIRST TIME ENTRY POINT          61393000
         GOIF  DRDCHK,OFF=READFL17      TEST IF NEED CHECK BEFORE READ  61394000
         LH    PARM1,CHKFILE                                            61395000
         JCHECK FILE=(R10)              YES, CHECK IT                   61396000
         SET   DRDCHK,OFF                                               61397000
READFL17 EQU   *                                                        61398000
         LH    PARM1,CURFLE             READ NEXT BLOCK OF RECORDS      61399000
         LA    PARM2,BUFFER               FROM CURFLE INTO BUFFER       61400000
         JREAD FILE=(R10),PARM=(R11)                                    61401000
         B     RDFL10                   .                               61402000
FL1CHECK STM   R0,R15,SAVEALL           NON-FIRST-TIME ENTRY POINT      61403000
         SET   ENDSTR1,OFF              RESET END OF STRING IND         61404000
         LH    PARM1,CURFLE                                             61405000
RDFL10   JCHECK FILE=(R10)              CHECK FOR COMPLETION            61406000
         L     PARM2,BUFFER             GET PTR TO BEGIN OF BUFFER      61407000
         LH    R12,D0(,PARM2)           EXTRACT LENGTH OF DATA RECORD   61408000
         AR    R12,PARM2                CALCULATE END OF BUFFER         61409000
         ST    R12,BUFEND1              KEEP PTR TO END OF BUFFER1      61410000
RDFL11   XC    BUFFER(D12),BUFFER2      FLIP THE TWO ALTERNATE          61411000
         XC    BUFFER2(D12),BUFFER        BUFFERS BY INTERCHANGE        61412000
         XC    BUFFER(D12),BUFFER2        POINTERS                      61413000
         CLI   D3(PARM2),D1             TEST IF END OF STRING           61414000
         BNE   RDFL15                   NO, GO TO READ                  61415000
         SET   ENDSTR1,ON               IND LAST BLOCK IN STRING        61416000
         L     R0,SAVEALL               YES, TEST IF LAST STRING        61417000
         CH    R0,H1                                                    61418000
         BNH   RDFL19                   YES                             61419000
RDFL15   EQU   *                                                        61420000
         LH    PARM1,CURFLE             READ NEXT BLOCK OF RECORDS      61421000
         LA    PARM2,BUFFER                                             61422000
         JREAD FILE=(R10),PARM=(R11)                                    61423000
RDFL19   LM    R0,R15,SAVEALL                                           61424000
         L     R2,BUFFER2                                               61425000
         LH    R9,D2(,R2)               # BLKS IN FL 1 GP               61426000
         LH    R4,D4(,R2)               # RECS IN FL 1 BLK              61427000
         LA    R2,D6(,R2)               BUMP OVER  HEADER               61428000
         BR    RTN                      RETURN TO CALLER                61429000
         EJECT                                                          61430000
*   READ ROUTINE READS PHYSICAL RECORDS                                 61431000
*   FROM CURFLE2 INTO BUFFER3/BUFFER4                                   61432000
****************************************                                61433000
READFL2  STM   R0,R15,SAVEALL                                           61434000
         GOIF  DRDCHK,OFF=READFL27      TEST IF NEED CHECK BEFORE READ  61435000
         LH    PARM1,CHKFILE                                            61436000
         JCHECK FILE=(R10)              YES, CHECK IT                   61437000
         SET   DRDCHK,OFF                                               61438000
READFL27 EQU   *                                                        61439000
         LH    PARM1,CURFLE2            READ NEXT BLOCK OF RECORDS      61440000
         LA    PARM2,BUFFER3              FROM CURFLE2 INTO BUFFER3     61441000
         JREAD FILE=(R10),PARM=(R11)                                    61442000
         B     RDFL20                   .                               61443000
FL2CHECK STM   R0,R15,SAVEALL           NON-FIRST-TIME ENTRY POINT      61444000
         SET   ENDSTR2,OFF              RESET END OF STRING IND         61445000
         LH    PARM1,CURFLE2                                            61446000
RDFL20   JCHECK FILE=(R10)              CHECK BEFORE READ               61447000
         L     PARM2,BUFFER3                                            61448000
         LH    R12,D0(,PARM2)                                           61449000
         AR    R12,PARM2                                                61450000
         ST    R12,BUFEND3                                              61451000
RDFL21   XC    BUFFER3(D12),BUFFER4     FLIP THE TWO ALTERNATE BUFFERS  61460000
         XC    BUFFER4(D12),BUFFER3                                     61460800
         XC    BUFFER3(D12),BUFFER4                                     61461600
         CLI   D3(PARM2),D1             TEST IF END OF STRING           61462400
         BNE   RDFL25                   NO, GO TO READ                  61463200
         SET   ENDSTR2,ON               IND LAST BLOCK INSTRING         61464000
         L     R1,SAVEALL+4                                             61464800
         CH    R1,H1                    YES, TEST IF LAST STRING        61465600
         BNH   RDFL29                   YES                             61466400
RDFL25   EQU   *                                                        61467200
         LH    PARM1,CURFLE2            READ NEXT BLOCK OF RECORDS      61468000
         LA    PARM2,BUFFER3                                            61468800
         JREAD FILE=(R10),PARM=(R11)                                    61469600
RDFL29   LM    R0,R15,SAVEALL                                           61470400
         L     R3,BUFFER4                                               61471200
         LH    R10,D2(,R3)              # BLKS IN FL 2 GP               61472000
         LH    R5,D4(,R3)               # RECS IN FL 2 BLK              61472800
         LA    R3,D6(,R3)               BUMP OVER HEADER                61473600
         BR    RTN                      RETURN TO CALLER                61474400
         EJECT                                                          61475200
************************************************************            61476000
*   WRITE ROUTINE WRITES PHYSICAL RECORDS                               61476800
*   FROM BUFFER5/BUFFER6 ONTO CURFLE3                                   61477600
************************************************************            61478400
PUTREC   EQU   *                                                        61479200
         LH    R15,D0(,R14)             GET RECORD LENGTH               61480000
PUTREC1  AR    R12,R15                                                  61480800
         C     R12,BUFEND5              TEST IF END OF BUFFER           61481600
         BH    OVRFLO                   BR IF OVERFLOW                  61482400
         SR    R12,R15                  NO, MOVE INTO BUFFER            61483200
         C     R15,F255                                                 61484000
         BNH   PUTREC2                                                  61484800
         MVC   D0(255,R12),D0(R14)      EXTRA MOVE IF RECORD LENGTH     61485600
         S     R15,F255                   EXCEEDS 255                   61486400
         A     R12,F255                                                 61487200
         A     R14,F255                                                 61488000
PUTREC2  BCTR  R15,0                    MAKE MOVE LENGTH                61488800
         EX    R15,MVMV                 MOVE RECORD TO BUFFER           61489600
         LA    R15,D1(R15)              MAKE IT LOGICAL LENGTH AGAIN    61490400
         AR    R12,R15                                                  61491200
         AR    R14,R15                                                  61492000
         LA    R11,D1(,R11)                                             61492800
         BR    RTN                      RETURN                          61493600
MVMV     MVC   D0(0,R12),D0(R14)        OFF-THE-LINE MOVE               61494400
         SPACE                                                          61495200
OVRFLO   SR    R12,R15                  WRAP UP THE BUFFER              61496000
OVRFLO1  STM   R0,R15,SAVEALL                                           61496800
         L     R10,BUFFER5                                              61497600
         SR    R12,R10                  TAKE CARE OF ITS HEADER         61498400
         STH   R12,D0(,R10)             BLOCK SIZE                      61499200
         STH   R11,D4(,R10)             # RECORDS                       61500000
         LH    PARM1,CURFLE3            BRANCH IF FIRST TIME            61500800
OVRFLO5  GOIF  FSW,ON=WRITE             ELSE, CHECK LAST OUTPUT         61501600
         JCHECK FILE=(R10)              COMPLETION BEFORE               61502400
****************************************                                61503200
WRITE    LA    PARM2,BUFFER5            WRITE CURRENT BLOCK             61504000
         SET   FSW,OFF                                                  61504800
         JWRITE FILE=(R10),PARM=(R11)                                   61505600
         LM    R0,R15,SAVEALL                                           61506400
         XC    BUFFER5(D12),BUFFER6     FLIP THE TWO                    61507200
         XC    BUFFER6(D12),BUFFER5       ALTERNATIVE                   61508000
         XC    BUFFER5(D12),BUFFER6       BUFFERS                       61508800
         L     R12,BUFFER5                AND                           61509600
         XC    D2(D2,R12),D2(R12)         INITIATE HEADER               61510400
         LA    R12,D6(,R12)                                             61511200
         SR    R11,R11                                                  61512000
         LTR   R15,R15                  END OF GP IF R15 = 0            61512800
         BP    PUTREC1                  BR IF NOT                       61513600
         LH    R10,CFL3CC               INCREMENT STRING COUNT          61514400
         LA    R10,D1(,R10)                                             61515200
         STH   R10,CFL3CC                                               61516000
         BR    RTN                      RETURN                          61516800
         SPACE                                                          61517600
LBSW     EQU   X'01'                    LAST-BLOCK-IN-GP                61518400
PUTLBLK  SR    R15,R15                                                  61519200
         L     R10,BUFFER5                                              61520000
         OI    D3(R10),LBSW             INDICATE LAST BLOCK IN GP       61520800
         B     OVRFLO1                  PUT                             61521600
         EJECT                                                          61522400
*                                                                       61523200
*   CONSTANTS                                                           61524000
*                                                                       61524800
F255     DC    F'255'                   CONSTANT 255                    61525600
PRT      DC    A(PRTPCH)                ADDRESS OF OUTPUT ROUTINE       61526400
K72D     DC    X'00007FFF'                                              61527200
H1       DC    H'1'                     CONSTANT 1                      61528000
H4       DC    H'4'                     CONSTANT 4                      61530000
H8       DC    H'8'                     CONSTANT 8                      61536000
         JPATCH X6A00,AF0                     5% PATCH AREA             61542000
         EJECT                                                          61548000
         JCSECT (X6A20)                                                 61554000
         JMODID                                                         61560000
PRTPCH   JSAVE                                                          61566000
         JENTRY (X6A21=PRTPCH)                                          61572000
         STM   R1,R10,SAVEALL                                           61578000
         L     LINCTR,LNCTRSV           RESTORE LINE COUNTER            61584000
         GOIF  LINKSW,OFF=VJGARAM       BR IF NOTHING SPECIAL  @AZ28946 61585000
         BAL   RTN,XRFHDNG              NOW LAST XREF HEADER   @AZ28946 61586000
         B     OUTEXIT                  RETURN TO EOF ROUTINE  @AZ28946 61587000
VJGARAM  EQU   *                                               @AZ28946 61588000
         CLI   PPIOC,RLDTYPE            TEST IF RLD RECORD              61590000
         BE    RLDOUT                   YES                             61600000
         CLI   PPIOC,XRFTYPE            TEST IF XREF RECORD             61670000
         BE    XRFOUT                   YES                             61740000
         CLI   PPIOC,LITTYPE            TEST IF LETERAL XREF RECORD     61810000
         BE    LITOUT                   BRANCH IF YES                   61880000
         B     RET                      RETURN TO CALLER                61910000
         SPACE                                                          62020000
OUTEXIT  ST    LINCTR,LNCTRSV           SAVE LINE COUNTER               62090000
         LM    R1,R10,SAVEALL                                           62160000
RET      JRETURN                        NEXT RECORD                     62190000
         EJECT                                                          63070000
************************************************************            63140000
*   RELOCATION LIST DICTIONARY PRINT ROUTINE.                           63210000
************************************************************            63280000
RLDOUT   EQU   *                                                        63350000
         GOIF  PROCRLD,ON=RLDGO         BRANCH IF NOT FIRST ENTRY       63420000
         LA    LINCTR,D1                DUMMY UP LINE COUNTER           63490000
         SET   PROCRLD,ON               INDICATE INVOLVED IN RLD NOW    63560000
         GOIF  (JDECK,JLINK),OFF=RLDGO   BRANCH IF NO RLD PUNCH OUTPUT  63630000
         BAL   RTN,PCHREC               LOCATE NEXT PUNCH BUFFER        63700000
RLDGO    EQU   *                                                        63770000
         GOIF  (JLIST,JRLD),NOTALL=RLDDL BRANCH IF NO LIST OUTPUT       63840000
         L     LOUTNDX,LOUTSV           SAVE LIST BUFFER POINTER        63910000
         BCT   LINCTR,RLDLST            BRANCH IF LIST HDG NOT NEEDED   63980000
         BAL   RTN,RLDHDNG              ELSE, BUILD ONE                 64050000
         LH    LINCTR,JLNCT             GET LINE COUNT PER PAGE         64120000
         ST    LINCTR,LNCTRSV                                           64190000
         MVI   RCNTRL,SPACE2            DOUBLE SPACE                    64260000
RLDLST   EQU   *                                                        64330000
         UNPK  UNPKAREA(L'UNPKAREA),POSID(L'POSID+L'RELID+L'RLDVAL+L'RLX64400000
               DFLG)                    UNPACK                          64470000
         MVN   UPFLGN(D1),RLDFLG        COMPLETE UNPACKING              64540000
         NC    UNPKAREA(L'UNPKAREA+1),MASK1 MASK OUT ZONE PORTION       64610000
         MVC   POSOUT,UPPOS             POSITIONAL ID                   64680000
         MVC   RELOUT,UPREL             RELATIONAL ID                   64750000
         MVC   VALOUT,UPVAL             ADDRESSE                        64820000
         MVC   FLGOUT,UPFLG             FLAGS                           64890000
         BAL   RTN,PRTREC               PRINT ONE LINE                  64960000
RLDDL    EQU   *                                                        65030000
         GOIF  (JDECK,JLINK),OFF=OUTEXIT  NEXT RECORD                   65100000
RLDBLD   EQU   *                                                        65170000
         LM    RLDCNT,R15,RFSAVE        RESTORE                         65240000
         CH    RLDCNT,H56               TEST IF BUFFER FULL             65310000
         BL    RLDBLD1                  BRANCH IF NOT                   65380000
         BAL   RTN,PCHREC               ELSE, PUNCH OUT RECORD          65450000
RLDBLD1  EQU   *                                                        65520000
         MVC   RELHLD,RELID             RELOCATION ID                   65590000
         MVC   POSHLD,POSID             POSITIONAL ID                   65660000
         MVC   FLGHLD,RLDFLG            RLD FLAGS                       65730000
         MVC   ADDRHLD,RLDVAL           RLD ASSEMBLED ORIGIN            65800000
         CLC   ESDCOMP,RLDHLD           TEST IF POS/REL ID CHANGED      65870000
         BNE   RLDB                     YES.                            65940000
         SH    R15,H4I                  BACK UP TO FLAG IN PREV ENTRY   66010000
         OI    D0(R15),SAMEID           INDICATE NEXT ENTRY HAS SAME ID 66080000
         AH    R15,H4I                                                  66150000
         LA    PARM2,FLGHLD             LOCATION OF ITEM TO BE MOVED    66220000
         LA    PARM1,D3                 AND ITS MOVE LENGTH             66290000
         B     RLDB1                    GO MOVE IT TO BUFFER            66360000
RLDBZ    EQU   *                                                        66430000
         BAL   RTN,PCHREC               LOCATE NEXT PUNCH BUFFER        66500000
RLDB     LA    PARM1,D7                 MOVE LENGTH FOR SAME-ID ENTRY   66570000
         LA    PARM2,RLDHLD             AND ITS LOCATION                66640000
         MVC   ESDCOMP,RLDHLD           UPDATE ESDCOMP                  66710000
RLDB1    LA    RLDCNT,D1(PARM1,RLDCNT)  UPDATE RLD DATA BYTE COUNT      66780000
         CH    RLDCNT,H56               IF IT ACCUMULATES               66850000
         BH    RLDBZ                    MORE THAN 56 BYTES MUST SPLIT   66920000
         EX    PARM1,MVCRLD             ELSE, MOVE INTO BUFFER          66990000
         STH   RLDCNT,JHWORD1           ENTER NUMBER OF BYTES ACCUM'D   67060000
         L     COUTNDX,PCHSAVE                                          67130000
         MVC   RLDBYT(L'RLDBYT),JHWORD1                                 67200000
         LA    R15,D1(PARM1,R15)        MIGHT HAVE ROOM FOR NEXT ENTRY  67270000
         STM   RLDCNT,R15,RFSAVE        SAVE                            67340000
         B     OUTEXIT                  READ NEXT CARD                  67410000
         DROP  COUTNDX                                                  67480000
*                                                                       67550000
MVCRLD   MVC   D0(0,R15),D0(PARM2)      OFF-THE-LINE MOVE               67620000
         EJECT                                                          67690000
************************************************************            67760000
*   SYMBOL CROSS-REFERENCE LISTING ROUTINE.                             67830000
************************************************************            67900000
         DROP  PARM2                                                    67970000
         USING PPIN,R5                                                  68040000
XRFOUT   EQU   *                                                        68110000
         LR    R5,PARM2                 SET BASE FOR XREF'S             68180000
         GOIF  PROCXRF,ON=XRFLST        BRANCH IF NOT FIRST ENTRY       68250000
         LA    LINCTR,D1                ELSE, FORCE OUT PREVIOUS LINE   68320000
         XC    SAVSYM(L'SAVSYM+L'UNDFSYM),SAVSYM ZERO OUT SAVE AREAS    68390000
         SET   PROCXRF,ON                                               68460000
         B     XRFLST                   GO PROCESS                      68510000
XRFOUT0  CLI   XRFFLG,BASE              DEF REC                         68520000
         BNE   XRFOUT2                  NO PROCESSING STARTS            68522000
         GOIF  LASTREC,ON=OUTEXIT       LAST REC NOTHING TO PRINT       68524000
         L     R1,NEXTREC               GET NEXT REC ADDR               68526000
         CLI   XRFFLG-XRFIN(R1),BASE    A DEF REC TOO                   68528000
         BE    OUTEXIT                  YES DO NOT PROCESS YET          68528400
XRFOUT2  SET   PROCXRF,ON               NOT DEF PROCESSING STARTS       68528800
XRFLST   EQU   *                                                        68530000
         MVC   STMTN2(D2),XRFSTM        ALIGN STMT # TO HWD BNDRY       68600000
         CLI   XRFFLG,REF               IS IT A REFERENCE RECORD        68670000
         BE    XREFIN                   BRANCH IF YES                   68740000
         BAL   RTN,XRFDEFS              ELSE, PROCESS DEFINITION        68810000
XRFEXIT  STM   LOUTNDX,XRFPTR,LOUTSV                                    68880000
         B     OUTEXIT                  READ NEXT CARD                  68950000
         SPACE 3                                                        69020000
XREFIN   EQU   *                                                        69090000
         SET   LASTREC,OFF              REF NO WORRIES                  69120000
         LM    LOUTNDX,XRFPTR,LOUTSV                                    69160000
         LA    PARM2,XPRTND             GET END PRINT BUFFER ADDRESS    69230000
         CR    XRFPTR,PARM2             TEST IF REFERENCE LINE FULL     69300000
         BL    XRFR0                    BRANCH IF STILL ROOM            69370000
         BAL   R1,HDLINE1               ELSE, PRINT THE LINE            69440000
XRFR0    EQU   *                                                        69510000
         L     R15,STMTNUM              XREF STATEMENT NUMBER           69580000
         BAL   RTN,CVTXRF               NUMBER FOR PRINTING.            69650000
         GOIF  PROCLIT,ON=XRFR2         SKIP IF PROCESSING LIT XREF     69720000
         CLC   SAVSYM,XRFSYM            SYMBOL = PREVIOUS SYMBOL        69790000
         BE    XRFR2                    YES, BYPASS UNDEFINED SYM CODE  69860000
         CLC   UNDFSYM,XRFSYM           UNDEFINED SYMBOL = TO LAST      69930000
         BE    XRFR2                    YES, GO PUT OUT REFERENCE NUM.  70000000
         GOIF  HEADOUT,ON=XRFR15        BRANCH IF BUFFER EMPTY          70070000
         GOIF  LASTDEF,ON=XRFR15        SKIP LAST BUF IF IT WAS DEF     70100000
         MVC   UPXSV(L'XRFENT),UPX      SAVE STMT NUMBER                70140000
         BAL   R1,HDLINE                ELSE, PRINT A LINE              70210000
         MVC   UPX(L'XRFENT),UPXSV      RESTORE STMT NUMBER             70280000
XRFR15   EQU   *                                                        70350000
         MVC   UNDFSYM,XRFSYM           SAVE UNDEFINED SYMBOL           70420000
         TR    XRFSYM,JTRTABLE          CONVERT SYMBOL TO INTERNAL CODE 70490000
         MVC   XSYMOUT,XRFSYM           XREF SYMBOL                     70560000
         MVC   XLENOUT(L'UNDFMSG),UNDFMSG    UNDEFINED MESSAGE          70630000
XRFR2    EQU   *                                                        70700000
         MVC   D0(L'XRFENT,XRFPTR),UPX  REFERENCE NUMBER                70770000
         LA    XRFPTR,XRENTL(,XRFPTR)   BUMP REF PRINT POINTER          70840000
         SET   HEADOUT,OFF                                              70910000
         SET   LASTDEF,OFF              REFERENCE RESETS DEF REC IND    70940000
         B     XRFEXIT                  GET OUT                         70980000
         SPACE 3                                                        71050000
HDLINE1  SET   HEADOUT,ON                                               71120000
HDLINE   EQU   *                                                        71190000
         ST    R1,R1SAVE                                                71260000
         L     LOUTNDX,LOUTSV           RESTORE BUFFER POINTER          71280000
         GOIF  LASTDEF,ON=HDLINE2       WAS LAST XREF A DEF             71300000
         GOIF  HEADPEND,OFF=HDLINE11    BR IF NOT XREF HEADER  @AZ28946 71303000
         MVC   RECSAVE,CONTROL          SAVE XREF RECORD       @AZ28946 71306000
         BAL   RTN,XRFHDNG              PRINT HEADER           @AZ28946 71308000
         LH    LINCTR,JLNCT             GET LINE COUNT         @AZ28946 71310000
         ST    LINCTR,LNCTRSV                                  @AZ28946 71312000
         MVC   CONTROL(L'RECSAVE),RECSAVE BACK SAVED XREF REC  @AZ28946 71314000
         MVI   XCNTRL,SPACE2            DOUBLE SPACE           @AZ28946 71321000
         SET   HEADPEND,OFF             RESET SW               @AZ28946 71324000
HDLINE11 EQU   *                                               @AZ28946 71327000
         BAL   RTN,PRTREC               PRINT ONE LINE                  71330000
HDLINE2  EQU   *                                                        71360000
         MVI   XCNTRL,SPACE1            SINGLE SPACE                    71400000
         BCT   LINCTR,HDLNX             EXIT IF PAGE NOT FULL           71470000
         GOIF  PROCXRF,OFF=HDLINE3      BR IF NOT XREF         @AZ28946 71480000
         GOIF  JMINXREF,OFF=HDLINE3     BR IF NOT XREF(SHORT)  @AZ28946 71490000
         SET   HEADPEND,ON              IND XREF HEADER PEND   @AZ28946 71500000
         B     HDLNX                    TRY NEXT XREF RECORD   @AZ28946 71510000
HDLINE3  EQU   *                                               @AZ28946 71520000
         BAL   RTN,XRFHDNG              ELSE, PRINT HEADING             71540000
         LH    LINCTR,JLNCT             GET LINE COUNT PER PAGE         71610000
         ST    LINCTR,LNCTRSV                                           71680000
         MVI   XCNTRL,SPACE2            DOUBLE SPACE                    71750000
HDLNX    LA    XRFPTR,XRFREF            GET REFERENCE POINTER           71820000
         L     R1,R1SAVE                                                71890000
         SET   LASTDEF,OFF              RESET DEF REC IND               71920000
         BR    R1                       BEFORE YOU GO                   71960000
         SPACE 3                                                        72030000
XRFDEFS  EQU   *                                                        72100000
         ST    RTN,RTNSV                SAVE RETURN LINKAGE             72170000
         GOIF  JMINXREF,ON=XRFDEF0      WORRIE ONLY IF SHORT XREF       72173000
         SET   LASTREC,OFF              SO CLEAR LAST REC IND           72176000
XRFDEF0  GOIF  LASTDEF,OFF=XRFDEFS0     WAS ALST REC ALSO A DEF REC     72180000
         L     LOUTNDX,LOUTSV           RESTORE BUFFER OPOINTER         72190000
         LA    XRFPTR,XRFREF            GET REFERENCE POINTER           72200000
         CLI   XRFFLG,DUPL              DUPL DEF                        72202000
         BE    XRFDEFS1                 YES CONT PROC                   72204000
         CLI   XOPCDE,X'FF'             FINISHED IF LAST REC ON OX02645 72206031
         BNE   XRFDEFS1                 FINIS                   OX02645 72206431
         MVI   D1(LOUTNDX),JBLANK       MAKE SURE NO INF PRINTED        72208000
         MVC   D2(D30,LOUTNDX),D1(LOUTNDX)                              72208400
         BR    RTN                      BYPASS OUTPUT                   72210000
XRFDEFS0 EQU   *                                                        72220000
         CLI   XRFFLG,DUPL              DUPL DEF REC                    72225000
         BE    XRFDEFSA                 YES PRINT IT                    72230000
         GOIF  LASTREC,ON=XRFDEFSA      FINISHED IF LST REC ON @AX14198 72235006
XRFDEFSA BAL   R1,HDLINE                UNLOAD PREVIOUS BUFFER          72240000
XRFDEFS1 MVC   SAVSYM,XRFSYM            SAVE XREF SYMBOL FOR FUTURE TST 72310000
         TR    XRFSYM,JTRTABLE          CONVERT SYMBOL TO INTERNAL CODE 72380000
         MVC   XSYMOUT,XRFSYM           XREF SYMBOL                     72450000
         B     XLREF1                   CONTINUE PROCESSING             72520000
XLREF    EQU   *                                                        72590000
         ST    RTN,RTNSV                                                72660000
XLREF1   EQU   *                                                        72730000
         XC    JFWORD1,JFWORD1          ALIGN LENGTH ATTRIBUTE VALUE    72800000
         MVC   JFWORD1+D2(D2),XRFLEN    IN A FULL WORD AREA             72840000
         L     R15,JFWORD1              CONVERT LENGTH ATTRIBUTE        72880000
         BAL   RTN,CVTXRF               AND MOVE IT TO                  72940000
         MVC   XLENOUT,UPX              PRINT BUFFER.                   73010000
         GOIF  PROCLIT,ON=LITVAL        BRANCH IF PROCESSING LITERAL    73080000
         UNPK  UPXVAL(L'UPXVAL),XRFVAL(L'XRFVAL+1) CONVERT LOC CTR      73150000
XLREF2   EQU   *                                                        73220000
         NC    UPXVAL(L'UPXVAL),MASK1   ZERO OUT ZONES                  73290000
         MVC   XVALOUT,UPXVAL           AND MOVE IT TO PRINT            73360000
         L     R15,STMTNUM              XREF DEF STATEMENT NUMBER       73430000
         BAL   RTN,CVTXRF               DEFINED AT AND MOVE IT TO       73500000
         MVC   XDEFOUT,UPX              PRINT BUFFER.                   73570000
         L     RTN,RTNSV                                                73640000
         CLI   XRFFLG,BASE              IS RECORD A DEFINITION ONE      73710000
         BC    12,XLREF3                YES BYPASS DUPLICATION CODE     73780000
         MVC   XRFREF(L'DUPMSG),DUPMSG  DUPLICATE SYMBOL MESSAGE        73850000
         SET   LASTDEF,OFF              DUPLICATE SHOULD BE PRINTED     73880000
         BR    RTN                      RETURN TO CALLER                73920000
XLREF3   GOIF  JMINXREF,OFF=(RTN)       IS SHORT XREF REQUESTED         73930000
         SET   LASTDEF,ON               YES INDICATE THIS WAS DEF REC   73940000
         BR    RTN                      RETURN TO CALLER                73950000
LITVAL   UNPK  UPXVAL(L'UPXVAL),LITLOCTR(L'LITLOCTR+1) GET LOCATION CTR 73990000
         B     XLREF2                   RESUME PROCESSING               74060000
         SPACE                                                          74130000
CVTXRF   CVD   R15,CVDCML                         CONVERT XREF DEF, OR  74200000
         UNPK  UPX(L'UPX),UPDCML(D3)    UNPACK                          74270000
         NC    UPX(L'UPX),MASK1         ZERO OUT ZONES                  74340000
         BR    RTN                      RETURN TO CALLER                74410000
         EJECT                                                          74480000
************************************************************            74550000
*   LITERAL CROSS-REFERENCE LISTING ROUTINE.                            74620000
*   THERE ARE NO SUCH RECORD TYPES AS DUPLICATE OR UNDEFINED ON LITERAL 74690000
*   CROSS REFERENCE RECORDS. IF FOUND, GIVE X4 A DUMP.                  74760000
************************************************************            74830000
LITOUT   EQU   *                                                        74900000
         LR    R5,PARM2                                                 74970000
         GOIF  PROCLIT,ON=LITLST        BRANCH IF NOT FIRST ENTRY       75040000
         GOIF  HEADPEND,OFF=LITOUT4     BR IF NO HEADER PEND   @AZ28946 75110000
         GOIF  LASTDEF,ON=LITOUT2       BR IF LAST REC = DEF   @AZ28946 75119000
         L     LOUTNDX,LOUTSV           RESTORE BUFFER POINTER @AZ28946 75128000
         MVC   RECSAVE,CONTROL          SAVE CURR XREF REC     @AZ28946 75132000
         BAL   RTN,XRFHDNG              PRINT XREF HEADER      @AZ28946 75136000
         MVC   CONTROL(L'RECSAVE),RECSAVE RESTOR XREF REC      @AZ28946 75146000
         MVI   XCNTRL,SPACE2            SET CONTR CHAR FOR SP2 @AZ28943 75155000
LITOUT2  EQU   *                                               @AZ28946 75164000
         SET   HEADPEND,OFF             RESET SW               @AZ28946 75173000
LITOUT4  EQU   *                                               @AZ28946 75182000
         LA    LINCTR,D1                DUMMY UP LINE COUNTER           75191000
         SET   PROCLIT,ON                                               75200000
         SET   PROCXRF,OFF              RESET SW               @AZ28946 75220000
LITLST   EQU   *                                                        75250000
         MVC   STMTN2(D2),XRFSTM        ALIGN STMT # TO HWD BNDRY       75320000
         CLI   XRFFLG,REF               TEST IF REFERENCE RECORD        75390000
         BE    XREFIN                   MAKE REFERENCE ENTRY IF YES     75460000
         SPACE 3                                                        75530000
LITDEFS  EQU   *                                                        75600000
         BAL   R1,HDLINE                PRINT HEADING IF NECESSARY      75670000
         LH    R15,LITPOLID                                             75740000
         CH    R15,LLOCTRSV                                             75810000
         BNH   LITD0                    BRANCH IF SAME POOL             75880000
         STH   R15,LLOCTRSV                                             75950000
LITD0    EQU   *                                                        76160000
         ST    R5,RFSAVE                SAVE RECORD POINTER             76230000
         SR    R15,R15                                                  76300000
         IC    R15,LITDTL               GET DATA LENGTH                 76370000
         CH    R15,H8I                  TEST IF LONGER THAN 8 CHAR.     76440000
         BH    LITD1                    YES, SPLIT INTO 2 LINES OR MORE 76510000
         BCTR  R15,0                    MAKE IT MOVE LENGTH             76580000
         EX    R15,LITMOVH              MOVE ALL INFORMATION INTO       76650000
         B     LITD5                    ONE LINE                        76720000
LITD1    EQU   *                                                        76790000
LITMOVH  MVC   LITSYM(D5),LITDTA        MOVE IN 5 BYTES                 76860000
         LA    R5,LITDTA+5              ADJUST POINTER                  76930000
         SH    R15,H5                                                   77000000
         CH    R15,H115                 TEST IF RECORD GT 115 CHAR      77070000
         BNH   LITD4                    BRANCH IF NOT                   77140000
LITD2    MVC   LITSYM5(XRL-5),D0(R5)    COMPLETE ONE LINE               77210000
         ST    R15,R15SAVE              SAVE LENGTH                     77280000
         BAL   R1,HDLINE                PRINT HEADING IF NECESSARY      77350000
         L     R15,R15SAVE              RESTORE LENGTH                  77420000
LITD3    SH    R15,H115                 DECREMENT BYTE COUNT            77490000
         AH    R5,H115                  BUMP POINTER                    77560000
         CH    R15,H115                 TEST IF STILL GT 115 CHAR       77630000
         BH    LITD2                    BRANCH IF YES                   77700000
LITD4    BCTR  R15,0                    MAKE IT MOVE LENGTH             77770000
         EX    R15,LITMOV               MOVE THE REST                   77840000
         CH    R15,H2                   TEST IF LAST LINE               77910000
         BNH   LITD5                    NOT MORE THAN 3 CHARACTERS      77980000
         BAL   R1,HDLINE                PRINT HEADING IF NECESSARY      78050000
LITD5    EQU   *                                                        78120000
         L     R5,RFSAVE                POINT BACK                      78190000
         BAL   RTN,XLREF                BUILD RECORD                    78260000
         B     XRFEXIT                  NEXT RECORD                     78330000
*                                                                       78400000
LITMOV   MVC   LITSYM5(0),D0(R5)        OFF-THE-LINE MOVE               78470000
         EJECT                                                          78540000
************************************************************            78610000
*   RLD HEADING ROUTINE                                                 78680000
************************************************************            78750000
RLDHDNG  STM   R1,R6,RTADDR             SAVE REGISTERS 1 - 6            78820000
         BAL   RTN,PGECNT               BUMP PAGE COUNT                 78890000
         GOIF  FIRST,ON=SECPRT          BRANCH IF SECOND PRINT @OY06558 78900005
         BAL   RTN,PRTREC                                               78920005
         SET   FIRST,ON                 SET FIRST PRINT ON     @OY08558 78930005
SECPRT   L     LOUTNDX,LOUTSV           RESTORE BUFFER POINTER @OY06558 78940005
         MVI   CONTROL,EJBYTE           EJECT TO NEW PAGE               79030000
         MVC   TITLE(L'JDECKID),JDECKID TITLE ID                        79100000
         MVC   HDGPTR(L'RLDH1),RLDH1    'RELOCATION DICTIONARY'         79170000
         MVC   PGEPTR(L'PAGE),PAGE      'PAGE'                          79240000
         MVC   PGENUM(L'PGENUM),UPX     RLD PAGE COUNT                  79310000
         BAL   RTN,PRTREC               PRINT ONE LINE                  79380000
         MVI   CONTROL,SPACE3           TRIPLE SPACE                    79450000
         MVC   TITLE(L'RLDH2),RLDH2     RLD HEADING 2                   79520000
         MVC   DTEPTR(L'JLVTMDT),JLVTMDT COMPNT-LEVEL-MONTH-DAY-YR      79590000
         B     HDNGX                    PRINT ONE LINE AND EXIT         79660000
         EJECT                                                          79730000
************************************************************            79800000
*   SYMBOL/LITERAL XREF HEADING ROUTINE                                 79870000
************************************************************            79940000
XRFHDNG  STM   R1,R6,RTADDR             SAVE ADDRESS OF CALLER          80010000
         BAL   RTN,PGECNT               CONVERT PAGE COUNT FOR PRINTING 80080000
         GOIF  LASTDEF,OFF=XRFHD0       DONT PRINT IF IT WAS DEF        80090000
         L     LOUTNDX,LOUTSV           RESTORE BUFFER POINTER          80100000
         B     XRFHD05                  BYPASS PRINT                    80110000
XRFHD0   EQU   *                                                        80120000
         L     LOUTNDX,LOUTSV           RESTORE BUFFER POINTER @OY06558 80170005
XRFHD05  EQU   *                                                        80180000
         MVI   CONTROL,EJBYTE           EJECT TO NEW PAGE               80220000
         MVC   TITLE(L'JDECKID),JDECKID TITLE ID                        80290000
         MVI   TITLE+D8,JBLANK         CLEAN HEADER LINE       @OX07206 80340003
         MVC   TITLE+D9(PGEPTR-TITLE-D9),TITLE+D8 CLN HDRLINE  @OX07206 80350003
         MVC   HDGPTR(L'XRFH1),XRFH1    'CROSS-REFERENCE'               80360000
         GOIF  PROCLIT,OFF=XRFHD1       BRANCH IF PROC'G LIT XREF       80430000
         MVC   HDGPTR(L'LITH1+L'XRFH1),LITH1 MOVE IN HEADING            80500000
XRFHD1   EQU   *                                                        80570000
         MVC   PGEPTR(L'PAGE),PAGE      'PAGE'                          80640000
         MVC   PGENUM(L'PGENUM),UPX     XREF PAGE COUNT                 80710000
         BAL   RTN,PRTREC               PRINT ONE LINE                  80780000
         MVI   CONTROL,SPACE3           TRIPLE SPACE                    80850000
         MVC   TITLE(L'XRFH2),XRFH2     XREF HEADING 2                  80920000
         MVC   DTEPTR(L'JLVTMDT),JLVTMDT COMPNT-LEVEL-MONTH-DAY-YEAR    80990000
HDNGX    EQU   *                                                        81060000
         BAL   RTN,PRTREC               PRINT ONE LINE                  81130000
         ST    LOUTNDX,RTADDR+4         OUTPUT POINTER                  81200000
         LM    R1,R6,RTADDR             ADDRESS OF CALLER               81270000
         BR    RTN                      RETURN TO CALLER                81340000
         EJECT                                                          81410000
************************************************************            81480000
*   PAGE COUNT SUBROUTINE                                               81550000
************************************************************            81620000
PGECNT   EQU   *                                                        81690000
         LH    R2,JPAGENO               XREF PAGE COUNT                 81760000
         LA    R2,D1(,R2)               INCREASE PAGE COUNT             81830000
         STH   R2,JPAGENO               SAVE PAGE NUMBER                81900000
         CVD   R2,CVDCML                CONVERT INTO DECIMAL            81970000
         UNPK  UPX(L'UPX),UPDCML(D3)    UNPACK                          82040000
         NC    UPX(L'UPX),MASK1         ZERO OUT ZONES                  82110000
         LA    R2,MASKLEN               COUNT FOR MASKING OUT LEADING 0 82180000
         LA    R3,UPX                   POINTER TO LEAD CHARACTER       82250000
LOOP     CLI   D0(R3),J0                TEST FOR LEADING ZEROS          82320000
         BCR   7,RTN                    BRANCH IF NOT ZERO              82390000
         MVI   D0(R3),JBLANK            MASK OUT ZERO WITH A BLANK      82460000
         LA    R3,D1(,R3)               STEP TO NEXT CHARACTER          82530000
         BCT   R2,LOOP                  LOOP BACK UP TO 3 TIMES         82600000
         BR    RTN                      RETURN TO CALLER                82670000
         EJECT                                                          93660000
************************************************************            93730000
*   THIS ROUTINE PRINTS ONE LINE ONTO PRINT FILE.                       93800000
************************************************************            93870000
PRTREC   EQU   *                                                        93940000
         ST    PARM2,FWORD                                              94010000
         JPRINT                         PRINT ONE LINE                  94080000
         LR    LOUTNDX,PARM2            GET BASE                        94150000
         ST    LOUTNDX,LOUTSV           SAVE POINTER                    94220000
         L     PARM2,FWORD                                              94290000
         BR    RTN                      RETURN TO CALLER                94360000
         SPACE 5                                                        94430000
************************************************************            94500000
*   THIS ROUTINE PUNCHES ONE LINE ONTO PUNCH FILE.                      94570000
************************************************************            94640000
         USING RCARD,COUTNDX                                            94710000
PCHREC   EQU   *                                                        94780000
         ST    PARM2,FWORD                                              94850000
         JPUNCH SEQ=YES                                                 94920000
         LR    COUTNDX,PARM2            AND SAVE ADDRESS                94990000
         MVI   CARDID,XBLANK            FILL BUFFER WITH EXTERNAL       95060000
         MVC   RLDNAM(RCARDL-1),CARDID  BLANKS                          95130000
         MVI   CARDID,J2                12-2-9 COMBINATION IN COLUMN 1  95200000
         MVC   RLDNAM,RLDC              RLD NAME EXTERNAL FORMAT        95270000
         LA    R15,RLDFLD               POINT TO DATA FIELD             95340000
         SR    RLDCNT,RLDCNT            INITIAL RLD COUNT               95410000
         ST    COUTNDX,PCHSAVE                                          95480000
         STM   RLDCNT,R15,RFSAVE        SAVE                            95550000
         XC    ESDCOMP,ESDCOMP                                          95620000
         L     PARM2,FWORD                                              95690000
         BR    RTN                      RETURN TO CALLER                95760000
         EJECT                                                          95830000
************************************************************            95900000
*   CONSTANTS, CONSTANTS, CONSTANTS                                     95970000
************************************************************            96040000
         DS    0F                                                       96250000
H1I      DC    H'1'                                                     96460000
H2       DC    H'2'                                                     96530000
H4I      DC    H'4'                                                     96600000
H5       DC    H'5'                                                     96670000
H7       DC    H'7'                                                     96740000
H8I      DC    H'8'                                                     96810000
H56      DC    H'56'                                                    96880000
H115     DC    H'115'                                                   96950000
RLDC     DC    CL3'RLD'                 EXTERNAL RLD NAME               97020000
RLDH1    JGENIN 'RELOCATION DICTIONARY'                                 97090000
RLDH2    JGENIN 'POS.ID   REL.ID   FLAGS   ADDRESS'                     97160000
PAGE     JGENIN 'PAGE'                                                  97230000
LITH1    JGENIN 'LITERAL '                                              97300000
XRFH1    JGENIN 'CROSS-REFERENCE'                                       97370000
XRFH2    JGENIN 'SYMBOL    LEN   VALUE   DEFN    REFERENCES'            97440000
DUPMSG   JGENIN '****DUPLICATE****'                                     97510000
UNDFMSG  JGENIN '****UNDEFINED****   '                         @OX10363 97580005
MASK1    DC    16X'0F'                  ZONE DELETOR                    97650000
         JPATCH X6A20,5E0             5% PATCH AREA                     97720000
         END   PPENT                                                    97790000
./  ADD  SSI=81850033,NAME=IFNX6B
* /* START OF SPECIFICATIONS ****                                       00140000
*02* PROCESSOR = ASSEMBLER                                              00150000
**** END OF SPECIFICATIONS ***/                                         00160000
         MACRO                                                          00170000
         BLDPRM &SW,&PARM                                               00180000
.*  THIS MACRO IS USED TO BUILD THE ASSEMBLER OPTIONS PRINT LINES FOR   00270000
.*   THE STATISTICS PRINT ROUTINE.                                      00360000
         GOIF  &SW,ON=MV&PARM           CHECK OPTION SWITCH             00450000
         EX    R0,MVNO                  IF OFF MOVE IN THE WORD NO      00540000
         LA    COUNT,L'NO(COUNT)        BUMP PRINT LINE INDEX           00630000
MV&PARM  LA    R2,P&PARM                GET ADDRESS AND                 00720000
         LA    R1,L'P&PARM.-D1(R0)          LENGTH OF PARM              00810000
         EX    R1,MVPARM                MOVE IN PARM                    00900000
         AR    COUNT,R1                 BUMP PRINT LINE INDEX           00990000
         LA    COUNT,D1(COUNT)          ADD 1 TO PRINT LINE INDEX       01080000
         MEND                                                           01170000
         SPACE 5                                                        01260000
         GBLC  &COMPNM,&ASMID           GLOBAL VARIABLES                01310000
         SPACE 5                                                        01360000
         JHEAD 'DIAGNOSTIC PHASE - PROLOG',                            C12960000
               PHASEID=X6B,                                            C13050000
               LEVEL=10                                                 13140000
*FUNCTION/OPERATION-                                                  * 13230000
*   THE DIAGNOSTIC PROCESSOR PHASE DECODES ERROR RECORDS AND LISTS    * 13320000
*   THE ASSOCIATED ERROR MESSAGES COMPLETE WITH DATA APPENDED TO THE  * 13410000
*   ERROR RECORDS INSERTED INTO THE MESSAGES AT THE POINTS NECESSARY  * 13500000
*   FOR INTELLEGENT READING.  IF THE RELOCATABLE YCON OR RE-ENTRANT   * 13590000
*   TEST FAILURE FLAGS ARE SET, THEIR ASSOCIATED WARNINGS ARE ALSO    * 13680000
*   LISTED.  OPTION STAT PRODUCES THE FOLLOWING STATISTICS AT THE     * 13770000
*   END OF THE ASSEMBLY LISTING-                                      * 13860000
*                                                                     * 13950000
*   1.  HIGHEST SEVERITY CODE ENCOUNTERED (IF ANY).                   * 14040000
*   2.  OPTIONS FOR THE ASSEMBLY.                                     * 14130000
*   3.  TOTAL RECORDS READ FROM SYSIN.                                * 14220000
*   4.  TOTAL RECORDS READ FROM SYSLIB.                               * 14310000
*   5.  TOTAL LINES PRINTED.                                          * 14400000
*   6.  TOTAL CARDS PUNCHED.                                          * 14490000
*                                                                     * 14580000
*   FINALLY IF  OPTION DECK IS EXERCISED AND THE ASSEMBLY HAS         * 14670000
*   PRODUCED OBJECT OUTPUT, AN END CARD WILL BE PUNCHED CONTAINING    * 14760000
*   THE FOLLOWING INFORMATION-                                        * 14850000
*                                                                     * 14940000
*   COLUMNS         CONTENTS                                          * 15030000
*     1             12-2-9 PUNCH                                      * 15120000
*     2-4           END                                               * 15210000
*     5             BLANK                                             * 15300000
*     6-8           ENTRY ADDRESS FROM SOURCE DECK END CARD OPERAND   * 15390000
*                   (BLANK IF NO OPERAND)                             * 15480000
*     9-14          BLANK                                             * 15570000
*     15-16         ESDID OF ENTRY POINT (BLANK IF NO OPERAND)        * 15660000
*     17 - 32       BLANK                                             * 15750000
*     33            NUMBER OF IDR ITEMS FOLLOWING                     * 15800000
*     34 - 43       TRANSLATOR IDENTIFICATION, PADDED                 * 15810000
*     44 - 45       VERSION LEVEL OF PROCESSOR                        * 15820000
*     46 - 47       MODIFICATION LEVEL OF PROCESSOR                   * 15830000
*     48 - 49       LAST TWO DIGITS OF YEAR                           * 15840000
*     50 - 52       DAY OF YEAR                                       * 15890000
*     53 - 71       SAME AS 34 - 52 FOR SECOND IDR IF PRESENT         * 15900000
*     72            BLANK                                             * 15910000
*     73-76         DECK ID (FROM FIRST TITLE CARD)                   * 16740000
*     77-80         CARD SEQUENCE NUMBER                              * 16830000
*                                                                     * 16920000
*                                                                     * 17010000
*                                                                     * 17100000
*                                                                     * 17190000
*ENTRY POINT-                                                         * 17280000
*   BEGIN                                                             * 17370000
*                                                                     * 17460000
*                                                                     * 17510000
*INPUT-                                                               * 17550000
*   ERROR RECORDS.  THE RECORD FORMAT IS-                             * 17640000
*                                                                     * 17730000
*   BYTE       CONTENTS                                               * 17820000
*   0-1        RECORD LENGTH                                          * 17910000
*   2          FLAG A                                                 * 18000000
*   3          FLAG B                                                 * 18090000
*   4          INTERNAL OP CODE                                       * 18180000
*   5          COLUMN POINTER                                         * 18270000
*   6-7        ERROR NUMBER CODE                                      * 18360000
*   8-9        STATEMENT NUMBER                                       * 18450000
*   10         NUMBER OF APPENDED 8-BYTE DATA ITEMS (MAXIMUM 10)      * 18540000
*   11-90      APPENDED 8-BYTE DATA ITEMS                             * 18630000
*                                                                     * 18720000
*OUTPUT-                                                              * 18810000
*   ERROR MESSAGES, NUMBER OF STATEMENTS FLAGGED, AND ASSEMBLY        * 18900000
*   STATISTICS WRITTEN TO THE PRINT FILE.  END CARD WRITTEN TO THE    * 18990000
*   PUNCH FILE.                                                       * 19080000
*                                                                     * 19170000
*EXTERNAL ROUTINES-                                                   * 19260000
*   N/A                                                               * 19350000
*EXITS, NORMAL-                                                       * 19440000
*   JRETURN                                                           * 19530000
*                                                                     * 19620000
*EXITS, ERROR-                                                        * 19710000
*   NONE                                                              * 19800000
*                                                                     * 19890000
*ATTRIBUTES-                                                          * 19980000
*   REFRESHABLE                                                       * 20070000
*                                                                     * 20160000
*                                                                     * 20250000
*                                                                     * 20340000
         SPACE 3                                                        20430000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   20480000
         COPY  JCOMMON                                                  20520000
         PRINT OFF                      DON'T PRINT JTEXT COPY CODE     20610000
         COPY  JTEXT                                                    20700000
         PRINT OFF                      DON'T PRINT JERRCD COPY CODE    20790000
         COPY  JERRCD                                                   20880000
         PRINT ON                       THAT'S ALL THE COPY CODE        20970000
         SPACE 2                                                        21150000
    TITLE '&COMPNM&ASMID - DIAGNOSTIC PHASE - X6B COMMON AREA (X6BCOM)' 21200000
X6BCOM   DSECT                          X6B COMMON AREA                 21330000
STRTCOM  DS    0D                       START OF X6B COMMON             21420000
DWORD1   DS    D                        DOUBLEWORD1                     21450000
DWORD2   DS    D                        DOUBLEWORD2                     21480000
DBLWD1   DS    D                        WORK                            21510000
DBLWD2   DS    0D                           AREAS                       21600000
         DS    CL3                                                      21690000
CSTMT    DS    0CL5                     CONVERTED STATEMENT NUMBER      21780000
         DS    C                                                        21870000
CERROR   DS    0CL4                     CONVERTED ERROR CODE            21960000
CPAGE    DS    0CL4                     CONVERTED PAGE NUMBER           22050000
         DS    CL1                                                      22140000
CCOLPTR  DS    CL3                      CONVERTED COLUMN POINTER        22230000
SAVERTN1 DS    F                        SAVE AREAS FOR                  22320000
SAVERTN2 DS    F                             RTN REGISTER               22410000
SVPRTBAS DS    F                        PRINT BUFFER BASE SAVE AREA     22500000
ERDATADR DS    F                       SAVE AREA FOR APPENDED DATA ADDR 22590000
FLDSAVE  DS    F                        SAVE AREA                       22620000
STRADR   DS    F                        STRING ADDRESS                  22650000
LSTMTNO  DS    F                        LAST STATEMENT NUMBER SAVE AREA 22660000
PGLINES  DS    H                        LINES PRINTED ON CURRENT PAGE   22680000
ERRQTY   DS    H                        COUNT OF STATEMENTS FLAGGED     22770000
CDSTMT   DS    H                        CARD WITHIN STMT                22880000
HWD      DS    H                        HALFWORD SAVE AREA              22900000
COLSAV   DS    H                        COLUMN SAVE AREA                22920000
SWITCHES DSW   STATSW,                  TO CONTROL STMT-ERROR-MSG HDNG X22950000
               NOBLK,                   LEFT ZERO SUPPRESSION CONTROL  *23040000
               ERRSW,                   UNDEFINED ERROR CODE SWITCH    X23070000
               ERLIT,                   ERROR AFTER LITERAL            X23100000
               COLOVLP                  COLUMN OVERLAP CHECK BIT        23130000
CARDP    DSW   CDPTR1                   CARD PTR FLAG                   23160000
TSPRINT  EQU   12                       TSO PRINT                       23190000
SEVCDE   DS    C                        SEVERITY CODE SAVE AREA         23220000
PRTLNSAV DS    CL120                    PRINT LINE SAVE AREA            23310000
BUFTERM  DS    31F                      124 BYTES FOR TERMINAL BUFFER   23350000
MNDX     EQU   R2                      MESSAGE INDEX                    23400000
MTABPTR  EQU   R3                      MTABLE BASE                      23490000
COUNT    EQU   R4                       COUNTING REGISTER               23580000
RTN      EQU   R5                       INTERNAL RETURN LINKAGE         23670000
INBASE   EQU   R6                       JGETL BUFFER BASE REGISTER      23760000
FILEREG  EQU   R10                      JGETL FILENAME PARAMETER REG    23850000
MSGLN    EQU   R10                     MESSAGE LENGTH                   23940000
PRTBASE  EQU   R11                      PRINT BUFFER BASE REGISTER      24030000
EJCT     EQU   X'00'                    EJECT THEN PRINT                24120000
SPACE1   EQU   X'01'                    SINGLE SPACE THEN PRINT         24210000
SPACE2   EQU   X'02'                    DOUBLE SPACE THEN PRINT         24300000
SPACE3   EQU   X'03'                    TRIPLE SPACE THEN PRINT         24390000
ENDCOM   EQU   *                        END OF X6BCOM COMMON AREA       24570000
    TITLE '&COMPNM&ASMID - DIAGNOSTIC PHASE - TERMINAL BUFFER DSECT ANDX24572000
                JTEXTA DSECT'                                           24572400
TERMBUF  DSECT                                                          24576000
BUFC     DS    C                        BUFFER RECORD LENGTH            24579000
PRTIMG   DS    0CL120                   LENGTH OF PRINTLINE             24582000
SEQNO    DS    CL8                      SEQUENCE NUMBER                 24585000
BLNK1    DS    CL4                      BLANKS                          24588000
STMTNO   DS    CL5                      STMT NUMBER                     24591000
GENFLG   DS    CL1                      GENERATED STMT FLAG             24594000
SOURCE   DS    CL80                     SOURCE IMAGE                    24597000
         ORG   SOURCE+72                                                24600000
SEQNUM   DS    CL8                      SEQ NUM FROM SOURCE             24603000
         ORG   PRTIMG                                                   24606000
ERCDE    DS    CL6                      ERROR CODE                      24609000
BLNK2    DS    CL1                      BLANK                           24612000
ERMSG    DS    CL101                    ERROR MESSAGE                   24615000
         SPACE 5                                                        24618000
JTEXTA   DSECT                          JTEXTA DSECT                    24621000
         ORG   JTOCO                                                    24624000
OPTR     DSW   CDPTR                    CARD PTR FLAG                   24627000
         ORG   JTOCO                    REORG FOR OTHER PTRS            24630000
OCPTR    DS    C                        OUTPUT COLUMN PTR               24633000
LENGTH   DS    C                        LENGTH OF FIELD                 24636000
FIELD    EQU   *                        FIELD IN TEXT RECORD            24639000
         SPACE 3                                                        24660000
         TITLE '&COMPNM&ASMID - DIAGNOSTIC PHASE - PRINT BUFFER DSECT AX24710000
               ND PUNCH BUFFER DSECT'                                   24720000
*                             GENERAL MESSAGE LINE HEADING              24750000
PRTBUF   DSECT                                                          24840000
         USING PRTBUF,R11               USING FOR ALL PRINT LINES       24930000
CNTRL    DS    C                        CONTROL BYTE                    25020000
PRTLINE  DS    0CL120                   GENERAL PURPOSE PRINT LINE      25110000
         DS    CL19                                                     25200000
MSGBEG   DS    CL101                    MESSAGE BEGINING                25290000
*                                                                       25380000
*                             PAGE HEADING FORMAT                       25470000
*                                                                       25560000
         ORG   PRTLINE                                                  25650000
HLDIAG2  DS    0C                      STMT - ERROR-CODE - MESSAGE      25740000
HLTITLE  DS    CL4                      TITLE ID                        25830000
         DS    CL46                                                     25920000
HLDIAG   DS    CL11                     DIAGNOSTIC HEADING              26010000
         DS    CL35                                                     26100000
HLDATE   DS    CL15                     DATE                            26190000
HLPAGE   DS    CL4                      PAGE                            26280000
         DS    C                                                        26370000
HLPGENO  DS    CL4                      PAGE NUMBER                     26460000
*                                                                       26550000
*                             ERROR MESSAGE FORMAT                      26640000
*                                                                       26730000
         ORG   PRTLINE                                                  26820000
ELSTMTNO DS    CL5                      ERROR STATEMENT NUMBER          26910000
         DS    CL2                                                      27000000
ELERPFIX DS    CL2                      COMPONENT PREFIX                27090000
ELERRCDE DS    CL4                      ERROR CODE                      27180000
         DS    CL6                                                      27270000
ELERMSG  DS    CL101                    BEGINING OF ERROR MESSAGE       27360000
         SPACE 3                                                        27450000
PCHBUF   DSECT                                                          27540000
PCNTRL   DS    C                        12-2-9 PUNCH                    27630000
PCLINE   DS    0CL71                    PUNCH LINE                      27720000
PCEND    DS    CL3                      END                             27810000
         DS    C                        BLANK                           27900000
PCENTAD  DS    CL3                      ENTRY FROM SOURCE END CD OPND   27990000
         DS    CL6                      BLANK                           28080000
PCESDID  DS    CL2                      ESDID OF ENTRY POINT            28170000
         DS    CL16                    BLANK                            28260000
PCCOMP   DS    CL(L'JIDR)              IDR                              28310000
MTBLE    DSECT                                                          28370000
MADDR    DS    H                        MESSAGE ADDRESS                 28390000
MLN      DS    H                        MOVE LENGTH OF MESSAGE          28410000
         SPACE 2                                                        28440000
    TITLE '&COMPNM&ASMID - DIAGNOSTIC PHASE '                           28490000
         JCSECT (X6B00)                                                 28530000
* VS1 RELEASE 5.0 CHANGES                                               28580005
*A560304,680370                                                @OX09734 28590005
*C669600                                                       @OX09734 28600005
*A664600                                                       @OX12916 28610006
*A557024,557028,557081-557083,667520,600400-600820             @AZ13738 28610400
*A681400,560305-560408                                         @AZ13738 28610500
*C681700,680370                                                @AZ13738 28610800
         JMODID                                                         28620000
*********************************************************************** 28710000
*              THIS IS THE MAIN LINE OF THE PHASE.  IT PERFORMS ANY   * 28800000
*              INITIALIZATION NECESSARY AND CHECKS THE OPTIONS        * 28890000
*              DESIRED (LIST, DECK, LINK).  IF NONE OF THESE OPTIONS  * 28980000
*              ARE REQUESTED, IT TERMINATES.  IN ADDITION, IF THE     * 29070000
*              FLAG IS SET TO INDICATE THE PRESENCE OF A RELOCATABLE  * 29160000
*              YCON, THAT MESSAGE IS CREATED.  IT THEN CHECKS THE     * 29250000
*              ERROR FLAG FOR OTHER ERRORS.  IF IT IS OFF, CONTROL IS * 29340000
*              PASSED TO THE NO-ERROR ROUTINE.  OTHERWISE IT BEGINS   * 29430000
*              GETTING RECORDS FROM THE INPUT FILE AND CHECKING THEM  * 29520000
*              FOR END-OF-DATA OR ERROR-RECORD FLAGS.  IF NEITHER OF  * 29610000
*              THESE FLAGS IS PRESENT, IT GETS ANOTHER RECORD.  OTHER-* 29700000
*              WISE IT TRANSFERS CONTROL TO THE APPROPRIATE SUBROUTINE* 29790000
*********************************************************************** 29880000
BEGIN    JSAVE                                                          29970000
         JENTRY (X6B01=BEGIN)                                           30060000
         USING X6BCOM,R7                USING FOR X6B COMMON            30240000
         LA    R10,(ENDCOM-STRTCOM+D7)/D8 SIZE OF COMMON                30330000
         JGETCORE DBL=(R10)                                             30420000
         LR    R7,R10                   BASE FOR X6B COMMON             30510000
         LA    R15,D1(R0)               INIT LINE CNT TO FORCE PG HDNG  30600000
         STH   R15,PGLINES               ON FIRST PRINT ATTEMPT         30690000
         L     R0,=H'-1'                                                30780000
         ST    R0,LSTMTNO               SET TO NEG TO COUNT STMT 0 ERR  30830000
         SR    R0,R0                    CLEAR REGISTER                  30840000
         ST    R0,JFWORD1               CLEAR WORK AREA                 30900000
         STH   R0,ERRQTY                INITIALIZE ERROR COUNT TO ZERO  30960000
         MVC   SEVCDE(L'SEVCDE),JSEVER  AND SEVERITY CODE               31050000
         STC   R0,SWITCHES              SET ALL SWITCHES TO OFF         31140000
         GOIF  (JDECK,JLINK),NONE=NPCH  IF NODECK NOLINK SKIP END CARD  31230000
         GOIF  JENDCHK,OFF=NPCH         IF END CARD SW OFF DONT PCH     31320000
         BAL   RTN,PUNCHEC                  ELSE GO TO END CARD ROUTINE 31410000
NPCH     GOIF  JTERM,OFF=SKTERM1        BRANCH IF TERM OFF              31460000
         USING TERMBUF,R11              SET UP USING FOR TERM BUFEER    31520000
         BAL   RTN,BUFINIT              INITIALIZE BUFFER               31530000
         MVI   BUFC,EJCT                MAKE A NEW PAGE                 31532000
         MVC   PRTIMG(L'ASMXF),ASMXF    PRINT XF DONE MESSAGE           31540000
         JTPRINT                        GET TERMINAL BUFFER             31550000
         BAL   RTN,BUFINIT              CLEAR BUFFER                    31552000
SKTERM1  EQU   *                        BRANCH LABEL                    31560000
         USING PRTBUF,R11               SET UP USING FOR PRINTBUF       31570000
         LA    R11,BUFTERM              PT TO TERM BUF INCASE NOLIST    31576000
         GOIF  JLIST,OFF=NPRT           BRANCH IF LIST OFF              31582000
         JPRINT                                                         31590000
NPRT     GOIF  (JMISLIN,JMISPCH,JINVOPT,JMISPRT,JMISTERM,JMISLIB),     *31680000
               NONE=REYCONCK                 CHECK FOR JCL ERRORS       31730000
         GOIF  JMISLIB,OFF=CKLDDER      SYSLIB DD CARD MISSING          31820000
         MVC   ELERRCDE+1(L'ELERRCDE-1),=AL1(J2,J6,J9)  SET UP ERR CDE  31830000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX               AND PREFIX     31840000
         MVC   ELERMSG(L'S269),S269     MOVE MESSAGE TO PRINT LINE      31850000
         BAL   RTN,TERMERR              PRINT ON SYSTERM TOO            31852000
         BAL   RTN,PRINT                GO TO PRINT ROUTINE             31854000
         CLI   SEVCDE,X'10'             IS SEVCDE HIGHER THAN 16        31856000
         BNL   CKLDDER                  YES - DON'T SAVE SEV CODE       31858000
         MVI   SEVCDE,X'10'             NO - SAVE SEV CODE              31858400
         SPACE                                                          31858800
CKLDDER  GOIF  JMISLIN,OFF=CKPRTER      SYSLIN DD CARD ERROR TEST       31860000
         MVC   ELERRCDE+1(L'ELERRCDE-1),=AL1(J2,J5,J6)  SET UP ERR CDE  31950000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX         AND PREFIX           32040000
         MVC   ELERMSG(L'S256),S256     MOVE MESSAGE TO PRINT LINE      32130000
         BAL   RTN,TERMERR              PRINT ON SYSTERM IF SO          32180000
         BAL   RTN,PRINT                GO TO PRINT ROUTINE             32220000
         CLI   SEVCDE,X'10'             IS SEV CODE HIGHER THAN 16      32310000
         BNL   CKPRTER                  YES - DON'T SACE SEV CODE       32312000
         MVI   SEVCDE,X'10'             NO - SAVE SEVERITY CODE         32314000
         SPACE                                                          32320000
CKPRTER  GOIF  JMISPRT,OFF=CKPDDER      SYSPRINT DD CARD ERROR TEST     32330000
         MVC   ELERRCDE+1(L'ELERRCDE-1),=AL1(J2,J6,J7) SET UP ERR CODE  32340000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX       AND PREFIX             32350000
         MVC   ELERMSG(L'S267),S267     MOVE MSG TO PRINT LINE          32360000
         BAL   RTN,TERMERR              PRINT ON SYSTERM IF SO          32362000
         BAL   RTN,PRINT                GO TO PRINT ROUTINE             32370000
         CLI   SEVCDE,X'10'             IS SEV CODE HIGHER THAN 16      32380000
         BNL   CKPDDER                  YES - DONT SAVE SEV CODE        32390000
         MVI   SEVCDE,X'10'             NO - SAVE SEVERITY CODE         32392000
         SPACE                                                          32400000
CKPDDER  GOIF  JMISPCH,OFF=CKTDDER      SYSPUNCH DD CARD ERROR TEST     32490000
         MVC   ELERRCDE+1(L'ELERRCDE-1),=AL1(J2,J5,J7)  SET UP ERR CDE  32580000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX         AND PREFIX           32670000
         MVC   ELERMSG(L'S257),S257     MOVE MESSAGE TO PRINT LINE      32760000
         BAL   RTN,TERMERR              PRINT ON SYSTERM IF SO          32810000
         BAL   RTN,PRINT                GO TO PRINT ROUTINE             32850000
         CLI   SEVCDE,X'10'             IS SEV CODE HIGHER THAN 16      32940000
         BNL   CKTDDER                  YES - DON'T SAVE SEV CODE       32990000
         MVI   SEVCDE,X'10'             NO - SAVE SEVERITY CODE         33000000
         SPACE                                                          33030000
CKTDDER  GOIF  JMISTERM,OFF=CKOPTER     SYSTERM DD CARD MISSING         33080000
         MVC   ELERRCDE+1(L'ELERRCDE-1),=AL1(J2,J6,J8)  SET UP ERR CDE  33090000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX         AND PREFIX           33100000
         MVC   ELERMSG(L'S268),S268     MOVE MESSAGE TO PRINT LINE      33110000
         BAL   RTN,TERMERR              PRINT ON SYSTERM IF SO          33112000
         BAL   RTN,PRINT                GO TO PRINT ROUTINE             33114000
         CLI   SEVCDE,X'10'             IS SEV CODE HIGHER THAN 16      33116000
         BNL   CKOPTER                  YES - DON'T SAVE SEV CODE       33118000
         MVI   SEVCDE,X'10'             NO - SAVE SEVERITY CODE         33118400
         SPACE                                                          33118800
CKOPTER  GOIF  JINVOPT,OFF=REYCONCK     INVALID OPTION ERROR TEST       33120000
         MVC   ELERRCDE+1(L'ELERRCDE-1),=AL1(J2,J5,J8)  SET UP ERR CDE  33210000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX         AND PREFIX           33300000
         MVC   ELERMSG(L'S258),S258     MOVE MESSAGE TO PRINT LINE      33390000
         BAL   RTN,TERMERR              PRINT ON SYSTERM IF SO          33440000
         BAL   RTN,PRINT                GO TO PRINT ROUTINE             33480000
         CLI   SEVCDE,X'10'             IS SEV CODE HIGHER THAN 16      33570000
         BNL   REYCONCK                 YES - DON'T SAVE SEV CODE       33620000
         MVI   SEVCDE,X'10'             NO - SAVE SEVERITY CODE         33630000
         SPACE                                                          33660000
REYCONCK GOIF  JESDOFLO,OFF=YCONCHK     BRANCH IF NO ESDID OVERFLOW     33710000
         MVC   ELERRCDE+D1(L'ELERRCDE-D1),=AL1(J2,J6,J4) SETUP ERR CODE 33720000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX  SETUP PREFIX                33730000
         MVC   ELERMSG(L'S264),S264     MOVE MSG TO PRINT LINE          33740000
         BAL   RTN,TERMERR              PRINT ON SYSTERM IF SO          33740400
         BAL   RTN,PRINT                GO TO PRINT ROUTINE             33742000
         CLI   SEVCDE,X'10'             IS SEV CODE HIGHER THAN 16      33744000
         BNL   YCONCHK                  YES - DON'T SAVE SEV CODE       33744400
         MVI   SEVCDE,X'10'             NO - SAVE SEVERITY CODE         33744800
         SPACE                                                          33746000
YCONCHK  GOIF  JYCON,OFF=ERRCHK         IF YCON SW OFF GO TEST ERROR SW 33750000
         MVC   ELERRCDE+1(L'ELERRCDE-1),=AL1(J2,J5,J9)  SET UP ERR CDE  33840000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX         AND PREFIX           33930000
         MVC   ELERMSG(L'S259),S259     MOVE MESSAGE TO PRINT LINE      34020000
         BAL   RTN,TERMERR              PRINT ON SYSTERM IF SO          34070000
         BAL   RTN,PRINT                GO TO PRINT ROUTINE             34110000
         CLI   SEVCDE,X'04'             IS SEV CODE HIGHER THAN 4       34200000
         BH    ERRCHK                   YES - DON'T SAVE SEV CODE       34290000
         MVI   SEVCDE,X'04'             NO - SAVE SEVERITY CODE         34380000
ERRCHK   EQU   *                                                        34470000
         TM    JPRTONLY,JPRONLY         SYMBOL TABLE OVERFLOWED         34520000
         BZ    ERRCHK1                  BRANCH IF NOT                   34530000
         MVC   ELERRCDE+D1(L'ELERRCDE-D1),=AL1(J2,J6,J5) SETUP ERRCDE   34540000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX    AND PREFIX                34550000
         MVC   ELERMSG(L'S265),S265     MOVE MSG TO PRINT LINE          34552000
         BAL   RTN,TERMERR              PRINT ON SYSTERM IF SO          34552400
         BAL   RTN,PRINT                GO PRINT MSG                    34554000
         CLI   SEVCDE,X'10'             IS SEV CODE HIGHER THAN 16      34556000
         BNL   ERRCHK1                  YES - DON'T SAVE SEV CODE       34556400
         MVI   SEVCDE,X'10'             NO - SAVE SEVERITY CODE         34556800
ERRCHK1  EQU   *                        BRANCH LABEL                    34558000
         GOIF  JERRCHK,OFF=NOERR        IF NO ERRORS GO TO NO ERROR RTN 34560000
GETRCD   EQU   *                                                        34650000
         LH    FILEREG,JINFILE          GET NAME OF INPUT FILE          34740000
         ST    PRTBASE,SVPRTBAS         SAVE PRINT BUFFER BASE REG      34830000
         JGETL FILE=(FILEREG)                                           34920000
         LR    INBASE,R11               ESTABLISH BASE FOR INPUT RCD    35010000
         USING JERRCD,INBASE            USING FOR INPUT RECORD          35100000
         L     PRTBASE,SVPRTBAS         RESTORE PRINT BUFFER BASE REG   35190000
         GOIF  JEEOF,EQ=EODRTN          CHECK FOR END-OF-DATA FLAG      35280000
         GOIF  JTERM,OFF=GETRCD1        TSO ON?                         35290000
         CLI   D4(INBASE),JT            IS IT A TEXT RECORD             35300000
         BNE   GETRCD1                  BRANCH IF NOT EQUAL             35310000
         LH    R1,D14(,INBASE)          GET STRING POINTER              35320000
         AR    R1,INBASE                POINT TO STRING GROUP           35330000
         ST    R1,STRADR                SAVE STRING GROUP POINTER       35340000
         MVC   CDSTMT,=H'1'             RESET CARD-WITHIN-STMT          35350000
         JCALL PRINTEXT                 CALL PRINT TEXT RECORD          35360000
         L     PRTBASE,SVPRTBAS         RE-RESTORE PRINT BUF BASE REG   35365000
         SET   ERLIT,OFF                RESET ERROR-AFTER LITERAL BIT   35370000
         B     GETRCD                   GO GET NEXT RECORD              35380000
GETRCD1  EQU   *                        BRANCH LABEL                    35390000
         GOIF  JEOPCOD,NE=GETRCD2       IS IT ERROR RECORD?             35400000
         BAL   RTN,ERRORTN              GO PROCESS ERROR RECORD         35410000
         B     GETRCD                   GET NEXT RECORD                 35420000
GETRCD2  EQU   *                        BRANCH LABEL                    35430000
         GOIF  JTERM,OFF=GETRCD         TSO ON?                         35440000
         CLI   D4(INBASE),JY            IS IT A LITERAL XREF            35450000
         BNE   GETRCD                   BRANCH TO GET RECORD IF NOT     35460000
         CLI   D4(INBASE),BIT6          IS IT LITERAL REFERENCE         35470000
         BE    GETRCD                   YES,GO GET NEXT RECORD          35480000
         SET   ERLIT,ON                 START OF LITERALS               35490000
         B     GETRCD                   GET NEXT RECORD                 35500000
BUFINIT  EQU   *                        INITIALIZE BUFFER               35510000
         USING TERMBUF,R11              USING FOR TERMINAL BUFFER       35520000
         LA    R11,BUFTERM              GET ADDRESS OF BUFFER           35530000
         MVI   BUFC,SPACE1              DO SINGLE SPACE                 35532000
         MVI   PRTIMG,JBLANK            SET 1ST CHAR TO BLANK           35540000
         MVC   PRTIMG+D1(L'PRTIMG-D1),PRTIMG  BLANK OUT BUFFER          35550000
         BR    RTN                      RETURN TO CALLER                35560000
EODRTN   EQU   *                                                        35640000
         USING PRTBUF,R11               SET UP USING FOR PRINTBUF       35721000
         B     STATRTN                  GO TO STATISTICS ROUTINE        35921000
         EJECT                                                          36270000
ERRORTN  EQU   *                                                        36360000
*              THIS ROUTINE RECEIVES CONTROL FROM THE MAIN LINE ONLY  * 36450000
*              IF THE ERROR FLAG (JERRCHK) IS ON.  IT PERFORMS THE    * 36540000
*              FOLLOWING FUNCTIONS-                                   * 36630000
*                                                                     * 36720000
*                  1.  INCREMENT COUNT OF STATEMENTS FLAGGED.         * 36810000
*                  2.  STORE HIGHEST SEVERITY CODE FROM ERROR RECORDS.* 36900000
*                  3.  SET UP PRINT LINE WITH STATEMENT NUMBER, ERROR * 36990000
*                      CODE AND COMPONENT PREFIX, AND ERROR MESSAGE.  * 37080000
*                  4.  INSERT A COLUMN POINTER OR APPENDED DATA FROM  * 37170000
*                      ERROR RECORD WHERE INDICATED IN MESSAGE.       * 37260000
*                  5.  TRANSFER CONTROL TO THE PRINT ROUTINE.         * 37350000
*                  6.  RETURN TO MAIN LINE.                           * 37440000
*                                                                     * 37530000
*              INPUT-                                                 * 37620000
*                                                                     * 37710000
*                  1.  ERROR RECORD POINTED TO BY INBASE.             * 37800000
*                  2.  OUTPUT BUFFER POINTED TO BY PRTBASE.           * 37890000
*********************************************************************** 37980000
         ST    RTN,SAVERTN1             SAVE RETURN LINKAGE             38070000
         MVC   JFWORD1+D4-L'JESTMTNO(L'JESTMTNO),JESTMTNO  GET          38170000
         L     COUNT,JFWORD1            STATEMENT NUMBER                38270000
         C     COUNT,LSTMTNO            IF SAME STATEMENT NUMBER        38370000
         BE    NOCOUNT                     DON'T COUNT IT AGAIN         38520000
         ST    COUNT,LSTMTNO            ELSE SAVE IT IF DIFFERENT       38610000
         LH    R0,ERRQTY                INCREMENT NUMBER OF STATEMENTS  38700000
         AH    R0,=H'01'                 FLAGGED AND                    38790000
         STH   R0,ERRQTY                   STORE IT BACK                38880000
         SPACE                                                          38970000
NOCOUNT  BAL   RTN,CONVERT              CONVERT IT                      39060000
         MVC   ELSTMTNO(L'CSTMT),CSTMT      MOVE IT TO PRINT LINE       39150000
CONTINUE SR    COUNT,COUNT              CLEAR COUNT REGISTER            39420000
         IC    COUNT,JERCDE             GET ERROR CODE FROM RECORD      39510000
         SET   NOBLK,ON                 TURN OFF LEFT ZERO SUPPRESSION  39600000
         BAL   RTN,CONVERT              CONVERT IT                      39690000
         SET   NOBLK,OFF                TURN ON LEFT ZERO SUPPRESSION   39780000
         MVC   ELERRCDE(L'CERROR),CERROR    MOVE IT TO PRINT LINE       39870000
         MVC   ELERPFIX(L'JPREFIX),JPREFIX  MOVE IN COMPONENT PREFIX    39960000
         SLL   COUNT,D2                 COMPUTE OFFSET IN MSG ADDT TBLE 40050000
         L     MNDX,=A(ERRMSGS)         GET ADDR OF START OF MSGS       40140000
         L     MTABPTR,=A(MTABLE)       BASE FOR MSG ADDR INDEX TABLE   40230000
         USING MTBLE,MTABPTR            USING FOR MSG ADDR INDEX TABLE  40320000
         AH    MNDX,MADDR(COUNT)        ADD OFFSET FOR MESSAGE          40410000
         LH    MSGLN,MLN(COUNT)         GET MESSAGE LENGTH              40500000
         GOIF  (MSGLN),NOTZERO=MOVEIT   TEST FOR UNDEFINED ERROR CODE   40590000
         SR    COUNT,COUNT                  UNDEFINED ERROR- GET LGTH   40680000
         LH    MSGLN,MLN(COUNT)             OF UNDEFINED ERR CDE MSG    40770000
         SET   ERRSW,ON                 TURN ON UNDEFINED ERROR CODE SW 40860000
         CLI   SEVCDE,X'10'             USE SEV OF 16                   40910000
         BNH   MOVEIT                                                   40920000
         MVI   SEVCDE,X'10'             SAVE HIGHEST SEVERITY CODE      40930000
         DROP  MTABPTR                                                  40950000
MOVEIT   EQU   *                                                        41040000
         STH   MSGLN,HWD                SAVE MESSAGE LENGTH             41090000
         EX    MSGLN,MOVEMSG            MOVE MSG TO PRINT LINE          41130000
         LA    R14,ELERMSG              INITIALIZE REG FOR TRT SCAN     41220000
         GOIF  ERRSW,OFF=GOODERCD       CHECK UNDEFINED ERROR CODE SW   41310000
         SET   ERRSW,OFF                TURN IT OFF IF IT IS ON         41400000
         AR    R14,MSGLN                FIND END OF UNDEFINED ERROR     41490000
         MVC   D2(D7,R14),ELERPFIX      MOVE UNDEF ERR CODE TO MESS     41540000
         MVC   ELERRCDE+D1(D3),=F'0'    MESSAGE NUMBER SHOULD BE ZERO   41550000
         LA    MSGLN,D8(MSGLN)          ADD ERROR NUMBER LENGTH         41560000
         STH   MSGLN,HWD                SAVE IT                         41570000
         LH    R14,JERECL               GET RECORD LENGTH               41580000
         B     ENDSCAN                  GO PRINT MESSAGE                41760000
GOODERCD EQU   *                                                        41850000
         GOIF  JESEV,SEVCDE,LE=APPDATA  CHECK SEVERITY CODE             41900000
         MVC   SEVCDE(L'JESEV),JESEV    SAVE HIGHEST SEVERITY CODE      41910000
APPDATA  EQU   *                                                        41920000
         LA    R0,JEDATA                GET INITIAL APPENDED DATA ADDR  41940000
         ST    R0,ERDATADR                  AND SAVE IT                 42030000
SCANMSG  SR    MNDX,MNDX                CLEAR FUNCTION REGISTER         42120000
         EX    MSGLN,SCANTRT            SCAN MSG FOR DATA INSERT FLAGS  42210000
         BZ    ENDSCAN                  SCAN COMPLETED                  42300000
         BAL   RTN,BRTABLE(MNDX)        GO TO BRANCH TABLE              42390000
         LR    COUNT,R1                 CHECK TO DETERMINE IF ALL OF    42480000
         SR    COUNT,R14                    MSG HAS BEEN SCANNED        42570000
         GOIF  (COUNT),(MSGLN),GE=ENDSCAN   IF SO TERMINATE SCAN        42660000
         SR    MSGLN,COUNT              IF NOT COMPUTE REMAINING LENGTH 42750000
         LR    R14,R1                       AND SCAN CONTINUE POINT     42840000
         B     SCANMSG                      AND RESUME SCAN             42930000
MOVEMSG  MVC   ELERMSG(0),0(MNDX)       EXECUTED MOVE FOR ERROR MSG TXT 43020000
SCANTRT  TRT   0(0,R14),TRTABLE         EXECUTED TRT FOR POUND OR DOLLR 43110000
MOVEDATA EQU   *                                                        43200000
         L     MNDX,ERDATADR            GET ADDR OF APPENDED DATA       43290000
         MVC   D0(D8,R1),D0(MNDX)       MOVE APPENDED DATA TO OVLAY FLG 43380000
         LA    MNDX,D8(MNDX)            INCREMENT TO NEXT APPENDED ITEM 43470000
         ST    MNDX,ERDATADR                AND SAVE IT                 43560000
         LA    R1,D8(,R1)               INCREMENT BY 8 FOR '$        '  43650000
         BR    RTN                      RETURN TO CALLER                43740000
MOVECOL  EQU   *                                                        43830000
         ST    RTN,SAVERTN2             SAVE RETURN LINKAGE             43920000
         LNR   COUNT,R1                 COMPUTE REMAINING LENGTH OF     44010000
         AR    COUNT,R14                    MESSAGE NOT YET SCANNED     44100000
         AR    COUNT,MSGLN                  THEN SUBTRACT 1 BECAUSE NOT 44190000
         LR    MNDX,COUNT                   MOVING FLAG ITSELF          44280000
         BCTR  COUNT,R0                 SAVE LENGTH OF REMAINING MSG    44370000
         AR    MNDX,R1                  ADD ADDRESS OF FLAG = MSG END   44460000
         LR    R15,MNDX                 SAVE BEGINING ADDR OF MOVE      44550000
         A     MNDX,=A(L'COLMSG)        ADD COLMSG LGTH TO TARGET ADDR  44640000
SHIFTMSG MVC   D0(D1,MNDX),D0(R15)      SHIFT LAST BYTE OF MSG TO RIGHT 44730000
         BCTR  MNDX,R0                  DECREMENT TO AND FROM ADDRESSES 44820000
         BCTR  R15,R0                       TO GET NEXT BYTE TO LEFT    44910000
         BCT   COUNT,SHIFTMSG           IF ALL OF MSG SHIFTED - STOP    45000000
         MVC   D0(L'COLMSG,R1),COLMSG   MOVE COL MSG TO VACATED AREA    45090000
         LH    COUNT,HWD                GET SAVED MSG LENGTH            45140000
         A     COUNT,=A(L'COLMSG)       MAKE LENGTH INCLUDE COLMSG      45150000
         STH   COUNT,HWD                SAVE NEW LENGTH FOR ENDSCAN     45160000
         SR    COUNT,COUNT              CLEAR COUNT REGISTER            45180000
         IC    COUNT,JECOLPTR           GET COLUMN POINTER              45270000
         BAL   RTN,CONVERT              CONVERT IT                      45360000
         MVC   L'COLMSG(L'CCOLPTR,R1),CCOLPTR  MOVE IT TO PRINT LINE    45450000
         LA    R1,D2(,R1)               INCREMENT BY 2 FOR '# ' IN MSG  45540000
         L     RTN,SAVERTN2             RETURN TO                       45630000
         BR    RTN                          CALLER                      45720000
ENDSCAN  LH    MNDX,HWD                 PICK UP SAVED MESSAGE LENGTH    45810000
         LA    R1,ELERMSG               GET ADDRESS OF MESSAGE IN TWO   45820000
         LR    R3,R1                     REGISTERS                      45822000
         AR    MNDX,R1                  COMPUTE END OF MESSAGE          45824000
ENDSCANA CLI   D0(R3),X'2F'             IS CHAR A BLANK                 45826000
         BNE   ENDSCANB                 NO - GO MOVE CHAR               45828000
         CLI   D1(R3),X'2F'             IS THERE A SECOND BLANK         45828400
         BNE   ENDSCANB                 NO - GO MOVE CHAR               45828800
         LA    R3,D1(R3)                UPDATE SCAN INDEX               45829200
         CR    R3,MNDX                  END OF MESSAGE REACHED          45829600
         BNH   ENDSCANA                 NO                              45829700
         B     ENDSCANC                 YES                             45829800
ENDSCANB MVC   D0(D1,R1),D0(R3)         MOVE ONE CHAR                   45829900
         LA    R1,D1(R1)                UPDATE INSERT INDEX             45836600
         LA    R3,D1(R3)                UPDATE SCAN INDEX               45838600
         CR    R3,MNDX                  END OF MESSAGE ?                45840600
         BNH   ENDSCANA                 NO - GO SCAN NEXT CHAR          45842600
ENDSCANC MVI   D0(R1),X'2F'             YES - FILL WITH BLANKS          45843000
         LA    R1,D1(R1)                UPDATE INSERT INDEX             45843100
         CR    R1,MNDX                  END OF MESSAGE REACHED          45843200
         BNH   ENDSCANC                 NO                              45849900
ENDSCAN2 BAL   RTN,TERMERR              GO PRINT ON SYSTERM IF SO       45870000
         BAL   RTN,PRINT                GO PRINT LINE                   45890000
         L     RTN,SAVERTN1             RETURN TO                       45990000
         BR    RTN                          CALLER                      46080000
         EJECT                                                          46130000
*    PRINT ERROR MESSAGE ON SYSTERM DATA SET                            46140000
*    TAKE MESSAGE FROM SYSPRINT BUFFER AND                              46150000
*    REMOVE UNNESSASARYBLANKS                                           46160000
         USING TERMBUF,R11              ESTABLISH BASE FOR TERM BUFFER  46162000
TERMERR  GOIF  JTERM,OFF=(RTN)          RETURN IF NOTERMINAL USED       46164000
         LR    R4,R11                   SAVE SYSPRINT BUFFER POINTER    46166000
         LR    R3,RTN                   SAVE RETURN REGISTER            46168000
         LA    R11,BUFTERM              GET TERM BUFFER ADDR            46168400
         MVC   ERCDE,D8(R4)             MOVE MESSAGE NUMBER             46168800
         MVC   ERMSG,D20(R4)            MOVE MESSAGE TEXT               46169200
         JTPRINT                        PRINT BUFFER                    46169600
         BAL   RTN,BUFINIT              INITIALIZE BUFFER               46169700
         LR    RTN,R3                   RESTORE RETURN REGISTER         46169800
         LR    R11,R4                   RESTORE BUFFER POINTER          46169900
         BR    RTN                      RETURN TO CALLER                46170000
         SPACE 3                                                        46199900
*  PRINT STATISTICS LINES ON SYSTERM IF TERM OPTION USED                46209900
TERMSTAT GOIF  JTERM,OFF=(RTN)          RETURN IF NOTERMINAL USED       46219900
         LR    R4,R11                   SAVE SYSPRINT BUFFER POINTER    46229900
         ST    R3,JFWORD2               SAVE  THIS REGISTER IF SYSPARM  46231900
         LR    R3,RTN                   SAVE RETURN REGISTER            46239900
         LA    R11,BUFTERM              GET TERM BUFFER ADDR            46249900
         MVC   PRTIMG(L'PRTLINE),D1(R4)  MOVE LINE TO SYSTERM BUF       46253200
         JTPRINT                        PRINT IT                        46255200
         BAL   RTN,BUFINIT              INITIALIZE BUFFER               46255300
         LR    RTN,R3                   RESTORE RETURN REG              46255600
         LR    R11,R4                   RESTORE BUFFER POINTER          46256000
         L     R3,JFWORD2               RESTORE REG AGAIN               46256100
         BR    RTN                      RETURN TO CALLER                46256400
          EJECT                                                         46256700
         USING PRTBUF,R11               ESTABLISH BASE                  46258700
PRINT    EQU   *                                                        46260000
*********************************************************************** 46350000
*              THE PRINT ROUTINE CONTROLS PAGE SKIPPING AND PAGE      * 46440000
*              HEADING.                                               * 46530000
*********************************************************************** 46620000
         GOIF  JLIST,OFF=(RTN)          RETURN IF LIST IS OFF           46660000
         ST    RTN,SAVERTN2             SAVE RETURN LINKAGE             46710000
         LH    COUNT,PGLINES            CHECK FOR END OF PAGE.  IF NOT  46800000
         BCT   COUNT,WRITEMSG             END OF PAGE GO WRITE MSG.     46890000
*                                         ELSE SET UP AND PRINT NEW     46980000
*                                         PAGE HEADING ON NEW PAGE.     47070000
         LH    COUNT,JPAGENO            GET PAGE NUMBER                 47160000
         AH    COUNT,=H'01'             INCREMENT PAGE NUMBER           47250000
         STH   COUNT,JPAGENO            PUT BACK NEW PAGE NUMBER        47340000
         MVC   PRTLNSAV(L'PRTLINE),PRTLINE  SAVE PRINT LINE IN BUFFER   47430000
         MVI   PRTLINE,JBLANK           BLANK PRINT BUFFER              47520000
         MVC   PRTLINE+D1(L'PRTLINE-D1),PRTLINE                         47610000
         MVI   CNTRL,EJCT               INSERT EJECT CONTROL CHARACTER  47700000
         MVC   HLTITLE(L'JDECKID),JDECKID TITLE PART OF FIRST HDNG LINE 47790000
         MVC   HLDIAG(L'HDNG1),HDNG1    MOVE IN HDNG PART OF FIRST LINE 47880000
         MVC   HLPAGE(L'PAGE),PAGE      MOVE IN 'PAGE'                  47970000
         BAL   RTN,CONVERT              CONVERT PAGE NUMBER             48060000
         MVC   HLPGENO(L'CPAGE),CPAGE   MOVE IN PAGE NUMBER             48150000
         JPRINT                                                         48240000
         GOIF  STATSW,ON=STATONLY       CHECK STATSW BEFORE NEXT INSTR  48330000
         MVC   HLDIAG2(L'HDNG2),HDNG2   STMT-ERROR-CODE-MESSAGE HEADING 48420000
STATONLY MVI   CNTRL,SPACE3             TRIPLE SPACE                    48510000
         MVC   HLDATE(L'JLVTMDT),JLVTMDT  COMP-LEVEL-TIME-DATE          48600000
         JPRINT                                                         48690000
         MVI   CNTRL,SPACE2             INSERT DOUBLE SPACE CHAR        48780000
         MVC   PRTLINE(L'PRTLNSAV),PRTLNSAV  RESTORE ORIG PRINT LINE    48870000
         LH    COUNT,JLNCT              RESET LINE COUNT PER PAGE       48960000
WRITEMSG EQU   *                                                        49050000
         JPRINT                                                         49140000
         STH   COUNT,PGLINES            SAVE LINE COUNT PER PAGE        49230000
         L     RTN,SAVERTN2             RESTORE LINKAGE TO CALLER       49320000
         BR    RTN                      RETURN TO CALLER                49410000
         EJECT                                                          49500000
CONVERT  EQU   *                                                        49590000
*********************************************************************** 49680000
*              THE CONVERT ROUTINE RECIEVES A BINARY NUMBER IN COUNT  * 49770000
*              (REGISTER 4) AND CONVERTS IT TO INTERNAL FORMAT IN     * 49860000
*              DBLWD2.  IT ALSO SUPPRESSES LEADING ZEROS BASED UPON   * 49950000
*              THE SETTING OF THE FLAG NOBLK.                         * 50040000
*********************************************************************** 50130000
         CVD   COUNT,DBLWD1             CONVERT BINARY NO. TO DECIMAL   50220000
         UNPK  DBLWD2,DBLWD1            UNPACK IT                       50310000
         NC    DBLWD2,=X'0F0F0F0F0F0F0F0F'  STRIP ZONES FOR INTL FORMAT 50400000
         GOIF  NOBLK,ON=GOBACK          IF LEFT ZERO SUPP OFF EXIT      50490000
         LA    R15,DBLWD2               ADDRESS OF NUMBER               50580000
         LA    R14,L'DBLWD2-1           LENGTH OF NUMBER                50670000
SZEROS   CLI   D0(R15),J0               SCAN FOR LEADING ZERO           50760000
         BNE   GOBACK                   IF NOT ZERO EXIT                50850000
         MVI   D0(R15),JBLANK           IF ZERO - BLANK IT              50940000
         LA    R15,D1(R15)              INDEX TO NEXT CHARACTER         51030000
         BCT   R14,SZEROS               GO BACK AND SCAN IT             51120000
GOBACK   BR    RTN                      RETURN TO CALLER                51210000
*  SUPPRESS LEADING BLANKS IN THE FLAG AND LINECOUNT OPTION VALUES      51260000
*  IN THE OPTIONS PRINT BUFFER AND RETURNS WITH R1 POINTING TO THE      51270000
*  LAST CHARACTER IN THE VALUE                                          51280000
BLNKSUP  EQU   *                                                        51290000
         LA    COUNT,L'CPAGE-1          GET MOVE LENGTH OF FIELD        51292000
SBLANKS  GOIF  D0(R1),JBLANK,NE=BACK    RETURN ON FIRST NONBLANK        51294000
         EX    COUNT,MVFIELD            DELETE ONE BLANK CHAR           51298800
         BCT   COUNT,SBLANKS            DECREMENT MOVE LENGTH           51310200
BACK     AR    R1,COUNT                 POINT TO LAST CHAR IN VALUE     51333000
         LA    R1,D1(R1)                                                51344400
         BR    RTN                      RETURN TO CALLER                51355800
MVFIELD  MVC   D0(COUNT,R1),D1(R1)      MOVE ONE CHAR TO THE LEFT       51367200
         EJECT                                                          51378600
NOERR    EQU   *                                                        51390000
         USING PRTBUF,R11               SET UP USING FOR PRINTBUF       51460000
STATRTN  EQU   *                                                        52740000
         SET   STATSW,ON                TURN ON STATISTICS SWITCH       53550000
         LH    R0,PGLINES               CHECK NUMBER OF LINES LEFT ON   53640000
         CH    R0,=H'15'                   PAGE. IF GT/EQ TO THE REQ'D  53730000
         BNL   DSKIP                       NUMBER DONT EJECT PAGE.      53820000
         LA    COUNT,D1(R0)             FORCE SKIP TO                   53910000
         STH   COUNT,PGLINES                NEW PAGE                    54000000
DSKIP    MVI   CNTRL,SPACE2             SET UP DOUBLE SPACE             54090000
         LH    COUNT,ERRQTY             GET TOTAL COUNT OF ERRORS       54120000
         GOIF  (COUNT),ZERO=NOERRS      ANY ERRORS.  BRANCH IF NONE     54150000
         MVC   PRTLINE(L'ERCTMSG),ERCTMSG  SET UP NR OF ERRS MSG        54180000
         BAL   RTN,CONVERT              CONVERT NUMBER OF ERRORS        54280000
         MVC   PRTLINE+L'ERCTMSG(L'CSTMT),CSTMT  MOVE IT TO PRINT LINE  54450000
         B     NOEPRINT                 BRANCH TO PRINT IT              54490000
NOERRS   MVC   PRTLINE(L'NOERMSG),NOERMSG  NO ERROR MSG                 54530000
NOEPRINT BAL   RTN,TERMSTAT             PRINT ON SYSTERM TOO            54550000
         BAL   RTN,PRINT                GO PRINT MESSAGE                54600000
         MVC   PRTLINE(L'SEVMSG),SEVMSG  SET UP SEVERITY CODE MESSAGE   54695800
         SR    COUNT,COUNT              CLEAR COUNT REGISTER            54720000
         IC    COUNT,SEVCDE             GET HIGHEST SEVERITY CODE       54810000
         BAL   RTN,CONVERT              AND CONVERT IT                  54900000
         MVC   PRTLINE+L'SEVMSG(L'CPAGE),CPAGE  MOVE IT TO PRINT LINE   54990000
         BAL   RTN,TERMSTAT             PRINT ON SYSTERM TOO            55040000
         BAL   RTN,PRINT                GO PRINT IT                     55080000
         MVC   PRTLINE(L'OPTM1),OPTM1   MOVE IN ASM OPTNS MESSAGE       55170000
         BAL   RTN,TERMSTAT             PRINT ON SYSTERM TOO            55220000
         BAL   RTN,PRINT                PRINT IT                        55260000
         LA    COUNT,PRTLINE+D2(R0)     START OF MESSAGE                55350000
         BLDPRM JALGN,ALGN                                              55440000
         BLDPRM JALOGIC,ALOGIC                                          55530000
         LA    R2,PBUF                  GET ADDRESSS AND LENGTH OF PARM 55580000
         LA    R1,L'PBUF-D1(R0)                                         55630000
         EX    R1,MVPARM                MOVE IN PARM                    55680000
         AR    COUNT,R1                 BUMP PRINT LINE INDEX           55690000
         TM    JPARM3,JMINBUF           MINIMUM BUFFER SIZE             55700000
         BO    MVMIN                    YES                             55702000
         TM    JPARM4,JMBUF             BR IF MULTIPEL-        @AZ13738 55702400
         BO    MVMAX                    BUFFERS USED.          @AZ13738 55702800
         MVC   D0(L'STD,COUNT),STD      STANDARD BUFFER SIZE USED       55704000
         LA    COUNT,L'STD(COUNT)       BUMP PRINT LINE INDEX           55706000
         B     MVBUF                    TAKE NEXT OPTION                55708000
MVMAX    MVC   D0(L'MAX,COUNT),MAX      MBUF USED              @AZ13738 55708100
         LA    COUNT,L'MAX(COUNT)       BUMP PRINT LINE INDEX  @AZ13738 55708200
         B     MVBUF                    TAKE NEXT OPTION       @AZ13738 55708300
MVMIN    MVC   D0(L'MIN,COUNT),MIN      MINIMUM BUFFER SIZE USED        55708400
         LA    COUNT,L'MIN(COUNT)       BUMP PRINT LINE INDEX           55708800
MVBUF    LA    COUNT,D1(COUNT)          ADD 1 TO PRINT LINE INDEX       55709200
         BLDPRM JDECK,DECK                                              55710000
         BLDPRM JESD,ESD                                                55760000
         LR    R1,COUNT                 TRANSFER POSITION PTR TO R1     55810000
         MVC   D0(L'PFLAG,R1),PFLAG      MOVE IN FLAG(                  55860000
         LA    R1,L'PFLAG(R1)           BUMP PRINT LINE INDEX           55960000
         SR    COUNT,COUNT              CLEAR COUNT REGISTER            55970000
         IC    COUNT,JMSGL              GET MESSAGE LEVEL               55972000
         BAL   RTN,CONVERT                AND CONVERT IT                55974000
         MVC   D0(L'CPAGE,R1),CPAGE     MOVE IN CONVERTED MSGLEVEL      55976000
         BAL   RTN,BLNKSUP              SUPRESS LEADING BLANKS          55978000
         MVI   D0(R1),JRPARN            SUPPLY RIGTH PAREN              55978800
         LA    R1,D1(R1)                ADD 1 TO PRINT LINE INDEX       55979200
         MVC   D0(L'PLC,R1),PLC         MOVE IN ', LINECOUNT('          55979600
         LA    R1,L'PLC(R1)             BUMP PRINT LINE INDEX           55979700
         LH    COUNT,JLNCT              GET LINE COUNT                  55979800
         BAL   RTN,CONVERT                AND CONVERT IT                55979900
         MVC   D0(L'CPAGE,R1),CPAGE     MOVE IN CONVERTED LINE COUNT    55996600
         BAL   RTN,BLNKSUP              SUPRESS LEADING BLANKS          56006600
         MVI   D0(R1),JRPARN            SUPPLY RIGTH PAREN              56010600
         MVI   D1(R1),JCOMMA                 AND COMMA                  56011000
         MVI   D2(R1),JBLANK               AND A BLANK                  56011400
         LA    R1,D3(R1)                ADD 1 TO PRINT INE INDEX        56012600
         LR    COUNT,R1                 RESTORE PRINT LINE INDEX        56022600
         BLDPRM JLIST,LIST                                              56024400
         BLDPRM JCALLS,CALLS                                            56030000
         BLDPRM JYFLAG,YFLAG                                   @OX09734 56030405
         LR    R1,COUNT                 TRASF.PRT LINE INDX    @AZ13738 56030500
         MVC   D0(L'PSIZE,R1),PSIZE     MOVE IN 'WORKSIZE('    @AZ13738 56030800
         LA    R1,L'PSIZE(R1)           BUMP PRINT LINE INDEX  @AZ13738 56031200
         L     COUNT,CORESIZE           GET REQUESTED CORE     @AZ13738 56031600
         BAL   RTN,CONVERT              CONVERT VALUE          @AZ13738 56031700
         MVC   D0(L'DBLWD2,R1),DBLWD2   MOVE VALUE TO PRINT LN @AZ13738 56031800
         LA    COUNT,L'DBLWD2-1         GET MOVE LENGH         @AZ13738 56031900
         BAL   RTN,SBLANKS              SUPPR LEADING BLANKS   @AZ13738 56036400
         MVI   D0(R1),JRPARN            SUPPLY RIGHT PAREN     @AZ13738 56038400
         LA    R1,D1(,R1)               ADD 1 TO PRINT INDEX   @AZ13738 56040400
         LR    COUNT,R1                 RESTORE PRINT LINE NDX @AZ13738 56040800
         BAL   RTN,TERMSTAT             PRINT ON SYSTERM                56041000
         BAL   RTN,PRINT                PRINT THIS OPTION LINE          56045500
         LA    COUNT,PRTLINE+D2         START OF MESSAGE LINE           56050000
         BLDPRM JMLOGIC,MLOGIC                                          56070000
         BLDPRM JNUM,NUM                                                56080000
         BLDPRM  JLINK,LOAD                                             56120000
         BLDPRM JRENT,RENT                                              56160000
         BLDPRM JRLD,RLD                                                56250000
         BLDPRM JSTMT,STMT                                              56300000
         BLDPRM  JSYSMAC,SYSMAC                                         56430000
         BLDPRM JTERM,TERM                                              56480000
         BLDPRM JTEST,TEST                                              56520000
         BLDPRM JXREF,XREF                                              56610000
         GOIF  JMINXREF,OFF=XRFPRT      SHORT XREF                      56660000
         BCTR  COUNT,R0                 DECR COUNT TO GET NO BLANK      56860000
         MVC   D0(L'SHORT,COUNT),SHORT  YES TELL IT                     57060000
         LA    COUNT,L'SHORT+D1(COUNT)  UPDATE POINTER                  57260000
XRFPRT   BAL   RTN,TERMSTAT             PRINT ON SYSTERM                57460000
         BAL   RTN,PRINT                GO PRINT IND LINE OF ASM OPTNS  58050000
         LA    R1,PRTLINE+D2            START OF MESSAGE LINE           58140000
         MVC   D0(L'PSYSPARM,R1),PSYSPARM  MOVE IN 'SYSPARM = '         58230000
         LA    R1,L'PSYSPARM(R1)        BUMP PRINT LINE INDEX           58320000
         L     R2,JSYSPARM              GET ADDRESS OF SYSPARM          58410000
         GOIF  (R2),ZERO=PRTSTAT        IF NO SYSPARM SKIP CODE TO MOVE-58500000
                                            IT TO PRINT LINE.           58590000
         SR COUNT,COUNT                 CLEAR COUNT REGISTER            58680000
         IC    COUNT,D0(R2)             GET LENGTH OF SYSPARM           58770000
         SH    COUNT,=H'01'             COMPUTE MV LGTH OF SYSPARM      58860000
         LA    R3,L'PRTLINE-L'PSYSPARM-D2(R0)  COMPUTE LGTH OF PRT LINE-58950000
                                            AVAILABLE FOR SYSPARM MSG   59040000
         SR    COUNT,R3                 DETERMINE NO OF LINES NEEDED    59130000
         BNM   LINE2                    BRANCH IF 2 OR 3                59180000
         AR    COUNT,R3                 MAKE COUNT EQUAL TO MOVE LENGTH 59190000
         B     LPRT                     PRIMT                           59200000
LINE2    EX    R3,MSYSPARM              MOVE LINE 1 TO BUFFER           59210000
         STH   COUNT,HWD                SAVE LENGTH OF REMAINDER        59220000
         BAL   RTN,TERMSTAT             PRINT ON SYSTERM                59230000
         BAL   RTN,PRINT                PRINT                           59270000
         AR    R2,R3                    UPDATE SYSPARM MESSAGE INDEX    59280000
         LA    R1,PRTLINE+D2            MAKE 2 BLANKS FIRST IN LINE     59290000
         LA    R3,L'PRTLINE-D2(R0)      COMPUTE  LENGTH OF FULL LINE    59300000
         LH    COUNT,HWD                RESTORE LENGTH OF REMAINDER     59310000
         SR    COUNT,R3                 IS 3 LINES NEEDED               59360000
         BNM   LINE3                    BRANCH IF YES                   59370000
         AR    COUNT,R3                 MAKE COUNT MOVE LENGTH OF REM   59380000
         B     LPRT                     PRIMT                           59390000
LINE3    EX    R3,MSYSPARM              MOVE 2ND LINE OF 3              59400000
         STH   COUNT,HWD                SAVE LENGTH OF REMAINDER        59450000
         BAL   RTN,TERMSTAT             PRINT ON SYSTERM                59452000
         BAL   RTN,PRINT                PRINT                           59460000
         AR    R2,R3                    UPDATE SYSPARM MESSAGE INDEX    59470000
         LA    R1,PRTLINE+D2            POINT TO BUFFER +2              59480000
         LH    COUNT,HWD                RESTORE LENGTH OF REMAINDER     59490000
LPRT     EX    COUNT,MSYSPARM           MOVE REMAINING CHARATERS        59540000
         AR    R1,COUNT                 BUMP PRINT LINE INDEX           59590000
         LA    R1,D1(R1)                BUMP PRINT LINE INDEX           59600000
PRTSTAT  MVI   D0(R1),JRPARN            SUPPLY RIGTH PAREN              59640000
         BAL   RTN,TERMSTAT             PRINT ON SYSTERM                59650000
         BAL   RTN,PRINT                GO PRINT SYSPARM                59690000
         LA    R1,PRTLINE               GET BUFFER ADDRESS              59740000
         MVC   D0(L'PBUFSIZE,R1),PBUFSIZE MOVE BUFSIZE MSG              59790000
         LA    R1,L'PBUFSIZE(R1)        BUMP PRINT LINE INDEX           59840000
         LH    COUNT,JMAXRL             GET BUGFER SIZE                 59890000
         BAL   RTN,CONVERT              CONVERT IT                      59940000
         MVC   D0(L'CSTMT,R1),CSTMT     MOVE NUMBER INTO PRINT LINE     59990000
         LA    R1,L'CSTMT(R1)           BUMP PRINT LINE INDEX  @AZ13738 60040000
         MVI   D0(R1),JSLASH            MOVE SLASH TO PRINT    @AZ13738 60050000
         LA    R1,D1(R1)                BUMP PRINT LINE INDEX  @AZ13738 60060000
         LH    COUNT,NRMBUF             GET NR OF MBUF         @AZ13738 60070000
         BAL   RTN,CONVERT              CONVERT IT             @AZ13738 60080000
         MVC   D0(D2,R1),CSTMT+D3       MOVE OUT NUMBER        @AZ13738 60082000
         BAL   RTN,PRINT                PRINT WORKFILE BUFFER SIZE      60090000
         MVC   PRTLINE(L'TSYSIN),TSYSIN  TOTAL RCDS FROM SYSTEM INPUT   60300000
         L     COUNT,JRECIN             GET NUMBER OF RECORDS READ FROM 60390000
         BAL   RTN,CONVERT                  SYSTEM INPUT AND CONVERT IT 60480000
         MVC   PRTLINE+L'TSYSIN(L'DBLWD2),DBLWD2  MOVE IT TO PRINT LINE 60570000
         BAL   RTN,PRINT                GO PRINT IT                     60660000
         MVC   PRTLINE(L'TSYSLIB),TSYSLIB  TOTAL RCDS FROM SYSTEM LIB   60750000
         L     COUNT,JRECLIB            GET NUMBER OF RECORDS READ FROM 60840000
         BAL   RTN,CONVERT                  SYSTEM LIBRARY & CONVERT IT 60930000
         MVC   PRTLINE+L'TSYSLIB(L'DBLWD2),DBLWD2  MOVE IT TO PRT LINE  61020000
         BAL   RTN,PRINT                GO PRINT IT                     61110000
         MVC   PRTLINE(L'TSYSPCH),TSYSPCH   TOTAL RECORDS PUNCHED       61200000
         L     COUNT,JRECPCH            GET NUMBER OF RECORDS PUNCHED   61290000
         BAL   RTN,CONVERT                  AND CONVERT IT              61380000
         MVC   PRTLINE+L'TSYSPCH(L'DBLWD2),DBLWD2  MOVE IT TO PRINT LN  61470000
         BAL   RTN,PRINT                GO PRINT IT                     61560000
         MVC   PRTLINE(L'TSYSPRT),TSYSPRT  TOTAL LINES PRINTED          61650000
         L     COUNT,JRECPRT            GET NUMBER OF LINES PRINTED AND 61740000
         LA    COUNT,D1(COUNT)          ADD 1 FOR LINE TO BE PRINTED    61830000
         BAL   RTN,CONVERT              AND CONVERT IT                  61920000
         MVC   PRTLINE+L'TSYSPRT(L'DBLWD2),DBLWD2  MOVE IT TO PRINT LIN 62010000
RETURN   EQU   *                                                        62190000
         SR    COUNT,COUNT              CLEAR COUNT REGISTER            62280000
         IC    COUNT,SEVCDE             GET HIGHEST SEVERITY CODE       62370000
         JFRECORE  ADDR=(R7)            FREE X6BCOM COMMON AREA         62460000
         LR    R10,COUNT                RETURN HIGHEST SEVERITY CODE    62550000
RTRN     JRETURN                        RETURN TO CALLER                62640000
         EJECT                                                          62730000
MVNO     MVC   D0(L'NO,COUNT),NO        EXECUTED MOVE FOR 'NO'          62820000
MVPARM   MVC   D0(R1,COUNT),D0(R2)      EXECUTED MOVE FOR ASM OPTIONS   62910000
MSYSPARM MVC   D0(R0,R1),D1(R2)         EXECUTED MOVE FOR SYSPARM MSG   63000000
PUNCHEC  EQU   *                                                        63090000
*********************************************************************** 63180000
*              THE PUNCH ROUTINE RECEIVES CONTROL FROM THE MAIN LINE  * 63270000
*              ONLY IF THE DECK OR LINK OPTION FLAGS ARE ON.  IT SETS * 63360000
*              UP THE 'END' CARD FOR PUNCHING AND RETURNS TO THE MAIN * 63450000
*              LINE.                                                  * 63540000
*********************************************************************** 63630000
         ST    PRTBASE,SVPRTBAS         SAVE PRINT BUFFER BASE REGISTER 63720000
         JPUNCH                                                         63810000
         USING PCHBUF,R11               USING FOR PUNCH BUFFER          63900000
         MVI   PCNTRL,X'02'             12-2-9 PUNCH                    63990000
         MVC   PCEND(L'END),END         MOVE IN END                     64080000
         MVC   PCCOMP(L'JIDR),JIDR     IDR                              64170000
         TR    PCLINE(L'PCLINE),JTRTABLE  TRANSLATE TO EXTERNAL FORMAT  64260000
         GOIF  JESDCHK,OFF=NOESD        IF ESD SWITCH OFF DONT MOVE ESD 64350000
         MVC   PCENTAD(L'JENTRYPT-D1),JENTRYPT+D1  MOVE IN ENTRY PT ADR 64440000
         MVC   PCESDID(L'JESDID),JESDID  MOVE IN ESDID                  64530000
NOESD    L     PRTBASE,SVPRTBAS         RESTORE PRINT BUFFER BASE       64620000
         BR    RTN                      RETURN TO CALLER                64710000
         EJECT                                                          64800000
*                                                                       64890000
********************************  CONSTANTS AND DATA  ***************** 64980000
*                                                                       65070000
BRTABLE  DS    F                        DATA INSERTION BRANCH TABLE     65160000
         B     MOVEDATA                 GO TO DATA INSERT ROUTINE       65250000
         B     MOVECOL                  GO TO COL POINTER INSERT RTN    65340000
TRTABLE  DC    XL51'00'                 TRANSLATE TABLE TO SCAN MSGS    65430000
         ORG   TRTABLE+JPOUND               FOR COL PTR INSERT          65520000
         DC    X'08'                        OR                          65610000
         ORG   TRTABLE+JDOLLAR              FOR APPENDED DATA INSERT    65700000
         DC    X'04'                        CHARATERS                   65790000
         ORG   ,                        TO RESUME LOC CTR               65880000
ZMASK    DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F'                      65970000
BLANKS   JGENIN '  '                                                    66060000
HDNG1    JGENIN 'ASSEMBLER DIAGNOSTICS AND STATISTICS'                  66150000
HDNG2    JGENIN 'STMT  ERROR CODE   MESSAGE'                            66240000
PAGE     JGENIN 'PAGE'                                                  66330000
NOERMSG  JGENIN 'NO STATEMENTS FLAGGED IN THIS ASSEMBLY'                66420000
ASMXF    JGENIN 'ASSEMBLER (XF) DONE'                          @OX12916 66460006
ERCTMSG  JGENIN  'NUMBER OF STATEMENTS FLAGGED IN THIS ASSEMBLY = '     66510000
OPTM1    JGENIN 'OPTIONS FOR THIS ASSEMBLY'                             66600000
NO       JGENIN 'NO'                                                    66690000
MIN      JGENIN '(MIN),'                                                66740000
STD      JGENIN '(STD),'                                                66750000
MAX      JGENIN '(MAX),'                                       @AZ13738 66752000
SHORT    JGENIN '(SHORT)'                                               66760000
PALGN    JGENIN 'ALIGN, '                                               66780000
PALOGIC  JGENIN 'ALOGIC, '                                              66870000
PCALLS   JGENIN 'MCALL, '                                      @OX09734 66960005
PDECK    JGENIN 'DECK, '                                                67050000
PESD     JGENIN 'ESD, '                                                 67140000
PLOAD    JGENIN 'OBJECT, '                                              67230000
PLIST    JGENIN 'LIST, '                                                67320000
PMLOGIC  JGENIN 'MLOGIC, '                                              67410000
PRENT    JGENIN 'RENT, '                                                67500000
PRLD     JGENIN 'RLD, '                                                 67590000
PSYSMAC  JGENIN 'LIBMAC, '                                              67770000
PTEST    JGENIN 'TEST, '                                                67860000
PXREF    JGENIN 'XREF '                                                 67950000
PBUF     JGENIN 'BUFSIZE '                                              68020000
PTERM    JGENIN 'TERMINAL, '                                            68025000
PNUM     JGENIN 'NUMBER, '                                              68030000
PSTMT    JGENIN 'STMT, '                                                68035000
PYFLAG   JGENIN 'YFLAG, '                                      @AZ13738 68037000
PFLAG    JGENIN 'FLAG('                                                 68040000
PLC      JGENIN ', LINECOUNT('                                          68130000
PSIZE    JGENIN 'WORKSIZE('                                    @AZ13738 68140000
PBUFSIZE JGENIN 'WORK FILE BUFFER SIZE/NUMBER ='               @AZ13738 68170000
PSYSPARM JGENIN 'SYSPARM('                                              68220000
TSYSIN   JGENIN 'TOTAL RECORDS READ FROM SYSTEM INPUT   '               68310000
TSYSLIB  JGENIN 'TOTAL RECORDS READ FROM SYSTEM LIBRARY '               68400000
TSYSPRT  JGENIN 'TOTAL RECORDS PRINTED                  '               68490000
TSYSPCH  JGENIN 'TOTAL RECORDS PUNCHED                  '               68580000
COLMSG   JGENIN 'NEAR OPERAND COLUMN '                                  68670000
SEVMSG   JGENIN 'HIGHEST SEVERITY WAS '                                 68760000
S259     JGENIN 'RELOCATABLE Y-TYPE ADDRESS CONSTANT IN THIS ASSEMBLY'  68850000
S256     JGENIN 'SYSGO DD CARD MISSING - NOOBJECT OPTION USED'          69030000
S257     JGENIN 'SYSPUNCH DD CARD MISSING - NODECK OPTION USED'         69120000
S258     JGENIN 'INVALID ASSEMBLER OPTION ON EXEC CARD -- OPTION IGNOREX69210000
               D'                                                       69220000
S264     JGENIN 'TOO MANY ESD ENTRIES'                                  69240000
S265     JGENIN 'SYMBOL RESOLUTION DATA AREA HAS BEEN EXHAUSTED'        69270000
S267     JGENIN 'SYSPRINT DD CARD MISSING - NOLIST OPTION USED'         69280000
S268     JGENIN 'SYSTERM DD CARD MISSING - NOTERMINAL OPTION USED'      69290000
S269     JGENIN 'SYSLIB DD CARD MISSING'                                69292000
END      JGENIN  'END'                                                  69300000
         JPATCH X6B00,ED7               5% PATCH AREA                   73300000
         JEXTRN (X6C01=ERRMSGS)         ADDR OF BEGINNING OF ERR MSGS   77390000
         JEXTRN (X6C02=MTABLE)          ADDR OF ERR MSG INDEX TABLE     85390000
         EJECT                                                          93540000
         JCSECT (X6B20)                 DEFINE CSECT                    93570000
PRINTEXT JSAVE BASE=YES                 SAVE REGISTER                   93600000
         JENTRY (X6B21=PRINTEXT)        DEFINE ENTRY POINT              93630000
*LISTSOURCE                                                             93660000
*  THIS ROUTINE RECONSTRUCT THE SOURCE RECORDS IN THE PRINT AREA AND    93690000
*  DETERMINE WHETHER SEQUENCE NUMBER NEEDS TO BE ATTACHED OR NOT        93720000
*                                                                       93750000
*                                                                       93780000
         USING JTEXT,R5                 SET USING FOR TEXT              93810000
         USING JTEXTA,R4                SET UP USING FOR JTEXTA         93840000
         USING TERMBUF,R11              USING FOR TERMINAL BUFFER       93870000
         LR    R5,INBASE                SET R5 FOR TEXT PTR             93900000
         BAL   R6,INITBUF               GO TO INITIALIZE BUFFER         93930000
         GOIF  JSTMT,OFF=LST100         DO WE PRINT STMT NUM?           93960000
         TM    D16(R5),BIT2             TEST SAVED FLAGB FOR JNOCNT     93970000
         BO    LST100                   IF SO DO NOT ASSIGN STMTNR      93980000
         LH    R1,JTFLGA                GET STMT NUMBER                 93990000
         BAL   R6,PRN800                CONVERT TO DECIMAL              94020000
         MVC   STMTNO,DWORD2            MOVE TO PRINT LINE              94050000
LST100   EQU   *                        BRANCH LABEL                    94080000
         CLI   D5(R5),JM                IS THIS AN MNOTE MESSAGE        94100000
         BE    LSTMNOTE                 THAN HANDLE IT SEPARATELY       94102000
         SET   COLOVLP,OFF              TURN OVERLAP CHECK BIT OFF      94110000
         XC    COLSAV,COLSAV            CLEAR SAVEAREA                  94140000
*  MOVE NAME FIELD                                                      94170000
         LH    R4,JTNMP                 GET NAME POINTER                94200000
         BAL   R6,FLDMOVE               GO MOVE NAME FIELD              94230000
*  MOVE OPCODE FIELD                                                    94260000
         LH    R4,JTOCP                 GET OPCODE POINTER              94290000
         BAL   R6,FLDMOVE               MOVE OPCODE                     94320000
*  MOVE OPERAND FIELD                                                   94350000
         LH    R4,JTOPP                 GET OPERAND POINTER             94380000
         BAL   R6,FLDMOVE               MOVE OPERAND                    94410000
*  MOVE COMMENT FIELD                                                   94440000
         LH    R4,JTCPR                 GET COMMENT POINTER             94470000
         BAL   R6,FLDMOVE               MOVE COMMENT                    94500000
*  MOVE PRE-BEGIN POST-END FIELDS                                       94530000
LST200   BAL   R6,STRING                INSERT STRING                   94560000
         GOIF  JNUM,OFF=LIST6           DO WE PRINT SEQ NUM?            94590000
         MVC   SEQNO(8),SEQNUM          YES MOVE IN SEQ NUM             94620000
         MVI   SEQNUM,JBLANK            SET BLANK CHARACTER             94650000
         MVC   SEQNUM+1(7),SEQNUM       BLANK OUT SEQNUM                94680000
         BAL   R6,ZEROSUP               SUPRESS LEADING ZEROS           94682000
LIST6    EQU   *                        BRANCH LABEL                    94710000
         JTPRINT                        CALL TERMINAL PRINT             94720000
         BAL   R6,INITBUF               CLEAR BUFFER                    94730000
RTPOINT  JRETURN                        EXIT                            94740000
* LSTMNOTE HANDELS MNOTE PROCESSING FOR CORRECT MNOTES TO SYSTERM       94750000
LSTMNOTE EQU   *                                                        94760000
         LH    R4,JTOPP            GET OPERAND POINTER                  94762000
         AR    R4,R5               MAKE IT AN ADDRESS                   94764000
         LA    R3,SOURCE           GET OUTPUT POINTER                   94768000
         SR    R14,R14             CLEAR REGISTER                       94768400
         IC    R14,LENGTH          GET OPERAND LENGTH                   94768800
         GOIF  (R14),NOTZERO=LSTMN10 SCAN OPERAND                       94769200
         B     LST200              FINISH MNOTE                         94769600
LSTMN10  BCTR  R14,0               MAKE IT MOVE LENGTH                  94769700
         AR    R14,R4              GET END OF OPERAND                   94769800
         L     R1,JCTCHR           GET END COL -1                       94769900
         AR    R1,R3               POINT TO END OF BUFFER               94772000
LSTMN15  CLI   FIELD,JASTER        COMMENT MNOTE                        94779900
         BE    LSTMN20             YES, HANDEL IT                       94789900
         CLI   FIELD,JCOMMA        SEV CODE OMITTED                     94793200
         BE    LSTMN30             YES, HANDEL                          94795200
         CLI   FIELD,JBLANK        BLANK SEV CODE                       94795600
         BNE   LSTMN40             NO, TAKE CARE                        94796000
         LA    R4,D1(R4)           STEP UP INPUT                        94796400
         B     LSTMN15             CONTINUE SCAN FOR SEV CODE           94796500
LSTMN20  MVC   D0(D2,R3),FIELD     MOVE *,                              94796600
         LA    R4,D2(R4)           STEP UP INPUT                        94806900
         LA    R3,D2(R3)           STEP UP OUTPUT                       94808900
         B     LSTMN50             HANDEL MESSAGE                       94810900
LSTMN30  MVC   D5(D1,R3),FIELD     MOVE ,                               94812900
         LA    R3,D6(R3)           STEP UP OUTPUT                       94813300
         LA    R4,D1(R4)           STEP UP INPUT                        94822600
         B     LSTMN50             HANDEL MESSAGE                       94824600
LSTMN40  LR    R6,R4               SAVE INPUT POINTER                   94826600
LSTMN42  LA    R4,D1(R4)           STEP UP ONE CHAR                     94828600
         CLI   FIELD,JCOMMA        COUNT CHAR BEFORE COMMA              94830600
         BNE   LSTMN42             CONT NOT COMMA                       94831000
         SR    R4,R6               NO OF CHAR PAST                      94831400
         LA    R3,D5(R3)           5 MAX NO                             94831800
         SR    R3,R4               MINUS NO OF CHAR =NO BLANKS          94831900
         LR    R4,R6               BACK UP INPUT POINTER                94832000
LSTMN46  MVC   D0(D1,R3),FIELD     MOVE SEV CODE 1 CHAR AT A TIME       94841600
         LA    R4,D1(R4)           STEP UP INPUT                        94843600
         LA    R3,D1(R3)           STEP UP OUTPUT                       94845600
         CLI   FIELD,JCOMMA        NEXT CHAR A COMMA?                   94847600
         BNE   LSTMN46             CONT IF NOT                          94849600
         MVC   D0(D1,R3),FIELD     MOVE THE COMMA                       94850000
         LA    R3,D1(R3)           STEP UP OUTPUT                       94850400
         LA    R4,D1(R4)           STEP PAST COMMA                      94850800
LSTMN50  LA    R4,D1(R4)           STEP PAST FIRST QOUTE                94851200
LSTMN55  CLI   FIELD,JQUOTE        TERMINATING QUOTE?                   94851300
         BE    LSTMN70             ELIMINATE DOUBLE QUOTE               94851400
         CLI   FIELD,JAMPER        ELIMINATE DOUBLE AMPERSANDS          94851500
         BE    LSTMN80             CHECK IF TWO                         94854300
         CR    R4,R14              END OF OPERAND                       94856300
         BNL   LST200              FINISH MNOTE PROC IF YES             94858300
LSTMN60  MVC   D0(D1,R3),FIELD     MOVE CHAR TO OUTPUT                  94858700
         LA    R3,D1(R3)           STEP UP OUTPUT                       94859100
         LA    R4,D1(R4)           STEP UP INPUT                        94859500
         CR    R3,R1               END OF BUFFER                        94859900
         BNL   LSTMN90             YES, HANDEL IT                       94868400
         B     LSTMN55             NO CONT SCAN                         94870400
LSTMN70  CLI   FIELD+D1,JQUOTE     DOUBLE QUOTE                         94872400
         BNE   LST200              NO- TERMINATE STRING                 94874400
LSTMN75  LA    R4,D1(R4)           STEP PAST 1 QUOTE                    94876400
         B     LSTMN60             OUPUT 1 QUOTE                        94876800
LSTMN80  CLI   FIELD+D1,JAMPER     A 2ND AMPERSAND                      94877200
         BNE   LSTMN60             OUTPUT THE SINGLE AMPER              94877300
         B     LSTMN75             STEP BY 1 OF 2                       94877400
LSTMN90  CLI   FIELD,JQUOTE        NEXT CHAR A QUOTE                    94878400
         BE    LSTMN95             YES - END OF STRING?                 94878800
LSTMN92  MVI   D0(R3),JX           INSERT CONT CHAR                     94879200
         BAL   R6,STRING           GET STRINGS                          94879600
         GOIF  JNUM,OFF=LSTMN94    NUM OPTION ON                        94880000
         MVC   SEQNO(D8),SEQNUM    MOVE SEQNO TO PROPER PLACE           94880100
         MVI   SEQNUM,JBLANK       INSERT BLANK                         94880200
         MVC   SEQNUM+D1(D7),SEQNUM BLANK SEQNUM FIELD                  94880300
         BAL   R6,ZEROSUP          SUPRESS LEADING ZEROS                94882700
LSTMN94  JTPRINT                                                        94884700
         BAL   R6,INITBUF          INITIALIZE TERM BUFFER               94886700
         LA    R3,SOURCE           GET OUTPUT POINTER                   94887100
         L     R1,JCTCHR           GET END COL - 1                      94887200
         AR    R1,R3               POINT TO END OF BUFFER               94887300
         B     LSTMN55             CONTINUE SCAN                        94887500
LSTMN95  CLI   FIELD+D1,JQUOTE     A 2ND QUOTE                          94895300
         BNE   LST200              NO STRING TERMINATED                 94897300
         B     LSTMN92             YES  PRINT THE LINE                  94899300
*FLDMOVE   THIS ROUTINE MOVE THE NAME,OPERATION,OPERAND OR COMMENTS TO  94903200
*        THE PRINT LINE.IT TAKES CARE OF PRINTING TO CONTINUATION LINES 94911000
*        THE ROUTINE IS CALLED BY BAL FLDMOVE WITH REG R4 POINTING TO   94918800
*        THE FIELD TO BE MOVED.                                         94926600
*                                                                       94934400
*                                                                       94942200
FLDMOVE  ST    R6,FLDSAVE               SAVE LINK REGISTER              94950000
         AR    R4,R5                    TURN POINTER INTO ADDRESS       94980000
         GOIF  CDPTR,OFF=FLD1           CARD PTR?                       95010000
*   HANDLE CARD POINTER                                                 95040000
         MVC   CARDP,OPTR               SAVE CARD POINTER               95070000
         SET   CDPTR1,OFF               TURN OFF FLAG BIT               95100000
FLD01    SR    R1,R1                    CLEAR REGISTER                  95130000
         IC    R1,CARDP                 GET CARD PTR                    95160000
         SH    R1,CDSTMT                SUBTRACT CURR-CARD-WITHIN STMT  95190000
         BNH   FLD02                    NOT IN NEW CARD                 95220000
         BAL   R6,STRING                GO INSERT STRING                95250000
         GOIF  JNUM,OFF=FLD03           DO WE PRINT SEQ NUMBER?         95280000
         MVC   SEQNO(8),SEQNUM          YES,MOVE SEQNUM TO PROPER PLACE 95310000
         MVI   SEQNUM,JBLANK            SET BLANK CHARACTER             95340000
         MVC   SEQNUM+1(7),SEQNUM       BLANK OUT SEQNUM                95430000
         BAL   R6,ZEROSUP               SUPRESS LEADING ZEROS           95440000
FLD03    EQU   *                        BRANCH LABEL                    95460000
         JTPRINT                        CALL TERMINAL PRINT             95470000
         BAL   R6,INITBUF               INITIALIZE BUFFER               95480000
         XC    COLSAV,COLSAV            CLEAR SAVE AREA FOR COL PTR     95490000
         SET   COLOVLP,OFF              TURN OVERLAP CHECK BIT OFF      95520000
         B     FLD01                    GO TEST NEXT CARD               95550000
FLD02    LA    R4,L'OPTR(,R4)           POINT TO COLUMN POINTER         95580000
FLD1     SR    R3,R3                    CLEAR REGISTER                  95610000
         IC    R3,OCPTR                 GET OUTPUT COL PTR              95640000
         SR    R14,R14                  CLEAR REGISTER                  95670000
         IC    R14,LENGTH               GET FIELD LENGTH                95700000
         GOIF  (R14),NOTZERO=FLD10      CHECK IF OPERAND LENGTH ZERO    95730000
         L     R6,FLDSAVE               RESTORE LINKAGE REGISTER        95760000
         BR    R6                                                       95790000
*   R14 NOW CONTAINS TRUE LENGTH,R3 CONTAINS OUTPUT COLUMN POINTER      95820000
FLD10    BCTR  R14,0                    DECREASE TO MOVE LENGTH         95850000
         GOIF  COLOVLP,OFF=FLD20        BRANCH IF OVERLAP BIT OFF       95880000
         CH    R3,COLSAV                DID FIELDS OVERLAPPED?          95910000
         BNL   FLD20                    NO,BRANCH AROUND                95940000
         LH    R3,COLSAV                GET ADJUSTED COLUMN PTR         95970000
FLD20    EQU   *                        BRANCH LABEL                    96000000
         SET   COLOVLP,ON               TURN OVERLAP CHECK BIT ON       96030000
         L     R1,JCTCHR                GET END COLUMN - 1              96060000
         SR    R1,R3                    GET MAXIMUM MOVE LENGTH         96090000
         LA    R15,D2(R3,R14)           COMPUTE NEXT FIELD PTR          96120000
         STH   R15,COLSAV               SAVE COLUMN PTR FOR NXT FIELD   96150000
         CR    R14,R1                   WILL FIELD FIT INTO THIS LINE   96180000
         LA    R3,SOURCE-D1(R3)         GET PRINT POSITION              96210000
         BH    FLD100                   BRANCH IF LINE WONT FIT         96240000
         EX    R14,MOVE                 MOVE IT                         96270000
         L     R6,FLDSAVE               RESTORE LINK REGISTER           96300000
         BR    R6                       RETURN                          96330000
*  MOVE PART OF FIELD                                                   96360000
FLD100   EX    R1,MOVE                  MOVE PART OF FIELD              96390000
         SR    R14,R1                   GET LENGTH OF REMAINDER         96420000
         STH   R14,HWD                  SAVE LENGTH                     96450000
         LA    R4,D1(R1,R4)             GET ADDR OF REMAINING PART      96480000
         BAL   R6,STRING                INSERT STRINGS INTO PRINT LINE  96510000
             GOIF  JNUM,OFF=FLD30           DO WE PRINT SEQ NUMBER?     96540000
         MVC   SEQNO(8),SEQNUM          YES,MOVE SEQNUM TO PROPER PLACE 96570000
         MVI   SEQNUM,JBLANK            SET BLANK CHARACTER             96600000
         MVC   SEQNUM+1(7),SEQNUM       BLANK OUT SEQNUM                96630000
         BAL   R6,ZEROSUP               SUPRESS LEADING ZEROS           96640000
FLD30    EQU   *                        BRANCH LABEL                    96660000
         JTPRINT                        CALL TERMINAL PRINT             96690000
         BAL   R6,INITBUF               INITIALIZE BUFFER               96720000
*                                                                       96750000
         LH    R14,HWD                  GET LENGTH AGAIN                96810000
         L     R3,JCTBGN                SET OUTPUT COLUMN POINTER       96830000
         LA    R3,D1(,R3)                 TO CONTINUE COLUMN            96850000
         XC    COLSAV,COLSAV            ZEROED OUT SAVEAREA             96870000
         SET   COLOVLP,OFF              TURN OFF OVERLAP CHECK BIT      96900000
         B     FLD10                    GO MOVE REMAINING PART          96930000
*STRING                                                                 96960000
*   EXTRACT STRINGS FROM TEXT RECORD AND INSERT THEM INTO THE CURRENT   96990000
*   PRINT LINE. STRADR(ADDRESS OF STRING GROUP) AND CDSTMT(CARD WITHIN  97020000
*   START COUNTER) ARE UPDATED                                          97050000
STRING   EQU   *                        BRANCH LABEL                    97080000
         LH    R1,CDSTMT                GET CARD WITHIN STMT COUNTER    97110000
         LA    R1,D1(R1)                INCREMENT 1                     97140000
         STH   R1,CDSTMT                UPDATE IT                       97170000
         TM    JTSYMCNT,JGEN            IS STMT GENERATED?              97200000
         BZ    STR050                   NO,BRANCH AROUND                97230000
         MVI   GENFLG,JPLUS             YES,PUT IN + SIGN               97260000
STR050   EQU   *                        BRANCH LABEL                    97290000
         L     R15,STRADR               GET STRING GROUP POINTER        97320000
         DROP  R4                       DROP USING FOR JTEXTA           97350000
         USING JTEXTA,R15               SET NEW USING FOR JTEXTA        97380000
         SR    R1,R1                    CLEAR REGISTER                  97410000
         IC    R1,JTSTC                 GET STRING COUNT                97440000
         LTR   R1,R1                    IS IT ZERO?                     97470000
         BCR   8,R6                     YES,RETURN                      97500000
         LA    R15,JTSTO                POINT TO OUTPUT COL PTR         97530000
STR100   SR    R14,R14                  CLEAR REGISTER                  97560000
         IC    R14,JTSTL2               GET STRING LENGTH               97590000
         BCTR  R14,0                    DECREASE MOVE                   97620000
         SR    R3,R3                    CLEAR REGISTER                  97650000
         IC    R3,JTSTO2                GET OUTPUT COLUMN POINTER       97680000
         LA    R3,SOURCE-D1(R3)         POINT TO PRINT POSITION         97710000
         EX    R14,STRMOVE              MOVE STRING TO OUTPUT           97740000
         LA    R15,JTSTR2+D1(R14)       POINT TO NEXT STRING            97770000
         BCT   R1,STR100                GO BACK IF MORE                 97800000
         ST    R15,STRADR                                               97860000
         BR    R6                                                       97890000
STRMOVE  MVC   D0(0,R3),JTSTR2          EXECUTED STRING MOVE            97920000
         DROP  R15                      DROP USING FOR JTEXTA           97950000
         USING JTEXTA,R4                BACK TO OLD USING               97980000
MOVE     MVC   D0(0,R3),FIELD           EXECUTED MOVE TO PRINT          98010000
INITBUF  EQU   *        F               BRANCH LABEL                    98040000
         LA    R11,BUFTERM              GET BUFFER ADDRESS              98070000
         MVI   BUFC,SPACE1              DO SINGLE SPACE                 98080000
         MVI   PRTIMG,JBLANK            BLANK FIRST BYTE                98100000
         MVC   PRTIMG+D1(L'PRTIMG-D1),PRTIMG  BLANK THE REST            98130000
         BR    R6                       RETURN TO CALLER                98160000
*  CONVERT TO DECIMAL                                                   98190000
*                                                                       98220000
PRN800   CVD   R1,DWORD1                CONVERT NUMBER TO DECIMAL       98250000
         UNPK  DWORD2(5),DWORD1         UNPACK NUMBER                   98280000
         NC    DWORD2(5),MASK1          MASKED OUT ZONE BITS            98310000
         LA    R1,D4                    GET MAXIMUM BLANKS TO ADD       98340000
         LA    R15,DWORD2               POINT TO NUMBER                 98370000
PRN810   CLI   D0(R15),J0               IS LEADING DIGIT ZERO           98400000
         BNE   PRN820                   NO                              98430000
         MVI   D0(R15),JBLANK           YES,BLANK OUT                   98460000
         LA    R15,D1(R15)              BUMP POINTER                    98490000
         BCT   R1,PRN810                GO BACK IF MORE                 98520000
PRN820   BR    R6                       RETURN                          98550000
*       SUPRESS LEADING ZEROS IN SEQUENCE NUMBER                        98552000
ZEROSUP  LA    R3,D8                    GET LENGTH OF NUM FIELD         98560000
         LA    R2,SEQNO                 GET ADDRESS                     98570000
ZEROS    CLI   D0(R2),J0                LEADING ZERO ?                  98572000
         BNE   ZERORET                  NO                              98574000
         MVI   D0(R2),JBLANK            SUPRESS LEADING ZERO            98576000
         LA    R2,D1(R2)                POINT TO NEXT DIGIT             98578000
         BCT   R3,ZEROS                 DECREMENT COUNT                 98578400
ZERORET  BR    R6                       RETURN TO CALLER                98578800
MASK1    DC    5X'0F'                   MASK TO REMOVE ZONE BITS        98580000
         JPATCH X6B20,256               5% PATCH AREA                   98590000
         END   BEGIN                                                    98610000
./  ADD  SSI=81850034,NAME=IFNX6C
         GBLC  &COMPNM,&ASMID                                           00050000
         JHEAD 'DIAGNOSTIC MESSAGE PHASE - PROLOG',                    X02000000
               PHASEID=X6C,                                            X04000000
               LEVEL=10                                                 06000000
*FUNCTION/OPERATION-                                                  * 08000000
*   THE DIAGNOSTIC MESSAGE PHASE CONTAINS THE ERROR MESSAGES CALLED   * 10000000
*   FOR BY THE ERROR RECORDS READ BY THE DIAGNOSTIC PHASE, X6B, AND   * 12000000
*   THE INDEX TABLE, MTABLE, USED TO ACCESS THE MESSAGES.  IT MUST BE * 14000000
*   LINK EDITED WITH X6B.  IT CONTAINS DATA ONLY, NO EXECUTABLE CODE. * 16000000
*                                                                     * 18000000
*ENTRY POINTS-                                                        * 20000000
*   ERRMSGS - BEGINNING OF LIST OF ERROR MESSAGES                     * 22000000
*   MTABLE  - BEGINNING OF ERROR MESSAGE INDEX TABLE                  * 24000000
*                                                                     * 26000000
*INPUT-                                                               * 28000000
*   NONE                                                              * 30000000
*                                                                     * 32000000
*OUTPUT-                                                              * 34000000
*   NONE                                                              * 36000000
*                                                                     * 38000000
*EXTERNAL ROUTINES-                                                   * 40000000
*   NONE                                                              * 42000000
*                                                                     * 44000000
*EXITS-                                                               * 46000000
*   NONE                                                              * 48000000
*                                                                     * 50000000
*ATTRIBUTES-                                                          * 52000000
*   REFRESHABLE                                                       * 54000000
   TITLE '&COMPNM&ASMID - DIAGNOSTIC MESSAGE PHASE - JCOMMON COPY CODE' 56000000
         COPY  JCOMMON                  MASTER COMMUNICATIONS AREA      58000000
      TITLE '&COMPNM&ASMID - DIAGNOSTIC MESSAGE PHASE - ERROR MESSAGES' 58050000
         JCSECT (X6C00)                 SECTION ID                      60000000
*C                                                             @AX21436 60050000
         JMODID                                                         62000000
ERRMSGS  DS    0C                       START OF ERROR MESSAGES         68000000
         JENTRY (X6C01=ERRMSGS)         ALTERNATE ENTRY POINT           69000000
S0       JGENIN 'UNDEFINED ERROR CODE'   ERROR 0 MESSAGE TEXT           70000000
         JGENERR GEN                                                    72000000
         GENTAB                                                         74000000
         JENTRY (X6C02=MTABLE)          ALTERNATE ENTRY POINT           74500000
         JPATCH X6C00,25A8              5% PATCH AREA                   75000000
         END                                                            76000000
./  ADD  SSI=81850035,NAME=IFOX0A
         MACRO                                                          00200002
         JPHASE &PHASE=,&PHSUFF=,&BUF=,&DBLBUF=                         00400000
         LCLA  &A,&B                                                    00600000
         LCLC  &C                                                       00800000
         AIF   (K'&PHSUFF EQ 0).NX10                                    01000000
&C       SETC  '&PHSUFF'(2,2)                                           01200000
PHASE&C  DC    C'&PHSUFF'                 PHASE SUFFIX                  01400000
         AIF   ('&PHSUFF'(2,1) EQ '0').EXIT                             01600000
&A       SETA  &BUF(1)+&BUF(2)+&BUF(3)  COUNT NUMBER OF SINGLE BUFFERS  01800000
&B       SETA  &DBLBUF(1)+&DBLBUF(2)+&DBLBUF(3)+&A TOTAL BUFFERS        02000000
         DC    X'&A&B'                      NO. OF BUF IF SINGLE,DOUBLE 02200000
         AIF   (&B EQ 0).EXIT                                           02300000
         DC    B'&BUF(1)&DBLBUF(1).000000'  FILE1                       02400000
         DC    B'&BUF(2)&DBLBUF(2).000000'  FILE2                       02600000
         DC    B'&BUF(3)&DBLBUF(3).000000'  FILE3                       02800000
         MEXIT                                                          03000000
.NX10    ANOP                                                           03200000
&C       SETC  '&PHASE'(5,2)                                            03400000
PHASE&C  DC    CL8'&PHASE'                LOAD NAME                     03600000
.EXIT    MEND                                                           03800000
         SPACE 3                                                        03860000
         GBLC  &COMPNM,&ASMID           GLOBAL VARIABLES                03920000
         SPACE 5                                                        04000000
         JHEAD 'ASSEMBLER DRIVER - PROLOG',                            X04200000
               PHASEID=X0A,                                            X04400000
               LEVEL=21                                        @AX14179 04600006
*                                                                     * 04800000
*FUNCTION/OPERATION-                                                  * 05000000
*   THIS MODULE IS THE DRIVER FOR THE ASSEMBLER.  THIS MODULE TREATS  * 05200000
*   ALL OTHER PHASES AS SUBROUTINES.                                  * 05400000
*                                                                     * 05600000
*ENTRY POINT-                                                         * 05800000
*        START - ENTERED BY SYSTEM.                                   * 06000000
*                                                                     * 06200000
*INPUT-                                                               * 06400000
*   REGISTER R1 POINTS TO PARAMETER LIST (EXEC CARD).                 * 06600000
*                                                                     * 06800000
*OUTPUT-                                                              * 07000000
*   RETURN CODE IN REGISTER R15.                                      * 07200000
*                                                                     * 07400000
*EXTERNAL ROUTINES-                                                   * 07600000
*   ALL OTHER PHASES OF THE ASSEMBLER                                 * 07800000
*                                                                     * 08000000
*EXITS, NORMAL-                                                       * 08200000
*   RETURN TO SYSTEM                                                  * 08400000
*                                                                     * 08600000
*EXITS, ERROR-                                                        * 08800000
*   N/A                                                               * 09000000
*                                                                     * 09200000
*TABLE/WORK AREAS-                                                    * 09400000
*   COMMON - LOADED BY THIS PHASE.                                    * 09600000
*                                                                     * 09800000
*ATTRIBUTES-                                                          * 10000000
*   REFRESHABLE.                                                      * 10200000
*                                                                     * 10400000
*NOTES-                                                               * 10600000
         SPACE 5                                                        10800000
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - JCOMMON COPY CODE'   10850000
         COPY  JCOMMON                  JCOMMON COPY CODE               11000000
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - JFLEBLK COPY CODE'   11200000
         COPY  JFLEBLK                  JFLEBLK COPY CODE               11400000
         SPACE 3                                                        11600000
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - EQUATES'             12000000
MINBUF   EQU   2+788                    2 BYTE HEADER + LONGEST LOG REC 12200000
PHAS1    EQU   C'1'                     PHAS1 SUFFIX                    12220000
PCPREQ   EQU   8192                     MFT SYSTEM REQUIREMENT  OX01003 12240002
MVTREQ   EQU   8192                     MVT SYSTEM REQUIREMENTS OX01003 12260002
CVTADDR  EQU   X'10'                    LOCATION OF CVT ADDRESS         12280000
CVTDCB   EQU   X'74'                    DISP INTO CVT FOR SYSTEM CONFIG 12300000
MVT      EQU   X'10'                   BIT IN CVTDCB THAT INDICATES MVT 12320000
         SPACE 5                                                        12370000
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER'                       12400000
         JCSECT (X0A00)                 SECTION NAME                    12600000
* VS1 RELEASE 2.6 CHANGES                                               12650002
*C122400-122600                                                 OX01003 12700002
*C046000                                                       @OZ01709 12750003
*C046000                                                       @OX07280 12760004
*C670000                                                       @OX07284 12770004
*C046000                                                       OX09734  12770105
*C046000                                                       @AX14179 12770206
*A510500-511960,512500-513800,572500-574799,488500-491900      @AZ13738 12770300
*C421000,670000                                                @AZ13738 12770700
*A420500                                                       @AX19340 12780700
MODID    JMODID                         EMBEDDED IDENTIFIER             12800000
         JEXTRN (X0B01=MLC)             WORKFILE I/O MODULE             13000000
START    SAVE  (14,12)                  SAVE REGISTERS                  13200000
         JENTRY (X0A01=START)                                           13400000
         LR    R8,R15                   SET BASE REGISTER               13600000
         USING START,R8                 ''                              13800000
         LR    R2,R1                    SAVE PARM POINTER               14000000
         SPACE                                                          14200000
         LOAD  EPLOC=PHASE01            LOAD COMMON                     14400000
         LR    R12,R0                   LOAD R12 FROM R0                14600000
         ST    R13,D4(,R12)             CHAIN SAVE AREAS                14800000
         ST    R12,D8(,R13)             ''                              15000000
         LR    R13,R12                  SET R13 TO COMMON               15200000
         MVC   JPHNAME,PHASE01          SAVE PREFIX OF PHASE            15400000
         LA    R6,LDPHASE               GET ADDR OF LOAD ROUTINE        15600000
         LA    R7,DLPHASE               GET ADDR OF DELETE ROUTINE      15800000
         SPACE 2                                                        16000000
         MVC   JMLC,=A(MLC)             ADDR OF WORKFILE I/O PACKAGE    16200000
         MVC   JAABORT,=A(ABORT)        ADDRESS OF ABORT ROUTINE        16400000
         SPACE 2                                                        16600000
         LA    R5,PHASE02               LOAD INITIALIZATION             16800000
         BALR  R9,R6                    ''                              17000000
         L     R10,AMODID               PASS MODID ADDR TO INIT         17200000
         LR    R11,R2                   PASS PARM FIELD POINTER         17400000
         BALR  R9,R12                   GO TO INIT                      17600000
         SPACE                                                          17800000
         BALR  R9,R7                    DELETE INITIALIZATION           18000000
         SPACE                                                          18200000
         L     R1,JSYSOPEN              OPEN WORKFILES                  18400000
         OPEN  MF=(E,(1))               ''                              18600000
         SPACE 2                                                        18800000
         LA    R5,PHASE03               LOAD INPUT COMMON               19000000
         BALR  R9,R6                    ''                              19200000
         ST    R12,JADINCM              SAVE ADDRESS OF INPUT COMMON    19400000
         SPACE                                                          19600000
         LA    R5,PHASE04               LOAD INPUT PACKAGE              19800000
         BALR  R9,R6                    ''                              20000000
         ST    R12,JINMLC               SAVE INPUT MLC ADDRESS          20200000
         LR    R11,R2                   PASS PARM FIELD POINTER         20400000
         BAL   R9,JININIT(,R12)         GO TO INPUT INIT                20600000
         SPACE 2                                                        20800000
         LA    R5,PHASE11               LOAD EDITOR                     21000000
         BALR  R9,R6                    ''                              21200000
         BALR  R9,R12                   GO TO EDITOR                    21400000
         SPACE 2                                                        21600000
         L     R12,JINMLC               GO TO INPUT INIT TO CLOSE FILES 21800000
         BAL   R9,JININIT(,R12)         ''                              22000000
         SPACE                                                          22200000
         BALR  R9,R7                    DELETE EDITOR                   22400000
         SPACE                                                          22600000
         LA    R5,PHASE04               DELETE INPUT PACKAGE            22800000
         BALR  R9,R7                    ''                              23000000
         SPACE 2                                                        23200000
         LA    R5,PHASE03               DELETE INPUT COMMON             23400000
         BALR  R9,R7                    ''                              23600000
         SPACE 2                                                        23800000
         LA    R5,PHASE21               LOAD DICT. RES.                 24000000
         BALR  R9,R6                    ''                              24200000
         BALR  R9,R12                   GO TO DICT. RES.                24400000
         SPACE                                                          24600000
         BALR  R9,R7                    DELETE DICT. INTERLUDE          24800000
         SPACE                                                          25000000
         LA    R5,PHASE31               LOAD GENERATOR                  25200000
         BALR  R9,R6                    ''                              25400000
         BALR  R9,R12                   GO TO GENERATOR                 25600000
         SPACE                                                          25800000
         BALR  R9,R7                    DELETE GENERATOR                26000000
         SPACE                                                          26200000
         LA    R5,PHASE05               LOAD OUTPUT COMMON              26400000
         BALR  R9,R6                    ''                              26600000
         ST    R12,JADOUTCM             SAVE ADDRESS OF OUTPUT COMMON   26800000
         SPACE 2                                                        27800000
         LA    R5,PHASE06               LOAD OUTPUT PACKAGE             28000000
         BALR  R9,R6                    ''                              28200000
         ST    R12,JOUTMLC              SAVE OUTPUT MLC ADDRESS         28400000
         LR    R11,R2                   PASS PARM FIELD POINTER         28600000
         BAL   R9,JOUTINIT(,R12)        GO TO OUTPUT INIT               28800000
         SPACE 3                                                        29000000
         GOIF  JSYSGEN,OFF=SKIPX4       SKIP X4 IF JSYSGEN OFF          29200000
         LA    R5,PHASE41               LOAD SYMBOL RES (NO SYM CARDS)  29400000
         GOIF  JTEST,OFF=NOTEST         NO SYM CARDS WANTED             29600000
         GOIF  (JDECK,JLINK),NONE=NOTEST     FRUSTRATE SYM OUTPUT       29700000
         LA    R5,PHASE42               LOAD SYMBOL RES (SYM CARDS)     29800000
NOTEST   BALR  R9,R6                    ''                              30000000
         BALR  R9,R12                   GO TO SYMBOL RES.               30200000
         SPACE                                                          30400000
         BALR  R9,R7                    DELETE SYMBOL RES.              30600000
         SPACE                                                          30800000
SKIPX4   LA    R5,PHASE51               LOAD OUTPUT LISTER              31200000
         BALR  R9,R6                    ''                              31400000
         BALR  R9,R12                   GO TO OUTPUT LISTER             31600000
         SPACE                                                          31800000
         BALR  R9,R7                    DELETE ASSEMBLER                32000000
         SPACE                                                          32200000
         LA    R5,PHASE61               LOAD RLD & XREF PROCESSOR       32400000
         BALR  R9,R6                    ''                              32600000
         BALR  R9,R12                   GO TO LISTER                    32800000
         SPACE 2                                                        33000000
         BALR  R9,R7                    DELETE RLD & XREF PROCESSOR     33200000
         LA    R5,PHASE62               LOAD DIAGNOSTIC PHASE           33500000
         BALR  R9,R6                    ''                              33800000
         BALR  R9,R12                   GO TO DIAGNOSTIC PHASE          34000000
         LR    R2,R10                   SAVE RETURN CODE                34200000
         SPACE                                                          34400000
         BALR  R9,R7                    DELETE DIAGNOSTIC PHASE         34600000
         SPACE                                                          34800000
         L     R12,JOUTMLC              GO TO OUT INIT TO CLOSE FILES   35000000
         BAL   R9,JOUTINIT(,R12)        ''                              35200000
         SPACE 2                                                        35400000
         LA    R5,PHASE06               DELETE OUTPUT PACKAGE           35600000
         BALR  R9,R7                    ''                              35800000
         SPACE 2                                                        36000000
         LA    R5,PHASE05               DELETE OUTPUT COMMON            36200000
         BALR  R9,R7                    ''                              36400000
         SPACE 2                                                        36600000
         L     R1,JSYSCLOS              CLOSE WORKFILES                 36800000
         CLOSE MF=(E,(1))               ''                              37000000
         SPACE 2                                                        37200000
         L     R1,JPARMPTR              FREE TRANSLATED PARM AREA       37400000
         LTR   R1,R1                    HAS AREA BEEN FREED BY INIT     37600000
         BZ    FREED                    YES.  ALREADY FREED             37800000
         LH    R0,D0(,R1)               GET LENGTH OF AREA              38000000
         FREEMAIN R,LV=(0),A=(1)        FREE CORE                       38200000
         SPACE 2                                                        38600000
FREED    L     R13,D4(,R13)             PT TO SAVE AREA                 38800000
         DELETE EPLOC=PHASE01           DELETE COMMON                   39000000
         SPACE 2                                                        39200000
         LR    R15,R2                   LOAD RETURN CODE                39400000
         RETURN (14,12),RC=(15)         RETURN TO CALLER                39600000
         SPACE 3                                                        39800000
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - PHASE LOAD ROUTINE'  39850000
*        THIS ROUTINE LOADS THE PHASE WHOSE NAME IS POINTED TO BY R5. * 40000000
*   IT RETURNS WITH THE ENTRY POINT ADDRESS IN R12.                   * 40200000
         SPACE 3                                                        40400000
LDPHASE  JSAVE BASE=NO                  SAVE REGISTERS                  40600000
         SPACE                                                          40650000
         MVC   JPHSUFF,D0(R5)           BUILD COMPLETE PHASE NAME       40800000
         LOAD  EPLOC=JPHNAME            LOAD PHASE                      41000000
         SPACE                                                          41050000
         LR    R2,R0                    SAVE ENTRY POINT                41200000
         CLI   JPHSUFF+D1,PHAS1         WAS SYS IND PHASE LOADED        41400000
         BL    LD50                     NO, RETURN                      41600000
         L     R3,=A(PCPREQ)            PCP MFT REQUIREMENT             41650000
         L     R1,CVTADDR               GET ADDR OF CVT                 41700000
         TM    CVTDCB(R1),MVT           IS SYSTEM MVT                   41750000
         BZ    GETREQ                   NO, GET PCP REQUIREMENT         41800000
         LA    R3,MVTREQ-PCPREQ(,R3)    MVT REQUIREMENTS                41850000
GETREQ   GETMAIN R,LV=(R3)              GET CORE FOR RETURN TO SYSTEM   41900000
         SPACE                                                          41950000
         LR    R10,R1                   SAVE CORE ADDRESS               42000000
         MVC   JEOS,CORESIZE            GET REQ CORESIZE       @AX19340 42050000
         MVC   JBOS(D4),MINCORE         GET MIN CORE VALUE     @AZ13738 42100000
         GETMAIN VU,LA=JBOS,A=JBOS,SP=0,HIARCHY=0,MF=(E,JDWORD)        X42200000
                                        GET ALL THE CORE WE CAN         42400000
         SPACE                                                          42450000
         LR    R1,R10                   PT TO AREA THAT IS TO BE FREED  43200000
         FREEMAIN R,LV=(R3),A=(1)       FREE CORE THAT SYSTEMS NEED     43400000
         SPACE                                                          43450000
         LM    R14,R15,JBOS             LD ADDR OF CORE & LENGTH        43600000
         AR    R14,R15                  CALC END OF CORE ADDR           43800000
         ST    R14,JEOS                 SAVE IN JEOS                    44000000
         ST    R15,JSLEN                SAVE LENGTH OF AREA (JEOS-JBOS) 44200000
         CLC   JPHSUFF,PHASE11          IS THIS THE EDITOR              44400000
         BNE   LD30                     NO, GO ALLOC BUFFERS            44600000
         SR    R14,R14                  DIVIDE AVAILABLE BUFFER SPACE   45000000
         D     R14,=F'8'                TAKE 37.5 PERCENT AND           45200000
         LR    R14,R15                  DIVIDE BY THREE BUFFERS         45400000
         GOIF  JMINBUF,ON=LD22          MIN BUFFER ALLOC REQUIRED       45490000
         MH    R15,=H'10'               IS AVAILABLE SPACE 60 PERCENT   45540000
         SRA   R15,D5                   (16/10) LARGER THAN JMAXRL      45550000
         SPACE                                                          45590000
         CH    R15,JMAXRL               ''                              45690000
         BNH   LD10                     NO, SINGLE BUFFER               45800000
         SET   JDBLALL,ON               YES, DOUBLE BUFFER AND ALLOW    46000000
         SRA   R14,D1                     HALF THE BUFFER SIZE          46200000
LD10     CH    R14,JMAXRL               IF SIZE OF EACH BUFFER IS GT    46400000
         BNH   LD20                       MAXRL, THEN SET SIZE TO MAXRL 46600000
         LH    R14,JMAXRL                 ''                            46800000
LD20     SH    R14,=H'2'                TRUNCATE RL TO A MULTIPLE OF    47000000
         N     R14,=X'FFFFFFFC'           FW + 2 BYTES                  47200000
         LA    R14,D2(,R14)               ''                            47400000
         CH    R14,=Y(MINBUF)           BUFFER SIZE MUST BE LARGE       47600000
         BNL   LD25                       ENOUGH TO CONTAIN THE         47800000
LD22     LH    R14,=Y(MINBUF)             LONGEST POSSIBLE LOGICAL REC. 48000000
LD25     STH   R14,JMAXRL               SAVE NEW MAXRL                  48200000
         STH   R14,JFLEBLK1+JRL-JFLEBLK SET FILE1 RL                    48400000
         STH   R14,JFLEBLK2+JRL-JFLEBLK SET FILE2 RL                    48600000
         STH   R14,JFLEBLK3+JRL-JFLEBLK SET FILE3 RL                    48800000
         GOIF  JMBUF,OFF=LD30           BR IF NO MBUF REQ      @AZ13738 48850000
         GOIF  JDBLALL,OFF=LD30         BR IF SINGEL BUFFERS   @AZ13738 48900000
         L     R15,JSLEN                GET LENGH OF AREA      @AZ13738 48950000
         SRA   R15,D3                   GET 37,5 PERCENT       @AZ13738 49000000
         M     R14,=F'3'                OF WORK AREA.          @AZ13738 49050000
         LH    R11,JMAXRL               GET USABEL REC LENGH   @AZ13738 49060000
         DR    R14,R11                  GET MAX NR OF BUFFERS  @AZ13738 49100000
         IC    R11,PHASE31+D3           GET MIN NR OF DBLBUFS  @AZ13738 49150000
         N     R11,=X'0000000F'         MASK OUT THE REST      @AZ13738 49160000
         SR    R15,R11                  GET NR OF MULTIPLE BUFS@AZ13738 49170000
         BNP   LD30                     BR IF NO MBUFS         @AZ13738 49180000
         STH   R15,NRMBUF               SAVE VALUE             @AZ13738 49190000
LD30     LA    R5,D3(,R5)               ADVANCE PHASE NAME PTR TO PARM  49200000
         IC    R15,D0(,R5)              PICK UP NUMBER OF SINGLE AND   X49600000
                                          DOUBLE BUFFERS FOR FILE       49800000
         GOIF  JDBLALL,ON=LD40          FILES CAN BE DOUBLEED BUFFERED  50000000
         SPACE                                                          50050000
         SRL   R15,D4                   LEFT HALF OF BYTE IS NO. OF    X50200000
                                          SINGLE BUFFERS. RT NO. OF DBL 50400000
LD40     N     R15,=X'0000000F'         MASK OUT REST OF REGISTER       50600000
         BZ    LD50                     BRANCH IF NO BUFFERS WANTED     50700000
         LH    R3,JMAXRL                GET MAXRL, BUMP TO A MULTIPLE   50800000
         LA    R3,D2(,R3)                 OF FW (2 BYTES WASTED), AND   51000000
         USING JFLEBLK,R11              ADDRABIL TO FILES      @AZ13738 51010000
         LA    R11,JFLEBLK1             PT TO FILE 1           @AZ13738 51020000
         SET   JMLTBUF,OFF              RESET MBUF SW          @AZ13738 51030000
         LA    R11,JFLEBLK2             PT TO FILE 2           @AZ13738 51040000
         SET   JMLTBUF,OFF              RESET MBUF SW          @AZ13738 51042000
         LA    R11,JFLEBLK3             PT TO FILE 3           @AZ13738 51044000
         SET   JMLTBUF,OFF              RESET MBUF SW          @AZ13738 51046000
         DROP  R11                      DROP ADDRABIL TO FILES @AZ13738 51048000
         CLC   JPHSUFF,PHASE31          IS PHASE X31 LOADED    @AZ13738 51050000
         BNE   LD42                     BR IF NOT PHASE X31    @AZ13738 51100000
         GOIF  JMBUF,OFF=LD42           BR IF NOT MBUF REQ.    @AZ13738 51150000
         LH    R10,NRMBUF              LOAD NR OF MBUFFERS     @AZ13738 51160000
         CH    R10,=H'2'                TEST FOR NR OF-        @AZ13738 51162000
         BL    LD42                     MULTIBUFFERS ARE-      @AZ13738 51164000
         CH    R10,=H'15'               WITHIN 2 AND 15-       @AZ13738 51166000
         BNH   LD41                     AND BR IF SO OR-       @AZ13738 51168000
         LA    R10,15                   SET MAXIMUM NR.        @AZ13738 51168400
         STH   R10,NRMBUF               SAVE NEW VALUE         @AZ13738 51168500
LD41     EQU   *                        PROCEED                @AZ13738 51168800
         BCTR  R10,0                    SUBTRACT BY ONE        @AZ13738 51170000
         AR    R15,R10                  ADD TO TOTAL NR OF BUFS@AZ13738 51180000
         LA    R11,JFLEBLK1             PT TO FILE 1           @AZ13738 51190000
         USING JFLEBLK,R11              ADDRESSABILITY TO FILE1@AZ13738 51192000
         SET   JMLTBUF,ON               IND MULTIBUFFERS REQ.  @AZ13738 51194000
LD42     EQU   *                        PROCEED                @AZ13738 51196000
         MR    R14,R3                     MULTIPLY BY NUMBER OF BUFFERS 51200000
         GOIF  JMLTBUF,OFF=LD44         BR IF NOT NBUF REQ.    @AZ13738 51250000
         DROP  R11                      DROP ADDR              @AZ13738 51300000
         LA    R10,BUFENLN              LOAD LENGH OF ENTRY    @AZ13738 51350000
         MH    R10,NRMBUF               GET TOTAL SPACE        @AZ13738 51360000
         AR    R15,R10                  ADD TO PREV. SPACE     @AZ13738 51370000
LD44     EQU   *                        PROCEED                @AZ13738 51380000
         LA    R10,D7(,R15)             CONVERT VALUE TO NUMBER OF DW   51400000
         SRL   R10,D3                     (GREATER THAN ORIGINAL VALUE) 51600000
         JGETCORE DBL=(R10)             ALLOCATE MEMORY                 51800000
         SPACE                                                          51850000
         LA    R10,D2(,R10)             PT TO HW BOUNDRY                52000000
         LA    R11,JFLEBLK1             PT TO FILE1 BLOCK               52200000
         BAL   R9,ALLOCBUF              GO ALLOC BUF FOR FILE1          52400000
         LA    R11,JFLEBLK2             PT TO FILE2 BLOCK               52600000
         BAL   R9,ALLOCBUF              GO ALLOC BUF FOR FILE2          52800000
         LA    R11,JFLEBLK3             PT TO FILE3 BLOCK               53000000
         BAL   R9,ALLOCBUF              GO ALLOC BUF FOR FILE3          53200000
LD50     LR    R12,R2                   LOAD ENTRY POINT INTO R12       53400000
LDRTN    JRETURN                        RETURN                          53600000
         SPACE 2                                                        53650000
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - PHASE DELETION AND BX53800000
               UFFER ALLOCATION ROUTINES'                               53850000
*        THIS ROUTINE DELETE THE PHASE WHOSE NAME IS POINTED TO BY R5.  54000000
         SPACE                                                          54200000
DLPHASE  MVC   JPHSUFF,D0(R5)           BUILD PHASE NAME TO BE DELETED  54400000
         DELETE EPLOC=JPHNAME           DELETE PHASE                    54600000
         SPACE                                                          54650000
         CLI   JPHSUFF+D1,PHAS1         IS IT A SYS IND PHASE           54800000
         BLR   R9                       NO, RETURN                      55000000
         LM    R0,R1,JSLEN              GET LENGTH AND ADDR OF AREA     55200000
         FREEMAIN R,LV=(0),A=(1)        FREE CORE                       55400000
         SPACE                                                          55450000
         XC    JSLEN,JSLEN              INDICATE NO CORE FOR ABORT      55600000
         BR    R9                       RETURN                          55800000
         SPACE 5                                                        56000000
*        THIS ROUTINE ALLOCATES BUFFERS FOR A FILE.                     56200000
*   R5 POINTS TO PARAMETER BYTE.  R11 POINTS TO JFLEBLK.                56400000
         SPACE                                                          56600000
         USING JFLEBLK,R11              ADDRESSABILITY TO JFLEBLK       56800000
ALLOCBUF SET   JDBLBUF,OFF              TURN OFF JDBLBUF FOR FILE       57000000
         SPACE                                                          57050000
         LA    R5,D1(,R5)               PT TO PARM BYTE FOR FILE        57200000
         GOIF  JMLTBUF,OFF=ALLOC10      BR IF NOT MBUF REQ.    @AZ13738 57250000
         LH    R15,NRMBUF               LOAD NR OF MBUFFERS    @AZ13738 57300000
         SR    R12,R12                  CLEAR REGISTER         @AZ13738 57350000
         ST    R10,LOWPRIOR             LOWPRIOR ADDR          @AZ13738 57360000
         LA    R14,1                    SET LOWPRIOR VALUE     @AZ13738 57370000
ALLOC5   XC    FWBUFPTR(BUFENLN,R10),FWBUFPTR(R10) CLEAN ENTRY @AZ13738 57380000
         ST    R12,FWBUFPTR(R10)        SET FOWARD CHAIN       @AZ13738 57390000
         LR    R12,R10                  SAVE ENTRY ADDR        @AZ13738 57392000
         ST    R10,BUFSTART             SAVE END OF TABEL      @AZ13738 57394000
         LA    R10,BUFENLN(R10)         ADD WITH ENTRY LENGH   @AZ13738 57396000
         ST    R10,BUFADR(R12)          SET ADDR TO BUFFER     @AZ13738 57398000
         AR    R10,R3                   ADD LENGH OF BUFFER    @AZ13738 57398400
         STH   R14,PRIOR(R12)           SET PRIORITY TO BUF    @AZ13738 57398800
         SLL   R14,1                    INCREASE PRIORITY      @AZ13738 57399200
         BCT   R15,ALLOC5               BR IF MORE BUFFERS     @AZ13738 57399600
         SRL   R14,1                    REPOS PRIORITY         @AZ13738 57399700
         STH   R14,HIMASK               SAVE HIGEST PRIORITY   @AZ13738 57399800
         L     R12,LOWPRIOR             LOAD LAST ENTRY        @AZ13738 57399900
         L     R15,BUFADR(R12)          LOAD THIS BUF ADDR     @AZ13738 57449900
         ST    R15,JBUF                 INIT JFLE BUF PTR      @AZ13738 57459900
         BR    R9                       RETURN                 @AZ13738 57469900
ALLOC10  EQU   *                        PROCEED                @AZ13738 57479900
         TM    D0(R5),BIT0              DO ANY BUFFERS NEED ALLOC       57499900
         BZR   R9                       NO, RETURN                      57600000
         ST    R10,JBUF                 STORE ADDRESS OF PRIMARY BUFFER 57800000
         AR    R10,R3                   BUMP PTR BY (MAXRL + 2)         58000000
         GOIF  JDBLALL,OFF=(R9)         NO FILES ARE DOUBLED BUFFERED   58200000
         SPACE                                                          58250000
         TM    D0(R5),BIT1              DO ANY ALT BUF NEED ALLOC       58400000
         BZR   R9                       NO, RETURN                      58600000
         SET   JDBLBUF,ON               SET JDBLBUF ON FOR FILE         58800000
         SPACE                                                          58850000
         ST    R10,JBUFFER              STORE ADDRESS OF ALT BUFFER     59000000
         AR    R10,R3                   BUMP PTR BY (MAXRL + 2)         59200000
         BR    R9                       RETURN                          59400000
         DROP  R11                      DROP ADDRESSABILITY             59600000
         SPACE 2                                                        59650000
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - ABORT ROUTINE'       59800000
*        THIS ROUTINE LOADS THE ABORT ROUTINE.  R10 CONTAINS THE ERROR  60000000
*   CODE.  R11 WILL CONTAIN R1 INFO AT THE TIME THE ASSEMBLER WAS       60200000
*   INVOKED (PARAMETER LIST PTR) (ERR260) OR R0 INFO FROM SYNAD EXIT    60400000
*   (ERR261).  R1 WILL CONTAIN THE DCB ADDRESS FOR ERR261.              60600000
         SPACE 3                                                        60800000
         USING ABORT,R12                REGISTER R12 IS BASE            61000000
ABORT    LR    R2,R1                    DCB ADDR MAY BE IN REG. R1      61200000
         DELETE EPLOC=JPHNAME           DELETE LAST PHASE LOADED        61400000
         LOAD  EPLOC=PHASE07            LOAD ABORT ROUTINE              61600000
         LR    R12,R0                   GO TO ABORT                     61800000
         BALR  R9,R12                   ''                              62000000
         DELETE EPLOC=PHASE07           DELETE ABORT ROUTINE            62200000
         L     R13,D4(,R13)             PT TO SAVE AREA                 62400000
         DELETE EPLOC=PHASE01           DELETE COMMON                   62600000
         RETURN (14,12),RC=20           RETURN TO CALLER                62800000
         SPACE 3                                                        62850000
         TITLE '&COMPNM&ASMID - ASSEMBLER DRIVER - CONSTANTS '          63000000
*        CONSTANTS                                                      63200000
*                                                                       63400000
         JPHASE PHASE=&COMPNM.X01       X01 PHASE ID                    63600000
         JPHASE PHSUFF=X02              X02 PHASE ID                    63800000
         JPHASE PHSUFF=X03              X03 PHASE ID                    64000000
         JPHASE PHSUFF=X04              X04 PHASE ID                    64200000
         JPHASE PHSUFF=X05              X05 PHASE ID                    64400000
         JPHASE PHSUFF=X06              X06 PHASE ID                    64600000
         JPHASE PHASE=&COMPNM.X07       X07 PHASE ID                    64800000
         JPHASE PHSUFF=X11,BUF=(1,1,1),DBLBUF=(1,1,1)    X11 PHASE ID   65000000
         JPHASE PHSUFF=X21,BUF=(1,1,1),DBLBUF=(0,0,0)    X21 PHASE ID   65200000
         JPHASE PHSUFF=X31,BUF=(1,1,1),DBLBUF=(0,1,1)    X31 PHASE ID   65400000
         JPHASE PHSUFF=X41,BUF=(1,0,1),DBLBUF=(1,0,1)    X41 PHASE ID   65600000
         JPHASE PHSUFF=X42,BUF=(1,0,1),DBLBUF=(1,0,1)    X42 PHASE ID   65800000
         JPHASE PHSUFF=X51,BUF=(1,1,1),DBLBUF=(0,0,0)    X51 PHASE ID   66000000
         JPHASE PHSUFF=X61,BUF=(0,0,0),DBLBUF=(0,0,0)    X61 PHASE ID   66200000
         JPHASE PHSUFF=X62,BUF=(1,0,1),DBLBUF=(0,0,0)    X62 PHASE ID   66400000
         SPACE 3                                                        66600000
AMODID   DC    A(MODID+6)               ADDRESS OF MASTER MODID LEVEL   66800000
MINCORE  DC    A(8)                 MIN CORE REQUEST           @AZ13738 67000000
         SPACE 3                                                        67600000
         JPATCH X0A00,3BE               5% PATCH AREA                   67800000
         END   START                                                    68000000
./  ADD  SSI=71710263,NAME=IFOX0B
         GBLC  &COMPNM,&ASMID           GLOBAL VARIABLES                00050000
         JHEAD 'WORKFILE I/O MODULE - PROLOG',                         X00300000
               PHASEID=X0B,                                            X00600000
               LEVEL=10                                                 00900000
*                                                                     * 01200000
*FUNCTION/OPERATION-                                                  * 01500000
*   THIS MODULE IS THE WORKFILE I/O PACKAGE FOR THE ASSEMBLY.  THE    * 01800000
*   OTHER PHASES INTERFACE WITH THIS MODULE FOR ALL WORKFILE I/O RE-  * 02100000
*   QUESTS AND CORE MANAGEMENT.                                       * 02400000
*                                                                     * 02700000
*ENTRY POINT-                                                         * 03000000
*        START+0  - JPUTL    - PUT LOGICAL RECORD IN LOCATE MODE.     * 03300000
*        START+4  - JPUTM    - PUT LOGICAL RECORD IN MOVE MODE.       * 03600000
*        START+8  - JGETL    - GET LOGICAL RECORD IN LOCATE MODE.     * 03900000
*        START+12 - JTRUNC   - TRUNCATE PHYSICAL BUFFER.              * 04200000
*        START+16 - JRELSE   - RELEASE PHYSICAL BUFFER.               * 04500000
*        START+20 - JREAD    - READ A PHYSICAL RECORD.                * 04800000
*        START+24 - JWRITE   - WRITE A PHYSICAL RECORD.               * 05100000
*        START+28 - JCHECK   - CHECK READ OR WRITE FOR COMPLETION.    * 05400000
*        START+32 - JGETCORE - GET DYNAMIC CORE STORAGE.              * 05700000
*        START+36 - JFRECORE - FREE DYNAMIC CORE STORAGE.             * 06000000
*        START+40 - JNOTE    - NOTE FILE POSITION                     * 06300000
*        START+44 - JPOINT   - POSITION FILE.                         * 06600000
*                                                                     * 06900000
*INPUT-                                                               * 07200000
*   SYSUT1, STSUT2, SYSUT3.                                           * 07500000
*                                                                     * 07800000
*OUTPUT-                                                              * 08100000
*   THREE WORKFILES (FILE1,FILE2,FILE3).                              * 08400000
*                                                                     * 08700000
*EXTERNAL ROUTINES-                                                   * 09000000
*   N/A                                                               * 09300000
*                                                                     * 09600000
*EXITS, NORMAL                                                        * 09900000
*   RETURN TO CALLER VIA REGISTER R9.                                 * 10200000
*                                                                     * 10500000
*EXITS, ERROR-                                                        * 10800000
*   BRANCH TO JABORT IN COMMON.                                       * 11100000
*                                                                     * 11400000
*TABLES/WORK AREA-                                                    * 11700000
*   REGISTER R13 POINTS TO COMMON.                                    * 12000000
*                                                                     * 12300000
*ATTRIBUTES-                                                          * 12600000
*   REFRESHABLE.                                                      * 12900000
*                                                                     * 13200000
*NOTES-                                                               * 13500000
         TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - COPY CODE'        13600000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   13800000
         COPY  JCOMMON                  JCOMMON COPY CODE               14100000
         PRINT OFF                      DON'T PRINT JFLEBLK COPY CODE   14400000
         COPY  JFLEBLK                  JFLEBLK COPY CODE               14700000
         PRINT ON                       PRINT READ/WRITE PARM LIST      14750000
         SPACE 3                                                        15000000
RDWRPARM DSECT                          READ/WRITE PARAMETER LIST       15300000
RDWRBUF  DS    F                        BUFFER LOCATION                 15600000
RDWRLEN  DS    H                        RECORD LENGTH                   15900000
         SPACE 3                                                        16200000
MAXMVC   EQU   256                      MAXIMUM MOVE                    16500000
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE  16800000
         COPY  JERMSGCD                 JERMSGCD COPY CODE              17100000
         PRINT ON                       THAT'S ALL THE COPY CODE        17150000
         TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - MAINLINE CONTROL' 17400000
         JCSECT (X0B00)                 SECTION ID                      17700000
* VS1 RELEASE 2.5 CHANGES                                               17750002
*A264500,327500,375100-375300,480600-482500,546500              OX00413 17800002
*A762100-766500,888000-890000,891500-892000                     OX00413 17850002
*C474000-474020,483000,504000,723000,759000,768000,891000       OX00413 17900002
*D267000,486000-489000,501000,741000,747000-756000,762000       OX00413 17950002
*D765000,771000                                                 OX00413 17960002
* VS1 RELEASE 3.1 CHANGES                                               17960102
*A480500,481000,504500,738500,744500-746000,759500,762600,      OX02955 17960202
*A763100,888500                                                 OX02955 17960302
*C264500,504000,762100,759000                                   OX02955 17960402
*D327500,330100,375100-375300,474020,480600-481500,483000,      OX02955 17960502
*D547000,762300-768000,888500-892000                            OX02955 17960602
*A672500                                                       @0X13606 17962606
*A708500-710000                                                @AZ10942 17962700
*                                                                       17970606
         JMODID                                                         18000000
         USING START,R12                SET BASE TO R12                 18300000
START    B     PUTL                     ENTRY FOR JPUTL        00       18600000
         B     PUTM                               JPUTM        04       18900000
         B     GETL                               JGETL        08       19200000
         B     TRUNC                              JTRUNC       12       19500000
         B     RELSE                              JRELSE       16       19800000
         B     READ                               JREAD        20       20100000
         B     WRITE                              JWRITE       24       20400000
         B     CHECK                              JCHECK       28       20700000
         B     GETCORE                            JGETCORE     32       21000000
         B     FRECORE                            JFRECORE     36       21300000
         B     NOTE                               JNOTE        40       21600000
         B     POINT                              JPOINT       44       21900000
         SPACE 3                                                        22200000
         JENTRY (X0B01=START)                                           22500000
         SPACE 3                                                        22800000
SAVE     JSAVE BASE=NO                  SAVE REGISTERS                  23100000
         LR    R7,R13                   LOAD COMMON ADDR + FILE DISP.   23400000
         AR    R7,R10                   THIS HAS NO MEANING FOR GETCORE 23700000
         USING JFLEBLK,R7               & FRECORE                       24000000
         BR    R14                      NOW GO ON WITH BUSINESS         24300000
         SPACE 3                                                        24600000
RETURN   JRETURN                        RESTORE REGISTERS & RETURN      24900000
         SPACE 2                                                        24950000
       TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - PUT LOCATE ROUTINE' 25200000
PUTL     BAL   R14,SAVE                 GO SAVE REGISTERS               25500000
         SET   JPUTLWRT,OFF             CLEAR                           25550000
         L     R3,JBUF                  GET PHY BUF ADDRESS             25800000
         LR    R5,R3                    LOG BUF ADDR = PHY BUF ADDR +   26100000
         AH    R5,JBUFNDX                 PHY RL                        26400000
         GOIF  JPUTLPND,OFF=NOREC       FIRST PUTL OF SEQUENCE  OX02955 26450002
         LH    R4,D0(,R5)               LOAD LOGICAL RECORD LENGTH      27000000
         LA    R4,D3(,R4)               ROUND RECORD LENGTH TO          27300000
         SRA   R4,D2                      FULL                          27600000
         SLA   R4,D2                        WORD                        27900000
         BZ    NOREC                    RL ZERO, THEREFORE NO RECORD    28200000
         STH   R4,D0(,R5)               STORE ROUNDED RECORD LENGTH     28500000
         AR    R5,R4                    LOG BUF ADDR = LOG BUF ADDR+RL  28800000
         AH    R4,JBUFNDX               PHY RL = PHY RL +               29100000
         STH   R4,JBUFNDX                 LOG RL                        29400000
         LCR   R4,R4                    MAKE PHY RL NEGATIVE            29700000
         AH    R4,JRL                   SPACE AVAIL = BUF SIZE - USED   30000000
         BM    JABORT                   **TEMP** BLEW IT                30300000
         BZ    REC                      NO ROOM FOR NEXT LOGICAL RECORD 30350000
         LA    R11,D3(,R11)             ROUND REQUESTED RL TO FULL WORD 30600000
         SRA   R11,D2                   ''                              30900000
         SLA   R11,D2                   ''                              31200000
         GOIF  (R4),(R11),NOTLOW=NOREC  THERE IS ROOM FOR NEXT BUFFER   31500000
REC      MVC   D0(L'JBUFNDX,R3),JBUFNDX SET PHYSICAL RL                 31800000
         GOIF  JCHKFILE,OFF=DONTCHK1    FILE DOESN'T NEED CHECKING      32100000
         BAL   R9,CHECK                 CHECK PENDING WRITE             32400000
DONTCHK1 LA    R11,JBUF                 POINT TO PARM LIST              32700000
         BAL   R9,WRITE                 WRITE RECORD                    33000000
         SET   JPUTLWRT,ON              INDICATE WRITE                  33050000
         GOIF  JDBLBUF,OFF=DONTSWAP     FILE IS NOT DOUBLE BUFFERED     33300000
         SET   JCHKFILE,ON              INDICATE FILE NEEDS CHECKING    33600000
         XC    JBUF,JBUFFER             SWAP BUFFER ADDRESSES           33900000
         XC    JBUFFER,JBUF             ''                              34200000
         XC    JBUF,JBUFFER             ''                              34500000
         L     R3,JBUF                  GET NEW PHY BUFFER ADDRESS      34800000
         B     DONTCHK2                 BYPASS FILE CHECKING NOW        35100000
DONTSWAP BAL   R9,CHECK                 CHECK WRITE                     35400000
DONTCHK2 MVC   JBUFNDX,RESETRL          PHY RL = RESETRL                35700000
         LR    R5,R3                    LOG BUF ADDR = PHY BUF ADDR +   36000000
         AH    R5,JBUFNDX                 RESETTED RL                   36300000
NOREC    LR    R11,R5                   RETURN PTR TO LOGICAL RECORD    36600000
         XC    D0(D2,R11),D0(R11)       ZERO RECORD LENGTH              36900000
         SET   JPUTLPND,ON              PUTL NOW PENDING                37200000
         B     RETURN                   RETURN                          37500000
         SPACE 2                                                        37550000
         TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - PUT MOVE ROUTINE' 37800000
PUTM     BAL   R14,SAVE                 GO SAVE REGISTERS               38100000
         LR    R3,R11                   SAVE R11 (FROM ADDR)            38400000
         MVC   JHWORD1,D0(R3)           REQUEST BUFFER (RL)             38700000
         LH    R11,JHWORD1              ''                              39000000
         LTR   R2,R11                   IS RL ZERO                      39300000
         BZ    JABORT                   YES, ABORT                      39600000
         BAL   R9,PUTL                  PUTL                            39900000
         LR    R4,R11                   TO ADDRESS                      40200000
         BAL   R9,MOVE                  MOVE RECORD                     40500000
         B     RETURN                   RETURN                          40800000
         SPACE 6                                                        41100000
MOVEX    MVC   D0(MAXMVC,R4),D0(R3)     MOVE 256 BYTES                  41400000
         LA    R3,MAXMVC(,R3)           BUMP FROM ADDR BY 256           41700000
         LA    R4,MAXMVC(,R4)           BUMP TO ADDR BY 256             42000000
MOVE     SH    R2,=H'256'               SUBTRACT 256 FROM LENGTH        42300000
         BP    MOVEX                    IF POSITIVE, STILL 256 BYTES    42600000
         AH    R2,=H'255'               WENT NEGATIVE, ADD 255          42900000
         EX    R2,MVCIM                 MOVE FINAL 1-256 BYTES          43200000
         BR    R9                       RETURN                          43500000
MVCIM    MVC   D0(*-*,R4),D0(R3)        EXECUTED MOVE                   43800000
         SPACE 2                                                        43850000
       TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - GET LOCATE ROUTINE' 44100000
GETL     BAL   R14,SAVE                 GO SAVE REGISTERS               44400000
         SET   JPUTLPND,OFF             TURN OFF PUTL PENDING FLAG      44700000
         L     R3,JBUF                  POINT TO PHYSICAL BUFFER        45000000
         LH    R4,JBUFNDX               PICK UP OLD BUFFER DISPLACEMENT 45300000
         GOIF  JGETLSBF,ON=NORD4GET     GET, POINT TO SAME BUF, GET     45600000
         GOIF  JGETLPND,OFF=RD4GET      DO WE HAVE TO READ A NEW RECORD 45900000
         AH    R4,D0(R3,R4)             CALC NEW DISPLACEMENT (TO BYPAS 46200000
         STH   R4,JBUFNDX                 OLD LOG RECORD)               46500000
         CLC   JBUFNDX,D0(R3)           END OF BUFFER                   46800000
         BL    NORD4GET                 BRANCH OF NOT END OF BUFFER     47100000
RD4GET   LA    R11,JBUF                 POINT TO PARM LIST      OX00413 47400002
         BAL   R9,READ                  READ RECORD                     47700000
         BAL   R9,CHECK                 CHECK RECORD                    48000000
         BAL   R9,NOTE                  NOTE RECORD             OX02955 48050002
         MVC   JLSTNOTE,JNOTEVAL        SAVE NOTE VALUE         OX02955 48100002
         SET   JNOTED,ON                INDICATE NOTED RECORD   OX00413 48250002
         GOIF  JGETLPNT,ON=DONTRSET     GET AFTER POINT                 49200000
         LH    R4,RESETRL               NO. RESET BUFFER DISP.          49500000
         STH   R4,JBUFNDX               ''                              49800000
DONTRSET SET   JGETLPND,ON              SET GETL PEND FLAG ON   OX02955 50400002
         SET   JGETLPNT,OFF             SET GET AFTER POINT OFF OX02955 50450002
NORD4GET LA    R11,D0(R3,R4)            POINT TO BUFFER                 50700000
         SET   JGETLSBF,OFF             RESET POINT TO SAME BUFFER SW   51000000
         B     RETURN                   RETURN                          51300000
         SPACE 2                                                        51350000
         TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - TRUNCATION AND REX51600000
               LEASE ROUTINES'                                          51650000
TRUNC    BAL   R14,SAVE                 GO SAVE REGISTERS               51900000
         GOIF  JCHKFILE,OFF=DONTCHK3    FILE DOESN'T NEED CHECKING      52200000
         BAL   R9,CHECK                 CHECK PENDING WRITE             52500000
         SET   JCHKFILE,OFF             INDICATE FILE HAS BEEN CHECKED  52800000
DONTCHK3 SR    R11,R11                  INDICATE NO BUFFER NEEDED       53100000
         BAL   R9,PUTL                  PUT OUT RECORD BEFORE TRUNC.    53400000
         SET   JPUTLPND,OFF             TURN OFF PUTL PENDING FLAG      53700000
         L     R3,JBUF                  POINT TO PHYSICAL BUFFER        54000000
         MVC   D0(L'JBUFNDX,R3),JBUFNDX SET PHYSICAL RL                 54300000
         LA    R11,JBUF                 POINT TO PARM LIST              54600000
         GOIF  (JPUTLWRT,JCHKFILE),ALL=DONTWRT,MIX=DONTWRCK     OX00413 54650002
         BAL   R9,WRITE                 WRITE RECORD                    54900000
DONTWRT  BAL   R9,CHECK                 CHECK RECORD                    55200000
DONTWRCK MVC   JBUFNDX,RESETRL          PHY RL = RESETRL                55500000
         B     RETURN                   RETURN                          55800000
         SPACE 6                                                        56100000
RELSE    BAL   R14,SAVE                 GO SAVE REGISTERS               56400000
         SET   JGETLPND,OFF             TURN OFF SETL PENDING FLAG      56700000
         MVC   JBUFNDX,RESETRL          PHY RL=RESETRL (GET,RELSE,PUT)  57000000
         B     RETURN                   RETURN                          57300000
         SPACE 2                                                        57350000
         TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - READ, WRITE AND CX57600000
               HECK ROUTINES'                                           57620000
         USING RDWRPARM,R11                                             57900000
READ     BAL   R14,SAVE                 GO SAVE REGISTERS               58200000
         L     R8,RDWRBUF               BUFFER ADDRESS                  58500000
         LH    R9,RDWRLEN               RECORD LENGTH                   58800000
         READ  JDECB,SF,,(R8),(R9),MF=E READ PHYSICAL RECORD            59100000
         SET   JNOTED,OFF               NEW RECORD NOT NOTED            59400000
         B     RETURN                   RETURN                          59700000
         DROP  R11                                                      60000000
         SPACE 3                                                        60300000
         USING RDWRPARM,R11                                             60600000
WRITE    BAL   R14,SAVE                 GO SAVE REGISTERS               60900000
         L     R8,RDWRBUF               BUFFER ADDRESS                  61200000
         LH    R9,RDWRLEN               RECORD LENGTH                   61500000
         WRITE JDECB,SF,,(R8),(R9),MF=E WRITE PHYSICAL RECORD           61800000
         SET   JNOTED,OFF               NEW RECORD NOT NOTED            62100000
         B     RETURN                   RETURN                          62400000
         DROP  R11                                                      62700000
         SPACE 3                                                        63000000
CHECK    BAL   R14,SAVE                 GO SAVE REGISTERS               63300000
         CHECK JDECB                    CHECK FOR COMPLETION            63600000
         B     RETURN                   RETURN                          63900000
         SPACE                                                          63950000
         TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - GETCORE AND FRECOX64200000
               RE ROUTINES'                                             64300000
GETCORE  BAL   R14,SAVE                 GO SAVE REGISTERS               64500000
         SLL   R11,D3                   CONV TO REQ MAX BYTES           64800000
         LA    R2,D8(,R11)              ALLOW 8 MORE BYTES FOR HEADER   65100000
         L     R4,JEOS                  POINT TO CURRENT END-OF-STORAGE 65400000
         LR    R3,R4                    SPACE AVAILABLE =               65700000
         S     R3,JBOS                    END - BEGINNING               66000000
         GOIF  (R3),(R2),NOTLOW=REQFILLD ENOUGH SPACE FOR MAX BYTES     66300000
         LR    R2,R3                    USE REMAINING SPACE             66600000
         LR    R11,R3                   RETURN NO. OF BYTES AVAILABLE   66900000
         SH    R11,=H'8'                  AFTER SUBTRACTING OUT HEADER  67200000
         BC    4,ABORTCOR               IS IT NEGATIVE         @OX13606 67250006
         SLL   R10,D3                   BRANCH IF BYTES AVAILABLE IS    67500000
         GOIF  (R10),(R11),HIGH=ABORTCOR  LESS THAN MINIMUM REQUEST     67800000
REQFILLD SR    R4,R2                    REDUCE EOS ADDR BY              68100000
         ST    R4,JEOS                    NUMBER OF BYTES USED          68400000
         ST    R2,D0(,R4)               STORE LENGTH IN HEADER          68700000
         LA    R10,D8(,R4)              RETURN ADDR OF CORE             69000000
         B     RETURN                   RETURN                          69300000
ABORTCOR LA    R10,ERR262               SET OUT OF CORE ERROR FLAG      69600000
         B     JABORT                   GO ABORT                        69900000
         SPACE 6                                                        70200000
FRECORE  BAL   R14,SAVE                 GO SAVE REGISTERS               70500000
         L     R4,JEOS                  INCREASE EOS BY LENGTH          70800000
         L     R5,JBOS                  CHECK IF-              @AZ10942 70850000
         A     R5,JSLEN                 OUTSIDE-               @AZ10942 70900000
         CR    R4,R5                    STORAGE-               @AZ10942 70950000
         BNL   RETURN                   KEY.                   @AZ10942 71000000
         A     R4,D0(,R4)                 OF LAST GETCORE REQ.          71100000
         ST    R4,JEOS                      AND SAVE IT                 71400000
         B     RETURN                   RETURN                          71700000
         SPACE 3                                                        71750000
         TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - NOTE ROUTINE'     72000000
NOTE     BAL   R14,SAVE                 GO SAVE REGISTERS       OX00413 72300002
         GOIF  JCHKFILE,OFF=DONTCHK4    FILE DOESN'T NEED CHECKING      72600000
         BAL   R9,CHECK                 CHECK PENDING WRITE             72900000
         SET   JCHKFILE,OFF             INDICATE FILE HAS BEEN CHECKED  73200000
DONTCHK4 MVC   JNOTEVAL+D6(L'JBUFNDX),JBUFNDX SAVE BUFFER DISPLACEMENT  73500000
         L     R4,JFLE                  GET ADDR OF FILE DEFINITION     73800000
         GOIF  JPUTLPND,OFF=NOPENDA     NO BUFF PEND FOR PUTL   OX02955 73850002
         GOIF  JNOTED,ON=NTBEFORE       BR IF RECORD BEEN NOTED BEFORE  74400000
         LA    R11,JBUF                 POINT TO PARM LIST      OX02955 74450002
         BAL   R9,WRITE                 WRITE RECORD            OX02955 74500002
         BAL   R9,CHECK                 CHECK                   OX02955 74550002
         SET   JNOTED,ON                INDICATED REC NOTED     OX02955 74600002
NOPENDA  NOTE  (R4)                     NOTE WHERE REC IS WRITE OX00413 75900002
         ST    R1,JNOTEVAL              STORE TTRZ OR NNNN      OX02955 75950002
         GOIF  JPUTLPND,OFF=RETURN      POSITION FILE, QUERY.   OX02955 76210002
         MVC   JLSTNOTE,JNOTEVAL        SAVE NOTE VALUE         OX02955 76260002
         POINT (R4),JNOTEVAL            REPOSITION FILE         OX02955 76310002
         B     RETURN                   RETURN                          77400000
NTBEFORE MVC   JNOTEVAL(L'JLSTNOTE),JLSTNOTE SET LAST VALUE             77700000
         B     RETURN                   RETURN                          78000000
         SPACE 3                                                        78050000
         TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - POINT ROUTINE'    78300000
POINT    BAL   R14,SAVE                 GO SAVE REGISTERS               78600000
         SET   JGETLPND,OFF             TURN OFF GETL PENDING           78900000
         GOIF  JPUTLPND,OFF=NOPENDB     BUFFER PENDING FOR PUTL         79200000
         LR    R2,R11                   SAVE R11                        79500000
         BAL   R9,TRUNC                 TRUNC BUFFER                    79800000
         LR    R11,R2                   RESTORE R11                     80100000
NOPENDB  L     R4,JFLE                  GET ADDR OF FILE DEF.           80400000
         GOIF  JPT4STAR,ON=POINTS       POINTS                          80700000
         MVC   JFWORD1,D0(R11)          SAVE NOTE VALUE ON FW BOUNDRY   81000000
         GOIF  JPT4WRIT,ON=POINTW       POINT  NEXT=WRITE               81300000
         GOIF  JPT4GET,OFF=POINTR1      NOT POINT  NEXT=GET             81600000
         MVC   JBUFNDX,D6(R11)          SET BUFFER DISPLACEMENT         81900000
         GOIF  JNOTED,OFF=POINTR1       RECORD NOT NOTED                82200000
         CLC   JLSTNOTE(D4),D0(R11)     POSITIONING TO DIFF PHY REC     82500000
         BNE   POINTR1                  BRANCH IF YES                   82800000
         SET   (JGETLPND,JGETLSBF),ON   SAME RECORD, GETL PENDING.      83100000
         B     POINTR2                  GO TURN OFF FLAGS               83400000
POINTR1  POINT (R4),JFWORD1             POINT FOR READ OR GET           83700000
         GOIF  JPT4GET,OFF=POINTR2      NOT POINT  NEXT=GET             84000000
         SET   JGETLPNT,ON              GETL TO FOLLOW POINT            84300000
POINTR2  SET   (JPT4READ,JPT4GET),OFF   TURN OFF POINTR FLAGS           84600000
         B     RETURN                   RETURN                          84900000
POINTW   L     R5,JFWORD1               POSITION THE FILE TO WRITE      85200000
         AL    R5,=F'1'                   A RECORD AFTER THE ONE        85500000
         ST    R5,JFWORD1                 NOTED.                        85800000
         POINT (R4),JFWORD1             POINT FOR WRITE                 86100000
         SET   JPT4WRIT,OFF             TURN OFF POINTW FLAG            86400000
         B     RETURN                   RETURN                          86700000
POINTS   CLOSE TYPE=T,MF=(E,JTCLOSE)    CLOSE TYPE=T (REWIND)           87000000
         MVC   JBUFNDX,RESETRL          RESET DISP FOR PUTL             87300000
         SET   JPT4STAR,OFF             TURN OFF POINTS FLAG            87600000
         B     RETURN                   RETURN                          87900000
         SPACE 3                                                        88200000
 TITLE '&COMPNM&ASMID - WORKFILE I/O MODULE - CONSTANTS AND PATCH AREA' 88250000
*        CONSTANTS                                                      88500000
*                                                               OX00413 88800002
RESETRL  DC    H'2'                     RESET RECORD LENGHT     OX02955 88850002
         SPACE 3                                                        89400000
         JPATCH X0B00,42A                                               89700000
         SPACE 3                                                        90000000
         END   START                                                    90300000
./  ADD  SSI=71710264,NAME=IFOX0C
* /* START OF SPECIFICATIONS ****                                       00050000
*02* PROCESSOR = ASSEMBLER                                              00100000
**** END OF SPECIFICATIONS ***/                                         00150000
         GBLA  &SNUMBER                 GLOBAL VARIABLE                 00600000
         GBLC  &COMPNM,&ASMID           GLOBAL VARIABLES                01200000
         JHEAD 'ASSEMBLER COMMON LOAD MODULE - PROLOG',                X01800000
               PHASEID=X0C,                                            X02400000
               LEVEL=10                                                 03000000
*                                                                     * 03600000
*FUNCTION/OPERATION-                                                  * 04200000
*   THIS MODULE IS THE MASTER COMMON WORK AREA FOR THE ASSEMBLER.     * 04800000
*   THE MODULE IS MAPPED ACCORDING TO THE JCOMMON DSECT.  THE MODULE  * 05400000
*   IS LOADED BY THE DRIVER AND REMAINS IN CORE UNTIL THE END OF JOB. * 06000000
*   REGISTER R13 ALWAYS POINTS TO THIS MODULE.                        * 06600000
*                                                                     * 07200000
*ENTRY POINT-                                                         * 07800000
*   N/A                                                               * 08400000
*                                                                     * 09000000
*INPUT-                                                               * 09600000
*   SYSUT1, STSUT2, SYSUT3.                                           * 10200000
*                                                                     * 10800000
*OUTPUT-                                                              * 11400000
*   N/A                                                               * 12000000
*   N/A                                                               * 12600000
*                                                                     * 13200000
*EXTERNALS ROUTINES-                                                  * 13800000
*   N/A                                                               * 14400000
*                                                                     * 15000000
*EXITS, NORMAL-                                                       * 15600000
*   N/A                                                               * 16200000
*                                                                     * 16800000
*EXITS, ERROR-                                                        * 17400000
*   N/A                                                               * 18000000
*                                                                     * 18600000
*TABLE/WORK AREAS-                                                    * 19200000
*   THIS MODULE IS ONE ENTIRE WORK AREA.                              * 19800000
*                                                                     * 20400000
*ATTRIBUTES-                                                          * 21000000
*   NON-REFRESHABLE.                                                  * 21600000
*                                                                     * 22200000
*NOTES-                                                               * 22800000
         SPACE 2                                                        23400000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   23450000
         COPY  JCOMMON                  JCOMMON COPY CODE               24000000
         PRINT OFF                      DON'T PRINT JFLEBLK COPY CODE   24600000
         COPY  JFLEBLK                  JFLEBLK COPY CODE               25200000
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE  25800000
         COPY  JERMSGCD                 JERMSGCD COPY CODE              26400000
         PRINT ON                       THAT'S ALL THE COPY CODE        26450000
         SPACE 2                                                        26500000
         TITLE '&COMPNM&ASMID - ASSEMBLER COMMON LOAD MODULE'           27000000
         JCSECT (X0C00)                 SECTION START                   27600000
* VS1 RELEASE 2.5 CHANGES                                               27650002
*C336000,378000,420000                                          OX00413 27700002
* VS1 RELEASE 3.1 CHANGES                                               27750002
*C336000,378000,420000                                          OX02955 27800002
*A432000                                                       @AZ07378 27850006
         JMODID                         EMBEDDED IDENTIFIER             28200000
         USING START,R13                ESTABLISH BASE                  28800000
START    DS    0D                       R13 POINTS HERE                 29400000
         JENTRY (X0C01=START)           SECTION ENTRY                   30000000
         ORG   START+JFLEBLK1-JCOMMON+JDECB-JFLEBLK FILE 1 DECB         30600000
         WRITE JDECB1,SF,IJSYS01,MF=L   WRITE DECB FOR SYSUT1           31200000
         ORG   START+JFLEBLK1-JCOMMON+JTCLOSE-JFLEBLK TCLOSE PARM LIST  31800000
         CLOSE (IJSYS01,REREAD),TYPE=T,MF=L    TCLOSE FOR SYSUT1        32400000
         JGEN  JFLEBLK1+JFLE-JFLEBLK,A,IJSYS01    DCB POINTER           33000000
         JGEN  JFLEBLK1+JBUFNDX-JFLEBLK,H,2       BUFR DISPLACE OX02955 33600002
         JGEN  JFLEBLK1+JIOFLAG-JFLEBLK,X,00      FILE REQUEST FLAG     34200000
         ORG   START+JFLEBLK2-JCOMMON+JDECB-JFLEBLK FILE 2 DECB         34800000
         WRITE JDECB2,SF,IJSYS02,MF=L   WRITE DECB FOR SYSUT2           35400000
         ORG   START+JFLEBLK2-JCOMMON+JTCLOSE-JFLEBLK TCLOSE PARM LIST  36000000
         CLOSE (IJSYS02,REREAD),TYPE=T,MF=L    TCLOSE FOR SYSUT2        36600000
         JGEN  JFLEBLK2+JFLE-JFLEBLK,A,IJSYS02    DCB POINTER           37200000
         JGEN  JFLEBLK2+JBUFNDX-JFLEBLK,H,2       BUFR DISPLACE OX02955 37800002
         JGEN  JFLEBLK2+JIOFLAG-JFLEBLK,X,00      FILE REQUEST FLAG     38400000
         ORG   START+JFLEBLK3-JCOMMON+JDECB-JFLEBLK FILE 3 DECB         39000000
         WRITE JDECB3,SF,IJSYS03,MF=L          WRITE DECB FOR SYSUT3    39600000
         ORG   START+JFLEBLK3-JCOMMON+JTCLOSE-JFLEBLK TCLOSE PARM LIST  40200000
         CLOSE (IJSYS03,REREAD),TYPE=T,MF=L    TCLOSE FOR SYSUT3        40800000
         JGEN  JFLEBLK3+JFLE-JFLEBLK,A,IJSYS03    DCB POINTER           41400000
         JGEN  JFLEBLK3+JBUFNDX-JFLEBLK,H,2       BUFR DISPLACE OX02955 42000002
         JGEN  JFLEBLK3+JIOFLAG-JFLEBLK,X,00      FILE REQUEST FLAG     42600000
         JGEN  JMAXRL,H,16000           MAX RL FOR FILES       @AZ07378 43200006
         JGEN  JADINCM,A,0              ZERO INPUT COMMON ADDRESS       43800000
         JGEN  JADOUTCM,A,0             ZERO OUTPUT COMMON ADDRESS      44400000
         ORG   START+JLVTMDT-JCOMMON    BLANK LEVEL TIME DATE           45000000
         JGENIN ' ASM 0000 00.00 00/00/00'   LEVEL TIME AND DATE        45600000
         ORG   START+JIDR-JCOMMON                                       45650000
         JGENIN '15741SC103 000000000                   '               45700000
         JGEN  JDECKIDL,X,00            ZERO DECK ID LENGTH             46200000
         ORG   START+JDECKID-JCOMMON    BLANK DECK ID                   46800000
         JGENIN ' ',8                   ''                              47400000
         JGEN  JMSGL,X,00               ZERO MESSAGE LEVEL              48000000
         JGEN  JSYSPARM,A,0             ZERO SYSPARM POINTER            48600000
         JGEN  JPARMPTR,A,0             ZERO PARM ADDR                  49200000
         JGEN  JPARM,A,0                ZERO PARM BYTES                 49800000
         ORG   START+JPREFIX-JCOMMON    INTERNAL COMPONENT NAME         51000000
         JGENIN &COMPNM                 COMPONENT ID                    51600000
         JGEN  JWARNFLG,X,00            ZERO WARNING FLAG               52200000
         JGEN  JRECCHK,X,00             ZERO POST PROCESSOR FLAG        52800000
         JGEN  JINDERRF,X,00            ZERO ERROR FLAGS                53400000
         JGEN  JINFLAG,X,00             ZERO INFLAG                     54000000
         JGEN  JOUTFLAG,X,00            ZERO OUTFLAG                    54600000
         JGEN  JMLCFLAG,X,00            ZERO MLCFLAG                    55200000
         JGEN  JRECIN,F,0               ZERO RECORDS IN COUNT           55800000
         JGEN  JRECLIB,F,0              ZERO RECORDS IN FROM LIB CNT.   56400000
         JGEN  JRECPCH,F,0              ZERO RECORDS PUNCHED            57000000
         JGEN  JRECPRT,F,0              ZERO RECORDS PRINTED            57600000
         JGEN  JSLEN,F,0                ZERO STORAGE LENGTH             58200000
         JGEN  JCLVLPTR,A,(SAVETBL-JSAVESZ,0-JSAVESZ) INIT SAVE AREA PT 58800000
         ORG   START+JSAVETBL-JCOMMON   ZERO SAVE TABLE                 59400000
SAVETBL  DC    (JSAVESZ*JSAVELVL/4)A(0) PUSH-POP SAVE AREA              60000000
         ORG   START+JABORT-JCOMMON     ABORT ERROR                     60600000
         B     ABORT                    GO TO ABORT                     61200000
AABORT   JGEN  JAABORT,A,0              ADDR OF ABORT ROUTINE IN DRIVER 61800000
         JGEN  JSYSOPEN,A,SYSOPEN       ADDR OF OPEN PARM LIST          62400000
         JGEN  JSYSCLOS,A,SYSCLOS       ADDR OF CLOSE PARM LIST         63000000
         JGEN  JSRCLN,F,70              DATA PORTION MOVE LENGTH  (1-7) 63600000
         JGEN  JBEGCL,F,0               BEGIN COLUMN MINUS 1      (2-7) 64200000
         JGEN  JCTCHR,F,71              CONT CHR COLUMN MINUS 1   (3-7) 64800000
         JGEN  JSEQCL,F,72              SEQ FLD BEGIN COL MINUS 1 (4-7) 65400000
         JGEN  JSEQLN,F,7               SEQ FLD MOVE LENGTH       (5-7) 66000000
         JGEN  JCTBGN,F,15              CONT COLUMN MINUS 1       (6-7) 66600000
         JGEN  JCTLN,F,55               CONT FLD MOVE LENGTH      (7-7) 67200000
         JGEN  JINFILE,Y,FILE3          INPUT FILE FOR X3               67800000
         JGEN  JOUTFILE,Y,FILE1         OUTPUT FILE FOR X3              68400000
         JGEN  JPAGENO,H,0              ZERO PAGE NUMBER                69000000
         JGEN  JPRTONLY,X,0000000000    CLEAR JPRTONLY,JSYSGEN,JLTLNG   69600000
         ORG   START+JTRTABLE-JCOMMON   TRANSLATE TABLE                 70200000
         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'     CARD 01 OF 16    70800000
         DC    X'C7C8C9D1D2D3D4D5D6D7D8D9E2E3E4E5'     CARD 02 OF 16    71400000
         DC    X'E6E7E8E95B7B7C7E4D4E605C615D6B40'     CARD 03 OF 16    72000000
         DC    X'7D504B333435363738393A3B3C3D3E3F'     CARD 04 OF 16    72600000
         DC    X'2F4142434445464748494A324C28294F'     CARD 05 OF 16    73200000
         DC    X'315152535455565758595A242B2D5E5F'     CARD 06 OF 16    73800000
         DC    X'2A2C62636465666768696A2E6C6D6E6F'     CARD 07 OF 16    74400000
         DC    X'707172737475767778797A252630277F'     CARD 08 OF 16    75000000
         DC    X'808182838485868788898A8B8C8D8E8F'     CARD 09 OF 16    75600000
         DC    X'909192939495969798999A9B9C9D9E9F'     CARD 10 OF 16    76200000
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'     CARD 11 OF 16    76800000
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'     CARD 12 OF 16    77400000
         DC    X'C00A0B0C0D0E0F101112CACBCCCDCECF'     CARD 13 OF 16    78000000
         DC    X'D0131415161718191A1BDADBDCDDDEDF'     CARD 14 OF 16    78600000
         DC    X'E0E11C1D1E1F20212223EAEBECEDEEEF'     CARD 15 OF 16    79200000
         DC    X'00010203040506070809FAFBFCFDFEFF'     CARD 16 OF 16    79800000
         ORG   START+JCOMEND-JCOMMON    END OF COMMON                   80400000
         SPACE 5                                                        81000000
         TITLE '&COMPNM&ASMID - ASSEMBLER COMMON LOAD MODULE - UTILITY X81050000
               FILE OPEN AND CLOSE LISTS'                               81100000
SYSOPEN  OPEN  (IJSYS01,(OUTIN,REREAD),IJSYS02,(OUTIN,REREAD),IJSYS03,(X81600000
               OUTIN,REREAD)),MF=L      OPEN PARM LIST                  82200000
         SPACE 3                                                        82800000
SYSCLOS  CLOSE (IJSYS01,,IJSYS02,,IJSYS03,),MF=L CLOSE PARM LIST        83400000
         SPACE 3                                                        84000000
ABORTSYN LA    R10,ERR261               SYNAD EXIT (I/O ERROR) ABORT    84600000
         LR    R11,R0                   SAVE R0 FOR ABORT ROUTINE       85200000
         SPACE 1                                                        85800000
ABORT    L     R12,AABORT               GET ADDR OF ABORT ROUTINE       86400000
         BR    R12                      GO TO IT                        87000000
         SPACE 3                                                        87600000
     TITLE '&COMPNM&ASMID - ASSEMBLER COMMON LOAD MODULE - SYSUT1 DCB'  88850000
IJSYS01  DCB   DDNAME=SYSUT1,MACRF=(RP,WP),RECFM=U,DSORG=PS,           X89400000
               SYNAD=ABORTSYN,DEVD=DA,NCP=1                             90000000
         SPACE 5                                                        90600000
     TITLE '&COMPNM&ASMID - ASSEMBLER COMMON LOAD MODULE - SYSUT2 DCB'  90650000
IJSYS02  DCB   DDNAME=SYSUT2,MACRF=(RP,WP),RECFM=U,DSORG=PS,           X91200000
               SYNAD=ABORTSYN,DEVD=DA,NCP=1                             91800000
         SPACE 5                                                        92400000
     TITLE '&COMPNM&ASMID - ASSEMBLER COMMON LOAD MODULE - SYSUT3 DCB'  92450000
IJSYS03  DCB   DDNAME=SYSUT3,MACRF=(RP,WP),RECFM=U,DSORG=PS,           X93000000
               SYNAD=ABORTSYN,DEVD=DA,NCP=1                             93600000
         SPACE 5                                                        93650000
      TITLE '&COMPNM&ASMID - ASSEMBLER COMMON LOAD MODULE - PATCH AREA' 93700000
         JPATCH X0C00,630               5% PATCH AREA                   94200000
         SPACE 3                                                        94250000
         END   START                                                    94800000
./  ADD  SSI=71710265,NAME=IFOX0D
* /* START OF SPECIFICATIONS ****                                       00020000
*02* PROCESSOR = ASSEMBLER                                              00040000
**** END OF SPECIFICATIONS ***/                                         00060000
         SPACE 3                                                        00082000
         GBLC  &COMPNM,&ASMID           GLOBAL VARIABLES                00090000
         JHEAD 'ASSEMBLER INITILIZATION - PROLOG',                     X00100000
               PHASEID=X0D,                                            X00200000
               LEVEL=10                                                 00300000
*                                                                     * 00400000
*FUNCTION/OPERATION-                                                  * 00500000
*   THIS MODULE INITIALIZES THE ASSEMBLER.  IT FORMATS THE TIME,      * 00600000
*   DATE AND ASSEMBLER LEVEL, CHECKS FOR VALID PARAMETERS, CHECKS TO  * 00700000
*   SEE THAT ALL NECESSARY DD CARDS ARE PRESENT, AND SETS THE MAXIMUM * 00800000
*   WORKFILE RECORD SIZE.                                             * 00900000
*                                                                     * 01000000
*ENTRY POINT-                                                         * 01100000
*        START - ENTERED BY LOAD AND BRANCH FROM DRIVER.              * 01200000
*                                                                     * 01300000
*INPUT-                                                               * 01400000
*   N/A                                                               * 01500000
*                                                                     * 01600000
*OUTPUT-                                                              * 01700000
*   N/A                                                               * 01800000
*                                                                     * 01900000
*EXTERNAL ROUTINES-                                                   * 02000000
*   N/A                                                               * 02100000
*                                                                     * 02200000
*EXITS, NORMAL-                                                       * 02300000
*   RETURN TO DRIVER BY JRETURN MACRO.                                * 02400000
*                                                                     * 02500000
*EXITS, ERROR-                                                        * 02600000
*   BRANCH TO JABORT IN COMMON.                                       * 02700000
*                                                                     * 02800000
*TABLE/WORK AREAS-                                                    * 02900000
*   REGISTER R13 POINTS TO COMMON.                                    * 03000000
*                                                                     * 03100000
*ATTRIBUTES-                                                          * 03200000
*   REFRESHABLE.                                                      * 03300000
*                                                                     * 03400000
*NOTES-                                                               * 03500000
         SPACE 3                                                        03600000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   03650000
         COPY  JCOMMON                  JCOMMON COPY CODE               03700000
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE  03800000
         COPY  JERMSGCD                 JERMSGCD COPY CODE              03900000
         PRINT ON                       THAT'S ALL WE DON'T WANT        03950000
         SPACE 2                                                        04000000
         TITLE '&COMPNM&ASMID - ASSEMBLER INITILIZATION - FILE BLOCK DSE04050000
               ECT (JFLEBLK)'                                           04060000
         COPY  JFLEBLK                  JFLEBLK COPY CODE               04100000
         SPACE 2                                                        04200000
         TITLE '&COMPNM&ASMID - ASSEMBLER INITILIZATION - DCBD MACRO '  04250000
         DCBD  DSORG=(PS),DEVD=(DA)     DCBD MACRO                      04300000
         SPACE 7                                                        04400000
LVTMDT   DSECT                          , LEVEL TIME AND DATE DSECT     04500000
         DS    CL5                     ' ASM '                          04600000
LV       DS    CL4                      NNNN VERSION LEVEL              04700000
         DS    C                        ' '                             04800000
TM       DS    CL5                      HH.MM          TIME             04900000
         DS    C                        ' '                             05000000
DT       DS    CL8                      MM/DD/YY       DATE             05100000
IDR      DSECT                                                          05150000
         DS    CL11                                                     05160000
VLML     DS    CL2                     VERSION AND MOD. LEVEL           05170000
         DS    CL2                                                      05180000
YEARADAY DS    CL5                     YEAR AND DAY OF YEA9             05190000
SECIDR   DS    CL19                    SECOND IDR                       05192000
         SPACE 6                                                        05200000
P        DSECT                          DDNAME OVERRIDE LIST            05300000
PLEN     DS    H                        LENGTH OF LIST                  05400000
         DS    3CL8                     (NOT APPLICABLE)                05600000
PSYSLIB  DS    CL8                      SYSLIB DDNAME                   05700000
PSYSIN   DS    CL8                      SYSIN DDNAME                    05800000
PSYSPRIN DS    CL8                      SYSPRINT DDNAME                 05900000
PSYSPUNC DS    CL8                      SYSPUNCH DDNAME                 06000000
PSYSUT1  DS    CL8                      SYSUT1 DDNAME                   06100000
PSYSUT2  DS    CL8                      SYSUT2 DDNAME                   06200000
PSYSUT3  DS    CL8                      SYSUT3 DDNAME                   06300000
PSYSGO   DS    CL8                      SYSGO DDNAME                    06350000
PSYSTERM DS    CL8                      SYSTERM DDNAME                  06370000
         SPACE 2                                                        06400000
         TITLE '&COMPNM&ASMID - ASSEMBLER INITILIZATION '               06450000
* VS1 RELEASE 3.1 CHANGES                                               06460031
*C273350,278000,290000,301000,312000,324000,339000,354000      @OY02543 06470005
*A504500-504800                                                @OX09734 06480005
         JCSECT (X0D00)                 SECTION NAME                    06500000
         JMODID                                                         06600000
START    JSAVE BASE=YES                 SAVE REGISTERS                  06700000
         JENTRY (X0D01=START)           SECTION ENTRY POINT             06800000
         SPACE 2                                                        06900000
         TITLE '&COMPNM&ASMID - ASSEMBLER INITILIZATION - FORMAT HEADING06950000
               G IDENTIFIER (LEVEL, TIME, DATE)'                        06960000
         LA    R5,JLVTMDT               SET BASE FOR HEADING            07200000
         USING LVTMDT,R5                ''                              07300000
         LA    R2,JIDR                                                  07350000
         USING IDR,R2                                                   07360000
         LH    R14,D0(,R10)             PICK UP MASTER ROOT SEG LEVEL   07400000
         CVD   R14,JDWORD               0000000000000NNC                07500000
         UNPK  JDWORD(D2),JDWORD+D6(D2) FNCN                            07600000
         MVN   LV(D2),JDWORD            0N0N                            07700000
         MVI   VLML,X'00'                                               07750000
         MVC   VLML+D1(D1),LV                                           07760000
         MVI   VLML+D2,X'00'                                            07770000
         MVC   VLML+D3(D1),LV+D1                                        07780000
         MVC   LV,VLML                                                  07790000
         SPACE 2                                                        07800000
         TIME  DEC                      GET THE TIME                    07900000
         ST    R0,JFWORD1               HHMMSSTH                        08000000
         UNPK  JDWORD(D5),JFWORD1(D3)   FHFHFMFMSS                      08100000
         MVN   TM(D2),JDWORD            0H0H                            08200000
         MVN   TM+D3(D2),JDWORD+D2      0M0M                            08300000
         SPACE 2                                                        08400000
         ST    R1,JFWORD1               00YYDDDC                        08500000
         UNPK  JDWORD(D3),JFWORD1+D1(D2) FYFYDD                         08600000
         MVN   DT+D6(D2),JDWORD         0Y0Y                            08700000
         MVN   YEARADAY(D2),JDWORD                                      08750000
         UNPK  JDWORD(D3),JFWORD1+D2(D2)                                08760000
         MVN   YEARADAY+D2(D3),JDWORD                                   08770000
         SR    R2,R2                    ZERO                            08800000
         XC    JDWORD,JDWORD            ZERO WORK AREA                  08900000
         STH   R1,JDWORD+D6             PUT IN DDDC                     09000000
         CVB   R1,JDWORD                CONVERT TO BINARY               09100000
         CH    R1,=H'59'                IS IT BEFORE FEB 29             09200000
         BNH   TIMC                     YES, DON'T CHECK FOR LEAP YEAR  09300000
         TM    JFWORD1+D1,D1            IS IT AN ODD YEAR               09400000
         BO    TIMB                     YES, SET AS NOT LEAP YEAR       09500000
         TM    JFWORD1+D1,D18           IS IT LEAP YEAR                 09600000
         BNM   TIMC                     NOT MIXED IS A LEAP YEAR        09700000
TIMB     LA    R1,D1(,R1)               SET AS NOT LEAP YEAR            09800000
TIMC     LA    R14,D1                   SET FOR FIRST MONTH             09900000
TIMD     IC    R2,CALEN-R1(R14)         GET DAYS PER MONTH              10000000
         SR    R1,R2                    REDUCE DAYS BY THIS MONTH       10100000
         BNP   TIME                     IN THIS MONTH, BRANCH           10200000
         LA    R14,D1(,R14)             UP TO NEXT MONTH                10300000
         B     TIMD                       AND TRY AGAIN                 10400000
TIME     AR    R1,R2                    ADD BACK THIS MONTH             10500000
         STC   R14,DT+D1                PUT IN MONTH                    10600000
         SH    R14,=H'10'               IS IT OCT, NOV OR DEC           10700000
         BM    TIMF                     NO, CONTINUE                    10800000
         MVI   DT,J1                    YES, PUT IN                     10900000
         STC   R14,DT+D1                  CORRECT MONTH                 11000000
TIMF     CVD   R1,JDWORD                CONVERT DAY TO PACKED           11100000
         UNPK  JDWORD(D2),JDWORD+D6(D2) UNPACK THE DAY                  11200000
         MVN   DT+D3(D2),JDWORD         MOVE IN DAY                     11300000
         DROP  R5                       DROP HEADING BASE               11400000
         SPACE                                                          11500000
         TITLE '&COMPNM&ASMID - ASSEMBLER INITILIZATION - PROCESS PARAME11550000
               ETER OPTIONS'                                            11560000
*        SET DEFAULT OPTIONS                                            11570000
*                                                                       11640000
         JEXTRN  (X0J00=X0J00)          EXTERNAL ENTRY POINT            11710000
         L     R3,=A(X0J00)             POINT TO DEFAULT PARMS          11780000
         MVC   JPARMS,D1(R3)            MOVE UM                         11850000
         MVC   JPARM,D4(R3)                  IN                         11920000
         MVI   JPDFLAG,D0               ZERO OUT DUMP FLAG              11950000
         SPACE 3                                                        11990000
*        PROCESS OPTION PARAMETERS                                      12100000
*                                                                       12200000
         L     R2,D0(,R11)              POINT TO DATA AREA              12300000
         LH    R6,D0(,R2)               GET LENGTH OF INFO FIELD        12400000
         LTR   R6,R6                    IS IT ZERO                      12500000
         BZ    SCAN999                  YES.  NO PARM INFORMATION       12600000
         LA    R0,D2(,R6)               REQUEST SPACE FOR TOTAL PARM    12700000
         LR    R4,R0                    SAVE REQUESTED LENGTH           12800000
         GETMAIN R,LV=(0)               GET CORE                        12900000
         STH   R4,D0(,R1)               SAVE REQUESTED LENGTH           13000000
         ST    R1,JPARMPTR              SAVE ADDR OF TRANS PARM AREA    13100000
         LA    R5,D2(,R1)               POINT TO TRANSLATED FIELD       13200000
MOVLOP   SH    R6,=H'256'               SEE IF ONE MOVE WILL DO IT      13220000
         BP    MOVLOP1                  BRANCH IF NOT                   13240000
         AH    R6,=H'255'               GET REMAINING MOVE LENGTH       13260000
         EX    R6,MVCPARM               MOVE PARM INFO INTO OUR CORE    13280000
         EX    R6,TRPARM                TRANSLATE INFO TO INTERNAL      13300000
         LA    R5,D2(,R1)               POINT TO TRANSLATED FIELD       13320000
         L     R2,D0(,R11)              POINT TO DATA AREA              13340000
         LH    R6,D0(,R2)               GET LENGTH OF INFO FIELD        13360000
         BCTR  R6,R0                    GET MACHINE LENGTH              13380000
         B     SCAN                     GO SCAN                         13400000
MOVLOP1  MVC   D0(256,R5),D2(R2)        MOVE 256 BYTES                  13420000
         TR    D0(256,R5),JTRTABLE      TRANSLATE 256 BYTES             13440000
         LA    R5,256(,R5)              UPDATE POINTER                  13460000
         LA    R2,256(,R2)              UPDATE POINTER                  13480000
         B     MOVLOP                   MOVE AND TRANSLATE MORE         13500000
         SPACE 3                                                        13600000
*        AT THIS POINT, REGISTER R6 = PARM INFO FIELD LENGTH (MACHINE)  13700000
*                       REGISTER R5 = ADDR OF TRANSLATED INFO FIELD     13800000
*                       JPARMPTR = ADDR OF ACQUIRED CORE.  FORMAT IS AS 13900000
*                                  FOLLOWS  LLIII...III  WHERE          14000000
*                                  LL = LENGTH OF ACQUIRED CORE.        14100000
*                                  I  = TRANSLATED PARM INFO FIELD.     14200000
*                                  (JPARMPTR WILL BE SET TO ZERO WHEN   14300000
*                                  THE ACQUIRED CORE IS FREED BECAUSE   14400000
*                                  NO SYSPARM IS PRESENT OR BECAUSE     14500000
*                                  THE OVERRIDING SYSPARM IS SHORTER    14600000
*                                  THAN THE SYSGENED SYSPARM).          14700000
SCAN     SR    R2,R2                    ZERO FOR TRT                    14800000
SCAN10   CH    R6,=H'256'               TEST IF ONE TRT IS ENOUGH       14820000
         BL    SCAN15                   BRANCH IF YES                   14840000
         TRT   D0(256,R5),TRTTABLE      STOP ON , = ( BLANK             14860000
         BNZ   SCAN20                   BRANCH IF DELIMITER             14880000
         SH    R6,=H'256'               GET REMAINING LENGTH            14900000
         AH    R5,=H'256'               UPDATE POINTER                  14920000
         SET   JINVOPT,ON               INDICATE ERROR                  14940000
         B     SCAN10                   CONTINUE SCAN                   14960000
SCAN15   EX    R6,TRTPARM               STOP ON , = ( BLANK             14980000
         BNZ   SCAN20                   BRANCH IF NOT END OF FIELD      15000000
         LA    R1,D1(R5,R6)             DUMMY UP TRT OUTPUT TO SIMULATE 15100000
         LA    R2,JCOMMA                  STOPPING ON , AFTER FIELD     15200000
SCAN20   LR    R14,R1                   CALCULATE LENGTH OF CHAR STRING 15300000
         SR    R14,R5                   ''                              15400000
         SR    R6,R14                   REDUCE REMAINING LENGTH         15500000
         CH    R14,=H'10'               GREATER THAN 10 CHARACTERS      15600000
         BH    SCAN110                  ERROR.                          15700000
         LTR   R14,R14                  NULL STRING (ZERO LENGTH)       15800000
         BNP   SCAN110                  ERROR.                          15900000
         BCTR  R14,R0                   GET MACHINE LEN OF CHAR STRING  16000000
         LA    R15,PARMTAB              GET ADDR OF OPTION TABLE        16100000
         MVC   COMPAREA,BLANKS          BLANK COMAPRE AREA              16200000
         EX    R14,MVCDWORD             MOVE OPTION TO BLANK AREA       16300000
SCAN30   CLC   COMPAREA,D0(R15)         IS IT THIS OPTION               16400000
         BE    SCAN40                   YES.                            16500000
         LA    R15,PARMLEN(,R15)        BUMP OPTION TABLE ADDR          16600000
         C     R15,=A(PARMEND)          END OF TABLE                    16700000
         BL    SCAN30                   BRANCH IF NOT AT END OF TABLE   16800000
         B     SCAN110                  ERROR.  OPTION NOT FOUND        16900000
SCAN40   EX    R0,D10(,R15)             EXEC INST TO SET OPTION        *17000000
                                          CHK PARM TBL.  SOME DONT RTN. 17100000
         CH    R2,=Y(JCOMMA)            IS OPTION DELIMITED BY COMMA    17200000
         BE    SCAN50                   DON'T SET FLAG IF OK            17260000
SCAN110  SET   JINVOPT,ON                                               17320000
SCAN50   LA    R5,D1(,R1)               BUMP PART DELIMITER             17400000
         BCTR  R6,R0                    REDUCE LENGTH BY ONE            17500000
         LTR   R6,R6                    CHECK LENGTH                    17600000
         BNM   SCAN10                   IF NOT MINUS, LOOK FOR NEXT OPT 17700000
         TM    JSYSPARM,BIT0            WAS THERE A SYSPARM (HI-ORDER)  17800000
         BO    SCAN70                   BR IF SYSPARM                   17900000
         L     R1,JPARMPTR              FREE TRANSLATED PARM AREA       18000000
         LH    R0,D0(,R1)               GET LENGTH OF AREA              18100000
         FREEMAIN R,LV=(0),A=(1)        FREE CORE                       18200000
         XC    JPARMPTR,JPARMPTR        SET PTR TO ZERO (FOR DRIVER)    18300000
SCAN70   L     R2,JPARM                 GET POINTER                     18320000
         O     R2,D8(,R3)               COMPUTE AND                     18340000
         N     R2,D12(,R3)              STRIP OFF BITS                  18360000
         CL    R2,JPARM                 END OF JPARM                    18380000
         ST    R2,JPARM                 SAVE POINTER                    18400000
         BE    SCAN999                  GO TO SCAN IF END               18420000
         SET   JINVOPT,ON               INDICATE INVALID OPTION         18440000
         B     SCAN999                  START SCANNING                  18460000
         SPACE 3                                                        18500000
SCAN80   SR    R15,R15                  CONVERT NUMBER                  18600000
SCAN90   LA    R1,D1(,R1)               DUMP PTR                        18900000
         BCTR  R6,R0                    DECREMENT LENGTH BY ONE         19000000
         LTR   R6,R6                    ANY FIELD LEFT                  19100000
         BMR   R9                       BRANCH IF END OF FIELD          19200000
         CLI   D0(R1),JNUMMAX           IS THIS CHAR A NUMBER           19300000
         BHR   R9                       RETURN IF NOT A NUMBER          19400000
         MH    R15,=H'10'               MULTIPLY ACCUMULATED NUMBER     19500000
         IC    R2,D0(,R1)                 BY 10 AND ADD IN UNITS        19600000
         AR    R15,R2                     POSITION                      19700000
         B     SCAN90                   TRY NEXT CHARACTER              19800000
         SPACE 3                                                        20200000
SCAN200  CH    R2,=Y(JLPARN)            IS DELIMITER LEFT PAREN         20600000
         BNE   SCAN110                  ERROR IF NOT                    20610000
         BAL   R9,SCAN80                CONVERT NUMBER                  20620000
         CLI   D0(R1),JRPARN            FOLLOWED BY RIGHT PAREN         20630000
         BNE   SCAN110                  ERROR IF NOT                    20640000
         LA    R1,D1(,R1)               BUMP POINTER                    20650000
         BCTR  R6,R0                    DECREMENT LENGTH                20660000
         LTR   R6,R6                    ANY FIELD LEFT                  20670000
         BM    SCAN230                  BRANCH IF END OP FIELD          20680000
         B     SCAN220                  CONTINUE CHECKING               20690000
SCAN210  CH    R2,=Y(JEQUAL)            TEST IF =                       20700000
         BNE   SCAN110                  BRANCH IF NOT =                 20710000
         BAL   R9,SCAN80                CONVERT NUMBER                  20720000
         LTR   R6,R6                    CHECK IF END OF FIELD           20730000
         BM    SCAN230                  BRANCH IF SO                    20740000
SCAN220  CLI   D0(R1),JCOMMA            FOLLOWED BY COMMA               20750000
         BNE   SCAN110                  ERROR IF NOT                    20760000
SCAN230  CH    R15,=H'255'              MORE THAN 255                   20770000
         BH    SCAN110                  YES.  LOG ERROR                 20800000
         GOIF  JMSGLKEY,ON=SCAN110                                      20850000
         STC   R15,JMSGL                SAVE IN MSGL                    20900000
         B     SCAN50                   GO SCAN FOR MORE OPTIONS        21000000
         SPACE 3                                                        21100000
SCAN300  CH    R2,=Y(JLPARN)            IS DELIMITER LEFT PAREN         21200000
         BNE   SCAN110                  ERROR IF NOT                    21210000
         BAL   R9,SCAN80                CONVERT NUMBER                  21220000
         CLI   D0(R1),JRPARN            FOLLOWED BY RIGHT PAREN         21230000
         BNE   SCAN110                  ERROR IF NOT                    21240000
         LA    R1,D1(,R1)               BUMP POINTER                    21250000
         BCTR  R6,R0                    DECREMENT LENGTH                21260000
         LTR   R6,R6                    ANY FIELD LEFT                  21270000
         BM    SCAN330                  BRANCH IF END OF FIELD          21280000
         B     SCAN320                  CONTINUE CHECKING               21290000
SCAN310  CH    R2,=Y(JEQUAL)            TEST IF =                       21300000
         BNE   SCAN110                  BRANCH IF NOT =                 21310000
         BAL   R9,SCAN80                CONVERT NUMBER                  21320000
         LTR   R6,R6                    CHECK IF END OF FIELD           21330000
         BM    SCAN330                  BRANCH IF SO                    21340000
SCAN320  CLI   D0(R1),JCOMMA            FOLLOWED BY COMMA               21350000
         BNE   SCAN110                  ERROR IF NOT                    21360000
SCAN330  CH    R15,=H'99'               MORE THAN 99                    21370000
         BH    SCAN110                  YES. LOG ERROR                  21400000
         GOIF  JLNCTKEY,ON=SCAN110                                      21650000
         STH   R15,JLNCT                SAVE LINECNT OF BODY OF LISTING 21700000
         B     SCAN50                   GO SCAN FOR MORE OPTIONS        21800000
         SPACE 3                                                        21900000
SCAN400  LA    R1,D1(,R1)               BUMP POINTER                    22000000
         BCTR  R6,R0                    DECREMENT LENGTH                22010000
         LTR   R6,R6                    END OF PARAM                    22020000
         BM    SCAN110                  ERROR IF NO RIGHT PAREN         22030000
         CLI   D0(R1),JLPARN            CHARACTER IS LEFT PAREN         22040000
         BE    SCAN405                  BRANCH IF SO                    22050000
         CLI   D0(R1),JRPARN            CHARACTER IS RIGHT PAREN        22060000
         BNE   SCAN400                  CONTINUE TO SCAN IF NOT         22070000
         BCTR  R14,R0                   DECREASE PAREN COUNT            22080000
         LTR   R14,R14                  TEST PAREN COUNT                22090000
         BNM   SCAN400                  CONTINUE TO SCAN IF MORE        22100000
         LR    R14,R1                   POINTER TO END OF SYSPARM       22110000
         LA    R1,D1(,R1)               BUMP POINTER                    22120000
         BCTR  R6,R0                    DECREMENT COUNT                 22130000
         LTR   R6,R6                    TEST IF END OF PARAM            22140000
         BM    SCAN465                  BRANCH IF END                   22150000
         CLI   D0(R1),JCOMMA            TEST NEXT CHARACTER             22160000
         BE    SCAN465                  HANDLE SYSPARM IF COMMA         22170000
         B     SCAN110                  ERROR IF NOT                    22180000
SCAN405  LA    R14,D1(,R14)             INCREASE PAREN COUNT            22190000
         B     SCAN400                  CONTINUE TO SCAN                22200000
SCAN410  SR    R14,R14                  ZERO PAREN COUNT                22210000
         LR    R15,R1                   SAVE STARTING POSITION          22220000
         CH    R2,=Y(JLPARN)            OPTION DELIMITED BY LEFT PAREN  22230000
         BE    SCAN400                  HANDLE SYSPARM(STRING) IF (     22240000
         CH    R2,=Y(JEQUAL)            TEST IF =                       22250000
         BNE   SCAN110                  ERROR IF NOT                    22260000
SCAN420  LA    R1,D1(,R1)               BUMP POINTER                    22400000
         BCTR  R6,R0                    DECREMENT LENGTH                22500000
         LTR   R6,R6                    END OF PARM                     22600000
         BM    SCAN450                  YES.  CHECK PAREN BALANCE.      22700000
         CLI   D0(R1),JLPARN            CHARACTER (                     22800000
         BE    SCAN430                  YES.  GO INCREMENT PAREN COUNT  22900000
         CLI   D0(R1),JRPARN            CHARACTER )                     23000000
         BE    SCAN440                  YES.  GO DECREMENT PAREN COUNT. 23100000
         LTR   R14,R14                  IS PAREN BALANCE ZERO           23200000
         BNZ   SCAN420                  NO.  GO CONTINUE SCAN           23300000
         CLI   D0(R1),JCOMMA            COUNT ZERO.  IS IT A COMMA.     23400000
         BE    SCAN460                  YES.  THAT IS ALL OF SYSPARM.   23500000
         B     SCAN420                  GO CONTINUE SCAN                23600000
SCAN430  LA    R14,D1(,R14)             INCREMENT PAREN COUNT           23700000
         B     SCAN420                  GO CONTINUE SCAN                23800000
SCAN440  BCTR  R14,R0                   DECREMENT PAREN COUNT           23900000
         LTR   R14,R14                  IS IT NEGATIVE                  24000000
         BNM   SCAN420                  NO.  CONTINUE SCAN.             24100000
         B     SCAN110                  ERROR.                          24200000
SCAN450  LTR   R14,R14                  WERE PAREN BALANCED.            24300000
         BNZ   SCAN110                  NO.  ERROR.                     24400000
SCAN460  LR    R14,R1                   LENGTH = END -                  24500000
SCAN465  SR    R14,R15                  START                           24600000
         BCT   R14,SCAN470              BR IF LENGTH IS GT 1            24700000
         XC    JSYSPARM,JSYSPARM        NULL SYSPARM   SYSPARM=,        24800000
         B     SCAN50                   CONTINUE WITH OTHER OPTIONS     24900000
SCAN470  STC   R14,D0(,R15)             STORE ACT LENGTH OF CHAR STRING 25000000
         L     R4,JSYSPARM              SEE IF DEFAULT SYSPARM          25100000
         LTR   R4,R4                    ''                              25200000
         BZ    SCAN480                  BR IF NO DEFAULT SYSPARM        25300000
         CLC   D0(D1,R4),D0(R15)        IS LENGTH OF SYSPARM LE DEFAULT 25400000
         BL    SCAN480                    LENGTH.  NO.  MUST SAVE PARM  25500000
         EX    R14,MVCSYSPM             OVERLAY DEFAULT SYSPARM         25600000
         B     SCAN50                   CONTINUE WITH OTHER OPTIONS     25700000
SCAN480  ST    R15,JSYSPARM             SAVE SYSPARM ADDR               25800000
         OI    JSYSPARM,BIT0            SET BIT ON TO INDICATE DON'T    25900000
         B     SCAN50                     FREE PARM AREA.  NEXT OPTION  26000000
SCAN500  C     R6,=F'4'                 CHECK REMAINING CHARACTERS      26005000
         BL    SCAN110                  ERROR IF LESS THAN 5            26010000
         CLC   D0(D5,R1),=AL1(JLPARN,JM,JI,JN,JRPARN) TEST IF MIN       26015000
         BNE   SCAN510                  BRANCH IF NOT MIN BLOCK SIZE    26020000
         SET   JMINBUF,ON               INDICATE MIN BUFFERS            26025000
         B     SCAN520                  GO UPDATE POINTER               26030000
SCAN510  CLC   D0(D5,R1),=AL1(JLPARN,JS,JT,JD,JRPARN) TEST IF STD       26035000
         BNE   SCAN110                  ERROR IF NOT                    26040000
         SET   JMINBUF,OFF              INDICATE STANDARD BUFFERS       26045000
SCAN520  LA    R1,D5(,R1)               BUMP TO NEXT OPTION             26050000
         S     R6,=F'5'                 DECREMENT LENGTH                26055000
         LTR   R6,R6                    TEST IF END                     26060000
         BM    SCAN50                   CONTINUE TO SCAN                26065000
         CLI   D0(R1),JCOMMA            CHECK IF COMMA                  26070000
         BNE   SCAN110                  ERROR IF NOT                    26075000
         B     SCAN50                   CONTINUE TO SCAN                26080000
SCAN600  SET   JXREF,ON                 INDICATE XREF                   26080800
         SET   JMINXREF,OFF             INDICATE FULL XREF              26081600
         CH    R2,=Y(JCOMMA)            CHECK IF XREF,                  26082400
         BE    SCAN50                   CONTINUE SCAN                   26083200
         C     R6,=F'5'                 CHECK REMAINING CHARACTERS      26084000
         BL    SCAN110                  ERROR IF LESS THAN (FULL)       26084800
         CLC   D0(D6,R1),=AL1(JLPARN,JF,JU,JL,JL,JRPARN)                26085600
         BE    SCAN610                  BRANCH IF (FULL)                26086400
         C     R6,=F'6'                 CHECK REMAINING CHARACTERS      26087200
         BL    SCAN110                  ERROR IF LESS THAN (SHORT)      26088000
         CLC   D0(D7,R1),=AL1(JLPARN,JS,JH,JO,JR,JT,JRPARN)             26088800
         BNE   SCAN110                  ERROR IF NOT (SHORT)            26089600
         SET   JMINXREF,ON              INDICATE SHORT XREF             26090400
         LA    R1,D7(,R1)               ADVANCE POINTER                 26091200
         S     R6,=F'7'                 DECREASE COUNT                  26092000
         B     SCAN620                  CHECK NEXT CHARACTER            26092800
SCAN610  LA    R1,D6(,R1)               ADVANCE POINTER                 26093600
         S     R6,=F'6'                 DECREASE COUNT                  26094400
SCAN620  LTR   R6,R6                    CHECK IF LAST OPTION            26095200
         BM    SCAN50                   BRANCH IF LAST                  26096000
         CLI   D0(R1),JCOMMA            CHECK IF COMMA                  26096800
         BE    SCAN50                   BRANCH IF COMMA                 26097600
         B     SCAN110                  ERROR IF NOT                    26098400
         SPACE 3                                                        26100000
SCAN999  DC    0H'0'                    CONTINUE                        26200000
         SPACE 3                                                        26300000
         TITLE '&COMPNM&ASMID - ASSEMBLER INITILIZATION - PROCESS OVERRI26350000
               IDING DDNAMES IF THERE ARE ANY'                          26360000
         LA    R10,ERR260               ERROR CODE FOR MISSING DD CARD  26400000
         SR    R6,R6                    MAKE R6 & R7 EQUAL IN CASE      26500000
         LR    R7,R6                      THERE IS NO OVERRIDING DD     26600000
         TM    D0(R11),BIT0             ANY OVERRIDING DDNAMES          26700000
         BO    TSYSTERM                 NO. R5 WILL BE GT R7 NOW        26800000
         L     R6,D4(,R11)              PT TO DDNAME LIST               26900000
         USING P,R6                     ''                              27000000
         LA    R7,P                     CALC END-OF-LINE (-2)           27100000
         AH    R7,PLEN                  ''                              27200000
         SPACE 3                                                        27300000
TSYSTERM GOIF  JTERM,OFF=TSYSLIN        NOTERMINAL SPECIFIED            27307000
         LA    R5,PSYSTERM              PT TO OVERRIDING DDNAME         27314000
         CR    R5,R7                    IS IT PAST END OF LIST          27321000
         BH    XSYSTERM                 YES GO CHANGE POINTER           27328000
         CLC   D0(D8,R5),=8X'00'        IS DDNAME OVERRIDEN     OY02543 27335031
         BNZ   DSYSTERM                 YES                             27342000
XSYSTERM LA    R5,CSYSTERM              PT TO STANDARD NAME             27349000
DSYSTERM DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      27356000
         LTR   R15,R15                  WAS DDNAME FOUND                27363000
         BZ    TSYSLIN                  YES                             27370000
         SET   JMISTERM,ON              INDICATE SYSTERM DD CARD MISSIN 27377000
         SET   JTERM,OFF                SET TERM OFF                    27384000
TSYSLIN  GOIF  JLINK,OFF=TSYSIN         NOLOAD SPECIFIED                27400000
         LA    R5,PSYSGO                PT TO OVERRIDING DDNAME         27500000
         CR    R5,R7                    IS IT PAST END OF LIST          27600000
         BH    XSYSLIN                  YES. GO CHANGE PTR              27700000
         CLC   D0(D8,R5),=8X'00'        IS DDNAME OVERRIDEN     OY02543 27800031
         BNZ   DSYSLIN                  YES.                            27900000
XSYSLIN  LA    R5,CSYSGO                PT TO STANDARD NAME             28000000
DSYSLIN  DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      28100000
         LTR   R15,R15                  WAS DDNAME FOUND                28200000
         BZ    TSYSIN                   YES                             28300000
         SET   JMISLIN,ON               NO. FLAG ERROR FOR DIAG.        28400000
         SET   JLINK,OFF                SUPPRESS OBJECT FILE            28500000
         SPACE 3                                                        28600000
TSYSIN   LA    R5,PSYSIN                PT TO OVERRIDING DDNAME         28700000
         CR    R5,R7                    IS IT PAST END OF LIST          28800000
         BH    XSYSIN                   YES. GO CHANGE PTR              28900000
         CLC   D0(D8,R5),=8X'00'        IS DDNAME OVERRIDEN     OY02543 29000031
         BNZ   DSYSIN                   YES.                            29100000
XSYSIN   LA    R5,CSYSIN                PT TO STANDARD NAME             29200000
DSYSIN   DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      29300000
         LTR   R15,R15                  WAS DDNAME FOUND                29400000
         BP    JABORT                   NO. ABORT                       29500000
         SPACE 3                                                        29600000
         GOIF  JLIST,OFF=TSYSPUNC       NOLIST SPECIFIED                29700000
         LA    R5,PSYSPRIN              PT TO OVERRIDING DDNAME         29800000
         CR    R5,R7                    IS IT PAST END OF LIST          29900000
         BH    XSYSPRIN                 YES. GO CHANGE PTR              30000000
         CLC   D0(D8,R5),=8X'00'        IS DDNAME OVERRIDEN     OY02543 30100031
         BNZ   DSYSPRIN                 YES.                            30200000
XSYSPRIN LA    R5,CSYSPRIN              PT TO STANDARD NAME             30300000
DSYSPRIN DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      30400000
         LTR   R15,R15                  WAS DDNAME FOUND                30500000
         BZ    TSYSPUNC                 YES                             30550000
         SET   JMISPRT,ON               INDICATE MISSING SYSPRINT       30600000
         WTO   MF=(E,NSPRTMSG)          GIVE MSG FOR MISSING SYSPRINT   30620000
         SET   JLIST,OFF                                                30650000
         SPACE 3                                                        30700000
TSYSPUNC GOIF  JDECK,OFF=TSYSUT1        NODECK SPECIFIED                30800000
         LA    R5,PSYSPUNC              PT TO OVERRIDING DDNAME         30900000
         CR    R5,R7                    IS IT PAST END OF LIST          31000000
         BH    XSYSPUNC                 YES. GO CHANGE PTR              31100000
         CLC   D0(D8,R5),=8X'00'        IS DDNAME OVERRIDEN     OY02543 31200031
         BNZ   DSYSPUNC                 YES.                            31300000
XSYSPUNC LA    R5,CSYSPUNC              PT TO STANDARD NAME             31400000
DSYSPUNC DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      31500000
         LTR   R15,R15                  WAS DDNAME FOUND                31600000
         BZ    TSYSUT1                  YES                             31700000
         SET   JMISPCH,ON               NO. FLAG ERROR FOR DIAG.        31800000
         SET   JDECK,OFF                SUPPRESS PUNCH FILE             31900000
         SPACE 3                                                        32000000
TSYSUT1  LA    R5,PSYSUT1               PT TO OVERRIDING DDNAME         32100000
         CR    R5,R7                    IS IT PAST END OF LIST          32200000
         BH    XSYSUT1                  YES. GO CHANGE PTR              32300000
         CLC   D0(D8,R5),=8X'00'        IS DDNAME OVERRIDEN     OY02543 32400031
         BNZ   DSYSUT1                  YES.                            32500000
XSYSUT1  LA    R5,CSYSUT1               PT TO STANDARD NAME             32600000
DSYSUT1  DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      32700000
         LTR   R15,R15                  WAS DDNAME FOUND                32800000
         BP    JABORT                   NO. ABORT                       32900000
         MVC   JMAXRL1,JDWORD+D6        SET MAXRL FOR SYSUT1            33000000
         L     R1,JFLEBLK1+JFLE-JFLEBLK PT TO SYSUT1 DCB                33100000
         USING IHADCB,R1                ''                              33200000
         MVC   DCBDDNAM,D0(R5)          MOVE IN DDNAME                  33300000
         DROP  R1                       DROP DCB ADDRESSABILITY         33400000
         SPACE 3                                                        33500000
         LA    R5,PSYSUT2               PT TO OVERRIDING DDNAME         33600000
         CR    R5,R7                    IS IT PAST END OF LIST          33700000
         BH    XSYSUT2                  YES. GO CHANGE PTR              33800000
         CLC   D0(D8,R5),=8X'00'        IS DDNAME OVERRIDEN     OY02543 33900031
         BNZ   DSYSUT2                  YES.                            34000000
XSYSUT2  LA    R5,CSYSUT2               PT TO STANDARD NAME             34100000
DSYSUT2  DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      34200000
         LTR   R15,R15                  WAS DDNAME FOUND                34300000
         BP    JABORT                   NO. ABORT                       34400000
         MVC   JMAXRL2,JDWORD+D6        SET MAXRL FOR SYSUT2            34500000
         L     R1,JFLEBLK2+JFLE-JFLEBLK PT TO SYSUT2 DCB                34600000
         USING IHADCB,R1                ''                              34700000
         MVC   DCBDDNAM,D0(R5)          MOVE IN DDNAME                  34800000
         DROP  R1                       DROP DCB ADDRESSABILITY         34900000
         SPACE 3                                                        35000000
         LA    R5,PSYSUT3               PT TO OVERRIDING DDNAME         35100000
         CR    R5,R7                    IS IT PAST END OF LIST          35200000
         BH    XSYSUT3                  YES. GO CHANGE PTR              35300000
         CLC   D0(D8,R5),=8X'00'        IS DDNAME OVERRIDEN     OY02543 35400031
         BNZ   DSYSUT3                  YES.                            35500000
XSYSUT3  LA    R5,CSYSUT3               PT TO STANDARD NAME             35600000
DSYSUT3  DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      35700000
         LTR   R15,R15                  WAS DDNAME FOUND                35800000
         BP    JABORT                   NO. ABORT                       35900000
         MVC   JMAXRL3,JDWORD+D6        SET MAXRL FOR SYSUT3            36000000
         L     R1,JFLEBLK3+JFLE-JFLEBLK PT TO SYSUT3 DCB                36100000
         USING IHADCB,R1                ''                              36200000
         MVC   DCBDDNAM,D0(R5)          MOVE IN DDNAME                  36300000
         DROP  D1                       DROP DCB ADDRESSABILITY         36400000
         SPACE 4                                                        36500000
*   CHECK FOR CONSISTENT OPTIONS -                                      36510000
*                            IF NOLIST, THEN NOXREF, NOESD, AND NORLD   36520000
*                            IF NODECK AND NOLINK, THEN NOTEST          36530000
         GOIF  JLIST,ON=CKTEST          CHECK LIST OPTION               36540000
         SET   (JXREF,JRLD,JESD),OFF    NOLIST, SO NOXREF NORLD & NOESD 36550000
CKTEST   GOIF  (JLINK,JDECK),ANY=CKTERM BOTH NOLINK AND NODECK          36560000
         SET   JTEST,OFF                YES, THEN NOTEST                36570000
CKTERM   GOIF  JTERM,ON=MIN0            IF NOTERM OPTION                36573000
         SET   (JNUM,JSTMT),OFF         FORCE NONUM AND NOSTMT          36576000
         SPACE 5                                                        36580000
MIN0     LH    R14,JMAXRL1              FIND THE MINIMUM OF JMAXRL1,    36600000
         CH    R14,JMAXRL2                JMAXRL2, JMAXRL3 & JMAXRL     36700000
         BNH   MIN1                     ''                              36800000
         LH    R14,JMAXRL2              ''                              36900000
MIN1     CH    R14,JMAXRL3              ''                              37000000
         BNH   MIN2                     ''                              37100000
         LH    R14,JMAXRL3              ''                              37200000
MIN2     CH    R14,JMAXRL               ''                              37300000
         BNH   MIN3                     ''                              37400000
         LH    R14,JMAXRL               ''                              37500000
MIN3     STH   R14,JMAXRL               SAVE MINIMUM OF JMAXRL(S)       37600000
         SPACE 3                                                        37900000
RETURN   JRETURN                                                        39200000
         SPACE 2                                                        40300000
         TITLE '&COMPNM&ASMID - ASSEMBLER INITILIZATION - CONSTANTS ANDX40350000
                PATCH AREA '                                            40360000
CSYSTERM DC    CL8'SYSTERM'             STANDARD FILE NAME FOR SYSTERM  40460000
CSYSGO   DC    CL8'SYSGO'               STANDARD FILE NAME FOR SYSGO    40600000
CSYSIN   DC    CL8'SYSIN'               STANDARD FILE NAME FOR SYSIN    40700000
CSYSPRIN DC    CL8'SYSPRINT'            STANDARD FILE NAME FOR SYSPRINT 40800000
CSYSPUNC DC    CL8'SYSPUNCH'            STANDARD FILE NAME FOR SYSPUNCH 40900000
CSYSUT1  DC    CL8'SYSUT1'              STANDARD FILE NAME FOR SYSUT1   41000000
CSYSUT2  DC    CL8'SYSUT2'              STANDARD FILE NAME FOR SYSUT2   41100000
CSYSUT3  DC    CL8'SYSUT3'              STANDARD FILE NAME FOR SYSUT3   41200000
         SPACE 1                                                        41300000
CALEN    DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) DAYS IN MONTH   41400000
         SPACE 1                                                        41500000
TRTTABLE DC    39AL1(0)                 TRANSLATE AND TEST TABLE        41600000
         DC    AL1(JEQUAL)              STOP ON =                       41700000
         DC    AL1(JLPARN)              STOP ON (                       41800000
         DC    5AL1(0)                  (DON'T STOP)                    41850000
         DC    AL1(JCOMMA)              STOP ON ,                       41900000
         DC    AL1(JBLANK)              STOP ON BLANK                   42000000
         DC    208AL1(0)                (DON'T STOP)                    42100000
         SPACE 1                                                        42200000
MVCPARM  MVC   D0(D0,R5),D2(R2)         MVC TO MOVE PARM TO OUR CORE    42300000
TRPARM   TR    D0(D0,R5),JTRTABLE       TR TO TRANSLATE TO INTERNAL     42400000
TRTPARM  TRT   D0(D0,R5),TRTTABLE       TRT TO SCAN FOR DELIMITER       42500000
MVCDWORD MVC   JDWORD(D0),D0(R5)        MVC OPTION TO JDWORD            42600000
MVCSYSPM MVC   D0(D0,R4),D0(R15)        MVC TO MOVE SYSPARM TO DEFAULT  42700000
         SPACE 1                                                        42800000
COMPAREA EQU   JDWORD,10                JDWORD+JFWORD1 IN COMMA         42900000
PARMLEN  EQU   14                       LENGTH OF EACH ENTRY            43000000
BLANKS   JGENIN ' ',10                  10 INTERNAL BLANKS              43100000
PARMTAB  DS    0F                       OPTION TABLE                    43200000
         JGENIN 'DECK',10                                               43300000
         SET   JDECK,ON                 SET DECK OPTION ON              43400000
         JGENIN 'NODECK',10                                             43500000
         SET   JDECK,OFF                SET DECK OPTION OFF             43600000
         JGENIN 'OBJECT',10                                             43700000
         SET   JLINK,ON                 SET OBJECT OPTION ON            43800000
         JGENIN 'OBJ',10                                                43900000
         SET   JLINK,ON                 SET OBJECT OPTION ON            44000000
         JGENIN 'NOOBJECT',10                                           44100000
         SET   JLINK,OFF                SET OBJECT OPTION OFF           44200000
         JGENIN 'NOOBJ',10                                              44300000
         SET   JLINK,OFF                SET OBJECT OPTION OFF           44400000
         JGENIN 'XREF',10                                               44500000
         B     SCAN600                  CHECK IF SHORT OR FULL          44600000
         JGENIN 'NOXREF',10                                             44700000
         SET   JXREF,OFF                SET XREF OPTION OFF             44800000
         JGENIN 'ESD',10                                                44900000
         SET   JESD,ON                  SET ESD OPTION ON               45000000
         JGENIN 'NOESD',10                                              45100000
         SET   JESD,OFF                 SET ESD OPTION OFF              45200000
         JGENIN 'RLD',10                                                45300000
         SET JRLD,ON                    SET RLD OPTION ON               45400000
         JGENIN 'NORLD',10                                              45500000
         SET   JRLD,OFF                 SET RLD OPTION OFF              45600000
         JGENIN 'RENT',10                                               45700000
         SET   JRENT,ON                 SET RENT OPTION ON              45800000
         JGENIN 'NORENT',10                                             45900000
         SET   JRENT,OFF                SET RENT OPTION OFF             46000000
         JGENIN 'ALIGN',10                                              46100000
         SET   JALGN,ON                 SET ALIGN OPTION ON             46200000
         JGENIN 'NOALIGN',10            SET ALIGN OPTION OFF            46300000
         SET   JALGN,OFF                SET ALIGN OPTION OFF            46400000
         JGENIN 'TERM',10                                               46500000
         SET   JTERM,ON                 SET TERM OPTION ON              46600000
         JGENIN 'TERMINAL',10                                           46700000
         SET   JTERM,ON                 SET TERM OPTION ON              46800000
         JGENIN 'NOTERM',10                                             46900000
         SET JTERM,OFF                  SET TERM OPTION OFF             47000000
         JGENIN 'NOTERMINAL',10                                         47100000
         SET   JTERM,OFF                SET TERM OPTION OFF             47200000
         JGENIN 'NUM',10                                                47300000
         SET   JNUM,ON                  SET NUM OPTION ON               47400000
         JGENIN 'NUMBER',10                                             47500000
         SET   JNUM,ON                  SET NUM OPTION ON               47600000
         JGENIN 'NONUM',10                                              47700000
         SET   JNUM,OFF                 SET NUM OPTION OFF              47800000
         JGENIN 'NONUMBER',10                                           47900000
         SET   JNUM,OFF                 SET NUM OPTION OFF              48000000
         JGENIN 'STMT',10                                               48100000
         SET   JSTMT,ON                 SET STMT OPTION ON              48200000
         JGENIN 'NOSTMT',10                                             48300000
         SET   JSTMT,OFF                SET STMT OPTION OFF             48400000
         JGENIN 'TEST',10                                               48500000
         SET   JTEST,ON                 SET TEST OPTION ON              48600000
         JGENIN 'NOTEST',10                                             48700000
         SET   JTEST,OFF                SET TEST OPTION OFF             48800000
         JGENIN 'MCALL',10                                              48900000
         SET   JCALLS,ON                SET MCALL OPTION DN             49000000
         JGENIN 'NOMCALL',10                                            49100000
         SET   JCALLS,OFF               SET MCALL OPTION OFF            49200000
         JGENIN 'ALOGIC',10                                             49300000
         SET   JALOGIC,ON               SET ALOGIC OPTION ON            49400000
         JGENIN 'NOALOGIC',10                                           49500000
         SET   JALOGIC,OFF              SET ALOGIC OPTION OFF           49600000
         JGENIN 'MLOGIC',10                                             49700000
         SET   JMLOGIC,ON               SET MLDGIC OPTION ON            49800000
         JGENIN 'NOMLOGIC',10                                           49900000
         SET   JMLOGIC,OFF              SET MLOGIC OPTION OFF           50000000
         JGENIN 'LIBMAC',10                                             50020000
         SET   JSYSMAC,ON               SET LIBMAC OPTION ON            50040000
         JGENIN 'NOLIBMAC',10                                           50060000
         SET   JSYSMAC,OFF              SET LIBMAC OPTION OFF           50080000
         JGENIN 'SYSMAC',10                                             50100000
         SET   JSYSMAC,ON               SET SYSMAC OPTION DN            50200000
         JGENIN 'NOSYSMAC',10                                           50300000
         SET   JSYSMAC,OFF              SET SYSMAC OPTION OFF           50400000
         JGENIN 'YFLAG',10              SET Y-CON FLAG ON      @OX09734 50450005
         SET   JYFLAG,ON                                       @OX09734 50460005
         JGENIN 'NOYFLAG',10            SET Y-CON FLAG OFF     @OX09734 50470005
         SET   JYFLAG,OFF                                      @OX09734 50480005
         JGENIN 'LIST',10                                               50500000
         SET   JLIST,ON                 SET LIST OPTION ON              50600000
         JGENIN 'NOLIST',10                                             50700000
         SET   JLIST,OFF                SET LIST OPTION OFF             50800000
         JGENIN 'BUF',10                                                50900000
         B     SCAN500                  HANDLE BUFSIZE OPTION           51000000
         JGENIN 'BUFSIZE',10                                            51100000
         B     SCAN500                  HANDLE BUFSIZE OPTION           51200000
         JGENIN 'FLAG',10                                               51300000
         B     SCAN200                  HANDLE FLAG OPTION              51400000
         JGENIN 'LINECOUNT',10                                          51500000
         B     SCAN300                  HANDLE LINECOUNT                51600000
         JGENIN 'LC',10                                                 51700000
         B     SCAN300                  HANDLE LINECOUNT                51800000
         JGENIN 'SYSPARM',10                                            51900000
         B     SCAN410                  HANDLE SYSPARM                  52000000
         JGENIN 'LOAD',10                                               52100000
         SET   JLINK,ON                 SET LOAD OPTION ON              52200000
         JGENIN 'NOLOAD',10                                             52300000
         SET   JLINK,OFF                SET LOAD OPTION OFF             52400000
         JGENIN 'ALGN',10                                               52500000
         SET   JALGN,ON                 SET ALIGN OPTION ON             52600000
         JGENIN 'NOALGN',10                                             52700000
         SET   JALGN,OFF                SET ALIGN OPTION OFF            52800000
         JGENIN 'CALLS',10                                              52900000
         SET   JCALLS,ON                SET CALLS OPTION ON             53000000
         JGENIN 'NOCALLS',10                                            53100000
         SET   JCALLS,OFF               SET CALLS OPTION OFF            53200000
         JGENIN 'MINBUF',10                                             53300000
         SET   JMINBUF,ON               SET MINBUF OPTION ON            53400000
         JGENIN 'NOMINBUF',10                                           53500000
         SET   JMINBUF,OFF              SET MINBUF OPTION OFF           53600000
         JGENIN 'MSGLEVEL',10                                           53700000
         B     SCAN210                  HANDLE MSGLEVEL                 53800000
         JGENIN 'LINECNT',10                                            53900000
         B     SCAN310                  HANDLE LINECOUNT                54000000
PARMEND  DS    0F                       END OF OPTION TABLE             54300000
         SPACE 3                                                        54400000
NSPRTMSG WTO   '&COMPNM.267  SYSPRINT DD CARD MISSING - NOLIST OPTION UX54430000
               SED',ROUTCDE=(2,11),MF=L                                 54480000
         JPATCH X0D00,AC8               5% PATCH AREA                   54530000
         SPACE 3                                                        54600000
         END   START                                                    54700000
./  ADD  SSI=71710267,NAME=IFOX0E
         GBLC  &COMPNM,&ASMID                                           00050000
         JHEAD 'INPUT COMMON LOAD MODULE - PROLOG',                    X01000000
               PHASEID=X0E,                                            X02000000
               LEVEL=10                                                 03000000
*                                                                     * 04000000
*FUNCTION/OPERATION-                                                  * 05000000
*   THIS MODULE IS THE INPUT COMMON WORK AREA FOR THE INPUT I/O PACK- * 06000000
*   AGE.  THE IS LOAD BY THE DRIVER.  REGISTER R7 POINTS TO THIS      * 07000000
*   MODULE WHILE THE INPUT I/O PACKAGE HAS CONTROL.                   * 08000000
*                                                                     * 09000000
*ENTRY POINT-                                                         * 10000000
*   N/A                                                               * 11000000
*                                                                     * 12000000
*INPUT-                                                               * 13000000
*   SYSIN, SYSLIB.                                                    * 14000000
*                                                                     * 15000000
*OUTPUT-                                                              * 16000000
*   N/A                                                               * 17000000
*                                                                     * 18000000
*EXTERNAL ROUTINES-                                                   * 19000000
*   N/A                                                               * 20000000
*                                                                     * 21000000
*EXITS, NORMAL-                                                       * 22000000
*   N/A                                                               * 23000000
*                                                                     * 24000000
*EXITS, ERROR-                                                        * 25000000
*   BRANCH TO JABORT IN COMMON.                                       * 26000000
*                                                                     * 27000000
*TABLE/WORK AREAS-                                                    * 28000000
*   THIS MODULE IS ONE ENTIRE WORK AREA.                              * 29000000
*                                                                     * 30000000
*ATTRIBUTES-                                                          * 31000000
*   NON-REFRESHABLE                                                   * 32000000
*                                                                     * 33000000
*NOTES-                                                               * 34000000
         SPACE 3                                                        35000000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   35050000
         COPY  JCOMMON                  JCOMMON COPY CODE               36000000
         PRINT OFF                      DON'T PRINT JINCOM COPY CODE    37000000
         COPY  JINCOM                   JINCOM COPY CODE                38000000
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE  39000000
         COPY  JERMSGCD                 JERMSGCD COPY CODE              40000000
         PRINT ON                       THAT'S ALL THE COPY CODE        41000000
         TITLE '&COMPNM&ASMID - INPUT COMMON LOAD MODULE - DECB'        41100000
         JCSECT (X0E00)                 SECTION ID                      42000000
         JMODID                                                         43000000
         USING START,R7                 ESTABLISH A BASE                44000000
START    DS    0D                                                       45000000
         JENTRY (X0E01=START)           ENTRY POINT FOR MODULE          46000000
         ORG   START+JSYSIN-JINCOM      ADDR OF INPUT FILE DEF          47000000
         DC    A(SYSIN)                         ''                      48000000
         ORG   START+JSYSLIB-JINCOM     ADDR OF LIB FILE DEF            49000000
         DC    A(SYSLIB)                         ''                     50000000
         ORG   START+JINOPEN-JINCOM     ADDR OF OPEN PARM LIST          51000000
         DC    A(INOPEN)                         ''                     52000000
         ORG   START+JINCLOS-JINCOM     ADDR OF CLOSE PARM LIST         53000000
         DC    A(INCLOS)                         ''                     54000000
         ORG   START+JLIBDECB-JINCOM    DECB FOR LIBRARY                55000000
         READ  LIBDECB,SF,SYSLIB,MF=L        READ                       56000000
         ORG   START+JINSW-JINCOM       ZERO INPUT SWITCH               57000000
         DC    X'00'                          ''                        58000000
         ORG   START+JINCMEND-JINCOM    END OF INPUT COMMON             59000000
         SPACE 3                                                        60000000
         TITLE '&COMPNM&ASMID - INPUT COMMON LOAD MODULE - OPEN AND CLOX60050000
               SE LISTS'                                                60100000
INOPEN   OPEN  (SYSIN,(INPUT,DISP),SYSLIB,(INPUT,DISP)),MF=L PARM LIST  61000000
         SPACE 3                                                        62000000
INCLOS   CLOSE (SYSIN,DISP,SYSLIB,DISP),MF=L INPUT CLOSE PARM LIST      63000000
         SPACE 3                                                        64000000
ABORTSYN LA    R10,ERR261               SYNAD EXIT (I/O ERROR) ABORT    65000000
         LR    R11,R0                   SAVE R0 FOR ABORT ROUTINE       66000000
         B     JABORT                   GO ABORT                        67000000
         SPACE 3                                                        68000000
EOF      SR    R11,R11                  EOF ON INPUT FILE. RETURN WITH  69000000
         BR    R6                       CC=0 TO INDICATE EOF            70000000
         SPACE 3                                                        71000000
XTINLIB  DC    0F'0',X'85',AL3(*+3)     SYSIN & SYSLIB DCB EXIT         72000000
         BR    R10                      R10 LOADED BEFORE OPEN          73000000
         SPACE 3                                                        74000000
         TITLE '&COMPNM&ASMID - INPUT COMMON LOAD MODULE - SYSIN DCB'   74050000
SYSIN    DCB   DSORG=PS,DEVD=DA,MACRF=(GL),BFTEK=S,SYNAD=ABORTSYN,     X77000000
               DDNAME=SYSIN,LRECL=80,EODAD=EOF,EXLST=XTINLIB            78000000
         SPACE 3                                                        79000000
         TITLE '&COMPNM&ASMID - INPUT COMMON LOAD MODULE - SYSLIB DCB'  79050000
SYSLIB   DCB   DSORG=PO,DEVD=DA,MACRF=(R),SYNAD=ABORTSYN,              X80000000
               DDNAME=SYSLIB,LRECL=80,EODAD=EOF,EXLST=XTINLIB           81000000
         SPACE 5                                                        81100000
         JPATCH X0E00,118               5% PATCH AREA                   81150000
         END   START                                                    82000000
./  ADD  SSI=81850036,NAME=IFOX0F
* /* START OF SPECIFICATIONS ****                                       00010000
*02* PROCESSOR = ASSEMBLER                                              00020000
**** END OF SPECIFICATIONS ***/                                         00030000
         GBLC  &COMPNM,&ASMID                                           00050000
         JHEAD 'INPUT I/O MODULE - PROLOG',                            X00300000
               PHASEID=X0F,                                            X00600000
               LEVEL=10                                                 00900000
*                                                                     * 01200000
*FUNCTION/OPERATION-                                                  * 01500000
*   THIS MODULE IS THE INPUT I/O MODULE FOR THE ASSEMBLER.  IT IS     * 01800000
*   USED BY THE MACRO EDITOR TO READ SOURCE INPUT, COPY CODE AND      * 02100000
*   MACROS.                                                           * 02400000
*                                                                     * 02700000
*ENTRY POINT-                                                         * 03000000
*        START+0  - GET INPUT STATEMENT. DISPLACEMENT-JINPUT.         * 03300000
*        START+4  - FIND MACRO IN LIBRARY. DISPLACEMENT-JFIND.        * 03600000
*        START+8  - NOTE POSITION OF LIBRARY. DISPLACEMENT-JNOTELB.   * 03900000
*        START+12 - POINT TO NOTED POSITION. DISPLACEMENT-JPOINTLB.   * 04200000
*        START+16 - INITIALIZE INPUT I/O MODULE, OPEN INPUT FILES ON  * 04500000
*   FIRST ENTRY, CLOSE INPUT FILES ON SECOND ENTRY. DISP.-JININIT.    * 04800000
*                                                                     * 05100000
*INPUT-                                                               * 05400000
*   SYSIN, SYSLIB.                                                    * 05700000
*                                                                     * 06000000
*OUTPUT-                                                              * 06300000
*   N/A                                                               * 06600000
*                                                                     * 06900000
*EXTERNAL ROUTINES-                                                   * 07200000
*   N/A                                                               * 07500000
*                                                                     * 07800000
*EXITS, NORMAL-                                                       * 08100000
*   RETURN TO CALLER VIA REGISTER R9.                                 * 08400000
*   FOR JINPUT, CC=2 MEANS RECORD READ CORRECTLY. CC=0 MEANS EOF READ.* 08700000
*   FOR JFIND, CC=2 MEANS MACRO OR COPY CODE FOUND. CC=0 MEANS MACRO  * 09000000
*   OR COPY CODE NOT FOUND                                            * 09300000
*                                                                     * 09600000
*EXITS, ERROR-                                                        * 09900000
*   BRANCH TO JABORT IN COMMON.                                       * 10200000
*                                                                     * 10500000
*TABLE/WORK AREAS-                                                    * 10800000
*   REGISTER R13 POINTS TO COMMON.  JADINCM, WHICH IS LOADED INTO     * 11100000
*   REGISTER R7, POINTS TO THE INPUT COMMON AREA.                     * 11400000
*                                                                     * 11700000
*ATTRIBUTES-                                                          * 12000000
*   REFRESHABLE.                                                      * 12300000
*                                                                     * 12600000
*NOTES-                                                               * 12900000
         SPACE 3                                                        13200000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   13250000
         COPY  JCOMMON                  JCOMMON COPY CODE               13500000
         PRINT ON                       THAT'S ALL WE WON'T PRINT       13550000
         SPACE                                                          13600000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - JINCOM COPY CODE'    13800000
         COPY  JINCOM                                                   14100000
         SPACE 3                                                        14400000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - DCBD MACRO'          14450000
         DCBD  DSORG=(PS,PO),DEVD=(DA)                                  14700000
         SPACE 3                                                        15000000
    TITLE '&COMPNM&ASMID - INPUT I/O MODULE - MAPPING DSECT (MAPDSECT)' 15050000
         IEZIOB                                                         15300000
         SPACE 3                                                        15900000
        TITLE '&COMPNM&ASMID - INPUT I/O MODULE - DDNAME OVERRIDE LIST' 15950000
P        DSECT                          DDNAME OVERRIDE LIST            16200000
PLEN     DS    H                        LENGTH OF LIST                  16500000
         DS    3CL8                     (NOT APPLICABLE)                17100000
PSYSLIB  DS    CL8                      SYSLIB DDNAME                   17400000
PSYSIN   DS    CL8                      SYSIN DDNAME                    17700000
PSYSPRIN DS    CL8                      SYSPRINT DDNAME                 18000000
PSYSPUNC DS    CL8                      SYSPUNCH DDNAME                 18300000
PSYSUT1  DS    CL8                      SYSUT1 DDNAME                   18600000
PSYSUT2  DS    CL8                      SYSUT2 DDNAME                   18900000
PSYSUT3  DS    CL8                      SYSUT3 DDNAME                   19200000
PSYSGO   DS    CL8                      SYSGO DDNAME                    19250000
D80      EQU   80                       DECIMAL 80                      19300000
         SPACE 5                                                        19500000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - MAINLINE CONTROL'    19550000
* VS1 RELEASE 3.1 CHANGES                                               19600031
*C678000                                                        OY02543 19650031
*A258500-259500                                                @0Z04367 19700005
*A705100,705200                                                @AX19477 19730000
*C706500                                                       @AX19477 19760000
         JCSECT (X0F00)                 SECTION ID                      19800000
         JMODID                         EMBEDDED IDENTIFIER             20100000
         USING START,R12                SET BASE OF R12                 20400000
START    B     INPUT                    JINPUT ENTRY                    20700000
         B     FIND                     JFIND ENTRY                     21000000
         B     NOTELB                   JNOTELB ENTRY                   21300000
         B     POINTLB                  JPOINTLB ENTRY                  21600000
         B     ININIT                   INIT & TERM ENTRY               21900000
         SPACE 3                                                        22200000
         JENTRY (X0F01=START)           MODULE ENTRY POINT              22500000
         SPACE 3                                                        22800000
SAVE     JSAVE BASE=NO                  SAVE REGISTERS                  23100000
         L     R7,JADINCM               LOAD ADDRESS OF INPUT COMMON    23400000
         BR    R14                      NOW GO ON WITH BUSINESS         23700000
         SPACE 3                                                        24000000
RETURN   JRETURN                        RESTORE REGISTERS & RETURN      24300000
         SPACE 5                                                        24600000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - ''JINPUT'' ROUTINE'  24650000
INPUT    BAL   R14,SAVE                 GO SAVE REGISTERS               24900000
         GOIF  JINLIB,ON=INLIB          INPUT FROM LIBRARY              25200000
         LA    R6,RETURN                LOAD RETURN ADDR FOR EOD USE    25500000
         L     R1,JSYSIN                LOAD INPUT FILE DEF ADDRESS     25800000
         LR    R11,R10                  SAVE R10               @0Z04367 25850005
         LA    R10,XTIN                 GET ADDRESS TO EXIT    @OZ04367 25950005
         GET   (1)                      GET A RECORD. ADDR IN R1        26100000
         L     R14,JRECIN               WELL...NO EOF, THEN COUNT CARDS 26400000
         LA    R14,D1(,R14)             ONE MORE CARD READ              26700000
         ST    R14,JRECIN               SAVE IT FOR NEXT TIME           27000000
         TR    D0(D80,R1),JTRTABLE      TRANSLATE STATEMENT             27300000
         LTR   R11,R1                   PASS BACK RECORD ADDRESS, SET   27600000
         B     RETURN                   CC=2 AND RETURN                 27900000
         SPACE 3                                                        28200000
INLIB    LH    R4,JLIBNDX               GET BUFFER INDEX                28500000
         AH    R4,=H'80'                ADD 80 (LOGICAL RECORD LENGTH)  28800000
         L     R5,JLIBBUF               POINT TO PHYSICAL BUFFER        29100000
         GOIF  JREADPT,ON=READ          READ NECESSARY FOR POINT        29400000
CHECKSIZ CH    R4,JBLKSIZE              HAVE WE EXAUSTED PHY REC        29700000
         BL    NOREAD                   NO.                             30000000
READ     LA    R6,RETURN                EOF RETURN PT AFTER CC=0        30300000
         READ  JLIBDECB,SF,,(R5),MF=E   READ PHY RECORD                 30600000
         CHECK JLIBDECB                 CHECK READ                      30900000
         L     R1,JSYSLIB               POINT TO DCB                    31200000
         USING IHADCB,R1                FIND RECORD SIZE                31500000
         L     R14,DCBIOBA              GET ADDR OF IOB                 31800000
         LH    R15,DCBBLKSI             RECORD SIZE = READ LENGTH -     32100000
         USING IOBBPAMN,R14             SET UP IOB USING                32400000
         SH    R15,IOBCSW+5             GET RESIDUAL COUNT              32700000
         DROP  R14                                                      33000000
         STH   R15,JBLKSIZE               ''                            33300000
         DROP  R1                       DROP DCB BASE                   33600000
         GOIF  JREADPT,OFF=RESET        READ WASN'T NECESSARY FOR POINT 33900000
         SET   JREADPT,OFF              SET READ BECUASE OF POINT OFF   34200000
         B     CHECKSIZ                 CHK TO SEE IF END OF BUF        34500000
RESET    SR    R4,R4                    ZERO BUFFER INDEX               34800000
NOREAD   STH   R4,JLIBNDX               SAVE BUFFER INDEX               35100000
         LA    R11,D0(R4,R5)            LOG ADDR=PHY ADDR+INDEX         35400000
         TR    D0(D80,R11),JTRTABLE     TRANSLATE TO INTERNAL           35700000
         L     R14,JRECLIB              ADD ONE TO LIB CARD COUNT       36000000
         LA    R14,D1(,R14)             ''                              36300000
         ST    R14,JRECLIB              ''                              36600000
         LTR   R11,R11                  SET CC=2 (NO EOF) AND           36900000
         B     RETURN                   RETURN                          37200000
         SPACE 5                                                        37500000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - ''JFIND'' ROUTINE'   37550000
FIND     BAL   R14,SAVE                 GO SAVE REGISTERS               37800000
         L     R1,JSYSLIB               POINT TO DCB                    38100000
         USING IHADCB,R1                ''                              38400000
         TM    DCBOFLGS,BIT3            WAS OPEN SUCCESSFUL             38700000
         BNZ   OPENSUC                  BR IF OPEN NOT SUCCESSFUL       39000000
         L     R2,JINOPEN               OPEN LIST                       39100000
         TM    D0(R2),BIT0              DD CARD FOUND                   39200000
         BZ    RETURN                   YES                             39300000
         SET   JMISLIB,ON               SYSLIB DD CARD MISSING          39400000
         SR    R2,R2                    SET NOT FOUND                   39500000
         B     RETURN                   RETURN                          39600000
         DROP  R1                                                       39700000
OPENSUC  MVC   JDWORD,D0(R10)           CONVERT MEMBER NAME             39800000
         TR    JDWORD,JTRTABLE          ''                              39900000
         FIND  (1),JDWORD,D             FIND MEMBER                     40200000
         SH    R15,=H'4'                CHECK RETURN CODE               40500000
         BZ    RETURN                   RC=4.  MEMBER NOT FOUND.  CC=0  40800000
         BP    ABORTFND                 RC=3  I/O ERROR.                41100000
         MVC   JLIBNDX,=X'7FAF'         FORCE READ                      41400000
         SET   JREADPT,OFF              RESET FLAG                      41700000
         LTR   R13,R13                  RC=0.  MEMBER FOUND.  CC=2      42000000
         B     RETURN                   RETURN                          42300000
         SPACE 4                                                        42600000
ABORTFND L     R1,JSYSLIB               PT TO DCB                       42900000
         USING IHADCB,R1                ''                              43200000
         O     R1,=X'FF000000'          SET FLAG TO INDICATE FIND ABORT 43500000
         L     R15,DCBSYNAD             GET ADDRESS OF SYDAD ROUTINE    43800000
         DROP  R1                       DROP DCB BASE                   44100000
         BR    R15                      NOW GO ABORT                    44400000
         SPACE 5                                                        44700000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - ''NOTELB'' AND ''POIX44750000
               NT'' ROUTINES'                                           44800000
         SPACE 2                                                        44850000
NOTELB   BAL   R14,SAVE                 GO SAVE REGISTERS               45000000
         L     R1,JSYSLIB               POINT TO DCB                    45300000
         NOTE  (1)                      NOTE LIBRARY POSITION           45600000
         ST    R1,JNOTEVAL              SAVE FILE POSITION              45900000
         MVC   JNOTEVAL+D6(D2),JLIBNDX  SAVE BUFFER INDEX               46200000
         B     RETURN                   RETURN                          46500000
         SPACE 6                                                        46800000
POINTLB  BAL   R14,SAVE                 GO SAVE REGISTERS               47100000
         MVC   JFWORD1,D0(R10)          ALIGN TO FULLWORD               47400000
         L     R1,JSYSLIB               POINT TO DCB                    47700000
         POINT (1),JFWORD1              POSITION LIBRARY                48000000
         MVC   JLIBNDX,D6(R10)          SET BUFFER INDEX                48300000
         SET   JREADPT,ON               INDICATE NEXT READ IS FOR POINT 48600000
         B     RETURN                   RETURN                          48900000
         SPACE 3                                                        49200000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - OPEN ROUTINE FOR ''SX49250000
               YSIN'' AND ''SYSLIB'' DCB''S'                            49300000
ININIT   BAL   R14,SAVE                 GO SAVE REGISTERS               49500000
         GOIF  JIN2ND,ON=CLOSE          SECOND TIME HERE                49800000
         SET   JIN2ND,ON                FIRST TIME. SET FLAG            50100000
         SPACE 2                                                        50400000
         TM    D0(R11),BIT0             ANY OVERRIDING DDNAMES          50700000
         BO    NOPARM                   BR IF END OF PARM LIST          51000000
         L     R14,D4(,R11)             PT TO DDNAME LIST               51300000
         USING P,R14                    ESTABLISH PARMLIST BASE         51600000
         LA    R15,P                    CLEAR END-OF-LIST FLAG          51900000
         AH    R15,PLEN                 CALC END OF TABLE (-2)          52200000
         SPACE 1                                                        52500000
         L     R1,JSYSLIB               PT TO SYSLIB DCB                52800000
         LA    R2,PSYSLIB               PT TO SYSLIB DDNAME             53100000
         BAL   R9,OVERRIDE              CHECK FOR OVERRIDE              53400000
         SPACE 1                                                        53700000
         L     R1,JSYSIN                PT TO SYSIN DCB                 54000000
         LA    R2,PSYSIN                PT TO SYSIN DDNAME              54300000
         BAL   R9,OVERRIDE              CHECK FOR OVERRIDE              54600000
         DROP  R14                      DROP DSECT BASE                 54900000
         SPACE 2                                                        55500000
         USING IHADCB,R1                BASE FOR DCB                    55800000
NOPARM   L     R1,JSYSLIB               POINTS TO SYSLIB DCB            55820000
         LA    R15,DCBDDNAM             POINTS TO SYSLIB DDNAME         55840000
         DROP  R1                                                       55860000
DSYSLIB  DEVTYPE (R15),JDWORD           GET DEVICE CHARACTERISTICS      55880000
         LTR   R15,R15                  WAS DDNAME FOUND                55900000
         BZ    ININIT5                  YES                             55920000
         L     R15,JINOPEN              POINT TO OPEN LIST              55940000
         OI    D0(R15),BIT0             DO NOT OPEN SYSLIB              55960000
         L     R15,JINCLOS              POINT TO CLOSE LIST             55980000
         OI    D0(R15),BIT0             DO NOT CLOSE SYSLIB             56000000
ININIT5  LA    R10,XTIN                 ADDRESS OF SYSIN LIB DCB EXIT   56020000
         L     R1,JINOPEN               OPEN INPUT                      56100000
         OPEN  MF=(E,(1))               ''                              56400000
         SPACE 2                                                        56700000
         USING IHADCB,R1                ESTABLISH ADDRESSABILITY        57000000
         L     R1,JSYSLIB               PT TO SYSLIB DCB                57300000
         TM    DCBOFLGS,BIT3            WAS OPEN SUCCESSFUL             57600000
         BZ    RETURN                   NO.  RETURN                     57900000
         SPACE 2                                                        58200000
         LH    R0,DCBBLKSI              GET BUFFER FOR LIBRARY          58500000
         DROP  R1                       DROP DCB BASE                   58800000
         GETMAIN R,LV=(0)               ACQUIRE CORE                    59100000
         ST    R1,JLIBBUF               SAVE LIBRARY BUFFER ADDRESS     59400000
         B     RETURN                   RETURN                          59700000
         SPACE                                                          60000000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - CLOSE ROUTINE FOR ''X60050000
               SYSIN'' AND ''SYSLIB'' DCB''S'                           60100000
CLOSE    L     R1,JSYSLIB               POINT TO DCB                    60300000
         USING IHADCB,R1                ''                              60600000
         TM    DCBOFLGS,BIT3            WAS OPEN SUCCESSFUL FOR LIBRARY 60900000
         BZ    NOTSUC                   NOT SUCCESSFUL                  61200000
         LH    R0,DCBBLKSI              GET BUFFER LENGTH               61500000
         DROP  R1                       DROP DCB BASE                   61800000
         L     R1,JLIBBUF               GET LIBRARY BUFFER ADDRESS      62100000
         FREEMAIN R,LV=(0),A=(1)        FREE LIBRARY BUFFER             62400000
NOTSUC   L     R1,JINCLOS               CLOSE INPUT                     62700000
         CLOSE MF=(E,(1))               ''                              63000000
         SPACE 3                                                        63300000
         L     R1,JSYSIN                PT TO SYSIN DCB                 63600000
         USING IHADCB,R1                ''                              63900000
         TM    DCBBUFCB+D3,BIT7         IS THERE A BUFCB                64200000
         BO    NOBUFCB                  BR IF NO BUFCB                  64500000
         FREEPOOL (1)                   FREE BUFFERS IN BUFCB           64800000
         DROP  R1                       DROP DCB BASE                   65100000
         SPACE 1                                                        65700000
NOBUFCB  XC    JADINCM,JADINCM          ZERO ADDRESS FOR ABORT MODULE   66000000
         B     RETURN                   RETURN                          66300000
         SPACE 2                                                        66600000
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - DCB OVERRIDE AND DCBX66650000
                EXIT ROUTINE FOR ''SYSIN'' AND ''SYSLIB'' DCB''S'       66700000
         USING IHADCB,R1                ESTABLISH BASE FOR DCB          66900000
OVERRIDE CR    R2,R15                   PAST END OF LIST                67200000
         BHR   R9                       YES, RETURN                     67500000
         CLC   D0(D8,R2),=8X'00'        IS DDNAME ZERO          OY02543 67800031
         BZR   R9                       YES, RETURN                     68100000
         MVC   DCBDDNAM,D0(R2)          OVERRIDE DDNAME                 68400000
         BR    R9                       RETURN                          68700000
         DROP  R1                       DROP DCB BASE                   69000000
         SPACE 3                                                        69300000
         USING IHADCB,R1                ESTABLISH ADDR OF DCB           69600000
*        DCB EXIT FOR SYSIN & SYSLIB                                    69900000
         USING *,R10                    ESTABLISH BASE ADDRESS          70200000
XTIN     LH    R3,DCBLRECL              LOGICAL RECORD LENGTH           70500000
         TM    DCBRECFM,BIT0+BIT1       UNDEFINED LRECL        @AX19477 70550000
         BO    XTIN05                   BRANC IF YES           @AX19477 70570000
         TM    DCBRECFM,BIT0            FIXED RECORD LENGTH             70590000
         BNZ   XTIN10                   NO, MAKE RECFM=FB               70610000
XTIN05   MVI   DCBRECFM,BIT0+BIT3       FORCE RECFM=FB         @AX19477 70630000
XTIN10   LH    R5,DCBBLKSI              IS BLKSIZE SPECIFIED            70700000
         LTR   R5,R5                                                    70750000
         BZ    XTIN20                   NO, GO SET DEFAULT BLKSIZE      70800000
         CR    R3,R5                    BLKSIZE LESS THAN LRECL         70850000
         BH    XTIN20                   IF SO SET BLKSIZE=LRECL         70900000
         OI    DCBRECFM,BIT3            SET BLOCKED                     70950000
         LR    R3,R5                    SAVE BLKSIZE                    71000000
         LH    R2,DCBLRECL              LOGICAL RECORD LENGTH           71050000
         SR    R4,R4                    ZERO FOR DIVIDE                 71100000
         DR    R4,R2                    R4(REMAINDER)=R4R5/R2 LRECL     71150000
         SR    R3,R4                    NOW BLKSIZE IS MULT OF LRECL    71200000
         B     XTIN30                   STORE BLKSIZE                   71250000
XTIN20   NI    DCBRECFM,BITFF-BIT3      SET UNBLOCKED                   71300000
XTIN30   STH   R3,DCBBLKSI              STORE BLKSIZE                   71350000
         BR    R14                                                      71400000
         DROP  R1,R10                   DROP BASES                      73800000
         SPACE 5                                                        74100000
*        PATCH AREA                                                     74400000
*                                                                       74700000
         JPATCH X0F00,302               5% PATCH AREA                   75000000
         END   START                                                    75300000
./  ADD  SSI=71710269,NAME=IFOX0G
* /* START OF SPECIFICATIONS ****                                       00010000
*02* PROCESSOR = ASSEMBLER                                              00020000
**** END OF SPECIFICATIONS ***/                                         00030000
         GBLC  &COMPNM,&ASMID                                           00050000
         JHEAD 'OUTPUT COMMON LOAD MODULE - PROLOG',                   X01000000
               PHASEID=X0G,                                            X02000000
               LEVEL=10                                                 03000000
*                                                                     * 04000000
*FUNCTION/OPERATION-                                                  * 05000000
*   THIS MODULE IS THE OUTPUT COMMON WORK AREA FOR THE OUTPUT I/O     * 06000000
*   PACKAGE.  THIS IS LOADED BY THE DRIVER.  REGISTER R7 POINTS TO    * 07000000
*   THIS MODULE WHILE THE INPUT I/O PACKAGE HAS CONTROL.              * 08000000
*                                                                     * 09000000
*ENTRY POINT-                                                         * 10000000
*   N/A                                                               * 11000000
*                                                                     * 12000000
*INPUT-                                                               * 13000000
*   N/A                                                               * 14000000
*                                                                     * 15000000
*OUTPUT-                                                              * 16000000
*   SYSPRINT, SYSPUNCH, SYSLIN.                                       * 17000000
*                                                                     * 18000000
*EXITS, NORMAL-                                                       * 19000000
*   N/A                                                               * 20000000
*                                                                     * 21000000
*EXITS, ERROR-                                                        * 22000000
*   BRANCH TO JABORT IN COMMON.                                       * 23000000
*                                                                     * 24000000
*TABLE/WORK AREAS-                                                    * 25000000
*   THIS MODULE IS ONE ENTIRE WORK AREA.                              * 26000000
*                                                                     * 27000000
*ATTRIBUTES-                                                          * 28000000
*   NON-REFRESHABLE.                                                  * 29000000
*                                                                     * 30000000
*NOTES-                                                               * 31000000
         SPACE 2                                                        31050000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   32000000
         COPY  JCOMMON                                                  33000000
         PRINT OFF                      DON'T PRINT JERMSGCD COPY CODE  34000000
         COPY  JERMSGCD                                                 35000000
         PRINT ON                       THAT'S ALL WE WON'T PRINT       36000000
      TITLE '&COMPNM&ASMID - OUTPUT COMMON LOAD MODULE - JOUTCOM DSECT' 36050000
         COPY  JOUTCOM                                                  37000000
         SPACE 2                                                        38000000
       TITLE '&COMPNM&ASMID - OUTPUT COMMON LOAD MODULE - POINTER LIST' 38050000
         JCSECT (X0G00)                                                 39000000
         JMODID                         EMBEDDED IDENTIFIER             40000000
         USING START,R7                                                 41000000
START    DS    0D                                                       42000000
         JENTRY (X0G01=START)                                           43000000
         ORG   START+JSYSLST-JOUTCOM    ADDRESS OF PRINT FILE DEF       44000000
         DC    A(SYSLST)                         ''                     45000000
         ORG   START+JSYSPCH-JOUTCOM    ADDR OF PUNCH FILE DEF          46000000
         DC    A(SYSPCH)                         ''                     47000000
         ORG   START+JSYSLNK-JOUTCOM    ADDR OF LINK FILE DEF           48000000
         DC    A(SYSLNK)                         ''                     49000000
         ORG   START+JSYSTRM-JOUTCOM    ADDR OF TERM FILE DEF           49300000
         DC    A(SYSTRM)                         ''                     49600000
         ORG   START+JOUTOPEN-JOUTCOM   ADDR OF OUTPUT OPEN PARM LIST   50000000
         DC    A(OUTOPEN)                        ''                     53000000
         ORG   START+JOUTCLOS-JOUTCOM   ADDR OF OUTPUT CLOSE PARM LIST  54000000
         DC    A(OUTCLOS)                        ''                     55000000
         ORG   JDECKSEQ+START-JOUTCOM   ZERO DECK SEQUENCE NUMBER       56000000
         DC    H'0'                           ''                        57000000
         ORG   START+JOUTSW-JOUTCOM     ZERO JOUTSW                     58000000
         DC    X'00'                          ''                        59000000
         ORG   START+JOUTCMND-JOUTCOM   END OF OUTPUT COMMON            60000000
         SPACE 5                                                        61000000
       TITLE '&COMPNM&ASMID - OUTPUT COMMON LOAD MODULE - OPEN AND CLOSX61050000
               E LISTS FOR SYSPUNCH, SYSPRINT AND SYSGO'                61100000
OUTOPEN  OPEN  (SYSLST,(OUTPUT,DISP),SYSPCH,(OUTPUT,DISP),SYSLNK,      X62000000
               (OUTPUT,DISP),SYSTRM,(OUTPUT,DISP)),MF=L OPEN PARM LIST  63000000
OUTCLOS  CLOSE (SYSLST,DISP,SYSPCH,DISP,SYSLNK,DISP,SYSTRM,DISP),MF=L  *64000000
                                        OUTPUT CLOSE PARM LIST          64500000
         SPACE 3                                                        65000000
XTPRT    DC    0F'0',X'85',AL3(*+3)     SYSPRINT DCB EXIT               66000000
         BR    R10                      R10 LOADED BEFORE OPEN          67000000
         SPACE 3                                                        68000000
XTPCHLIN DC    0F'0',X'85',AL3(*+3)     SYSPUNCH & SYSLIN DCB EXIT      69000000
         BR    R11                      R11 LOADED BEFORE OPEN          70000000
         SPACE 3                                                        71000000
ABORTSYN LA    R10,ERR261               SYNAD EXIT (I/O ERROR) ABORT    72000000
         LR    R11,R0                   SAVE R0 FOR ABORT ROUTINE       73000000
         B     JABORT                   GO ABORT                        74000000
         SPACE 3                                                        75000000
       TITLE '&COMPNM&ASMID - OUTPUT COMMON LOAD MODULE - SYSPRINT DCB' 75050000
SYSLST   DCB   DSORG=PS,DEVD=DA,MACRF=(PL),BFTEK=S,SYNAD=ABORTSYN,     X78000000
               DDNAME=SYSPRINT,LRECL=121,EXLST=XTPRT                    79000000
         SPACE 3                                                        80000000
       TITLE '&COMPNM&ASMID - OUTPUT COMMON LOAD MODULE - SYSPUNCH DCB' 80050000
SYSPCH   DCB   DSORG=PS,DEVD=DA,MACRF=(PL),BFTEK=S,SYNAD=ABORTSYN,     X81000000
               DDNAME=SYSPUNCH,LRECL=80,EXLST=XTPCHLIN                  82000000
         SPACE 3                                                        83000000
       TITLE '&COMPNM&ASMID - OUTPUT COMMON LOAD MODULE - SYSGO DCB'    83050000
SYSLNK   DCB   DSORG=PS,DEVD=DA,MACRF=(PL),BFTEK=S,SYNAD=ABORTSYN,     X84000000
               DDNAME=SYSGO,LRECL=80,EXLST=XTPCHLIN                     85000000
SYSTRM   DCB   DSORG=PS,DEVD=DA,MACRF=(PL),BFTEK=S,SYNAD=ABORTSYN,     *85010000
               DDNAME=SYSTERM,LRECL=121,EXLST=XTPRT                     85020000
               SPACE 5                                                  85050000
         JPATCH X0G00,1E8               5% PATCH AREA                   85100000
         SPACE 3                                                        85150000
         END   START                                                    86000000
./  ADD  SSI=71710270,NAME=IFOX0H
* /* START OF SPECIFICATIONS ****                                       00010000
*02* PROCESSOR = ASSEMBLER                                              00020000
**** END OF SPECIFICATIONS ***/                                         00030000
         GBLC  &COMPNM,&ASMID           GLOBAL VARIABLES                00050000
         JHEAD 'OUTPUT I/O MODULE - PROLOG',                           X00300000
               PHASEID=X0H,                                            X00600000
               LEVEL=10                                                 00900000
*                                                                     * 01200000
*FUNCTION/OPERATION-                                                  * 01500000
*   THIS MODULE IS THE OUTPUT PACKAGE FOR THE ASSEMBLER.  THE OTHER   * 01800000
*   PHASES INTERFACE WITH THIS MODULE BY USE OF THE JPRINT AND JPUNCH * 02100000
*   MACROS.                                                           * 02400000
*                                                                     * 02700000
*ENTRY POINT-                                                         * 03000000
*        START+0    LOCATE PRINT BUFFER & PRINT PREVIOUS BUFFER.      * 03300000
*   DISPLACEMENT-JPRINT.                                              * 03600000
*        START+4  - LOCATE PUNCH BUFFER & PUNCH PREVIOUS BUFFER.      * 03900000
*   DISPLACEMENT-JPUNCH.                                              * 04200000
*        START+8  - INITIALIZE OUTPUT I/O MODULE.  OPEN OUTPUT FILES  * 04500000
*   (AS REQUIRED), CLOSE OUTPUT FILES ON SECOND ENTRY. DISP.-JOUTINIT.* 04800000
*                                                                     * 05100000
*INPUT-                                                               * 05400000
*   N/A                                                               * 05700000
*                                                                     * 06000000
*OUTPUT-                                                              * 06300000
*   SYSPRINT, SYSPUNCH, SYSLIN.                                       * 06600000
*                                                                     * 06900000
*EXTERNAL ROUTINES-                                                   * 07200000
*   N/A                                                               * 07500000
*                                                                     * 07800000
*EXITS, NORMAL-                                                       * 08100000
*   RETURN TO CALLER VIA REGISTER R9.                                 * 08400000
*                                                                     * 08700000
*EXITS, ERROR-                                                        * 09000000
*   N/A                                                               * 09300000
*                                                                     * 09600000
*TABLE/WORK AREAS-                                                    * 09900000
*   REGISTER R13 POINTS TO COMMON.  JADOUTCM, WHICH IS LOADED INTO    * 10200000
*   REGISTER R7, POINTS TO THE OUTPUT COMMON AREA.                    * 10500000
*                                                                     * 10800000
*ATTRIBUTES-                                                          * 11100000
*   REFRESHABLE                                                       * 11400000
*                                                                     * 11700000
*NOTES-                                                               * 12000000
         SPACE 2                                                        12300000
         PRINT OFF                      DON'T PRINT JCOMMON COPY CODE   12350000
         COPY  JCOMMON                                                  12600000
         PRINT ON                       THAT'S ALL WE WON'T PRINT       12900000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - JOUTCOM COPY CODE'  12950000
         COPY  JOUTCOM                                                  13200000
         SPACE 2                                                        13500000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - DCBD MACRO'         13550000
         DCBD  DSORG=(PS),DEVD=(DA)                                     13800000
         SPACE 3                                                        14100000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - PRINT IMAGE, PUNCH I14150000
               IMAGE AND DDNAME OVERRIDE DDNAME LIST DSECT''S'          14200000
PRTLINE  DSECT                          PRINTLINE DSECT                 14400000
CC       DS    X                        CARRIAGE CONTROL                14700000
EJECT    EQU   0                        EJECT CONTROL CODE              15000000
SPACE1   EQU   1                        SINGLE SPACE CONTROL CODE       15300000
SPACE2   EQU   2                        DOUBLE SPACE CONTROL CODE       15600000
SPACE3   EQU   3                        TRIPLE SPACE CONTROL CODE       15900000
IMAGE    DS    CL120                    PRINT IMAGE                     16200000
         SPACE 6                                                        16500000
PCHLINE  DSECT                          PUNCHLINE DSECT                 16800000
PCHIMAGE DS    0CL80                    CARD IMAGE                      17100000
PCHDATA  DS    CL72                     FIRST 72 COLUMNS                17400000
PCHSEQ   DS    CL8                      ID & SEQUENCE FIELDS            17700000
         SPACE 6                                                        18000000
P        DSECT                          DDNAME OVERRIDE LIST            18300000
PLEN     DS    H                        LENGTH OF LIST                  18600000
         DS    3CL8                     (NOT APPLICABLE)                19200000
PSYSLIB  DS    CL8                      SYSLIB DDNAME                   19500000
PSYSIN   DS    CL8                      SYSIN DDNAME                    19800000
PSYSPRIN DS    CL8                      SYSPRINT DDNAME                 20100000
PSYSPUNC DS    CL8                      SYSPUNCH DDNAME                 20400000
PSYSUT1  DS    CL8                      SYSUT1 DDNAME                   20700000
PSYSUT2  DS    CL8                      SYSUT2 DDNAME                   21000000
PSYSUT3  DS    CL8                      SYSUT3 DDNAME                   21300000
PSYSGO   DS    CL8                      SYSGO DDNAME                    21400000
PSYSTERM DS    CL8                      SYSTERM DDNAME                  21500000
         SPACE 3                                                        21600000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - MAINLINE CONTROL'   21650000
* VS1 RELEASE 3.1 CHANGES                                               21700031
*C741000                                                        OY02543 21750031
*A324500-326000,360500                                         @AX14816 21800000
         JCSECT (X0H00)                                                 21900000
         JMODID                         EMBEDDED IDENTIFIER             22200000
         USING START,R12                SET BASE TO R12                 22500000
START    B     PRINT                    JPRINT ENTRY                    22800000
         B     PUNCH                    JPUNCH ENTRY                    23100000
         B     OUTINIT                  INIT & TERM ENTRY               23400000
         B     TSOPRINT                 GO PRINT TO TERMINAL            23700000
         SPACE 3                                                        24000000
         JENTRY (X0H01=START)                                           24300000
         SPACE 3                                                        24600000
SAVE     JSAVE BASE=NO                  SAVE REGISTERS                  24900000
         L     R7,JADOUTCM              LOAD ADDRESS OF OUTPUT COMMON   25200000
         BR    R14                      NOW GO ON WITH BUSINESS         25500000
         SPACE 3                                                        25800000
RETURN   JRETURN                        RESTORE REGISTER & RETURN       26100000
         SPACE 3                                                        26400000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - TSOPRINT ROUTINE'   26450000
         USING PRTLINE,R1                                               27050000
TSOPRINT BAL   R14,SAVE                 GO SAVE REGISTERS               27250000
         GOIF  BYPASTRM,OFF=FIRSTRM     FIRST TERM PRINT                27450000
         L     R1,JCURTRM               PICK UP CURRENT BUFFER ADDR     27650000
         TR    CC,CCTRTAB               TRANSLATE CC TO EXTERNAL        27700000
         TR    IMAGE,JTRTABLE           TRANSLATE PRINT LINE            27850000
         GOIF  CLOSTRM,ON=RETURN        FINAL PRINT (IN CLOSE ROUTINE)  28050000
FIRSTRM  SET   BYPASTRM,ON              INDICATE NOT 1ST PRINT          28250000
         L     R1,JSYSTRM               LOAD TERM FILE DEF ADDR         28450000
         PUT   (1)                      PUT CURRENT REC & GET NEW ADDR  28650000
         ST    R1,JCURTRM               SAVE NEW BUFFER ADDRESS         28850000
         MVC   CC,D0(R11)               INIT LINE TO SINGLE SPACE       29050000
         MVC   IMAGE(L'IMAGE),D1(R11)   MOVE TERM BUFFER CONTENT        29250000
         LR    R11,R1                   TRANSFER NEW BUFFER ADDRESS     29450000
         B     RETURN                   RETURN TO CALLER                29650000
         DROP  R1                                                       29850000
         SPACE 3                                                        31200000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - JPRINT ROUTINE'     31250000
         USING PRTLINE,R1               DEFINE BASE FOR PRINTLINE       31500000
PRINT    BAL   R14,SAVE                 GO SAVE REGISTERS               31800000
         GOIF  BYPASPRT,OFF=FIRSTPRT    FIRSTPRINT                      32100000
         L     R1,JCURPRT               GET CURRENT PRINT BUFFER        32400000
         GOIF  JSUPPRT,OFF=PRINT5       IF SUPPRESS SW OFF BR  @AX14816 32450000
         SET   JSUPPRT,OFF              RESET SUPPRESS SW      @AX14816 32500000
         B     PRINT10                  DON'T PRINT-JUST DUMMY @AX14816 32550000
PRINT5   EQU   *                                               @AX14816 32600000
         LH    R14,=H'1'                GET INCREMENT                   33000000
         A     R14,JRECPRT              ADD OLD COUNT                   33600000
         ST    R14,JRECPRT              STORE NEW COUNT                 33900000
         TR    CC,CCTRTAB               TRANSLATE IN.CC TO ASA CC       34200000
         TR    IMAGE,JTRTABLE           TRANSLATE PRINT LINE            34500000
         GOIF  CLOSPRT,ON=RETURN        FINAL PRINT (IN CLOSE ROUTINE)  34800000
FIRSTPRT SET   BYPASPRT,ON              AT LEAST ONE PRINT HAS OCCURED  35100000
         L     R1,JSYSLST               LOAD PRINT FILE DEF ADDRESS     35400000
         PUT   (1)                      PUT CURRENT REC & GET NEW ADDR  35700000
         ST    R1,JCURPRT               SAVE NEW BUFFER ADDRESS AND     36000000
PRINT10  EQU   *                                               @AX14816 36050000
         MVI   CC,SPACE1                INIT LINE TO SINGLE SPACE       36300000
         MVI   IMAGE,JBLANK             NOW BLANK LINE                  36600000
         MVC   IMAGE+D1(L'IMAGE-D1),IMAGE  BLANK OUT LINE               36900000
         LR    R11,R1                   RETURN BUFFER ADDRESS TO CALLER 37200000
         B     RETURN                   RETURN                          37500000
         DROP  R1                                                       37800000
         SPACE 3                                                        38100000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - JPUNCH ROUTINE'     38150000
         USING PCHLINE,R1               SET PUNCH LINE BASE             38400000
PUNCH    BAL   R14,SAVE                 GO SAVE REGISTERS               38700000
         GOIF  BYPASPCH,OFF=FIRSTPCH    FIRST PUNCH                     39000000
         L     R1,JCURPCH               GET CURRENT PUNCH BUFFER        39300000
         GOIF  NOSEQ,ON=DONOTSEQ        NOT TO BE SEQUENCED             39600000
         LH    R14,JDECKSEQ             INCREMENT DECK SEQ BY ONE       39900000
         LA    R14,D1(,R14)             ''                              40200000
         STH   R14,JDECKSEQ             ''                              40500000
         CVD   R14,JDWORD               CONVERT TO DECIMAL              40800000
         UNPK  PCHSEQ,JDWORD            UNPACK                          41100000
         NC    PCHSEQ,=8X'0F'           AND OUT ZONES (TO INTERNAL)     41400000
         SR    R14,R14                  ZERO REG                        41700000
         IC    R14,JDECKIDL             GET LENGTH OF DECKID            42000000
         SH    R14,=H'1'                DECREMENT BY ONE                42300000
         BM    NOID                     BR IF NO DECKID                 42600000
         EX    R14,MVCID                MOVE ID TO PCHSEQ               42900000
NOID     TR    PCHSEQ,JTRTABLE          TRANSLATE PCHSEQ TO EXTERNAL    43200000
         B     DONTTR                   DON'T TRANSLATE ANYTHING ELSE   43500000
DONOTSEQ TR    PCHIMAGE,JTRTABLE        TRANSLATE TO EXTERNAL           43800000
DONTTR   GOIF  (JDECK,JLINK),NOTALL=NOALT NOT DECK & LINK               44100000
         LR    R2,R1                    PUT RECORD TO OBJECT FILE TOO   44400000
         L     R1,JSYSLNK               LOAD LINK FILE DEF ADDR         44700000
         PUT   (1)                      LOCATE BUFFER                   45000000
         MVC   PCHIMAGE,D0(R2)          MOVE FROM PUNCH TO LINK BUFFER  45300000
NOALT    GOIF  CLOSPCH,ON=RETURN        FINAL PUNCH (IN CLOSE ROUTINE)  45600000
FIRSTPCH SET   (BYPASPCH,NOSEQ),ON      AT LEAST ONE PUNCH AS OCCURED   45900000
         GOIF  JNOSEQPH,ON=DONTSEQ      RECORD IS NOT TO BE SEQUENCED   46200000
         SET   NOSEQ,OFF                SEQ RECORD NEXT TIME AROUND     46500000
DONTSEQ  L     R1,JSYSLNK               LOAD LINK FILE DEF ADDR         46800000
         GOIF  JDECK,OFF=PUTLINK        NODECK                          47100000
         L     R1,JSYSPCH               LOAD PUNCH FILE DEF ADDR        47400000
PUTLINK  PUT   (1)                      LOCATE BUFFER                   47700000
         ST    R1,JCURPCH               SAVE NEW BUFFER ADDRESS         48000000
         L     R14,JRECPCH              ADD ONE TO PUNCH RECORD COUNT   48300000
         LA    R14,D1(,R14)             ''                              48600000
         ST    R14,JRECPCH              ''                              48900000
         MVI   PCHIMAGE,JBLANK          INIT TO INTERNAL BLANKS         49200000
         MVC   PCHIMAGE+D1(L'PCHIMAGE-D1),PCHIMAGE ''                   49500000
         SET   JNOSEQPH,OFF             RESET NOSEQ SWITCH              49550000
         LR    R11,R1                   RETURN BUFFER ADDR TO CALLER    49800000
         B     RETURN                   RETURN                          50100000
MVCID    MVC   PCHSEQ(*-*),JDECKID     OUT-OF-LINE MVC OF DECKID        50400000
         DROP  R1                       DROP PUNCH LINE BASE            50700000
         SPACE 3                                                        51000000
        TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - DCB OPEN'            51050000
OUTINIT  BAL   R14,SAVE                 GO SAVE REGISTERS               51300000
         GOIF  JOUT2ND,ON=CLOSE         SECOND TIME HERE                51600000
         SET   JOUT2ND,ON               FIRST TIME. SET FLAG            51900000
         SPACE 3                                                        52200000
         TM    D0(R11),BIT0             ANY OVERRIDING DDNAMES          52500000
         BO    NOPARM                   BR IF END OF PARM LIST          52800000
         L     R14,D4(,R11)             PT TO DDNAME LIST               53100000
         USING P,R14                    ESTABLISH PARMLIST BASE         53400000
         LA    R15,P                    CLEAR END-OF-LIST FLAG          53700000
         AH    R15,PLEN                 CALC END OF TABLE (-2)          54000000
         SPACE 1                                                        54300000
         L     R1,JSYSLST               PT TO SYSPRINT DCB              54600000
         LA    R2,PSYSPRIN              PT TO SYSPRINT DDNAME           54900000
         BAL   R9,OVERRIDE              CHECK FOR OVERRIDE              55200000
         SPACE 1                                                        55500000
         L     R1,JSYSPCH               PT TO SYSPUNCH DCB              55800000
         LA    R2,PSYSPUNC              PT TO SYSPUNCH DDNAME           56100000
         BAL   R9,OVERRIDE              CHECK FOR OVERRIDE              56400000
         SPACE 1                                                        56700000
         L     R1,JSYSLNK               PT TO SYSLIN DCB                57000000
         LA    R2,PSYSGO                PT TO DDNAME                    57300000
         BAL   R9,OVERRIDE              CHECK FOR OVERRIDE              57600000
         SPACE 1                                                        57660000
         L     R1,JSYSTRM               PT TO SYSTRM DCB                57720000
         LA    R2,PSYSTERM              PT TO DDNAME                    57780000
         BAL   R9,OVERRIDE              CHECK FOR OVERRIDE              57840000
         DROP  R14                      DROP DSECT BASE                 57900000
NOPARM   DC    0H'0'                    CONTINUE                        58200000
         SPACE 3                                                        58500000
         LM    R1,R2,JOUTOPEN           LOAD ADDR OF OPEN & CLOSE PL    58800000
         GOIF  JTERM,OFF=NOTERM         TERM OPTION ON                  59100000
         GOIF  (JLIST,JDECK,JLINK),ALL=OPEN,     OK ALL ON             X59200000
               ELSE=CHECK               MODIFY PARAMETER LIST FOR OPEN  59300000
NOTERM   GOIF  (JLIST,JDECK,JLINK),NONE=RETURN NO DATA SETS NEEDED      59400000
CHECK    EQU   *                                                        59500000
         SR    R14,R14                  ZERO INDEX                      59700000
         LM    R3,R4,D4(R1)             OPEN PARM LIST (PCH, LNK)       60000000
         LM    R5,R6,D4(R2)             CLOS PARM LIST (PCH, LNK)       60300000
         GOIF  JLIST,OFF=NOPENLST       LIST OPTION OFF                 60600000
         LA    R14,D4(,R14)             INCREMENT PTR (LST ALREADY ST)  60900000
NOPENLST GOIF  JDECK,OFF=NOPENPCH       DECK OPTION OFF                 61200000
         ST    R3,D0(R14,R1)            STORE PCH DCB ADDR (OPEN)       61500000
         ST    R5,D0(R14,R2)            STORE PCH DCB ADDR (CLOSE)      61800000
         LA    R14,D4(,R14)             INCREMENT PTR                   62100000
NOPENPCH GOIF  JLINK,OFF=NOPENLNK       LINK OPTION IS OFF              62400000
         ST    R4,D0(R14,R1)            STORE LNK DCB ADDR (OPEN)       62700000
         ST    R6,D0(R14,R2)            STORE LNK DCB ADDR (CLOSE)      63000000
         LA    R14,D4(,R14)             INCREMENT PTR                   63300000
NOPENLNK GOIF  JTERM,OFF=NOPENTRM       TERM OPTION IS OFF              63600000
         L     R4,D12(R1)               OPEN PARM LIST (TRM)            63640000
         L     R6,D12(R2)               CLOSE PARM LIST (TRM)           63680000
         ST    R4,D0(R14,R1)            STORE TRM DCB ADDR(OPEN)        63720000
         ST    R6,D0(R14,R2)            STORE TRM DCB ADDR(CLOSE)       63760000
         LA    R14,D4(R14)              INCREMENTE POINTER              63800000
NOPENTRM SH    R14,=H'4'                DECREMENTE POINTER              63840000
         LA    R3,D0(R14,R1)            PT TO LAST OPEN PARM            63900000
         OI    D0(R3),BIT0              SET END OF OPEN PARM LIST       64200000
         LA    R3,D0(R14,R2)            POINT TO LAST CLOSE PARM        64500000
         OI    D0(R3),BIT0              SET END OF LIST FLAG            64800000
         SPACE 3                                                        65100000
OPEN     LA    R10,XTPRT                ADDR OF SYSPRINT DCB EXIT       65400000
         LA    R11,XTPCHLIN             ADDR OF SYSPUNCH,LIN DCB EXIT   65700000
         OPEN  MF=(E,(1))               OPEN FILES                      66000000
         SPACE 3                                                        66300000
         B     RETURN                   RETURN                          66600000
         SPACE 3                                                        66900000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - DCB CLOSE'          66950000
CLOSE    GOIF  (JLIST,JDECK,JLINK),ANY=CLOSE1 IF ANY ON CLOSE DATA SETS 67200000
         GOIF  JTERM,OFF=RETURN         IF NONE ON RETURN               67250000
CLOSE1   SET   (CLOSPRT,CLOSPCH,CLOSTRM),ON INDICATE FINAL PRINT & PCH  67500000
         GOIF  JLIST,OFF=NOLIST         LIST OPTION OFF                 67800000
         BAL   R9,PRINT                 FORCE OUT LAST BUFFER           68100000
NOLIST   GOIF  JTERM,OFF=NOJTERM        IS TERM OPTION USED             68110000
         BAL   R9,TSOPRINT              PRINT LAST SYSTERM TOO          68150000
NOJTERM  GOIF  (JDECK,JLINK),NONE=NODKLK DECK & LINK OPTIONS OFF        68400000
         GOIF  BYPASPCH,OFF=NODKLK      NO CARDS PUNCHED                68700000
         BAL   R9,PUNCH                 FORCE OUT LAST BUFFER           69000000
NODKLK   L     R1,JOUTCLOS              CLOSE OUTPUT                    69300000
         CLOSE MF=(E,(1))               ''                              69600000
         SPACE 1                                                        69900000
         L     R1,JSYSLST               PT TO SYSPRINT DCB              70200000
         BAL   R9,FREEPOOL              GO FREE BUFFERS                 70500000
         L     R1,JSYSPCH               PT TO SYSPUNCH DCB              70800000
         BAL   R9,FREEPOOL              GO FREE BUFFERS                 71100000
         L     R1,JSYSLNK               PT TO SYSLIN DCB                71400000
         BAL   R9,FREEPOOL              GO FREE BUFFERS                 71700000
         L     R1,JSYSTRM               PT TO SYSTRM DCB                71800000
         BAL   R9,FREEPOOL              GO FREE BUFFERS                 71900000
         SPACE 1                                                        72000000
         XC    JADOUTCM,JADOUTCM        ZERO ADDRESS FOR ABORT MODULE   72300000
         B     RETURN                   RETURN                          72600000
         SPACE 3                                                        72900000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - DDNAME OVERRIDE ROUT72950000
               TINE AND DCB EXIT ROUTINES'                              73000000
         USING IHADCB,R1                ESTABLISH BASE FOR DCB          73200000
OVERRIDE CR    R2,R15                   PAST END OF LIST                73500000
         BHR   R9                       YES, RETURN                     73800031
         CLC   D0(D8,R2),=8X'00'        IS DDNAME ZERO          OY02543 74100031
         BZR   R9                       YES, RETURN                     74400000
         MVC   DCBDDNAM,D0(R2)          OVERRIDE DDNAME                 74700000
         BR    R9                       RETURN                          75000000
         DROP  R1                       DROP DCB BASE                   75300000
         SPACE 2                                                        75600000
         USING IHADCB,R1                                                75900000
*        DCB EXIT FOR SYSPRINT AND SYSTERM                              76200000
         USING *,R10                    ESTABLISH BASE ADDRESS          76500000
XTPRT    LH    R3,DCBLRECL              LD DEFAULT BLKSIZE              76800000
         NI    DCBRECFM,BITFF-BIT6      TURN OFF M BIT                  77100000
         OI    DCBRECFM,BIT5            TURN ON A BIT                   77400000
         TM    DCBRECFM,BIT0            IS RECORD LENGTH FIXED (F)      77700000
         BO    XTALL10                  YES, GO CHECK FOR RECFM=FB      78000000
         MVI   DCBRECFM,BIT0+BIT3+BIT5  SET RECFM=FBA                   78300000
         B     XTALL10                  GO CHECK BLKSIZE                78600000
         DROP  R10                      DROP BASE                       78900000
         SPACE                                                          79200000
*        DCB EXIT FOR SYSPUNCH & SYSLIN                                 79500000
         USING *,R11                    ESTABLISH BASE ADDRESS          79800000
XTPCHLIN LH    R3,DCBLRECL              LD DEFAULT BLKSIZE              80100000
         NI    DCBRECFM,BITFF-BIT5-BIT6 TURN OFF M & A BITS             80400000
         TM    DCBRECFM,BIT0            IS RECORD LENGTH FIXED (F)      80700000
         BO    XTALL10                  YES, GO CHECK FOR RECFM=FB      81000000
         MVI   DCBRECFM,BIT0+BIT3       SET RECFM=FB                    81300000
         DROP  R11                      DROP BASE                       81900000
         SPACE                                                          82200000
XTALL10  BALR  R15,R0                   ESTABLISH BASE ADDRESS IN REG   82500000
         USING *,R15                    ''                              82800000
         LH    R5,DCBBLKSI              IS BLKSIZE SPECIFIED            83700000
         LTR   R5,R5                    ''                              84000000
         BZ    XTALL30                  NO, GO SET DEFAULT BLKSIZE      84300000
         CR    R3,R5                    BLKSIZE LESS THAN LRECL?        84350000
         BH    XTALL30                  IF SO SET BLKSIZE=LRECL         84400000
         OI    DCBRECFM,BIT3            SET BLOCKED                     84450000
         LR    R3,R5                    SAVE BLKSIZE FOR LATER USE      84600000
         LH    R2,DCBLRECL              GET LOGICAL RECORD LENGTH       84900000
         SR    R4,R4                    ZERO FOR DIVIDE                 85200000
         DR    R4,R2                    R4(REMAINDER)=R4R5 / R2(LRECL)  85500000
         SR    R3,R4                    NOW BLKSIZE IS MULT OF LRECL    85800000
XTALL20  STH   R3,DCBBLKSI              STORE BLKSIZE IN DCB            86100000
         BR    R14                      RETURN TO OPEN                  86400000
XTALL30  NI    DCBRECFM,BITFF-BIT3      SET UNBLOCKED                   86450000
         B     XTALL20                  SET DEFAULT BLKSIZE             86500000
         DROP  R1,R15                   DROP BASES                      86700000
         TITLE '&COMPNM&ASMID - OUTPUT I/O MODULE - FREEPOOL ROUTINE, CO87050000
               ONSTANTS AND PATCH AREA'                                 87100000
         USING IHADCB,R1                ESTABLISH DCB ADDRESSABILITY    87300000
FREEPOOL TM    DCBBUFCB+D3,BIT7         IS THERE A BUFCB                87600000
         BOR   R9                       RETURN IF NO BUFCB              87900000
         FREEPOOL (1)                   FREE BUFFERS IN BUFCB           88200000
         BR    R9                       RETURN                          88500000
         DROP  R1                       DROP DCB BASE                   88800000
         SPACE 3                                                        89100000
*        CONSTANTS                                                      89400000
*                                                                       89700000
CCTRTAB  DC    C'1 0-'                  ASA CC FOR EJECT,SINGLE,DOUBLE X90600000
                                        AND TRIPLE SPACE                90900000
         SPACE 3                                                        91200000
         JPATCH X0H00,3BC               5% PATCH AREA                   91500000
         SPACE 2                                                        91800000
         END   START                                                    92100000
./  ADD  SSI=71710271,NAME=IFOX0I
* /* START OF SPECIFICATIONS ****                                       00090000
*02* PROCESSOR = ASSEMBLER                                              00180000
**** END OF SPECIFICATIONS ***/                                         00270000
         GBLC  &COMPNM,&ASMID                                           00360000
         SPACE 5                                                        00410000
         JHEAD 'ABORT ROUTINE - PROLOG',                               X00600000
               PHASEID=X0I,                                            X00900000
               LEVEL=10                                                 01200000
*                                                                     * 01500000
*FUNCTION/OPERATION-                                                  * 01800000
*   THIS MODULE IS CALLED WHEN AN IRRECOVERABLE ERROR EXISTS.  IT IS  * 02100000
*   ENTERED FOR PERMANENT I/O ERRORS, MISSING DD CARDS (SYSPRINT,     * 02400000
*   SYSUT1, SYSUT2, SYSUT3, SYSIN), INSUFFICIENT MEMORY AND CERTAIN   * 02700000
*   PROGRAM LOGIC ERRORS.  THIS ROUTINE FREES ALL CORE, CLOSES ALL    * 03000000
*   FILES, FREEPOOL AS NECESSARY, WRITES A MESSAGE TO THE OPERATOR    * 03300000
*   AND DELETES ALL LOADED PHASES EXCEPT ITSELF AND COMMON.           * 03600000
*                                                                     * 03900000
*ENTRY POINT-                                                         * 04200000
*        START - ENTER BY LOAD AND BRANCH FROM DRIVER                 * 04500000
*                                                                     * 04800000
*INPUT-                                                               * 05100000
*   REGISTER R10 CONTAINS THE VALUE OF ERR260, ERR261, ERR262 OR      * 05400000
*   ERR263 DEPENDING UPON THE ERROR.                                  * 05700000
*   REGISTER R11 CONTAINS THE VALUE OF R1 AT THE TIME THE ASSEMBLER   * 06000000
*   WAS INVOKED (PARAMETER LIST PTR) (VALID ONLY FOR ERR260).         * 06300000
*   REGISTER R11 CONTAINS THE CONTENTS OF R0 AT THE TIME THE SYNAD    * 06600000
*   EXIT WAS TAKEN (VALID ONLY FOR ERR261).                           * 06900000
*   REGISTER R2 CONTAINS THE DCB ADDRESS (VALID ONLY FOR ERR261).     * 07200000
*                                                                     * 07500000
*OUTPUT-                                                              * 07800000
*   MESSAGE TO PROGRAMMER USING WTP MACRO                             * 08100000
*                                                                     * 08400000
*EXTERNAL ROUTINES-                                                   * 08700000
*   N/A                                                               * 09000000
*                                                                     * 09300000
*EXITS, NORMAL-                                                       * 09600000
*   RETURN TO DRIVER BY JRETURN MACRO                                 * 09900000
*                                                                     * 10200000
*EXITS, ERROR-                                                        * 10500000
*   N/A                                                               * 10800000
*                                                                     * 11100000
*TABLE/WORK AREAS-                                                    * 11400000
*   REGISTER R13 POINTS TO COMMON.                                    * 11700000
*   JTRTABLE IN COMMON USED AS BUFFER WORKSPACE.                      * 12000000
*                                                                     * 12300000
*ATTRIBUTES-                                                          * 12600000
*   REFRESHABLE.                                                      * 12900000
*                                                                     * 13200000
*NOTES-                                                               * 13500000
         SPACE 5                                                        13600000
         TITLE '&COMPNM&ASMID - ABORT ROUTINE - JCOMMON COPY CODE'      13650000
         COPY  JCOMMON                  JCOMMON COPY CODE               14100000
         SPACE 3                                                        14150000
BUFFER   EQU   J+((JTRTABLE+3-J)/4)*4   MESSAGE BUF FULLWORD BOUNDARY   14200000
         SPACE 3                                                        14250000
         TITLE '&COMPNM&ASMID - ABORT ROUTINE - JINCOM COPY CODE'       14400000
         COPY  JINCOM                   X0E, X0F INPUT COMMON           14700000
         SPACE 5                                                        14750000
         TITLE '&COMPNM&ASMID - ABORT ROUTINE - JOUTCOM COPY CODE'      15000000
         COPY  JOUTCOM                  X0G, X0H OUTPUT COMMON          15300000
         SPACE 5                                                        15350000
         TITLE '&COMPNM&ASMID - ABORT ROUTINE - JERMSGCD COPY CODE'     15600000
         COPY  JERMSGCD                 JERMSGCD COPY CODE              15900000
         SPACE 5                                                        15950000
         TITLE '&COMPNM&ASMID - ABORT ROUTINE - DCBD MACRO'             16200000
         DCBD  DSORG=(PO,PS),DEVD=DA                                    16500000
         SPACE 5                                                        16550000
         TITLE '&COMPNM&ASMID - ABORT ROUTINE - DDNAME OVERRIDE DSECT'  16800000
P        DSECT                          DDNAME OVERRIDE LIST            17100000
PLEN     DS    H                        LENGTH OF LIST                  17400000
         DS    3CL8                     (NOT APPLICABLE)                18000000
PSYSLIB  DS    CL8                      SYSLIB DDNAME                   18300000
PSYSIN   DS    CL8                      SYSIN DDNAME                    18600000
PSYSPRIN DS    CL8                      SYSPRINT DDNAME                 18900000
PSYSPUNC DS    CL8                      SYSPUNCH DDNAME                 19200000
PSYSUT1  DS    CL8                      SYSUT1 DDNAME                   19500000
PSYSUT2  DS    CL8                      SYSUT2 DDNAME                   19800000
PSYSUT3  DS    CL8                      SYSUT3 DDNAME                   20100000
PSYSGO   DS    CL8                      SYSGO DDNAME                    20102000
PSYSTERM DS    CL8                      SYSTERM DD NAME                 20106000
         SPACE 5                                                        20110000
D50      EQU   50                       OFFSET OF JOBNAME FROM SYNADAF  20120000
D84      EQU   84                       OFFSET OF OPERATION FIELD       20130000
         SPACE 5                                                        20180000
         TITLE '&COMPNM&ASMID - ABORT ROUTINE'                          20400000
         JCSECT (X0I00)                 SECTION ID                      20700000
         JMODID                                                         21000000
START    JSAVE BASE=YES                 SAVE REGISTERS                  21300000
         JENTRY (X0I01=START)           MODULE ENTRY POINT              21600000
         LM    R0,R1,JSLEN              GET LENGTH AND ADDR OF AREA     21900000
         LTR   R0,R0                    IS LENGTH ZERO (SET BY DRIVER)  22200000
         BZ    FREEPARM                 YES, NO BLOCK TO FREE           22500000
         FREEMAIN R,LV=(0),A=(1)        FREE STORAGE                    22800000
FREEPARM L     R1,JPARMPTR              FREE TRANSLATED PARM AREA       23100000
         LTR   R1,R1                    HAS AREA BEEN FREED BY INIT     23400000
         BZ    FREED                    YES.  ALREADY FREED             23700000
         LH    R0,D0(,R1)               GET LENGTH OF AREA              24000000
         FREEMAIN R,LV=(0),A=(1)        FREE STORAGE                    24300000
         EJECT                                                          24600000
FREED    MVC   BUFFER(CERR266L),CERR266  MOVE MSG TO WORKAREA           24700000
         MVC   BUFFER+CERR266D(L'JPHNAME),JPHNAME  MOVE IN PHASE NAME   24800000
         WTO   MF=(E,BUFFER)            TELL WHAT WAS LAST PHASE        24900000
         CH    R10,=Y(ERR260)           IS IT A MISSING DD CARD         25000000
         BNE   TRYIOERR                 NO,TRY IOERROR                  25200000
         MVC   BUFFER(CERR260L),CERR260 MOVE MSG TO WORKAREA            25500000
         SR    R6,R6                    MAKE R6 & R7 EQUAL IN CASE      25800000
         LR    R7,R6                      THERE IS NO OVERRIDING DD     26100000
         TM    D0(R11),BIT0             ANY OVERRIDING DDNAMES          26400000
         BO    TSYSTERM                 NO. R5 WILL BE GT R7 NOW        26700000
         L     R6,D4(,R11)              PT TO DDNAME LIST               27000000
         USING P,R6                     ''                              27300000
         LA    R7,P                     CALC END-OF-LINE (-2)           27600000
         AH    R7,PLEN                  ''                              27900000
         SPACE 3                                                        28200000
TSYSTERM GOIF  JTERM,OFF=TSYSLIN        NOTERMINAL SPECIFIED            28220000
         LA    R5,PSYSTERM              PT TO OVERRIDING DDNAME         28240000
         CR    R5,R7                    IS IT PAST END OF LIST          28260000
         BH    XSYSTERM                 YES GO CHANGE POINTER           28280000
         OC    D0(D8,R5),D0(R5)         IS DDNAME OVERIDEN              28300000
         BNZ   DSYSTERM                 YES                             28320000
XSYSTERM LA    R5,CSYSTERM              PT TO STANDARD NAME             28340000
DSYSTERM DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      28360000
         LTR   R15,R15                  WAS DDNAME FOUND                28380000
         BZ    TSYSLIN                  YES                             28400000
         BAL   R9,TELWORLD              LOGERR                          28420000
         SPACE 3                                                        28440000
TSYSLIN  GOIF  JLINK,OFF=TSYSIN         NOLOAD SPECIFIED                28500000
         LA    R5,PSYSGO                PT TO OVERRIDING DDNAME         28800000
         CR    R5,R7                    IS IT PAST END OF LIST          29100000
         BH    XSYSLIN                  YES. GO CHANGE PTR              29400000
         OC    D0(D8,R5),D0(R5)         IS DDNAME OVERRIDEN             29700000
         BNZ   DSYSLIN                  YES.                            30000000
XSYSLIN  LA    R5,CSYSGO                PT TO STANDARD NAME             30300000
DSYSLIN  DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      30600000
         LTR   R15,R15                  WAS DDNAME FOUND                30900000
         BZ    TSYSIN                   YES                             31200000
         BAL   R9,TELWORLD              NO.  LOG ERROR                  31500000
         SPACE 3                                                        31800000
TSYSIN   LA    R5,PSYSIN                PT TO OVERRIDING DDNAME         32100000
         CR    R5,R7                    IS IT PAST END OF LIST          32400000
         BH    XSYSIN                   YES. GO CHANGE PTR              32700000
         OC    D0(D8,R5),D0(R5)         IS DDNAME OVERRIDEN             33000000
         BNZ   DSYSIN                   YES.                            33300000
XSYSIN   LA    R5,CSYSIN                PT TO STANDARD NAME             33600000
DSYSIN   DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      33900000
         LTR   R15,R15                  WAS DDNAME FOUND                34200000
         BZ    TSYSPRIN                 YES                             34500000
         BAL   R9,TELWORLD              NO.  LOG ERROR                  34800000
         SPACE 3                                                        35100000
TSYSPRIN GOIF  JLIST,OFF=TSYSPUNC       NOLIST SPECIFIED                35400000
         LA    R5,PSYSPRIN              PT TO OVERRIDING DDNAME         35700000
         CR    R5,R7                    IS IT PAST END OF LIST          36000000
         BH    XSYSPRIN                 YES. GO CHANGE PTR              36300000
         OC    D0(D8,R5),D0(R5)         IS DDNAME OVERRIDEN             36600000
         BNZ   DSYSPRIN                 YES.                            36900000
XSYSPRIN LA    R5,CSYSPRIN              PT TO STANDARD NAME             37200000
DSYSPRIN DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      37500000
         LTR   R15,R15                  WAS DDNAME FOUND                37800000
         BZ    TSYSPUNC                 YES                             38100000
         BAL   R9,TELWORLD              NO.  LOG ERROR                  38400000
         SPACE 3                                                        38700000
TSYSPUNC GOIF  JDECK,OFF=TSYSUT1        NODECK SPECIFIED                39000000
         LA    R5,PSYSPUNC              PT TO OVERRIDING DDNAME         39300000
         CR    R5,R7                    IS IT PAST END OF LIST          39600000
         BH    XSYSPUNC                 YES. GO CHANGE PTR              39900000
         OC    D0(D8,R5),D0(R5)         IS DDNAME OVERRIDEN             40200000
         BNZ   DSYSPUNC                 YES.                            40500000
XSYSPUNC LA    R5,CSYSPUNC              PT TO STANDARD NAME             40800000
DSYSPUNC DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      41100000
         LTR   R15,R15                  WAS DDNAME FOUND                41400000
         BZ    TSYSUT1                  YES                             41700000
         BAL   R9,TELWORLD              NO.  LOG ERROR                  42000000
         SPACE 3                                                        42300000
TSYSUT1  LA    R5,PSYSUT1               PT TO OVERRIDING DDNAME         42600000
         CR    R5,R7                    IS IT PAST END OF LIST          42900000
         BH    XSYSUT1                  YES. GO CHANGE PTR              43200000
         OC    D0(D8,R5),D0(R5)         IS DDNAME OVERRIDEN             43500000
         BNZ   DSYSUT1                  YES.                            43800000
XSYSUT1  LA    R5,CSYSUT1               PT TO STANDARD NAME             44100000
DSYSUT1  DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      44400000
         LTR   R15,R15                  WAS DDNAME FOUND                44700000
         BZ    TSYSUT2                  YES                             45000000
         BAL   R9,TELWORLD              NO.  LOG ERROR                  45300000
         SPACE 3                                                        45600000
TSYSUT2  LA    R5,PSYSUT2               PT TO OVERRIDING DDNAME         45900000
         CR    R5,R7                    IS IT PAST END OF LIST          46200000
         BH    XSYSUT2                  YES. GO CHANGE PTR              46500000
         OC    D0(D8,R5),D0(R5)         IS DDNAME OVERRIDEN             46800000
         BNZ   DSYSUT2                  YES.                            47100000
XSYSUT2  LA    R5,CSYSUT2               PT TO STANDARD NAME             47400000
DSYSUT2  DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      47700000
         LTR   R15,R15                  WAS DDNAME FOUND                48000000
         BZ    TSYSUT3                  YES                             48300000
         BAL   R9,TELWORLD              NO.  LOG ERROR                  48600000
         SPACE 3                                                        48900000
TSYSUT3  LA    R5,PSYSUT3               PT TO OVERRIDING DDNAME         49200000
         CR    R5,R7                    IS IT PAST END OF LIST          49500000
         BH    XSYSUT3                  YES. GO CHANGE PTR              49800000
         OC    D0(D8,R5),D0(R5)         IS DDNAME OVERRIDEN             50100000
         BNZ   DSYSUT3                  YES.                            50400000
XSYSUT3  LA    R5,CSYSUT3               PT TO STANDARD NAME             50700000
DSYSUT3  DEVTYPE (R5),JDWORD            GET DEVICE CHARACTERISTICS      51000000
         LTR   R15,R15                  WAS DDNAME FOUND                51300000
         BZ    CLEANUP                  YES                             51600000
         BAL   R9,TELWORLD              NO.  LOG ERROR                  51900000
         B     CLEANUP                  GO CLEANUP CORE                 52200000
         SPACE 6                                                        52500000
TELWORLD MVC   BUFFER+CERR260D(L'DCBDDNAM),D0(R5) MOVE IN DDNAME        52800000
         WTO   MF=(E,BUFFER)            TELL SOMEONE                    53100000
         BR    R9                       RETURN                          53400000
         EJECT                                                          53700000
TRYIOERR CH    R10,=Y(ERR261)           IS IT AN I/O ERROR              54000000
         BNE   TRYNOCOR                 NO, TRY NEXT ERROR              54300000
         MVC   BUFFER(LNGER61A),CERR261A  MOVE FIRST MSG TO WORK AREA   54310000
         MVC   BUFFER+LNGER61A(LNGER61B),CERR261B   MOVE SECOND MSG     54320000
         LR    R0,R11                   RELOAD SYNADAF REGS             54900000
         LR    R1,R2                    ''                              54910000
         LA    R2,BUFFER+FIRSTAST       PT TO FIELD TO BE REPLACED      54920000
         SPACE 3                                                        55800000
         CL    R1,=X'FF000000'          ERROR DURING FIND ON SYSLIB     56100000
         BL    IOERRSAM                 NO, TRY BSAM OR QSAM ERROR      56400000
         LA    R1,D0(,R1)               CLEAR ERROR FLAGS               56700000
         SYNADAF ACSMETH=BPAM           RETRIEVE AVAILABLE DATA         57000000
         MVC   D0(LNGFLD1,R2),D50(R1)   MOVE TO FIRST MSG               57300000
         MVC   SECNDAST(LNGFLD2,R2),D84(R1)   MOVE TO SECOND MSG        60610000
         MVC   SECNDAST(D22,R2),=CL22'FIND ,'                           60620000
         B     IOERRRLS                 GO RELEASE DATA                 60630000
         SPACE 3                                                        60640000
         USING IHADCB,R1                PT TO DCB                       60650000
IOERRSAM TM    DCBMACRF,BIT1            IS I/O ERROR ON QSAM FILE       60660000
         BZ    IOERRBSM                 NO, TRY BSAM                    60670000
         DROP  R1                       DROP DCB PTR                    60680000
         SYNADAF ACSMETH=QSAM           PERFORM ANALYSIS                60690000
         B     IOERRMSG                 GO BUILD MSG                    60700000
IOERRBSM SYNADAF ACSMETH=BSAM           PERFORM ANALYSIS                60710000
IOERRMSG MVC   D0(LNGFLD1,R2),D50(R1)   MOVE TO FIRST MSG               60720000
         MVC   SECNDAST(LNGFLD2,R2),D84(R1)   MOVE TO SECOND MSG        60730000
IOERRRLS SYNADRLS                       RELEASE DATA                    60900000
         WTO   MF=(E,BUFFER)            TELL THE WORLD                  61200000
         WTO   MF=(E,BUFFER+LNGER61A)                                   61300000
         B     CLEANUP                  GO CLEAN UP                     61500000
         SPACE 6                                                        61800000
TRYNOCOR CH    R10,=Y(ERR262)           DID WE RUN OUT OF STORAGE       62100000
         BNE   TRYLOGIC                 NO, TRY NEXT ERROR              62400000
         WTO   MF=(E,CERR262)           TELL THE WORLD                  62700000
         B     CLEANUP                  GO CLEAN UP                     63000000
         SPACE 5                                                        63300000
TRYLOGIC WTO   MF=(E,CERR263)           TELL THE WORLD ABOUT LOGIC ERR  63600000
         SPACE 5                                                        63900000
CLEANUP  L     R1,JSYSCLOS              PT TO CLOSE PARM LIST           64200000
         CLOSE MF=(E,(1))               CLOSE WORKFILES                 64500000
         SPACE 3                                                        64800000
         L     R7,JADINCM               PT TO INPUT COMMON              65100000
         USING JINCOM,R7                ESTABLISH ADDRESSABILITY        65400000
         LTR   R7,R7                    IS IT PRESENT                   65700000
         BZ    NOIN                     NO, TRY OUTPUT COMMON           66000000
         SPACE 3                                                        66300000
         L     R6,JSYSLIB               PT TO SYSLIB DCB                66600000
         USING IHADCB,R6                ''                              66900000
         TM    DCBOFLGS,BIT3            WAS OPEN SUCCESSFUL             67200000
         BZ    NOTSUC                   NO, NOT SUCCESSFUL              67500000
         LH    R0,DCBBLKSI              GET BLOCKSIZE                   67800000
         DROP  R6                       DOP DCB PTR                     68100000
         L     R1,JLIBBUF               GET BUFFER ADDRESS              68400000
         FREEMAIN R,LV=(0),A=(1)        FREE BUFFER                     68700000
NOTSUC   L     R1,JINCLOS               PT TO CLOSE PARM LIST           69000000
         CLOSE MF=(E,(1))               CLOSE INPUT FILES               69300000
         SPACE 3                                                        69600000
         L     R1,JSYSIN                PT TO SYSIN DCB                 69900000
         USING IHADCB,R1                PT TO SYSIN DCB                 70200000
         TM    DCBBUFCB+D3,BIT7         ANY BUFCB                       70500000
         BO    NOIN                     NO, DON'T DO FREEPOOL           70800000
         FREEPOOL (1)                   FREEPOOL BUFFERS                71100000
         DROP  R1,R7                    DROP DCB AND COMMON PTRS        71400000
         EJECT                                                          71700000
NOIN     L     R7,JADOUTCM              PT TO OUTPUT COMMON             72000000
         USING JOUTCOM,R7               ESTABLISH ADDRESSABILITY        72300000
         LTR   R7,R7                    IS IT PRESENT                   72600000
         BZ    NOOUT                    NO                              72900000
         L     R1,JOUTCLOS              PT TO CLOSE PARM LIST           73200000
         CLOSE MF=(E,(1))               CLOSE OUTPUT FILES              73500000
         SPACE 3                                                        73800000
         USING IHADCB,R1                ESTABLISH ADDRESSABILITY        74100000
         L     R1,JSYSLST               PT TO SYSPRINT DCB              74400000
         TM    DCBBUFCB+D3,BIT7         ANY BUFCB                       74700000
         BO    FREEPCH                  NO, DON'T DO FREEPOOL           75000000
         FREEPOOL (1)                   FREEPOOL BUFFERS                75300000
         SPACE 1                                                        75600000
FREEPCH  L     R1,JSYSPCH               PT TO SYSPUNCH DCB              75900000
         TM    DCBBUFCB+D3,BIT7         ANY BUFCB                       76200000
         BO    FREELNK                  NO, DON'T DO FREEPOOL           76500000
         FREEPOOL (1)                   FREEPOOL BUFFERS                76800000
         SPACE 1                                                        77100000
FREELNK  L     R1,JSYSLNK               PT TO SYSLIN DCB                77400000
         TM    DCBBUFCB+D3,BIT7         ANY BUFCB                       77700000
         BO    NOOUT                    NO, DON'T DO FREEPOOL           78000000
         FREEPOOL (1)                   FREEPOOL BUFFERS                78300000
         DROP  R1,R7                    DROP DCB AND COMMON PTRS        78600000
         EJECT                                                          78900000
NOOUT    DELETE EP=&COMPNM.X62          DELETE ALL LOADED MODULES       79200000
         DELETE EP=&COMPNM.X61            EXCEPT THE DRIVER, MASTER     79500000
         DELETE EP=&COMPNM.X51            COMMON AND THE ABORT ROUTINE. 79800000
         DELETE EP=&COMPNM.X41            ''                            80100000
         DELETE EP=&COMPNM.X31            ''                            80400000
         DELETE EP=&COMPNM.X21            ''                            80700000
         DELETE EP=&COMPNM.X11            ''                            81000000
         DELETE EP=&COMPNM.X06            ''                            81300000
         DELETE EP=&COMPNM.X05            ''                            81600000
         DELETE EP=&COMPNM.X04            ''                            81900000
         DELETE EP=&COMPNM.X03            ''                            82200000
         DELETE EP=&COMPNM.X02            ''                            82500000
         SPACE 3                                                        82800000
RETURN   JRETURN                        RETURN TO DRIVER                83100000
         SPACE 5                                                        83150000
       TITLE '&COMPNM&ASMID - ABORT ROUTINE - CONSTANTS AND PATCH AREA' 83200000
*        CONSTANTS                                                      83700000
*                                                                       84000000
CSYSTERM DC    CL8'SYSTERM'             STANDARD FILE NAME FOR SYSTERM  84100000
CSYSGO   DC    CL8'SYSGO'               STANDARD FILE NAME FOR SYSGO    84300000
CSYSIN   DC    CL8'SYSIN'               STANDARD FILE NAME FOR SYSIN    84600000
CSYSPRIN DC    CL8'SYSPRINT'            STANDARD FILE NAME FOR SYSPRINT 84900000
CSYSPUNC DC    CL8'SYSPUNCH'            STANDARD FILE NAME FOR SYSPUNCH 85200000
CSYSUT1  DC    CL8'SYSUT1'              STANDARD FILE NAME FOR SYSUT1   85500000
CSYSUT2  DC    CL8'SYSUT2'              STANDARD FILE NAME FOR SYSUT2   85800000
CSYSUT3  DC    CL8'SYSUT3'              STANDARD FILE NAME FOR SYSUT3   86100000
         SPACE 3                                                        86400000
CERR260  WTO   '&COMPNM.260  ASSEMBLY TERMINATED.  DD CARD MISSING FOR X86700000
               ********',ROUTCDE=(2,11),MF=L                            87000000
CERR260L EQU   *-CERR260                LENGTH OF MESSAGE               87300000
CERR260D EQU   CERR260L-12              DISPLACEMENT TO VARIABLE DATA   87600000
         SPACE 1                                                        87900000
CERR261A WTO   '&COMPNM.261  ASSEMBLY TERMINATED -- PERM I/O ERROR  ***X88200000
               *****,********,***,**,********,  (1/2)',ROUTCDE=(2,11), X88300000
               MF=L                                                     88400000
LNGER61A EQU   (*-CERR261A+3)/4*4       LENGTH OF FIRST MESSAGE         88500000
FIRSTAST EQU   51                       DISP OF 1ST ASTERISK REPLACED   88600000
LNGFLD1  EQU   34                       LNG OF MSG FLD TO BE REPLACED   88700000
         SPACE                                                          88800000
CERR261B WTO   '&COMPNM.261       ******,***************,**************X88900000
               *******  (2/2)',ROUTCDE=(2,11),MF=L                      89000000
LNGER61B EQU   *-CERR261B               LENGTH OF SECOND MESSAGE        89100000
SECNDAST EQU   62                       DISP OF 2ND ASTERISK REPLACED   89200000
LNGFLD2  EQU   44                       LNG OF MSG FLD TO BE REPLACED   89300000
         SPACE                                                          89400000
CERR262  WTO   '&COMPNM.262  ASSEMBLY TERMINATED.  INSUFFICIENT MAIN STX89500000
               ORAGE',ROUTCDE=(2,11),MF=L                               89600000
CERR263  WTO   '&COMPNM.263  ASSEMBLY TERMINATED.  PROGRAM LOGIC ERROR'X89700000
               ,ROUTCDE=11,MF=L                                         89800000
CERR266  WTO   '&COMPNM.266  LAST ASSEMBLER PHASE LOADED WAS ********',X89900000
               ROUTCDE=11,MF=L                                          90000000
CERR266L EQU   *-CERR266                LENGTH OF MESSAGE               91380000
CERR266D EQU   CERR266L-12              DISPLACEMENT TO VARIABLE DATA   91440000
         SPACE 3                                                        91500000
         JPATCH X0I00,6A0               5% PATCH AREA                   91800000
         SPACE 3                                                        92100000
         END   START                                                    92400000
./  ADD  SSI=71710272,NAME=IFOX0J
         TITLE 'IFOX0J - ASSEMBLER XF PARAMETER OPTIONS'                00010000
*TITLE-  ASSEMBLER XF PARAMETER OPTIONS                               * 00020000
*                                                                     * 00030000
*FUNCTION/OPERATION-                                                  * 00040000
*        A TABLE OF PARAMETER OPTIONS FOR ASSEMBLER XF.  THIS TABLE   * 00050000
*   IS REFERENCED BY THE ASSEMBLER XF INITIALIZATION PHASE (IFOX02).  * 00060000
*   THE PARAMETER OPTIONS ARE THOSE WHICH MAY BE SPECIFIED BY THE     * 00070000
*   PROGRAMMER IN THE 'PARM' FIELD OF THE 'EXEC' STATEMENT.  THIS     * 00080000
*   TABLE ALSO PROVIDES FOR A STANDARD SET OF DEFAULE PARAMETERS WHEN * 00090000
*   NONE IS SPECIFIED.                                                * 00100000
*        A STANDARD VERSION OF THIS TABLE IS FURNISHED WITH THE       * 00110000
*   ASSEMBLER.  HOWEVER, THE SYSTEM PROGRAMMER MAY REASSEMBLE THIS    * 00120000
*   TABLE AND RESPECIFY OTHER DEFAULT OPTIONS TO MEET THE REQUIREMENTS* 00130000
*   OF HIS INSTALLATION.  IN ADDITION, OPTIONS MAY BE 'FIXED' TO      * 00140000
*   PREVENT THEIR MISUSE.  'FIXED' OPTIONS SHOULD BE AVOIDED BECAUSE  * 00150000
*   THEY LIMIT THE PROGRAMMER'S PREROGATIVES.  THEY SHOULD BE USED    * 00160000
*   ONLY WHEN THEIR INVERSE FUNCTION MAY CAUSE INCOMPATIBLE           * 00170000
*   INSTALLATION PROCEDURES.                                          * 00180000
*                                                                     * 00190000
*ENTRY POINTS-                                                        * 00200000
*        IFOX0J00                                                     * 00210000
*                                                                     * 00220000
*INPUT-  N/A                                                          * 00230000
*                                                                     * 00240000
*OUTPUT- N/A                                                          * 00250000
*                                                                     * 00260000
*EXITS. NORMAL-                                                       * 00270000
*        N/A                                                          * 00290000
*                                                                     * 00291000
*EXITS,ERROR-                                                         * 00300000
*        N/A                                                          * 00310000
*                                                                     * 00320000
*EXTERNAL REFERENCES-                                                 * 00330000
*        NONE                                                         * 00340000
*                                                                     * 00350000
*TABLES/WORK AREAS-                                                   * 00360000
*        N/A                                                          * 00370000
*                                                                     * 00380000
*ATTRIBUTES-                                                          * 00390000
*        REFRESHABLE                                                  * 00400000
*                                                                     * 00410000
*NOTES-  THE FORMAT OF THIS TABLE IS DEPENDENT TO THE FORMAT OF THE   * 00420000
*   FOLLOWING FIELDS IN THE ASSEMBLER XF COMMON STORAGE AS DEFINED    * 00430000
*   IN COPY CODE 'JCOMMON'-                                           * 00440000
*        JPARMS   DS    0XL8            INITIAL SETTINGS              * 00450000
*                 DS    X               VERSION IDENTIFICATION        * 00460000
*        JMSGL    DS    X               MSGLEVEL=                     * 00470000
*        JLNCT    DS    H               LINECNT=                      * 00480000
*        *                                                            * 00490000
*        JPARM    DS    0A              PARAMETER OPTIONS (1/2/3/4)   * 00500000
*        *                                                            * 00510000
         EJECT                                                          00520000
         JPARM                                                          00530000
         END                                                            00540000
