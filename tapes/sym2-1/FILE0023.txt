./  ADD  SSI=82060084,NAME=HMBLKCTL
         TITLE 'HMBLKCTL -- CONTROL MODULE FOR HMBLIST -- VERSION 1.0'  00010000
         LCLA  &T,&SPN                                                  00020000
&SPN     SETA  33                  CHANGE SUBPOOL NUMBER TO 33          00030000
         AGO   .@001                                                    00040000
         LCLA  &T,&SPN                                            0002  00050000
.@001    ANOP                                                     0002  00060000
HMBLKCTL CSECT ,                                                  0002  00070000
         BC    15,14(0,@F)                                              00080000
         DC    C'Â—HMBLKCTL'                                       0002  00090000
         ST    @E,12(0,@D)                                        0002  00100000
         STM   @0,@C,20(@D)                                       0002  00110000
         BALR  @B,0                                               0002  00120000
@PSTART  DS    0H                                                 0002  00130000
         USING @PSTART+00000,@B                                   0002  00140000
         LA    @7,4095(0,@B)                                      0002  00150000
         USING @PSTART+04095,@7                                   0002  00160000
         LA    @2,4095(0,@7)                                      0002  00170000
         USING @PSTART+08190,@2                                   0002  00180000
         L     @0,@SIZ001                                         0002  00190000
         GETMAIN  R,LV=(0)                                        0002  00200000
         LR    @C,@1                                              0002  00210000
         USING @DATD+00000,@C                                     0002  00220000
         LM    @0,@1,20(@D)                                       0002  00230000
         XC    @TEMPS(@L),@TEMPS                                  0002  00240000
         ST    @D,@SAV001+4                                       0002  00250000
         LA    @F,@SAV001                                         0002  00260000
         ST    @F,8(0,@D)                                         0002  00270000
         LR    @D,@F                                              0002  00280000
         MVC   INDCB(INLEN),INPUT      SET UP REENTRANT SYSIN           00290000
         MVC   OUTDCB(OUTLEN),OUTPUT   SET UP REENTRANT SYSPRINT        00300000
         MVC   PODCB(PDSLEN),PDSDCB    SET UP REENTRANT SYSLIB          00310000
         MVC   READIR(RLEN),READ1      SET UP REENTRANT READ            00320000
         MVC   OPEN1(8),OP1            SET UP REENTRANT OPEN            00330000
         MVC   OPEN2(4),OP2            SET UP REENTRANT OPEN            00340000
         MVC   CLOSR1(8),CL1           SET UP REENTRANT CLOSE           00350000
         MVC   CLOSR2(4),CL2           SET UP REENTRANT CLOSE           00360000
         DS    0H                                                       00370000
*   LOW=12288;                          /* SET LOW GM REQ     YM03244 * 00380000
         MVC   HIGHLOW(4),@D1                                     0063  00390000
*   HIGH=9437184;                       /* SET HIGH GM REQ    YM03244 * 00400000
         MVC   HIGHLOW+4(4),@D2                                   0064  00410000
*   NLOW=49152;                         /* SET LOW LPA REQ    YM03244 * 00420000
         MVC   HILOLPA(4),@D3                                     0065  00430000
*   NHIGH=9437184;                      /* SET HIGH LPA REQ   YM03244 * 00440000
         MVC   HILOLPA+4(4),@D2                                   0066  00450000
*   BCARD(1:121)=' ';                   /* BLANK OUT CARD BUFFER      * 00460000
         MVI   BCARD,C' '                                         0067  00470000
         MVC   BCARD+1(120),BCARD                                 0067  00480000
*   ECARD(1:121)=' ';                   /* BLANK OUT ERR.MARKER BUFFER* 00490000
         MVI   ECARD,C' '                                         0068  00500000
         MVC   ECARD+1(120),ECARD                                 0068  00510000
*   TBLANK='0';                         /* SKIP TWO LINES             * 00520000
         MVI   BLINE,C'0'                                         0069  00530000
*   /* INITIALIZE MODULE SUMMARY HEADING                              * 00540000
*   MODULE='*****  M O D U L E   S U M M A R Y  *****';                 00550000
         MVC   MODULE(41),@C3                                     0070  00560000
*   NAME='MEMBER NAME';                 /* INIT ENTRY HEADING         * 00570000
         MVC   NAME(11),@C4                                       0071  00580000
         MVI   NAME+11,C' '                                       0071  00590000
*   MAIN='MAIN ENTRY POINT';            /* INITIALIZE MAIN HEADING    * 00600000
         MVC   MAIN(16),@C5                                       0072  00610000
         MVI   MAIN+16,C' '                                       0072  00620000
*   ALIASES='** ALIASES **';            /* INIT ALIAS HEADING         * 00630000
         MVC   ALIASES(13),@C6                                    0073  00640000
*   SECOND(1:16)='SECONDARY ENTRY ';    /* INITIALIZE SECONDARY         00650000
*                                         ENTRY POINT HEADING         * 00660000
         MVC   SECOND(16),@C7                                     0074  00670000
*   /* INITIALIZE SECONDARY ENTRY POINT HEADING                       * 00680000
*   SECOND(17:56)='POINT ADDRESSES ASSOCIATED WITH ALIASES:';           00690000
         MVC   SECOND+16(40),@C8                                  0075  00700000
*   MODSSI='MODULE SSI:';               /* MODULE SSI HEADING         * 00710000
         MVC   MODSSI(11),@C9                                     0076  00720000
*   /* INITIALIZE LINKAGE EDITOR ATTRIBUTE HEADING                    * 00730000
*   LINKAGE='LINKAGE EDITOR ATTRIBUTES OF MODULE:';                     00740000
         MVC   LINKAGE(36),@C10                                   0077  00750000
*   /****************************************************************** 00760000
*   /* THE FOLLOWING CODE INITIALIZES THE SIXTEEN BITS WHICH          * 00770000
*   /*DETERMINES THE LOAD MODULE ATTRIBUTE. EACH BIT HAS AN ON AND    * 00780000
*   /*OFF ATTRIBUTE                                                   * 00790000
*   /****************************************************************** 00800000
*   ATON(1)='RENT';                     /* BIT 0 IF ON                * 00810000
         MVC   ATNAME(4),@C11                                     0078  00820000
         MVI   ATNAME+4,C' '                                      0078  00830000
         MVC   ATNAME+5(4),ATNAME+4                               0078  00840000
*   ATOFF(1)='NOT-RENT';                /* BIT 0 IF OFF               * 00850000
         MVC   ATNAME+72(8),@C12                                  0079  00860000
         MVI   ATNAME+80,C' '                                     0079  00870000
*   ATON(2)='REUS';                     /* BIT 1 IF ON                * 00880000
         MVC   ATNAME+9(4),@C13                                   0080  00890000
         MVI   ATNAME+13,C' '                                     0080  00900000
         MVC   ATNAME+14(4),ATNAME+13                             0080  00910000
*   ATOFF(2)='NOT-REUS';                /* BIT 1 IF OFF               * 00920000
         MVC   ATNAME+81(8),@C14                                  0081  00930000
         MVI   ATNAME+89,C' '                                     0081  00940000
*   ATON(3)='OVLY';                     /* BIT 2 IF ON                * 00950000
         MVC   ATNAME+18(4),@C15                                  0082  00960000
         MVI   ATNAME+22,C' '                                     0082  00970000
         MVC   ATNAME+23(4),ATNAME+22                             0082  00980000
*   ATOFF(3)='NOT-OVLY';                /* BIT 2 IF OFF               * 00990000
         MVC   ATNAME+90(8),@C16                                  0083  01000000
         MVI   ATNAME+98,C' '                                     0083  01010000
*   ATON(4)='TEST';                     /* BIT 3 IF ON                * 01020000
         MVC   ATNAME+27(4),@C17                                  0084  01030000
         MVI   ATNAME+31,C' '                                     0084  01040000
         MVC   ATNAME+32(4),ATNAME+31                             0084  01050000
*   ATOFF(4)='NOT-TEST';                /* BIT 3 IF OFF               * 01060000
         MVC   ATNAME+99(8),@C18                                  0085  01070000
         MVI   ATNAME+107,C' '                                    0085  01080000
*   ATON(5)='ONLY-LOAD';                /* BIT 4 IF ON                * 01090000
         MVC   ATNAME+36(9),@C19                                  0086  01100000
*   ATOFF(5)='NOT-OL';                  /* BIT 4 IF OFF               * 01110000
         MVC   ATNAME+108(6),@C20                                 0087  01120000
         MVI   ATNAME+114,C' '                                    0087  01130000
         MVC   ATNAME+115(2),ATNAME+114                           0087  01140000
*   ATON(6)='SCTR';                     /* BIT 5 IF ON                * 01150000
         MVC   ATNAME+45(4),@C21                                  0088  01160000
         MVI   ATNAME+49,C' '                                     0088  01170000
         MVC   ATNAME+50(4),ATNAME+49                             0088  01180000
*   ATOFF(6)='BLOCK';                   /* BIT 5 IF OFF               * 01190000
         MVC   ATNAME+117(5),@C22                                 0089  01200000
         MVI   ATNAME+122,C' '                                    0089  01210000
         MVC   ATNAME+123(3),ATNAME+122                           0089  01220000
*   ATON(7)='EXEC';                     /* BIT 6 IF ON                * 01230000
         MVC   ATNAME+54(4),@C23                                  0090  01240000
         MVI   ATNAME+58,C' '                                     0090  01250000
         MVC   ATNAME+59(4),ATNAME+58                             0090  01260000
*   ATOFF(7)='NOT-EXEC';                /* BIT 6 IF OFF               * 01270000
         MVC   ATNAME+126(8),@C24                                 0091  01280000
         MVI   ATNAME+134,C' '                                    0091  01290000
*   ATON(8)='1-TXT';                    /* BIT 7 IF ON                * 01300000
         MVC   ATNAME+63(5),@C25                                  0092  01310000
         MVI   ATNAME+68,C' '                                     0092  01320000
         MVC   ATNAME+69(3),ATNAME+68                             0092  01330000
*   ATOFF(8)='MULTI-RCD';               /* BIT 7 IF OFF               * 01340000
         MVC   ATNAME+135(9),@C26                                 0093  01350000
*   SECATON(1)='NOT-DC';                /* BIT 8 IF ON                * 01360000
         MVC   ATNAME+144(6),@C27                                 0094  01370000
         MVI   ATNAME+150,C' '                                    0094  01380000
         MVC   ATNAME+151(2),ATNAME+150                           0094  01390000
*   SECATOFF(1)='DC';                   /* BIT 8 IF OFF               * 01400000
         MVC   ATNAME+216(2),@C28                                 0095  01410000
         MVI   ATNAME+218,C' '                                    0095  01420000
         MVC   ATNAME+219(6),ATNAME+218                           0095  01430000
*   SECATON(2)='ZERO-ORG';              /* BIT 9 IF ON                * 01440000
         MVC   ATNAME+153(8),@C29                                 0096  01450000
         MVI   ATNAME+161,C' '                                    0096  01460000
*   SECATOFF(2)='NOT-ZERO';             /* BIT 9 IF OFF               * 01470000
         MVC   ATNAME+225(8),@C30                                 0097  01480000
         MVI   ATNAME+233,C' '                                    0097  01490000
*   SECATON(3)='EP-ZERO';               /* BIT 10 IF ON               * 01500000
         MVC   ATNAME+162(7),@C31                                 0098  01510000
         MVI   ATNAME+169,C' '                                    0098  01520000
         MVI   ATNAME+170,C' '                                    0098  01530000
*   SECATOFF(3)='EP > ZERO';            /* BIT 10 IF OFF              * 01540000
         MVC   ATNAME+234(9),@C32                                 0099  01550000
*   SECATON(4)='NO-RLD';                /* BIT 11 IF ON               * 01560000
         MVC   ATNAME+171(6),@C33                                 0100  01570000
         MVI   ATNAME+177,C' '                                    0100  01580000
         MVC   ATNAME+178(2),ATNAME+177                           0100  01590000
*   SECATOFF(4)='RLD';                  /* BIT 11 IF OFF              * 01600000
         MVC   ATNAME+243(3),@C34                                 0101  01610000
         MVI   ATNAME+246,C' '                                    0101  01620000
         MVC   ATNAME+247(5),ATNAME+246                           0101  01630000
*   SECATON(5)='NOT-EDIT';              /* BIT 12 IF ON               * 01640000
         MVC   ATNAME+180(8),@C35                                 0102  01650000
         MVI   ATNAME+188,C' '                                    0102  01660000
*   SECATOFF(5)='EDIT';                 /* BIT 12 IF OFF              * 01670000
         MVC   ATNAME+252(4),@C36                                 0103  01680000
         MVI   ATNAME+256,C' '                                    0103  01690000
         MVC   ATNAME+257(4),ATNAME+256                           0103  01700000
*   SECATON(6)='SYMS';                  /* BIT 13 IF ON               * 01710000
         MVC   ATNAME+189(4),@C37                                 0104  01720000
         MVI   ATNAME+193,C' '                                    0104  01730000
         MVC   ATNAME+194(4),ATNAME+193                           0104  01740000
*   SECATOFF(6)='NO-SYMS';              /* BIT 13 IF OFF              * 01750000
         MVC   ATNAME+261(7),@C38                                 0105  01760000
         MVI   ATNAME+268,C' '                                    0105  01770000
         MVI   ATNAME+269,C' '                                    0105  01780000
*   SECATON(7)='F-LEVEL';               /* BIT 14 IF ON               * 01790000
         MVC   ATNAME+198(7),@C39                                 0106  01800000
         MVI   ATNAME+205,C' '                                    0106  01810000
         MVI   ATNAME+206,C' '                                    0106  01820000
*   SECATOFF(7)='E-LEVEL';              /* BIT 14 IF OFF              * 01830000
         MVC   ATNAME+270(7),@C40                                 0107  01840000
         MVI   ATNAME+277,C' '                                    0107  01850000
         MVI   ATNAME+278,C' '                                    0107  01860000
*   SECATON(8)='REFR';                  /* BIT 15 IF ON               * 01870000
         MVC   ATNAME+207(4),@C41                                 0108  01880000
         MVI   ATNAME+211,C' '                                    0108  01890000
         MVC   ATNAME+212(4),ATNAME+211                           0108  01900000
*   SECATOFF(8)='NOT-REFR';             /* BIT 15 IF OFF              * 01910000
         MVC   ATNAME+279(8),@C42                                 0109  01920000
         MVI   ATNAME+287,C' '                                    0109  01930000
*   SYSLIB='SYSLIB  ';                  /* INITIALIZE SYSLIB          * 01940000
         MVC   SYSLIB(8),@C43                                     0110  01950000
*   ENDNAME='FFFFFFFFFFFFFFFF'X;        /* ALL F'S MEAN END OF DIRECT.* 01960000
         MVC   ENDNAME(8),@X44                                    0111  01970000
*   HEXCHAR='0123456789ABCDEF';         /* INITIALIZE CONVERSION        01980000
*                                         CHARACTERS                  * 01990000
         MVC   HEXCHAR(16),@C45                                   0112  02000000
*   ZONEOFF='0F0F0F0F0F0F0F0F'X;        /* INITIALIZE ZONEOFF FIELD   * 02010000
         MVC   ZONEOFF(8),@X46                                    0113  02020000
*   LENGTH=14;                          /* LEN OF EACH BLDLIST ENTRY  * 02030000
         LA    @F,14                                              0114  02040000
         STH   @F,BLDLIST+2                                       0114  02050000
*   DIRORG='00000100'X;                 /* FIRST BLOCK ADDRESS        * 02060000
         MVC   DIRORG(4),@X47                                     0115  02070000
*   /****************************************************************** 02080000
*   /* OPEN SYSIN AND SYSPRINT DATA CONTROL BLOCKS                    * 02090000
*   /****************************************************************** 02100000
*   GEN;                                                                02110000
   LA R5,INDCB                         GET ADDR OF SYSIN DCB            02120000
   USING IHADCB,R5                     SET REG AS DSECT BASE            02130000
   OPEN (INDCB,,OUTDCB,(OUTPUT)),MF=(E,OPEN1)                           02140000
   TM DCBOFLGS,X'10'                   TEST IF SYSIN OPEN SUCCESSFUL    02150000
   BZ AAB0                             UNSUCCESSFUL OPEN                02160000
   LA R5,OUTDCB                        GET ADDR OF SYSOUT DCB           02170000
   USING IHADCB,R5                     SET REG AS DSECT BASE            02180000
   TM DCBOFLGS,X'10'                   TEST IF SYSOUT OPEN SUCCESSFUL   02190000
   BZ ENDITB                           UNSUCCESSFUL OPEN                02200000
   BC 15,SETPLIST                      SUCCESSFUL OPEN           XM2962 02210000
         DS    0H                                                       02220000
* AAB0: /* BRANCH HERE IF SYSIN NOT OPENED                            * 02230000
*   GEN(  XC    PARMLIST(69),PARMLIST); /* ZERO OUT PARMLIST          * 02240000
AAB0       XC    PARMLIST(69),PARMLIST                                  02250000
         DS    0H                                                       02260000
*   DCBOUT=ADDR(OUTDCB);                /* STORE DCB ADDR IN PARM     * 02270000
         LA    @F,OUTDCB                                          0118  02280000
         ST    @F,PARMLIST+4                                      0118  02290000
*   ERRORS=ERRORS|'0020'X;              /* DDNAME COULD NOT BE        * 02300000
         OC    PARMLIST+32(2),@X48                                0119  02310000
*                                       /* OPENED ERROR               * 02320000
*   GO TO ENDITA;                       /* GO PRINT ERROR MESSAGE     * 02330000
         BC    15,ENDITA                                          0120  02340000
* SETPLIST:                             /*                     XM2962 * 02350000
*   NFLGS= '00000000'X;                 /* CLEAR RET CODE FLAGS XM2962* 02360000
SETPLIST MVC   PARMLIST+68(4),@X49                                0121  02370000
* AAB1:                                                                 02380000
*   CONTINUE='0'B;                      /* TURN OF CONTINUE INDICATOR * 02390000
AAB1     NI    CONTINUE,B'01111111'                               0122  02400000
*   GEN(  XC    PARMLIST(68),PARMLIST); /* ZERO OUT PARMLIST   XM2962 * 02410000
           XC    PARMLIST(68),PARMLIST                                  02420000
         DS    0H                                                       02430000
*   DCBIN=ADDR(PODCB);                  /* STORE DCB ADDR IN PARMLIST * 02440000
         LA    @F,PODCB                                           0124  02450000
         ST    @F,PARMLIST                                        0124  02460000
*   DCBOUT=ADDR(OUTDCB);                /* STORE DCB ADDR IN PARMLIST * 02470000
         LA    @F,OUTDCB                                          0125  02480000
         ST    @F,PARMLIST+4                                      0125  02490000
*   TITLINE=ADDR(BLINE);                /* ADDRESS OF TITLE LINE      * 02500000
         LA    @F,BLINE                                           0126  02510000
         ST    @F,PARMLIST+8                                      0126  02520000
*   SWITCHES='0000'X;                   /* INITIALIZE SWITCHES TO OFF * 02530000
         MVC   SWITCHES(2),@X47                                   0127  02540000
*   MEMNAME=' ';                        /* BLANK OUT MEMBER NAME      * 02550000
         MVI   PARMLIST+36,C' '                                   0128  02560000
         MVC   PARMLIST+37(7),PARMLIST+36                         0128  02570000
*   BLINE(1:121)=' ';                   /* BLANK OUT TITLE BUFFER     * 02580000
         MVI   BLINE,C' '                                         0129  02590000
         MVC   BLINE+1(120),BLINE                                 0129  02600000
*   LISTCNT=1;                          /* SET BLDLIST PTR TO ONE     * 02610000
         LA    @F,1                                               0130  02620000
         STH   @F,LISTCNT                                         0130  02630000
*   ALCNT=1;                            /* SET ALIASLST PTR TO ONE    * 02640000
         STH   @F,ALCNT                                           0131  02650000
*   APFDATA='NONE';                     /* INITIALIZE APF TO NONE     * 02660000
         MVC   APFDATA(4),@C51                                    0132  02670000
         MVI   APFDATA+4,C' '                                     0132  02680000
         MVC   APFDATA+5(3),APFDATA+4                             0132  02690000
*   BLANK1(1:256)=' ';                  /* BLANK OUT ALIASLST         * 02700000
         MVI   BLNKALAS,C' '                                      0133  02710000
         MVC   BLNKALAS+1(255),BLNKALAS                           0133  02720000
*   BLANK2(1:32)=' ';                   /* BLANK OUT ALIASLST         * 02730000
         MVI   BLNKALAS+256,C' '                                  0134  02740000
         MVC   BLNKALAS+257(31),BLNKALAS+256                      0134  02750000
* AAC1:                                                                 02760000
*   GEN(  GET   INDCB,CARD);            /* READ CONTROL CARD          * 02770000
AAC1       GET   INDCB,CARD                                             02780000
         DS    0H                                                       02790000
*   COL=2;                              /* SET SCAN TO COLUMN 2       * 02800000
         LA    @9,2                                               0136  02810000
*   /* CHECK TO SEE IF CONTINUATION WAS INDICATED                     * 02820000
*   IF CONTINUEÂ¬='1'B                   /* SHOULD THIS BE CONTINUATION* 02830000
*      THEN DO;                         /* NOT CONTINUATION           * 02840000
         TM    CONTINUE,B'10000000'                               0137  02850000
         BC    01,@9FF                                            0137  02860000
* AAG0:                                                                 02870000
*           CBLANK='1';                 /* SKIP TO NEW PAGE           * 02880000
AAG0     MVI   BCARD,C'1'                                         0139  02890000
*           GEN(PUT   OUTDCB,BCARD);    /* PRINT CONTROL CARD         * 02900000
         PUT   OUTDCB,BCARD                                             02910000
         DS    0H                                                       02920000
*           OPTNMAP='0'B;               /* SET BIT MAP TO ZERO        * 02930000
         MVI   OPTNMAP,B'00000000'                                0141  02940000
         XC    OPTNMAP+1(3),OPTNMAP+1                             0141  02950000
*           ERRORS='0'B;                /* ZERO OUT ERROR MAP         * 02960000
         MVI   PARMLIST+32,B'00000000'                            0142  02970000
         XC    PARMLIST+33(3),PARMLIST+33                         0142  02980000
*           /* LOOK FOR FIRST COLUMN OPERATION                        * 02990000
* AAH1:                                                                 03000000
*           IF CARD(COL-1)=' '          /* IS COLUMN ONE BLANK        * 03010000
*              & CARD(COL)Â¬=' '         /* IS COLUMN TWO NOT A BLANK  * 03020000
*              THEN DO;                 /* PROCESS CARD               * 03030000
AAH1     LH    @1,@D4                                             0143  03040000
         AR    @1,@9                                              0143  03050000
         LA    @A,BCARD(@1)                                       0143  03060000
         CLI   0(@A),C' '                                         0143  03070000
         BC    07,@9FE                                            0143  03080000
         LR    @3,@9                                              0143  03090000
         LA    @A,BCARD(@3)                                       0143  03100000
         CLI   0(@A),C' '                                         0143  03110000
         BC    08,@9FD                                            0143  03120000
*                   /* LOOK FOR A LISTLOAD OPERATION ON CARD          * 03130000
*                   IF CARD(COL:COL+8)='LISTLOAD '/* LISTLOAD CARD    * 03140000
*                      THEN DO;         /* INDICATE LISTLOAD          * 03150000
         CLC   0(9,@A),@C53                                       0145  03160000
         BC    07,@9FC                                            0145  03170000
*                           LISTLOAD='1'B;/* TURN ON BIT IN OPTNMAP   * 03180000
         OI    OPTNMAP,B'10000000'                                0147  03190000
*                           COL=COL+9;  /* POINT TO NEXT VALID COLUMN * 03200000
         AH    @9,@D5                                             0148  03210000
*                           GOTO ABB1;  /* GOTO OPERAND PROCESSOR     * 03220000
         BC    15,ABB1                                            0149  03230000
*                           END;                                        03240000
*                   /* LOOK FOR LISTOBJ OPERATION                     * 03250000
*                   IF CARD(COL:COL+7)='LISTOBJ '/* IS IT LISTOBJ     * 03260000
*                      THEN DO;         /* INDICATE LISTOBJ OPERATION * 03270000
@9FC     LR    @1,@9                                              0151  03280000
         LA    @A,BCARD(@1)                                       0151  03290000
         CLC   0(8,@A),@C54                                       0151  03300000
         BC    07,@9FB                                            0151  03310000
*                           LISTOBJ='1'B;/* TURN ON BIT IN OPTNMAP    * 03320000
         OI    OPTNMAP,B'01000000'                                0153  03330000
*                           COL=COL+8;  /* POINT TO NEXT VALID COLUMN * 03340000
         AH    @9,@D6                                             0154  03350000
*                           GOTO ABB1;  /* GOTO OPERAND PROCESSOR     * 03360000
         BC    15,ABB1                                            0155  03370000
*                           END;                                        03380000
*                   /* LOOK FOR LISTIDR OPERATION                     * 03390000
*                   IF CARD(COL:COL+7)='LISTIDR '/* LISTIDR OPERATION?* 03400000
*                      THEN DO;         /* INDICATE LISTIDR OPERATION * 03410000
@9FB     LR    @1,@9                                              0157  03420000
         LA    @A,BCARD(@1)                                       0157  03430000
         CLC   0(8,@A),@C55                                       0157  03440000
         BC    07,@9FA                                            0157  03450000
*                           LISTIDR='1'B;/* TURN ON BIT IN OPTNMAP    * 03460000
         OI    OPTNMAP,B'00100000'                                0159  03470000
*                           COL=COL+8;  /* POINT TO NEXT VALID COLUMN * 03480000
         AH    @9,@D6                                             0160  03490000
*                           NUMO='00'X; /* INITIALIZE LINE CNT XM3799 * 03500000
         MVI   PARMLIST+76,X'00'                                  0161  03510000
*                           GOTO ABB1;  /* GOTO OPERAND PROCESSOR     * 03520000
         BC    15,ABB1                                            0162  03530000
*                           END;                                        03540000
*                   /* CHECK TO SEE IF IT IS A LINK PACK AREA MAP IS    03550000
*                     WANTED                                          * 03560000
*                   IF CARD(COL:COL+7)='LISTLPA '/* LISTLPA OPERATION?* 03570000
*                      THEN DO;         /* PROCESS LISTLPA            * 03580000
@9FA     LR    @1,@9                                              0164  03590000
         LA    @A,BCARD(@1)                                       0164  03600000
         CLC   0(8,@A),@C56                                       0164  03610000
         BC    07,@9F9                                            0164  03620000
*                           LISTLPA='1'B;/* INDICATE LPA OPTION       * 03630000
         OI    OPTNMAP,B'00010000'                                0166  03640000
*                           GOTO GETMAIN;/* GET WORKING STORAGE FOR LPA 03650000
*                                          SORT                       * 03660000
         BC    15,GETMAIN                                         0167  03670000
* LPACALL:                                                              03680000
*                           R1=ADDR(PARMLIST);/* SET UP PARMLIST      * 03690000
LPACALL  LA    @1,PARMLIST                                        0168  03700000
*                           CALL HMBLKLPA;/* CALL LINK PACK AREA ROUT.* 03710000
         L     @F,@V1              ADDRESS OF HMBLKLPA            0169  03720000
         BALR  @E,@F                                              0169  03730000
*                           GEN;        /* ISSUE FREEMAIN FOR SP22    * 03740000
          FREEMAIN V,A=AREAGET,SP=22,MF=(E,SPFREE)                      03750000
         DS    0H                                                       03760000
*                           GOTO ERRCHK;/* CHECK FOR ANY ERRORS       * 03770000
         BC    15,ERRCHK                                          0171  03780000
*                           END;                                        03790000
*                      ELSE DO;         /* INDICATE INVALID CARD      * 03800000
@9F9     EQU   *                                                  0173  03810000
* AAJ4:                                                                 03820000
*                           ERRORS=ERRORS|'00000800'X;/* TURN ON BIT  * 03830000
AAJ4     OC    PARMLIST+32(4),@X57                                0174  03840000
* ERRCHK:                                                               03850000
*                           R1=ADDR(PARMLIST);/* SET UP PARAMETER LIST* 03860000
ERRCHK   LA    @1,PARMLIST                                        0175  03870000
*                           CALL HMBLKERR;/* PROCESS ERROR MESSAGES   * 03880000
         L     @F,@V2              ADDRESS OF HMBLKERR            0176  03890000
         BALR  @E,@F                                              0176  03900000
*                           GOTO AAC1;  /* READ ANOTHER CONTROL CARD  * 03910000
         BC    15,AAC1                                            0177  03920000
*                           END;                                        03930000
*                   END;                                                03940000
*              ELSE DO;                 /* LOOK FOR FIRST STARTING      03950000
*                                         COLUMN                      * 03960000
@9FD     EQU   *                                                  0180  03970000
*                   COL=COL+1;          /* BUMP COL BY ONE            * 03980000
@9FE     AH    @9,@D7                                             0181  03990000
*                   /*CHECK TO SEE IF IT CAN BE A VALID CARD          * 04000000
*                   IF COL>64           /* IS COL PAST WHER VALID       04010000
*                                         OPERATION CAN START?        * 04020000
*                      THEN GOTO AAJ4;  /* INDICATE INVALID CARD      * 04030000
         CH    @9,@D8                                             0182  04040000
         BC    02,AAJ4                                            0183  04050000
*                      ELSE GOTO AAH1;  /* REPROCESS CARD             * 04060000
         BC    15,AAH1                                            0184  04070000
*                   END;                                                04080000
*           END;                                                        04090000
@9F7     EQU   *                                                  0186  04100000
*   /* CHECK TO SEE IF CONTINUATION BEGINS IN VALID COLUMN            * 04110000
*   IF CARD(1)Â¬=' '                     /* IS THERE A PUNCH IN ONE?   * 04120000
*      | CARD(2:16)='               '   /* ARE COLUMNS 2 TO 16 BLANK? * 04130000
*      THEN DO;                         /* ONE OR BOTH CONDITIONS TRUE* 04140000
@9FF     CLI   BCARD+1,C' '                                       0187  04150000
         BC    07,@9F6                                            0187  04160000
         CLC   BCARD+2(15),@C58                                   0187  04170000
         BC    07,@9F5                                            0187  04180000
*           CBLANK=' ';                 /* SKIP ONE LINE              * 04190000
@9F6     MVI   BCARD,C' '                                         0189  04200000
*           GEN(PUT   OUTDCB,BCARD);    /* PRINT OUT A CARD           * 04210000
         PUT   OUTDCB,BCARD                                             04220000
         DS    0H                                                       04230000
*           CONTINUE='0'B;              /* TURN OFF CONTINUATION BIT  * 04240000
         NI    CONTINUE,B'01111111'                               0191  04250000
*           ERRORS=ERRORS|'00001000'X;  /* TURN ON ERROR BIT          * 04260000
         OC    PARMLIST+32(4),@X59                                0192  04270000
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS * 04280000
         LA    @1,PARMLIST                                        0193  04290000
*           CALL HMBLKERR;              /* PROCESS ERROR MESSAGE      * 04300000
         L     @F,@V2              ADDRESS OF HMBLKERR            0194  04310000
         BALR  @E,@F                                              0194  04320000
*           GOTO AAG0;                  /*PRINT OUT BAD CARD          * 04330000
         BC    15,AAG0                                            0195  04340000
*           END;                                                        04350000
*   CBLANK=' ';                         /* SKIP ONE LINE              * 04360000
@9F5     MVI   BCARD,C' '                                         0197  04370000
*   GEN(  PUT   OUTDCB,BCARD);          /* PRINT CONTROL CARD         * 04380000
           PUT   OUTDCB,BCARD                                           04390000
         DS    0H                                                       04400000
*   /* CHECK TO SEE IF MEMBERS WERE CONTINUED                         * 04410000
*   IF MCONTIN='1'B                     /* IS THERE MEMBER OPTION       04420000
*                                         CONTINUATION?               * 04430000
*      THEN DO;                         /* MEMBERS WERE CONTINUED     * 04440000
         TM    OPTNMAP+1,B'00000100'                              0199  04450000
         BC    12,@9F4                                            0199  04460000
*           MCONTIN='0'B;               /* TURN OFF CONTINUE BIT      * 04470000
         NI    OPTNMAP+1,B'11111011'                              0201  04480000
* AAG3:                                                                 04490000
*           /* FIND WHERE MEMBERS WERE CONTINUED                      * 04500000
*           IF CARD(COL)=' '            /* DOES THE MEMBER START HERE * 04510000
*              THEN DO;                 /* NO MEMBER FOUND            * 04520000
AAG3     LR    @1,@9                                              0202  04530000
         LA    @A,BCARD(@1)                                       0202  04540000
         CLI   0(@A),C' '                                         0202  04550000
         BC    07,@9F3                                            0202  04560000
*                   COL=COL+1;          /* BUMP COL POINTER BY ONE    * 04570000
         AH    @9,@D7                                             0204  04580000
*                   GOTO AAG3;          /* REPROCESS MEMBER CHECK     * 04590000
         BC    15,AAG3                                            0205  04600000
*                   END;                                                04610000
*              ELSE GOTO AEC1;          /* PROCESS MEMBERS            * 04620000
*           END;                                                        04630000
@9F2     EQU   *                                                  0208  04640000
* ABB1:                                                                 04650000
*   /* SCAN FOR NON BLANK CHARACTER AND BEGIN TO PROCESS              * 04660000
*   IF CARD(COL)=' '                    /* IS COLUMN A BLANK?         * 04670000
*      THEN DO;                         /* YES, THEN CHECK FURTHER    * 04680000
@9F4     EQU   *                                                  0209  04690000
ABB1     LR    @1,@9                                              0209  04700000
         LA    @A,BCARD(@1)                                       0209  04710000
         CLI   0(@A),C' '                                         0209  04720000
         BC    07,@9F1                                            0209  04730000
*           COL=COL+1;                  /* BUMP POINTER TO NEXT COLUMN* 04740000
         AH    @9,@D7                                             0211  04750000
*           /* CHECK TO SEE IF CARD COLUMN IS PAST COLUMN 71          * 04760000
*           IF COL > 71                 /* IS CARD COLUMN GREATER THAN  04770000
*                                         COLUMN 71?                  * 04780000
*              THEN IF LISTLOAD='1'B |  /* IS IT LISTLOAD OPERATION?  * 04790000
         CH    @9,@D9                                             0212  04800000
         BC    12,@9F0                                            0212  04810000
*                      LISTIDR='1'B |   /* IS IT LISTIDR OPERATION?   * 04820000
*                      LISTOBJ='1'B     /* IS IT LISTOBJ OPERATION?   * 04830000
*                      THEN GOTO PROCESS;/* PROCESS CONTROL CARD      * 04840000
         TM    OPTNMAP,B'10000000'                                0213  04850000
         BC    01,@9EF                                            0213  04860000
         TM    OPTNMAP,B'00100000'                                0213  04870000
         BC    01,@9EE                                            0213  04880000
         TM    OPTNMAP,B'01000000'                                0213  04890000
         BC    03,PROCESS                                         0214  04900000
*                      ELSE GOTO ABA2;  /* SET UP ERROR MESSAGE       * 04910000
         BC    15,ABA2                                            0215  04920000
*              ELSE GOTO ABB1;          /* CHECK FOR NON-BLANK        * 04930000
*           END;                                                        04940000
@9EC     EQU   *                                                  0217  04950000
* ABC1:                                                                 04960000
*   /* CHECK TO SEE IF OPERAND IS MODLIB                              * 04970000
*   IF CARD(COL:COL+5)='MODLIB'         /* IS OPERAND MODLIB          * 04980000
*     THEN                              /* YES                        * 04990000
@9F1     EQU   *                                                  0218  05000000
ABC1     LR    @1,@9                                              0218  05010000
         LA    @A,BCARD(@1)                                       0218  05020000
         CLC   0(6,@A),@C60                                       0218  05030000
         BC    07,@9EB                                            0218  05040000
*       DO;                                                             05050000
*         COL=COL+6;                    /* BUMP POINTER TO NEXT COL   * 05060000
         AH    @9,@D10                                            0220  05070000
*         MDLB='1'B;                    /* INDICATE MODLIB IN PARMLIST* 05080000
         OI    PARMLIST+20,B'00001000'                            0221  05090000
*         GO TO ACG4;                   /* CHECK FOR MORE OPT  XM3799 * 05100000
         BC    15,ACG4                                            0222  05110000
*       END;                                                            05120000
*     ELSE;                             /* NULL ELSE                  * 05130000
@9EB     EQU   *                                                  0224  05140000
*   /* CHECK TO SEE IF OPERAND IS TITLE                               * 05150000
*   IF CARD(COL:COL+5)='TITLE='         /* IS OPERAND TITLE OPERAND?  * 05160000
*      THEN DO;                         /* PROCESS TITLE OPERAND      * 05170000
@9EA     LR    @1,@9                                              0225  05180000
         LA    @A,BCARD(@1)                                       0225  05190000
         CLC   0(6,@A),@C61                                       0225  05200000
         BC    07,@9E9                                            0225  05210000
*           COL=COL+6;                  /* BUMP POINTER TO START OF     05220000
*                                         VALID TITLE OPERAND         * 05230000
         AH    @9,@D10                                            0227  05240000
*           TITLE='1'B;                 /* INDICATE TITLE IN OPTNMAP  * 05250000
         OI    OPTNMAP,B'00001000'                                0228  05260000
*           TTLINE=' ';                 /* BLANK OUT TITLE BUFFER     * 05270000
         MVI   BLINE+1,C' '                                       0229  05280000
         MVC   BLINE+2(119),BLINE+1                               0229  05290000
*           LPAREN='0'B;                /* TURN OFF LEFT PARENTHESIS    05300000
*                                         INDICATOR                   * 05310000
         NI    LPAREN,B'01111111'                                 0230  05320000
*           /* CHECK FOR LEFT PARENTHESIS                             * 05330000
*           IF CARD(COL)='('            /* IS COLUMN A LEFT PAREND?   * 05340000
*              THEN DO;                 /* PROCESS LEFT PAREND        * 05350000
         LR    @1,@9                                              0231  05360000
         LA    @A,BCARD(@1)                                       0231  05370000
         CLI   0(@A),C'('                                         0231  05380000
         BC    07,@9E8                                            0231  05390000
*                   COL=COL+1;          /* POINT TO NEXT COLUMN       * 05400000
         AH    @9,@D7                                             0233  05410000
*                   LPAREN='1'B;        /* INDICATE LEFT PAREND IN      05420000
*                                         OPTNMAP                     * 05430000
         OI    LPAREN,B'10000000'                                 0234  05440000
*                   END;                                                05450000
*           /* CHECK FOR BEGGINNING QUOTE                             * 05460000
*           IF CARD(COL)=''''           /* IS IT FIRST QUOTE IN TITLE*/ 05470000
*              THEN DO;                 /* PROCESS FIRST QUOTE        * 05480000
@9E8     LR    @1,@9                                              0236  05490000
         LA    @A,BCARD(@1)                                       0236  05500000
         CLI   0(@A),C''''                                        0236  05510000
         BC    07,@9E7                                            0236  05520000
*                   TCOL1=COL+1;        /* SAVE BEGINNING TITLE ADDR  * 05530000
         LA    @F,1                                               0238  05540000
         AR    @F,@9                                              0238  05550000
         STH   @F,TCOL1                                           0238  05560000
*                   GOTO ACB1;          /* PROCESS TITLE FURTHER      * 05570000
         BC    15,ACB1                                            0239  05580000
*                   END;                                                05590000
*              ELSE GOTO ABA2;          /* SET UP ERROR MESSAGE       * 05600000
*           END;                                                        05610000
@9E6     EQU   *                                                  0242  05620000
*   /* CHECK FOR MEMBER OPERAND                                       * 05630000
*   IF CARD(COL:COL+6)='MEMBER='        /* IS IT MEMBER OPERAND?      * 05640000
*      THEN DO;                         /* PROCESS MEMBER OPERAND     * 05650000
@9E9     LR    @1,@9                                              0243  05660000
         LA    @A,BCARD(@1)                                       0243  05670000
         CLC   0(7,@A),@C64                                       0243  05680000
         BC    07,@9E5                                            0243  05690000
*           COL=COL+7;                  /* BUMP POINTER TO BEGINNING    05700000
*                                         OF MEMBER OPERAND           * 05710000
         AH    @9,@D11                                            0245  05720000
*           MEMBER='1'B;                /* INDICATE MEMBER IN OPTNMAP * 05730000
         OI    OPTNMAP,B'00000010'                                0246  05740000
*           PO='1'B;                    /* SHOW OBJECT PDS IF LISTOBJ * 05750000
         OI    OPTNMAP+1,B'00100000'                              0247  05760000
*           LASTMEM='0'B;               /* TURN OFF LAST MEM BIT      * 05770000
         NI    OPTNMAP+1,B'11101111'                              0248  05780000
*           LPAREN='0'B;                /* ZERO LEFT PAREND BIT       * 05790000
         NI    LPAREN,B'01111111'                                 0249  05800000
*           /* CHECK IF COLUMN CONTAINS LEFT PARENDS                  * 05810000
*           IF CARD(COL)='('            /* IS IT LEFT PAREND          * 05820000
*              THEN DO;                 /* PROCESS LEFT PAREND        * 05830000
         LR    @1,@9                                              0250  05840000
         LA    @A,BCARD(@1)                                       0250  05850000
         CLI   0(@A),C'('                                         0250  05860000
         BC    07,@9E4                                            0250  05870000
*                   COL=COL+1;          /* BUMP POINTER TO NEXT COLUMN* 05880000
         AH    @9,@D7                                             0252  05890000
*                   LPAREN='1'B;        /* TURN ON LEFT PAREND BIT    * 05900000
         OI    LPAREN,B'10000000'                                 0253  05910000
         BC    15,@9E3                                            0255  05920000
*                   END;                                                05930000
*              ELSE LASTMEM='1'B;       /* INDICATE LAST MEMBER       * 05940000
@9E4     OI    OPTNMAP+1,B'00010000'                              0255  05950000
*           GOTO AEB1;                  /* CHECK IF LIMIT REACHED     * 05960000
         BC    15,AEB1                                            0256  05970000
*           END;                                                        05980000
*   /* CHECK FOR RELOCATION FACTOR                                    * 05990000
*   IF CARD(COL:COL+5)='RELOC='         /* IS IT RELOC OPERAND?       * 06000000
*      THEN DO;                         /* PROCESS RELOC OPERAND      * 06010000
@9E5     LR    @1,@9                                              0258  06020000
         LA    @A,BCARD(@1)                                       0258  06030000
         CLC   0(6,@A),@C65                                       0258  06040000
         BC    07,@9E2                                            0258  06050000
*           RELOC='1'B;                 /* TURN ON BIT IN OPTNMAP     * 06060000
         OI    OPTNMAP+1,B'00000010'                              0260  06070000
*           COL=COL+6;                  /* POINT TO START OF FACTOR   * 06080000
         AH    @9,@D10                                            0261  06090000
*           TCOL1=COL;                  /* SAVE LEFT BOUNDARY         * 06100000
         STH   @9,TCOL1                                           0262  06110000
* INCREM:                                                               06120000
*           COL=COL+1;                  /* POINT TO NEXT POSITION     * 06130000
INCREM   AH    @9,@D7                                             0263  06140000
*           /* IS COL PAST 71?                                        * 06150000
*           IF COL > 71                 /* PAST COL 71?               * 06160000
*              THEN GOTO ABA2;          /* INDICATE ERROR             * 06170000
         CH    @9,@D9                                             0264  06180000
         BC    02,ABA2                                            0265  06190000
*           /* CHECK FOR END OF RELOC OPERAND                         * 06200000
*           IF CARD(COL)=','            /* IS THERE ANOTHER OPERAND?  * 06210000
*              | CARD(COL)=' '          /* END OF OPERAND             * 06220000
*              /* CHECK IF RELOC FACTOR IS A VALID LENGTH             * 06230000
*              THEN IF COL-TCOL1 < 7    /* IS IT SMALL ENOUGH         * 06240000
         LR    @1,@9                                              0266  06250000
         LA    @A,BCARD(@1)                                       0266  06260000
         CLI   0(@A),C','                                         0266  06270000
         BC    08,@9E1                                            0266  06280000
         CLI   0(@A),C' '                                         0266  06290000
         BC    07,@9E0                                            0266  06300000
*                      & COL-TCOL1 > 0  /* IS IT AT LEAST 1 CHARACTER * 06310000
*                      THEN DO;         /* PROCESS VALID RELOC OPERAND* 06320000
@9E1     LR    @F,@9                                              0267  06330000
         SH    @F,TCOL1                                           0267  06340000
         LA    @1,7                                               0267  06350000
         CR    @F,@1                                              0267  06360000
         BC    10,@9DF                                            0267  06370000
         LR    @F,@9                                              0267  06380000
         SH    @F,TCOL1                                           0267  06390000
         CH    @F,@D12                                            0267  06400000
         BC    12,@9DE                                            0267  06410000
*                           RELFAC=CARD(TCOL1:COL-1);/* SAVE FACTOR   * 06420000
         LH    @1,@D4                                             0269  06430000
         AR    @1,@9                                              0269  06440000
         LH    @3,TCOL1                                           0269  06450000
         SR    @1,@3                                              0269  06460000
         LA    @E,BCARD(@3)                                       0269  06470000
         LA    @A,RELFAC                                          0269  06480000
         MVI   0(@A),C' '                                         0269  06490000
         MVC   1(005,@A),0(@A)                                    0269  06500000
         EX    @1,@MVC                                            0269  06510000
*                           LOCLEN=COL-TCOL1;/* SAVE LENGTH OF          06520000
*                                         RELOCATION FACTOR           * 06530000
         LR    @F,@9                                              0270  06540000
         SH    @F,TCOL1                                           0270  06550000
         ST    @F,LOCLEN                                          0270  06560000
*                           GOTO VALID; /* CONTINUE PROCESSING CARD   * 06570000
*                           END;                                        06580000
*                      ELSE;            /* NULL ELSE                  * 06590000
*              ELSE GOTO INCREM;        /* BUMP COL POINTER           * 06600000
*           /* CHECK IF HEX CHARACTERS A TO F WERE CODED AND CONVERT  * 06610000
* VALID:                                                                06620000
*           DO A=1 TO LOCLEN;                                           06630000
@9DC     EQU   *                                                  0275  06640000
VALID    LA    @F,1                                               0275  06650000
         BC    15,@DO9DA                                          0275  06660000
*              /* CHECK IF IT IS A VALID HEX CHARACTER                * 06670000
*              DO B=1 TO 16;                                            06680000
@DO9DB   LA    @F,1                                               0276  06690000
         ST    @F,B                                               0276  06700000
*                 /* VERIFY IF A VALID HEX CHARACTER ADDRESS IS GIVEN * 06710000
*                 IF RELFAC(A)=HEXCHAR(B)/* IS IT A VALID HEX CHAR    * 06720000
*                    THEN GOTO CONVERT; /* CONVERT CHAR TO HEX        * 06730000
@DO9D7   L     @1,B                                               0277  06740000
         LA    @E,HEXCHAR-1(@1)                                   0277  06750000
         L     @3,A                                               0277  06760000
         LA    @A,RELFAC-1(@3)                                    0277  06770000
         CLC   0(1,@A),0(@E)                                      0277  06780000
         BC    08,CONVERT                                         0278  06790000
*                 END;                                                  06800000
*              GOTO ABA2;               /* INVALID OPERAND            * 06810000
         L     @F,B                                               0279  06820000
         AH    @F,@D7                                             0279  06830000
@DO9D6   ST    @F,B                                               0279  06840000
         CH    @F,@D13                                            0279  06850000
         BC    12,@DO9D7                                          0279  06860000
         BC    15,ABA2                                            0280  06870000
*              /* CHECK FOR VALID A TO F HEX CHARACTER                * 06880000
* CONVERT:                                                              06890000
*              IF RELFAC(A) < 'C7'X     /* IS IT BETWEEN F            * 06900000
*                 & RELFAC(A) > 'C0'X   /* AND A ONLY                 * 06910000
*                 THEN DO;              /* PROCESS FOR CONVERSION     * 06920000
CONVERT  L     @1,A                                               0281  06930000
         LA    @A,RELFAC-1(@1)                                    0281  06940000
         CLI   0(@A),X'C7'                                        0281  06950000
         BC    10,@9D3                                            0281  06960000
         CLI   0(@A),X'C0'                                        0281  06970000
         BC    12,@9D2                                            0281  06980000
*                      RELOCX=0;        /* ZERO OUT PARM FIELD        * 06990000
         SR    @F,@F                                              0283  07000000
         ST    @F,PARMLIST+60                                     0283  07010000
*                      RELOCX=RELFAC(A);/* STORE CHAR TO CONVERT      * 07020000
         IC    @F,RELFAC-1(@1)                                    0284  07030000
         ST    @F,PARMLIST+60                                     0284  07040000
*                      RELOCX=RELOCX+'39'X;/* ADD CONVERSION FACTOR   * 07050000
         LA    @F,X'39'                                           0285  07060000
         A     @F,PARMLIST+60                                     0285  07070000
         ST    @F,PARMLIST+60                                     0285  07080000
*                      RELFAC(A)=RELCHAR(4);/* SAVE CONVERTED CHAR    * 07090000
         MVC   0(1,@A),RELCHAR+3                                  0286  07100000
*                      END;                                             07110000
*              END;                                                     07120000
@9D2     EQU   *                                                  0288  07130000
*           WORKAREA=WORKAREA && WORKAREA;/* ZERO OUT WORKAREA        * 07140000
@9D3     L     @F,A                                               0288  07150000
         AH    @F,@D7                                             0288  07160000
@DO9DA   ST    @F,A                                               0288  07170000
         C     @F,LOCLEN                                          0288  07180000
         BC    12,@DO9DB                                          0288  07190000
         XC    WORKAREA(8),WORKAREA                               0289  07200000
*           WORKAREA(9-LOCLEN:8)=RELFAC(1:LOCLEN);/* SET UP FOR PACK  * 07210000
         LA    @E,RELFAC                                          0290  07220000
         LA    @1,8                                               0290  07230000
         L     @3,LOCLEN                                          0290  07240000
         LCR   @3,@3                                              0290  07250000
         AH    @3,@D5                                             0290  07260000
         SR    @1,@3                                              0290  07270000
         LA    @A,WORKAREA-1(@3)                                  0290  07280000
         EX    @1,@MVC                                            0290  07290000
*           GENERATE;                                                   07300000
         PACK  A(4),WORKAREA(8)        PACK RELOC FACTOR                07310000
         L     R4,A                    PUT PACKED FACTOR IN REG         07320000
         SRL   R4,4                    DROP SIGN                        07330000
         ST    R4,RELOCX               STORE IN PARMLIST                07340000
         DS    0H                                                       07350000
*           GOTO ACG4;                  /* CHECK IF MORE OPTIONS      * 07360000
         BC    15,ACG4                                            0292  07370000
*           END;                                                        07380000
*   /* CHECK TO SEE IF OPERAND IS DDN                                 * 07390000
*   IF CARD(COL:COL+3)='DDN='           /* IS IT DDN OPERAND?         * 07400000
*      THEN DO;                         /* PROCESS DDN OPERAND        * 07410000
@9E2     LR    @1,@9                                              0294  07420000
         LA    @A,BCARD(@1)                                       0294  07430000
         CLC   0(4,@A),@C70                                       0294  07440000
         BC    07,@9D1                                            0294  07450000
*           COL=COL+4;                  /* BUMP POINTER TO BEGINNING    07460000
*                                         OF OPERAND                  * 07470000
         AH    @9,@D14                                            0296  07480000
*           DDN='1'B;                   /* INDICATE DDN IN OPTNMAP    * 07490000
         OI    OPTNMAP,B'00000100'                                0297  07500000
*           TCOL1=COL;                  /* SET UP LEFT BOUNDARY OF DDN* 07510000
         STH   @9,TCOL1                                           0298  07520000
* ABF4:                                                                 07530000
*           COL=COL+1;                  /* BUMP POINTER TO FIND END     07540000
*                                         OF DDN                      * 07550000
ABF4     AH    @9,@D7                                             0299  07560000
*           /* CHECK IF COLUMN IS PAST COLUMN 71                      * 07570000
*           IF COL > 71                 /* IS IT PAST COLUMN 71?      * 07580000
*              THEN GOTO ABA2;          /* SET UP ERROR MESSAGE       * 07590000
         CH    @9,@D9                                             0300  07600000
         BC    02,ABA2                                            0301  07610000
*           /* CHECK TO SEE IF DDNAME GIVEN IS VALID                  * 07620000
*           IF CARD(COL)=','            /* IS THERE ANOTHER OPERAND OR* 07630000
*              |  CARD(COL)=' '         /* IS IT END OF OPERAND       * 07640000
*              /* CHECK FOR VALID SIZE OF DDNAME                      * 07650000
*              THEN IF COL-TCOL1<9      /* IS DDNAME LESS THAN 9 CHARS* 07660000
         LR    @1,@9                                              0302  07670000
         LA    @A,BCARD(@1)                                       0302  07680000
         CLI   0(@A),C','                                         0302  07690000
         BC    08,@9D0                                            0302  07700000
         CLI   0(@A),C' '                                         0302  07710000
         BC    07,@9CF                                            0302  07720000
*                      &  COL-TCOL1>0   /* IS DDNAME > ZERO?          * 07730000
*                      THEN DO;         /* PROCESS DDNAME             * 07740000
@9D0     LR    @F,@9                                              0303  07750000
         SH    @F,TCOL1                                           0303  07760000
         LA    @1,9                                               0303  07770000
         CR    @F,@1                                              0303  07780000
         BC    10,@9CE                                            0303  07790000
         LR    @F,@9                                              0303  07800000
         SH    @F,TCOL1                                           0303  07810000
         CH    @F,@D12                                            0303  07820000
         BC    12,@9CD                                            0303  07830000
*                           DDNAME=CARD(TCOL1:COL-1);/* SAVE DDNAME   * 07840000
         LH    @1,@D4                                             0305  07850000
         AR    @1,@9                                              0305  07860000
         LH    @3,TCOL1                                           0305  07870000
         SR    @1,@3                                              0305  07880000
         LA    @E,BCARD(@3)                                       0305  07890000
         LA    @A,PARMLIST+44                                     0305  07900000
         MVI   0(@A),C' '                                         0305  07910000
         MVC   1(007,@A),0(@A)                                    0305  07920000
         EX    @1,@MVC                                            0305  07930000
*                           GOTO ACG4;  /* CONTINUE TO PROCESS CARD   * 07940000
         BC    15,ACG4                                            0306  07950000
*                           END;                                        07960000
*                      ELSE DO;         /* CHECK IF VALID CARD        * 07970000
@9CD     EQU   *                                                  0308  07980000
*                           /* CHECK IF COLUMN POINTER > 1            * 07990000
*                           IF COL-TCOL1<1/* IS COL > 1               * 08000000
*                              THEN GOTO ABA2;/*SET UP ERROR MESSAGE  * 08010000
@9CE     LR    @F,@9                                              0309  08020000
         SH    @F,TCOL1                                           0309  08030000
         CH    @F,@D7                                             0309  08040000
         BC    04,ABA2                                            0310  08050000
*                           COL=COL-9;  /* RESET COLUMN POINTER       * 08060000
         SH    @9,@D5                                             0311  08070000
*                           GOTO ABA2;  /* SET UP ERROR MESSAGE       * 08080000
         BC    15,ABA2                                            0312  08090000
*                           END;                                        08100000
*              ELSE GOTO ABF4;          /* RECHECK CARD               * 08110000
*           END;                                                        08120000
@9CB     EQU   *                                                  0315  08130000
*   /* CHECK OPERAND TO SEE IF IT IS THE OUTPUT OPERAND               * 08140000
*   IF CARD(COL:COL+6)='OUTPUT='        /* OPERAND SPECIFY OUTPUT?    * 08150000
*      THEN DO;                         /* PROCESS OUTPUT OPERAND     * 08160000
@9D1     LR    @1,@9                                              0316  08170000
         LA    @A,BCARD(@1)                                       0316  08180000
         CLC   0(7,@A),@C71                                       0316  08190000
         BC    07,@9CA                                            0316  08200000
*           /* CHECK FOR INVALID OPERAND SPECIFIED FOR OPERATION      * 08210000
*           IF LISTOBJ='1'B             /* IS IT LISTOBJ OPERATION    * 08220000
*              THEN GOTO ABA8;          /* SET UP ERROR MESSAGE       * 08230000
         TM    OPTNMAP,B'01000000'                                0318  08240000
         BC    01,ABA8                                            0319  08250000
*           COL=COL+7;                  /* BUMP COLUMN POINTER        * 08260000
         AH    @9,@D11                                            0320  08270000
*           /* CHECK FOR A LISTIDR OPERATION                          * 08280000
*           IF LISTIDR='1'B             /* IS IT LISTIDR OPERATION    * 08290000
*              THEN GOTO ABA7;          /* PROCESS OUTPUT OPTIONS     * 08300000
         TM    OPTNMAP,B'00100000'                                0321  08310000
         BC    01,ABA7                                            0322  08320000
*           /********************************************************** 08330000
*           /* THE OUTPUT OPTIONS FOR A LISTLOAD OPERATION CAN BE     * 08340000
*           /* MODLIST, XREF OR BOTH WHERE BOTH IS THE DEFAULT IF     * 08350000
*           /* NO OUTPUT OPERAND IS SPECIFIED. XREF AND MODLIST ARE   * 08360000
*           /* INDICATED AS ON IF THE XREF AND MODLIST BITS IN        * 08370000
*           /* OPTNMAP ARE SET TO ZERO. IF EITHER ONE IS SET TO ONE   * 08380000
*           /* IT SIGNIFIES BYPASS PROCESSING THIS OPTION.            * 08390000
*           /********************************************************** 08400000
*           /* CHECK IF OUTPUT OPTION IS MODLIST FOR LISTLOAD         * 08410000
*           IF CARD(COL:COL+6)='MODLIST'/* IS IT MODLIST OPTION?      * 08420000
*              THEN DO;                 /* PROCESS MODLIST OPTION     * 08430000
         LR    @1,@9                                              0323  08440000
         LA    @A,BCARD(@1)                                       0323  08450000
         CLC   0(7,@A),@C72                                       0323  08460000
         BC    07,@9C9                                            0323  08470000
*                   COL=COL+7;          /* BUMP COLUMN POINTER        * 08480000
         AH    @9,@D11                                            0325  08490000
*                   XREF='1'B;          /* TURN OFF XREF OUTPUT       * 08500000
         OI    OPTNMAP+1,B'10000000'                              0326  08510000
*                   GOTO ACG4;          /* IS NEXT COLUMN A BLANK?    * 08520000
         BC    15,ACG4                                            0327  08530000
*                   END;                                                08540000
*           /* CHECK IF OUTPUT OPTION IS XREF FOR LISTLOAD OPERATION  * 08550000
*           IF CARD(COL:COL+3)='XREF'   /* IS IT XREF OPTION?         * 08560000
*              THEN DO;                 /* XREF OPTION                * 08570000
@9C9     LR    @1,@9                                              0329  08580000
         LA    @A,BCARD(@1)                                       0329  08590000
         CLC   0(4,@A),@C73                                       0329  08600000
         BC    07,@9C8                                            0329  08610000
*                   COL=COL+4;          /* BUMP COLUMN POINTER        * 08620000
         AH    @9,@D14                                            0331  08630000
*                   MODLIST='1'B;       /* TURN OFF MODLIST OPTION    * 08640000
         OI    OPTNMAP,B'00000001'                                0332  08650000
*                   GOTO ACG4;          /* KEEP PROCESSING CARD       * 08660000
         BC    15,ACG4                                            0333  08670000
*                   END;                                                08680000
*           /* CHECK IF OUTPUT OPTION IS BOTH XREF AND MODLIST        * 08690000
*           IF CARD(COL:COL+3)='BOTH'   /* IS IT BOTH OPTION          * 08700000
*              THEN DO;                 /* PROCESS BOTH OPTION        * 08710000
@9C8     LR    @1,@9                                              0335  08720000
         LA    @A,BCARD(@1)                                       0335  08730000
         CLC   0(4,@A),@C74                                       0335  08740000
         BC    07,@9C7                                            0335  08750000
*                   COL=COL+4;          /* BUMP COLUMN POINTER        * 08760000
         AH    @9,@D14                                            0337  08770000
*                   GOTO ACG4;          /* KEEP PROCESSING CARD       * 08780000
         BC    15,ACG4                                            0338  08790000
*                   END;                                                08800000
* ABA6:                                                                 08810000
*           ECARD(COL+1)='$';           /* MARK ERROR WITH DOLLAR SIGN* 08820000
@9C7     EQU   *                                                  0340  08830000
ABA6     LA    @1,1                                               0340  08840000
         AR    @1,@9                                              0340  08850000
         LA    @A,ECARD-1(@1)                                     0340  08860000
         MVI   0(@A),C'$'                                         0340  08870000
*           GEN  (PUT   OUTDCB,ECARD);  /* PRINT ERROR MARKER         * 08880000
         PUT   OUTDCB,ECARD                                             08890000
         DS    0H                                                       08900000
*           ECARD(COL+1)=' ';           /* BLANK OUT ERROR MARKER     * 08910000
         LA    @1,1                                               0342  08920000
         AR    @1,@9                                              0342  08930000
         LA    @A,ECARD-1(@1)                                     0342  08940000
         MVI   0(@A),C' '                                         0342  08950000
*           ERRORS=ERRORS|'00000040'X;  /* WRITE: IMPROPER OPTION     * 08960000
         OC    PARMLIST+32(4),@X76                                0343  08970000
*           GOTO ABA9;                  /* BUMP COLUMN POINTER        * 08980000
         BC    15,ABA9                                            0344  08990000
* ABA7:                                                                 09000000
*           /* CHECK IF OUTPUT OPTION IS IDENT FOR LISTIDR            * 09010000
*           IF CARD(COL:COL+4)='IDENT'  /* IDENT OPTION?              * 09020000
*              THEN DO;                 /* PROCESS IDENT OPTION       * 09030000
ABA7     LR    @1,@9                                              0345  09040000
         LA    @A,BCARD(@1)                                       0345  09050000
         CLC   0(5,@A),@C77                                       0345  09060000
         BC    07,@9C6                                            0345  09070000
*                   COL=COL+5;          /* BUMP COLUMN POINTER        * 09080000
         AH    @9,@D15                                            0347  09090000
*                   IDENT='1'B;         /* TURN ON IDENT OPTION       * 09100000
         OI    OPTNMAP+1,B'01000000'                              0348  09110000
*                   GOTO ACG4;          /* KEEP PROCESSING CARD       * 09120000
         BC    15,ACG4                                            0349  09130000
*                   END;                                                09140000
*           /* CHECK IF OUTPUT OPTION IS ALL FOR LISTIDR              * 09150000
*           IF CARD(COL:COL+2)='ALL'    /* ALL OPTION?                * 09160000
*              THEN DO;                 /* PROCESS ALL OPTION         * 09170000
@9C6     LR    @1,@9                                              0351  09180000
         LA    @A,BCARD(@1)                                       0351  09190000
         CLC   0(3,@A),@C78                                       0351  09200000
         BC    07,@9C5                                            0351  09210000
*                   COL=COL+3;          /* BUMP COLUMN POINTER        * 09220000
         AH    @9,@D16                                            0353  09230000
*                   GOTO ACG4;          /* KEEP PROCESSING CARD       * 09240000
         BC    15,ACG4                                            0354  09250000
*                   END;                                                09260000
*           GOTO ABA6;                  /* INDICATE ERROR IN OPTION   * 09270000
*           END;                                                        09280000
* ABA2:                                                                 09290000
*   ECARD(COL+1)='$';                   /* MARK ERROR                 * 09300000
@9CA     EQU   *                                                  0358  09310000
ABA2     LA    @1,1                                               0358  09320000
         AR    @1,@9                                              0358  09330000
         LA    @A,ECARD-1(@1)                                     0358  09340000
         MVI   0(@A),C'$'                                         0358  09350000
*   GEN (PUT   OUTDCB,ECARD);           /* PRINT ERROR MARKER         * 09360000
         PUT   OUTDCB,ECARD                                             09370000
         DS    0H                                                       09380000
*   ECARD(COL+1)=' ';                   /* BLANK OUT ERROR MARKER     * 09390000
         LA    @1,1                                               0360  09400000
         AR    @1,@9                                              0360  09410000
         LA    @A,ECARD-1(@1)                                     0360  09420000
         MVI   0(@A),C' '                                         0360  09430000
*   ERRORS=ERRORS|'00000400'X;          /* SET UP INVALID OPTION MSG  * 09440000
         OC    PARMLIST+32(4),@X79                                0361  09450000
*   R1=ADDR(PARMLIST);                  /* SET UP PARAMETER LIST      * 09460000
         LA    @1,PARMLIST                                        0362  09470000
*   CALL HMBLKERR;                      /* PROCESS ERROR MESSAGE      * 09480000
         L     @F,@V2              ADDRESS OF HMBLKERR            0363  09490000
         BALR  @E,@F                                              0363  09500000
*   GOTO AAB1;                          /* PROCESS ANOTHER CARD       * 09510000
         BC    15,AAB1                                            0364  09520000
* ABA8:                                                                 09530000
*   ECARD(COL+1)='$';                   /* MARK ERROR COLUMN          * 09540000
ABA8     LA    @1,1                                               0365  09550000
         AR    @1,@9                                              0365  09560000
         LA    @A,ECARD-1(@1)                                     0365  09570000
         MVI   0(@A),C'$'                                         0365  09580000
*   GEN (PUT   OUTDCB,ECARD);           /* PRINT ERROR MARKER         * 09590000
         PUT   OUTDCB,ECARD                                             09600000
         DS    0H                                                       09610000
*   ECARD(COL+1)=' ';                   /* BLANK OUT ERROR MARKER     * 09620000
         LA    @1,1                                               0367  09630000
         AR    @1,@9                                              0367  09640000
         LA    @A,ECARD-1(@1)                                     0367  09650000
         MVI   0(@A),C' '                                         0367  09660000
*   ERRORS=ERRORS|'00000080'X;          /* WRITE: IMPROPER OPERAND    * 09670000
         OC    PARMLIST+32(4),@X80                                0368  09680000
* ABA9:                                                                 09690000
*   COL=COL+1;                          /* BUMP COLUMN POINTER        * 09700000
ABA9     AH    @9,@D7                                             0369  09710000
*   /* CHECK IF COLUMN POINTER IS PAST COLUMN 71                      * 09720000
*   IF COL>71                           /* IS COLUMN PAST 71?         * 09730000
*      THEN GOTO ABA2;                  /* SET UP ERROR MESSAGE       * 09740000
         CH    @9,@D9                                             0370  09750000
         BC    02,ABA2                                            0371  09760000
*   /* CHECK IF COLUMN POINTER IS POINTING TO A COMMA OR A BLANK      * 09770000
*   IF CARD(COL)=','                    /* IS COL POINTING TO A COMMA?* 09780000
*      | CARD(COL)=' '                  /* OR A BLANK?                * 09790000
*      THEN GOTO ACG4;                  /* PROCESS CARD               * 09800000
         LR    @1,@9                                              0372  09810000
         LA    @A,BCARD(@1)                                       0372  09820000
         CLI   0(@A),C','                                         0372  09830000
         BC    08,@9C4                                            0372  09840000
         CLI   0(@A),C' '                                         0372  09850000
         BC    08,ACG4                                            0373  09860000
*      ELSE GOTO ABA9;                  /* BUMP COLUMN POINTER        * 09870000
         BC    15,ABA9                                            0374  09880000
* ACB1:                                                                 09890000
*   COL=COL+1;                          /* BUMP COLUMN POINTER        * 09900000
ACB1     AH    @9,@D7                                             0375  09910000
*   IF COL>70                           /* COLUMN PAST 71?            * 09920000
*      THEN DO;                         /* YES THEN DO                * 09930000
         CH    @9,@D17                                            0376  09940000
         BC    12,@9C2                                            0376  09950000
* ACC2:                                                                 09960000
*           ERRORS=ERRORS|'00000200'X;  /* SET UP ERROR MESSAGE       * 09970000
ACC2     OC    PARMLIST+32(4),@X81                                0378  09980000
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS * 09990000
         LA    @1,PARMLIST                                        0379  10000000
*           CALL HMBLKERR;              /* PROCESS ANY ERROR MSGS     * 10010000
         L     @F,@V2              ADDRESS OF HMBLKERR            0380  10020000
         BALR  @E,@F                                              0380  10030000
*           GOTO AAB1;                  /* PROCESS ANOTHER CARD       * 10040000
         BC    15,AAB1                                            0381  10050000
*           END;                                                        10060000
*   /* CHECK FOR A DOUBLE QUOTE IN TITLE TO INDICATE A CONTRACTION    * 10070000
*   IF CARD(COL:COL+1)=''''''           /* IS IT DOUBLE QUOTE?        * 10080000
*      THEN DO;                         /* PROCESS DOUBLE QUOTE       * 10090000
@9C2     LR    @1,@9                                              0383  10100000
         LA    @A,BCARD(@1)                                       0383  10110000
         CLC   0(2,@A),@C82                                       0383  10120000
         BC    07,@9C1                                            0383  10130000
*           CARD(COL:71)=CARD(COL+1:71);/* SHIFT CARD LEFT ONE COLUMN * 10140000
         LA    @3,1                                               0385  10150000
         AR    @3,@9                                              0385  10160000
         LA    @E,BCARD(@3)                                       0385  10170000
         LA    @4,71                                              0385  10180000
         SR    @4,@1                                              0385  10190000
         EX    @4,@MVC                                            0385  10200000
*           COL=COL+2;                  /* BUMP COLUMN POINTER        * 10210000
         AH    @9,@D18                                            0386  10220000
*           END;                                                        10230000
*   /* CHECK FOR A SINGLE QUOTE TO INDICATE END OF TITLE              * 10240000
*   IF CARD(COL)=''''                   /* IS IT SINGLE QUOTE?        * 10250000
*      THEN TCOL2=COL-1;                /* SAVE TITLE RIGHT BOUNDARY  * 10260000
@9C1     LR    @1,@9                                              0388  10270000
         LA    @A,BCARD(@1)                                       0388  10280000
         CLI   0(@A),C''''                                        0388  10290000
         BC    07,@9C0                                            0388  10300000
         LR    @F,@9                                              0389  10310000
         BCTR  @F,0                                               0389  10320000
         STH   @F,TCOL2                                           0389  10330000
*      ELSE GOTO ACB1;                  /* POINT TO NEXT COLUMN       * 10340000
*   /* CHECK FOR LEFT PAREND INDICATING USER OUTPUT POSITION GIVEN    * 10350000
*   IF LPARENÂ¬='1'B                     /* WAS LEFT PAREND FOUND?     * 10360000
*      THEN DO;                         /* PROCESS NO LEFT PAREND     * 10370000
@9BF     TM    LPAREN,B'10000000'                                 0391  10380000
         BC    01,@9BE                                            0391  10390000
* ACG2:                                                                 10400000
*           TITLECOL=1;                 /* STARTING TITLE OUTPUT COL  * 10410000
ACG2     LA    @F,1                                               0393  10420000
         STH   @F,TITLECOL                                        0393  10430000
* ACH2:                                                                 10440000
*           IF TCOL2-TCOL1>39           /* IS TITLE BIGGER THAN 40    * 10450000
*              THEN TCOL2=TCOL1+39;     /* TRUNCATE TITLE TO 40 CHARS.* 10460000
ACH2     LH    @F,TCOL2                                           0394  10470000
         SH    @F,TCOL1                                           0394  10480000
         CH    @F,@D19                                            0394  10490000
         BC    12,@9BD                                            0394  10500000
         LA    @F,39                                              0395  10510000
         AH    @F,TCOL1                                           0395  10520000
         STH   @F,TCOL2                                           0395  10530000
*           /* MOVE TITLE INTO TITLE BUFFER FOR PRINTING              * 10540000
*           TTLINE(TITLECOL:TITLECOL+39)=CARD(TCOL1:TCOL2);             10550000
@9BD     LH    @1,TCOL2                                           0396  10560000
         LH    @3,TCOL1                                           0396  10570000
         SR    @1,@3                                              0396  10580000
         LA    @E,BCARD(@3)                                       0396  10590000
         LH    @4,TITLECOL                                        0396  10600000
         LA    @A,BLINE(@4)                                       0396  10610000
         MVI   0(@A),C' '                                         0396  10620000
         MVC   1(039,@A),0(@A)                                    0396  10630000
         EX    @1,@MVC                                            0396  10640000
* ACF4:                                                                 10650000
*           COL=COL+1;                  /* BUMP COLUMN POINTER        * 10660000
ACF4     AH    @9,@D7                                             0397  10670000
* ACG4:                                                                 10680000
*           /* CHECK IF ALL OPTIONS SPECIFIED HAVE BEEN ENCOUNTERED   * 10690000
*           IF CARD(COL)=' '            /* IS COLUMN BLANK?           * 10700000
*              THEN GOTO PROCESS;       /* PROCESS OUTPUT OPTIONS     * 10710000
ACG4     LR    @1,@9                                              0398  10720000
         LA    @A,BCARD(@1)                                       0398  10730000
         CLI   0(@A),C' '                                         0398  10740000
         BC    08,PROCESS                                         0399  10750000
*           /* CHECK TO SEE IF CONTINUATION WAS SPECIFIED             * 10760000
*           IF CARD(COL:COL+1)=', '     /* IS IT CONTINUATION?        * 10770000
*              THEN DO;                 /* PROCESS CONTINUATION       * 10780000
         CLC   0(2,@A),@C83                                       0400  10790000
         BC    07,@9BC                                            0400  10800000
*                   CONTINUE='1'B;      /* TURN ON CONTINUATION BIT   * 10810000
         OI    CONTINUE,B'10000000'                               0402  10820000
*                   GOTO AAC1;          /* READ ANOTHER CARD          * 10830000
         BC    15,AAC1                                            0403  10840000
*                   END;                                                10850000
*           /* CHECK IF CARD COLUMN IS A COMMA                        * 10860000
*           IF CARD(COL)=','            /* IS COL A COMMA?            * 10870000
*              /* CHECK IF COLUMN IS EQUAL TO 71                      * 10880000
*              THEN IF COL=71           /* IS COL EQUAL TO 71?        * 10890000
@9BC     LR    @1,@9                                              0405  10900000
         LA    @A,BCARD(@1)                                       0405  10910000
         CLI   0(@A),C','                                         0405  10920000
         BC    07,@9BB                                            0405  10930000
*                      THEN DO;         /* PROCESS COL=71             * 10940000
         CH    @9,@D9                                             0406  10950000
         BC    07,@9BA                                            0406  10960000
*                           CONTINUE='1'B;/* TURN ON CONTINUATION     * 10970000
         OI    CONTINUE,B'10000000'                               0408  10980000
*                           GOTO AAC1;  /* READ ANOTHER CARD          * 10990000
         BC    15,AAC1                                            0409  11000000
*                           END;                                        11010000
*                      ELSE DO;         /* COL NOT EQUAL TO 71        * 11020000
*                           COL=COL+1;  /* BUMP COLUMN POINTER        * 11030000
@9BA     AH    @9,@D7                                             0412  11040000
*                           GOTO ABC1;  /* FIND NEXT OPTION           * 11050000
         BC    15,ABC1                                            0413  11060000
*                           END;                                        11070000
*              ELSE GOTO ABA2;          /* MARK COLUMN IN ERROR       * 11080000
*           END;                                                        11090000
@9B8     EQU   *                                                  0416  11100000
*   COL=COL+1;                          /* BUMP COLUMN POINTER        * 11110000
@9BE     AH    @9,@D7                                             0417  11120000
*   /* CHECK IF COLUMN POINTER IS POINTING TO A COMMA                 * 11130000
*   IF CARD(COL)=','                    /* IS COL A COMMA?            * 11140000
*      THEN GOTO ADB1;                  /* BUMP COLUMN POINTER        * 11150000
         LR    @1,@9                                              0418  11160000
         LA    @A,BCARD(@1)                                       0418  11170000
         CLI   0(@A),C','                                         0418  11180000
         BC    08,ADB1                                            0419  11190000
*   /* CHECK IF COLUMN POINTER IS POINTING TO A RIGHT PAREND          * 11200000
*   IF CARD(COL)=')'                    /* IS COL A RIGHT PAREND      * 11210000
*      THEN GOTO ACG2;                  /* TAKE DEFAULT OUTPUT PLACE  * 11220000
         CLI   0(@A),C')'                                         0420  11230000
         BC    08,ACG2                                            0421  11240000
*      ELSE GOTO ABA2;                  /* SET UP ERROR MARKER        * 11250000
         BC    15,ABA2                                            0422  11260000
* ADB1:                                                                 11270000
*   COL=COL+1;                          /* BUMP COLUMN POINTER        * 11280000
ADB1     AH    @9,@D7                                             0423  11290000
*   TITLECOL=0;                         /* ZERO OUT TITLE OUTPUT ADDR * 11300000
         SR    @F,@F                                              0424  11310000
         STH   @F,TITLECOL                                        0424  11320000
*   /* CHECK FOR TWO POSITION TITLE OUTPUT ADDRESS PLUS RIGHT PAREND  * 11330000
*   IF CARD(COL+3)=')'                  /* IS COL+3 EQUAL RIGHT PAREND* 11340000
*      THEN GOTO ADC2;                  /* PROCESS TITLE OUTPUT ADDR  * 11350000
         LA    @1,3                                               0425  11360000
         AR    @1,@9                                              0425  11370000
         LA    @A,BCARD(@1)                                       0425  11380000
         CLI   0(@A),C')'                                         0425  11390000
         BC    08,ADC2                                            0426  11400000
*   /* CHECK FOR ONE POSITION TITLE OUTPUT ADDRESS PLUS RIGHT PAREND  * 11410000
*   IF CARD(COL+2)=')'                  /* IS COL+2 EQUAL RIGHT PAREND* 11420000
*      THEN GOTO ADD2;                  /* PROCESS TITLE OUTPUT ADDR  * 11430000
         LA    @3,2                                               0427  11440000
         AR    @3,@9                                              0427  11450000
         LA    @A,BCARD(@3)                                       0427  11460000
         CLI   0(@A),C')'                                         0427  11470000
         BC    08,ADD2                                            0428  11480000
*   /* CHECK FOR RIGHT PAREND ONLY                                    * 11490000
*   IF CARD(COL+1)=')'                  /* IS COL+1 EQUAL RIGHT PAREND* 11500000
*      THEN GOTO ADE2;                  /* PROCESS TITLE OUTPUT ADDR  * 11510000
         LA    @4,1                                               0429  11520000
         AR    @4,@9                                              0429  11530000
         LA    @A,BCARD(@4)                                       0429  11540000
         CLI   0(@A),C')'                                         0429  11550000
         BC    08,ADE2                                            0430  11560000
*      ELSE GOTO ACC2;                  /* SET UP ERROR MESSAGE       * 11570000
         BC    15,ACC2                                            0431  11580000
* ADC2:                                                                 11590000
*   TEMP=CARD(COL);                     /* SAVE POINTER TO QUOTE      * 11600000
ADC2     LR    @1,@9                                              0432  11610000
         SR    @F,@F                                              0432  11620000
         IC    @F,BCARD(@1)                                       0432  11630000
         STH   @F,TEMP                                            0432  11640000
*   TITLECOL=100*(TEMP-240);            /* CALCULATE OUTPUT COLUMN    * 11650000
         SH    @F,@D20                                            0433  11660000
         MH    @F,@D21                                            0433  11670000
         STH   @F,TITLECOL                                        0433  11680000
*   COL=COL+1;                          /* BUMP COLUMN POINTER        * 11690000
         AH    @9,@D7                                             0434  11700000
* ADD2:                                                                 11710000
*   TEMP=CARD(COL);                     /* SAVE POINTER TO QUOTE      * 11720000
ADD2     LR    @1,@9                                              0435  11730000
         SR    @F,@F                                              0435  11740000
         IC    @F,BCARD(@1)                                       0435  11750000
         STH   @F,TEMP                                            0435  11760000
*   TITLECOL=TITLECOL+10*(TEMP-240);    /* CALCULATE OUTPUT COLUMN    * 11770000
         SH    @F,@D20                                            0436  11780000
         MH    @F,@D22                                            0436  11790000
         AH    @F,TITLECOL                                        0436  11800000
         STH   @F,TITLECOL                                        0436  11810000
*   COL=COL+1;                          /* BUMP COLUMN POINTER        * 11820000
         AH    @9,@D7                                             0437  11830000
* ADE2:                                                                 11840000
*   TEMP=CARD(COL);                     /* SAVE POINTER TO QUOTE      * 11850000
ADE2     LR    @1,@9                                              0438  11860000
         SR    @F,@F                                              0438  11870000
         IC    @F,BCARD(@1)                                       0438  11880000
         STH   @F,TEMP                                            0438  11890000
*   TITLECOL=TITLECOL+TEMP-240;         /* CALCULATE OUTPUT COLUMN    * 11900000
         LH    @F,@D23                                            0439  11910000
         AH    @F,TEMP                                            0439  11920000
         AH    @F,TITLECOL                                        0439  11930000
         STH   @F,TITLECOL                                        0439  11940000
*   COL=COL+1;                          /* BUMP COLUMN POINTER        * 11950000
         AH    @9,@D7                                             0440  11960000
*   /* CHECK IF TITLE WILL FIT AT ADDRESS SPECIFIED                   * 11970000
*   IF TCOL2-TCOL1+TITLECOL>120         /* IS TITLE ADDR > 120        * 11980000
*      | TCOL2-TCOL1+TITLECOL < 1       /* IS TITLE ADDR < 1          * 11990000
*      THEN GOTO ACG2;                  /* START TITLE IN COLUMN 1    * 12000000
         SH    @F,TCOL1                                           0441  12010000
         AH    @F,TCOL2                                           0441  12020000
         LA    @1,120                                             0441  12030000
         CR    @F,@1                                              0441  12040000
         BC    02,@9B7                                            0441  12050000
         LH    @F,TITLECOL                                        0441  12060000
         SH    @F,TCOL1                                           0441  12070000
         AH    @F,TCOL2                                           0441  12080000
         CH    @F,@D7                                             0441  12090000
         BC    05,ACG2                                            0442  12100000
*      ELSE GOTO ACH2;                  /* IS TITLE > 40 CHARACTERS?  * 12110000
         BC    15,ACH2                                            0443  12120000
* AEB1:                                                                 12130000
*   /* CHECK TO SEE IF TOO MANY MEMBERS WERE SPECIFIED                * 12140000
*   IF LIMIT='1'B                       /* HAS MEMBER LIMIT BEEN HIT? * 12150000
*      THEN GOTO AEG2;                  /* FIND END OF MEMBER OPERAND * 12160000
AEB1     TM    OPTNMAP+1,B'00001000'                              0444  12170000
         BC    01,AEG2                                            0445  12180000
*   NUMBER=0;                           /* MEMBER OPERAND PROCESSER   * 12190000
         SR    @F,@F                                              0446  12200000
         STH   @F,NUMBER                                          0446  12210000
* AEC1:                                                                 12220000
*   TCOL1=COL;                          /* SAVE LEFT BOUNDARY         * 12230000
AEC1     STH   @9,TCOL1                                           0447  12240000
* AED1:                                                                 12250000
*   /* CHECK IF END OF MEMBER HAS BEEN FOUND                          * 12260000
*   IF CARD(COL)=','                    /* HAS END OF MEMBER BEEN HIT * 12270000
*      THEN DO;                         /* PROCESS MEMBER             * 12280000
AED1     LR    @1,@9                                              0448  12290000
         LA    @A,BCARD(@1)                                       0448  12300000
         CLI   0(@A),C','                                         0448  12310000
         BC    07,@9B5                                            0448  12320000
* AEE1:                                                                 12330000
*           TCOL2=COL-1;                /* SAVE RIGHT BOUNDARY        * 12340000
AEE1     LR    @F,@9                                              0450  12350000
         BCTR  @F,0                                               0450  12360000
         STH   @F,TCOL2                                           0450  12370000
* AEF1:                                                                 12380000
*           /* CHECK IF MEMBER IS GREATER THAN EIGHT CHARACTERS       * 12390000
*           IF TCOL2-TCOL1>7            /* IS MEMBER TOO LARGE?       * 12400000
*              THEN DO;                 /* PROCESS LARGE MEMBER       * 12410000
AEF1     LH    @F,TCOL2                                           0451  12420000
         SH    @F,TCOL1                                           0451  12430000
         CH    @F,@D11                                            0451  12440000
         BC    12,@9B4                                            0451  12450000
*                   COL=TCOL1;          /* POINT COL TO BEGINNING     * 12460000
         LH    @9,TCOL1                                           0453  12470000
*                   GOTO ABA2;          /* SET UP ERROR MARKER        * 12480000
         BC    15,ABA2                                            0454  12490000
*                   END;                                                12500000
*           /* CHECK TO SEE IF A MEMBER WAS SPECIFIED                 * 12510000
*           IF TCOL2-TCOL1<0            /* WAS MEMBER GIVEN?          * 12520000
*              THEN GOTO ABA2;          /* SET UP ERROR MARKER        * 12530000
@9B4     LH    @F,TCOL1                                           0456  12540000
         LCR   @F,@F                                              0456  12550000
         AH    @F,TCOL2                                           0456  12560000
         CH    @F,@D12                                            0456  12570000
         BC    04,ABA2                                            0457  12580000
*           NUMBER=NUMBER+1;            /* ADD 1 TO MEMBER COUNT      * 12590000
         LA    @F,1                                               0458  12600000
         AH    @F,NUMBER                                          0458  12610000
         STH   @F,NUMBER                                          0458  12620000
*           /* CHECK TO SEE IF LESS THAN 33 MEMBERS WERE PROCESSED    * 12630000
*           IF NUMBER<33                /* LESS THAN 33 MEMBERS?      * 12640000
*              THEN DO;                 /* PROCESS MEMBER             * 12650000
         LA    @F,33                                              0459  12660000
         CH    @F,NUMBER                                          0459  12670000
         BC    12,@9B3                                            0459  12680000
*                   LISTNAME(NUMBER)=CARD(TCOL1:TCOL2);/* SAVE MEMBER * 12690000
         LH    @1,TCOL2                                           0461  12700000
         LH    @3,TCOL1                                           0461  12710000
         SR    @1,@3                                              0461  12720000
         LA    @E,BCARD(@3)                                       0461  12730000
         LH    @4,NUMBER                                          0461  12740000
         MH    @4,@D24                                            0461  12750000
         LA    @A,BLDLIST-10(@4)                                  0461  12760000
         MVI   0(@A),C' '                                         0461  12770000
         MVC   1(007,@A),0(@A)                                    0461  12780000
         EX    @1,@MVC                                            0461  12790000
*                   /* CHECK IF ONLY ONE MEMBER SPECIFIED             * 12800000
*                   IF LASTMEM='1'B     /* WAS ONE MEMBER SPECIFIED?  * 12810000
*                      THEN GOTO ACG4;  /* CHECK IF MORE OPTIONS      * 12820000
         TM    OPTNMAP+1,B'00010000'                              0462  12830000
         BC    01,ACG4                                            0463  12840000
*                   /* CHECK TO SEE IF MEMBERS ARE CONTINUED          * 12850000
*                   IF CARD(COL+1)=' '  /* CHECK FOR CONTINUATION     * 12860000
*                      THEN DO;         /* PROCESS CONTINUATION       * 12870000
         LA    @1,1                                               0464  12880000
         AR    @1,@9                                              0464  12890000
         LA    @A,BCARD(@1)                                       0464  12900000
         CLI   0(@A),C' '                                         0464  12910000
         BC    07,@9B2                                            0464  12920000
* AEK3:                                                                 12930000
*                           MCONTIN='1'B;/* CONTINUATION OF MEMBERS   * 12940000
AEK3     OI    OPTNMAP+1,B'00000100'                              0466  12950000
*                           CONTINUE='1'B;/* CONTINUATION OF CARD     * 12960000
         OI    CONTINUE,B'10000000'                               0467  12970000
*                           GOTO AAC1;  /* READ ANOTHER CARD          * 12980000
         BC    15,AAC1                                            0468  12990000
*                           END;                                        13000000
*                   /* CHECK IF COMMA IS IN 71 INDICATING CONTINUATION* 13010000
*                   IF COL=71           /* COL EQUAL 71, CONTINUE     * 13020000
*                      THEN GOTO AEK3;  /* SET UP CONTINUATION BITS   * 13030000
@9B2     CH    @9,@D9                                             0470  13040000
         BC    08,AEK3                                            0471  13050000
*                      ELSE DO;         /* COL NO EQUAL TO 71         * 13060000
*                           COL=COL+1;  /* BUMP COLUMN POINTER        * 13070000
         AH    @9,@D7                                             0473  13080000
*                           GOTO AEC1;  /* SAVE LEFT BOUNDARY OF MEM  * 13090000
         BC    15,AEC1                                            0474  13100000
*                           END;                                        13110000
*                   END;                                                13120000
*              ELSE NUMBER=NUMBER-1;    /* SET NUMBER EQUAL TO 32     * 13130000
@9B3     LH    @F,NUMBER                                          0477  13140000
         BCTR  @F,0                                               0477  13150000
         STH   @F,NUMBER                                          0477  13160000
*           COL=TCOL1;                  /* COL EQUALS LEFT BOUNDARY   * 13170000
@9B1     LH    @9,TCOL1                                           0478  13180000
*           ECARD(COL+1)='$';           /* MARK ERROR COLUMN          * 13190000
         LA    @1,1                                               0479  13200000
         AR    @1,@9                                              0479  13210000
         LA    @A,ECARD-1(@1)                                     0479  13220000
         MVI   0(@A),C'$'                                         0479  13230000
*           GEN (PUT   OUTDCB,ECARD);   /* PRINT ERROR MARKER         * 13240000
         PUT   OUTDCB,ECARD                                             13250000
         DS    0H                                                       13260000
*           ECARD(COL+1)=' ';           /* BLANK OUT ERROR MARKER     * 13270000
         LA    @1,1                                               0481  13280000
         AR    @1,@9                                              0481  13290000
         LA    @A,ECARD-1(@1)                                     0481  13300000
         MVI   0(@A),C' '                                         0481  13310000
*           ERRORS=ERRORS|'00000100'X;  /* WRITE: NO. MEM NAMES > 32  * 13320000
         OC    PARMLIST+32(4),@X47                                0482  13330000
* AEG2:                                                                 13340000
*           /* CHECK FOR END OF MEMBER OPERAND                        * 13350000
*           IF CARD(COL)=')'            /* COL EQUAL RIGHT PAREND?    * 13360000
*              THEN GOTO ACF4;          /* BUMP COLUMN POINTER        * 13370000
AEG2     LR    @1,@9                                              0483  13380000
         LA    @A,BCARD(@1)                                       0483  13390000
         CLI   0(@A),C')'                                         0483  13400000
         BC    08,ACF4                                            0484  13410000
*           /* CHECK FOR CONTINUATION OF MEMBER OPERAND               * 13420000
*           IF CARD(COL:COL+1)=', '     /* CONTINUATION SPECIFIED?    * 13430000
*              THEN DO;                 /* PROCESS CONTINUATION       * 13440000
         CLC   0(2,@A),@C83                                       0485  13450000
         BC    07,@9B0                                            0485  13460000
* AEH3:                                                                 13470000
*                   LIMIT='1'B;         /* INDICATE MEMBER LIMIT      * 13480000
AEH3     OI    OPTNMAP+1,B'00001100'                              0487  13490000
*                   MCONTIN='1'B;       /* INDICATE MEMBER CONTINUE   * 13500000
*                   GOTO AAC1;          /* READ ANOTHER CARD          * 13510000
         BC    15,AAC1                                            0489  13520000
*                   END;                                                13530000
*           COL=COL+1;                  /* BUMP COLUMN POINTER        * 13540000
@9B0     AH    @9,@D7                                             0491  13550000
*           /* CHECK IF COLUMN POINTER IS PAST COLUMN 71              * 13560000
*           IF COLÂ¬>71                  /* IS COL LESS THAN 71?       * 13570000
*              THEN GOTO AEG2;          /* PROCESS NEXT COLUMN        * 13580000
         CH    @9,@D9                                             0492  13590000
         BC    12,AEG2                                            0493  13600000
*           /* CHECK IF COLUMN POINTER IS POINTING TO A COMMA         * 13610000
*           IF CARD(71)=','             /* IS COL A COMMA?            * 13620000
*              THEN GOTO AEH3;          /* SET UP MEMBER CONTINUATION * 13630000
         CLI   BCARD+71,C','                                      0494  13640000
         BC    08,AEH3                                            0495  13650000
*              ELSE GOTO ABA2;          /* SET UP ERROR MARKER        * 13660000
         BC    15,ABA2                                            0496  13670000
*           END;                                                        13680000
*   /* CHECK IF COLUMN POINTER IS POINTING TO A RIGHT PAREND          * 13690000
*   IF CARD(COL)=')'                    /* IS COL A RIGHT PAREND?     * 13700000
*      THEN DO;                         /* PROCESS RIGHT PAREND       * 13710000
@9B5     LR    @1,@9                                              0498  13720000
         LA    @A,BCARD(@1)                                       0498  13730000
         CLI   0(@A),C')'                                         0498  13740000
         BC    07,@9AF                                            0498  13750000
*           LASTMEM='1'B;               /* TURN ON LAST MEMBER BIT    * 13760000
         OI    OPTNMAP+1,B'00010000'                              0500  13770000
*           TCOL2=COL-1;                /* SET RIGHT BOUNDARY         * 13780000
         LR    @F,@9                                              0501  13790000
         BCTR  @F,0                                               0501  13800000
         STH   @F,TCOL2                                           0501  13810000
*           COL=COL+1;                  /* BUMP COLUMN POINTER        * 13820000
         AH    @9,@D7                                             0502  13830000
*           GOTO AEF1;                  /* CHECK IF VALID MEMBER      * 13840000
         BC    15,AEF1                                            0503  13850000
*           END;                                                        13860000
*   /* CHECK IF COLUMN POINTER IS A BLANK                             * 13870000
*   IF CARD(COL)=' '                    /* IS COL A BLANK?            * 13880000
*      /* IF COL WAS A BLANK THAN SEE IF A LEFT PAREND WAS GIVEN      * 13890000
*      THEN IF LPAREN='0'B              /* WAS THERE A LEFT PAREND?   * 13900000
@9AF     LR    @1,@9                                              0505  13910000
         LA    @A,BCARD(@1)                                       0505  13920000
         CLI   0(@A),C' '                                         0505  13930000
         BC    07,@9AE                                            0505  13940000
*              THEN GOTO AEE1;          /* CHECK IF VALID MEMBER      * 13950000
         TM    LPAREN,B'10000000'                                 0506  13960000
         BC    08,AEE1                                            0507  13970000
*              ELSE GOTO ABA2;          /* SET UP ERROR MESSAGE       * 13980000
         BC    15,ABA2                                            0508  13990000
*   /* CHECK TO SEE IF COL IS NOT PAST A VALID ENDING COLUMN          * 14000000
*   IF COL>70                           /* IS COL PAST ENDING COL     * 14010000
*      THEN GOTO ACC2;                  /* SET UP ERROR MESSAGE       * 14020000
@9AE     CH    @9,@D17                                            0509  14030000
         BC    02,ACC2                                            0510  14040000
*      ELSE DO;                         /* NOT PAST 70 THEN PROCESS   * 14050000
*           COL=COL+1;                  /* BUMP COLUMN POINTER        * 14060000
         AH    @9,@D7                                             0512  14070000
*           GOTO AED1;                  /* CHECK FOR A COMMA          * 14080000
         BC    15,AED1                                            0513  14090000
*           END;                                                        14100000
* /******************************************************************** 14110000
* /* ENTRY POINT FOR END OF DATA ON INPUT DATASET-THIS IS AN ABNORMAL * 14120000
* /* OCCURANCE....................................           @ZA05200 * 14130000
* /******************************************************************** 14140000
* PDSEOD:                                                 /* @ZA05200 * 14150000
*   GEN;                                                  /* @ZA05200 * 14160000
PDSEOD   EQU   *                                                  0515  14170000
         BALR  15,0                                      /* @ZA05200 */ 14180000
         USING *,15                                      /* @ZA05200 */ 14190000
*********** I S S U E  E R R O R  M E S S A G E  *********************  14200000
         WTO   'HMB107I  I/O ERROR ON READ',ROUTCDE=11   /* @ZA05200 */ 14210000
         DROP  15                                        /* @ZA05200 */ 14220000
         DS    0H                                                       14230000
*     GO TO CLOSEIT;                                      /* @ZA05200 * 14240000
         BC    15,CLOSEIT                                         0516  14250000
* /******************************************************************** 14260000
* /* ENTRY POINT FOR SYNAD ROUTINE FOR INPUT DATA SET BEING PROCESSED * 14270000
* /******************************************************************** 14280000
* SYSIOPDS:                                                             14290000
*   GEN;                                                                14300000
SYSIOPDS EQU   *                                                  0517  14310000
         USING *,15                                      /* @ZA15060 */ 14320000
         TM    SWITCH,X'01'       /* IS IT A PDS ERRROR?    @ZA15060 */ 14330000
         BO    PARTDS             /* YES DON'T RESTORE REGS @ZA15060 */ 14340000
*********** I S S U E  E R R O R  M E S S A G E     ********@ZA15060    14350000
         WTO   'HMB107I  I/O ERROR ON READ',ROUTCDE=11   /* @ZA15060 */ 14360000
         DROP  15                                        /* @ZA15060 */ 14370000
         L     13,4(13)           /* RESTORE                @ZA15060 */ 14380000
         LM    @E,@C,12(@D)       /* REGISTERS              @ZA15060 */ 14390000
         B     FINISH                                    /* @ZA15060 */ 14400000
PARTDS   EQU   *                                         /* @ZA15060 */ 14410000
         USING *,15                                      /* @ZA15060 */ 14420000
********** I S S U E  E R R O R  M E S S A G E       **********         14430000
         WTO   'HMB109I  I/O ERROR ON READ',ROUTCDE=11                  14440000
         DROP  15                                                       14450000
         B     FINISH                                    /* @ZA15060 */ 14460000
         DS    0H               /* READING DIRECTORY IN CTL @ZA15060 */ 14470000
FINISH   EQU  *                                          /* @ZA15060 */ 14480000
         DS    0H                                                       14490000
*   ERRORS=ERRORS|'0100'X;                                              14500000
         OC    PARMLIST+32(2),@X85                                0518  14510000
*   R1=ADDR(PARMLIST);                                                  14520000
         LA    @1,PARMLIST                                        0519  14530000
*   CALL HMBLKERR;                                                      14540000
         L     @F,@V2              ADDRESS OF HMBLKERR            0520  14550000
         BALR  @E,@F                                              0520  14560000
*   GO TO CLOSEIT;                                       /*  @SA71638 * 14570000
         BC    15,CLOSEIT                                         0521  14580000
*   /****************************************************************** 14590000
*   /* PROCESSING OF CONTROL CARD OPTIONS BEGINS HERE                 * 14600000
*   /****************************************************************** 14610000
* PROCESS:                                                              14620000
*   GEN;                                                                14630000
PROCESS  EQU   *                                                  0522  14640000
         LA    R5,PODCB                 PUT DCB ADDRESS IN REGISTER     14650000
         USING IHADCB,R5                USE R5 AS BASE FOR DCB DSECT    14660000
         DS    0H                                                       14670000
*   /* CHECK TO SEE IF CONTROL CARD HAD A DDNAME GIVEN                * 14680000
*   IF DDN='1'B                         /* WAS A DDNAME GIVEN?        * 14690000
*      THEN DCBDDNAM=DDNAME;            /* PUT IN DCB DDNAME GIVEN    * 14700000
         TM    OPTNMAP,B'00000100'                                0523  14710000
         BC    12,@9AD                                            0523  14720000
         MVC   DCBDDNAM(8),PARMLIST+44                            0524  14730000
         BC    15,@9AC                                            0525  14740000
*      ELSE DO;                         /* PROCESS NO DDNAME GIVEN    * 14750000
*           DDNAME=SYSLIB;              /* USE SYSLIB AS DEFAULT      * 14760000
@9AD     MVC   PARMLIST+44(8),SYSLIB                              0526  14770000
*           DCBDDNAM=SYSLIB;            /* PUT SYSLIB IN DCB          * 14780000
         MVC   DCBDDNAM(8),SYSLIB                                 0527  14790000
*           END;                                                        14800000
*   /* CHECK FOR SEQUENTIAL OBJECT MODULE DATA SET OPERATION          * 14810000
*   IF PO='0'B                          /* IS IT A OBJ SEQUENTIAL       14820000
*                                         DATA SET?                   * 14830000
*      & LISTOBJ='1'B                   /* LISTOBJ OPTION?            * 14840000
*      THEN GOTO OBJSEQ;                /* PROCESS SEQ. DATA SET      * 14850000
@9AC     TM    OPTNMAP+1,B'00100000'                              0529  14860000
         BC    05,@9AB                                            0529  14870000
         TM    OPTNMAP,B'01000000'                                0529  14880000
         BC    03,OBJSEQ                                          0530  14890000
*   /****************************************************************** 14900000
*   /* OPEN PODCB, GET A WORK BUFFER AND ACQUIRE STORAGE DYNAMICALLY  * 14910000
*   /****************************************************************** 14920000
*   GEN;                                                                14930000
@9AA     EQU   *                                                  0531  14940000
@9AB     EQU   *                                                  0531  14950000
         OPEN PODCB,MF=(E,OPEN2)       OPEN PODCB                       14960000
         TM    DCBOFLGS,X'10'          SEE IF OPEN IS SUCCESSFUL        14970000
         BZ    NOOPEN                  SET UP ERROR MESSAGE             14980000
         GETBUF  PODCB,R6              GET WORK BUFFER                  14990000
         LTR   R6,R6                   SET CONDITION CODE               15000000
         BZ    ERRMSG                  ISSUE ERROR MESSAGE              15010000
         ST    R6,BUFF                 SAVE BUFFER ADDRESS              15020000
         DS    0H                                                       15030000
* GETMAIN:                                                              15040000
*   IF LISTLPA='1'B                      /* GETMAIN FOR LPA           * 15050000
*     THEN                               /* YES                       * 15060000
GETMAIN  TM    OPTNMAP,B'00010000'                                0532  15070000
         BC    12,@9A9                                            0532  15080000
*       DO;                                                             15090000
*          GEN(GETMAIN VU,LA=HILOLPA,A=STORAGE,SP=22,MF=(E,SPGET));     15100000
         GETMAIN VU,LA=HILOLPA,A=STORAGE,SP=22,MF=(E,SPGET)             15110000
         DS    0H                                                       15120000
         BC    15,@9A8                                            0536  15130000
*       END;                                                            15140000
*     ELSE                              /* NO,GETMAIN NOT FOR LPA     * 15150000
*       DO;                                                             15160000
@9A9     EQU   *                                                  0536  15170000
*          GEN(GETMAIN VU,LA=HIGHLOW,A=STORAGE,SP=22,MF=(E,SPGET));     15180000
         GETMAIN VU,LA=HIGHLOW,A=STORAGE,SP=22,MF=(E,SPGET)             15190000
         DS    0H                                                       15200000
*       END;                                                            15210000
*   AREAGET=MAINADDR;                   /* PUT GETMAIN ADDR IN PARMLST* 15220000
@9A8     MVC   PARMLIST+12(4),STORAGE                             0539  15230000
*   MAINADDR=MAINADDR + (MAINLEN-OVERHEAD);/* STARTING ADDR FOR FREEMAI 15240000
*                                         OF SUBPOOL 22               * 15250000
         L     @F,STORAGE+4                                       0540  15260000
         S     @F,OVERHEAD                                        0540  15270000
         A     @F,STORAGE                                         0540  15280000
         ST    @F,STORAGE                                         0540  15290000
*   GMLENGTH=MAINLEN - OVERHEAD;        /* ACTUAL LENGTH OF SP 22       15300000
*                                         AFTER FREEMAIN              * 15310000
         L     @F,STORAGE+4                                       0541  15320000
         S     @F,OVERHEAD                                        0541  15330000
         ST    @F,PARMLIST+16                                     0541  15340000
*   MAINLEN=OVERHEAD;                   /* LENGTH TO BE FREED         * 15350000
         MVC   STORAGE+4(4),OVERHEAD                              0542  15360000
*   GEN;                                                                15370000
         FREEMAIN  V,A=STORAGE,SP=22,MF=(E,SPFREE)  FREE UP 8K OF SP22  15380000
         DS    0H                                                       15390000
*   /* CHECK IF GETMAIN WAS FOR LINK PACK AREA OPTION                 * 15400000
*   IF LISTLPA='1'B                     /* LINK PACK AREA OPTION?     * 15410000
*      THEN GOTO LPACALL;               /* RETURN TO CALLER           * 15420000
         TM    OPTNMAP,B'00010000'                                0544  15430000
         BC    01,LPACALL                                         0545  15440000
*      ELSE GOTO TEST;                  /* CONTINUE PROCESSING        * 15450000
         BC    15,TEST                                            0546  15460000
* NOOPEN:                                                               15470000
*   /****************************************************************** 15480000
*   /* SET UP ERROR MESSAGE, DDNAME COULD NOT BE OPENED               * 15490000
*   /****************************************************************** 15500000
*   ERRORS=ERRORS|'0020'X;              /* TURN ON ERROR BIT AND GOTO * 15510000
NOOPEN   OC    PARMLIST+32(2),@X48                                0547  15520000
*   R1=ADDR(PARMLIST);                  /* SAVE PARMLIST ADDR TO PASS * 15530000
         LA    @1,PARMLIST                                        0548  15540000
*   CALL HMBLKERR;                      /* PROCESS ANY ERROR MSGS     * 15550000
         L     @F,@V2              ADDRESS OF HMBLKERR            0549  15560000
         BALR  @E,@F                                              0549  15570000
*   GOTO  AAB1;                         /* READ ANOTHER CARD          * 15580000
         BC    15,AAB1                                            0550  15590000
* TEST:                                                                 15600000
*   /* IS IT OBJECT MODULE PARTITIONED DATA SET                       * 15610000
*   IF SW4='1'B                         /* IS IT OBJPDS OPERATION?    * 15620000
*      THEN GOTO BLDCH;                 /* CHECK FOR MEMBER FOUND     * 15630000
TEST     TM    SWITCHES,B'00010000'                               0551  15640000
         BC    01,BLDCH                                           0552  15650000
*   /* CHECK IF IT IS A LOAD MODULE OPERATION                         * 15660000
*   IF LISTLOAD='1'B                    /* IS IT A LISTLOAD OPERATION?* 15670000
*      | LISTIDR='1'B                   /* IS IT A LISTIDR OPERATION? * 15680000
*      THEN DO;                         /* PROCESS LOAD MODULE        * 15690000
         TM    OPTNMAP,B'10000000'                                0553  15700000
         BC    01,@9A7                                            0553  15710000
         TM    OPTNMAP,B'00100000'                                0553  15720000
         BC    12,@9A6                                            0553  15730000
@9A7     EQU   *                                                  0554  15740000
*           GEN;                                                        15750000
         TM    DCBRECFM,X'C0'          IS IT UNDEFINED RECORD LENGTH    15760000
         BNO   NOLOAD                  SET UP ERROR MESSAGE             15770000
         TM    DCBDSORG,X'02'          IS IT PARTITIONED DATA SET       15780000
         BO    MEM                     ARE THERE MEMBERS GIVEN          15790000
         DS    0H                                                       15800000
* NOLOAD:                                                               15810000
*   /****************************************************************** 15820000
*   /* SET UP ERROR MESSAGE FOR INVALID LOAD MODULE                   * 15830000
*   /****************************************************************** 15840000
*           ERRORS=ERRORS|'0800'X;      /* TURN ON ERROR BIT          * 15850000
NOLOAD   OC    PARMLIST+32(2),@X86                                0556  15860000
* NOLOAD1:                                                   /* Y03207* 15870000
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS * 15880000
NOLOAD1  LA    @1,PARMLIST                                        0557  15890000
*           CALL HMBLKERR;              /* PROCESS ANY ERROR MSGS     * 15900000
         L     @F,@V2              ADDRESS OF HMBLKERR            0558  15910000
         BALR  @E,@F                                              0558  15920000
*           GEN(FREEBUF PODCB,R6);      /* FREE WORK BUFFER           * 15930000
         FREEBUF PODCB,R6                                               15940000
         DS    0H                                                       15950000
*           GEN;                                                        15960000
         CLOSE  PODCB,MF=(E,CLOSR2)      CLOSE PODCB                    15970000
         DS    0H                                                       15980000
*           GEN(FREEPOOL PODCB);        /* FREE BUFFER STORAGE        * 15990000
         FREEPOOL PODCB                                                 16000000
         DS    0H                                                       16010000
*           GEN;                        /* ISSUE FREEMAIN FOR SP22    * 16020000
       FREEMAIN V,A=AREAGET,SP=22,MF=(E,SPFREE) FREE WORKING STORAGE    16030000
         DS    0H                                                       16040000
*           GOTO AAB1;                  /* PROCESS ANOTHER CARD       * 16050000
         BC    15,AAB1                                            0563  16060000
* MEM:                                                                  16070000
*           /* CHECK TO SEE IF A MEMBER OPTION WAS USED               * 16080000
*           IF MEMBERÂ¬='1'B             /* WAS MEMBER PARAMETER GIVEN?* 16090000
*              THEN DO;                 /* PROCESS DEFAULT OF ALL       16100000
MEM      TM    OPTNMAP,B'00000010'                                0564  16110000
         BC    01,@9A5                                            0564  16120000
*                                         MEMBERS                     * 16130000
*                   SW1='1'B;           /* NO TAKE DEFAULT OF ALL MEMS* 16140000
         OI    SWITCHES,B'10000000'                               0566  16150000
*                   GOTO SKIP;          /* READ A DIRECTORY ENTRY     * 16160000
         BC    15,SKIP                                            0567  16170000
*                   END;                                                16180000
* SORT:                                                                 16190000
*           NUMENTS=NUMBER;             /*NUM OF ENTRIES IN BLDLIST   * 16200000
@9A5     EQU   *                                                  0569  16210000
SORT     MVC   BLDLIST(2),NUMBER                                  0569  16220000
*           /********************************************************** 16230000
*           /* THE FOLLOWING CODE SORTS THE MEMBERS IN ALPHA-         * 16240000
*           /* NUMERIC SEQUENCE.                                      * 16250000
*           /********************************************************** 16260000
*           F=NUMBER;                   /* INIT F TO NO. OF MEMBERS   * 16270000
         MVC   F(2),NUMBER                                        0570  16280000
* SORT1:                                                                16290000
*           F=F/2;                      /* DIVIDE ARRAY IN HALF       * 16300000
SORT1    LH    @E,F                                               0571  16310000
         SRDA  @E,32                                              0571  16320000
         LA    @0,2                                               0571  16330000
         DR    @E,@0                                              0571  16340000
         STH   @F,F                                               0571  16350000
*           /* CHECK FOR END OF SORT OR IF 1 MEMBER TO SKIP SORT      * 16360000
*           IF F=0                      /* IS SORT FINISHED?          * 16370000
*              THEN GOTO BUILD;         /* ISSUE BLDL MACRO           * 16380000
         SR    @F,@F                                              0572  16390000
         CH    @F,F                                               0572  16400000
         BC    08,BUILD                                           0573  16410000
*           G=NUMBER-F;                 /* SET INDEX G                * 16420000
         LH    @F,NUMBER                                          0574  16430000
         SH    @F,F                                               0574  16440000
         STH   @F,G                                               0574  16450000
*           H=1;                        /* SET INDEX H TO 1           * 16460000
         LA    @F,1                                               0575  16470000
         STH   @F,H                                               0575  16480000
* SORT2:                                                                16490000
*           J=H;                        /* SET INDEX J                * 16500000
SORT2    MVC   J(2),H                                             0576  16510000
* SORT3:                                                                16520000
*           L=J+F;                      /* SET INDEX L                * 16530000
SORT3    LH    @F,F                                               0577  16540000
         AH    @F,J                                               0577  16550000
         STH   @F,L                                               0577  16560000
*           /* TEST WHICH IS GREATER OF TWO ARRAYS                    * 16570000
*           IF LISTNAME(J,1:8)<=LISTNAME(L,1:8) /* IS SECOND > FIRST  * 16580000
*               THEN GOTO SORT4;        /* DONT EXCHANGE MEMNAMES     * 16590000
         LR    @1,@F                                              0578  16600000
         MH    @1,@D24                                            0578  16610000
         LA    @E,BLDLIST-10(@1)                                  0578  16620000
         LH    @3,J                                               0578  16630000
         MH    @3,@D24                                            0578  16640000
         LA    @A,BLDLIST-10(@3)                                  0578  16650000
         CLC   0(8,@A),0(@E)                                      0578  16660000
         BC    12,SORT4                                           0579  16670000
*           WORKAREA=LISTNAME(J);       /* FIRST GOES INTO WORKAREA   * 16680000
         LA    @E,BLDLIST-10(@3)                                  0580  16690000
         MVC   WORKAREA(8),0(@E)                                  0580  16700000
*           LISTNAME(J)=LISTNAME(L);    /* SWAP POSITIONS IN ARRAY    * 16710000
         LA    @E,BLDLIST-10(@1)                                  0581  16720000
         MVC   0(8,@A),0(@E)                                      0581  16730000
*           LISTNAME(L)=WORKAREA;       /* PUT FIRST IN SECOND        * 16740000
         LA    @A,BLDLIST-10(@1)                                  0582  16750000
         MVC   0(8,@A),WORKAREA                                   0582  16760000
*           J=J-F;                      /* DECREMENT INDEX J BY F     * 16770000
         LH    @F,J                                               0583  16780000
         SH    @F,F                                               0583  16790000
         STH   @F,J                                               0583  16800000
*           /* TEST IF BEGINNING OF MEMNAME ARRAY HAS BEEN REACHED    * 16810000
*           IF J>=1                     /* IF BEGINNING NOT REACHED   * 16820000
*               THEN GOTO SORT3;        /* COMPARE MEMNAMES           * 16830000
         LA    @F,1                                               0584  16840000
         CH    @F,J                                               0584  16850000
         BC    12,SORT3                                           0585  16860000
* SORT4:                                                                16870000
*           H=H+1;                      /* BUMP INDEX H BY 1          * 16880000
SORT4    LA    @F,1                                               0586  16890000
         AH    @F,H                                               0586  16900000
         STH   @F,H                                               0586  16910000
*           /* TEST IF SCAN IS FINISHED                               * 16920000
*           IF H>G                      /* IS H GREATER THAN G        * 16930000
*               THEN GOTO SORT1;        /* GO TO POSSIBLE SCAN AGAIN  * 16940000
         LH    @F,G                                               0587  16950000
         CH    @F,H                                               0587  16960000
         BC    04,SORT1                                           0588  16970000
*               ELSE GOTO SORT2;        /* GO TO FINISH IT            * 16980000
         BC    15,SORT2                                           0589  16990000
* BUILD:                                                                17000000
*   /****************************************************************** 17010000
*   /* ISSUE BLDL MACRO ON MEMBERS IN BLDLIST                         * 17020000
*   /****************************************************************** 17030000
*           GEN;                                                        17040000
BUILD    EQU   *                                                  0590  17050000
         BLDL  PODCB,BLDLIST           CREATE BLDL LIST                 17060000
         POINT PODCB,DIRORG            REPOSITION R/W HEAD TO BEGIN     17070000
         DS    0H                                                       17080000
* BLDCH:                                                                17090000
*           /* CHECK TO SEE IF BLDL WAS ABLE TO FIND MEMBER           * 17100000
*           IF LISTTR(LISTCNT,3)='00'X  /* WAS MEMBER FOUND?          * 17110000
*              THEN DO;                 /* PROCESS MEMBER NOT FOUND   * 17120000
BLDCH    LH    @1,LISTCNT                                         0591  17130000
         MH    @1,@D24                                            0591  17140000
         LA    @A,BLDLIST(@1)                                     0591  17150000
         CLI   0(@A),X'00'                                        0591  17160000
         BC    07,@9A4                                            0591  17170000
*                   MEMNAME=LISTNAME(LISTCNT,1:8);/* STORE MEMBER     * 17180000
         LA    @E,BLDLIST-10(@1)                                  0593  17190000
         MVC   PARMLIST+36(8),0(@E)                               0593  17200000
*                   ERRORS=ERRORS | '0100'X;/* SET UP ERROR MESSAGE   * 17210000
         OC    PARMLIST+32(2),@X85                                0594  17220000
*                   R1=ADDR(PARMLIST);  /* STORE PARMLIST ADDRESS     * 17230000
         LA    @1,PARMLIST                                        0595  17240000
*                   CALL HMBLKERR;      /* PROCESS ERROR MESSAGE      * 17250000
         L     @F,@V2              ADDRESS OF HMBLKERR            0596  17260000
         BALR  @E,@F                                              0596  17270000
*                   GOTO OUT;           /* CHECK FOR ANYMORE MEMBERS  * 17280000
         BC    15,OUT                                             0597  17290000
*                   END;                                                17300000
*           /* CHECK TO SEE IF IT IS AN OBJECT PARTITIONED DATA SET   * 17310000
*           IF SW4='1'B                 /* IS IT OBJPDS OPERATION?    * 17320000
*              THEN GOTO OBJCALL;       /* PROCESS OBJECT PDS         * 17330000
@9A4     TM    SWITCHES,B'00010000'                               0599  17340000
         BC    01,OBJCALL                                         0600  17350000
*           GEN;                                                        17360000
SKIP     EQU   *                                                        17370000
         OI    SWITCH,X'01'      /* TURN ON SYNAD SWITCH     @ZA15060*/ 17380000
         READ  READIR,SF,PODCB,(R6),264,MF=E  READ A DIRECTORY BLOCK    17390000
         CHECK READIR                  WAS READ SUCCESSFUL?             17400000
         NI    SWITCH,X'FE'      /* TURN OFF SYNAD SWITCH    @ZA15060*/ 17410000
         DS    0H                                                       17420000
*           IF DCBLRECLÂ¬=264             /* GOOD DIR BLOCK?    Y03207 * 17430000
*              THEN DO;                  /* NO, ERROR          Y03207 * 17440000
         LA    @F,264                                             0602  17450000
         CH    @F,DCBLRECL                                        0602  17460000
         BC    08,@9A3                                            0602  17470000
*               ERRORS=ERRORS|'00008000'X; /* SET ERROR BIT    Y03207 * 17480000
         OC    PARMLIST+32(4),@X87                                0604  17490000
*               GOTO NOLOAD1;             /* TO ERROR PROCESS  Y03207 * 17500000
         BC    15,NOLOAD1                                         0605  17510000
*             END;                       /*                    Y03207 * 17520000
*           /* WAS THE DEFAULT OF ALL MEMBERS IN A LOAD MODULE PDS ON * 17530000
*           IF SW1='1'B                 /* DO I PROCESS ALL OF        * 17540000
*              THEN GOTO ALL;           /* DIRECTORY                  * 17550000
@9A3     TM    SWITCHES,B'10000000'                               0607  17560000
         BC    01,ALL                                             0608  17570000
* PDSREAD:  /* START PROCESSING DIRECTORY                             * 17580000
*           /* CHECK FOR LAST ACTIVE ENTRY IN DIRECTORY BLOCK         * 17590000
*           IF PDSNAME=ENDNAME          /*  LAST NAME IN DIRECTORY?   * 17600000
*              THEN GOTO ENDOFILE;      /* IS IT END OF DIRECTORY?    * 17610000
PDSREAD  CLC   10(8,@6),ENDNAME                                   0609  17620000
         BC    08,ENDOFILE                                        0610  17630000
*           TEMPCNT=INDICATR;           /* SAVE USER COUNT FIELD      * 17640000
         MVC   TEMPCNT(1),21(@6)                                  0611  17650000
*           GEN;                                                        17660000
         XC    USER(2),USER            ZERO OUT USER FIELD              17670000
         MVC   USER+1(1),TEMPCNT       MOVE IN USER COUNT FIELD         17680000
         NI    USER+1,B'00011111'      TURN OFF HIGH ORDER 3 BYTES      17690000
         DS    0H                                                       17700000
*           USER=(USER * 2)+12;         /* CALC LENGTH OF DIRC ENTRY  * 17710000
         LA    @E,2                                               0613  17720000
         MH    @E,USER                                            0613  17730000
         AH    @E,@D25                                            0613  17740000
         STH   @E,USER                                            0613  17750000
*           /* CHECK TO SEE IF TTR IN BLDL LIST MATCHES TTR IN DIRECTOR 17760000
*             ENTRY                                                   * 17770000
*           IF PDSTTRÂ¬=LISTTR(LISTCNT)  /* READ ANOTHER ENTRY IF        17780000
*                                         TTRS DO NOT MATCH           * 17790000
*              THEN GOTO BUMP;          /* PROCESS ANOTHER ENTRY      * 17800000
         LH    @1,LISTCNT                                         0614  17810000
         MH    @1,@D24                                            0614  17820000
         LA    @E,BLDLIST-2(@1)                                   0614  17830000
         CLC   18(3,@6),0(@E)                                     0614  17840000
         BC    07,BUMP                                            0615  17850000
*              ELSE DO;                 /* TTRS ARE EQUAL             * 17860000
*                   /* IS ENTRY IN DIRECTORY AN ALIAS                 * 17870000
*                   IF ALIAS='1'B       /* IS ENTRY AN ALIAS          * 17880000
*                      THEN DO;         /* PROCESS ALIAS              * 17890000
         TM    21(@6),B'10000000'                                 0617  17900000
         BC    12,@9A2                                            0617  17910000
*                           /* WAS MEMBER GIVEN AN ALIAS              * 17920000
*                           IF LISTNAME(LISTCNT)=PDSNAME/* ARE NAMES    17930000
*                                         EQUAL                       * 17940000
*                              THEN GOTO CHECK;/* SAVE DATA           * 17950000
         LA    @A,BLDLIST-10(@1)                                  0619  17960000
         CLC   0(8,@A),10(@6)                                     0619  17970000
         BC    08,CHECK                                           0620  17980000
*                              ELSE DO; /* PROCESS ALIAS IN ENTRY     * 17990000
*                                   SW5='1'B;/* TURN ON SAVE ALIAS      18000000
*                                         DATA SWITCH                 * 18010000
         OI    SWITCHES,B'00001000'                               0622  18020000
*                                   GOTO STORIT;/* SAVE ALIAS NAMES   * 18030000
         BC    15,STORIT                                          0623  18040000
*                                   END;                                18050000
*                           END;                                        18060000
*                      ELSE DO;         /* IF NOT ALIAS THEN MEMBER   * 18070000
*                           /* CHECK IF ENTRY GIVEN IS MEMBER AND       18080000
*                             BLDLIST NAME IS ALIAS                   * 18090000
*                           IF LISTNAME(LISTCNT)Â¬=PDSNAME/* IS ENTRY    18100000
*                                         AN ALIAS                    * 18110000
*                              THEN DO; /* PROCESS MEMBER AS ALIAS    * 18120000
@9A2     LH    @1,LISTCNT                                         0627  18130000
         MH    @1,@D24                                            0627  18140000
         LA    @A,BLDLIST-10(@1)                                  0627  18150000
         CLC   0(8,@A),10(@6)                                     0627  18160000
         BC    08,@9A0                                            0627  18170000
*                                   ASTERISK(ALCNT,2)='*';/* MARK       18180000
*                                         MEMBER IN ALIAS LIST        * 18190000
         LH    @3,ALCNT                                           0629  18200000
         SLA   @3,1                                               0629  18210000
         LA    @A,ALIASLST+127(@3)                                0629  18220000
         MVI   0(@A),C'*'                                         0629  18230000
*                                   SW5='1'B;/*STORE IN ALIAS LIST    * 18240000
         OI    SWITCHES,B'00001000'                               0630  18250000
*                                   GOTO SAVATTS; /* GET MODULE         18260000
*                                         ATTRIBUTES                  * 18270000
         BC    15,SAVATTS                                         0631  18280000
*                                   END;                                18290000
*                           END;                                        18300000
@9A0     EQU   *                                                  0633  18310000
*                   END;                                                18320000
@9A1     EQU   *                                                  0634  18330000
* CHECK:                                                                18340000
*           HEADNAME=PDSNAME;           /* SAVE MEMBER NAME           * 18350000
CHECK    MVC   HEADNAME(8),10(@6)                                 0635  18360000
*           HEADEP(5:7)=EPADDR;         /* SAVE ENTRY POINT FOR MEMBER* 18370000
         MVC   HEADEP+4(3),37(@6)                                 0636  18380000
*           ATTRIBUT=MODATTR;           /* SAVE MODULE ATTRIBUTES     * 18390000
         MVC   ATTRIBUT(2),30(@6)                                 0637  18400000
*           /* CHECK TO SEE IF MEMBER BEING PROCESSED IS IN OVERLAY   * 18410000
*           IF TESTBIT(3)=(MODATTR&TESTBIT(3))/*  OVERLAY ATTRIBUTE?  * 18420000
*              THEN OVLYFLAG='1'B;      /* TURN ON OVERLAY BIT IN       18430000
         MVC   @CTEMP2(1),TESTBIT+2                               0638  18440000
         NC    @CTEMP2(1),30(@6)                                  0638  18450000
         CLC   @CTEMP2(1),TESTBIT+2                               0638  18460000
         BC    07,@99F                                            0638  18470000
*                                          PARMLIST                   * 18480000
         OI    PARMLIST+20,B'01000000'                            0639  18490000
*           MODSIZE(2:4)=MAINSTOR;      /* SAVE MODULE SIZE           * 18500000
@99F     MVC   PARMLIST+65(3),32(@6)                              0640  18510000
*           /* CHECK FOR NOT-EDITABLE ATTRIBUTE TO BYPASS HMBLKXRF    * 18520000
*           IF TESTBIT(5)=(MODATTR(2)&TESTBIT(5))/* NOT-EDITABLE?     * 18530000
*              THEN DO;                 /* PROCESS NOT-EDITABLE       * 18540000
         MVC   @CTEMP2(1),TESTBIT+4                               0641  18550000
         NC    @CTEMP2(1),31(@6)                                  0641  18560000
         CLC   @CTEMP2(1),TESTBIT+4                               0641  18570000
         BC    07,@99E                                            0641  18580000
*                   NOTEDIT='1'B;       /* INDICATE NOT-EDITABLE      * 18590000
         OI    PARMLIST+20,B'00100000'                            0643  18600000
*                   TXTTR=TTRTEXT;      /* SAVE 1ST TXT TTR           * 18610000
         MVC   PARMLIST+52(3),22(@6)                              0644  18620000
*                   TXTLEN=FSTXTLEN;    /* SAVE 1ST TXT LENGTH        * 18630000
         MVC   PARMLIST+55(2),35(@6)                              0645  18640000
*                   /* CHECK FOR RLD RECORDS                          * 18650000
*                   IF TESTBIT(4)=(MODATTR(2) & TESTBIT(4))             18660000
*                      THEN NORLD='1'B; /* INDICATE NO RLD RECORDS    * 18670000
         MVC   @CTEMP2(1),TESTBIT+3                               0646  18680000
         NC    @CTEMP2(1),31(@6)                                  0646  18690000
         CLC   @CTEMP2(1),TESTBIT+3                               0646  18700000
         BC    07,@99D                                            0646  18710000
         OI    PARMLIST+20,B'00010000'                            0647  18720000
         BC    15,@99C                                            0648  18730000
*                      ELSE NORLD='0'B; /* INDICATE RLD RECORDS       * 18740000
@99D     NI    PARMLIST+20,B'11101111'                            0648  18750000
*                   /* CHECK FOR LISTLOAD AND XREF OPTION             * 18760000
*                   IF XREF='0'B        /* XREF OPTION?               * 18770000
*                      & LISTLOAD='1'B  /* LISTLOAD OPTION?           * 18780000
*                      THEN DO;         /* XREF WAS GIVEN             * 18790000
@99C     TM    OPTNMAP+1,B'10000000'                              0649  18800000
         BC    05,@99B                                            0649  18810000
         TM    OPTNMAP,B'10000000'                                0649  18820000
         BC    12,@99A                                            0649  18830000
*                           SW3='1'B;   /* BYPASS XREF PROCESSING     * 18840000
         OI    SWITCHES,B'00100000'                               0651  18850000
*                           ERRORS=ERRORS | '04'X;/* SET UP MESSAGE   * 18860000
         OI    PARMLIST+32,X'04'                                  0652  18870000
*                           END;                                        18880000
*                   END;                                                18890000
@99A     EQU   *                                                  0654  18900000
@99B     EQU   *                                                  0654  18910000
* SAVATTS:                                                              18920000
*           /* CHECK WHAT LINKAGE EDITOR WAS USED TO PROCESS MODULE   * 18930000
*           IF TESTBIT(2)=(MODATTR(2)&TESTBIT(2))/* ZERO ORIGIN?      * 18940000
*              THEN DO;                 /* PROCESS ZERO ORIGIN FURTHER* 18950000
@99E     EQU   *                                                  0655  18960000
SAVATTS  MVC   @CTEMP2(1),TESTBIT+1                               0655  18970000
         NC    @CTEMP2(1),31(@6)                                  0655  18980000
         CLC   @CTEMP2(1),TESTBIT+1                               0655  18990000
         BC    07,@999                                            0655  19000000
*                   /* CHECK FOR AOS LINKAGE EDITOR PROCESSING        * 19010000
*                   IF AOSLKED='1'B     /* AOS LINKAGE EDITOR?        * 19020000
*                      THEN DO;         /* INDICATE AOS LINKAGE EDITOR* 19030000
         TM    40(@6),B'10000000'                                 0657  19040000
         BC    12,@998                                            0657  19050000
*                           SW8='1'B;   /* AOS LINKAGE EDITOR USED    * 19060000
         OI    SWITCHES,B'00000001'                               0659  19070000
*                           /* CHECK FOR PAGE ALIGNMENT               * 19080000
*                           IF PAGALGN='1'B/* PAGE ALIGNMENT NEEDED?  * 19090000
*                              THEN SW9='1'B;/* INDICATE PAGE ALIGN.  * 19100000
         TM    40(@6),B'00100000'                                 0660  19110000
         BC    12,@997                                            0660  19120000
         OI    SWITCHES+1,B'10000000'                             0661  19130000
*                           /* APF DATA PRESENT?                      * 19140000
*                           IF APFBIT='1'B/* APF DATA?                * 19150000
*                              THEN SW10='1'B;/* INDICATE APF DATA    * 19160000
@997     TM    40(@6),B'00001000'                                 0662  19170000
         BC    12,@996                                            0662  19180000
         OI    SWITCHES+1,B'01000000'                             0663  19190000
*                           END;                                        19200000
@996     EQU   *                                                  0664  19210000
*                   END;                                                19220000
@998     EQU   *                                                  0665  19230000
*           /* CHECK FOR LENGTH OF PDS ENTRY IF IT IS SCATTER         * 19240000
*           IF TESTBIT(6)=(MODATTR&TESTBIT(6))/* SCATTER ATTRIBUTE?   * 19250000
*              THEN DO;                 /* PROCESS SCATTER DATA       * 19260000
@999     MVC   @CTEMP2(1),TESTBIT+5                               0666  19270000
         NC    @CTEMP2(1),30(@6)                                  0666  19280000
         CLC   @CTEMP2(1),TESTBIT+5                               0666  19290000
         BC    07,@995                                            0666  19300000
*                   SCATLEN=SCATDATA;   /* SAVE SCATTER DATA FOR        19310000
*                                         HMBLKLDM                    * 19320000
         MVC   PARMLIST+28(4),43(@6)                              0668  19330000
*                   /* CHECK IF SCATTER, REENTRANT  & ALIAS           * 19340000
*                   IF TESTBIT(1)=(MODATTR&TESTBIT(1))/* REENTRANT?   * 19350000
*                      & ALIAS='1'B     /* IS IT AN ALIAS?            * 19360000
*                      THEN GOTO SAVLEN;/* GET PDS ENTRY LENGTH       * 19370000
         MVC   @CTEMP2(1),TESTBIT                                 0669  19380000
         NC    @CTEMP2(1),30(@6)                                  0669  19390000
         CLC   @CTEMP2(1),TESTBIT                                 0669  19400000
         BC    07,@994                                            0669  19410000
         TM    21(@6),B'10000000'                                 0669  19420000
         BC    03,SAVLEN                                          0670  19430000
*                   /* CHECK IF IT IS SCATTER,REUSABLE AND AN ALIAS   * 19440000
*                   IF TESTBIT(2)=(MODATTR&TESTBIT(2))/* REUSABLE?    * 19450000
*                      & ALIAS='1'B       /* AND AN ALIAS?            * 19460000
*                      THEN DO;         /* PROCESS SCATTER WITH ALIAS * 19470000
@993     EQU   *                                                  0671  19480000
@994     MVC   @CTEMP2(1),TESTBIT+1                               0671  19490000
         NC    @CTEMP2(1),30(@6)                                  0671  19500000
         CLC   @CTEMP2(1),TESTBIT+1                               0671  19510000
         BC    07,@992                                            0671  19520000
         TM    21(@6),B'10000000'                                 0671  19530000
         BC    12,@991                                            0671  19540000
* SAVLEN:                                                               19550000
*                           ACCUM=52;   /* LENGTH OF PDS ENTRY        * 19560000
SAVLEN   LA    @F,52                                              0673  19570000
         STH   @F,ACCUM                                           0673  19580000
*                           GOTO SSITEST;/* CHECK FOR SSI DATA        * 19590000
         BC    15,SSITEST                                         0674  19600000
*                           END;                                        19610000
*                      ELSE DO;         /* PROCESS SCATTER ONLY       * 19620000
@991     EQU   *                                                  0676  19630000
*                      /* CHECK IF AOS CREATED                        * 19640000
*                      IF AOSLKED='1'B  /* AOS-EDITOR USED?           * 19650000
*                         & ALIAS='1'B  /* ALIAS?                     * 19660000
*                         THEN ACCUM=52;/* YES- ALIAS                 * 19670000
@992     TM    40(@6),B'10000000'                                 0677  19680000
         BC    12,@98F                                            0677  19690000
         TM    21(@6),B'10000000'                                 0677  19700000
         BC    12,@98E                                            0677  19710000
         LA    @F,52                                              0678  19720000
         STH   @F,ACCUM                                           0678  19730000
*                      IF AOSLKED='1'B  /* AOS-EDITOR USED?           * 19740000
*                         & SSIBITÂ¬='1'B/* NO SSI DATA?               * 19750000
*                         THEN ACCUM=41;/* AOS LENGTH                 * 19760000
@98E     EQU   *                                                  0679  19770000
@98F     TM    40(@6),B'10000000'                                 0679  19780000
         BC    12,@98D                                            0679  19790000
         TM    40(@6),B'00010000'                                 0679  19800000
         BC    01,@98C                                            0679  19810000
         LA    @F,41                                              0680  19820000
         STH   @F,ACCUM                                           0680  19830000
         BC    15,@98B                                            0681  19840000
*                         ELSE ACCUM=42;/* OS LENGTH                  * 19850000
@98C     EQU   *                                                  0681  19860000
@98D     LA    @F,42                                              0681  19870000
         STH   @F,ACCUM                                           0681  19880000
*                           GOTO SSITEST;/* CHECK FOR SSI DATA        * 19890000
         BC    15,SSITEST                                         0682  19900000
*                           END;                                        19910000
*                   END;                                                19920000
@990     EQU   *                                                  0684  19930000
*           /* CHECK IF ENTRY IS REENTRANT  AND ALIAS                 * 19940000
*           IF TESTBIT(1)=(MODATTR&TESTBIT(1))/* IS IT REENTRANT?     * 19950000
*              & ALIAS='1'B             /* IS IT AN ALIAS?            * 19960000
*              THEN DO;                 /* PROCESS REUSABLE ALIAS     * 19970000
@995     MVC   @CTEMP2(1),TESTBIT                                 0685  19980000
         NC    @CTEMP2(1),30(@6)                                  0685  19990000
         CLC   @CTEMP2(1),TESTBIT                                 0685  20000000
         BC    07,@98A                                            0685  20010000
         TM    21(@6),B'10000000'                                 0685  20020000
         BC    12,@989                                            0685  20030000
*                   ACCUM=44;           /* GET PDS ENTRY LENGTH       * 20040000
         LA    @F,44                                              0687  20050000
         STH   @F,ACCUM                                           0687  20060000
*                   GOTO SSITEST;       /* CHECK FOR SSI DATA         * 20070000
         BC    15,SSITEST                                         0688  20080000
*                   END;                                                20090000
*           /* CHECK IF IT IS REUSABLE AND AN ALIAS                   * 20100000
*           IF TESTBIT(2)=(MODATTR&TESTBIT(2))/* IS IT REUSABLE?      * 20110000
*              & ALIAS='1'B             /* AND AN ALIAS?              * 20120000
*              THEN ACCUM=44;           /* LENGTH OF PDS ENTRY        * 20130000
@989     EQU   *                                                  0690  20140000
@98A     MVC   @CTEMP2(1),TESTBIT+1                               0690  20150000
         NC    @CTEMP2(1),30(@6)                                  0690  20160000
         CLC   @CTEMP2(1),TESTBIT+1                               0690  20170000
         BC    07,@988                                            0690  20180000
         TM    21(@6),B'10000000'                                 0690  20190000
         BC    12,@987                                            0690  20200000
         LA    @F,44                                              0691  20210000
         STH   @F,ACCUM                                           0691  20220000
         BC    15,@986                                            0692  20230000
*              /* CHECK FOR AOS CREATION                              * 20240000
*             ELSE DO;                                                  20250000
@987     EQU   *                                                  0692  20260000
*                  IF AOSLKED='1'B      /* AOS-EDITOR USED?           * 20270000
*                      & ALIAS='1'B     /* ALIAS?                     * 20280000
*                      THEN ACCUM=44;   /* AOS LENGTH                 * 20290000
@988     TM    40(@6),B'10000000'                                 0693  20300000
         BC    12,@985                                            0693  20310000
         TM    21(@6),B'10000000'                                 0693  20320000
         BC    12,@984                                            0693  20330000
         LA    @F,44                                              0694  20340000
         STH   @F,ACCUM                                           0694  20350000
*                  IF AOSLKED='1'B      /* AOS EDITOR USED?           * 20360000
*                     & SSIBITÂ¬='1'B    /* NO SSI DATA?               * 20370000
*                     THEN ACCUM=33;    /* AOS LENGTH                 * 20380000
@984     EQU   *                                                  0695  20390000
@985     TM    40(@6),B'10000000'                                 0695  20400000
         BC    12,@983                                            0695  20410000
         TM    40(@6),B'00010000'                                 0695  20420000
         BC    01,@982                                            0695  20430000
         LA    @F,33                                              0696  20440000
         STH   @F,ACCUM                                           0696  20450000
         BC    15,@981                                            0697  20460000
*                     ELSE ACCUM=34;    /* OS LENGTH                  * 20470000
@982     EQU   *                                                  0697  20480000
@983     LA    @F,34                                              0697  20490000
         STH   @F,ACCUM                                           0697  20500000
*                  IF ALIAS='1'B        /* ALIAS?              OY09530* 20510000
*                     THEN ACCUM=44;    /* AOS LENGTH          OY09530* 20520000
@981     TM    21(@6),B'10000000'                                 0698  20530000
         BC    12,@980                                            0698  20540000
         LA    @F,44                                              0699  20550000
         STH   @F,ACCUM                                           0699  20560000
*                  END;                                                 20570000
@980     EQU   *                                                  0700  20580000
* SSITEST:                                                              20590000
*           /* CHECK FOR SSI DATA BY COMPARING LENGTH CALCULATED WITH   20600000
*             USER DATA COUNT WITH LENGTH FOUND BY CHECKING ATTRIBUTES* 20610000
*           /* CHECK FOR AOS LOAD MODULE                              * 20620000
*           IF SW8='1'B                 /* AOS LOAD MODULE?           * 20630000
*              /* CHECK FOR SSI CODE                                  * 20640000
*              THEN IF SSIBIT='1'B      /* SSI DATA PRESENT?          * 20650000
@986     EQU   *                                                  0701  20660000
SSITEST  TM    SWITCHES,B'00000001'                               0701  20670000
         BC    12,@97F                                            0701  20680000
*                      THEN GOTO COLLECT;/* PROCESS SSI               * 20690000
         TM    40(@6),B'00010000'                                 0702  20700000
         BC    01,COLLECT                                         0703  20710000
*                      /* CHECK IF APF DATA PRESENT                   * 20720000
*                      ELSE IF SW10='1'B/* APF DATA PRESENT?          * 20730000
*                              THEN DO; /* START PROCESSING IT        * 20740000
         TM    SWITCHES+1,B'01000000'                             0704  20750000
         BC    12,@97E                                            0704  20760000
*                                   ACCUM=ACCUM+10;/* ADJUST PTR FOR    20770000
*                                                    DIRECTORY KEY    * 20780000
         LA    @F,10                                              0706  20790000
         AH    @F,ACCUM                                           0706  20800000
         STH   @F,ACCUM                                           0706  20810000
*                                   R6=R6+ACCUM;/* POINT TO APF LENGTH* 20820000
         AH    @6,ACCUM                                           0707  20830000
*                                   GOTO GETAPF;/* CONVERT TO PRINT   * 20840000
         BC    15,GETAPF                                          0708  20850000
*                                   END;                                20860000
*           IF USER > ACCUM             /* IS SSI DATA IN ENTRY       * 20870000
*              THEN DO;                 /* GET SSI DATA               * 20880000
@97E     EQU   *                                                  0710  20890000
@97F     LH    @F,ACCUM                                           0710  20900000
         CH    @F,USER                                            0710  20910000
         BC    10,@97D                                            0710  20920000
* COLLECT:                                                              20930000
*                   SW6='1'B;           /* TURN ON SSI SWITCH         * 20940000
COLLECT  OI    SWITCHES,B'00000100'                               0712  20950000
*                   ACCUM=ACCUM+10;     /* ADJUST POINTER             * 20960000
         LA    @F,10                                              0713  20970000
         AH    @F,ACCUM                                           0713  20980000
         STH   @F,ACCUM                                           0713  20990000
*                   R6=R6+ACCUM;        /* SET UP POINTER TO SSI DATA * 21000000
         AH    @6,ACCUM                                           0714  21010000
*                   SSI(5:8)=R6->SSIDATA;/* SAVE SSI DATA             * 21020000
         MVC   SSI+4(4),0(@6)                                     0715  21030000
*                   /* CHECK FOR APF DATA                             * 21040000
*                   IF SW8='1'B         /* AOS LOAD MODULE?           * 21050000
*                      & SW10='1'B      /* APF DATA PRESENT?          * 21060000
*                      THEN DO;         /* PROCESS APF DATA           * 21070000
         TM    SWITCHES,B'00000001'                               0716  21080000
         BC    12,@97C                                            0716  21090000
         TM    SWITCHES+1,B'01000000'                             0716  21100000
         BC    12,@97B                                            0716  21110000
*                           R6=R6+4;    /* POINT TO APF LENGTH IF THER* 21120000
         AH    @6,@D14                                            0718  21130000
* GETAPF:                                                               21140000
*                           WORKAREA=' ';/* BLANK OUT WORKAREA        * 21150000
GETAPF   MVI   WORKAREA,C' '                                      0719  21160000
         MVC   WORKAREA+1(7),WORKAREA                             0719  21170000
*                           WORKAREA(7)=APFCODE;/* GET APF CODE       * 21180000
         MVC   WORKAREA+6(1),1(@6)                                0720  21190000
*                           GENERATE;                                   21200000
         UNPK  HEXDATA(9),WORKAREA+6(2) UNPACK APF CODE                 21210000
         NC    HEXDATA(8),ZONEOFF                                       21220000
         TR    HEXDATA(8),HEXCHAR      TRANSLATE TO EBCIDIC             21230000
         DS    0H                                                       21240000
*                           SW10='1'B;  /* TURN ON APF INDICATOR      * 21250000
         OI    SWITCHES+1,B'01000000'                             0722  21260000
*                           APFDATA=HEXDATA;/* SAVE APF DATA TO PRINT * 21270000
         MVC   APFDATA(8),HEXDATA                                 0723  21280000
*                           IF SW6='1'B /* SSI DATA PRESENT?          * 21290000
*                              THEN R6=R6-4;/* MINUS SSI LENGTH       * 21300000
         TM    SWITCHES,B'00000100'                               0724  21310000
         BC    12,@97A                                            0724  21320000
         SH    @6,@D14                                            0725  21330000
*                           END;                                        21340000
@97A     EQU   *                                                  0726  21350000
*                   R6=R6-ACCUM;        /* RESET R6 ADDRESS TO BUFF   * 21360000
@97B     EQU   *                                                  0727  21370000
@97C     SH    @6,ACCUM                                           0727  21380000
*                   END;                                                21390000
* STORIT:                                                               21400000
*           /* CHECK TO SEE IF AN ENTRY SHOULD BE MADE TO ALIAS LIST  * 21410000
*           IF SW5='1'B                 /* SHOULD PDSNAME BE PUT IN     21420000
*                                         ALIASLST?                   * 21430000
*              THEN DO;                 /* ENTER ALIAS DATA           * 21440000
@97D     EQU   *                                                  0729  21450000
STORIT   TM    SWITCHES,B'00001000'                               0729  21460000
         BC    12,@979                                            0729  21470000
*                   ALNAME(ALCNT)=PDSNAME;/* SAVE ALIAS NAME          * 21480000
         LH    @1,ALCNT                                           0731  21490000
         SLA   @1,3                                               0731  21500000
         LA    @A,ALIASLST-8(@1)                                  0731  21510000
         MVC   0(8,@A),10(@6)                                     0731  21520000
*                   ALEPADDR(ALCNT,2:4)=EPADDR;/* SAVE ALIAS ENTRY      21530000
*                                         ADDRESS                     * 21540000
         LA    @A,ALIASLST+153(@1)                                0732  21550000
         MVC   0(3,@A),37(@6)                                     0732  21560000
*                   ALCNT=ALCNT+1;      /* POINT TO NEXT  AVAILABLE     21570000
*                                         ENTRY IN ARRAY              * 21580000
         LA    @F,1                                               0733  21590000
         AH    @F,ALCNT                                           0733  21600000
         STH   @F,ALCNT                                           0733  21610000
*                   SW5='0'B;           /* TURN OFF SWITCH 5          * 21620000
         NI    SWITCHES,B'11110111'                               0734  21630000
*                   END;                                                21640000
* BUMP:                                                                 21650000
*           /* CHECK FOR END OF DIRECTORY BLOCK                       * 21660000
*           IF KEYNAME=PDSNAME          /* IS IT LAST ENTRY?          * 21670000
*              THEN DO;                 /* REPOSITION DIRECTORY FOR     21680000
@979     EQU   *                                                  0736  21690000
BUMP     L     @1,PARMLIST+24                                     0736  21700000
         CLC   0(8,@1),10(@6)                                     0736  21710000
         BC    07,@978                                            0736  21720000
*                                         ANOTHER READ                * 21730000
*                   R6=BUFF;            /* RESET DIRECTORY POINTER    * 21740000
         L     @6,PARMLIST+24                                     0738  21750000
*                   GOTO SKIP;          /* READ ANOTHER DIRECTORY BLK * 21760000
         BC    15,SKIP                                            0739  21770000
*                   END;                                                21780000
*              ELSE R6=R6+USER;         /* POSITION DIRECTORY POINTER * 21790000
@978     AH    @6,USER                                            0741  21800000
*           GOTO PDSREAD;               /* PROCESS ANOTHER ENTRY      * 21810000
         BC    15,PDSREAD                                         0742  21820000
*           END;                                                        21830000
*   /****************************************************************** 21840000
*   /*  B E G I N   L I S T O B J  O P E R A T I O N                  * 21850000
*   /****************************************************************** 21860000
*   /* CHECK TO SEE IF OBJECT MODULE DATA SET IS PARTITIONED          * 21870000
*     IF PO='1'B                        /* IS IT A PARTITIONED DATA   * 21880000
*        THEN GOTO OBJPDS;              /* SET                        * 21890000
@9A6     TM    OPTNMAP+1,B'00100000'                              0744  21900000
         BC    01,OBJPDS                                          0745  21910000
* OBJSEQ:                                                               21920000
*     DCBDSORG='40'X;                   /* MAKE PODCB SEQUENTIAL      * 21930000
OBJSEQ   MVI   DCBDSORG,X'40'                                     0746  21940000
*     GEN;                        /* ISSUE OPEN AND GETBUF      */      21950000
         NI    DCBMACR1,X'FF'-DCBMRPT1 TURN OFF POINT  OPTION    YM5740 21960000
*                                      BIT IN DCB MACRF FIELD    YM5740 21970000
         OPEN  PODCB,MF=(E,OPEN2)      OPEN PODCB SEQUENTIAL            21980000
         TM    DCBOFLGS,X'10'          CHECK FOR SUCCESSFUL OPEN        21990000
         BZ    NOOPEN                  ISSUE ERROR MESSAGE              22000000
         GETBUF PODCB,R6               GET A WORK BUFFER                22010000
         LTR   R6,R6                   SET CONDITION CODE ON            22020000
         BZ    ERRMSG                  SET UP ERROR MESSAGE             22030000
         ST    R6,BUFF                 SAVE BUFFER ADDRESS              22040000
         DS    0H                                                       22050000
*     BLKCNT=(DCBBLKSI/DCBLRECL);       /* GET BLOCKING FACTOR        * 22060000
         LH    @E,DCBBLKSI                                        0748  22070000
         SRDA  @E,32                                              0748  22080000
         LH    @0,DCBLRECL                                        0748  22090000
         DR    @E,@0                                              0748  22100000
         STH   @F,PARMLIST+22                                     0748  22110000
*     DCBKEYLE='00'X;                   /* ZERO OUT KEY LENGTH        * 22120000
         MVI   DCBKEYLE,X'00'                                     0749  22130000
*   /* CHECK IF LOGICAL RECORD LENGTH IS 80                     M1204 * 22140000
*     IF DCBLRECLÂ¬=80                   /* IS LRECL = 80?       M1204 * 22150000
*        THEN DO;                       /* NO                   M1204 * 22160000
         LA    @F,80                                              0750  22170000
         CH    @F,DCBLRECL                                        0750  22180000
         BC    08,@976                                            0750  22190000
*             ERRORS=ERRORS|'0040'X;    /* TURN ON ERROR BIT    M1204 * 22200000
         OC    PARMLIST+32(2),@X90                                0752  22210000
*             R1=ADDR(PARMLIST);        /* PASS PARMLIST ADDR   M1204 * 22220000
         LA    @1,PARMLIST                                        0753  22230000
*             CALL HMBLKERR;            /* PROCESS ANY ERR MSGS M1204 * 22240000
         L     @F,@V2              ADDRESS OF HMBLKERR            0754  22250000
         BALR  @E,@F                                              0754  22260000
*             GOTO CLOSEIT;             /* TERMINATE THIS CARD  M1204 * 22270000
         BC    15,CLOSEIT                                         0755  22280000
*             END;                                                      22290000
*     R1=ADDR(PARMLIST);                /* SET UP PARMLIST TO PASS    * 22300000
@976     LA    @1,PARMLIST                                        0757  22310000
*     CALL HMBLKOBJ;                    /* PROCESS OBJECT MODULE      * 22320000
         L     @F,@V3              ADDRESS OF HMBLKOBJ            0758  22330000
         BALR  @E,@F                                              0758  22340000
*     R1=ADDR(PARMLIST);                /* SET UP PARMLIST TO PASS    * 22350000
         LA    @1,PARMLIST                                        0759  22360000
*     CALL HMBLKERR;                    /* PROCESS ANY ERRORS         * 22370000
         L     @F,@V2              ADDRESS OF HMBLKERR            0760  22380000
         BALR  @E,@F                                              0760  22390000
*     DCBKEYLE='08'X;                   /* RESET KEY LENGTH           * 22400000
         MVI   DCBKEYLE,X'08'                                     0761  22410000
*     GOTO CLOSEIT;                     /* CLOSE DCB                  * 22420000
         BC    15,CLOSEIT                                         0762  22430000
* ALL:                                                                  22440000
*   /****************************************************************** 22450000
*   /* PROCESS DEFAULT OF ALL MEMBERS ON A LISTLOAD OR LISTIDR OPTION * 22460000
*   /****************************************************************** 22470000
*   GEN;                                                                22480000
ALL      EQU   *                                                  0763  22490000
         NOTE  PODCB                   GET ADDR OF MEMBER               22500000
         ST    1,ALLADDR               SAVE TTR OF LAST MEM PROCESSED   22510000
         DS    0H                                                       22520000
*   LISTCNT=0;                          /* INIT. POINTER TO MEMBER      22530000
*                                          IN LIST BEING PROCESSED    * 22540000
         SR    @F,@F                                              0764  22550000
         STH   @F,LISTCNT                                         0764  22560000
*   NUMENTS=0;                          /* INIT. NUMBER OF ENTRIES    * 22570000
         STH   @F,BLDLIST                                         0765  22580000
* GETMEMS:                                                              22590000
*    TEMPCNT=INDICATR;                  /* SAVE USER COUNT FIELD      * 22600000
GETMEMS  MVC   TEMPCNT(1),21(@6)                                  0766  22610000
*    GEN;                                                               22620000
         XC    USER(2),USER            ZERO OUT USER FIELD              22630000
         MVC   USER+1(1),TEMPCNT       MOVE IN USER COUNT FIELD         22640000
         NI    USER+1,B'00011111'      TURN OFF HIGH ORDER 3 BYTES      22650000
         DS    0H                                                       22660000
*   USER=(USER * 2)+12;                 /* CALC LENGTH OF DIRC ENTRY  * 22670000
         LA    @E,2                                               0768  22680000
         MH    @E,USER                                            0768  22690000
         AH    @E,@D25                                            0768  22700000
         STH   @E,USER                                            0768  22710000
*   /* CHECK FOR MEMBER AND IF LAST ENTRY IN DIRECTORY BLOCK          * 22720000
*   IF ALIAS='0'B &                     /* IS IT A MEMBER?            * 22730000
*      PDSNAMEÂ¬= ENDNAME                /* NOT END OF DIRECTORY       * 22740000
*      THEN DO;                         /* PROCESS MEMBER             * 22750000
         TM    21(@6),B'10000000'                                 0769  22760000
         BC    05,@975                                            0769  22770000
         CLC   10(8,@6),ENDNAME                                   0769  22780000
         BC    08,@974                                            0769  22790000
*           /* CHECK FOR FIRST ENTRY IN BLDLIST                       * 22800000
*           IF NUMENTS=0                /* ARE THERE ENTRIES IN LIST? * 22810000
*              THEN LISTCNT=LISTCNT+1;  /* POINT INDEX TO FIRST ENTRY * 22820000
         SR    @F,@F                                              0771  22830000
         CH    @F,BLDLIST                                         0771  22840000
         BC    07,@973                                            0771  22850000
         LA    @F,1                                               0772  22860000
         AH    @F,LISTCNT                                         0772  22870000
         STH   @F,LISTCNT                                         0772  22880000
*           NUMENTS=NUMENTS+1;          /* KEEP COUNT OF TOTAL AMOUNT   22890000
*                                         OF ENTRIES IN BLDLIST       * 22900000
@973     LA    @F,1                                               0773  22910000
         AH    @F,BLDLIST                                         0773  22920000
         STH   @F,BLDLIST                                         0773  22930000
*           LISTNAME(NUMENTS)=PDSNAME;  /* SAVE MEMBER NAME           * 22940000
         LR    @1,@F                                              0774  22950000
         MH    @1,@D24                                            0774  22960000
         LA    @A,BLDLIST-10(@1)                                  0774  22970000
         MVC   0(8,@A),10(@6)                                     0774  22980000
*           END;                                                        22990000
*   /* CHECK IF IT IS LAST ENTRY IN DIRECTORY BLOCK                   * 23000000
*   IF KEYNAME=PDSNAME                  /* IS IT LAST ENTRY IN BLOCK  * 23010000
*      /* CHECK IF THERE WERE ANY ENTRIES IN BLDLIST                  * 23020000
*      THEN IF NUMENTS=0                /* WAS A MEMBER ENTERED IN      23030000
@974     EQU   *                                                  0776  23040000
@975     L     @1,PARMLIST+24                                     0776  23050000
         CLC   0(8,@1),10(@6)                                     0776  23060000
         BC    07,@972                                            0776  23070000
*                                         BLDLIST?                    * 23080000
*              THEN DO;                 /* PROCESS NO ENTRIES         * 23090000
         SR    @F,@F                                              0777  23100000
         CH    @F,BLDLIST                                         0777  23110000
         BC    07,@971                                            0777  23120000
*                   /* CHECK FOR END OF ACTIVE DIRECTORY BLOCKS       * 23130000
*                   IF KEYNAME=ENDNAME  /* END OF ACTIVE DIRECTORY?   * 23140000
*                      THEN GOTO CLOSEIT;/* CLOSE DCB                 * 23150000
         CLC   0(8,@1),ENDNAME                                    0779  23160000
         BC    08,CLOSEIT                                         0780  23170000
*                   R6=BUFF;            /* RESET DIRECTORY POINTER    * 23180000
         L     @6,PARMLIST+24                                     0781  23190000
*                   ALLADDR(4)='01'X;   /* POINT TO NEXT DIRECTORY BLK* 23200000
         MVI   ALLADDR+3,X'01'                                    0782  23210000
*                   GEN(POINT  PODCB,ALLADDR    POSITION R/W HEAD);     23220000
         POINT  PODCB,ALLADDR    POSITION R/W HEAD                      23230000
         DS    0H                                                       23240000
*                   GOTO SKIP;          /* READ A DIRECTORY BLOCK     * 23250000
         BC    15,SKIP                                            0784  23260000
*                   END;                                                23270000
*              ELSE DO;                 /* MEMBERS WERE ENTERED       * 23280000
*                   /* CHECK FOR END OF ACTIVE DIRECTORY BLOCKS       * 23290000
*                   IF KEYNAME=ENDNAME  /* IS IT LAST ACTIVE BLOCK?   * 23300000
*                      THEN SW7='1'B;   /* INDICATE NO MORE BLOCKS    * 23310000
@971     L     @1,PARMLIST+24                                     0787  23320000
         CLC   0(8,@1),ENDNAME                                    0787  23330000
         BC    07,@96F                                            0787  23340000
         OI    SWITCHES,B'00000010'                               0788  23350000
*                   SW1='0'B;           /*TURN OFF  ALL OF DIRECTORY  * 23360000
@96F     NI    SWITCHES,B'01111111'                               0789  23370000
*                   R6=BUFF;            /* RESET DIRECTORY POINTER    * 23380000
         L     @6,PARMLIST+24                                     0790  23390000
*                   NUMBER=NUMENTS;     /* SAVE NUMBER OF MEMBERS     * 23400000
         MVC   NUMBER(2),BLDLIST                                  0791  23410000
*                   GEN(POINT  PODCB,DIRORG);/* POSITION R/W HEAD TO    23420000
*                                         BEGINNING OF DIRECTORY      * 23430000
         POINT  PODCB,DIRORG                                            23440000
         DS    0H                                                       23450000
*                   GEN;                                                23460000
         BLDL  PODCB,BLDLIST           CREATE BLDL LIST                 23470000
         POINT PODCB,DIRORG            POSITION R/W HEAD TO BEGINNING   23480000
         DS    0H                                                       23490000
*                   GOTO SKIP;          /* READ A DIRECTORY BLOCK     * 23500000
         BC    15,SKIP                                            0794  23510000
*                   END;                                                23520000
*      ELSE DO;                         /* PROCESS NEXT ENTRY         * 23530000
*           R6=R6+USER;                 /* BUMP ENTRY POINTER         * 23540000
@972     AH    @6,USER                                            0797  23550000
*           GOTO GETMEMS;               /* PROCESS ANOTHER ENTRY      * 23560000
         BC    15,GETMEMS                                         0798  23570000
*           END;                                                        23580000
* ERRMSG:                                                               23590000
*   ERRORS=ERRORS | '0002'X;            /* SET UP ERROR MESSAGE       * 23600000
@96E     EQU   *                                                  0800  23610000
ERRMSG   OC    PARMLIST+32(2),@X91                                0800  23620000
*   R1=ADDR(PARMLIST);                  /* SET UP PARMLIST TO PASS    * 23630000
         LA    @1,PARMLIST                                        0801  23640000
*   CALL HMBLKERR;                      /* PROCESS ERROR MESSAGE      * 23650000
         L     @F,@V2              ADDRESS OF HMBLKERR            0802  23660000
         BALR  @E,@F                                              0802  23670000
*   GOTO CLOSEIT;                       /* CLOSE DCB AND TERMINATE    * 23680000
         BC    15,CLOSEIT                                         0803  23690000
* ENDOFILE:                                                             23700000
*   /****************************************************************** 23710000
*   /* END OF FILE ON DIRECTORY, PRINT OUT MODULE SUMMARY             * 23720000
*   /****************************************************************** 23730000
*   /* IF MODLIB SPECIFIED IN LISTIDR THEN BYPASS MODULE SUMMARY      * 23740000
*   IF MDLB='1'B                        /* MODLIB SPECIFIED           * 23750000
*     THEN                              /* YES                        * 23760000
ENDOFILE TM    PARMLIST+20,B'00001000'                            0804  23770000
*       GO TO FINDIT;                   /* GO POSITION READ WRITE HEAD* 23780000
         BC    01,FINDIT                                          0805  23790000
*     ELSE;                             /* NULL ELSE                  * 23800000
*                                                                       23810000
*   /* CHECK TO SEE IF ANY SYSTEM STATUS INDEX WAS ENCOUNTERED        * 23820000
*   IF SW6='1'B                         /* SSI DATA PRESENT           * 23830000
*      THEN DO;                         /* CONVERT TO PRINTABLE HEX   * 23840000
         TM    SWITCHES,B'00000100'                               0807  23850000
         BC    12,@96D                                            0807  23860000
*           GEN;                                                        23870000
         UNPK  HEXDATA(9),SSI+4(5)     ZONE SSI DATA                    23880000
         NC    HEXDATA(8),ZONEOFF      TURN OFF ALL ZONES               23890000
         TR    HEXDATA(8),HEXCHAR      GET PRINTABLE HEX CHARACTERS     23900000
         DS    0H                                                       23910000
*           SSI=HEXDATA;                /* SAVE PRINTABLE SSI DATA    * 23920000
         MVC   SSI(8),HEXDATA                                     0810  23930000
         BC    15,@96C                                            0812  23940000
*           END;                                                        23950000
*      ELSE SSI='NONE';                 /* INDICATE NO SSI DATA       * 23960000
@96D     MVC   SSI(4),@C51                                        0812  23970000
         MVI   SSI+4,C' '                                         0812  23980000
         MVC   SSI+5(3),SSI+4                                     0812  23990000
*   ALCNT=ALCNT-1;                      /* ADJUST ALCNT TO PROPER       24000000
*                                         COUNT IN ARRAY              * 24010000
@96C     LH    @F,ALCNT                                           0813  24020000
         BCTR  @F,0                                               0813  24030000
         STH   @F,ALCNT                                           0813  24040000
         BC    15,@DO96A                                          0814  24050000
*   DO A=ALCNT TO 1 BY -1;                                              24060000
*      WORKAREA=' ';                    /* BLANKOUT WORKAREA          * 24070000
@DO96B   MVI   WORKAREA,C' '                                      0815  24080000
         MVC   WORKAREA+1(7),WORKAREA                             0815  24090000
*      WORKAREA(5:7)=ALEPADDR(A,2:4);   /* PUT ALIAS ADDR IN WORKAREA * 24100000
         L     @1,A                                               0816  24110000
         SLA   @1,3                                               0816  24120000
         LA    @E,ALIASLST+153(@1)                                0816  24130000
         MVC   WORKAREA+4(3),0(@E)                                0816  24140000
*      GEN;                                                             24150000
         UNPK  HEXDATA(8),WORKAREA+4(4) ZONE ALIAS ENTRY POINT          24160000
         NC    HEXDATA(7),ZONEOFF      TURN OFF ZONES                   24170000
         TR    HEXDATA+1(6),HEXCHAR    SAVE PRINTABLE DATA              24180000
         DS    0H                                                       24190000
*      ALEPADDR(A,3:8)=HEXDATA(2:7);    /* SAVE PRINTABLE ADDRESS     * 24200000
         L     @1,A                                               0818  24210000
         SLA   @1,3                                               0818  24220000
         LA    @A,ALIASLST+154(@1)                                0818  24230000
         MVC   0(6,@A),HEXDATA+1                                  0818  24240000
*   END;                                                                24250000
*   LINE(1:120)=' ';                    /* CLEAR OUTPUT LINE          * 24260000
         L     @F,A                                               0819  24270000
         BCTR  @F,0                                               0819  24280000
@DO96A   ST    @F,A                                               0819  24290000
         CH    @F,@D7                                             0819  24300000
         BC    10,@DO96B                                          0819  24310000
         MVI   OUTLINE+1,C' '                                     0820  24320000
         MVC   OUTLINE+2(119),OUTLINE+1                           0820  24330000
*   ASCII='1';                          /* SKIP TO NEXT PAGE          * 24340000
         MVI   OUTLINE,C'1'                                       0821  24350000
*   LINE(35:75)=MODULE;                 /* SET UP MODULE HEADING      * 24360000
         MVC   OUTLINE+35(41),MODULE                              0822  24370000
*   GEN(PUT   OUTDCB,OUTLINE);          /* PRINT HEADING              * 24380000
         PUT   OUTDCB,OUTLINE                                           24390000
         DS    0H                                                       24400000
*                                                                       24410000
*   /* CONVERT ENTRY POINT TO ZONE THEN TO PRINTABLE CHARACTERS       * 24420000
*   GEN;                                                                24430000
         UNPK  HEXDATA(8),HEADEP+4(4)  ZONE ENTRY POINT FOR MEMBER      24440000
         NC    HEXDATA(7),ZONEOFF      TURN OFF ZONES                   24450000
         TR    HEXDATA+1(6),HEXCHAR    GET PRINTABLE CHARACTERS         24460000
         DS    0H                                                       24470000
*   HEADEP(3:8)=HEXDATA(2:7);           /* SAVE PRINTABLE ADDR        * 24480000
         MVC   HEADEP+2(6),HEXDATA+1                              0825  24490000
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          * 24500000
         MVI   OUTLINE+1,C' '                                     0826  24510000
         MVC   OUTLINE+2(119),OUTLINE+1                           0826  24520000
*   ASCII='0';                          /* SKIP 2 LINES BEFORE PRINT  * 24530000
         MVI   OUTLINE,C'0'                                       0827  24540000
*   LINE(10:22)=NAME;                   /****************************** 24550000
         MVC   OUTLINE+10(12),NAME                                0828  24560000
         MVI   OUTLINE+22,C' '                                    0828  24570000
*   LINE(24:31)=HEADNAME;               /* SET UP MEMBER NAME AND     * 24580000
         MVC   OUTLINE+24(8),HEADNAME                             0829  24590000
*   LINE(61:77)=MAIN;                   /* ENTRY POINT FOR PRINT      * 24600000
         MVC   OUTLINE+61(17),MAIN                                0830  24610000
*   LINE(79:84)=HEADEP(3:8);            /****************************** 24620000
         MVC   OUTLINE+79(6),HEADEP+2                             0831  24630000
*   GEN(PUT   OUTDCB,OUTLINE);          /* PRINT MEMBER               * 24640000
         PUT   OUTDCB,OUTLINE                                           24650000
         DS    0H                                                       24660000
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          * 24670000
         MVI   OUTLINE+1,C' '                                     0833  24680000
         MVC   OUTLINE+2(119),OUTLINE+1                           0833  24690000
*   LINE(19:31)=ALIASES;                /* SET UP ALIAS HEADING       * 24700000
         MVC   OUTLINE+19(13),ALIASES                             0834  24710000
*   LINE(51:106)=SECOND;                /* ALIAS ENTRY POINT HEADING  * 24720000
         MVC   OUTLINE+51(56),SECOND                              0835  24730000
*   GEN(PUT   OUTDCB,OUTLINE);          /* PRINT ALIAS HEADING        * 24740000
         PUT   OUTDCB,OUTLINE                                           24750000
         DS    0H                                                       24760000
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          * 24770000
         MVI   OUTLINE+1,C' '                                     0837  24780000
         MVC   OUTLINE+2(119),OUTLINE+1                           0837  24790000
*   DO B=1 TO ALCNT;                    /* PROCESS ALIASES            * 24800000
         LA    @F,1                                               0838  24810000
         BC    15,@DO966                                          0838  24820000
*      LINE(21:28)=ALNAME(B);           /* PUT OUT ALIAS NAME         * 24830000
@DO967   L     @1,B                                               0839  24840000
         SLA   @1,3                                               0839  24850000
         LA    @E,ALIASLST-8(@1)                                  0839  24860000
         MVC   OUTLINE+21(8),0(@E)                                0839  24870000
*      LINE(29:30)=ASTERISK(B);         /* PRINT OUT MEMBER MARKER    * 24880000
         L     @3,B                                               0840  24890000
         SLA   @3,1                                               0840  24900000
         LA    @E,ALIASLST+126(@3)                                0840  24910000
         MVC   OUTLINE+29(2),0(@E)                                0840  24920000
*      LINE(68:73)=ALEPADDR(B,3:8);     /* ALIAS ENTRY POINT          * 24930000
         LA    @E,ALIASLST+154(@1)                                0841  24940000
         MVC   OUTLINE+68(6),0(@E)                                0841  24950000
*      GEN(PUT   OUTDCB,OUTLINE);       /* PRINT ALIAS                * 24960000
         PUT   OUTDCB,OUTLINE                                           24970000
         DS    0H                                                       24980000
*      ASCII=' ';                       /* SKIP ONE LINE              * 24990000
         MVI   OUTLINE,C' '                                       0843  25000000
*      ALNAME(B)=' ';                   /* BLANK OUT ALIAS NAME       * 25010000
         L     @1,B                                               0844  25020000
         SLA   @1,3                                               0844  25030000
         LA    @A,ALIASLST-8(@1)                                  0844  25040000
         MVI   0(@A),C' '                                         0844  25050000
         MVC   1(7,@A),0(@A)                                      0844  25060000
*      ALEPADDR(B)=' ';                 /* BLANK OUT ENTRY ADDR       * 25070000
         LA    @A,ALIASLST+152(@1)                                0845  25080000
         MVI   0(@A),C' '                                         0845  25090000
         MVC   1(7,@A),0(@A)                                      0845  25100000
*      ASTERISK(B)=' ';                 /* BLANK OUT ASTERISK         * 25110000
         LA    @A,ALIASLST+126(@3)                                0846  25120000
         MVI   0(@A),C' '                                         0846  25130000
         MVI   1(@A),C' '                                         0846  25140000
*   END;                                                                25150000
*   ALCNT=1;                            /* POINT TO BEGINNING OF LIST * 25160000
         L     @F,B                                               0847  25170000
         AH    @F,@D7                                             0847  25180000
@DO966   ST    @F,B                                               0847  25190000
         CH    @F,ALCNT                                           0847  25200000
         BC    12,@DO967                                          0847  25210000
         LA    @F,1                                               0848  25220000
         STH   @F,ALCNT                                           0848  25230000
*   ASCII='-';                          /* SKIP THREE LINES           * 25240000
         MVI   OUTLINE,C'-'                                       0849  25250000
*   LINE='-';                           /* SET UP SEPARATOR LINE      * 25260000
         MVI   OUTLINE+1,C'-'                                     0850  25270000
         MVI   OUTLINE+2,C' '                                     0850  25280000
         MVC   OUTLINE+3(118),OUTLINE+2                           0850  25290000
*   LINE(2:120)=LINE(1:119);            /* CREATE LINE OF DASHES      * 25300000
         MVC   OUTLINE+2(119),OUTLINE+1                           0851  25310000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               * 25320000
           PUT   OUTDCB,OUTLINE                                         25330000
         DS    0H                                                       25340000
*   ASCII='0';                          /* SKIP TWO LINES             * 25350000
         MVI   OUTLINE,C'0'                                       0853  25360000
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          * 25370000
         MVI   OUTLINE+1,C' '                                     0854  25380000
         MVC   OUTLINE+2(119),OUTLINE+1                           0854  25390000
*   LINE(24:27)='****';                 /* SET UP ASTERISKS           * 25400000
         MVC   OUTLINE+24(4),@C93                                 0855  25410000
*   LINE(31:65)=LINKAGE;                /* SET UP ATTRIBUTE HEADING   * 25420000
         MVC   OUTLINE+31(35),LINKAGE                             0856  25430000
*   LINE(69:72)='****';                 /* SET UP ASTERISKS           * 25440000
         MVC   OUTLINE+69(4),@C93                                 0857  25450000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               * 25460000
           PUT   OUTDCB,OUTLINE                                         25470000
         DS    0H                                                       25480000
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          * 25490000
         MVI   OUTLINE+1,C' '                                     0859  25500000
         MVC   OUTLINE+2(119),OUTLINE+1                           0859  25510000
*   LINE(17:18)='**';                   /* SET UP ASTERISKS           * 25520000
         MVC   OUTLINE+17(2),@C93                                 0860  25530000
*   LINE(96:97)='**';                   /* SET UP BIT HEADING         * 25540000
         MVC   OUTLINE+96(2),@C93                                 0861  25550000
*   DO D=22 TO 82 BY 20;                /* SET UP BIT HEADING         * 25560000
         LA    @F,22                                              0862  25570000
         ST    @F,D                                               0862  25580000
*      LINE(D:D+11)='BIT  STATUS';      /* PUT BIT HEADING OUT        * 25590000
@DO963   L     @1,D                                               0863  25600000
         LA    @A,OUTLINE(@1)                                     0863  25610000
         MVC   0(11,@A),@C94                                      0863  25620000
         MVI   11(@A),C' '                                        0863  25630000
*   END;                                                                25640000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               * 25650000
         L     @F,D                                               0864  25660000
         AH    @F,@D26                                            0864  25670000
@DO962   ST    @F,D                                               0864  25680000
         CH    @F,@D27                                            0864  25690000
         BC    12,@DO963                                          0864  25700000
           PUT   OUTDCB,OUTLINE                                         25710000
         DS    0H                                                       25720000
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          * 25730000
         MVI   OUTLINE+1,C' '                                     0866  25740000
         MVC   OUTLINE+2(119),OUTLINE+1                           0866  25750000
*   ASCII='0';                          /* SKIP TWO LINES             * 25760000
         MVI   OUTLINE,C'0'                                       0867  25770000
*   LINE(23)='0';                       /* PUT OUT BIT ZERO           * 25780000
         MVI   OUTLINE+23,C'0'                                    0868  25790000
*   LINE(43)='1';                       /* PUT OUT BIT ONE            * 25800000
         MVI   OUTLINE+43,C'1'                                    0869  25810000
*   LINE(63)='2';                       /* PUT OUT BIT TWO            * 25820000
         MVI   OUTLINE+63,C'2'                                    0870  25830000
*   LINE(83)='3';                       /* PUT OUT BIT THREE          * 25840000
         MVI   OUTLINE+83,C'3'                                    0871  25850000
*   LINPTR=26;                          /* SET UP LINE POINTER        * 25860000
         LA    @F,26                                              0872  25870000
         STH   @F,LINPTR                                          0872  25880000
*   DO D=1 TO 4;                        /* PUT OUT FIRST FOUR           25890000
*                                         ATTRIBUTES                  * 25900000
         LA    @F,1                                               0873  25910000
         ST    @F,D                                               0873  25920000
*      /* CHECK FOR MODULE ATTRIBUTE AND TAKE PROPER DESCRIPTION      * 25930000
*      IF TESTBIT(D)=(ATTRIB1&TESTBIT(D))/* WHAT IS MODULE ATTRIBUTE? * 25940000
*         THEN LINE(LINPTR:LINPTR+8)=ATON(D);/* GET ON ATTRIBUTE      * 25950000
@DO95F   L     @1,D                                               0874  25960000
         LA    @E,TESTBIT-1(@1)                                   0874  25970000
         MVC   @CTEMP2(1),0(@E)                                   0874  25980000
         NC    @CTEMP2(1),ATTRIBUT                                0874  25990000
         CLC   @CTEMP2(1),0(@E)                                   0874  26000000
         BC    07,@95B                                            0874  26010000
         L     @3,D                                               0875  26020000
         MH    @3,@D5                                             0875  26030000
         LA    @E,ATNAME-9(@3)                                    0875  26040000
         LH    @4,LINPTR                                          0875  26050000
         LA    @A,OUTLINE(@4)                                     0875  26060000
         MVC   0(9,@A),0(@E)                                      0875  26070000
         BC    15,@95A                                            0876  26080000
*         ELSE LINE(LINPTR:LINPTR+9)=ATOFF(D);/* GET OFF ATTRIBUTE    * 26090000
@95B     L     @1,D                                               0876  26100000
         MH    @1,@D5                                             0876  26110000
         LA    @E,ATNAME+63(@1)                                   0876  26120000
         LH    @3,LINPTR                                          0876  26130000
         LA    @A,OUTLINE(@3)                                     0876  26140000
         MVC   0(9,@A),0(@E)                                      0876  26150000
         MVI   9(@A),C' '                                         0876  26160000
*      LINPTR=LINPTR+20;                /* BUMP OUTPUT POINTER BY 20  * 26170000
@95A     LA    @F,20                                              0877  26180000
         AH    @F,LINPTR                                          0877  26190000
         STH   @F,LINPTR                                          0877  26200000
*   END;                                                                26210000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               * 26220000
         L     @F,D                                               0878  26230000
         AH    @F,@D7                                             0878  26240000
@DO95E   ST    @F,D                                               0878  26250000
         CH    @F,@D14                                            0878  26260000
         BC    12,@DO95F                                          0878  26270000
           PUT   OUTDCB,OUTLINE                                         26280000
         DS    0H                                                       26290000
*   ASCII=' ';                          /* SKIP ONE LINE              * 26300000
         MVI   OUTLINE,C' '                                       0880  26310000
*   LINE(23)='4';                       /* PUT OUT BIT FOUR           * 26320000
         MVI   OUTLINE+23,C'4'                                    0881  26330000
*   LINE(43)='5';                       /* PUT OUT BIT FIVE           * 26340000
         MVI   OUTLINE+43,C'5'                                    0882  26350000
*   LINE(63)='6';                       /* PUT OUT BIT SIX            * 26360000
         MVI   OUTLINE+63,C'6'                                    0883  26370000
*   LINE(83)='7';                       /* PUT OUT BIT SEVEN          * 26380000
         MVI   OUTLINE+83,C'7'                                    0884  26390000
*   LINPTR=26;                          /* SET UP LINE POINTER        * 26400000
         LA    @F,26                                              0885  26410000
         STH   @F,LINPTR                                          0885  26420000
*   DO D=5 TO 8;                        /* FIND NEXT FOUR  ATTRIBUTES * 26430000
         LA    @F,5                                               0886  26440000
         ST    @F,D                                               0886  26450000
*      /* CHECK FOR MODULE ATTRIBUTE AND TAKE PROPER DESCRIBTION      * 26460000
*      IF TESTBIT(D)=(ATTRIB1&TESTBIT(D))/* WHAT IS MODULE ATTRIBUTE? * 26470000
*         THEN LINE(LINPTR:LINPTR+8)=ATON(D);/* GET ON ATTRIBUTE      * 26480000
@DO959   L     @1,D                                               0887  26490000
         LA    @E,TESTBIT-1(@1)                                   0887  26500000
         MVC   @CTEMP2(1),0(@E)                                   0887  26510000
         NC    @CTEMP2(1),ATTRIBUT                                0887  26520000
         CLC   @CTEMP2(1),0(@E)                                   0887  26530000
         BC    07,@955                                            0887  26540000
         L     @3,D                                               0888  26550000
         MH    @3,@D5                                             0888  26560000
         LA    @E,ATNAME-9(@3)                                    0888  26570000
         LH    @4,LINPTR                                          0888  26580000
         LA    @A,OUTLINE(@4)                                     0888  26590000
         MVC   0(9,@A),0(@E)                                      0888  26600000
         BC    15,@954                                            0889  26610000
*         ELSE LINE(LINPTR:LINPTR+9)=ATOFF(D);/* GET OFF ATTRIBUTE    * 26620000
@955     L     @1,D                                               0889  26630000
         MH    @1,@D5                                             0889  26640000
         LA    @E,ATNAME+63(@1)                                   0889  26650000
         LH    @3,LINPTR                                          0889  26660000
         LA    @A,OUTLINE(@3)                                     0889  26670000
         MVC   0(9,@A),0(@E)                                      0889  26680000
         MVI   9(@A),C' '                                         0889  26690000
*      LINPTR=LINPTR+20;                /* BUMP OUTPUT POINTER BY 20  * 26700000
@954     LA    @F,20                                              0890  26710000
         AH    @F,LINPTR                                          0890  26720000
         STH   @F,LINPTR                                          0890  26730000
*   END;                                                                26740000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               * 26750000
         L     @F,D                                               0891  26760000
         AH    @F,@D7                                             0891  26770000
@DO958   ST    @F,D                                               0891  26780000
         CH    @F,@D6                                             0891  26790000
         BC    12,@DO959                                          0891  26800000
           PUT   OUTDCB,OUTLINE                                         26810000
         DS    0H                                                       26820000
*   LINE(23)='8';                       /* PUT OUT BIT EIGHT          * 26830000
         MVI   OUTLINE+23,C'8'                                    0893  26840000
*   LINE(43)='9';                       /* PUT OUT BIT NINE           * 26850000
         MVI   OUTLINE+43,C'9'                                    0894  26860000
*   LINE(63:64)='10';                   /* PUT OUT BIT TEN            * 26870000
         MVC   OUTLINE+63(2),@C103                                0895  26880000
*   LINE(83:84)='11';                   /* PUT OUT BIT ELEVEN         * 26890000
         MVC   OUTLINE+83(2),@C104                                0896  26900000
*   LINPTR=26;                          /* SET UP LINE POINTER        * 26910000
         LA    @F,26                                              0897  26920000
         STH   @F,LINPTR                                          0897  26930000
*   DO E=1 TO 4;                        /* FIND SECOND BYTE FIRST       26940000
*                                         FOUR ATTRIBUTES             * 26950000
         LA    @F,1                                               0898  26960000
         ST    @F,E                                               0898  26970000
*      /* CHECK FOR MODULE ATTRIBUTE AND TAKE PROPER DESCRIPTION      * 26980000
*      IF TESTBIT(E)=(ATTRIB2&TESTBIT(E))/* WHAT IS MODULE ATTRIBUTE? * 26990000
*         THEN LINE(LINPTR:LINPTR+8)=SECATON(E);/* GET ON ATTRIBUTE   * 27000000
@DO953   L     @1,E                                               0899  27010000
         LA    @E,TESTBIT-1(@1)                                   0899  27020000
         MVC   @CTEMP2(1),0(@E)                                   0899  27030000
         NC    @CTEMP2(1),ATTRIBUT+1                              0899  27040000
         CLC   @CTEMP2(1),0(@E)                                   0899  27050000
         BC    07,@94F                                            0899  27060000
         L     @3,E                                               0900  27070000
         MH    @3,@D5                                             0900  27080000
         LA    @E,ATNAME+135(@3)                                  0900  27090000
         LH    @4,LINPTR                                          0900  27100000
         LA    @A,OUTLINE(@4)                                     0900  27110000
         MVC   0(9,@A),0(@E)                                      0900  27120000
         BC    15,@94E                                            0901  27130000
*         ELSE LINE(LINPTR:LINPTR+9)=SECATOFF(E);/* GET OFF ATTRIBUTE * 27140000
@94F     L     @1,E                                               0901  27150000
         MH    @1,@D5                                             0901  27160000
         LA    @E,ATNAME+207(@1)                                  0901  27170000
         LH    @3,LINPTR                                          0901  27180000
         LA    @A,OUTLINE(@3)                                     0901  27190000
         MVC   0(9,@A),0(@E)                                      0901  27200000
         MVI   9(@A),C' '                                         0901  27210000
*      LINPTR=LINPTR+20;                /* BUMP OUTPUT POINTER BY 20  * 27220000
@94E     LA    @F,20                                              0902  27230000
         AH    @F,LINPTR                                          0902  27240000
         STH   @F,LINPTR                                          0902  27250000
*   END;                                                                27260000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               * 27270000
         L     @F,E                                               0903  27280000
         AH    @F,@D7                                             0903  27290000
@DO952   ST    @F,E                                               0903  27300000
         CH    @F,@D14                                            0903  27310000
         BC    12,@DO953                                          0903  27320000
           PUT   OUTDCB,OUTLINE                                         27330000
         DS    0H                                                       27340000
*   LINE(23:24)='12';                   /* PUT OUT BIT TWELVE         * 27350000
         MVC   OUTLINE+23(2),@C105                                0905  27360000
*   LINE(43:44)='13';                   /* PUT OUT BIT THIRTEEN       * 27370000
         MVC   OUTLINE+43(2),@C106                                0906  27380000
*   LINE(63:64)='14';                   /* PUT OUT BIT FOURTEEN       * 27390000
         MVC   OUTLINE+63(2),@C107                                0907  27400000
*   LINE(83:84)='15';                   /* PUT OUT BIT FIFTEEN        * 27410000
         MVC   OUTLINE+83(2),@C108                                0908  27420000
*   LINPTR=26;                          /* SET UP LINE POINTER        * 27430000
         LA    @F,26                                              0909  27440000
         STH   @F,LINPTR                                          0909  27450000
*   DO E=5 TO 8;                        /*FIND LAST FOUR ATTRIBUTES   * 27460000
         LA    @F,5                                               0910  27470000
         ST    @F,E                                               0910  27480000
*      /* CHECK FOR MODULE ATTRIBUTE AND TAKE PROPER DESCRIPTION      * 27490000
*      IF TESTBIT(E)=(ATTRIB2&TESTBIT(E))/* WHAT IS MODULE ATTRIBUTE? * 27500000
*         THEN LINE(LINPTR:LINPTR+8)=SECATON(E);/* GET ON ATTRIBUTE   * 27510000
@DO94D   L     @1,E                                               0911  27520000
         LA    @E,TESTBIT-1(@1)                                   0911  27530000
         MVC   @CTEMP2(1),0(@E)                                   0911  27540000
         NC    @CTEMP2(1),ATTRIBUT+1                              0911  27550000
         CLC   @CTEMP2(1),0(@E)                                   0911  27560000
         BC    07,@949                                            0911  27570000
         L     @3,E                                               0912  27580000
         MH    @3,@D5                                             0912  27590000
         LA    @E,ATNAME+135(@3)                                  0912  27600000
         LH    @4,LINPTR                                          0912  27610000
         LA    @A,OUTLINE(@4)                                     0912  27620000
         MVC   0(9,@A),0(@E)                                      0912  27630000
         BC    15,@948                                            0913  27640000
*         ELSE LINE(LINPTR:LINPTR+9)=SECATOFF(E);/* GET OFF ATTRIBUTE * 27650000
@949     L     @1,E                                               0913  27660000
         MH    @1,@D5                                             0913  27670000
         LA    @E,ATNAME+207(@1)                                  0913  27680000
         LH    @3,LINPTR                                          0913  27690000
         LA    @A,OUTLINE(@3)                                     0913  27700000
         MVC   0(9,@A),0(@E)                                      0913  27710000
         MVI   9(@A),C' '                                         0913  27720000
*      LINPTR=LINPTR+20;                /* BUMP OUTPUT POINTER BY 20  * 27730000
@948     LA    @F,20                                              0914  27740000
         AH    @F,LINPTR                                          0914  27750000
         STH   @F,LINPTR                                          0914  27760000
*   END;                                                                27770000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               * 27780000
         L     @F,E                                               0915  27790000
         AH    @F,@D7                                             0915  27800000
@DO94C   ST    @F,E                                               0915  27810000
         CH    @F,@D6                                             0915  27820000
         BC    12,@DO94D                                          0915  27830000
           PUT   OUTDCB,OUTLINE                                         27840000
         DS    0H                                                       27850000
*   ASCII='0';                          /* SKIP ONE LINE              * 27860000
         MVI   OUTLINE,C'0'                                       0917  27870000
*   LINE='-';                           /* SET UP SEPARATOR LINE      * 27880000
         MVI   OUTLINE+1,C'-'                                     0918  27890000
         MVI   OUTLINE+2,C' '                                     0918  27900000
         MVC   OUTLINE+3(118),OUTLINE+2                           0918  27910000
*   LINE(2:120)=LINE(1:119);            /* CREATE LINE OF DASHES      * 27920000
         MVC   OUTLINE+2(119),OUTLINE+1                           0919  27930000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT A LINE               * 27940000
           PUT   OUTDCB,OUTLINE                                         27950000
         DS    0H                                                       27960000
*   ASCII='-';                          /* SKIP 3 LINES               * 27970000
         MVI   OUTLINE,C'-'                                       0921  27980000
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          * 27990000
         MVI   OUTLINE+1,C' '                                     0922  28000000
         MVC   OUTLINE+2(119),OUTLINE+1                           0922  28010000
*   LINE(37:47)=MODSSI;                 /* PUT OUT SSI HEADING        * 28020000
         MVC   OUTLINE+37(11),MODSSI                              0923  28030000
*   LINE(50:57)=SSI;                    /* PUT OUT SSI                * 28040000
         MVC   OUTLINE+50(8),SSI                                  0924  28050000
*   GEN(PUT   OUTDCB,OUTLINE);          /* PRINT SSI INFORMATION      * 28060000
         PUT   OUTDCB,OUTLINE                                           28070000
         DS    0H                                                       28080000
*   LINE(1:120)=' ';                    /* BLANK OUTPUT LINE          * 28090000
         MVI   OUTLINE+1,C' '                                     0926  28100000
         MVC   OUTLINE+2(119),OUTLINE+1                           0926  28110000
*   LINE(37:43)='APFCODE';              /* SET UP HEADING             * 28120000
         MVC   OUTLINE+37(7),@C109                                0927  28130000
*   LINE(50:57)=APFDATA;                /* SET UP APF CODE            * 28140000
         MVC   OUTLINE+50(8),APFDATA                              0928  28150000
*   ASCII=' ';                          /* SKIP ONE LINE              * 28160000
         MVI   OUTLINE,C' '                                       0929  28170000
*   GEN(  PUT   OUTDCB,OUTLINE);        /* PRINT APF DATA             * 28180000
           PUT   OUTDCB,OUTLINE                                         28190000
         DS    0H                                                       28200000
*   /* CHECK IF ANY AOS MESSAGES ARE REQUIRED                         * 28210000
*   IF SW8='1'B                         /* AOS LINKAGE EDITOR USED    * 28220000
*      THEN DO;                         /* PUT OUT ADDITIONAL MESSAGES* 28230000
         TM    SWITCHES,B'00000001'                               0931  28240000
         BC    12,@947                                            0931  28250000
*           ASCII='0';                  /* SKIP TWO LINES             * 28260000
         MVI   OUTLINE,C'0'                                       0933  28270000
*           LINE(20:60)='*****LOAD MODULE PROCESSED BY VS LINKAGE';     28280000
         MVC   OUTLINE+20(40),@C110                               0934  28290000
         MVI   OUTLINE+60,C' '                                    0934  28300000
*                                       /*                     YM3474 * 28310000
*           LINE(61:66)='EDITOR';       /* SET UP MESSAGE             * 28320000
         MVC   OUTLINE+61(6),@C111                                0935  28330000
*           GEN(PUT   OUTDCB,OUTLINE);  /* PRINT OUT MESSAGE          * 28340000
         PUT   OUTDCB,OUTLINE                                           28350000
         DS    0H                                                       28360000
*           /* CHECK FOR ADDITIONAL MESSAGES                          * 28370000
*           IF SW9='1'B                 /* PAGE MESSAGE NEEDED        * 28380000
*              THEN DO;                 /* SET UP PAGE BOUNDARY MESS. * 28390000
         TM    SWITCHES+1,B'10000000'                             0937  28400000
         BC    12,@946                                            0937  28410000
*                   ASCII=' ';          /* SPACE 1 LINE               * 28420000
         MVI   OUTLINE,C' '                                       0939  28430000
*                   LINE(20:67)='***PAGE ALIGNMENT REQUIRED';           28440000
         MVC   OUTLINE+20(26),@C112                               0940  28450000
         MVI   OUTLINE+46,C' '                                    0940  28460000
         MVC   OUTLINE+47(21),OUTLINE+46                          0940  28470000
*                   GEN(PUT   OUTDCB,OUTLINE);/* PRINT PAGE MESSAGE   * 28480000
         PUT   OUTDCB,OUTLINE                                           28490000
         DS    0H                                                       28500000
*                   END;                                                28510000
*           END;                                                        28520000
@946     EQU   *                                                  0943  28530000
*   RESTRICT (R4);                                                      28540000
@947     EQU   *                                                  0944  28550000
* FINDIT:                                                               28560000
*   /****************************************************************** 28570000
*   /* POSITION READ/WRITE HEAD AND PASS CONTROL TO PROCESSING ROUTINE* 28580000
*   /****************************************************************** 28590000
*   R4=(LISTCNT-1)*14;                  /* POSITIONING FOR R/W HEAD   * 28600000
FINDIT   LH    @F,LISTCNT                                         0945  28610000
         BCTR  @F,0                                               0945  28620000
         MH    @F,@D24                                            0945  28630000
         LR    @4,@F                                              0945  28640000
*   GEN(FIND  PODCB,LTTR(R4),C);        /* POSITION R/W HEAD FOR      * 28650000
         FIND  PODCB,LTTR(R4),C                                         28660000
         DS    0H                                                       28670000
*   RELEASE (R4);                                                       28680000
*                                       /* NEXT ROUTINE               * 28690000
*   MEMNAME=LISTNAME(LISTCNT,1:8);      /* PASS MEMBER NAME FOR TITLE * 28700000
         LH    @1,LISTCNT                                         0948  28710000
         MH    @1,@D24                                            0948  28720000
         LA    @E,BLDLIST-10(@1)                                  0948  28730000
         MVC   PARMLIST+36(8),0(@E)                               0948  28740000
*   /* CHECK FOR LISTIDR OPTION IN ORDER TO CALL HMBLKIDR             * 28750000
*   IF LISTIDR='1'B                     /* IS IT IDR OPERATION?       * 28760000
*      THEN GOTO IDRCHK;                /* CALL HMBLKIDR              * 28770000
         TM    OPTNMAP,B'00100000'                                0949  28780000
         BC    01,IDRCHK                                          0950  28790000
*   /* CHECK IF MODLIST OUTPUT WAS SPECIFIED AND CALL HMBLKLDM        * 28800000
*   IF MODLIST='0'B                     /* IS IT A MODLIST OPERATION? * 28810000
*      & SW2='0'B                       /* IS BYPASS HMBLKLDM ON?     * 28820000
*      THEN DO;                         /* GOTO HMBLKLDM              * 28830000
         TM    OPTNMAP,B'00000001'                                0951  28840000
         BC    05,@945                                            0951  28850000
         TM    SWITCHES,B'01000000'                               0951  28860000
         BC    05,@944                                            0951  28870000
*           R1=ADDR(PARMLIST);          /* STORE PARAMETER ADDRESS    * 28880000
         LA    @1,PARMLIST                                        0953  28890000
*           CALL HMBLKLDM;              /* GOTO MODLIST ROUTINE       * 28900000
         L     @F,@V4              ADDRESS OF HMBLKLDM            0954  28910000
         BALR  @E,@F                                              0954  28920000
*           SW2='1'B;                   /* INDICATES MODLIST OUTPUT   * 28930000
         OI    SWITCHES,B'01000000'                               0955  28940000
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS * 28950000
         LA    @1,PARMLIST                                        0956  28960000
*           CALL HMBLKERR;              /* PROCESS ANY ERROR MSGS     * 28970000
         L     @F,@V2              ADDRESS OF HMBLKERR            0957  28980000
         BALR  @E,@F                                              0957  28990000
*           GOTO FINDIT;                /* REPOSITION R/W HEAD        * 29000000
         BC    15,FINDIT                                          0958  29010000
*           END;                                                        29020000
*   /* CHECK IF XREF OUTPUT WAS SPECIFIED AND CALL HMBLKXRF           * 29030000
*   IF XREF='0'B                        /* SHOULD HMBLKXRF BE CALLED? * 29040000
*      & SW3='0'B                       /* IS HMBLKXRF BYPASS ON?     * 29050000
*      THEN DO;                         /* GOTO HMBLKXRF              * 29060000
@944     EQU   *                                                  0960  29070000
@945     TM    OPTNMAP+1,B'10000000'                              0960  29080000
         BC    05,@943                                            0960  29090000
         TM    SWITCHES,B'00100000'                               0960  29100000
         BC    05,@942                                            0960  29110000
*           R1=ADDR(PARMLIST);          /* STORE PARMLIST ADDR        * 29120000
         LA    @1,PARMLIST                                        0962  29130000
*           CALL HMBLKXRF;              /* GOTO XREF ROUTINE          * 29140000
         L     @F,@V5              ADDRESS OF HMBLKXRF            0963  29150000
         BALR  @E,@F                                              0963  29160000
*           GOTO BITCHK;                /* PROCESS ERROR MESSAGES     * 29170000
         BC    15,BITCHK                                          0964  29180000
*           END;                                                        29190000
*   GOTO BITCHK;                        /* CHECK FOR ERRORS           * 29200000
* IDRCHK:                                                               29210000
*   /* CHECK IF IDENT OUTPUT FOT LISTIDR WAS SPECIFIED                * 29220000
*   IF IDENT='1'B                       /* IS IT AN IDENT OPERATION   * 29230000
*      THEN IDRFLAG='1'B;               /* INDICATE IDENT OUTPUT      * 29240000
IDRCHK   TM    OPTNMAP+1,B'01000000'                              0967  29250000
         BC    12,@941                                            0967  29260000
         OI    PARMLIST+20,B'10000000'                            0968  29270000
*   R1=ADDR(PARMLIST);                  /* STORE PARMLIST ADDR        * 29280000
@941     LA    @1,PARMLIST                                        0969  29290000
*   CALL  HMBLKIDR;                     /* GOTO IDR ROUTINE           * 29300000
         L     @F,@V6              ADDRESS OF HMBLKIDR            0970  29310000
         BALR  @E,@F                                              0970  29320000
*   IDRFLAG='0'B;                       /* TURN OFF IDENT OUTPUT      * 29330000
         NI    PARMLIST+20,B'01111111'                            0971  29340000
* BITCHK:                                                               29350000
*   R1=ADDR(PARMLIST);                  /* SAVE PARMLIST ADDR TO PASS * 29360000
BITCHK   LA    @1,PARMLIST                                        0972  29370000
*   CALL HMBLKERR;                      /* PROCESS ANY ERROR MSGS     * 29380000
         L     @F,@V2              ADDRESS OF HMBLKERR            0973  29390000
         BALR  @E,@F                                              0973  29400000
* OUT:                                                                  29410000
*   SCATLEN=0;                          /* ZERO OUT SCATTER DATA      * 29420000
OUT      SR    @F,@F                                              0974  29430000
         ST    @F,PARMLIST+28                                     0974  29440000
*   OVLYFLAG='0'B;                      /* TURN OFF OVERLAY BIT       * 29450000
         NI    PARMLIST+20,B'10111111'                            0975  29460000
*   SSI='NONE';                         /* INITIALIZE SSI TO NONE     * 29470000
         MVC   SSI(4),@C51                                        0976  29480000
         MVI   SSI+4,C' '                                         0976  29490000
         MVC   SSI+5(3),SSI+4                                     0976  29500000
*   SW6='0'B;                           /* TURN OFF SSI DATA SWITCH   * 29510000
         NI    SWITCHES,B'10011010'                               0977  29520000
*   SW3='0'B;                           /* TURN OFF HMBLKXRF BYPASS   * 29530000
*   SW2='0'B;                           /* TURN OFF MODLIST BYPASS    * 29540000
*   SW8='0'B;                           /* TURN OFF AOS-EDITOR SWITCH * 29550000
*   SW9='0'B;                           /* TURN OFF PAGE ALIGNMENT    * 29560000
         NI    SWITCHES+1,B'00111111'                             0981  29570000
*   SW10='0'B;                          /* TURN OFF APF INDICATOR     * 29580000
*   /* CHECK IF ALL OF DIRECTORY IS TO BE PROCESSED                   * 29590000
*   IF MEMBERÂ¬='1'B                     /* PROCESS ALL OF DIRECTORY?  * 29600000
*      THEN DO;                         /* ALL OF DIRECTORY           * 29610000
         TM    OPTNMAP,B'00000010'                                0983  29620000
         BC    01,@940                                            0983  29630000
*           HEADNAME(1:8)=' ';          /* BLANK OUT ENTRY NAME       * 29640000
         MVI   HEADNAME,C' '                                      0985  29650000
         MVC   HEADNAME+1(7),HEADNAME                             0985  29660000
*           HEADEP(1:8)=' ';            /* BLANK OUT ENTRY POINT      * 29670000
         MVI   HEADEP,C' '                                        0986  29680000
         MVC   HEADEP+1(7),HEADEP                                 0986  29690000
*           LISTCNT=LISTCNT+1;          /* BUMP BLDLIST POINTER       * 29700000
         LA    @F,1                                               0987  29710000
         AH    @F,LISTCNT                                         0987  29720000
         STH   @F,LISTCNT                                         0987  29730000
*           /* WAS ALL ENTRIES IN BLDLIST PROCESSED?                  * 29740000
*           IF LISTCNT>NUMENTS          /* DO WE NEED ANOTHER BLDLIST * 29750000
*              THEN DO;                 /* CHECK FURTHER              * 29760000
         LH    @F,BLDLIST                                         0988  29770000
         CH    @F,LISTCNT                                         0988  29780000
         BC    10,@93F                                            0988  29790000
*                   /* WAS ALL DIRECTORY BLOCKS PROCESSED?            * 29800000
*                   IF SW7='1'B         /* LAST DIRECTORY PROCESSED?  * 29810000
*                      THEN GOTO CLOSEIT;/* CLOSE DCB                 * 29820000
         TM    SWITCHES,B'00000010'                               0990  29830000
         BC    01,CLOSEIT                                         0991  29840000
*                   SW1='1'B;           /* INDICATE ALL OF DIRECTORY  * 29850000
         OI    SWITCHES,B'10000000'                               0992  29860000
*                   R6=BUFF;            /* RESET REGISTER 6           * 29870000
         L     @6,PARMLIST+24                                     0993  29880000
*                   ALLADDR(4)='01'X;   /* SET UP POINT MACRO         * 29890000
         MVI   ALLADDR+3,X'01'                                    0994  29900000
*                   GEN(POINT  PODCB,ALLADDR);/* PNT TO NEXT DIRECTORY* 29910000
         POINT  PODCB,ALLADDR                                           29920000
         DS    0H                                                       29930000
*                   GOTO SKIP;          /* READ A DIRECTORY BLOCK     * 29940000
         BC    15,SKIP                                            0996  29950000
*                   END;                                                29960000
*           END;                                                        29970000
*      ELSE  LISTCNT=LISTCNT+1;         /* POINT TO NEXT ENTRY IN       29980000
*                                         MEMLIST                     * 29990000
@940     LA    @F,1                                               0999  30000000
         AH    @F,LISTCNT                                         0999  30010000
         STH   @F,LISTCNT                                         0999  30020000
*   /* WERE ALL ENTRIES IN BLDLIST PROCESSED                          * 30030000
*   IF NUMBER<LISTCNT                   /* ARE ALL MEMBERS IN MEMLIST   30040000
*                                         PROCESSED?                  * 30050000
*      THEN GOTO CLOSEIT;               /* CLOSE DCB                  * 30060000
@93E     LH    @F,LISTCNT                                         1000  30070000
         CH    @F,NUMBER                                          1000  30080000
         BC    02,CLOSEIT                                         1001  30090000
*   HEADNAME(1:8)=' ';                  /* CLEAR OUT MEMBER NAME      * 30100000
         MVI   HEADNAME,C' '                                      1002  30110000
         MVC   HEADNAME+1(7),HEADNAME                             1002  30120000
*   HEADEP(1:8)=' ';                    /* CLEAR OUT ENTRY ADDRESS    * 30130000
         MVI   HEADEP,C' '                                        1003  30140000
         MVC   HEADEP+1(7),HEADEP                                 1003  30150000
*   GEN(  POINT PODCB,DIRORG);          /* REPOSITION TO BEGINNING OF   30160000
*                                         DIRECTORY                   * 30170000
           POINT PODCB,DIRORG                                           30180000
         DS    0H                                                       30190000
*   R6=BUFF;                            /* RESET BUFFER ADDRESS       * 30200000
         L     @6,PARMLIST+24                                     1005  30210000
*   GOTO BLDCH;                         /* READ DIRECTORY             * 30220000
         BC    15,BLDCH                                           1006  30230000
* OBJPDS:                                                               30240000
*   /* CHECK IF LOGICAL RECORD LENGTH IS 80                           * 30250000
*   IF DCBLRECLÂ¬=80 | DCBRECFM='C0'X    /* IS LRECL=80 OR    @ZA15060 * 30260000
*      THEN DO;                         /* RECFM UNDEFINED   @ZA15060 * 30270000
OBJPDS   LA    @F,80                                              1007  30280000
         CH    @F,DCBLRECL                                        1007  30290000
         BC    07,@93D                                            1007  30300000
         CLI   DCBRECFM,X'C0'                                     1007  30310000
         BC    07,@93C                                            1007  30320000
*           ERRORS=ERRORS|'0040'X;      /* TURN ON ERROR BIT          * 30330000
@93D     OC    PARMLIST+32(2),@X90                                1009  30340000
*           R1=ADDR(PARMLIST);          /* SAVE PARMLIST ADDR TO PASS * 30350000
         LA    @1,PARMLIST                                        1010  30360000
*           CALL HMBLKERR;              /* PROCESS ANY ERROR MSGS     * 30370000
         L     @F,@V2              ADDRESS OF HMBLKERR            1011  30380000
         BALR  @E,@F                                              1011  30390000
         BC    15,@93B                                            1013  30400000
*           END;                                                        30410000
*      ELSE                             /* LOGICAL RECORD LENGTH GOOD * 30420000
*           DO;                     /* AND RECFM MUST BE FB  @ZA15060 * 30430000
*           BLKCNT=(DCBBLKSI/DCBLRECL); /* RECORDS PER BLOCK @ZA33776 * 30440000
@93C     LH    @E,DCBBLKSI                                        1014  30450000
         SRDA  @E,32                                              1014  30460000
         LH    @0,DCBLRECL                                        1014  30470000
         DR    @E,@0                                              1014  30480000
         STH   @F,PARMLIST+22                                     1014  30490000
*              SW4='1'B;                /* TURN ON BLDL SWITCH        * 30500000
         OI    SWITCHES,B'00010000'                               1015  30510000
*              GOTO SORT;               /* SORT MEMBERS FOR BLDL      * 30520000
         BC    15,SORT                                            1016  30530000
*           END;                                                        30540000
* CLOSEIT:  /* TERMINATE PROCESSING OF CONTROL CARD                   * 30550000
*         R6=BUFF;                      /* BUFFER ADDR                * 30560000
@93B     EQU   *                                                  1018  30570000
CLOSEIT  L     @6,PARMLIST+24                                     1018  30580000
*           GEN;                                                        30590000
         FREEBUF PODCB,R6              FREE BUFFER                      30600000
         CLOSE PODCB,MF=(E,CLOSR2)     CLOSE PODCB                      30610000
         FREEPOOL PODCB                RELEASE BUFFER STORAGE           30620000
         DS    0H                                                       30630000
*         DCBDSORG='02'X;               /* MAKE PODCB PARTITIONED     * 30640000
         MVI   DCBDSORG,X'02'                                     1020  30650000
*           /* CHECK TO SEE IF FREEMAIN SHOULD BE BYPASSED            * 30660000
*           IF PO='0'B &                /* IS IT OBJECT SEQUENTIAL?   * 30670000
*              LISTOBJ='1'B             /* LISTOBJ OPERATION?         * 30680000
*              THEN GOTO AAB1;          /* READ ANOTHER CONTROL CARD  * 30690000
         TM    OPTNMAP+1,B'00100000'                              1021  30700000
         BC    05,@93A                                            1021  30710000
         TM    OPTNMAP,B'01000000'                                1021  30720000
         BC    03,AAB1                                            1022  30730000
*           GEN;                        /* ISSUE FREEMAIN FOR SP22    * 30740000
@939     EQU   *                                                  1023  30750000
@93A     EQU   *                                                  1023  30760000
         FREEMAIN V,A=AREAGET,SP=22,MF=(E,SPFREE) FREE WORKING STORAGE  30770000
         DS    0H                                                       30780000
*           GOTO AAB1;                  /* READ ANOTHER CONTROL CARD  * 30790000
         BC    15,AAB1                                            1024  30800000
*   /****************************************************************** 30810000
*   /* PROCESS MEMBERS OF AN OBJECT MODULE PARTITIONED DATA SET       * 30820000
*   /****************************************************************** 30830000
*  OBJCALL:                                                             30840000
*   DCBKEYLE='00'X;                     /* ZERO OUT KEY LENGTH        * 30850000
OBJCALL  MVI   DCBKEYLE,X'00'                                     1025  30860000
*   DCBBUFL=DCBLRECL;                   /* SET BUFFER LENGTH          * 30870000
         MVC   DCBBUFL(2),DCBLRECL                                1026  30880000
*   MEMNAME=LISTNAME(LISTCNT,1:8);      /* PASS MEMBER NAME           * 30890000
         LH    @1,LISTCNT                                         1027  30900000
         MH    @1,@D24                                            1027  30910000
         LA    @E,BLDLIST-10(@1)                                  1027  30920000
         MVC   PARMLIST+36(8),0(@E)                               1027  30930000
*   RESTRICT (R4);                                                      30940000
*   R4=(LISTCNT-1)*14;                  /* GET TTR                    * 30950000
         LH    @F,LISTCNT                                         1029  30960000
         BCTR  @F,0                                               1029  30970000
         MH    @F,@D24                                            1029  30980000
         LR    @4,@F                                              1029  30990000
*   GEN(FIND  PODCB,LTTR(R4),C);        /* POSITION R/W HEAD          * 31000000
         FIND  PODCB,LTTR(R4),C                                         31010000
         DS    0H                                                       31020000
*   RELEASE (R4);                       /* RELEASE REGISTER 4         * 31030000
*   R1=ADDR(PARMLIST);                  /* STORE PARMLIST ADDR        * 31040000
         LA    @1,PARMLIST                                        1032  31050000
*   CALL  HMBLKOBJ;                     /* PROCESS OBJECT MODULE      * 31060000
         L     @F,@V3              ADDRESS OF HMBLKOBJ            1033  31070000
         BALR  @E,@F                                              1033  31080000
*   R1=ADDR(PARMLIST);                  /* SAVE PARMLIST ADDR TO PASS * 31090000
         LA    @1,PARMLIST                                        1034  31100000
*   CALL HMBLKERR;                      /* PROCESS ANY ERROR MSGS     * 31110000
         L     @F,@V2              ADDRESS OF HMBLKERR            1035  31120000
         BALR  @E,@F                                              1035  31130000
*   DCBBUFL='0000'X;                    /* RESET BUFFER LENGTH        * 31140000
         MVC   DCBBUFL(2),@X49+2                                  1036  31150000
*   DCBKEYLE='08'X;                     /* RESET KEY LENGTH           * 31160000
         MVI   DCBKEYLE,X'08'                                     1037  31170000
*   /* CHECK IF ALL MEMBERS HAVE BEEN PROCESSED                       * 31180000
*   IF LISTCNT=NUMBER                   /* ARE ALL MEMBERS PROCESSED? * 31190000
*      THEN GOTO CLOSEIT;               /* CLOSE DCB                  * 31200000
         LH    @F,NUMBER                                          1038  31210000
         CH    @F,LISTCNT                                         1038  31220000
         BC    08,CLOSEIT                                         1039  31230000
*   LISTCNT=LISTCNT+1;                  /* POINT TO NEXT MEMBER       * 31240000
         LA    @F,1                                               1040  31250000
         AH    @F,LISTCNT                                         1040  31260000
         STH   @F,LISTCNT                                         1040  31270000
*   GOTO BLDCH;                         /* CHECK IF MEMBER FOUND      * 31280000
         BC    15,BLDCH                                           1041  31290000
* ENDIT:                                                                31300000
* /* CHECK IF EOF OCCURED WHEN A CONTINUATION CARD WAS EXPECTED M1204 * 31310000
*   IF CONTINUE='1'B                    /* CONTIN EXPECTED?     M1204 * 31320000
*      THEN DO;                         /* YES                  M1204 * 31330000
ENDIT    TM    CONTINUE,B'10000000'                               1042  31340000
         BC    12,@938                                            1042  31350000
*           ERRORS=ERRORS|'00001000'X;  /* SET ERR MSG BIT      M1204 * 31360000
         OC    PARMLIST+32(4),@X59                                1044  31370000
* ENDITA:   R1=ADDR(PARMLIST);          /* POINT TO PARMLIST    M1204 * 31380000
ENDITA   LA    @1,PARMLIST                                        1045  31390000
*           CALL HMBLKERR;              /* PRINT ERRORS         M1204 * 31400000
         L     @F,@V2              ADDRESS OF HMBLKERR            1046  31410000
         BALR  @E,@F                                              1046  31420000
*           END;                                                        31430000
*   ENDITB: /* CLOSE DATA SETS                                        * 31440000
*   GEN (CLOSE  (INDCB,,OUTDCB),MF=(E,CLOSR1));/* CLOSE DCB'S         * 31450000
@938     EQU   *                                                  1048  31460000
ENDITB   CLOSE  (INDCB,,OUTDCB),MF=(E,CLOSR1)                           31470000
         DS    0H                                                       31480000
*           IF ECD12 = '1'B             /* ANY RETURN CODE 12 ERRORS  * 31490000
*             THEN                      /* YES                        * 31500000
         TM    PARMLIST+68,B'00100000'                            1049  31510000
         BC    12,@937                                            1049  31520000
*               DO;                                                     31530000
*               RCODE = 12;             /* SET RETURN CODE            * 31540000
         LA    @F,12                                              1051  31550000
         ST    @F,RCODE                                           1051  31560000
*               GO TO ENDITC;           /* RETURN TO USER             * 31570000
         BC    15,ENDITC                                          1052  31580000
*               END;                                                    31590000
*             ELSE;                     /* NULL ELSE                  * 31600000
@937     EQU   *                                                  1054  31610000
*           IF ECD8 = '1'B              /* ANY RETURN CODE 8 ERRORS   * 31620000
*             THEN                      /* YES                        * 31630000
@936     TM    PARMLIST+68,B'01000000'                            1055  31640000
         BC    12,@935                                            1055  31650000
*               DO;                                                     31660000
*               RCODE = 8;              /* SET RETURN CODE            * 31670000
         LA    @F,8                                               1057  31680000
         ST    @F,RCODE                                           1057  31690000
*               GO TO ENDITC;           /* RETURN TO USER             * 31700000
         BC    15,ENDITC                                          1058  31710000
*               END;                                                    31720000
*             ELSE;                     /* NULL ELSE                  * 31730000
@935     EQU   *                                                  1060  31740000
*           IF ECD4 = '1'B              /* ANY RETURN CODE 4 ERRORS   * 31750000
*             THEN                      /* YES                        * 31760000
@934     TM    PARMLIST+68,B'10000000'                            1061  31770000
         BC    12,@933                                            1061  31780000
*               DO;                                                     31790000
*               RCODE = 4;              /* SET RETURN CODE            * 31800000
         LA    @F,4                                               1063  31810000
         ST    @F,RCODE                                           1063  31820000
*               GO TO ENDITC;           /* RETURN TO USER             * 31830000
         BC    15,ENDITC                                          1064  31840000
*               END;                                                    31850000
*             ELSE;                     /* NULL ELSE                  * 31860000
@933     EQU   *                                                  1066  31870000
*                                                                       31880000
*           /********************************************************** 31890000
*           /* IF NO RETURN CODE ERRORS THEN SET RETURN CODE TO 0     * 31900000
*           /********************************************************** 31910000
*           RCODE = 0;                  /* SET RETURN CODE            * 31920000
@932     SR    @F,@F                                              1067  31930000
         ST    @F,RCODE                                           1067  31940000
*   ENDITC: RETURN CODE(RCODE);         /* RETURN WITH CODE 0         * 31950000
ENDITC   L     @D,4(0,@D)                                         1068  31960000
         L     @F,RCODE                                           1068  31970000
         ST    @F,16(0,@D)                                        1068  31980000
         LR    @1,@C                                              1068  31990000
         L     @0,@SIZ001                                         1068  32000000
         FREEMAIN R,LV=(0),A=(1)                                  1068  32010000
         LM    @E,@C,12(@D)                                       1068  32020000
         BCR   15,@E                                              1068  32030000
*   END HMBLKCTL;                                                       32040000
@EL01    L     @D,4(0,@D)                                         1069  32050000
         LR    @1,@C                                              1069  32060000
         L     @0,@SIZ001                                         1069  32070000
         FREEMAIN R,LV=(0),A=(1)                                  1069  32080000
         L     @E,12(0,@D)                                        1069  32090000
         LM    @0,@C,20(@D)                                       1069  32100000
         BCR   15,@E                                              1069  32110000
@DATA1   EQU   *                                                        32120000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           32130000
@1       EQU   01                                                       32140000
@2       EQU   02                                                       32150000
@3       EQU   03                                                       32160000
@4       EQU   04                                                       32170000
@5       EQU   05                                                       32180000
@6       EQU   06                                                       32190000
@7       EQU   07                                                       32200000
@8       EQU   08                                                       32210000
@9       EQU   09                                                       32220000
@A       EQU   10                                                       32230000
@B       EQU   11                                                       32240000
@C       EQU   12                                                       32250000
@D       EQU   13                                                       32260000
@E       EQU   14                                                       32270000
@F       EQU   15                                                       32280000
@D1      DC    F'12288'                                                 32290000
@D2      DC    F'9437184'                                               32300000
@D3      DC    F'49152'                                                 32310000
@D4      DC    H'-1'                                                    32320000
@D5      DC    H'9'                                                     32330000
@D6      DC    H'8'                                                     32340000
@D7      DC    H'1'                                                     32350000
@D8      DC    H'64'                                                    32360000
@D9      DC    H'71'                                                    32370000
@D10     DC    H'6'                                                     32380000
@D11     DC    H'7'                                                     32390000
@D12     DC    H'0'                                                     32400000
@D13     DC    H'16'                                                    32410000
@D14     DC    H'4'                                                     32420000
@D15     DC    H'5'                                                     32430000
@D16     DC    H'3'                                                     32440000
@D17     DC    H'70'                                                    32450000
@D18     DC    H'2'                                                     32460000
@D19     DC    H'39'                                                    32470000
@D20     DC    H'240'                                                   32480000
@D21     DC    H'100'                                                   32490000
@D22     DC    H'10'                                                    32500000
@D23     DC    H'-240'                                                  32510000
@D24     DC    H'14'                                                    32520000
@D25     DC    H'12'                                                    32530000
@D26     DC    H'20'                                                    32540000
@D27     DC    H'82'                                                    32550000
@MVC     MVC   0(1,@A),0(@E)                                            32560000
@V1      DC    V(HMBLKLPA)                                              32570000
@V2      DC    V(HMBLKERR)                                              32580000
@V3      DC    V(HMBLKOBJ)                                              32590000
@V4      DC    V(HMBLKLDM)                                              32600000
@V5      DC    V(HMBLKXRF)                                              32610000
@V6      DC    V(HMBLKIDR)                                              32620000
         DS    0F                                                       32630000
@SIZ001  DC    AL1(&SPN)                                                32640000
         DC    AL3(@DATEND-@DATD)                                       32650000
         DS    0F                                                       32660000
@C5      DC    C'MAIN ENTRY POINT'                                      32670000
@C7      DC    C'SECONDARY ENTRY '                                      32680000
@C8      DC    C'POINT ADDRESSES ASSOCIATED WITH ALIASES:'              32690000
@C10     DC    C'LINKAGE EDITOR ATTRIBUTES OF MODULE:'                  32700000
@C11     DC    C'RENT'                                                  32710000
@C12     DC    C'NOT-RENT'                                              32720000
@C13     DC    C'REUS'                                                  32730000
@C14     DC    C'NOT-REUS'                                              32740000
@C15     DC    C'OVLY'                                                  32750000
@C16     DC    C'NOT-OVLY'                                              32760000
@C17     DC    C'TEST'                                                  32770000
@C18     DC    C'NOT-TEST'                                              32780000
@C21     DC    C'SCTR'                                                  32790000
@C23     DC    C'EXEC'                                                  32800000
@C24     DC    C'NOT-EXEC'                                              32810000
@C29     DC    C'ZERO-ORG'                                              32820000
@C30     DC    C'NOT-ZERO'                                              32830000
@C35     DC    C'NOT-EDIT'                                              32840000
@C36     DC    C'EDIT'                                                  32850000
@C37     DC    C'SYMS'                                                  32860000
@C41     DC    C'REFR'                                                  32870000
@C42     DC    C'NOT-REFR'                                              32880000
@C43     DC    C'SYSLIB  '                                              32890000
@X44     DC    X'FFFFFFFFFFFFFFFF'                                      32900000
@C45     DC    C'0123456789ABCDEF'                                      32910000
@X46     DC    X'0F0F0F0F0F0F0F0F'                                      32920000
@X47     DC    X'00000100'                                              32930000
@X49     DC    X'00000000'                                              32940000
@C51     DC    C'NONE'                                                  32950000
@C54     DC    C'LISTOBJ '                                              32960000
@C55     DC    C'LISTIDR '                                              32970000
@C56     DC    C'LISTLPA '                                              32980000
@X57     DC    X'00000800'                                              32990000
@X59     DC    X'00001000'                                              33000000
@C70     DC    C'DDN='                                                  33010000
@C73     DC    C'XREF'                                                  33020000
@C74     DC    C'BOTH'                                                  33030000
@X76     DC    X'00000040'                                              33040000
@X79     DC    X'00000400'                                              33050000
@X80     DC    X'00000080'                                              33060000
@X81     DC    X'00000200'                                              33070000
@X87     DC    X'00008000'                                              33080000
@C93     DC    C'****'                                                  33090000
@C110    DC    C'*****LOAD MODULE PROCESSED BY VS LINKAGE'              33100000
@C20     DC    C'NOT-OL'                                                33110000
@C27     DC    C'NOT-DC'                                                33120000
@C28     DC    C'DC'                                                    33130000
@C33     DC    C'NO-RLD'                                                33140000
@X48     DC    X'0020'                                                  33150000
@C60     DC    C'MODLIB'                                                33160000
@C61     DC    C'TITLE='                                                33170000
@C65     DC    C'RELOC='                                                33180000
@C82     DC    C''''''                                                  33190000
@C83     DC    C', '                                                    33200000
@X85     DC    X'0100'                                                  33210000
@X86     DC    X'0800'                                                  33220000
@X90     DC    X'0040'                                                  33230000
@X91     DC    X'0002'                                                  33240000
@C103    DC    C'10'                                                    33250000
@C104    DC    C'11'                                                    33260000
@C105    DC    C'12'                                                    33270000
@C106    DC    C'13'                                                    33280000
@C107    DC    C'14'                                                    33290000
@C108    DC    C'15'                                                    33300000
@C111    DC    C'EDITOR'                                                33310000
@C112    DC    C'***PAGE ALIGNMENT REQUIRED'                            33320000
@C3      DC    C'*****  M O D U L E   S U M M A R Y  *****'             33330000
@C4      DC    C'MEMBER NAME'                                           33340000
@C6      DC    C'** ALIASES **'                                         33350000
@C9      DC    C'MODULE SSI:'                                           33360000
@C19     DC    C'ONLY-LOAD'                                             33370000
@C22     DC    C'BLOCK'                                                 33380000
@C25     DC    C'1-TXT'                                                 33390000
@C26     DC    C'MULTI-RCD'                                             33400000
@C31     DC    C'EP-ZERO'                                               33410000
@C32     DC    C'EP > ZERO'                                             33420000
@C34     DC    C'RLD'                                                   33430000
@C38     DC    C'NO-SYMS'                                               33440000
@C39     DC    C'F-LEVEL'                                               33450000
@C40     DC    C'E-LEVEL'                                               33460000
@C53     DC    C'LISTLOAD '                                             33470000
@C58     DC    C'               '                                       33480000
@C64     DC    C'MEMBER='                                               33490000
@C71     DC    C'OUTPUT='                                               33500000
@C72     DC    C'MODLIST'                                               33510000
@C77     DC    C'IDENT'                                                 33520000
@C78     DC    C'ALL'                                                   33530000
@C94     DC    C'BIT  STATUS'                                           33540000
@C109    DC    C'APFCODE'                                               33550000
         DS    0D                                                       33560000
@DATA    EQU   *                                                        33570000
COL      EQU   00000009            FULLWORD POINTER REGISTER            33580000
OVERHEAD EQU   *                   FULLWORD INTEGER                     33590000
         DC    FL4'8192'                                                33600000
PRNTEXT  EQU   @DATA+00000004      4 BYTE(S) ON WORD                    33610000
A00002   EQU   *                   1 BYTE(S)                            33620000
         DC    X'85'                                                    33630000
EXAD     EQU   *                   3  BYTE  POINTER ON WORD+1           33640000
         DC    VL3(HMBLKSZE)                                            33650000
R1       EQU   00000001            FULLWORD POINTER REGISTER            33660000
R5       EQU   00000005            FULLWORD POINTER REGISTER            33670000
R6       EQU   00000006            FULLWORD POINTER REGISTER            33680000
R4       EQU   00000004            FULLWORD POINTER REGISTER            33690000
PDS      EQU   00000010            37 BYTE(S) ON WORD                   33700000
PDSNAME  EQU   PDS+00000000        8 BYTE(S)                            33710000
PDSTTR   EQU   PDS+00000008        3 BYTE(S)                            33720000
INDICATR EQU   PDS+00000011        8 BIT(S)                             33730000
ALIAS    EQU   PDS+00000011        1 BIT(S)                             33740000
USERTTR  EQU   PDS+00000011        2 BIT(S)                             33750000
USERLNTH EQU   PDS+00000011        5 BIT(S)                             33760000
TTRTEXT  EQU   PDS+00000012        3 BYTE(S)                            33770000
A00003   EQU   PDS+00000015        1 BYTE(S)                            33780000
NOTESCAT EQU   PDS+00000016        3 BYTE(S)                            33790000
NOENTRY  EQU   PDS+00000019        1 BYTE(S)                            33800000
MODATTR  EQU   PDS+00000020        2 BYTE(S)                            33810000
MAINSTOR EQU   PDS+00000022        3 BYTE(S)                            33820000
FSTXTLEN EQU   PDS+00000025        2 BYTE(S)                            33830000
EPADDR   EQU   PDS+00000027        3 BYTE(S)                            33840000
FSTXTORG EQU   PDS+00000030        3 BYTE(S)                            33850000
AOSLKED  EQU   PDS+00000030        1 BIT(S)                             33860000
A00004   EQU   PDS+00000030        1 BIT(S)                             33870000
PAGALGN  EQU   PDS+00000030        1 BIT(S)                             33880000
SSIBIT   EQU   PDS+00000030        1 BIT(S)                             33890000
APFBIT   EQU   PDS+00000030        1 BIT(S)                             33900000
A00005   EQU   PDS+00000030        19 BIT(S)                            33910000
SCATDATA EQU   PDS+00000033        4 BYTE(S)                            33920000
KEYNAME  EQU   00000000            8 BYTE(S)                            33930000
TESTBIT  EQU   *                   8*1 BYTE(S)                          33940000
         DC    X'80'                                                    33950000
         DC    X'40'                                                    33960000
         DC    X'20'                                                    33970000
         DC    X'10'                                                    33980000
         DC    X'08'                                                    33990000
         DC    X'04'                                                    34000000
         DC    X'02'                                                    34010000
         DC    X'01'                                                    34020000
SSIDATA  EQU   00000000            4 BYTE(S)                            34030000
APF      EQU   00000000            2 BYTE(S) ON WORD                    34040000
APFLEN   EQU   APF+00000000        1  BYTE  POINTER                     34050000
APFCODE  EQU   APF+00000001        1 BYTE(S)                            34060000
MAINT    EQU   *                   400 BYTE(S)                          34070000
         DC    C'HMBLKCTL MAINT AREA'                                   34080000
         DC    00381C' '                                                34090000
         ORG   @DATA                                                    34100000
         DS    00000416C                                                34110000
@L       EQU   1                                                        34120000
@DATD    DSECT                                                          34130000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   34140000
PARMLIST EQU   @DATD+00000072      77 BYTE(S) ON WORD                   34150000
DCBIN    EQU   PARMLIST+00000000   FULLWORD POINTER                     34160000
DCBOUT   EQU   PARMLIST+00000004   FULLWORD POINTER                     34170000
TITLINE  EQU   PARMLIST+00000008   FULLWORD POINTER                     34180000
AREAGET  EQU   PARMLIST+00000012   FULLWORD POINTER                     34190000
GMLENGTH EQU   PARMLIST+00000016   FULLWORD INTEGER                     34200000
FLAGS    EQU   PARMLIST+00000020   16 BIT(S)                            34210000
IDRFLAG  EQU   PARMLIST+00000020   1 BIT(S)                             34220000
OVLYFLAG EQU   PARMLIST+00000020   1 BIT(S)                             34230000
NOTEDIT  EQU   PARMLIST+00000020   1 BIT(S)                             34240000
NORLD    EQU   PARMLIST+00000020   1 BIT(S)                             34250000
MDLB     EQU   PARMLIST+00000020   1 BIT(S)                             34260000
A00000   EQU   PARMLIST+00000020   11 BIT(S)                            34270000
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER                     34280000
BUFF     EQU   PARMLIST+00000024   FULLWORD POINTER                     34290000
SCATLEN  EQU   PARMLIST+00000028   FULLWORD INTEGER                     34300000
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)                            34310000
MEMNAME  EQU   PARMLIST+00000036   8 BYTE(S)                            34320000
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)                            34330000
TXTTR    EQU   PARMLIST+00000052   3 BYTE(S)                            34340000
TXTLEN   EQU   PARMLIST+00000055   2 BYTE(S)                            34350000
RELOCX   EQU   PARMLIST+00000060   FULLWORD INTEGER                     34360000
MODSIZE  EQU   PARMLIST+00000064   4 BYTE(S)                            34370000
NFLGS    EQU   PARMLIST+00000068   32 BIT(S)                            34380000
ECD4     EQU   PARMLIST+00000068   1 BIT(S)                             34390000
ECD8     EQU   PARMLIST+00000068   1 BIT(S)                             34400000
ECD12    EQU   PARMLIST+00000068   1 BIT(S)                             34410000
SWITCH   EQU   PARMLIST+00000072   32 BIT(S)                            34420000
NUMO     EQU   PARMLIST+00000076   1  BYTE  POINTER                     34430000
OPTNMAP  EQU   @DATD+00000149      32 BIT(S) ON BYTE                    34440000
LISTLOAD EQU   OPTNMAP+00000000    1 BIT(S)                             34450000
LISTOBJ  EQU   OPTNMAP+00000000    1 BIT(S)                             34460000
LISTIDR  EQU   OPTNMAP+00000000    1 BIT(S)                             34470000
LISTLPA  EQU   OPTNMAP+00000000    1 BIT(S)                             34480000
TITLE    EQU   OPTNMAP+00000000    1 BIT(S)                             34490000
DDN      EQU   OPTNMAP+00000000    1 BIT(S)                             34500000
MEMBER   EQU   OPTNMAP+00000000    1 BIT(S)                             34510000
MODLIST  EQU   OPTNMAP+00000000    1 BIT(S)                             34520000
XREF     EQU   OPTNMAP+00000001    1 BIT(S)                             34530000
IDENT    EQU   OPTNMAP+00000001    1 BIT(S)                             34540000
PO       EQU   OPTNMAP+00000001    1 BIT(S)                             34550000
LASTMEM  EQU   OPTNMAP+00000001    1 BIT(S)                             34560000
LIMIT    EQU   OPTNMAP+00000001    1 BIT(S)                             34570000
MCONTIN  EQU   OPTNMAP+00000001    1 BIT(S)                             34580000
RELOC    EQU   OPTNMAP+00000001    1 BIT(S)                             34590000
LPAREN   EQU   @DATD+00000153      1 BIT(S) ON BYTE                     34600000
CONTINUE EQU   @DATD+00000154      1 BIT(S) ON BYTE                     34610000
BCARD    EQU   @DATD+00000155      121 BYTE(S)                          34620000
CBLANK   EQU   BCARD+00000000      1 BYTE(S)                            34630000
CARD     EQU   BCARD+00000001      80 BYTE(S)                           34640000
A00001   EQU   BCARD+00000081      40 BYTE(S)                           34650000
ECARD    EQU   @DATD+00000276      121 BYTE(S)                          34660000
BLINE    EQU   @DATD+00000397      121 BYTE(S)                          34670000
TBLANK   EQU   BLINE+00000000      1 BYTE(S)                            34680000
TTLINE   EQU   BLINE+00000001      120 BYTE(S)                          34690000
RELCHAR  EQU   @DATD+00000132      4 BYTE(S)                            34700000
TCOL1    EQU   @DATD+00000518      HALFWORD INTEGER                     34710000
TCOL2    EQU   @DATD+00000520      HALFWORD INTEGER                     34720000
TITLECOL EQU   @DATD+00000522      HALFWORD INTEGER                     34730000
TEMP     EQU   @DATD+00000524      HALFWORD INTEGER                     34740000
NUMBER   EQU   @DATD+00000526      HALFWORD INTEGER                     34750000
HIGHLOW  EQU   @DATD+00000528      8 BYTE(S) ON WORD                    34760000
LOW      EQU   HIGHLOW+00000000    FULLWORD INTEGER                     34770000
HIGH     EQU   HIGHLOW+00000004    FULLWORD INTEGER                     34780000
HILOLPA  EQU   @DATD+00000536      8 BYTE(S) ON WORD                    34790000
NLOW     EQU   HILOLPA+00000000    FULLWORD INTEGER                     34800000
NHIGH    EQU   HILOLPA+00000004    FULLWORD INTEGER                     34810000
STORAGE  EQU   @DATD+00000544      8 BYTE(S) ON WORD                    34820000
MAINADDR EQU   STORAGE+00000000    FULLWORD INTEGER                     34830000
MAINLEN  EQU   STORAGE+00000004    FULLWORD INTEGER                     34840000
TEMPCNT  EQU   @DATD+00000552      1 BYTE(S)                            34850000
ENDNAME  EQU   @DATD+00000553      8 BYTE(S)                            34860000
FMEMNAME EQU   @DATD+00000568      8 BYTE(S) ON DWORD                   34870000
HEXCHAR  EQU   @DATD+00000576      16 BYTE(S) ON DWORD                  34880000
ZONEOFF  EQU   @DATD+00000592      8 BYTE(S)                            34890000
HEXDATA  EQU   @DATD+00000600      9 BYTE(S)                            34900000
SYSLIB   EQU   @DATD+00000609      8 BYTE(S)                            34910000
BLDLIST  EQU   @DATD+00000620      452 BYTE(S) ON WORD                  34920000
NUMENTS  EQU   BLDLIST+00000000    HALFWORD INTEGER                     34930000
LENGTH   EQU   BLDLIST+00000002    HALFWORD INTEGER                     34940000
ENTRIES  EQU   BLDLIST+00000004    32*14 BYTE(S)                        34950000
LISTNAME EQU   BLDLIST+00000004    8 BYTE(S)                            34960000
LTTR     EQU   BLDLIST+00000012    4 BYTE(S)                            34970000
LISTTR   EQU   BLDLIST+00000012    3 BYTE(S)                            34980000
K        EQU   BLDLIST+00000015    1 BYTE(S)                            34990000
LIB      EQU   BLDLIST+00000016    1 BYTE(S)                            35000000
C        EQU   BLDLIST+00000017    8 BIT(S)                             35010000
SWITCHES EQU   @DATD+00001072      16 BIT(S) ON BYTE                    35020000
SW1      EQU   SWITCHES+00000000   1 BIT(S)                             35030000
SW2      EQU   SWITCHES+00000000   1 BIT(S)                             35040000
SW3      EQU   SWITCHES+00000000   1 BIT(S)                             35050000
SW4      EQU   SWITCHES+00000000   1 BIT(S)                             35060000
SW5      EQU   SWITCHES+00000000   1 BIT(S)                             35070000
SW6      EQU   SWITCHES+00000000   1 BIT(S)                             35080000
SW7      EQU   SWITCHES+00000000   1 BIT(S)                             35090000
SW8      EQU   SWITCHES+00000000   1 BIT(S)                             35100000
SW9      EQU   SWITCHES+00000001   1 BIT(S)                             35110000
SW10     EQU   SWITCHES+00000001   1 BIT(S)                             35120000
USER     EQU   @DATD+00001074      HALFWORD INTEGER                     35130000
ACCUM    EQU   @DATD+00001076      HALFWORD POINTER                     35140000
SSI      EQU   @DATD+00001080      8 BYTE(S) ON DWORD                   35150000
DIRORG   EQU   @DATD+00001088      FULLWORD INTEGER                     35160000
LISTCNT  EQU   @DATD+00001092      HALFWORD INTEGER                     35170000
ALIASLST EQU   @DATD+00001096      288 BYTE(S) ON WORD                  35180000
ALNAME   EQU   ALIASLST+00000000   16*8 BYTE(S)                         35190000
ASTERISK EQU   ALIASLST+00000128   16*2 BYTE(S)                         35200000
ALEPADDR EQU   ALIASLST+00000160   16*8 BYTE(S)                         35210000
BLNKALAS EQU   @DATD+00001096      288 BYTE(S)                          35220000
BLANK1   EQU   BLNKALAS+00000000   256 BYTE(S)                          35230000
BLANK2   EQU   BLNKALAS+00000256   32 BYTE(S)                           35240000
ALCNT    EQU   @DATD+00001384      HALFWORD INTEGER                     35250000
HEADNAME EQU   @DATD+00001386      8 BYTE(S)                            35260000
HEADEP   EQU   @DATD+00001400      8 BYTE(S) ON DWORD                   35270000
OUTLINE  EQU   @DATD+00001408      121 BYTE(S) ON WORD                  35280000
ASCII    EQU   OUTLINE+00000000    1 BYTE(S)                            35290000
LINE     EQU   OUTLINE+00000001    120 BYTE(S)                          35300000
ATTRIBUT EQU   @DATD+00001529      16 BIT(S) ON BYTE                    35310000
ATTRIB1  EQU   ATTRIBUT+00000000   8 BIT(S)                             35320000
ATTRIB2  EQU   ATTRIBUT+00000001   8 BIT(S)                             35330000
ALLADDR  EQU   @DATD+00001532      4 BYTE(S) ON WORD                    35340000
MODULE   EQU   @DATD+00001536      41 BYTE(S)                           35350000
NAME     EQU   @DATD+00001577      12 BYTE(S)                           35360000
MAIN     EQU   @DATD+00001589      17 BYTE(S)                           35370000
ALIASES  EQU   @DATD+00001606      13 BYTE(S)                           35380000
SECOND   EQU   @DATD+00001619      56 BYTE(S)                           35390000
MODSSI   EQU   @DATD+00001675      11 BYTE(S)                           35400000
LINKAGE  EQU   @DATD+00001686      36 BYTE(S)                           35410000
RELFAC   EQU   @DATD+00001722      6 BYTE(S)                            35420000
ATNAME   EQU   @DATD+00001728      288 BYTE(S) ON WORD                  35430000
ATON     EQU   ATNAME+00000000     8*9 BYTE(S)                          35440000
ATOFF    EQU   ATNAME+00000072     8*9 BYTE(S)                          35450000
SECATON  EQU   ATNAME+00000144     8*9 BYTE(S)                          35460000
SECATOFF EQU   ATNAME+00000216     8*9 BYTE(S)                          35470000
LINPTR   EQU   @DATD+00002016      HALFWORD INTEGER                     35480000
APFDATA  EQU   @DATD+00002018      8 BYTE(S)                            35490000
A        EQU   @DATD+00002028      FULLWORD INTEGER                     35500000
B        EQU   @DATD+00002032      FULLWORD INTEGER                     35510000
D        EQU   @DATD+00002036      FULLWORD INTEGER                     35520000
E        EQU   @DATD+00002040      FULLWORD INTEGER                     35530000
I        EQU   @DATD+00002044      FULLWORD INTEGER                     35540000
X        EQU   @DATD+00002048      FULLWORD INTEGER                     35550000
WORKAREA EQU   @DATD+00002056      8 BYTE(S) ON DWORD                   35560000
F        EQU   @DATD+00002064      HALFWORD INTEGER                     35570000
G        EQU   @DATD+00002066      HALFWORD INTEGER                     35580000
H        EQU   @DATD+00002068      HALFWORD INTEGER                     35590000
J        EQU   @DATD+00002070      HALFWORD INTEGER                     35600000
L        EQU   @DATD+00002072      HALFWORD INTEGER                     35610000
LOCLEN   EQU   @DATD+00002076      FULLWORD INTEGER                     35620000
RCODE    EQU   @DATD+00002080      FULLWORD INTEGER                     35630000
INDCB    EQU   @DATD+00002088      96 BYTE(S) ON DWORD                  35640000
OUTDCB   EQU   @DATD+00002184      96 BYTE(S) ON DWORD                  35650000
PODCB    EQU   @DATD+00002280      88 BYTE(S) ON DWORD                  35660000
OPEN1    EQU   @DATD+00002368      8 BYTE(S) ON WORD                    35670000
OPEN2    EQU   @DATD+00002376      4 BYTE(S)                            35680000
CLOSR1   EQU   @DATD+00002380      8 BYTE(S) ON WORD                    35690000
CLOSR2   EQU   @DATD+00002388      4 BYTE(S)                            35700000
READIR   EQU   @DATD+00002392      24 BYTE(S) ON WORD                   35710000
SPGET    EQU   @DATD+00002416      10 BYTE(S) ON WORD                   35720000
SPFREE   EQU   @DATD+00002428      10 BYTE(S) ON WORD                   35730000
         DS    00002438C                                                35740000
@TEMPS   DS    0F                                                       35750000
         DS    C                                                        35760000
@CTEMP2  DS    CL001                                                    35770000
HMBLKCTL CSECT                                                          35780000
*********************************************************************** 35790000
*      D A T A  C O N T R O L  B L O C K S                            * 35800000
*********************************************************************** 35810000
INPUT    DCB   DSORG=PS,MACRF=GM,LRECL=80,DDNAME=SYSIN,EODAD=ENDIT,    X35820000
               EROPT=SKP                                                35830000
INLEN    EQU   *-INPUT                 LENGTH OF INPUT                  35840000
OUTPUT   DCB   DSORG=PS,MACRF=PM,LRECL=121,RECFM=FBA,EXLST=PRNTEXT,    X35850000
               DDNAME=SYSPRINT,EROPT=SKP                                35860000
OUTLEN   EQU   *-OUTPUT                LENGTH OF OUTPUT                 35870000
PDSDCB   DCB   DDNAME=XXXXXXXX,DSORG=PO,MACRF=R,                       X35880000
               BUFNO=1,SYNAD=SYSIOPDS,KEYLEN=8,                        X35890000
               EODAD=PDSEOD                              /* @ZA05200 */ 35900000
PDSLEN   EQU   *-PDSDCB                LENGTH OF PDS DCB                35910000
READ1    READ  DECB,SF,MF=L                                             35920000
RLEN     EQU   *-READ1                 LENGTH OF READ1                  35930000
OP1      OPEN  (INPUT,,OUTPUT,(OUTPUT)),MF=L                            35940000
OP2      OPEN  PDSDCB,MF=L                                              35950000
CL1      CLOSE (INPUT,,OUTPUT),MF=L                                     35960000
CL2      CLOSE PDSDCB,MF=L                                              35970000
         DCBD  DSORG=PO                                                 35980000
HMBLKCTL CSECT                                                          35990000
@DATD    DSECT                                                          36000000
@DATEND  EQU   *                                                        36010000
HMBLKCTL CSECT ,                                                        36020000
@9F8     EQU   @9F7                                                     36030000
@9F3     EQU   AEC1                                                     36040000
@9EF     EQU   PROCESS                                                  36050000
@9EE     EQU   PROCESS                                                  36060000
@9ED     EQU   ABA2                                                     36070000
@9F0     EQU   ABB1                                                     36080000
@9E7     EQU   ABA2                                                     36090000
@9E3     EQU   AEB1                                                     36100000
@9DD     EQU   @9DC                                                     36110000
@9DF     EQU   @9DC                                                     36120000
@9DE     EQU   @9DC                                                     36130000
@9E0     EQU   INCREM                                                   36140000
@9CC     EQU   @9CB                                                     36150000
@9CF     EQU   ABF4                                                     36160000
@9C5     EQU   ABA6                                                     36170000
@9C4     EQU   ACG4                                                     36180000
@9C3     EQU   ABA9                                                     36190000
@9C0     EQU   ACB1                                                     36200000
@9B9     EQU   @9B8                                                     36210000
@9BB     EQU   ABA2                                                     36220000
@9B7     EQU   ACG2                                                     36230000
@9B6     EQU   ACH2                                                     36240000
@98B     EQU   SSITEST                                                  36250000
@977     EQU   PDSREAD                                                  36260000
@970     EQU   @96E                                                     36270000
@943     EQU   BITCHK                                                   36280000
@942     EQU   BITCHK                                                   36290000
@93F     EQU   @93E                                                     36300000
         END   HMBLKCTL,(C'PL/S',1400,78206)                            36310000
./  ADD  SSI=40370667,NAME=HMBLKERR
         TITLE 'HMBLKERR  -  ERROR HANDLING ROUTINE'                    00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
HMBLKERR CSECT ,                                                  0001  00040000
         BC    15,14(0,@F)                                              00050000
         DC    C'Â—HMBLKERR'                                       0001  00060000
         STM   @E,@C,12(@D)                                       0001  00070000
         BALR  @B,0                                               0001  00080000
@PSTART  DS    0H                                                 0001  00090000
         USING @PSTART+00000,@B                                   0001  00100000
         L     @0,@SIZ001                                         0001  00110000
         GETMAIN  R,LV=(0)                                        0001  00120000
         LR    @C,@1                                              0001  00130000
         USING @DATD+00000,@C                                     0001  00140000
         LM    @0,@1,20(@D)                                       0001  00150000
         XC    @TEMPS(@L),@TEMPS                                  0001  00160000
         ST    @D,@SAV001+4                                       0001  00170000
         LA    @F,@SAV001                                         0001  00180000
         ST    @F,8(0,@D)                                         0001  00190000
         LR    @D,@F                                              0001  00200000
*         PARMPTR=R1;                   /* SAVE REG. 1 INTERNALLY     * 00210000
         ST    @1,PARMPTR                                         0013  00220000
*         RESTRICT(3);                  /* USED TO HOLD DCB ADDRESS   * 00230000
*         IF ERRORS=0                   /* IF NO ERRORS, DONT PRINT   * 00240000
*            THEN GO TO RET;            /* ANYTHING                   * 00250000
         L     @2,PARMPTR                                         0015  00260000
         CLC   32(4,@2),@D1                                       0015  00270000
         BC    08,RET                                             0016  00280000
*         PARM=DCBOUT;                  /* SET DCBADDRESS FOR PUTS    * 00290000
         L     @3,4(0,@2)                                         0017  00300000
*         LINE=' ';                     /* BLANK OUT LINE             * 00310000
         MVI   LINE,C' '                                          0018  00320000
         MVC   LINE+1(120),LINE                                   0018  00330000
*         ASACHAR='1';                  /* SET TO GO TO TOP OF PAGE   * 00340000
         MVI   LINE,C'1'                                          0019  00350000
*         DO I=1 TO 2;                  /* SKIP DOWN A FEW LINES      * 00360000
         LA    @F,1                                               0020  00370000
         ST    @F,I                                               0020  00380000
@DO9FF   EQU   *                                                  0020  00390000
*         GEN(PUT  (PARM),LINE);        /* PRINT OUT A LINE OF BLANKS * 00400000
         PUT  (PARM),LINE                                               00410000
         DS    0H                                                       00420000
*         ASACHAR='0';                  /* SKIP TWO LINES             * 00430000
         MVI   LINE,C'0'                                          0022  00440000
*         END;                                                          00450000
*         MSG='**** D I A G N O S T I C  D I R E C T O R Y ****';       00460000
         L     @F,I                                               0023  00470000
         AH    @F,@D2                                             0023  00480000
@DO9FE   ST    @F,I                                               0023  00490000
         CH    @F,@D3                                             0023  00500000
         BC    12,@DO9FF                                          0023  00510000
         MVC   LINE+6(48),@C4                                     0024  00520000
         MVI   LINE+54,C' '                                       0024  00530000
         MVC   LINE+55(66),LINE+54                                0024  00540000
*         GEN(PUT  (PARM),LINE);        /* PRINT IT PUT               * 00550000
         PUT  (PARM),LINE                                               00560000
         DS    0H                                                       00570000
*         /* ******************************************************** * 00580000
*         /*   LOOP THRU TESTING EACH BIT OF 'ERRORS'.  IF A BIT IS ON* 00590000
*         /*   THEN PRINT OUT ASSOC. MESSAGE                          * 00600000
*         /* ******************************************************** * 00610000
*         RESTRICT(2);                  /*  USED FOR BIT TESTING      * 00620000
*         TESTBIT=1;                    /* SET UP BIT FOR FIRST TEST  * 00630000
         LA    @2,1                                               0027  00640000
*         GEN(SLL  TESTBIT,31);         /* START AT LEFT END OF FIELD * 00650000
         SLL  TESTBIT,31                                                00660000
         DS    0H                                                       00670000
*         DO MSGNUM=1 TO 32;            /* CHECK EACH BIT             * 00680000
         LA    @F,1                                               0029  00690000
         ST    @F,MSGNUM                                          0029  00700000
*         IF (TESTBIT & ERRORS) Â¬=0     /* IS BIT ON?                 * 00710000
*            THEN DO;                   /* YES - PRINT MESSAGE        * 00720000
@DO9FB   L     @8,PARMPTR                                         0030  00730000
         MVC   @TEMP4(4),32(@8)                                   0030  00740000
         L     @F,@TEMP4                                          0030  00750000
         NR    @F,@2                                              0030  00760000
         CL    @F,@D1                                             0030  00770000
         BC    08,@9F7                                            0030  00780000
*                 /* GET POINTER TO OFFSET AND LENGTH FOR MESSAGE     * 00790000
*                 LISTPTR=ADDR(MSGLIST) + (MSGNUM-1)*4;                 00800000
         L     @F,MSGNUM                                          0032  00810000
         BCTR  @F,0                                               0032  00820000
         SLA   @F,2                                               0032  00830000
         L     @9,@V1              ADDRESS OF MSGLIST             0032  00840000
         AR    @F,@9                                              0032  00850000
         ST    @F,LISTPTR                                         0032  00860000
*                 IF LENGTH=0           /* UNDEFINED MESSAGE?         * 00870000
*                    THEN GO TO EL1;    /* YES - SKIP PRINTING        * 00880000
         SR    @F,@F                                              0033  00890000
         L     @6,LISTPTR                                         0033  00900000
         CH    @F,2(0,@6)                                         0033  00910000
         BC    08,EL1                                             0034  00920000
*                 MSGPTR=ADDR(MESSAGES) + OFFSET; /* POINT TO MESSAGE * 00930000
         LH    @F,0(0,@6)                                         0035  00940000
         L     @7,@V2              ADDRESS OF MESSAGES            0035  00950000
         AR    @F,@7                                              0035  00960000
         ST    @F,MSGPTR                                          0035  00970000
*                 MSG=' ';              /* INIT. LINE                 * 00980000
         MVI   LINE+6,C' '                                        0036  00990000
         MVC   LINE+7(114),LINE+6                                 0036  01000000
*                 MSG(1:LENGTH)=TEXT(1:LENGTH);  /* MOVE IN MESAAGE   * 01010000
         L     @4,MSGPTR                                          0037  01020000
         LR    @E,@4                                              0037  01030000
         LH    @5,2(0,@6)                                         0037  01040000
         BCTR  @5,0                                               0037  01050000
         LA    @A,LINE+6                                          0037  01060000
         EX    @5,@MVC                                            0037  01070000
*                 IF MSGNUM=10 |        /* CHECK FOR MESSAGES WHICH   * 01080000
*                    MSGNUM=11 |        /* NEEED TO HAVE DDNAME       * 01090000
*                    MSGNUM=5                                           01100000
*                       THEN MSG(10:17)=DDNAME;                         01110000
         LA    @F,10                                              0038  01120000
         C     @F,MSGNUM                                          0038  01130000
         BC    08,@9F6                                            0038  01140000
         LA    @F,11                                              0038  01150000
         C     @F,MSGNUM                                          0038  01160000
         BC    08,@9F5                                            0038  01170000
         LA    @F,5                                               0038  01180000
         C     @F,MSGNUM                                          0038  01190000
         BC    07,@9F4                                            0038  01200000
@9F5     EQU   *                                                  0039  01210000
@9F6     L     @8,PARMPTR                                         0039  01220000
         MVC   LINE+15(8),44(@8)                                  0039  01230000
*                 IF MSGNUM=8           /* MEMBER NOT FOUND?          * 01240000
*                    THEN MSG(10:17)=MEMNAME;/* PUT MEMNAME IN MESSAGE* 01250000
@9F4     LA    @F,8                                               0040  01260000
         C     @F,MSGNUM                                          0040  01270000
         BC    07,@9F3                                            0040  01280000
         L     @8,PARMPTR                                         0041  01290000
         MVC   LINE+15(8),36(@8)                                  0041  01300000
*                 GEN(PUT  (PARM),LINE);  /* PRINT LINNE              * 01310000
@9F3     EQU   *                                                  0042  01320000
         PUT  (PARM),LINE                                               01330000
         DS    0H                                                       01340000
*                 ASACHAR=' ';          /* SET FOR SINGLE SPACING     * 01350000
         MVI   LINE,C' '                                          0043  01360000
*                 END;                                                  01370000
*         GEN(SRL  TESTBIT,1);          /* SHIFT TO TEST NEXT BIT     * 01380000
@9F7     EQU   *                                                  0045  01390000
         SRL  TESTBIT,1                                                 01400000
         DS    0H                                                       01410000
* EL1:    END;                                                          01420000
*         IF (E12MASK&ERRORS) > 0       /* ANY RETURN CODE 12 ERRORS  * 01430000
*           THEN                        /* YES                        * 01440000
EL1      L     @F,MSGNUM                                          0046  01450000
         AH    @F,@D2                                             0046  01460000
@DO9FA   ST    @F,MSGNUM                                          0046  01470000
         CH    @F,@D4                                             0046  01480000
         BC    12,@DO9FB                                          0046  01490000
         L     @8,PARMPTR                                         0047  01500000
         MVC   @CTEMP2(4),32(@8)                                  0047  01510000
         NC    @CTEMP2(4),E12MASK                                 0047  01520000
         CLC   @CTEMP2(4),@D1                                     0047  01530000
         BC    12,@9F2                                            0047  01540000
*             DO;                                                       01550000
*               ECD12 = '1'B;           /* SET RC 12 ERROR BIT        * 01560000
         OI    68(@8),B'00100000'                                 0049  01570000
*               GO TO EL2;              /* ZERO ERROR BITS            * 01580000
         BC    15,EL2                                             0050  01590000
*             END;                                                      01600000
*           ELSE;                       /* NO RETURN CODE ERRORS      * 01610000
@9F2     EQU   *                                                  0052  01620000
*         IF (E8MASK&ERRORS) > 0        /* ANY RETURN CODE 8 ERRORS   * 01630000
*           THEN                        /* YES                        * 01640000
@9F1     L     @8,PARMPTR                                         0053  01650000
         MVC   @CTEMP2(4),32(@8)                                  0053  01660000
         NC    @CTEMP2(4),E8MASK                                  0053  01670000
         CLC   @CTEMP2(4),@D1                                     0053  01680000
         BC    12,@9F0                                            0053  01690000
*             DO;                                                       01700000
*               ECD8 = '1'B;            /* SET RC 8 ERROR BIT         * 01710000
         OI    68(@8),B'01000000'                                 0055  01720000
*               GO TO EL2;              /* ZERO ERROR BITS            * 01730000
         BC    15,EL2                                             0056  01740000
*             END;                                                      01750000
*           ELSE;                       /* NO RETURN CODE ERRORS      * 01760000
@9F0     EQU   *                                                  0058  01770000
*         IF (E4MASK&ERRORS) > 0        /* ANY RETURN CODE 4 ERRORS   * 01780000
*           THEN                        /* YES                        * 01790000
@9EF     L     @8,PARMPTR                                         0059  01800000
         MVC   @CTEMP2(4),32(@8)                                  0059  01810000
         NC    @CTEMP2(4),E4MASK                                  0059  01820000
         CLC   @CTEMP2(4),@D1                                     0059  01830000
         BC    12,@9EE                                            0059  01840000
*             ECD4 = '1'B;              /* SET RC 4 ERROR BIT         * 01850000
         OI    68(@8),B'10000000'                                 0060  01860000
*           ELSE;                       /* NO RETURN CODE ERRORS      * 01870000
@9EE     EQU   *                                                  0061  01880000
* EL2:    ERRORS=0;                     /* RE-INITIALIZE ERROR BITS   * 01890000
@9ED     EQU   *                                                  0062  01900000
EL2      L     @8,PARMPTR                                         0062  01910000
         MVC   32(4,@8),@D1                                       0062  01920000
* RET:    END HMBLKERR;                                                 01930000
RET      EQU   *                                                  0063  01940000
@EL01    L     @D,4(0,@D)                                         0063  01950000
         LR    @1,@C                                              0063  01960000
         L     @0,@SIZ001                                         0063  01970000
         FREEMAIN R,LV=(0),A=(1)                                  0063  01980000
         LM    @E,@C,12(@D)                                       0063  01990000
         BCR   15,@E                                              0063  02000000
@DATA1   EQU   *                                                        02010000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           02020000
@1       EQU   01                                                       02030000
@2       EQU   02                                                       02040000
@3       EQU   03                                                       02050000
@4       EQU   04                                                       02060000
@5       EQU   05                                                       02070000
@6       EQU   06                                                       02080000
@7       EQU   07                                                       02090000
@8       EQU   08                                                       02100000
@9       EQU   09                                                       02110000
@A       EQU   10                                                       02120000
@B       EQU   11                                                       02130000
@C       EQU   12                                                       02140000
@D       EQU   13                                                       02150000
@E       EQU   14                                                       02160000
@F       EQU   15                                                       02170000
@D1      DC    F'0'                                                     02180000
@D2      DC    H'1'                                                     02190000
@D3      DC    H'2'                                                     02200000
@D4      DC    H'32'                                                    02210000
@MVC     MVC   0(1,@A),0(@E)                                            02220000
@V1      DC    V(MSGLIST)                                               02230000
@V2      DC    V(MESSAGES)                                              02240000
         DS    0F                                                       02250000
@SIZ001  DC    AL1(&SPN)                                                02260000
         DC    AL3(@DATEND-@DATD)                                       02270000
         DS    0F                                                       02280000
@C4      DC    C'**** D I A G N O S T I C  D I R E C T O R Y ****'      02290000
         DS    0D                                                       02300000
@DATA    EQU   *                                                        02310000
DUMMY    EQU   00000000            FULLWORD INTEGER                     02320000
PARM     EQU   00000003            FULLWORD POINTER REGISTER            02330000
R1       EQU   00000001            FULLWORD POINTER REGISTER            02340000
TESTBIT  EQU   00000002            FULLWORD INTEGER REGISTER            02350000
PARMLIST EQU   00000000            72 BYTE(S) ON WORD                   02360000
A00000   EQU   PARMLIST+00000000   FULLWORD POINTER                     02370000
DCBOUT   EQU   PARMLIST+00000004   FULLWORD POINTER                     02380000
A00001   EQU   PARMLIST+00000008   12 BYTE(S)                           02390000
FLAGS    EQU   PARMLIST+00000020   16 BIT(S)                            02400000
A00002   EQU   PARMLIST+00000020   8 BIT(S)                             02410000
A00003   EQU   PARMLIST+00000021   8 BIT(S)                             02420000
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER                     02430000
A00004   EQU   PARMLIST+00000024   8 BYTE(S)                            02440000
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)                            02450000
MEMNAME  EQU   PARMLIST+00000036   8 BYTE(S)                            02460000
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)                            02470000
A00005   EQU   PARMLIST+00000052   5 BYTE(S)                            02480000
A00006   EQU   PARMLIST+00000060   FULLWORD INTEGER                     02490000
A00007   EQU   PARMLIST+00000064   4 BYTE(S)                            02500000
NFLGS    EQU   PARMLIST+00000068   32 BIT(S)                            02510000
ECD4     EQU   PARMLIST+00000068   1 BIT(S)                             02520000
ECD8     EQU   PARMLIST+00000068   1 BIT(S)                             02530000
ECD12    EQU   PARMLIST+00000068   1 BIT(S)                             02540000
MSGL     EQU   00000000            4 BYTE(S) ON WORD                    02550000
OFFSET   EQU   MSGL+00000000       HALFWORD INTEGER                     02560000
LENGTH   EQU   MSGL+00000002       HALFWORD INTEGER                     02570000
TEXT     EQU   00000000            115 BYTE(S)                          02580000
E4MASK   EQU   *                   32 BIT(S) ON BYTE                    02590000
         DC    B'00000100000100000000000001111100'                      02600000
E8MASK   EQU   *                   32 BIT(S) ON BYTE                    02610000
         DC    B'11111011110011101000111110000000'                      02620000
E12MASK  EQU   *                   32 BIT(S) ON BYTE                    02630000
         DC    B'00000000001000010001000000000000'                      02640000
         ORG   @DATA                                                    02650000
         DS    00000012C                                                02660000
@L       EQU   1                                                        02670000
@DATD    DSECT                                                          02680000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   02690000
I        EQU   @DATD+00000072      FULLWORD INTEGER                     02700000
MSGPTR   EQU   @DATD+00000076      FULLWORD POINTER                     02710000
LISTPTR  EQU   @DATD+00000080      FULLWORD POINTER                     02720000
MSGNUM   EQU   @DATD+00000084      FULLWORD INTEGER                     02730000
PARMPTR  EQU   @DATD+00000088      FULLWORD POINTER                     02740000
LINE     EQU   @DATD+00000092      121 BYTE(S)                          02750000
ASACHAR  EQU   LINE+00000000       1 BYTE(S)                            02760000
BLANKS   EQU   LINE+00000001       5 BYTE(S)                            02770000
MSG      EQU   LINE+00000006       115 BYTE(S)                          02780000
         DS    00000213C                                                02790000
@TEMPS   DS    0F                                                       02800000
@TEMP4   DC    F'0'                                                     02810000
@CTEMP2  DS    CL004                                                    02820000
@DATEND  EQU   *                                                        02830000
HMBLKERR CSECT ,                                                        02840000
         END   HMBLKERR,(C'PL/S',1400,74038)                            02850000
./  ADD  SSI=71730020,NAME=HMBLKIDR
         TITLE 'HMBLKIDR -- IDR LISTING PROCESSOR'                      00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
HMBLKIDR CSECT ,                                                  0001  00040000
         BC    15,14(0,@F)                                              00050000
         DC    C'Â—HMBLKIDR'                                       0001  00060000
         ST    @E,12(0,@D)                                        0001  00070000
         STM   @0,@C,20(@D)                                       0001  00080000
         BALR  @9,0                                               0001  00090000
@PSTART  DS    0H                                                 0001  00100000
         USING @PSTART+00000,@9                                   0001  00110000
         LA    @B,4095(0,@9)                                      0001  00120000
         USING @PSTART+04095,@B                                   0001  00130000
         L     @0,@SIZ001                                         0001  00140000
         GETMAIN  R,LV=(0)                                        0001  00150000
         LR    @C,@1                                              0001  00160000
         USING @DATD+00000,@C                                     0001  00170000
         LM    @0,@1,20(@D)                                       0001  00180000
         XC    @TEMPS(@L),@TEMPS                                  0001  00190000
         ST    @D,@SAV001+4                                       0001  00200000
         LA    @F,@SAV001                                         0001  00210000
         ST    @F,8(0,@D)                                         0001  00220000
         LR    @D,@F                                              0001  00230000
*         PARMPTR=REG1;                 /* START OF PLIST             * 00240000
         ST    @1,PARMPTR                                         0080  00250000
*         TRNOUT=GMLENGTH/3;            /* DIVIDE AREA INTO 3 PARTS   * 00260000
         L     @3,PARMPTR                                         0081  00270000
         L     @E,16(0,@3)                                        0081  00280000
         SRDA  @E,32                                              0081  00290000
         LA    @0,3                                               0081  00300000
         DR    @E,@0                                              0081  00310000
         ST    @F,TRNOUT                                          0081  00320000
*         CSDPT=AREAGET;                /* START OF CESD TABLE        * 00330000
         MVC   CSDPT(4),12(@3)                                    0082  00340000
*         SORTOUT=AREAGET+GMLENGTH/3;   /* START OF SORTAREA          * 00350000
         L     @E,16(0,@3)                                        0083  00360000
         SRDA  @E,32                                              0083  00370000
         LA    @0,3                                               0083  00380000
         DR    @E,@0                                              0083  00390000
         A     @F,12(0,@3)                                        0083  00400000
         ST    @F,SORTOUT                                         0083  00410000
*         TRNOUT=SORTOUT+TRNOUT/2;      /* START OF TRANS DESCRIP     * 00420000
         L     @E,TRNOUT                                          0084  00430000
         SRDA  @E,32                                              0084  00440000
         LA    @0,2                                               0084  00450000
         DR    @E,@0                                              0084  00460000
         A     @F,SORTOUT                                         0084  00470000
         ST    @F,TRNOUT                                          0084  00480000
*         OUT=SORTOUT+GMLENGTH/3;       /* START OF PRINT AREA        * 00490000
         L     @E,16(0,@3)                                        0085  00500000
         SRDA  @E,32                                              0085  00510000
         LA    @0,3                                               0085  00520000
         DR    @E,@0                                              0085  00530000
         A     @F,SORTOUT                                         0085  00540000
         ST    @F,OUT                                             0085  00550000
*         CSDNXT=CSDPT;                 /* FORWARD PTR FOR CESD TABLE * 00560000
         MVC   CSDNXT(4),CSDPT                                    0086  00570000
*         FLG1='00'X;                   /* ZAP FLAG                   * 00580000
         MVI   FLG1,X'00'                                         0087  00590000
*         ESDNO = 0;                    /*                    YM3113P * 00600000
         SR    @F,@F                                              0088  00610000
         STH   @F,ESDNO                                           0088  00620000
*         LL = 0;                       /*                    YM3113P * 00630000
         STH   @F,LL                                              0089  00640000
*         SW1(1:2)='00'B;               /* ZERO OUT BITS              * 00650000
         NI    SW1,B'00111111'                                    0090  00660000
*         TYP='0'B;                                                     00670000
         NI    TYP,B'01111111'                                    0091  00680000
*         PG='0001';                    /* FOR PAGE NUMBER            * 00690000
         MVC   PG(4),@C4                                          0092  00700000
*         PGCNT=1;                      /* PGCNT=BINARY ONE   @ZA04919* 00710000
         LA    @F,1                                               0093  00720000
         STH   @F,PGCNT                                           0093  00730000
*         BLANKS=' ';                   /* FOR BLANKING OUT AREAS     * 00740000
         MVI   BLANKS,C' '                                        0094  00750000
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         * 00760000
*         GEN DATA;                                                     00770000
* READRT: R6=DCBIN;                     /* ADDR OF INPUT DCB          * 00780000
READRT   L     @3,PARMPTR                                         0097  00790000
         L     @6,0(0,@3)                                         0097  00800000
*         R5=BUFF;                      /* ADDR OF READ BUFFER        * 00810000
         L     @5,24(0,@3)                                        0098  00820000
*         GENERATE;                                                     00830000
         MVC   READLIST(RDLGTH),RDLIST  MOVE IN LIST FORM OF READ       00840000
         READ  READLIST,SF,(6),(5),'S',MF=E                             00850000
         CHECK READLIST                                                 00860000
         DS    0H                                                       00870000
*         IF NOTEDIT='1'B               /* NOT-EDITABLE MODULE?       * 00880000
*            THEN                       /* YES                        * 00890000
         TM    20(@3),B'00100000'                                 0100  00900000
         BC    12,@9FF                                            0100  00910000
*              DO;                      /* BEGIN DO LOOP              * 00920000
*                GENERATE;                                              00930000
         NOTE  (R6)                    GET TTR FROM READ                00940000
         ST    1,NOTETTR               SAVE TTR                         00950000
         DS    0H                                                       00960000
*                NOTEDIT='0'B;          /* TURN OFF NOT-EDITABLE BIT  * 00970000
         NI    20(@3),B'11011111'                                 0103  00980000
*                IF NOTETTR(1:3)=TXTTR  /* IS 1ST RECORD TEXT?        * 00990000
*                   THEN                /* YES                        * 01000000
         CLC   NOTETTR(3),52(@3)                                  0104  01010000
         BC    07,@9FE                                            0104  01020000
*                     IF NORLD='1'B     /* NO RLD RECORDS?            * 01030000
*                        THEN           /* NO RLDS                    * 01040000
         TM    20(@3),B'00010000'                                 0105  01050000
*                          GOTO ERR2;   /* ERROR MSG NO IDR DATA      * 01060000
         BC    01,ERR2                                            0106  01070000
*                        ELSE           /* RLD RECORDS                * 01080000
*                          GOTO READRT; /* READ ANOTHER RECORD        * 01090000
         BC    15,READRT                                          0107  01100000
*                END;                                                   01110000
@9FE     EQU   *                                                  0108  01120000
*         INREC=BUFF;                   /* INPUT RECORD ADDRESS       * 01130000
@9FF     L     @3,PARMPTR                                         0109  01140000
         MVC   INREC(4),24(@3)                                    0109  01150000
*         RELEASE (5,6);                /* RELEASE RESTRICTION        * 01160000
*         IF TYPE='40'X                 /* SYM RECORD?                * 01170000
*           THEN                        /* YES                        * 01180000
         L     @8,INREC                                           0111  01190000
         CLI   0(@8),X'40'                                        0111  01200000
*             GO TO READRT;             /* READ NEXT RECORD           * 01210000
         BC    08,READRT                                          0112  01220000
*           ELSE;                       /* NULL ELSE                  * 01230000
*         IF TYPE='20'X                 /* CESD RECORD                * 01240000
*           THEN                        /* YES                        * 01250000
         CLI   0(@8),X'20'                                        0114  01260000
         BC    07,@9FD                                            0114  01270000
*             DO;                       /* BEGINNING OF DO LOOP       * 01280000
*               ESDNO=ESDID;            /* STARTING ID NUMBER         * 01290000
         MVC   ESDNO(2),4(@8)                                     0116  01300000
*               ESDCOUNT=COUNT;         /* NUMBER OF ESD DATA BYTES   * 01310000
         MVC   ESDCOUNT(2),6(@8)                                  0117  01320000
*               NEXT=INREC+8;           /* START OF ESD DATA          * 01330000
         LA    @F,8                                               0118  01340000
         A     @F,INREC                                           0118  01350000
         ST    @F,NEXT                                            0118  01360000
*               TBIT='00'X;             /* ZERO OUT SPECIAL BYTE      * 01370000
         MVI   TBIT,X'00'                                         0119  01380000
*               GO TO CESDRT;           /* BRANCH TO CESD RTN.        * 01390000
         BC    15,CESDRT                                          0120  01400000
*             END;                      /* END OF DO LOOP             * 01410000
*           ELSE;                       /* NULL ELSE                  * 01420000
@9FD     EQU   *                                                  0122  01430000
*         IF TYPE='80'X                 /* IDR RECORD                 * 01440000
*           THEN                        /* YES                        * 01450000
@9FC     L     @3,INREC                                           0123  01460000
         CLI   0(@3),X'80'                                        0123  01470000
         BC    07,@9FB                                            0123  01480000
*             DO;                       /* DO LOOP                    * 01490000
*               SW1(1)='1'B;            /* SET SWITCH - IDR           * 01500000
         OI    SW1,B'10000000'                                    0125  01510000
*               GO TO IDRTN;            /* PROCESS IDR RECORD         * 01520000
         BC    15,IDRTN                                           0126  01530000
*             END;                      /* END OF DO LOOP             * 01540000
*           ELSE                                                        01550000
*             DO;                       /* DO LOOP                    * 01560000
*               IF SW1(1)='0'B          /* HAVE IDR'S BEEN PROCESSED  * 01570000
*                 THEN                  /* NO                         * 01580000
@9FB     TM    SW1,B'10000000'                                    0129  01590000
*                   GO TO ERR2;         /* NO IDR RECORDS             * 01600000
         BC    08,ERR2                                            0130  01610000
*                 ELSE                  /* YES                        * 01620000
*                   GO TO ERR3;         /* MISSING IDR RECORDS        * 01630000
         BC    15,ERR3                                            0131  01640000
*             END;                      /* END OF DO LOOP             * 01650000
* CESDRT: IF ESDTYP(5:8)='0000'B                                        01660000
*           THEN                                                        01670000
@9FA     EQU   *                                                  0133  01680000
CESDRT   L     @3,NEXT                                            0133  01690000
         TM    8(@3),B'00001111'                                  0133  01700000
*             GO TO CSDRT1;             /* BEGIN PROCESSING CSED REC  * 01710000
         BC    08,CSDRT1                                          0134  01720000
*           ELSE;                       /* NULL ELSE                  * 01730000
*         IF ESDTYP(5:8)='0100'B        /* PRIVATE CODE               * 01740000
*           THEN                        /* YES                        * 01750000
         TM    8(@3),B'00000100'                                  0136  01760000
         BC    12,@9F9                                            0135  01770000
         TM    8(@3),B'00001011'                                  0136  01780000
         BC    05,@9F8                                            0136  01790000
*             DO;                                                       01800000
*               NAME='$PRIVATE';        /* PUT NAME IN                * 01810000
         L     @8,CSDNXT                                          0138  01820000
         MVC   0(8,@8),@C12                                       0138  01830000
*               GO TO CSDPVT;           /* BEGIN PROCESSING CSED REC  * 01840000
         BC    15,CSDPVT                                          0139  01850000
*             END;                                                      01860000
*           ELSE                                                        01870000
*             DO;                                                       01880000
@9F8     EQU   *                                                  0141  01890000
@9F9     EQU   *                                                  0141  01900000
* CSD:          ESDCOUNT=ESDCOUNT-16;   /* RECORD LENGTH COUNT        * 01910000
CSD      LH    @F,ESDCOUNT                                        0142  01920000
         SH    @F,@D1                                             0142  01930000
         STH   @F,ESDCOUNT                                        0142  01940000
*               IF ESDCOUNT = 0         /* ANY MORE DATA?             * 01950000
*                 THEN                  /* NO                         * 01960000
         SR    @F,@F                                              0143  01970000
         CH    @F,ESDCOUNT                                        0143  01980000
*                   GO TO READRT;       /* READ NEXT RECORD           * 01990000
         BC    08,READRT                                          0144  02000000
*                 ELSE                  /* YES - MORE DATA            * 02010000
*                   DO;                 /* DO LOOP                    * 02020000
*                     NEXT=NEXT+16;     /* UP RECORD PTR              * 02030000
         LA    @F,16                                              0146  02040000
         A     @F,NEXT                                            0146  02050000
         ST    @F,NEXT                                            0146  02060000
*                     ESDNO=ESDNO+1;    /* UP ESDID NUMBER            * 02070000
         LA    @F,1                                               0147  02080000
         AH    @F,ESDNO                                           0147  02090000
         STH   @F,ESDNO                                           0147  02100000
*                     GO TO CESDRT;     /* CONTINUE PROCESSING        * 02110000
         BC    15,CESDRT                                          0148  02120000
*                   END;                /* END OF DO LOOP             * 02130000
*             END;                      /* END OF DO LOOP             * 02140000
* CSDRT1: NAME=EXTRNAM;                 /* PUT NAME IN TABLE          * 02150000
@9F7     EQU   *                                                  0151  02160000
CSDRT1   L     @3,NEXT                                            0151  02170000
         L     @8,CSDNXT                                          0151  02180000
         MVC   0(8,@8),0(@3)                                      0151  02190000
* CSDPVT: IDEN=ESDNO;                   /* PUT ESD NUMBER IN TABLE    * 02200000
CSDPVT   L     @3,CSDNXT                                          0152  02210000
         MVC   10(2,@3),ESDNO                                     0152  02220000
*         IF CSDNXT+12>SORTOUT          /* CHK FOR TBL OVERFL XM04400 * 02230000
*           THEN                        /* OVERFLOW           XM04400 * 02240000
         LA    @F,12                                              0153  02250000
         A     @F,CSDNXT                                          0153  02260000
         C     @F,SORTOUT                                         0153  02270000
         BC    12,@9F6                                            0153  02280000
*             DO;                       /*                    XM04400 * 02290000
*               ERRORS(4)='1'B;         /* MSG IMB104I        XM04400 * 02300000
         L     @8,PARMPTR                                         0155  02310000
         OI    32(@8),B'00010000'                                 0155  02320000
*               RETURN;                 /* EXIT               XM04400 * 02330000
         BC    15,@EL01                                           0156  02340000
*             END;                      /*                    XM04400 * 02350000
*           ELSE;                       /* NO OVERFLOW        XM04400 * 02360000
@9F6     EQU   *                                                  0158  02370000
*         CSDEND=CSDNXT;                /* ADDR OF LAST CESD ENTRY    * 02380000
@9F5     MVC   CSDEND(4),CSDNXT                                   0159  02390000
* CSDRT2: ESDCOUNT=ESDCOUNT-16;         /* AMOUNT OF ESD DATA LEFT    * 02400000
CSDRT2   LH    @F,ESDCOUNT                                        0160  02410000
         SH    @F,@D1                                             0160  02420000
         STH   @F,ESDCOUNT                                        0160  02430000
*         IF ESDCOUNT=0                 /* END OF ESD DATA?           * 02440000
*           THEN                        /* YES                        * 02450000
         SR    @F,@F                                              0161  02460000
         CH    @F,ESDCOUNT                                        0161  02470000
         BC    07,@9F4                                            0161  02480000
*             DO;                       /* DO LOOP                    * 02490000
*               CSDNXT=CSDNXT+12;       /* UP CESD PTR                * 02500000
         LA    @F,12                                              0163  02510000
         A     @F,CSDNXT                                          0163  02520000
         ST    @F,CSDNXT                                          0163  02530000
*               GO TO READRT;           /* READ NEXT RECORD           * 02540000
         BC    15,READRT                                          0164  02550000
*             END;                      /* END OF DO LOOP             * 02560000
*           ELSE                        /* NO                         * 02570000
*             DO;                       /* DO LOOP START              * 02580000
*               CSDNXT=CSDNXT+12;       /* FOR NEXT CESD ENTRY        * 02590000
@9F4     LA    @F,12                                              0167  02600000
         A     @F,CSDNXT                                          0167  02610000
         ST    @F,CSDNXT                                          0167  02620000
*               NEXT=NEXT+16;           /* FOR NEXT ESD DATA ITEM     * 02630000
         LA    @F,16                                              0168  02640000
         A     @F,NEXT                                            0168  02650000
         ST    @F,NEXT                                            0168  02660000
*               ESDNO=ESDNO+1;          /* ESDID NUMBER               * 02670000
         LA    @F,1                                               0169  02680000
         AH    @F,ESDNO                                           0169  02690000
         STH   @F,ESDNO                                           0169  02700000
*               GO TO CESDRT;           /* FOR NEXT ENTRY             * 02710000
         BC    15,CESDRT                                          0170  02720000
*             END;                      /* END OF DO LOOP             * 02730000
* IDRTN:  IF SUBTYP(1)='1'B             /* LAST IDR RECORD?           * 02740000
*           THEN                        /* YES                        * 02750000
@9F3     EQU   *                                                  0172  02760000
IDRTN    L     @3,INREC                                           0172  02770000
         TM    2(@3),B'10000000'                                  0172  02780000
         BC    12,@9F2                                            0172  02790000
*               TYP='1'B;               /* SET BIT                    * 02800000
         OI    TYP,B'10000000'                                    0173  02810000
*           ELSE;                       /* NO                         * 02820000
@9F2     EQU   *                                                  0174  02830000
*         BYTES=BYTCNT-2;               /* NUMBER OF BYTES IN RECORD  * 02840000
@9F1     LH    @F,@D2                                             0175  02850000
         SR    @0,@0                                              0175  02860000
         IC    @0,1(0,@3)                                         0175  02870000
         AR    @F,@0                                              0175  02880000
         STC   @F,BYTES                                           0175  02890000
*         IF SUBTYP(5:8)='0001'B        /* ZAP RECORD                 * 02900000
*           THEN                        /* YES                        * 02910000
         TM    2(@3),B'00000001'                                  0176  02920000
         BC    12,@9F0                                            0175  02930000
         TM    2(@3),B'00001110'                                  0176  02940000
*             GO TO ZAPRT;              /* BEGIN PROCESSING ZAP REC   * 02950000
         BC    10,ZAPRT                                           0177  02960000
*           ELSE                        /* NO                         * 02970000
*             GO TO LK;                 /* CHECK FOR NEXT TYPE        * 02980000
         BC    15,LK                                              0178  02990000
* IDR2:   IF IDRFLAG='1'B | MDLB='1'B   /* PARTIAL IDR SERVICE        * 03000000
*           THEN                        /* YES                        * 03010000
IDR2     L     @3,PARMPTR                                         0179  03020000
         TM    20(@3),B'10000000'                                 0179  03030000
         BC    01,@9EE                                            0179  03040000
         TM    20(@3),B'00001000'                                 0179  03050000
         BC    12,@9ED                                            0179  03060000
*             IF TYP='1'B               /* LAST IDR RECORD            * 03070000
*               THEN                    /* YES                        * 03080000
@9EE     TM    TYP,B'10000000'                                    0180  03090000
*                 RETURN;               /* RETURN                     * 03100000
         BC    03,@EL01                                           0181  03110000
*               ELSE                    /* MORE IDR RECORDS           * 03120000
*                 GO TO READRT;         /* READ NEXT RECORD           * 03130000
         BC    15,READRT                                          0182  03140000
*           ELSE                        /* FULL IDR SERVICE           * 03150000
*             DO;                       /* DO LOOP                    * 03160000
*               COUNTER=BYTES;          /* NO. OF RECORD BYTES        * 03170000
@9ED     MVC   COUNTER(1),BYTES                                   0184  03180000
*               GO TO TRANSRT;          /* PROCESS RECORD             * 03190000
         BC    15,TRANSRT                                         0185  03200000
*             END;                      /* END OF DO LOOP             * 03210000
* LK:     IF SUBTYP(5:8)='0010'B        /* LINKEDIT RECORD            * 03220000
*           THEN                        /* YES                        * 03230000
@9EA     EQU   *                                                  0187  03240000
LK       L     @3,INREC                                           0187  03250000
         TM    2(@3),B'00000010'                                  0187  03260000
         BC    12,@9E9                                            0186  03270000
         TM    2(@3),B'00001101'                                  0187  03280000
         BC    05,@9E8                                            0187  03290000
*             DO;                       /* DO LOOP                    * 03300000
*               IF IDRFLAG='1'B | MDLB='1'B /* PARTIAL IDR SERVICE    * 03310000
*                 THEN                  /* YES                        * 03320000
         L     @8,PARMPTR                                         0189  03330000
         TM    20(@8),B'10000000'                                 0189  03340000
         BC    01,@9E7                                            0189  03350000
         TM    20(@8),B'00001000'                                 0189  03360000
         BC    12,@9E6                                            0189  03370000
*                   IF TYP='1'B         /* LAST IDR RECORD            * 03380000
*                     THEN              /* YES                        * 03390000
@9E7     TM    TYP,B'10000000'                                    0190  03400000
*                       RETURN;                                         03410000
         BC    03,@EL01                                           0191  03420000
*                     ELSE              /* NO                         * 03430000
*                       GO TO READRT;   /* READ NEXT RECORD           * 03440000
         BC    15,READRT                                          0192  03450000
*                 ELSE                  /* FULL IDR SERVICE           * 03460000
*                   GO TO LKERT;        /* BEGIN PROCESSING LINKEDIT  * 03470000
*             END;                      /* END OF DO LOOP             * 03480000
*           ELSE;                       /* NO                         * 03490000
@9E8     EQU   *                                                  0195  03500000
@9E9     EQU   *                                                  0195  03510000
*         IF SUBTYP(5:8)='0100'B        /* TRANSLATOR RECORD          * 03520000
*           THEN                        /* YES                        * 03530000
@9E2     EQU   *                                                  0196  03540000
         L     @3,INREC                                           0196  03550000
         TM    2(@3),B'00000100'                                  0196  03560000
         BC    12,@9E1                                            0195  03570000
         TM    2(@3),B'00001011'                                  0196  03580000
         BC    05,@9E0                                            0196  03590000
*             DO;                       /* DO LOOP                    * 03600000
*               NEXT=INREC+3;           /* RECORD PTR                 * 03610000
         LA    @F,3                                               0198  03620000
         A     @F,INREC                                           0198  03630000
         ST    @F,NEXT                                            0198  03640000
*               IF TBIT(1)='1'B         /* PREVIOUS TRANSLATOR RECORD * 03650000
*                 THEN                  /* YES                        * 03660000
         TM    TBIT,B'10000000'                                   0199  03670000
         BC    12,@9DF                                            0199  03680000
*                   DO;                 /* DO LOOP                    * 03690000
*                     TBIT(1)='0'B;     /* ZERO OUT BIT               * 03700000
         NI    TBIT,B'01111111'                                   0201  03710000
*                     COUNTER=BYTES;    /* NO. OF RECORD BYTES        * 03720000
         MVC   COUNTER(1),BYTES                                   0202  03730000
*                     GO TO TR1;        /* ANALYZE RECORD             * 03740000
         BC    15,TR1                                             0203  03750000
*                   END;                /* END OF DO LOOP             * 03760000
*                 ELSE;                 /* NO                         * 03770000
@9DF     EQU   *                                                  0205  03780000
*               IF TBIT(7)='1'B         /* TRANS DESCRIPTION          * 03790000
*                 THEN                  /* YES                        * 03800000
@9DE     TM    TBIT,B'00000010'                                   0206  03810000
         BC    12,@9DD                                            0206  03820000
*                   DO;                 /* DO LOOP                    * 03830000
*                     TBIT(7)='0'B;     /* ZERO OUT BIT               * 03840000
         NI    TBIT,B'11111101'                                   0208  03850000
*                     COUNTER=BYTES;    /* NO. OF RECORD BYTES        * 03860000
         MVC   COUNTER(1),BYTES                                   0209  03870000
*                     GO TO TR1A;       /* CONTINUE PROCESSING        * 03880000
         BC    15,TR1A                                            0210  03890000
*                   END;                /* END OF DO LOOP             * 03900000
*                 ELSE;                 /* NULL ELSE                  * 03910000
@9DD     EQU   *                                                  0212  03920000
*               IF TBIT(3)='1'B         /* TRANS DESCRIP CONTIN MIDPT * 03930000
*                 THEN                  /* YES                        * 03940000
@9DC     TM    TBIT,B'00100000'                                   0213  03950000
         BC    12,@9DB                                            0213  03960000
*                   DO;                 /* DO LOOP                    * 03970000
*                     COUNTER=15;       /* SET COUNTER                * 03980000
         MVI   COUNTER,15                                         0215  03990000
*                     POINT=ADDR(B1);   /* LINK ADDRESS               * 04000000
         LA    @F,B1                                              0216  04010000
         ST    @F,POINT                                           0216  04020000
*                     GO TO SP1;        /* BYTE BY BYTE MOVE          * 04030000
         BC    15,SP1                                             0217  04040000
* B1:                 COUNTER=BYTES-15; /* SUBTRACT BYTES MOVED       * 04050000
B1       SR    @F,@F                                              0218  04060000
         IC    @F,BYTES                                           0218  04070000
         SH    @F,@D3                                             0218  04080000
         STC   @F,COUNTER                                         0218  04090000
*                     TBIT(3)='0'B;     /* ZERO OUT BIT               * 04100000
         NI    TBIT,B'11011111'                                   0219  04110000
*                     GO TO TR1;        /* ANALYZE RECORD             * 04120000
         BC    15,TR1                                             0220  04130000
*                   END;                /* END OF DO LOOP             * 04140000
*                 ELSE;                 /* NO                         * 04150000
@9DB     EQU   *                                                  0222  04160000
*               IF TBIT(6)='1'B         /* TRANS DESCRIP CONTIN       * 04170000
*                 THEN                  /* YES                        * 04180000
@9DA     TM    TBIT,B'00000100'                                   0223  04190000
         BC    12,@9D9                                            0223  04200000
*                   DO;                 /* DO LOOP                    * 04210000
*                     TBIT(6)='0'B;     /* ZERO OUT BIT               * 04220000
         NI    TBIT,B'11111011'                                   0225  04230000
*                     POINT=ADDR(B2);   /* LINK ADDRESS               * 04240000
         LA    @F,B2                                              0226  04250000
         ST    @F,POINT                                           0226  04260000
*                     GO TO SP1;        /* BYTE BY BYTE MOVE          * 04270000
         BC    15,SP1                                             0227  04280000
* B2:                 COUNTER=BYTES-COUNTER; /* BYTES LEFT            * 04290000
B2       SR    @F,@F                                              0228  04300000
         IC    @F,BYTES                                           0228  04310000
         SR    @0,@0                                              0228  04320000
         IC    @0,COUNTER                                         0228  04330000
         SR    @F,@0                                              0228  04340000
         STC   @F,COUNTER                                         0228  04350000
*                   IF TBIT(5)='1'B          /*SECOND XLATOR @ZA03924 * 04360000
*                     THEN                   /* SPLIT THEN   @ZA03924 * 04370000
         TM    TBIT,B'00001000'                                   0229  04380000
         BC    12,@9D8                                            0229  04390000
*                       DO;                  /* TURN OFF BIT @ZA03924 * 04400000
*                       TBIT(5)='0'B;        /* AND CONTINUE @ZA03924 * 04410000
         NI    TBIT,B'11110111'                                   0231  04420000
*                       GO TO TR1;           /* NORMAL PROC  @ZA03924 * 04430000
         BC    15,TR1                                             0232  04440000
*                      END;                  /* OF RECORD    @ZA03924 * 04450000
*                    ELSE;                   /*              @ZA03924 * 04460000
@9D8     EQU   *                                                  0234  04470000
*                     IF TBIT(8)='1'B  /* BIT ON                      * 04480000
*                       THEN           /* YES                         * 04490000
@9D7     TM    TBIT,B'00000001'                                   0235  04500000
*                         GO TO TR1;   /* ANALYZE RECORD              * 04510000
         BC    01,TR1                                             0236  04520000
*                       ELSE           /* NO                          * 04530000
*                         DO;                                           04540000
*                           TDTAB=BLANKS; /* SET TRANS DESC TO BLANKS * 04550000
         L     @3,TRN                                             0238  04560000
         MVC   0(1,@3),BLANKS                                     0238  04570000
         MVI   1(@3),C' '                                         0238  04580000
         MVC   2(13,@3),1(@3)                                     0238  04590000
*                           TRN=TRN+15;   /* INCR PTR                 * 04600000
         LA    @F,15                                              0239  04610000
         A     @F,TRN                                             0239  04620000
         ST    @F,TRN                                             0239  04630000
*                         END;                                          04640000
*                     GO TO TR1;        /* ANALYZE REST OF RECORD     * 04650000
         BC    15,TR1                                             0241  04660000
*                   END;                /* END OF DO LOOP             * 04670000
*                 ELSE;                 /* NO                         * 04680000
@9D9     EQU   *                                                  0243  04690000
*               IF TBIT(4)='1'B         /* ID CONTIN                  * 04700000
*                 THEN                  /* YES                        * 04710000
@9D6     TM    TBIT,B'00010000'                                   0244  04720000
         BC    12,@9D5                                            0244  04730000
*                   DO;                 /* DO LOOP                    * 04740000
*                     SAV2=SPBIT;       /* ONE BYTE MOVE              * 04750000
         L     @3,NEXT                                            0246  04760000
         MVC   IDSAVE+1(1),0(@3)                                  0246  04770000
*                     NEXT=NEXT+1;      /* UP RECORD PTR              * 04780000
         LA    @F,1                                               0247  04790000
         A     @F,NEXT                                            0247  04800000
         ST    @F,NEXT                                            0247  04810000
*                     COUNTER=BYTES-1;  /* NO. OF RECORD BYTES LEFT   * 04820000
         SR    @F,@F                                              0248  04830000
         IC    @F,BYTES                                           0248  04840000
         BCTR  @F,0                                               0248  04850000
         STC   @F,COUNTER                                         0248  04860000
*                     GO TO TR1B;       /* CONTINUE PROCESSING        * 04870000
         BC    15,TR1B                                            0249  04880000
*                   END;                /* END OF DO LOOP             * 04890000
*                 ELSE;                 /* NO                         * 04900000
*               GO TO IDR2;             /* IDR CHECK                  * 04910000
*             END;                      /* END OF DO LOOP             * 04920000
*           ELSE;                       /* NO                         * 04930000
@9E0     EQU   *                                                  0254  04940000
@9E1     EQU   *                                                  0254  04950000
*         IF SUBTYP(5:8)='1000'B        /* IDENTIFY RECORD            * 04960000
*           THEN                        /* YES                        * 04970000
@9D3     EQU   *                                                  0255  04980000
         L     @3,INREC                                           0255  04990000
         TM    2(@3),B'00001000'                                  0255  05000000
         BC    12,@9D2                                            0254  05010000
         TM    2(@3),B'00000111'                                  0255  05020000
         BC    05,@9D1                                            0255  05030000
*             DO;                       /*                            * 05040000
*               CSDNXT=CSDPT;           /* START OF CESD TABLE        * 05050000
         MVC   CSDNXT(4),CSDPT                                    0257  05060000
*               NEXT=INREC+3;           /* UP RECORD PTR              * 05070000
         LA    @F,3                                               0258  05080000
         A     @F,INREC                                           0258  05090000
         ST    @F,NEXT                                            0258  05100000
*               IF TBIT(1)='1'B         /* PREVIOUS TRANSLATOR RECORD * 05110000
*                 THEN                  /* YES                        * 05120000
         TM    TBIT,B'10000000'                                   0259  05130000
         BC    12,@9D0                                            0259  05140000
*                   DO;                 /* DO LOOP                    * 05150000
*                     TBIT(1)='0'B;     /* ZERO OUT BIT               * 05160000
         NI    TBIT,B'01111111'                                   0261  05170000
*                     CALL TRSORT;      /* PRINT OUT PREVIOUS RECORD  * 05180000
         BAL   @E,TRSORT                                          0262  05190000
*                     COUNTER=BYTES;    /* NO. OF RECORD BYTES        * 05200000
         MVC   COUNTER(1),BYTES                                   0263  05210000
*                     GO TO IDENRT;     /* PROCESS RECORD             * 05220000
         BC    15,IDENRT                                          0264  05230000
*                   END;                /* END OF DO LOOP             * 05240000
*                 ELSE;                 /* NULL ELSE                  * 05250000
@9D0     EQU   *                                                  0266  05260000
*               IF TBIT(2)='1'B         /* LAST RECORD IDENTIFY       * 05270000
*                 THEN                  /*  YES                       * 05280000
@9CF     TM    TBIT,B'01000000'                                   0267  05290000
         BC    12,@9CE                                            0267  05300000
*                   DO;                 /* DO LOOP                    * 05310000
*                     TBIT(2)='0'B;     /* ZERO OUT BIT               * 05320000
         NI    TBIT,B'10111111'                                   0269  05330000
*                     COUNTER=BYTES;    /* NO. OF RECORD BYTES        * 05340000
         MVC   COUNTER(1),BYTES                                   0270  05350000
*                     GO TO ID3;        /* BEGIN PROCESSING           * 05360000
         BC    15,ID3                                             0271  05370000
*                   END;                /* END OF LOOP                * 05380000
*                 ELSE;                 /* NULL ELSE                  * 05390000
@9CE     EQU   *                                                  0273  05400000
*               IF TBIT(8)='1'B         /* BIT ON                     * 05410000
*                 THEN                  /* YES                        * 05420000
@9CD     TM    TBIT,B'00000001'                                   0274  05430000
         BC    12,@9CC                                            0274  05440000
*                   DO;                 /* DO LOOP                    * 05450000
*                     SAV2=INFO;        /* REST OF ID                 * 05460000
         L     @3,NEXT                                            0276  05470000
         MVC   IDSAVE+1(1),0(@3)                                  0276  05480000
*                     NEXT=NEXT+1;      /* UP RECORD PTR              * 05490000
         LA    @F,1                                               0277  05500000
         A     @F,NEXT                                            0277  05510000
         ST    @F,NEXT                                            0277  05520000
*                     TBIT(8)='0'B;     /* ZERO OUT BIT               * 05530000
         NI    TBIT,B'11111110'                                   0278  05540000
* SUB1:               IF IDEN=IDSAVE    /* MATCHING ID'S              * 05550000
*                       THEN            /*                            * 05560000
SUB1     L     @3,CSDNXT                                          0279  05570000
         CLC   10(2,@3),IDSAVE                                    0279  05580000
         BC    07,@9CB                                            0279  05590000
*                         DO;           /* DO LOOP                    * 05600000
*                           SRTEND=SRT;   /* END OF TABLE ADDRESS     * 05610000
         MVC   SRTEND(4),SRT                                      0281  05620000
*                           USNAME=NAME; /* PUT CSECT NAME IN TABLE   * 05630000
         L     @8,SRT                                             0282  05640000
         MVC   0(8,@8),0(@3)                                      0282  05650000
*                           SRT=SRT+8;  /* UP TABLE PTR               * 05660000
         LA    @F,8                                               0283  05670000
         A     @F,SRT                                             0283  05680000
         ST    @F,SRT                                             0283  05690000
*                           BYTES=BYTES-1; /* NO. OF REC BYTES LEFT   * 05700000
         SR    @F,@F                                              0284  05710000
         IC    @F,BYTES                                           0284  05720000
         BCTR  @F,0                                               0284  05730000
         STC   @F,BYTES                                           0284  05740000
*                           GO TO SUB2; /* DO LOOP FOR DATE           * 05750000
         BC    15,SUB2                                            0285  05760000
*                         END;          /* END OF LOOP                * 05770000
*                       ELSE            /* NO                         * 05780000
*                         IF CSDNXT > CSDEND /* END OF CESD TABLE     * 05790000
*                           THEN        /* YES                        * 05800000
@9CB     L     @F,CSDEND                                          0287  05810000
         C     @F,CSDNXT                                          0287  05820000
*                             GO TO ERR1;    /* ERROR                 * 05830000
         BC    04,ERR1                                            0288  05840000
*                           ELSE             /* NO                    * 05850000
*                             DO;            /* DO LOOP               * 05860000
*                               CSDNXT=CSDNXT+12; /* NEXT CESD ENTRY  * 05870000
         LA    @F,12                                              0290  05880000
         A     @F,CSDNXT                                          0290  05890000
         ST    @F,CSDNXT                                          0290  05900000
*                               GO TO SUB1;  /* TRY AGAIN             * 05910000
         BC    15,SUB1                                            0291  05920000
*                             END;           /* END OF DO LOOP        * 05930000
*                   END;                /* END OF DO LOOP             * 05940000
*                 ELSE;                 /* NULL ELSE                  * 05950000
@9CC     EQU   *                                                  0294  05960000
*               IF TBIT(7)='1'B         /* BIT ON                     * 05970000
*                 THEN                  /*   YES                      * 05980000
@9C9     TM    TBIT,B'00000010'                                   0295  05990000
         BC    12,@9C8                                            0295  06000000
*                   DO;                 /* DO LOOP                    * 06010000
*                     TBIT(7)='0'B;     /* ZERO OUT BIT               * 06020000
         NI    TBIT,B'11111101'                                   0297  06030000
*                     GO TO SUB2;       /* SAVE DATE AND NO. OF BYTES * 06040000
         BC    15,SUB2                                            0298  06050000
*                   END;                /* END OF LOOP                * 06060000
*                 ELSE;                 /* NULL ELSE                  * 06070000
@9C8     EQU   *                                                  0300  06080000
*               IF TBIT(6)='1'B         /* BIT ON                     * 06090000
*                 THEN                  /* YES                        * 06100000
@9C7     TM    TBIT,B'00000100'                                   0301  06110000
         BC    12,@9C6                                            0301  06120000
*                   DO;                 /* DO LOOP                    * 06130000
*                     USINFO=INFO;      /* MOVE REST OF DATE          * 06140000
         L     @3,NEXT                                            0303  06150000
         L     @8,SRT                                             0303  06160000
         MVC   0(1,@8),0(@3)                                      0303  06170000
*                     NEXT=NEXT+1;      /* UP RECORD PTR              * 06180000
         LA    @F,1                                               0304  06190000
         A     @F,NEXT                                            0304  06200000
         ST    @F,NEXT                                            0304  06210000
*                     SRT=SRT+1;        /* UP TABLE PTR               * 06220000
         LA    @F,1                                               0305  06230000
         A     @F,SRT                                             0305  06240000
         ST    @F,SRT                                             0305  06250000
*                     USINFO=INFO;      /* MOVE REST OF DATE          * 06260000
         L     @3,NEXT                                            0306  06270000
         LR    @8,@F                                              0306  06280000
         MVC   0(1,@8),0(@3)                                      0306  06290000
*                     NEXT=NEXT+1;      /* UP RECORD PTR              * 06300000
         LA    @F,1                                               0307  06310000
         A     @F,NEXT                                            0307  06320000
         ST    @F,NEXT                                            0307  06330000
*                     SRT=SRT+1;        /* UP TABLE PTR               * 06340000
         LA    @F,1                                               0308  06350000
         A     @F,SRT                                             0308  06360000
         ST    @F,SRT                                             0308  06370000
*                     NUMBS=INFO;       /* SAVE DATA LENGTH           * 06380000
         L     @3,NEXT                                            0309  06390000
         MVC   NUMBS(1),0(@3)                                     0309  06400000
*                     NEXT=NEXT+1;      /* UP RECORD PTR              * 06410000
         LA    @F,1                                               0310  06420000
         A     @F,NEXT                                            0310  06430000
         ST    @F,NEXT                                            0310  06440000
*                     COUNTER=BYTES-3;  /* NUMBER OF RECORD BYTES LEFT* 06450000
         SR    @F,@F                                              0311  06460000
         IC    @F,BYTES                                           0311  06470000
         SH    @F,@D4                                             0311  06480000
         STC   @F,COUNTER                                         0311  06490000
*                     TBIT(6)='0'B;     /* ZERO OUT BIT               * 06500000
         NI    TBIT,B'11111011'                                   0312  06510000
*                     GO TO ID4;        /* CONTINUE PROCESSING        * 06520000
         BC    15,ID4                                             0313  06530000
*                   END;                /* END OF LOOP                * 06540000
*                 ELSE;                 /* NULL ELSE                  * 06550000
@9C6     EQU   *                                                  0315  06560000
*               IF TBIT(5)='1'B         /* BIT ON                     * 06570000
*                 THEN                  /* YES                        * 06580000
@9C5     TM    TBIT,B'00001000'                                   0316  06590000
         BC    12,@9C4                                            0316  06600000
*                   DO;                 /* DO LOOP                    * 06610000
*                     USINFO=INFO;      /* MOVE REST OF DATE          * 06620000
         L     @3,NEXT                                            0318  06630000
         L     @8,SRT                                             0318  06640000
         MVC   0(1,@8),0(@3)                                      0318  06650000
*                     NEXT=NEXT+1;      /* UP RECORD PTR              * 06660000
         LA    @F,1                                               0319  06670000
         A     @F,NEXT                                            0319  06680000
         ST    @F,NEXT                                            0319  06690000
*                     SRT=SRT+1;        /* UP TABLE PTR               * 06700000
         LA    @F,1                                               0320  06710000
         A     @F,SRT                                             0320  06720000
         ST    @F,SRT                                             0320  06730000
*                     NUMBS=INFO;       /* SAVE DATA LENGTH           * 06740000
         L     @3,NEXT                                            0321  06750000
         MVC   NUMBS(1),0(@3)                                     0321  06760000
*                     NEXT=NEXT+1;      /* UP RECORD PTR              * 06770000
         LA    @F,1                                               0322  06780000
         A     @F,NEXT                                            0322  06790000
         ST    @F,NEXT                                            0322  06800000
*                     COUNTER=BYTES-2;  /* NO. OF RECORD BYTES LEFT   * 06810000
         SR    @F,@F                                              0323  06820000
         IC    @F,BYTES                                           0323  06830000
         SH    @F,@D5                                             0323  06840000
         STC   @F,COUNTER                                         0323  06850000
*                     TBIT(5)='0'B;     /* ZERO OUT BIT               * 06860000
         NI    TBIT,B'11110111'                                   0324  06870000
*                     GO TO ID4;        /* CONTINUE PROCESSING        * 06880000
         BC    15,ID4                                             0325  06890000
*                   END;                /* END OF LOOP                * 06900000
*                 ELSE;                 /* NULL ELSE                  * 06910000
@9C4     EQU   *                                                  0327  06920000
*               IF TBIT(4)='1'B         /* BIT ON                     * 06930000
*                 THEN                  /*        YES                 * 06940000
@9C3     TM    TBIT,B'00010000'                                   0328  06950000
         BC    12,@9C2                                            0328  06960000
*                   DO;                 /* DO LOOP                    * 06970000
*                     NUMBS=INFO;       /* SAVE DATA LENGTH           * 06980000
         L     @3,NEXT                                            0330  06990000
         MVC   NUMBS(1),0(@3)                                     0330  07000000
*                     NEXT=NEXT+1;      /* INCR PT TO INPUT           * 07010000
         LA    @F,1                                               0331  07020000
         A     @F,NEXT                                            0331  07030000
         ST    @F,NEXT                                            0331  07040000
*                     COUNTER=BYTES-1;  /* NO. OF RECORD BYTES        * 07050000
         SR    @F,@F                                              0332  07060000
         IC    @F,BYTES                                           0332  07070000
         BCTR  @F,0                                               0332  07080000
         STC   @F,COUNTER                                         0332  07090000
*                     TBIT(4)='0'B;     /* ZERO OUT BIT               * 07100000
         NI    TBIT,B'11101111'                                   0333  07110000
*                     GO TO ID4;        /* CONTINUE PROCESSING        * 07120000
         BC    15,ID4                                             0334  07130000
*                   END;                /* END OF LOOP                * 07140000
*                 ELSE;                 /* NULL ELSE                  * 07150000
@9C2     EQU   *                                                  0336  07160000
*               IF TBIT(3)='1'B         /* BIT ON                     * 07170000
*                 THEN                  /* YES                        * 07180000
@9C1     TM    TBIT,B'00100000'                                   0337  07190000
         BC    12,@9C0                                            0337  07200000
*                   DO;                 /* DO LOOP                    * 07210000
*                     DO A=1 TO COUNTER; /* MOVE REST OF DATA         * 07220000
         LA    @F,1                                               0339  07230000
         BC    15,@DO9BE                                          0339  07240000
*                       USINFO=INFO;    /* BYTE BY BYTE               * 07250000
@DO9BF   L     @3,NEXT                                            0340  07260000
         L     @8,SRT                                             0340  07270000
         MVC   0(1,@8),0(@3)                                      0340  07280000
*                       NEXT=NEXT+1;    /* UP RECORD PTR              * 07290000
         LA    @F,1                                               0341  07300000
         A     @F,NEXT                                            0341  07310000
         ST    @F,NEXT                                            0341  07320000
*                       SRT=SRT+1;      /* UP TABLE PTR               * 07330000
         LA    @F,1                                               0342  07340000
         A     @F,SRT                                             0342  07350000
         ST    @F,SRT                                             0342  07360000
*                     END;              /* END OF DO LOOP             * 07370000
*                       COUNTER=BYTES-COUNTER; /* NO. OF RECORD BYTES * 07380000
         SR    @F,@F                                              0343  07390000
         IC    @F,A                                               0343  07400000
         AH    @F,@D6                                             0343  07410000
@DO9BE   STC   @F,A                                               0343  07420000
         SR    @0,@0                                              0343  07430000
         IC    @0,COUNTER                                         0343  07440000
         CR    @F,@0                                              0343  07450000
         BC    12,@DO9BF                                          0343  07460000
         SR    @F,@F                                              0344  07470000
         IC    @F,BYTES                                           0344  07480000
         IC    @0,COUNTER                                         0344  07490000
         SR    @F,@0                                              0344  07500000
         STC   @F,COUNTER                                         0344  07510000
*                       TBIT(3)='0'B;   /* ZERO OUT BIT               * 07520000
         NI    TBIT,B'11011111'                                   0345  07530000
*                     GO TO ID5;        /* CONTINUE PROCESSING        * 07540000
         BC    15,ID5                                             0346  07550000
*                   END;                /* END OF LOOP                * 07560000
*                 ELSE;                 /* NULL ELSE                  * 07570000
@9C0     EQU   *                                                  0348  07580000
*         COUNTER=BYTES;                /* NO. OF RECORD BYTES        * 07590000
@9BB     MVC   COUNTER(1),BYTES                                   0349  07600000
*         GO TO IDENRT;                 /* PROCESS RECORD             * 07610000
         BC    15,IDENRT                                          0350  07620000
*             END;                      /* END OF DO LOOP             * 07630000
*           ELSE;                       /* NULL ELSE                  * 07640000
@9D1     EQU   *                                                  0352  07650000
@9D2     EQU   *                                                  0352  07660000
* SUB2:   COUNTER=3;                    /* SET UP COUNTER FOR DO LOOP * 07670000
@9BA     EQU   *                                                  0353  07680000
SUB2     MVI   COUNTER,3                                          0353  07690000
*         DO A=1 TO COUNTER;            /* MOVE IN DATE               * 07700000
         LA    @F,1                                               0354  07710000
         BC    15,@DO9B8                                          0354  07720000
*           USINFO=INFO;                /* BYTE BY BYTE               * 07730000
@DO9B9   L     @3,NEXT                                            0355  07740000
         L     @8,SRT                                             0355  07750000
         MVC   0(1,@8),0(@3)                                      0355  07760000
*           NEXT=NEXT+1;                /* UP RECORD PTR              * 07770000
         LA    @F,1                                               0356  07780000
         A     @F,NEXT                                            0356  07790000
         ST    @F,NEXT                                            0356  07800000
*           SRT=SRT+1;                  /* UP TABLE PTR               * 07810000
         LA    @F,1                                               0357  07820000
         A     @F,SRT                                             0357  07830000
         ST    @F,SRT                                             0357  07840000
*         END;                          /* END OF DO LOOP             * 07850000
*         NUMBS=INFO;                   /* NUMBER OF DATA BYTES       * 07860000
         SR    @F,@F                                              0358  07870000
         IC    @F,A                                               0358  07880000
         AH    @F,@D6                                             0358  07890000
@DO9B8   STC   @F,A                                               0358  07900000
         SR    @0,@0                                              0358  07910000
         IC    @0,COUNTER                                         0358  07920000
         CR    @F,@0                                              0358  07930000
         BC    12,@DO9B9                                          0358  07940000
         L     @3,NEXT                                            0359  07950000
         MVC   NUMBS(1),0(@3)                                     0359  07960000
*         COUNTER=BYTES-4;              /* NUMBER OF RECORD BYTES LEFT* 07970000
         SR    @F,@F                                              0360  07980000
         IC    @F,BYTES                                           0360  07990000
         SH    @F,@D7                                             0360  08000000
         STC   @F,COUNTER                                         0360  08010000
*         NEXT=NEXT+1;                  /* UP RECORD PTR              * 08020000
         LA    @F,1                                               0361  08030000
         A     @F,NEXT                                            0361  08040000
         ST    @F,NEXT                                            0361  08050000
*         GO TO ID4;                    /* CONTINUE PROCESSING        * 08060000
         BC    15,ID4                                             0362  08070000
* ZAPRT:  NUMBS='0'X;                   /* ZERO OUT COUNTER           * 08080000
ZAPRT    MVI   NUMBS,X'00'                                        0363  08090000
*         NEXT=INREC+3;                 /* PTR TO START OF ZAP INFO   * 08100000
         LA    @F,3                                               0364  08110000
         A     @F,INREC                                           0364  08120000
         ST    @F,NEXT                                            0364  08130000
*         SWITCH(1:8)=FLG(1:8);         /* SAVE FLAG BYTE             * 08140000
         LR    @3,@F                                              0365  08150000
         MVC   SWITCH(1),0(@3)                                    0365  08160000
*         CSDNXT=CSDPT;                 /* START OF CESD TABLE        * 08170000
         MVC   CSDNXT(4),CSDPT                                    0366  08180000
*         IF FLG1(2)='1'B               /* PREVIOUS ZAP RECORD        * 08190000
*           THEN                        /* YES                        * 08200000
         TM    FLG1,B'01000000'                                   0367  08210000
*             GO TO ZA;                 /* CONTINUE PROCESSING        * 08220000
         BC    01,ZA                                              0368  08230000
*           ELSE                        /* NO                         * 08240000
*             SRT=SORTOUT;              /* START OF SORT TABLE        * 08250000
         MVC   SRT(4),SORTOUT                                     0369  08260000
* ZA:     FLG1=FLG;                     /* SAVE NUMBER OF ZAPS        * 08270000
ZA       L     @3,NEXT                                            0370  08280000
         MVC   FLG1(1),0(@3)                                      0370  08290000
*         FLG1(1:2)='00'B;              /* ZERO OUT BITS              * 08300000
         NI    FLG1,B'00111111'                                   0371  08310000
*         COUNTER=FLG1;                 /* SET UP COUNTER             * 08320000
         MVC   COUNTER(1),FLG1                                    0372  08330000
*         IF COUNTER = 0                /* ANY ZAP ENTRIES            * 08340000
*           THEN                        /* NO                         * 08350000
         CLI   COUNTER,0                                          0373  08360000
         BC    07,@9B5                                            0373  08370000
*             IF SW1(2)='1'B            /* PREVIOUS ZAP RECORD        * 08380000
*               THEN                    /* YES                        * 08390000
         TM    SW1,B'01000000'                                    0374  08400000
*                 GO TO UP1;            /* PRINT IT OUT               * 08410000
         BC    01,UP1                                             0375  08420000
*               ELSE                    /* NO                         * 08430000
*                 GO TO WR1;            /* SPECIAL ZAP MESSAGE        * 08440000
         BC    15,WR1                                             0376  08450000
*           ELSE                                                        08460000
*             DO;                       /* DO LOOP                    * 08470000
*               SW1(2)='1'B;            /* ZAP ENTRIES PROCESSED      * 08480000
@9B5     OI    SW1,B'01000000'                                    0378  08490000
*               NEXT=NEXT+1;            /* UP RECORD PTR              * 08500000
         LA    @F,1                                               0379  08510000
         A     @F,NEXT                                            0379  08520000
         ST    @F,NEXT                                            0379  08530000
*             END;                      /* END OF DO LOOP             * 08540000
* ZAP1:   IF IDEN=ESD                   /* SEARCH FOR MATCHING ESD    * 08550000
*           THEN                        /* WHEN FOUND                 * 08560000
@9B4     EQU   *                                                  0381  08570000
ZAP1     L     @3,NEXT                                            0381  08580000
         L     @8,CSDNXT                                          0381  08590000
         CLC   10(2,@8),0(@3)                                     0381  08600000
         BC    07,@9B3                                            0381  08610000
*             DO;                       /* DO LOOP                    * 08620000
*               ZPDATE=DATE1;           /* SAVE DATE                  * 08630000
         L     @6,SRT                                             0383  08640000
         MVC   8(3,@6),2(@3)                                      0383  08650000
*               CNAME=NAME;             /* SAVE CSECT NAME            * 08660000
         MVC   0(8,@6),0(@8)                                      0384  08670000
*               DAZP=ZP;                /* SAVE ZAP DATA              * 08680000
         MVC   11(8,@6),5(@3)                                     0385  08690000
*               NUMBS=NUMBS+1;          /* UP THE COUNTER             * 08700000
         LA    @F,1                                               0386  08710000
         SR    @0,@0                                              0386  08720000
         IC    @0,NUMBS                                           0386  08730000
         AR    @F,@0                                              0386  08740000
         STC   @F,NUMBS                                           0386  08750000
*               GO TO UPPTR;            /* BRANCH OUT                 * 08760000
         BC    15,UPPTR                                           0387  08770000
*             END;                      /* END OF DO LOOP             * 08780000
*           ELSE                        /* NO MATCH                   * 08790000
*             IF CSDNXTÂ¬=CSDEND         /* ANY MORE CESD ENTRIES?     * 08800000
*               THEN                    /* YES                        * 08810000
@9B3     L     @F,CSDEND                                          0389  08820000
         C     @F,CSDNXT                                          0389  08830000
         BC    08,@9B1                                            0389  08840000
*                 DO;                   /* DO LOOP                    * 08850000
*                   CSDNXT=CSDNXT+12;   /* UP CESD TABLE PTR          * 08860000
         LA    @F,12                                              0391  08870000
         A     @F,CSDNXT                                          0391  08880000
         ST    @F,CSDNXT                                          0391  08890000
*                   GO TO ZAP1;         /* TRY AGAIN                  * 08900000
         BC    15,ZAP1                                            0392  08910000
*                 END;                  /* END OF DO LOOP             * 08920000
*               ELSE                    /* NO MORE ENTRIES            * 08930000
*                 GO TO ERR1;           /* CESD ERROR                 * 08940000
* UPPTR:  IF COUNTER=NUMBS              /* LAST ZAP ENTRY             * 08950000
*           THEN                        /* YES                        * 08960000
@9B0     EQU   *                                                  0395  08970000
@9B2     EQU   *                                                  0395  08980000
UPPTR    CLC   COUNTER(1),NUMBS                                   0395  08990000
         BC    07,@9AF                                            0395  09000000
*             IF SWITCH(2)='1'B         /* ANOTHER ZAP RECORD         * 09010000
*               THEN                    /* YES                        * 09020000
         TM    SWITCH,B'01000000'                                 0396  09030000
         BC    12,@9AE                                            0396  09040000
*                 DO;                   /* DO LOOP                    * 09050000
*                   SRTEND=SRT;         /* SAVE END OF TABLE ADDR     * 09060000
         MVC   SRTEND(4),SRT                                      0398  09070000
*                   SRT=SRT+19;         /* INCR TABLE PTR      XA1821 * 09080000
         LA    @F,19                                              0399  09090000
         A     @F,SRT                                             0399  09100000
         ST    @F,SRT                                             0399  09110000
*                   FLG1(2)='1'B;       /* PREVIOUS ZAP               * 09120000
         OI    FLG1,B'01000000'                                   0400  09130000
*                   GO TO READRT;       /* READ NEXT ZAP RECORD       * 09140000
         BC    15,READRT                                          0401  09150000
*                 END;                  /* END OF DO LOOP             * 09160000
*               ELSE                    /*                            * 09170000
*                 DO;                   /* DO LOOP FOR SORTING TABLE  * 09180000
*                   SRTEND=SRT;         /* SAVE END OF TABLE ADDR     * 09190000
@9AE     MVC   SRTEND(4),SRT                                      0404  09200000
* UP1:              SRT=SORTOUT;        /* START OF TABLE             * 09210000
UP1      MVC   SRT(4),SORTOUT                                     0405  09220000
*                   IF SRT=SRTEND       /* END OF TABLE?              * 09230000
*                     THEN              /* YES                        * 09240000
         L     @F,SRTEND                                          0406  09250000
         C     @F,SRT                                             0406  09260000
         BC    07,@9AC                                            0406  09270000
*                       DO;             /* DO LOOP                    * 09280000
*                         CALL PRNT1;   /* WRITE HEADER               * 09290000
         BAL   @E,PRNT1                                           0408  09300000
*                         GO TO SRT2;   /* BRANCH TO PRINT            * 09310000
         BC    15,SRT2                                            0409  09320000
*                       END;            /* END OF DO LOOP             * 09330000
*                     ELSE;             /* NULL ELSE                  * 09340000
@9AC     EQU   *                                                  0411  09350000
*                   SRTPT=SRT;          /* START OF TABLE             * 09360000
@9AB     MVC   SRTPT(4),SRT                                       0412  09370000
*                   SORTAREA=SORTAB;    /* MOVE FIRST ENTRY           * 09380000
         L     @3,SRT                                             0413  09390000
         MVC   SORTAREA(19),0(@3)                                 0413  09400000
*                   GO TO SRT1;         /* BRANCH TO START SORT       * 09410000
         BC    15,SRT1                                            0414  09420000
*                 END;                  /* END OF DO LOOP             * 09430000
*           ELSE                        /* MORE ZAP DATA              * 09440000
*             DO;                       /* DO LOOP                    * 09450000
*               NEXT=NEXT+13;           /* UP RECORD PTR              * 09460000
@9AF     LA    @F,13                                              0417  09470000
         A     @F,NEXT                                            0417  09480000
         ST    @F,NEXT                                            0417  09490000
*               SRT=SRT+19;             /* UP TABLE PTR               * 09500000
         LA    @F,19                                              0418  09510000
         A     @F,SRT                                             0418  09520000
         ST    @F,SRT                                             0418  09530000
*               CSDNXT=CSDPT;           /* START OF CESD TABLE        * 09540000
         MVC   CSDNXT(4),CSDPT                                    0419  09550000
*               GO TO ZAP1;             /* PROCESS NEXT ZAP DATA      * 09560000
         BC    15,ZAP1                                            0420  09570000
*             END;                      /* END OF DO LOOP             * 09580000
* SRT1:   SRT=SRT+19;                   /* UP PTR TO SORT TABLE       * 09590000
@9AA     EQU   *                                                  0422  09600000
SRT1     LA    @F,19                                              0422  09610000
         A     @F,SRT                                             0422  09620000
         ST    @F,SRT                                             0422  09630000
*         IF CNAME Â¬< CSECTNM           /* ALPHA SORT CORRECT         * 09640000
*           THEN                        /* YES                        * 09650000
         LR    @3,@F                                              0423  09660000
         CLC   0(8,@3),SORTAREA                                   0423  09670000
         BC    04,@9A9                                            0423  09680000
*             DO;                                                       09690000
*             IF SRT Â¬= SRTEND          /* LAST ENTRY                 * 09700000
*               THEN                    /* NO                         * 09710000
         L     @F,SRTEND                                          0425  09720000
         C     @F,SRT                                             0425  09730000
*                 GO TO SRT1;           /* CONTINUE SORT              * 09740000
         BC    07,SRT1                                            0426  09750000
*               ELSE                    /* YES                        * 09760000
*                 DO;                   /* DO LOOP                    * 09770000
*                   SRTPT=SRTPT+19;     /* NEXT ENTRY                 * 09780000
         LA    @F,19                                              0428  09790000
         A     @F,SRTPT                                           0428  09800000
         ST    @F,SRTPT                                           0428  09810000
*                   GO TO SRT3;         /* NEXT COMPARE               * 09820000
         BC    15,SRT3                                            0429  09830000
*                 END;                  /* END OF DO LOOP             * 09840000
*             END;                      /* END OF DO LOOP             * 09850000
*           ELSE                        /* ALPHA ORDER INCORRECT      * 09860000
*             DO;                       /* YES                        * 09870000
*               ZAPSORT=SORTAB;         /* SAVE PRESENT TABLE ENTRY   * 09880000
@9A9     L     @3,SRT                                             0433  09890000
         MVC   ZAPSORT(19),0(@3)                                  0433  09900000
*               SORTAB=SORTAREA;        /* REPLACE WITH COMPARE ITEM  * 09910000
         MVC   0(19,@3),SORTAREA                                  0434  09920000
*               SRT=SRTPT;              /* REPLACE WITH NEEDED ADDR   * 09930000
         MVC   SRT(4),SRTPT                                       0435  09940000
*               SORTAB=ZAPSORT;         /* SWAP TABLE ENTRY           * 09950000
         L     @3,SRT                                             0436  09960000
         MVC   0(19,@3),ZAPSORT                                   0436  09970000
* SRT3:         SRT=SRTPT;              /* USE NEW TABLE ENTRY        * 09980000
SRT3     MVC   SRT(4),SRTPT                                       0437  09990000
*               IF SRTPT = SRTEND       /* END OF TABLE               * 10000000
*                 THEN                  /*                            * 10010000
         L     @F,SRTEND                                          0438  10020000
         C     @F,SRTPT                                           0438  10030000
         BC    07,@9A7                                            0438  10040000
*                   DO;                 /* DO LOOP                    * 10050000
*                     CALL PRNT1;       /* WRITE HEADER               * 10060000
         BAL   @E,PRNT1                                           0440  10070000
*                     GO TO SRT2;       /* BRANCH TO PRINT            * 10080000
         BC    15,SRT2                                            0441  10090000
*                   END;                /* END OF DO LOOP             * 10100000
*                 ELSE                  /* NO                         * 10110000
*                   DO;                 /*                            * 10120000
*                     SORTAREA=SORTAB;  /* COMPARE ITEM               * 10130000
@9A7     L     @3,SRT                                             0444  10140000
         MVC   SORTAREA(19),0(@3)                                 0444  10150000
*                     GO TO SRT1;                                       10160000
         BC    15,SRT1                                            0445  10170000
*                   END;                /* END OF DO LOOP             * 10180000
*             END;                                                      10190000
@9A6     EQU   *                                                  0447  10200000
* SRT2:   IF NUMO > 50                  /* LINES > 50?                * 10210000
*           THEN                        /* YES                        * 10220000
@9A8     EQU   *                                                  0448  10230000
SRT2     L     @3,PARMPTR                                         0448  10240000
         CLI   72(@3),50                                          0448  10250000
         BC    12,@9A5                                            0448  10260000
*             CALL PRNT1;               /* WRITE HEADER               * 10270000
         BAL   @E,PRNT1                                           0449  10280000
*           ELSE;                       /* NULL ELSE                  * 10290000
@9A5     EQU   *                                                  0450  10300000
*         SRT=SORTOUT;                  /* START OF SORT TABLE        * 10310000
@9A4     MVC   SRT(4),SORTOUT                                     0451  10320000
* SRT4:   NUMO=NUMO+2;                  /* FOR LINE COUNT             * 10330000
SRT4     LA    @F,2                                               0452  10340000
         L     @3,PARMPTR                                         0452  10350000
         SR    @0,@0                                              0452  10360000
         IC    @0,72(0,@3)                                        0452  10370000
         AR    @F,@0                                              0452  10380000
         STC   @F,72(0,@3)                                        0452  10390000
*         ZPPRINT=BLANKS;               /* BLANK OUT AREA             * 10400000
         L     @8,OUT                                             0453  10410000
         MVC   0(1,@8),BLANKS                                     0453  10420000
         MVI   1(@8),C' '                                         0453  10430000
         MVC   2(119,@8),1(@8)                                    0453  10440000
*         USA2 = '0';                   /* SKIP TWO LINES             * 10450000
         MVI   0(@8),C'0'                                         0454  10460000
*         CSNAME = 'CSECT';             /* CSECT                      * 10470000
         MVC   21(5,@8),@C16                                      0455  10480000
         MVI   26(@8),C' '                                        0455  10490000
         MVC   27(2,@8),26(@8)                                    0455  10500000
*         YEAR = 'YR';                  /* YR                         * 10510000
         MVC   49(2,@8),@C17                                      0456  10520000
*         SL = '/';                     /* /                          * 10530000
         MVI   51(@8),C'/'                                        0457  10540000
*         DATE = 'DAY';                 /* DAY                        * 10550000
         MVC   52(3,@8),@C19                                      0458  10560000
*         ZPD='IMASPZAP';               /* IMASPZAP                   * 10570000
         MVC   75(8,@8),@C20                                      0459  10580000
*         SPCD=' DATA';                 /* DATA                       * 10590000
         MVC   83(5,@8),@C21                                      0460  10600000
         MVI   88(@8),C' '                                        0460  10610000
         MVC   89(32,@8),88(@8)                                   0460  10620000
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         * 10630000
*         R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         * 10640000
         L     @5,4(0,@3)                                         0462  10650000
*         R6=ADDR(ZPPRINT);             /* ADDR OF OUTPUT AREA        * 10660000
         LR    @6,@8                                              0463  10670000
*         GEN (PUT (5),(6));            /* PRINT OUTPUT LINE          * 10680000
         PUT (5),(6)                                                    10690000
         DS    0H                                                       10700000
*         GO TO WRZAP;                  /* CONTINUE PRINTOUT          * 10710000
         BC    15,WRZAP                                           0465  10720000
* WR:     R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         * 10730000
WR       L     @3,PARMPTR                                         0466  10740000
         L     @5,4(0,@3)                                         0466  10750000
*         R6=ADDR(ZPPRINT);             /* ADDR OF OUTPUT             * 10760000
         L     @4,OUT                                             0467  10770000
         LR    @6,@4                                              0467  10780000
*         GENERATE (PUT (5),(6));       /* PRINT RTN USING BAL MACRO  * 10790000
         PUT (5),(6)                                                    10800000
         DS    0H                                                       10810000
*         USA2=' ';                     /* SINGLE SPACING             * 10820000
         MVI   0(@4),C' '                                         0469  10830000
*         NUMO=NUMO+1;                  /* FOR LINE COUNT             * 10840000
         LA    @F,1                                               0470  10850000
         SR    @0,@0                                              0470  10860000
         IC    @0,72(0,@3)                                        0470  10870000
         AR    @F,@0                                              0470  10880000
         STC   @F,72(0,@3)                                        0470  10890000
*         LL=NUMO;                      /* LAST LINE                  * 10900000
         MVC   LL+1(1),72(@3)                                     0471  10910000
         MVI   LL,X'00'                                           0471  10920000
*         IF NUMO > 50                  /* NUMBER OF LINES > 50?      * 10930000
*           THEN                        /*     YES                    * 10940000
         CLI   72(@3),50                                          0472  10950000
         BC    12,@9A3                                            0472  10960000
*             DO;                       /* DO LOOP                    * 10970000
*               CALL PRNT1;             /* PRINT NEW HEADER           * 10980000
         BAL   @E,PRNT1                                           0474  10990000
*               GO TO SRT4;             /* PRINT NEW TITLE            * 11000000
         BC    15,SRT4                                            0475  11010000
*             END;                      /* END OF DO LOOP             * 11020000
*           ELSE                                                        11030000
*             GO TO WRZAP;              /* CONTINUE PRINTOUT          * 11040000
* WRZAP:  SPCD=BLANKS;                  /* BLANK OUT                  * 11050000
@9A2     EQU   *                                                  0478  11060000
WRZAP    L     @3,OUT                                             0478  11070000
         MVC   83(1,@3),BLANKS                                    0478  11080000
         MVI   84(@3),C' '                                        0478  11090000
         MVC   85(36,@3),84(@3)                                   0478  11100000
*         IF SRT > SRTEND               /* LAST ENTRY                 * 11110000
*           THEN                        /* YES                        * 11120000
         L     @F,SRTEND                                          0479  11130000
         C     @F,SRT                                             0479  11140000
         BC    10,@9A1                                            0479  11150000
*             DO;                       /* DO LOOP                    * 11160000
*               USA2='0';               /* FOR DOUBLE SPACING         * 11170000
         MVI   0(@3),C'0'                                         0481  11180000
*               ZPPRINT(2)='-';         /* DASH                       * 11190000
         MVI   1(@3),C'-'                                         0482  11200000
*               ZPPRINT(3:121)=ZPPRINT(2:120); /* PROPAGATE DASHES    * 11210000
         MVC   2(119,@3),1(@3)                                    0483  11220000
*               NUMO=NUMO+2;            /* FOR LINE COUNT             * 11230000
         LA    @F,2                                               0484  11240000
         L     @4,PARMPTR                                         0484  11250000
         SR    @0,@0                                              0484  11260000
         IC    @0,72(0,@4)                                        0484  11270000
         AR    @F,@0                                              0484  11280000
         STC   @F,72(0,@4)                                        0484  11290000
*               GEN (PUT (5),(6));                                      11300000
         PUT (5),(6)                                                    11310000
         DS    0H                                                       11320000
*               GO TO READRT;           /* READ NEXT RECORD           * 11330000
         BC    15,READRT                                          0486  11340000
*             END;                      /* END OF DO LOOP             * 11350000
*           ELSE                        /* NO                         * 11360000
*             DO;                       /* DO LOOP                    * 11370000
*               CSNAME=CNAME;           /* CSECT NAME                 * 11380000
@9A1     L     @3,SRT                                             0489  11390000
         L     @4,OUT                                             0489  11400000
         MVC   21(8,@4),0(@3)                                     0489  11410000
*               ZPD=DAZP;               /* ZAP DATA                   * 11420000
         MVC   75(8,@4),11(@3)                                    0490  11430000
*               R5=ADDR(ZPDATE);        /* ADDR OF DATE               * 11440000
         LA    @5,8(0,@3)                                         0491  11450000
*               R6=ADDR(UNPKAREA);      /* ADDR OF UNPACK AREA        * 11460000
         LA    @6,UNPKAREA                                        0492  11470000
*               GENERATE (UNPK 0(5,6),0(3,5));                          11480000
         UNPK 0(5,6),0(3,5)                                             11490000
         DS    0H                                                       11500000
*               RELEASE (5,6);          /* RELEASE RESTRICTION        * 11510000
*               YEAR=YRZ;               /*     YR                     * 11520000
         MVC   49(2,@4),UNPKAREA                                  0495  11530000
*               DATE=DYZ;               /* DAY                        * 11540000
         MVC   52(3,@4),UNPKAREA+2                                0496  11550000
*               SRT=SRT+19;             /* NEXT TABLE ENTRY           * 11560000
         LA    @F,19                                              0497  11570000
         A     @F,SRT                                             0497  11580000
         ST    @F,SRT                                             0497  11590000
*               GO TO WR;               /* GO TO PRINT OUT            * 11600000
         BC    15,WR                                              0498  11610000
*             END;                      /* END OF DO LOOP             * 11620000
* WR1:    CALL PRNT1;                   /* PRINT TITLE                * 11630000
@9A0     EQU   *                                                  0500  11640000
WR1      BAL   @E,PRNT1                                           0500  11650000
*         IF MDLB='1'B                  /* MODLIB SPECIFIED ?         * 11660000
*           THEN                        /* YES                        * 11670000
         L     @3,PARMPTR                                         0501  11680000
         TM    20(@3),B'00001000'                                 0501  11690000
*             GO TO READRT;             /* BYPASS NO ZAP MESSAGE      * 11700000
         BC    01,READRT                                          0502  11710000
*           ELSE;                       /* NULL ELSE                  * 11720000
*         NOZAP=BLANKS;                 /* BLANK OUT AREA             * 11730000
         L     @8,OUT                                             0504  11740000
         MVC   0(1,@8),BLANKS                                     0504  11750000
         MVI   1(@8),C' '                                         0504  11760000
         MVC   2(119,@8),1(@8)                                    0504  11770000
*         USA6='0';                     /* SKIP TWO LINES             * 11780000
         MVI   0(@8),C'0'                                         0505  11790000
*         ZPMSG1='THIS LOAD MODULE CONTAINS ';                          11800000
         MVC   26(26,@8),@C23                                     0506  11810000
*         ZPMSG2='NO INFORMATION SUPPLIED BY IMASPZAP';                 11820000
         MVC   52(35,@8),@C24                                     0507  11830000
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         * 11840000
*         R5=DCBOUT;                    /* ADDRESS OF OUTPUT DCB      * 11850000
         L     @5,4(0,@3)                                         0509  11860000
*         R6=ADDR(NOZAP);               /* ADDRESS OF OUTPUT AREA     * 11870000
         LR    @6,@8                                              0510  11880000
*         GENERATE (PUT (5),(6));                                       11890000
         PUT (5),(6)                                                    11900000
         DS    0H                                                       11910000
*         NOZAP(2)='-';                 /* DASH                       * 11920000
         MVI   1(@8),C'-'                                         0512  11930000
*         NOZAP(3:121)=NOZAP(2:120);    /* PROPAGATE DASHES           * 11940000
         MVC   2(119,@8),1(@8)                                    0513  11950000
*         GEN(PUT (5),(6));                                             11960000
         PUT (5),(6)                                                    11970000
         DS    0H                                                       11980000
*         RELEASE (5,6);                /* RELEASE RESTRICTION        * 11990000
*         NUMO=NUMO+4;                  /* FOR LINE COUNT             * 12000000
         LA    @F,4                                               0516  12010000
         SR    @0,@0                                              0516  12020000
         IC    @0,72(0,@3)                                        0516  12030000
         AR    @F,@0                                              0516  12040000
         STC   @F,72(0,@3)                                        0516  12050000
*         GO TO READRT;                                                 12060000
         BC    15,READRT                                          0517  12070000
* IDENRT: NEXT=INREC+3;                 /* START OF IDEN DATA         * 12080000
IDENRT   LA    @F,3                                               0518  12090000
         A     @F,INREC                                           0518  12100000
         ST    @F,NEXT                                            0518  12110000
*         SRT=SORTOUT;                  /* START OF IDEN TABLE AREA   * 12120000
         MVC   SRT(4),SORTOUT                                     0519  12130000
* ID3:    CSDNXT=CSDPT;                 /* START OF CESD TABLE        * 12140000
ID3      MVC   CSDNXT(4),CSDPT                                    0520  12150000
*         IF COUNTER < 6                /* LESS THAN 6 BYTES OF DATA  * 12160000
*           THEN                        /* YES                        * 12170000
         CLI   COUNTER,6                                          0521  12180000
*             GO TO ID1;                /* SAVE THESE BYTES           * 12190000
         BC    04,ID1                                             0522  12200000
*           ELSE;                       /* NO                         * 12210000
* ID2:    IF IDEN=ESD4                  /* MATCHING ID'S              * 12220000
*           THEN                        /* YES                        * 12230000
ID2      L     @3,NEXT                                            0524  12240000
         L     @8,CSDNXT                                          0524  12250000
         CLC   10(2,@8),0(@3)                                     0524  12260000
         BC    07,@99F                                            0524  12270000
*             DO;                       /* DO LOOP                    * 12280000
*               SRTEND=SRT;             /* END OF TABLE ADDRESS       * 12290000
         MVC   SRTEND(4),SRT                                      0526  12300000
*               USNAME=NAME;            /* SAVE CSECT NAME IN TABLE   * 12310000
         L     @6,SRT                                             0527  12320000
         MVC   0(8,@6),0(@8)                                      0527  12330000
*               USDATE=DATE5;           /* SAVE DATE IN TABLE         * 12340000
         MVC   8(3,@6),2(@3)                                      0528  12350000
*               SRT=SRT+11;             /* UP TABLE PTR               * 12360000
         LA    @F,11                                              0529  12370000
         A     @F,SRT                                             0529  12380000
         ST    @F,SRT                                             0529  12390000
*               NUMBS=CNT;              /* NUMBER OF DATA BYTES       * 12400000
         MVC   NUMBS(1),5(@3)                                     0530  12410000
*               NEXT=NEXT+6;            /* UP RECORD PTR              * 12420000
         LA    @F,6                                               0531  12430000
         A     @F,NEXT                                            0531  12440000
         ST    @F,NEXT                                            0531  12450000
*               COUNTER=COUNTER-6;      /* NO. OF RECORD BYTES LEFT   * 12460000
         SR    @F,@F                                              0532  12470000
         IC    @F,COUNTER                                         0532  12480000
         SH    @F,@D8                                             0532  12490000
         STC   @F,COUNTER                                         0532  12500000
* ID4:          IF COUNTER Â¬< NUMBS     /* RECORD BYTES Â¬< DATA BYTES * 12510000
*                 THEN                  /* YES                        * 12520000
ID4      CLC   COUNTER(1),NUMBS                                   0533  12530000
         BC    04,@99E                                            0533  12540000
*                   DO;                 /* DO LOOP                    * 12550000
*                     DO A=1 TO NUMBS;  /* MOVE BYTES LEFT IN RECORD  * 12560000
         LA    @F,1                                               0535  12570000
         BC    15,@DO99C                                          0535  12580000
*                       USINFO = INFO;  /* BYTE BY BYTE               * 12590000
@DO99D   L     @3,NEXT                                            0536  12600000
         L     @8,SRT                                             0536  12610000
         MVC   0(1,@8),0(@3)                                      0536  12620000
*                       NEXT=NEXT+1;    /* UP RECORD POINTER          * 12630000
         LA    @F,1                                               0537  12640000
         A     @F,NEXT                                            0537  12650000
         ST    @F,NEXT                                            0537  12660000
*                       SRT=SRT+1;      /* UP TABLE PTR               * 12670000
         LA    @F,1                                               0538  12680000
         A     @F,SRT                                             0538  12690000
         ST    @F,SRT                                             0538  12700000
*                     END;              /* END OF DO LOOP             * 12710000
*                     COUNTER=COUNTER-NUMBS; /* NUMBER OF REC BYTES   * 12720000
         SR    @F,@F                                              0539  12730000
         IC    @F,A                                               0539  12740000
         AH    @F,@D6                                             0539  12750000
@DO99C   STC   @F,A                                               0539  12760000
         SR    @0,@0                                              0539  12770000
         IC    @0,NUMBS                                           0539  12780000
         CR    @F,@0                                              0539  12790000
         BC    12,@DO99D                                          0539  12800000
         SR    @F,@F                                              0540  12810000
         IC    @F,COUNTER                                         0540  12820000
         IC    @0,NUMBS                                           0540  12830000
         SR    @F,@0                                              0540  12840000
         STC   @F,COUNTER                                         0540  12850000
* ID5:                IF NUMBS=40       /* DATA BYTES LESS THAN 40    * 12860000
*                       THEN            /* YES                        * 12870000
ID5      CLI   NUMBS,40                                           0541  12880000
*                         GO TO ID3;    /* PROCESS NEXT RECORD ENTRY  * 12890000
         BC    08,ID3                                             0542  12900000
*                       ELSE            /* NO                         * 12910000
*                         DO;           /* DO LOOP                    * 12920000
*                           NUMBS=40-NUMBS;   /* NUMBER LESS THAN 40  * 12930000
         LA    @F,40                                              0544  12940000
         SR    @0,@0                                              0544  12950000
         IC    @0,NUMBS                                           0544  12960000
         SR    @F,@0                                              0544  12970000
         STC   @F,NUMBS                                           0544  12980000
*                           DO A=1 TO NUMBS;  /* MOVE IN BLANKS       * 12990000
         LA    @F,1                                               0545  13000000
         BC    15,@DO998                                          0545  13010000
*                             USINFO=BLANKS;  /* BYTE BY BYTE         * 13020000
@DO999   L     @3,SRT                                             0546  13030000
         MVC   0(1,@3),BLANKS                                     0546  13040000
*                             SRT=SRT+1;      /* UP TABLE PTR         * 13050000
         LA    @F,1                                               0547  13060000
         A     @F,SRT                                             0547  13070000
         ST    @F,SRT                                             0547  13080000
*                           END;              /* END OF LOOP          * 13090000
*                           GO TO ID3;        /* PROCESS NEXT ENTRY   * 13100000
         SR    @F,@F                                              0548  13110000
         IC    @F,A                                               0548  13120000
         AH    @F,@D6                                             0548  13130000
@DO998   STC   @F,A                                               0548  13140000
         SR    @0,@0                                              0548  13150000
         IC    @0,NUMBS                                           0548  13160000
         CR    @F,@0                                              0548  13170000
         BC    12,@DO999                                          0548  13180000
         BC    15,ID3                                             0549  13190000
*                         END;                /* END OF DO LOOP       * 13200000
*                   END;                /* END OF DO LOOP             * 13210000
*                 ELSE                  /* NO                         * 13220000
*                   DO;                 /* DO LOOP                    * 13230000
*                     DO A=1 TO COUNTER; /* MOVE BYTES LEFT IN RECORD * 13240000
@99E     LA    @F,1                                               0553  13250000
         BC    15,@DO993                                          0553  13260000
*                       USINFO=INFO;    /* BYTE BY BYTE               * 13270000
@DO994   L     @3,NEXT                                            0554  13280000
         L     @8,SRT                                             0554  13290000
         MVC   0(1,@8),0(@3)                                      0554  13300000
*                       NEXT=NEXT+1;    /* UP RECORD PTR              * 13310000
         LA    @F,1                                               0555  13320000
         A     @F,NEXT                                            0555  13330000
         ST    @F,NEXT                                            0555  13340000
*                       SRT=SRT+1;      /* UP TABLE PTR               * 13350000
         LA    @F,1                                               0556  13360000
         A     @F,SRT                                             0556  13370000
         ST    @F,SRT                                             0556  13380000
*                     END;              /* END OF LOOP                * 13390000
*                     COUNTER=NUMBS-COUNTER; /* NUMBER OF DATA BYTES  * 13400000
         SR    @F,@F                                              0557  13410000
         IC    @F,A                                               0557  13420000
         AH    @F,@D6                                             0557  13430000
@DO993   STC   @F,A                                               0557  13440000
         SR    @0,@0                                              0557  13450000
         IC    @0,COUNTER                                         0557  13460000
         CR    @F,@0                                              0557  13470000
         BC    12,@DO994                                          0557  13480000
         SR    @F,@F                                              0558  13490000
         IC    @F,NUMBS                                           0558  13500000
         IC    @0,COUNTER                                         0558  13510000
         SR    @F,@0                                              0558  13520000
         STC   @F,COUNTER                                         0558  13530000
*                                            /* LEFT FOR THAT ENTRY   * 13540000
*                     TBIT(3)='1'B;          /* TURN ON BIT           * 13550000
         OI    TBIT,B'00100000'                                   0559  13560000
*                     GO TO READRT;     /* READ NEXT RECORD           * 13570000
         BC    15,READRT                                          0560  13580000
*                   END;                /* END OF DO LOOP             * 13590000
*             END;                      /* END OF DO LOOP             * 13600000
*           ELSE                        /* NO                         * 13610000
*             IF CSDNXT Â¬> CSDEND       /* END OF TABLE               * 13620000
*               THEN                    /* NO                         * 13630000
@99F     L     @F,CSDEND                                          0563  13640000
         C     @F,CSDNXT                                          0563  13650000
         BC    04,@98F                                            0563  13660000
*                 DO;                   /* DO LOOP                    * 13670000
*                   CSDNXT=CSDNXT+12;   /* UP CESD TABLE PTR          * 13680000
         LA    @F,12                                              0565  13690000
         A     @F,CSDNXT                                          0565  13700000
         ST    @F,CSDNXT                                          0565  13710000
*                   GO TO ID2;          /* TRY AGAIN                  * 13720000
         BC    15,ID2                                             0566  13730000
*                 END;                  /* END OF DO LOOP             * 13740000
*               ELSE                    /* YES - END OF TABLE         * 13750000
*                 GO TO ERR1;           /* RETURN WITH ERROR MSG      * 13760000
* ID1:    IF COUNTER = 0                /* END OF RECORD              * 13770000
*           THEN                        /* YES                        * 13780000
@98E     EQU   *                                                  0569  13790000
@990     EQU   *                                                  0569  13800000
ID1      CLI   COUNTER,0                                          0569  13810000
         BC    07,@98D                                            0569  13820000
*             IF TYP='1'B               /* LAST IDR RECORD?           * 13830000
*               THEN                    /* YES                        * 13840000
         TM    TYP,B'10000000'                                    0570  13850000
         BC    12,@98C                                            0570  13860000
*                 DO;                   /* DO LOOP                    * 13870000
*                   CALL IDSORT;        /* PRINT OUT LAST RECORD      * 13880000
         BAL   @E,IDSORT                                          0572  13890000
*                   RETURN;             /* RETURN                     * 13900000
         BC    15,@EL01                                           0573  13910000
*                 END;                  /* END OF DO LOOP             * 13920000
*               ELSE                    /* NO                         * 13930000
*                 DO;                   /* DO LOOP                    * 13940000
*                   TBIT(2)='1'B;       /* ZERO OUT BIT               * 13950000
@98C     OI    TBIT,B'01000000'                                   0576  13960000
*                   GO TO READRT;       /* READ NEXT RECORD           * 13970000
         BC    15,READRT                                          0577  13980000
*             END;                      /* END OF DO LOOP             * 13990000
*           ELSE;                       /* NO                         * 14000000
@98D     EQU   *                                                  0579  14010000
*         IF COUNTER=1                  /* ONE BYTE LEFT              * 14020000
*           THEN                        /* YES                        * 14030000
@98A     CLI   COUNTER,1                                          0580  14040000
         BC    07,@989                                            0580  14050000
*             DO;                       /* DO LOOP                    * 14060000
*               SAV1=INFO;              /* SAVE BYTE                  * 14070000
         L     @3,NEXT                                            0582  14080000
         MVC   IDSAVE(1),0(@3)                                    0582  14090000
*               TBIT(8)='1'B;           /* ZERO OUT BIT               * 14100000
         OI    TBIT,B'00000001'                                   0583  14110000
*               GO TO READRT;           /* READ NEXT RECORD           * 14120000
         BC    15,READRT                                          0584  14130000
*             END;                      /* END OF DO LOOP             * 14140000
*           ELSE;                       /* NO                         * 14150000
@989     EQU   *                                                  0586  14160000
*         IF COUNTER=2                  /* TWO BYTES LEFT             * 14170000
*           THEN                        /* YES                        * 14180000
@988     CLI   COUNTER,2                                          0587  14190000
         BC    07,@987                                            0587  14200000
*             DO;                       /* DO LOOP                    * 14210000
*               POINT=ADDR(IA);         /* RETURN ADDRESS             * 14220000
         LA    @F,IA                                              0589  14230000
         ST    @F,POINT                                           0589  14240000
*               GO TO RTA;              /* FIND MATCHING ID           * 14250000
         BC    15,RTA                                             0590  14260000
* IA:           TBIT(7)='1'B;           /* ZERO OUT BIT               * 14270000
IA       OI    TBIT,B'00000010'                                   0591  14280000
*               SRT=SRT+8;              /* UP TABLE TABLE PTR         * 14290000
         LA    @F,8                                               0592  14300000
         A     @F,SRT                                             0592  14310000
         ST    @F,SRT                                             0592  14320000
*               GO TO READRT;           /* READ NEXT RECORD           * 14330000
         BC    15,READRT                                          0593  14340000
*             END;                      /* END OF DO LOOP             * 14350000
*           ELSE;                       /* NULL ELSE                  * 14360000
@987     EQU   *                                                  0595  14370000
*         IF COUNTER=3                  /* THREE BYTES LEFT           * 14380000
*           THEN                        /* YES                        * 14390000
@986     CLI   COUNTER,3                                          0596  14400000
         BC    07,@985                                            0596  14410000
*             DO;                       /* DO LOOP                    * 14420000
*               POINT=ADDR(IB);         /* RETURN ADDRESS             * 14430000
         LA    @F,IB                                              0598  14440000
         ST    @F,POINT                                           0598  14450000
*               GO TO RTA;              /* FIND MATCHING ID           * 14460000
         BC    15,RTA                                             0599  14470000
* IB:           TBIT(6)='1'B;           /* TURN ON BIT                * 14480000
IB       OI    TBIT,B'00000100'                                   0600  14490000
*               USDATE(1)=DATE5(1);     /* PART OF DATE               * 14500000
         L     @3,NEXT                                            0601  14510000
         L     @8,SRT                                             0601  14520000
         MVC   8(1,@8),2(@3)                                      0601  14530000
*               SRT=SRT+9;              /* UP TABLE TABLE PTR         * 14540000
         LA    @F,9                                               0602  14550000
         A     @F,SRT                                             0602  14560000
         ST    @F,SRT                                             0602  14570000
*               GO TO READRT;           /* READ NEXT RECORD           * 14580000
         BC    15,READRT                                          0603  14590000
*             END;                      /* END OF LOOP                * 14600000
*           ELSE;                       /* NULL ELSE                  * 14610000
@985     EQU   *                                                  0605  14620000
*         IF COUNTER=4                  /* FOUR BYTES LEFT            * 14630000
*           THEN                        /* YES                        * 14640000
@984     CLI   COUNTER,4                                          0606  14650000
         BC    07,@983                                            0606  14660000
*             DO;                       /* DO LOOP                    * 14670000
*               POINT=ADDR(IC);         /* RETURN ADDRESS             * 14680000
         LA    @F,IC                                              0608  14690000
         ST    @F,POINT                                           0608  14700000
*               GO TO RTA;              /* FIND MATCHING ID           * 14710000
         BC    15,RTA                                             0609  14720000
* IC:           TBIT(5)='1'B;           /* TURN ON BIT                * 14730000
IC       OI    TBIT,B'00001000'                                   0610  14740000
*               USDATE(1:2)=DATE5(1:2); /* SAVE DATE IN TABLE         * 14750000
         L     @3,NEXT                                            0611  14760000
         L     @8,SRT                                             0611  14770000
         MVC   8(2,@8),2(@3)                                      0611  14780000
*               SRT=SRT+10;             /* UP TABLE PTR               * 14790000
         LA    @F,10                                              0612  14800000
         A     @F,SRT                                             0612  14810000
         ST    @F,SRT                                             0612  14820000
*               GO TO READRT;           /* READ NEXT RECORD           * 14830000
         BC    15,READRT                                          0613  14840000
*             END;                      /* END OF LOOP                * 14850000
*           ELSE;                       /* NO                         * 14860000
@983     EQU   *                                                  0615  14870000
*         IF COUNTER=5                  /* FIVE BYTES LEFT            * 14880000
*           THEN                        /* YES                        * 14890000
@982     CLI   COUNTER,5                                          0616  14900000
         BC    07,@981                                            0616  14910000
*             DO;                       /* DO LOOP                    * 14920000
*               POINT=ADDR(IE);         /* RETURN ADDRESS             * 14930000
         LA    @F,IE                                              0618  14940000
         ST    @F,POINT                                           0618  14950000
*               GO TO RTA;              /* FIND MATCHING ID           * 14960000
         BC    15,RTA                                             0619  14970000
* IE:           TBIT(4)='1'B;           /* TURN ON BIT                * 14980000
IE       OI    TBIT,B'00010000'                                   0620  14990000
*               USDATE=DATE5;           /* SAVE DATE IN TABLE         * 15000000
         L     @3,NEXT                                            0621  15010000
         L     @8,SRT                                             0621  15020000
         MVC   8(3,@8),2(@3)                                      0621  15030000
*               NUMBS=CNT;              /* NO. OF DATA BYTES          * 15040000
         MVC   NUMBS(1),5(@3)                                     0622  15050000
*               SRT=SRT+11;             /* UP TABLE PTR               * 15060000
         LA    @F,11                                              0623  15070000
         A     @F,SRT                                             0623  15080000
         ST    @F,SRT                                             0623  15090000
*               GO TO READRT;           /* READ NEXT RECORD           * 15100000
         BC    15,READRT                                          0624  15110000
*             END;                      /* END OF DO LOOP             * 15120000
*           ELSE;                       /* NULL ELSE                  * 15130000
@981     EQU   *                                                  0626  15140000
* LKERT:  IF NUMO > 48                  /* LINE COUNT > 48?           * 15150000
*           THEN                        /* YES                        * 15160000
@980     EQU   *                                                  0627  15170000
LKERT    L     @3,PARMPTR                                         0627  15180000
         CLI   72(@3),48                                          0627  15190000
         BC    12,@97F                                            0627  15200000
*             CALL PRNT1;               /* PRINT NEW HEADER           * 15210000
         BAL   @E,PRNT1                                           0628  15220000
*           ELSE;                       /* NULL ELSE                  * 15230000
@97F     EQU   *                                                  0629  15240000
*         IF MDLB='1'B                  /* MODLIB SPECIFIED           * 15250000
*           THEN                        /* YES                        * 15260000
@97E     L     @3,PARMPTR                                         0630  15270000
         TM    20(@3),B'00001000'                                 0630  15280000
*             GO TO LKERT1;             /* BYPASS PRINTOUT            * 15290000
         BC    01,LKERT1                                          0631  15300000
*           ELSE;                       /* NULL ELSE                  * 15310000
*         LINKOUT=BLANKS;               /* BLANK OUT                  * 15320000
         L     @8,OUT                                             0633  15330000
         MVC   0(1,@8),BLANKS                                     0633  15340000
         MVI   1(@8),C' '                                         0633  15350000
         MVC   2(119,@8),1(@8)                                    0633  15360000
*         USA4='0';                     /* SKIP TWO LINES             * 15370000
         MVI   0(@8),C'0'                                         0634  15380000
*         MSG1='THIS LOAD MODULE WAS PRODUCED BY LINKAGE EDITOR ';      15390000
         MVC   10(48,@8),@C25                                     0635  15400000
*         MSG2=PROGNM;                  /* PROGRAM NAME               * 15410000
         L     @6,INREC                                           0636  15420000
         MVC   58(10,@8),3(@6)                                    0636  15430000
*         SP10=' AT LEVEL ';            /* CONTINUE MESSAGE           * 15440000
         MVC   68(10,@8),@C26                                     0637  15450000
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         * 15460000
*         R5=ADDR(VRSION);              /* ADDRESS OF PACKED DATA     * 15470000
         L     @4,INREC                                           0639  15480000
         LA    @5,13(0,@4)                                        0639  15490000
*         R6=ADDR(UPAK2);               /* ADDRESS OF UNPACK AREA     * 15500000
         LA    @6,UPAK2                                           0640  15510000
*         GENERATE (UNPK 0(5,6),0(3,5));                                15520000
         UNPK 0(5,6),0(3,5)                                             15530000
         DS    0H                                                       15540000
*         MSG3A=UPK1;                   /* VERSION                    * 15550000
         MVC   78(2,@8),UPAK2                                     0642  15560000
*         MSG3B='.';                    /* SLASH                      * 15570000
         MVI   80(@8),C'.'                                        0643  15580000
*         MSG3C=UPK2;                   /* MOD                        * 15590000
         MVC   81(2,@8),UPAK2+2                                   0644  15600000
*         R5=ADDR(LKDATE);              /* ADDRESS OF PACKED DATA     * 15610000
         LA    @5,15(0,@4)                                        0645  15620000
*         R6=ADDR(UNPKAREA);            /* ADDRESS OF UNPACK AREA     * 15630000
         LA    @6,UNPKAREA                                        0646  15640000
*         GENERATE (UNPK 0(5,6),0(3,5));                                15650000
         UNPK 0(5,6),0(3,5)                                             15660000
         DS    0H                                                       15670000
*         SP8=' ON DAY ';               /* CONTINUE MESSAGE           * 15680000
         MVC   83(8,@8),@C28                                      0648  15690000
*         MSG4=DYZ;                     /* DAY                        * 15700000
         MVC   91(3,@8),UNPKAREA+2                                0649  15710000
*         SP9=' OF YEAR ';              /* CONTINUE MESSAGE           * 15720000
         MVC   94(9,@8),@C29                                      0650  15730000
*         MSG5=YRZ;                     /* YEAR                       * 15740000
         MVC   103(2,@8),UNPKAREA                                 0651  15750000
*         DOT='.';                      /* .                          * 15760000
         MVI   105(@8),C'.'                                       0652  15770000
*         R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         * 15780000
         L     @5,4(0,@3)                                         0653  15790000
*         R6=ADDR(LINKOUT);             /* ADDR OF OUTPUT PRINT AREA  * 15800000
         LR    @6,@8                                              0654  15810000
*         GENERATE (PUT (5),(6));                                       15820000
         PUT (5),(6)                                                    15830000
         DS    0H                                                       15840000
*         LINKOUT(2)='-';               /*  DASH                      * 15850000
         MVI   1(@8),C'-'                                         0656  15860000
*         LINKOUT(3:121)=LINKOUT(2:120); /* PROPAGATE DASHES          * 15870000
         MVC   2(119,@8),1(@8)                                    0657  15880000
*         GEN(PUT (5),(6));                                             15890000
         PUT (5),(6)                                                    15900000
         DS    0H                                                       15910000
*         RELEASE (5,6);                /* RELEASE RESTRICTION        * 15920000
*         NUMO=NUMO+4;                  /* FOR LINE COUNT             * 15930000
         LA    @F,4                                               0660  15940000
         SR    @0,@0                                              0660  15950000
         IC    @0,72(0,@3)                                        0660  15960000
         AR    @F,@0                                              0660  15970000
         STC   @F,72(0,@3)                                        0660  15980000
* LKERT1: IF TYP='1'B                   /* LAST IDR                   * 15990000
*           THEN                        /* YES                        * 16000000
LKERT1   TM    TYP,B'10000000'                                    0661  16010000
*             RETURN;                   /* RETURN                     * 16020000
         BC    03,@EL01                                           0662  16030000
*           ELSE                        /* NO                         * 16040000
*             GO TO READRT;             /* READ NEXT RECORD           * 16050000
         BC    15,READRT                                          0663  16060000
* TRANSRT: CSDNXT=CSDPT;                /* START OF CESD TABLE        * 16070000
@97C     EQU   *                                                  0664  16080000
TRANSRT  MVC   CSDNXT(4),CSDPT                                    0664  16090000
*         SRT=SORTOUT;                  /* START OF SORT TABLE        * 16100000
         MVC   SRT(4),SORTOUT                                     0665  16110000
*         NEXT=INREC+3;                 /* BEGINNING OF TRANS         * 16120000
         LA    @F,3                                               0666  16130000
         A     @F,INREC                                           0666  16140000
         ST    @F,NEXT                                            0666  16150000
*         TRN=TRNOUT;                   /* FOR TRANS DATA             * 16160000
         MVC   TRN(4),TRNOUT                                      0667  16170000
* TR1:    IF COUNTER=0                  /* ANY BYTES LEFT?            * 16180000
*           THEN                        /* NO                         * 16190000
TR1      CLI   COUNTER,0                                          0668  16200000
*             GO TO RET;                /* NEXT RECORD CHECK          * 16210000
         BC    08,RET                                             0669  16220000
*           ELSE                        /* YES                        * 16230000
*             IF TBIT(8)='1'B           /* ANOTHER TRANSLATOR         * 16240000
*               THEN                    /* YES                        * 16250000
         TM    TBIT,B'00000001'                                   0670  16260000
         BC    12,@97B                                            0670  16270000
*                   DO;                 /* DO LOOP                    * 16280000
*                     TBIT(8)='0'B;     /* ZERO OUT BIT               * 16290000
         NI    TBIT,B'11111110'                                   0672  16300000
*                     GO TO TR3;        /* CONTINUE PROCESSING        * 16310000
         BC    15,TR3                                             0673  16320000
*                   END;                /* END OF DO LOOP             * 16330000
*                 ELSE;                 /* NULL ELSE                  * 16340000
@97B     EQU   *                                                  0675  16350000
*         IDSAVE=ESDBITS;               /* ESDID                      * 16360000
@97A     L     @3,NEXT                                            0676  16370000
         MVC   IDSAVE(2),0(@3)                                    0676  16380000
*         COUNTER=COUNTER-2;            /* SUBTRACT 2 FROM BYTE COUNT * 16390000
         SR    @F,@F                                              0677  16400000
         IC    @F,COUNTER                                         0677  16410000
         SH    @F,@D5                                             0677  16420000
         STC   @F,COUNTER                                         0677  16430000
* TR1B:   IF IDSAVE(1)='1'B             /* LAST ID BEFORE TRANS DESCR * 16440000
*           THEN                        /* YES                        * 16450000
TR1B     TM    IDSAVE,B'10000000'                                 0678  16460000
         BC    12,@979                                            0678  16470000
*             DO;                       /* DO LOOP                    * 16480000
*               IDSAVE(1)='0'B;         /* TURN OFF BIT               * 16490000
         NI    IDSAVE,B'01111111'                                 0680  16500000
*               POINT=ADDR(TA);         /* RETURN ADDRESS             * 16510000
         LA    @F,TA                                              0681  16520000
         ST    @F,POINT                                           0681  16530000
*               GO TO CSFIND;           /* FIND MATCHING ID           * 16540000
         BC    15,CSFIND                                          0682  16550000
* TA:           TRNTAB=BLANKS;          /* BLANK OUT NEXT TABLE ENTRY * 16560000
TA       L     @3,SRT                                             0683  16570000
         MVC   0(1,@3),BLANKS                                     0683  16580000
         MVI   1(@3),C' '                                         0683  16590000
         MVC   2(6,@3),1(@3)                                      0683  16600000
*               SRT=SRT+8;              /* UP TABLE PTR               * 16610000
         LA    @F,8                                               0684  16620000
         A     @F,SRT                                             0684  16630000
         ST    @F,SRT                                             0684  16640000
*               IF COUNTER=0            /* ANY BYTES LEFT IN RECORD   * 16650000
*                 THEN                  /* NO                         * 16660000
         CLI   COUNTER,0                                          0685  16670000
         BC    07,@978                                            0685  16680000
*                   DO;                 /* DO LOOP                    * 16690000
*                     TBIT(7)='1'B;     /* NEXT RECORD - TRANS DESCRIP* 16700000
         OI    TBIT,B'00000010'                                   0687  16710000
*                     GO TO READRT;     /* NEXT RECORD CHECK          * 16720000
         BC    15,READRT                                          0688  16730000
*                   END;                /* END OF DO LOOP             * 16740000
*                 ELSE;                 /* YES                        * 16750000
@978     EQU   *                                                  0690  16760000
* TR1A:         TBIT=SPBIT;             /* NO. OF TRANSLATORS         * 16770000
@977     EQU   *                                                  0691  16780000
TR1A     L     @3,NEXT                                            0691  16790000
         MVC   TBIT(1),0(@3)                                      0691  16800000
*               NEXT=NEXT+1;            /* UP RECORD PTR              * 16810000
         LA    @F,1                                               0692  16820000
         A     @F,NEXT                                            0692  16830000
         ST    @F,NEXT                                            0692  16840000
*               COUNTER=COUNTER-1;      /* SUBTRACT INDIC BYTE        * 16850000
         SR    @F,@F                                              0693  16860000
         IC    @F,COUNTER                                         0693  16870000
         BCTR  @F,0                                               0693  16880000
         STC   @F,COUNTER                                         0693  16890000
*               IF COUNTER < 15         /* PARTIAL TRANS DESCRIP      * 16900000
*                 THEN                  /* YES                        * 16910000
         CLI   COUNTER,15                                         0694  16920000
         BC    10,@976                                            0694  16930000
*                   DO;                 /* DO LOOP                    * 16940000
*                     POINT=ADDR(B3);   /* LINK ADDR                  * 16950000
         LA    @F,B3                                              0696  16960000
         ST    @F,POINT                                           0696  16970000
*                     GO TO SP1;        /* BYTE BY BYTE MOVE          * 16980000
         BC    15,SP1                                             0697  16990000
* B3:                 TBIT(6)='1'B;     /* NEXT RECORD - TRANS CONTIN.* 17000000
B3       OI    TBIT,B'00000100'                                   0698  17010000
*                     COUNTER=15-COUNTER; /* BYTES LEFT TO BE MOVED   * 17020000
         LA    @F,15                                              0699  17030000
         SR    @0,@0                                              0699  17040000
         IC    @0,COUNTER                                         0699  17050000
         SR    @F,@0                                              0699  17060000
         STC   @F,COUNTER                                         0699  17070000
*                     GO TO READRT;     /* NEXT RECORD CHECK          * 17080000
         BC    15,READRT                                          0700  17090000
*                     END;              /* END OF DO LOOP             * 17100000
*                   ELSE                /* NO                         * 17110000
*                     GO TO TR2;        /* SAVE TRANS INFO            * 17120000
*             END;                      /* END OF DO LOOP             * 17130000
*           ELSE                        /* MORE ID'S TO FOLLOW        * 17140000
*             DO;                       /* DO LOOP                    * 17150000
*               POINT=ADDR(TR4);        /* RETURN ADDRESS             * 17160000
@979     LA    @F,TR4                                             0705  17170000
         ST    @F,POINT                                           0705  17180000
*               GO TO CSFIND;           /* FIND MATCHING ID           * 17190000
         BC    15,CSFIND                                          0706  17200000
* TR4:          IF COUNTER <2           /* POSSIBLE PARTIAL ID        * 17210000
*                 THEN                  /* YES                        * 17220000
TR4      CLI   COUNTER,2                                          0707  17230000
         BC    10,@973                                            0707  17240000
*                   IF COUNTER = 0      /* WHOLE ID ON NEXT RECORD    * 17250000
*                     THEN              /* YES                        * 17260000
         CLI   COUNTER,0                                          0708  17270000
         BC    07,@972                                            0708  17280000
*                       DO;             /* DO LOOP                    * 17290000
*                         TBIT(1)='1'B; /* FOR NEXT RECORD - ID       * 17300000
         OI    TBIT,B'10000000'                                   0710  17310000
*                         GO TO READRT; /* NEXT RECORD CHECK          * 17320000
         BC    15,READRT                                          0711  17330000
*                       END;            /* END OF DO LOOP             * 17340000
*                     ELSE              /* NO                         * 17350000
*                       DO;             /* DO LOOP                    * 17360000
*                         SAV1=SPBIT;   /* SPECIAL SAVE AREA          * 17370000
@972     L     @3,NEXT                                            0714  17380000
         MVC   IDSAVE(1),0(@3)                                    0714  17390000
*                         TBIT(4)='1'B; /* NEXT RECORD - ID CONTIN.   * 17400000
         OI    TBIT,B'00010000'                                   0715  17410000
*                         GO TO READRT; /* NEXT RECORD CHECK          * 17420000
         BC    15,READRT                                          0716  17430000
*                       END;            /* END OF DO LOOP             * 17440000
*                 ELSE                  /* COUNTER Â¬< 2               * 17450000
*                   GO TO TR1;          /* CONTINUE REGULAR PROCESSING* 17460000
*             END;                      /* END OF DO LOOP             * 17470000
@970     EQU   *                                                  0719  17480000
* TR2:    TPROG=PGM;                    /* SAVE TRANSLATOR NAME       * 17490000
@974     EQU   *                                                  0720  17500000
TR2      L     @3,NEXT                                            0720  17510000
         L     @8,TRN                                             0720  17520000
         MVC   0(10,@8),0(@3)                                     0720  17530000
*         TVER=VRMOD;                   /* VERSION                    * 17540000
         MVC   10(2,@8),10(@3)                                    0721  17550000
*         TDATE=CMPLE;                  /* COMPILE DATE               * 17560000
         MVC   12(3,@8),12(@3)                                    0722  17570000
*         TRN=TRN+15;                   /* UP TRANS DATA TABLE PTR    * 17580000
         LA    @F,15                                              0723  17590000
         A     @F,TRN                                             0723  17600000
         ST    @F,TRN                                             0723  17610000
*         COUNTER=COUNTER-15;           /* SUBTRACT BYTES PROCESSED   * 17620000
         SR    @F,@F                                              0724  17630000
         IC    @F,COUNTER                                         0724  17640000
         SH    @F,@D3                                             0724  17650000
         STC   @F,COUNTER                                         0724  17660000
*         IF COUNTER =0                 /* ANY BYTES LEFT             * 17670000
*           THEN                        /* NO                         * 17680000
         CLI   COUNTER,0                                          0725  17690000
         BC    07,@96F                                            0725  17700000
*             IF TBIT(8)='0'B           /* ANOTHER TRANSL EXPECTED    * 17710000
*               THEN                    /* NO                         * 17720000
         TM    TBIT,B'00000001'                                   0726  17730000
         BC    05,@96E                                            0726  17740000
*                 IF TYP(1)='1'B        /* LAST IDR?                  * 17750000
*                   THEN                /* YES                        * 17760000
         TM    TYP,B'10000000'                                    0727  17770000
         BC    12,@96D                                            0727  17780000
*                     DO;               /* DO LOOP                    * 17790000
*                       TDTAB=BLANKS;   /* BLANK OUT NEXT TABLE ENTRY * 17800000
         L     @8,TRN                                             0729  17810000
         MVC   0(1,@8),BLANKS                                     0729  17820000
         MVI   1(@8),C' '                                         0729  17830000
         MVC   2(13,@8),1(@8)                                     0729  17840000
*                       SRTEND=SRT;     /* END OF TABLE               * 17850000
         MVC   SRTEND(4),SRT                                      0730  17860000
*                       CALL TRSORT;    /* PRINT OUT LAST RECORD      * 17870000
         BAL   @E,TRSORT                                          0731  17880000
*                       RETURN;         /* RETURN                     * 17890000
         BC    15,@EL01                                           0732  17900000
*                     END;              /* END OF DO LOOP             * 17910000
*                   ELSE                /* MORE IDRS                  * 17920000
*                     DO;               /* DO LOOP                    * 17930000
*                       TBIT(1)='1'B;   /* TRANSLATOR RECORD CHECK    * 17940000
@96D     OI    TBIT,B'10000000'                                   0735  17950000
*                       TDTAB=BLANKS;   /* BLANK OUT NEXT TABLE ENTRY * 17960000
         L     @3,TRN                                             0736  17970000
         MVC   0(1,@3),BLANKS                                     0736  17980000
         MVI   1(@3),C' '                                         0736  17990000
         MVC   2(13,@3),1(@3)                                     0736  18000000
*                        TRN=TRN+15;    /* UP TRANS DATA TABLE PTR    * 18010000
         LA    @F,15                                              0737  18020000
         A     @F,TRN                                             0737  18030000
         ST    @F,TRN                                             0737  18040000
*                       SRTEND=SRT;     /* SAVE END OF TABLE ADDR     * 18050000
         MVC   SRTEND(4),SRT                                      0738  18060000
*                       GO TO READRT;   /* READ NEXT RECORD           * 18070000
         BC    15,READRT                                          0739  18080000
*                     END;              /* END OF DO LOOP             * 18090000
*               ELSE                    /* ANOTHER TRANSLATOR - YES   * 18100000
*                 DO;                   /* DO LOOP                    * 18110000
*               TBIT(8)='0'B;           /* TURN OFF BIT               * 18120000
@96E     NI    TBIT,B'11111110'                                   0742  18130000
*                   TBIT(3)='1'B;       /* TRANSL REC CONTIN. MIDPT   * 18140000
         OI    TBIT,B'00100000'                                   0743  18150000
*                   GO TO READRT;       /* NEXT RECORD CHECK          * 18160000
         BC    15,READRT                                          0744  18170000
*                 END;                  /* END OF DO LOOP             * 18180000
*           ELSE                        /* MORE ENTRIES               * 18190000
*             NEXT=NEXT+15;             /* UP RECORD PTR              * 18200000
@96F     LA    @F,15                                              0746  18210000
         A     @F,NEXT                                            0746  18220000
         ST    @F,NEXT                                            0746  18230000
*         IF TBIT(8)='1'B               /* ANOTHER TRANSL EXPECTED    * 18240000
*           THEN                        /* YES                        * 18250000
@96A     TM    TBIT,B'00000001'                                   0747  18260000
         BC    12,@969                                            0747  18270000
*             DO;                       /* DO LOOP                    * 18280000
*                   TBIT(8)='0'B;       /* TURN OFF BIT               * 18290000
         NI    TBIT,B'11111110'                                   0749  18300000
*               IF COUNTER < 15         /* INCOMPLETE DESCRIPTION     * 18310000
*                 THEN                  /* YES                        * 18320000
         CLI   COUNTER,15                                         0750  18330000
         BC    10,@968                                            0750  18340000
*                   DO;                 /* DO LOOP                    * 18350000
*                     POINT=ADDR(B4);   /* LINK ADDR                  * 18360000
         LA    @F,B4                                              0752  18370000
         ST    @F,POINT                                           0752  18380000
*                     GO TO SP1;        /* BYTE MOVE                  * 18390000
         BC    15,SP1                                             0753  18400000
* B4:                 COUNTER=15-COUNTER; /* NO. OF BYTES LEFT TO MOVE* 18410000
B4       LA    @F,15                                              0754  18420000
         SR    @0,@0                                              0754  18430000
         IC    @0,COUNTER                                         0754  18440000
         SR    @F,@0                                              0754  18450000
         STC   @F,COUNTER                                         0754  18460000
*                     TBIT(6)='1'B;     /*                            * 18470000
         OI    TBIT,B'00001100'                                   0755  18480000
*                     TBIT(5)='1'B;  /* IND 2ND XLATOR SPLIT @ZA03924 * 18490000
*                     GO TO READRT;     /* NEXT RECORD CHECK          * 18500000
         BC    15,READRT                                          0757  18510000
*                   END;                /* END OF DO LOOP             * 18520000
*                 ELSE                  /* COMPLETE TRANS DESCRIP     * 18530000
* TR3:            DO;                   /* DO LOOP                    * 18540000
@968     EQU   *                                                  0759  18550000
*                     TPROG=PGM;        /* SAVE PROGRAM NAME OF TRANS * 18560000
TR3      L     @3,NEXT                                            0760  18570000
         L     @8,TRN                                             0760  18580000
         MVC   0(10,@8),0(@3)                                     0760  18590000
*                     TVER=VRMOD;       /* VERSION                    * 18600000
         MVC   10(2,@8),10(@3)                                    0761  18610000
*                     TDATE=CMPLE;      /* DATE OF COMPILE            * 18620000
         MVC   12(3,@8),12(@3)                                    0762  18630000
*                        TRN=TRN+15;    /* UP TRANS DATA TABLE PTR    * 18640000
         LA    @F,15                                              0763  18650000
         A     @F,TRN                                             0763  18660000
         ST    @F,TRN                                             0763  18670000
*                     COUNTER=COUNTER-15; /* SUBTRACT BYTES MOVED     * 18680000
         SR    @F,@F                                              0764  18690000
         IC    @F,COUNTER                                         0764  18700000
         SH    @F,@D3                                             0764  18710000
         STC   @F,COUNTER                                         0764  18720000
*                     NEXT=NEXT+15;     /* UP RECORD PTR              * 18730000
         LA    @F,15                                              0765  18740000
         A     @F,NEXT                                            0765  18750000
         ST    @F,NEXT                                            0765  18760000
*                     IF COUNTER=0      /* ANY BYTES LEFT             * 18770000
*                       THEN            /* NO                         * 18780000
         CLI   COUNTER,0                                          0766  18790000
         BC    07,@966                                            0766  18800000
*                         DO;           /* DO LOOP                    * 18810000
*                           SRTEND=SRT; /* END OF TABLE               * 18820000
         MVC   SRTEND(4),SRT                                      0768  18830000
*                           TBIT(1)='1'B; /* TRANSLATOR RECORD BIT    * 18840000
         OI    TBIT,B'10000000'                                   0769  18850000
*                           GO TO RET;  /* NEXT RECORD CHECK          * 18860000
         BC    15,RET                                             0770  18870000
*                         END;          /* END OF LOOP                * 18880000
*                       ELSE            /* BYTES LEFT - YES           * 18890000
*                         GO TO TR4;    /* NEXT ID CHECK              * 18900000
*                 END;                  /* END OF DO LOOP             * 18910000
*             END;                      /* END OF DO LOOP             * 18920000
*           ELSE                        /* NO MORE TRANSLATORS        * 18930000
*             DO;                       /* DO LOOP                    * 18940000
@969     EQU   *                                                  0775  18950000
*               TDTAB=BLANKS;           /* BLANK OUT NEXT TABLE ENTRY * 18960000
         L     @3,TRN                                             0776  18970000
         MVC   0(1,@3),BLANKS                                     0776  18980000
         MVI   1(@3),C' '                                         0776  18990000
         MVC   2(13,@3),1(@3)                                     0776  19000000
*               TRN=TRN+15;             /* UP TRANS DATA TABLE PTR    * 19010000
         LA    @F,15                                              0777  19020000
         A     @F,TRN                                             0777  19030000
         ST    @F,TRN                                             0777  19040000
*               GO TO TR4;              /* NEXT ID CHECK              * 19050000
         BC    15,TR4                                             0778  19060000
*             END;                      /* END OF DO LOOP             * 19070000
* SP1:    DO A=1 TO COUNTER;            /* SPECIAL BYTE MOVE          * 19080000
@964     EQU   *                                                  0780  19090000
SP1      LA    @F,1                                               0780  19100000
         BC    15,@DO962                                          0780  19110000
*           SPBYT=SPBIT;                /* BYTE BY BYTE               * 19120000
@DO963   L     @3,NEXT                                            0781  19130000
         L     @8,TRN                                             0781  19140000
         MVC   0(1,@8),0(@3)                                      0781  19150000
*           NEXT=NEXT+1;                /* UP RECORD PTR              * 19160000
         LA    @F,1                                               0782  19170000
         A     @F,NEXT                                            0782  19180000
         ST    @F,NEXT                                            0782  19190000
*           TRN=TRN+1;                  /* UP DATA TABLE PTR          * 19200000
         LA    @F,1                                               0783  19210000
         A     @F,TRN                                             0783  19220000
         ST    @F,TRN                                             0783  19230000
*           END;                        /* END OF DO LOOP             * 19240000
*           GO TO LAB1;                 /* BRANCH ADDRESS             * 19250000
         SR    @F,@F                                              0784  19260000
         IC    @F,A                                               0784  19270000
         AH    @F,@D6                                             0784  19280000
@DO962   STC   @F,A                                               0784  19290000
         SR    @0,@0                                              0784  19300000
         IC    @0,COUNTER                                         0784  19310000
         CR    @F,@0                                              0784  19320000
         BC    12,@DO963                                          0784  19330000
         L     @3,POINT                                           0785  19340000
         BCR   15,@3                                              0785  19350000
* RET:    IF TYP='1'B                   /* LAST IDR                   * 19360000
*           THEN                        /* YES                        * 19370000
RET      TM    TYP,B'10000000'                                    0786  19380000
         BC    12,@95F                                            0786  19390000
*             DO;                       /* DO LOOP                    * 19400000
*               CALL TRSORT;            /* PRINT OUT TRANS RECORD     * 19410000
         BAL   @E,TRSORT                                          0788  19420000
*               RETURN;                 /* RETURN                     * 19430000
         BC    15,@EL01                                           0789  19440000
*             END;                      /* END OF DO LOOP             * 19450000
*           ELSE                        /* NO                         * 19460000
*             GO TO READRT;             /* READ NEXT RECORD           * 19470000
* ERR1:   ERRORS(14)='1'B;              /* CESD ERROR BIT             * 19480000
@95E     EQU   *                                                  0792  19490000
ERR1     L     @3,PARMPTR                                         0792  19500000
         OI    33(@3),B'00000100'                                 0792  19510000
*         RETURN;                       /* RETURN                     * 19520000
         BC    15,@EL01                                           0793  19530000
* ERR2:   IF MDLB='1'B                  /* MODLIB SPECIFIED           * 19540000
*           THEN                        /* YES                        * 19550000
ERR2     L     @3,PARMPTR                                         0794  19560000
         TM    20(@3),B'00001000'                                 0794  19570000
         BC    12,@95D                                            0794  19580000
*             DO;                                                       19590000
*               CALL PRNT1;             /* PRINT LOAD MODULE NAME     * 19600000
         BAL   @E,PRNT1                                           0796  19610000
*               GO TO BYMSG;            /* BYPASS ERR MSG             * 19620000
         BC    15,BYMSG                                           0797  19630000
*             END;                                                      19640000
*           ELSE;                       /* NO,SET TO PRINT MSG        * 19650000
@95D     EQU   *                                                  0799  19660000
*         ERRORS(12)='1'B;              /* NO IDR INFORMATION         * 19670000
@95C     L     @3,PARMPTR                                         0800  19680000
         OI    33(@3),B'00010000'                                 0800  19690000
* BYMSG:  RETURN;                       /* RETURN                     * 19700000
         BC    15,@EL01                                           0801  19710000
* ERR3:   ERRORS(13)='1'B;              /* IDRS INCOMPLETE            * 19720000
ERR3     L     @3,PARMPTR                                         0802  19730000
         OI    33(@3),B'00001000'                                 0802  19740000
*         RETURN;                       /* RETURN                     * 19750000
         BC    15,@EL01                                           0803  19760000
* CSFIND: CSDNXT=CSDPT;                 /* START OF CESD TABLE        * 19770000
CSFIND   MVC   CSDNXT(4),CSDPT                                    0804  19780000
* CS1:    IF IDEN=IDSAVE                /* MATCHING ID                * 19790000
*           THEN                        /* YES                        * 19800000
CS1      L     @3,CSDNXT                                          0805  19810000
         CLC   10(2,@3),IDSAVE                                    0805  19820000
         BC    07,@95B                                            0805  19830000
*             DO;                       /* DO LOOP                    * 19840000
*               TNAME=NAME;             /* CSECT NAME                 * 19850000
         L     @8,SRT                                             0807  19860000
         MVC   0(8,@8),0(@3)                                      0807  19870000
* NONAME:       SRT=SRT+8;              /* UP TABLE PTR      @ZA09119 * 19880000
NONAME   LA    @F,8                                               0808  19890000
         A     @F,SRT                                             0808  19900000
         ST    @F,SRT                                             0808  19910000
*               IF TBIT(4)='1'B         /* SPLIT ID?                  * 19920000
*                 THEN                  /* YES                        * 19930000
         TM    TBIT,B'00010000'                                   0809  19940000
         BC    12,@95A                                            0809  19950000
*                   TBIT(4)='0'B;       /* ZERO OUT BIT               * 19960000
         NI    TBIT,B'11101111'                                   0810  19970000
         BC    15,@959                                            0811  19980000
*                 ELSE                  /* NO                         * 19990000
*                 NEXT=NEXT+2;          /* UP RECORD PTR              * 20000000
@95A     LA    @F,2                                               0811  20010000
         A     @F,NEXT                                            0811  20020000
         ST    @F,NEXT                                            0811  20030000
*               GO TO LAB1;             /* RETURN                     * 20040000
@959     L     @3,POINT                                           0812  20050000
         BCR   15,@3                                              0812  20060000
*             END;                      /* END OF DO LOOP             * 20070000
*           ELSE                        /* NO MATCH                   * 20080000
*             IF CSDNXT Â¬= CSDEND       /* END OF TABLE?              * 20090000
*               THEN                    /* NO                         * 20100000
@95B     L     @F,CSDEND                                          0814  20110000
         C     @F,CSDNXT                                          0814  20120000
         BC    08,@957                                            0814  20130000
*                 DO;                   /* DO LOOP                    * 20140000
*                   CSDNXT=CSDNXT+12;   /* UP CESD PTR                * 20150000
         LA    @F,12                                              0816  20160000
         A     @F,CSDNXT                                          0816  20170000
         ST    @F,CSDNXT                                          0816  20180000
*                   GO TO CS1;          /* TRY AGAIN                  * 20190000
         BC    15,CS1                                             0817  20200000
*                 END;                  /* END OF DO LOOP             * 20210000
*               ELSE                    /* END OF TABLE               * 20220000
*                 TNAME='MISSING';      /* NAME NOT FOUND   @ZA09119  * 20230000
@957     L     @3,SRT                                             0819  20240000
         MVC   0(7,@3),@C30                                       0819  20250000
         MVI   7(@3),C' '                                         0819  20260000
*                 GO TO NONAME;         /* PUT IN SRT FIELD @ZA09119  * 20270000
         BC    15,NONAME                                          0820  20280000
* RTA:    CSDNXT=CSDPT;                 /* START OF CESD TABLE        * 20290000
RTA      MVC   CSDNXT(4),CSDPT                                    0821  20300000
* RTA1:   IF IDEN=ESD4                  /* MATCHING ID'S              * 20310000
*           THEN                        /* YES                        * 20320000
RTA1     L     @3,NEXT                                            0822  20330000
         L     @8,CSDNXT                                          0822  20340000
         CLC   10(2,@8),0(@3)                                     0822  20350000
         BC    07,@955                                            0822  20360000
*             DO;                       /* DO LOOP                    * 20370000
*               SRTEND=SRT;             /* END OF TABLE ADDRESS       * 20380000
         MVC   SRTEND(4),SRT                                      0824  20390000
*               USNAME=NAME;            /* MOVE NAME INTO TABLE       * 20400000
         L     @6,SRT                                             0825  20410000
         MVC   0(8,@6),0(@8)                                      0825  20420000
*               GO TO LAB1;             /* RETURN                     * 20430000
         L     @7,POINT                                           0826  20440000
         BCR   15,@7                                              0826  20450000
*             END;                      /* END OF DO LOOP             * 20460000
*           ELSE                        /* NO                         * 20470000
*             IF CSDNXT Â¬> CSDEND       /* END OF TABLE               * 20480000
*               THEN                    /* NO                         * 20490000
@955     L     @F,CSDEND                                          0828  20500000
         C     @F,CSDNXT                                          0828  20510000
         BC    04,@953                                            0828  20520000
*                 DO;                   /* DO LOOP                    * 20530000
*                   CSDNXT=CSDNXT+12;   /* UP CESD TABLE PTR          * 20540000
         LA    @F,12                                              0830  20550000
         A     @F,CSDNXT                                          0830  20560000
         ST    @F,CSDNXT                                          0830  20570000
*                   GO TO RTA1;                                         20580000
         BC    15,RTA1                                            0831  20590000
*                 END;                  /* END OF DO LOOP             * 20600000
*               ELSE                    /* YES                        * 20610000
*                 GO TO ERR1;           /* CESD ERROR                 * 20620000
*         /************************************************************ 20630000
*         /* GENERAL PRINT ROUTINE FOR TITLES                         * 20640000
*         /************************************************************ 20650000
* PRNT1:  PROCEDURE;                                                    20660000
@952     EQU   *                                                  0834  20670000
@954     EQU   *                                                  0834  20680000
@EL01    L     @D,4(0,@D)                                         0834  20690000
         LR    @1,@C                                              0834  20700000
         L     @0,@SIZ001                                         0834  20710000
         FREEMAIN R,LV=(0),A=(1)                                  0834  20720000
         L     @E,12(0,@D)                                        0834  20730000
         LM    @0,@C,20(@D)                                       0834  20740000
         BCR   15,@E                                              0834  20750000
PRNT1    STM   @E,@C,12(@D)                                       0834  20760000
         ST    @D,@SAV002+4                                       0834  20770000
         LA    @F,@SAV002                                         0834  20780000
         ST    @F,8(0,@D)                                         0834  20790000
         LR    @D,@F                                              0834  20800000
*         PAGE=BLANKS;                  /* BLANK OUT PRINT AREA       * 20810000
         L     @1,OUT                                             0835  20820000
         MVC   0(1,@1),BLANKS                                     0835  20830000
         MVI   1(@1),C' '                                         0835  20840000
         MVC   2(119,@1),1(@1)                                    0835  20850000
*         TITLE='LISTIDR';              /* TITLE                      * 20860000
         MVC   44(7,@1),@C31                                      0836  20870000
*         TIT2=' FOR LOAD MODULE ';     /* HEADING CONTINUED          * 20880000
         MVC   51(17,@1),@C32                                     0837  20890000
*         MEM=MEMNAME;                  /* MEMBER NAME                * 20900000
         L     @8,PARMPTR                                         0838  20910000
         MVC   68(8,@1),36(@8)                                    0838  20920000
*                                                                       20930000
*         /* IF MODLIB SPECIFIED THEN CONDENSE LISTING                * 20940000
*         IF MDLB='1'B                  /* MODLIB SPECIFIED           * 20950000
*           THEN                        /* YES                        * 20960000
         TM    20(@8),B'00001000'                                 0839  20970000
         BC    12,@951                                            0839  20980000
*             DO;                                                       20990000
*               IF NUMO > 48            /* LINE COUNT GREATER THAN 48 * 21000000
*                 THEN                  /* YES                        * 21010000
         CLI   72(@8),48                                          0841  21020000
         BC    12,@950                                            0841  21030000
*                   DO;                                                 21040000
*                     USA3='1';         /* SKIP TO TOP OF PAGE        * 21050000
         MVI   0(@1),C'1'                                         0843  21060000
*                     NUMO='00'X;       /* ZERO OUT COUNTER           * 21070000
         MVI   72(@8),X'00'                                       0844  21080000
*                     GO TO BYPNT;      /* BYPASS PAGE NUMBER         * 21090000
         BC    15,BYPNT                                           0845  21100000
*                   END;                                                21110000
*                 ELSE;                 /* LINE COUNT NOT GT 48       * 21120000
@950     EQU   *                                                  0847  21130000
*               USA3=' ';               /* SKIP ONE LINE              * 21140000
@94F     L     @1,OUT                                             0848  21150000
         MVI   0(@1),C' '                                         0848  21160000
*               NUMO=NUMO+2;            /* INCREASE LINE COUNT BY 2   * 21170000
         LA    @F,2                                               0849  21180000
         L     @8,PARMPTR                                         0849  21190000
         SR    @0,@0                                              0849  21200000
         IC    @0,72(0,@8)                                        0849  21210000
         AR    @F,@0                                              0849  21220000
         STC   @F,72(0,@8)                                        0849  21230000
*               GO TO BYPNT;            /* BYPASS PAGE NO. AND SKIP   * 21240000
         BC    15,BYPNT                                           0850  21250000
*             END;                                                      21260000
*           ELSE;                       /* NO,GIVE NORMAL LISTING     * 21270000
@951     EQU   *                                                  0852  21280000
*         USA3='1';                     /* TOP OF PAGE                * 21290000
@94E     L     @1,OUT                                             0853  21300000
         MVI   0(@1),C'1'                                         0853  21310000
*         NUMO='00'X;                   /* ZERO COUNTER               * 21320000
         L     @8,PARMPTR                                         0854  21330000
         MVI   72(@8),X'00'                                       0854  21340000
*         PGTITL='PAGE ';               /* PAGE                       * 21350000
         MVC   96(5,@1),@C34                                      0855  21360000
*         PGNO=PG;                      /* PAGE NUMBER                * 21370000
         MVC   101(4,@1),PG                                       0856  21380000
*         PGCNT=PGCNT+1;                /* UPDATE PAGE NUMBER @ZA04919* 21390000
         LA    @F,1                                               0857  21400000
         AH    @F,PGCNT                                           0857  21410000
         STH   @F,PGCNT                                           0857  21420000
*         PTR2=PGCNT;                   /* FOR CONV TO DEC    @ZA04919* 21430000
         LR    @2,@F                                              0858  21440000
*                GENERATE;              /* CONVERT TO PRINT   @ZA04919* 21450000
         CVD PTR2,DBLW                 /*     DECIMAL        @ZA04919*/ 21460000
         UNPK PG(4),DBLW+5(3)          /*                    @ZA04919*/ 21470000
         OI  PG+3,X'F0'                /*                    @ZA04919*/ 21480000
         DS    0H                                                       21490000
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         * 21500000
* BYPNT:  R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         * 21510000
BYPNT    L     @1,PARMPTR                                         0861  21520000
         L     @5,4(0,@1)                                         0861  21530000
*         R6=ADDR(PAGE);                /* PRINT AREA ADDR            * 21540000
         L     @4,OUT                                             0862  21550000
         LR    @6,@4                                              0862  21560000
*         GENERATE (PUT (5),(6));       /* WRITE PAGE                 * 21570000
         PUT (5),(6)                                                    21580000
         DS    0H                                                       21590000
*         R6=TITLEAD;                   /* TITLE ADDR                 * 21600000
         L     @1,PARMPTR                                         0864  21610000
         L     @6,8(0,@1)                                         0864  21620000
*         GENERATE (PUT (5),(6));       /* WRITE TITLE                * 21630000
         PUT (5),(6)                                                    21640000
         DS    0H                                                       21650000
*         RELEASE (5,6);                /* RELEASE RESTRICTION        * 21660000
*         RETURN;                       /* RETURN                     * 21670000
* END PRNT1;                                                            21680000
@EL02    L     @D,4(0,@D)                                         0868  21690000
         LM    @E,@C,12(@D)                                       0868  21700000
         BCR   15,@E                                              0868  21710000
*         /************************************************************ 21720000
*         /* USER ID SORT AND PRINT ROUTINE                           * 21730000
*         /************************************************************ 21740000
* IDSORT: PROCEDURE;                                                    21750000
IDSORT   STM   @E,@C,12(@D)                                       0869  21760000
         ST    @D,@SAV003+4                                       0869  21770000
         LA    @F,@SAV003                                         0869  21780000
         ST    @F,8(0,@D)                                         0869  21790000
         LR    @D,@F                                              0869  21800000
*         SRT=SORTOUT;                  /* START OF SORT TABLE        * 21810000
         MVC   SRT(4),SORTOUT                                     0870  21820000
*         IF SRT = SRTEND               /* END OF TABLE               * 21830000
*           THEN                        /* YES                        * 21840000
         L     @F,SRTEND                                          0871  21850000
         C     @F,SRT                                             0871  21860000
*             GO TO IDS2;               /* WRITE HEADER               * 21870000
         BC    08,IDS2                                            0872  21880000
*           ELSE;                       /* NULL ELSE                  * 21890000
*         SRTPT=SRT;                    /* START OF TABLE             * 21900000
         MVC   SRTPT(4),SRT                                       0874  21910000
*         IDENTAB=IDENTDAT;             /* MOVE FIRST ENTRY           * 21920000
         L     @1,SRT                                             0875  21930000
         MVC   IDENTAB(51),0(@1)                                  0875  21940000
* IDS1:   SRT=SRT+51;                   /* UP PTR TO SORT TABLE       * 21950000
IDS1     LA    @F,51                                              0876  21960000
         A     @F,SRT                                             0876  21970000
         ST    @F,SRT                                             0876  21980000
*         IF USNAME Â¬< NAMUS            /* ALPHA SORT CORRECT         * 21990000
*           THEN                        /* YES                        * 22000000
         LR    @1,@F                                              0877  22010000
         CLC   0(8,@1),IDENTAB                                    0877  22020000
         BC    04,@94D                                            0877  22030000
*             DO;                       /* DO LOOP                    * 22040000
*               IF SRT Â¬= SRTEND        /* LAST ENTRY                 * 22050000
*                 THEN                  /* NO                         * 22060000
         L     @F,SRTEND                                          0879  22070000
         C     @F,SRT                                             0879  22080000
*                   GO TO IDS1;         /* CONTINUE SORT              * 22090000
         BC    07,IDS1                                            0880  22100000
*                 ELSE                  /* YES                        * 22110000
*                   DO;                 /* DO LOOP                    * 22120000
*                     SRTPT=SRTPT+51;   /* UP TABLE PTR               * 22130000
         LA    @F,51                                              0882  22140000
         A     @F,SRTPT                                           0882  22150000
         ST    @F,SRTPT                                           0882  22160000
*                     GO TO IDS3;       /* CONTINUE WITH NEXT ENTRY   * 22170000
         BC    15,IDS3                                            0883  22180000
*                   END;                /* END OF DO LOOP             * 22190000
*             END;                      /* END OF DO LOOP             * 22200000
*           ELSE                        /* ALPHA ORDER INCORRECT      * 22210000
*             DO;                       /* YES                        * 22220000
*               IDENSORT=IDENTDAT;      /* SAVE PRESENT TABLE ENTRY   * 22230000
@94D     L     @1,SRT                                             0887  22240000
         MVC   IDENSORT(51),0(@1)                                 0887  22250000
*               IDENTDAT=IDENTAB;       /* REPLACE WITH COMPARE ITEM  * 22260000
         MVC   0(51,@1),IDENTAB                                   0888  22270000
*               SRT=SRTPT;              /* REPLACE WITH NEEDED ADDRESS* 22280000
         MVC   SRT(4),SRTPT                                       0889  22290000
*               IDENTDAT=IDENSORT;                                      22300000
         L     @1,SRT                                             0890  22310000
         MVC   0(51,@1),IDENSORT                                  0890  22320000
* IDS3:         SRT=SRTPT;              /* USE NEW TABLE ENTRY        * 22330000
IDS3     MVC   SRT(4),SRTPT                                       0891  22340000
*               IF SRTPT=SRTEND         /* END OF TABLE               * 22350000
*                 THEN                  /* YES                        * 22360000
         L     @F,SRTEND                                          0892  22370000
         C     @F,SRTPT                                           0892  22380000
*                   GO TO IDS2;         /* BEGIN PRINTOUT             * 22390000
         BC    08,IDS2                                            0893  22400000
*                 ELSE                  /* NO                         * 22410000
*                   DO;                 /* DO LOOP                    * 22420000
*                     IDENTAB=IDENTDAT; /* COMPARE ITEM               * 22430000
         L     @1,SRT                                             0895  22440000
         MVC   IDENTAB(51),0(@1)                                  0895  22450000
*                     GO TO IDS1;       /* CONTINUE SORT              * 22460000
         BC    15,IDS1                                            0896  22470000
*                   END;                /* END OF DO LOOP             * 22480000
*             END;                      /* END OF DO LOOP             * 22490000
* IDS2:   SRT=SORTOUT;                  /* START OF SORT TABLE Y03739 * 22500000
@94C     EQU   *                                                  0899  22510000
IDS2     MVC   SRT(4),SORTOUT                                     0899  22520000
*         IF MDLB='1'B                  /* IS MODLIB SPECIFIED        * 22530000
*           THEN                        /* YES                        * 22540000
         L     @1,PARMPTR                                         0900  22550000
         TM    20(@1),B'00001000'                                 0900  22560000
         BC    12,@94B                                            0900  22570000
*             DO;                                                       22580000
* RSICH:        IF RSIX='RSI'           /* IS THIS NON USER DATA      * 22590000
*                 THEN                  /* YES                        * 22600000
RSICH    L     @1,SRT                                             0902  22610000
         CLC   11(3,@1),@C35                                      0902  22620000
         BC    07,@94A                                            0902  22630000
*                   DO;                                                 22640000
* RSICH1:             SRT=SRT+51;       /* BUMP PTR TO NEXT ENTRY     * 22650000
RSICH1   LA    @F,51                                              0904  22660000
         A     @F,SRT                                             0904  22670000
         ST    @F,SRT                                             0904  22680000
*                       IF SRT>SRTEND   /* END OF TABLE               * 22690000
*                         THEN          /* YES                        * 22700000
         L     @F,SRTEND                                          0905  22710000
         C     @F,SRT                                             0905  22720000
*                           RETURN;     /* RETURN TO CALLING ROUTINE  * 22730000
         BC    05,@EL03                                           0906  22740000
*                         ELSE;         /* NULL ELSE                  * 22750000
*                     GO TO RSICH;      /* CHECK NEXT ENTRY           * 22760000
         BC    15,RSICH                                           0908  22770000
*                   END;                                                22780000
*                 ELSE;                /* NULL ELSE                   * 22790000
*             END;                                                      22800000
*           ELSE;                       /* PRINT NEXT LINE            * 22810000
@94B     EQU   *                                                  0912  22820000
*         IF NUMO > 48                  /* LINE COUNT > 48?    Y03739 * 22830000
*           THEN                        /* YES                 Y03739 * 22840000
@946     L     @1,PARMPTR                                         0913  22850000
         CLI   72(@1),48                                          0913  22860000
         BC    12,@945                                            0913  22870000
*             CALL PRNT1;               /* WRITE HEADER        Y03739 * 22880000
         BAL   @E,PRNT1                                           0914  22890000
         BC    15,@944                                            0915  22900000
*           ELSE                        /* NO                  Y03739 * 22910000
*             NUMO=NUMO+2;              /* FOR LINE COUNT      Y03739 * 22920000
@945     LA    @F,2                                               0915  22930000
         L     @1,PARMPTR                                         0915  22940000
         SR    @0,@0                                              0915  22950000
         IC    @0,72(0,@1)                                        0915  22960000
         AR    @F,@0                                              0915  22970000
         STC   @F,72(0,@1)                                        0915  22980000
* IDS6:   IDPRINT=BLANKS;               /* BLANK OUT                  * 22990000
@944     EQU   *                                                  0916  23000000
IDS6     L     @1,OUT                                             0916  23010000
         MVC   0(1,@1),BLANKS                                     0916  23020000
         MVI   1(@1),C' '                                         0916  23030000
         MVC   2(119,@1),1(@1)                                    0916  23040000
*         USA5='0';                     /* SKIP TWO LINES   @ZA09119  * 23050000
         MVI   0(@1),C'0'                                         0917  23060000
*         USNAM='CSECT';                /* CSECT HEADING              * 23070000
         MVC   11(5,@1),@C16                                      0918  23080000
         MVI   16(@1),C' '                                        0918  23090000
         MVC   17(2,@1),16(@1)                                    0918  23100000
*         USYR='YR';                    /* YR HEADING                 * 23110000
         MVC   39(2,@1),@C17                                      0919  23120000
*         USL='/';                      /* /                          * 23130000
         MVI   41(@1),C'/'                                        0920  23140000
*         USDY='DAY';                   /* DAY                        * 23150000
         MVC   42(3,@1),@C19                                      0921  23160000
*         USER='USER DATA';             /* USER DATA HEADING          * 23170000
         MVC   65(9,@1),@C36                                      0922  23180000
         MVI   74(@1),C' '                                        0922  23190000
         MVC   75(30,@1),74(@1)                                   0922  23200000
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         * 23210000
*         R5=DCBOUT;                    /* ADDRESS OF OUTPUT DCB      * 23220000
         L     @4,PARMPTR                                         0924  23230000
         L     @5,4(0,@4)                                         0924  23240000
*         R6=ADDR(IDPRINT);             /* ADDR OF OUTPUT AREA        * 23250000
         LR    @6,@1                                              0925  23260000
*         GEN (PUT (5),(6));            /* PRINT OUTPUT LINE          * 23270000
         PUT (5),(6)                                                    23280000
         DS    0H                                                       23290000
*         GO TO IDS5;                   /* CONTINUE PRINTOUT          * 23300000
         BC    15,IDS5                                            0927  23310000
* IDS4:   R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         * 23320000
IDS4     L     @1,PARMPTR                                         0928  23330000
         L     @5,4(0,@1)                                         0928  23340000
*         R6=ADDR(IDPRINT);             /* OUTPUT AREA ADDR           * 23350000
         L     @4,OUT                                             0929  23360000
         LR    @6,@4                                              0929  23370000
*         GENERATE (PUT (5),(6));                                       23380000
         PUT (5),(6)                                                    23390000
         DS    0H                                                       23400000
*         USA5=' ';                     /* SINGLE SPACING             * 23410000
         MVI   0(@4),C' '                                         0931  23420000
*         NUMO=NUMO+1;                  /* FOR LINE COUNTER           * 23430000
         LA    @F,1                                               0932  23440000
         L     @1,PARMPTR                                         0932  23450000
         SR    @0,@0                                              0932  23460000
         IC    @0,72(0,@1)                                        0932  23470000
         AR    @F,@0                                              0932  23480000
         STC   @F,72(0,@1)                                        0932  23490000
*         LL=NUMO;                      /* LAST LINE                  * 23500000
         MVC   LL+1(1),72(@1)                                     0933  23510000
         MVI   LL,X'00'                                           0933  23520000
*         IF NUMO > 50                  /* LINE COUNT > 50?           * 23530000
*           THEN                        /* YES                        * 23540000
         CLI   72(@1),50                                          0934  23550000
         BC    12,@943                                            0934  23560000
*             DO;                       /* DO LOOP                    * 23570000
*               CALL PRNT1;             /* PRINT NEW HEADER           * 23580000
         BAL   @E,PRNT1                                           0936  23590000
*               GO TO IDS6;             /* PRINT NEW TITLE            * 23600000
         BC    15,IDS6                                            0937  23610000
*             END;                      /* END OF DO LOOP             * 23620000
*           ELSE                        /* NO                         * 23630000
*             GO TO IDS5;               /* CONTINUE PRINTOUT          * 23640000
* IDS5:   IF SRT > SRTEND               /* END OF TABLE               * 23650000
*           THEN                        /* YES                        * 23660000
@942     EQU   *                                                  0940  23670000
IDS5     L     @F,SRTEND                                          0940  23680000
         C     @F,SRT                                             0940  23690000
         BC    10,@941                                            0940  23700000
*             DO;                       /* DO LOOP                    * 23710000
* PRNTDSH:         IDPRINT(2)='-';         /* DASH          @ZA09119  * 23720000
PRNTDSH  L     @1,OUT                                             0942  23730000
         MVI   1(@1),C'-'                                         0942  23740000
*                  IDPRINT(3:121)=IDPRINT(2:120); /* PROPAGATE DASHES * 23750000
         MVC   2(119,@1),1(@1)                                    0943  23760000
*                  USA5='0';               /* DOUBLE SPACING          * 23770000
         MVI   0(@1),C'0'                                         0944  23780000
*                  NUMO=NUMO+2;            /* FOR LINE COUNT          * 23790000
         LA    @F,2                                               0945  23800000
         L     @4,PARMPTR                                         0945  23810000
         SR    @0,@0                                              0945  23820000
         IC    @0,72(0,@4)                                        0945  23830000
         AR    @F,@0                                              0945  23840000
         STC   @F,72(0,@4)                                        0945  23850000
*                  GEN (PUT (5),(6));                                   23860000
         PUT (5),(6)                                                    23870000
         DS    0H                                                       23880000
*                  RETURN;                   /* RETURN                * 23890000
         BC    15,@EL03                                           0947  23900000
*             END;                      /* END OF DO LOOP             * 23910000
*           ELSE                        /* NO                         * 23920000
*             DO;                       /* DO LOOP                    * 23930000
@941     EQU   *                                                  0949  23940000
* NONUSER:      IF MDLB='1'B            /* MODLIB SPECIFIED  @ZA09119 * 23950000
*                 THEN                  /* YES                        * 23960000
NONUSER  L     @1,PARMPTR                                         0950  23970000
         TM    20(@1),B'00001000'                                 0950  23980000
         BC    12,@93F                                            0950  23990000
*                   DO;                                                 24000000
*                      IF RSIX='RSI'    /* IS THIS NON USER DATA      * 24010000
*                        THEN                                           24020000
         L     @4,SRT                                             0952  24030000
         CLC   11(3,@4),@C35                                      0952  24040000
         BC    07,@93E                                            0952  24050000
*                          DO;                                          24060000
*                            SRT=SRT+51; /* BUMP PTR TO NEXT ENTRY    * 24070000
         LA    @F,51                                              0954  24080000
         A     @F,SRT                                             0954  24090000
         ST    @F,SRT                                             0954  24100000
*                             IF SRT>SRTEND   /* END OF TABLE         * 24110000
*                               THEN          /* YES                  * 24120000
         L     @F,SRTEND                                          0955  24130000
         C     @F,SRT                                             0955  24140000
*                                GO TO PRNTDSH; /* PRNT DASH @ZA09119 * 24150000
         BC    04,PRNTDSH                                         0956  24160000
*                               ELSE;   /* NULL ELSE                  * 24170000
*                            GO TO NONUSER; /* NON USER?     @ZA09119 * 24180000
         BC    15,NONUSER                                         0958  24190000
*                          END;                                         24200000
*                        ELSE;          /* NULL ELSE                  * 24210000
*                   END;                                                24220000
*                 ELSE;                 /* NULL ELSE                  * 24230000
@93F     EQU   *                                                  0962  24240000
*               USNAM=USNAME;           /* CSECT NAME                 * 24250000
@93C     EQU   *                                                  0963  24260000
         L     @1,SRT                                             0963  24270000
         L     @4,OUT                                             0963  24280000
         MVC   11(8,@4),0(@1)                                     0963  24290000
*               USER=USSER;             /* USER DATA                  * 24300000
         MVC   65(40,@4),11(@1)                                   0964  24310000
*               R5=ADDR(USDATE);        /* ADDR OF PACKED DATE        * 24320000
         LA    @5,8(0,@1)                                         0965  24330000
*               R6=ADDR(UNPKAREA);      /* ADDR OF UNPACK AREA        * 24340000
         LA    @6,UNPKAREA                                        0966  24350000
*               GENERATE (UNPK 0(5,6),0(3,5));                          24360000
         UNPK 0(5,6),0(3,5)                                             24370000
         DS    0H                                                       24380000
*         RELEASE (5,6);                /* RELEASE RESTRICTION        * 24390000
*               USYR=YRZ;               /* YEAR                       * 24400000
         MVC   39(2,@4),UNPKAREA                                  0969  24410000
*               USDY=DYZ;               /* DAY                        * 24420000
         MVC   42(3,@4),UNPKAREA+2                                0970  24430000
*               SRT=SRT+51;             /* UP TABLE PTR               * 24440000
         LA    @F,51                                              0971  24450000
         A     @F,SRT                                             0971  24460000
         ST    @F,SRT                                             0971  24470000
*               GO TO IDS4;             /* PRINT OUT NEXT ENTRY       * 24480000
         BC    15,IDS4                                            0972  24490000
*             END;                      /* END OF DO LOOP             * 24500000
* END IDSORT;                                                           24510000
@940     EQU   *                                                  0974  24520000
@EL03    L     @D,4(0,@D)                                         0974  24530000
         LM    @E,@C,12(@D)                                       0974  24540000
         BCR   15,@E                                              0974  24550000
*         /************************************************************ 24560000
*         /* TRANSLATOR SORT AND PRINT ROUTINE                        * 24570000
*         /************************************************************ 24580000
* TRSORT: PROCEDURE;                                                    24590000
TRSORT   STM   @E,@C,12(@D)                                       0975  24600000
         ST    @D,@SAV004+4                                       0975  24610000
         LA    @F,@SAV004                                         0975  24620000
         ST    @F,8(0,@D)                                         0975  24630000
         LR    @D,@F                                              0975  24640000
*         TRN=TRNOUT;                   /* START OF DATA TABLE        * 24650000
         MVC   TRN(4),TRNOUT                                      0976  24660000
*         TTRN=TRN;                     /* OLD ENTRY                  * 24670000
         MVC   TTRN(4),TRN                                        0977  24680000
*         SRT=SORTOUT;                  /* START OF SORT TABLE        * 24690000
         MVC   SRT(4),SORTOUT                                     0978  24700000
*         SRTPT=SRT;                    /* OLD ENTRY ADDRESS          * 24710000
         MVC   SRTPT(4),SRT                                       0979  24720000
*         POINT=ADDR(TRS5);             /* LINK ADDRESS               * 24730000
         LA    @F,TRS5                                            0980  24740000
         ST    @F,POINT                                           0980  24750000
*         IF NUMO > 48                  /* LINE COUNT > 48?           * 24760000
*           THEN                        /* YES                        * 24770000
         L     @1,PARMPTR                                         0981  24780000
         CLI   72(@1),48                                          0981  24790000
         BC    12,@93B                                            0981  24800000
*             CALL PRNT1;               /* WRITE HEADER               * 24810000
         BAL   @E,PRNT1                                           0982  24820000
         BC    15,@93A                                            0983  24830000
*           ELSE                        /* NO                         * 24840000
*             NUMO=NUMO+2;              /* FOR LINE COUNT             * 24850000
@93B     LA    @F,2                                               0983  24860000
         L     @1,PARMPTR                                         0983  24870000
         SR    @0,@0                                              0983  24880000
         IC    @0,72(0,@1)                                        0983  24890000
         AR    @F,@0                                              0983  24900000
         STC   @F,72(0,@1)                                        0983  24910000
* TRS1:   TRNPRNT=BLANKS;               /* BLANK OUT PRINT AREA       * 24920000
@93A     EQU   *                                                  0984  24930000
TRS1     L     @1,OUT                                             0984  24940000
         MVC   0(1,@1),BLANKS                                     0984  24950000
         MVI   1(@1),C' '                                         0984  24960000
         MVC   2(119,@1),1(@1)                                    0984  24970000
*         USA7='0';                     /* DOUBLE SPACING             * 24980000
         MVI   0(@1),C'0'                                         0985  24990000
*         TRCSECT='CSECT';              /* CSECT                      * 25000000
         MVC   11(5,@1),@C16                                      0986  25010000
         MVI   16(@1),C' '                                        0986  25020000
         MVC   17(2,@1),16(@1)                                    0986  25030000
*         TRNAME='TRANSLATOR';          /* TRANSLATOR                 * 25040000
         MVC   24(10,@1),@C37                                     0987  25050000
*         TRVR='VR';                    /* VR                         * 25060000
         MVC   49(2,@1),@C38                                      0988  25070000
*         TRSL='.';                     /* .                          * 25080000
         MVI   51(@1),C'.'                                        0989  25090000
*         TRMD='MD';                    /* MD                         * 25100000
         MVC   52(2,@1),@C39                                      0990  25110000
*         TRYR='YR';                    /* YR                         * 25120000
         MVC   80(2,@1),@C17                                      0991  25130000
*         TRSLSH='/';                   /* /                          * 25140000
         MVI   82(@1),C'/'                                        0992  25150000
*         TRDY='DY';                    /* DY                         * 25160000
         MVC   83(2,@1),@C40                                      0993  25170000
         MVI   85(@1),C' '                                        0993  25180000
*         RESTRICT (5,6);               /* RESTRICT R5 AND R6         * 25190000
*         R5=DCBOUT;                    /* ADDR OF OUTPUT DCB         * 25200000
         L     @4,PARMPTR                                         0995  25210000
         L     @5,4(0,@4)                                         0995  25220000
*         R6=ADDR(TRNPRNT);             /* ADDR OF PRINT AREA         * 25230000
         LR    @6,@1                                              0996  25240000
*         GENERATE (PUT (5),(6));                                       25250000
         PUT (5),(6)                                                    25260000
         DS    0H                                                       25270000
*         GO TO TRS2;                   /* FOR NEXT TABLE ENTRY       * 25280000
         BC    15,TRS2                                            0998  25290000
* TRS4:   IF SRT Â¬< SRTEND              /* LAST ENTRY                 * 25300000
*           THEN                        /* YES                        * 25310000
TRS4     L     @F,SRTEND                                          0999  25320000
         C     @F,SRT                                             0999  25330000
         BC    02,@939                                            0999  25340000
*             DO;                       /* DO LOOP                    * 25350000
*               TRNPRNT(2)='-';         /* DASH                       * 25360000
         L     @1,OUT                                             1001  25370000
         MVI   1(@1),C'-'                                         1001  25380000
*               TRNPRNT(3:121)=TRNPRNT(2:120); /* PROPAGATE DASHES    * 25390000
         MVC   2(119,@1),1(@1)                                    1002  25400000
*               USA7='0';               /* DOUBLE SPACING             * 25410000
         MVI   0(@1),C'0'                                         1003  25420000
*               NUMO=NUMO+2;            /* FOR LINE COUNT             * 25430000
         LA    @F,2                                               1004  25440000
         L     @4,PARMPTR                                         1004  25450000
         SR    @0,@0                                              1004  25460000
         IC    @0,72(0,@4)                                        1004  25470000
         AR    @F,@0                                              1004  25480000
         STC   @F,72(0,@4)                                        1004  25490000
*               R5=DCBOUT;              /* ADDR OF OUTPUT DCB         * 25500000
         L     @5,4(0,@4)                                         1005  25510000
*               R6=ADDR(TRNPRNT);       /* ADDR OF OUTPUT LINE        * 25520000
         LR    @6,@1                                              1006  25530000
*               GEN(PUT (5),(6));                                       25540000
         PUT (5),(6)                                                    25550000
         DS    0H                                                       25560000
*               RETURN;                 /* RETURN                     * 25570000
         BC    15,@EL04                                           1008  25580000
*             END;                      /* END OF DO LOOP             * 25590000
*           ELSE                        /* NO                         * 25600000
*             DO;                       /* DO LOOP                    * 25610000
*               IF NUMO > 50            /* NEW PAGE?                  * 25620000
*                 THEN                  /* YES                        * 25630000
@939     L     @1,PARMPTR                                         1011  25640000
         CLI   72(@1),50                                          1011  25650000
         BC    12,@937                                            1011  25660000
*                   DO;                 /* DO LOOP                    * 25670000
*                     CALL PRNT1;       /* PRINT NEW HEADER           * 25680000
         BAL   @E,PRNT1                                           1013  25690000
*                     GO TO TRS1;       /* PRINT NEW TITLE            * 25700000
         BC    15,TRS1                                            1014  25710000
*                   END;                /* END OF DO LOOP             * 25720000
*                 ELSE                  /* NO                         * 25730000
*                   DO;                 /* DO LOOP                    * 25740000
*                     LL=NUMO;          /* LASTLINE                   * 25750000
@937     L     @1,PARMPTR                                         1017  25760000
         MVC   LL+1(1),72(@1)                                     1017  25770000
         MVI   LL,X'00'                                           1017  25780000
*                     NUMO=NUMO+1;      /* ADD 1 TO COUNTER           * 25790000
         LA    @F,1                                               1018  25800000
         SR    @0,@0                                              1018  25810000
         IC    @0,72(0,@1)                                        1018  25820000
         AR    @F,@0                                              1018  25830000
         STC   @F,72(0,@1)                                        1018  25840000
*                     GO TO TRS2;       /* CONTINUE PROCESSING        * 25850000
*                   END;                /* END OF DO LOOP             * 25860000
*             END;                      /* END OF DO LOOP             * 25870000
@936     EQU   *                                                  1021  25880000
* TRS2:   TRCSECT=TNAME;                /* CSECT NAME                 * 25890000
@938     EQU   *                                                  1022  25900000
TRS2     L     @1,SRT                                             1022  25910000
         L     @4,OUT                                             1022  25920000
         MVC   11(8,@4),0(@1)                                     1022  25930000
*         TRNAME=TPROG;                 /* PROGRAM NAME               * 25940000
         L     @7,TRN                                             1023  25950000
         MVC   24(10,@4),0(@7)                                    1023  25960000
*         R5=ADDR(TVER);                /* PACKED DATA                * 25970000
         LA    @5,10(0,@7)                                        1024  25980000
*         R6=ADDR(UPAK2);               /* UNPACK AREA                * 25990000
         LA    @6,UPAK2                                           1025  26000000
*         GENERATE (UNPK 0(5,6),0(3,5));                                26010000
         UNPK 0(5,6),0(3,5)                                             26020000
         DS    0H                                                       26030000
*         TRVR=UPK1;                    /* VERSION                    * 26040000
         MVC   49(2,@4),UPAK2                                     1027  26050000
*         TRMD=UPK2;                    /* MOD                        * 26060000
         MVC   52(2,@4),UPAK2+2                                   1028  26070000
*         R5=ADDR(TDATE);               /* COMPILE DATE               * 26080000
         LA    @5,12(0,@7)                                        1029  26090000
*         R6=ADDR(UNPKAREA);            /* UNPACK AREA ADDR           * 26100000
         LA    @6,UNPKAREA                                        1030  26110000
*         GENERATE (UNPK 0(5,6),0(3,5));                                26120000
         UNPK 0(5,6),0(3,5)                                             26130000
         DS    0H                                                       26140000
*         TRYR=YRZ;                     /* YEAR                       * 26150000
         MVC   80(2,@4),UNPKAREA                                  1032  26160000
*         TRDY=DYZ;                     /* DAY                        * 26170000
         MVC   83(3,@4),UNPKAREA+2                                1033  26180000
* TRS3:   R5=DCBOUT;                    /* ADDRESS OF OUTPUT DCB      * 26190000
TRS3     L     @1,PARMPTR                                         1034  26200000
         L     @5,4(0,@1)                                         1034  26210000
*         R6=ADDR(TRNPRNT);             /* ADDR OF PRINT AREA         * 26220000
         L     @4,OUT                                             1035  26230000
         LR    @6,@4                                              1035  26240000
*         GENERATE (PUT (5),(6));                                       26250000
         PUT (5),(6)                                                    26260000
         DS    0H                                                       26270000
*         USA7=' ';                     /* SINGLE SPACING             * 26280000
         MVI   0(@4),C' '                                         1037  26290000
*         RELEASE (5,6);                /* RELEASE RESTRICTION        * 26300000
*         GO TO LAB1;                   /* LINK ADDRESS               * 26310000
         L     @1,POINT                                           1039  26320000
         BCR   15,@1                                              1039  26330000
* TRS5:   SRTPT=SRT;                    /* OLD ENTRY                  * 26340000
TRS5     MVC   SRTPT(4),SRT                                       1040  26350000
*         SRT=SRT+8;                    /* NEW ENTRY                  * 26360000
         LA    @F,8                                               1041  26370000
         A     @F,SRT                                             1041  26380000
         ST    @F,SRT                                             1041  26390000
*         IF SRBYTE=BLANKS              /* LAST CSECT FOR THIS TRANSL * 26400000
*           THEN                        /* YES                        * 26410000
         LR    @1,@F                                              1042  26420000
         CLC   0(1,@1),BLANKS                                     1042  26430000
         BC    07,@935                                            1042  26440000
*             DO;                       /* DO LOOP                    * 26450000
*               TTRN=TRN;               /* OLD ENTRY                  * 26460000
         MVC   TTRN(4),TRN                                        1044  26470000
*               TRN=TRN+15;             /* NEW ENTRY                  * 26480000
         LA    @F,15                                              1045  26490000
         A     @F,TRN                                             1045  26500000
         ST    @F,TRN                                             1045  26510000
*               IF TRBYTE=BLANKS        /* TWO TRANSLATORS            * 26520000
*                 THEN                  /* NO                         * 26530000
         LR    @8,@F                                              1046  26540000
         CLC   0(1,@8),BLANKS                                     1046  26550000
         BC    07,@934                                            1046  26560000
*                   DO;                 /* DO LOOP                    * 26570000
*                     SRT=SRT+8;        /* UP TRANS TABLE PTR         * 26580000
         LA    @F,8                                               1048  26590000
         A     @F,SRT                                             1048  26600000
         ST    @F,SRT                                             1048  26610000
*                     TRN=TRN+15;       /* UP DATA PTR                * 26620000
         LA    @F,15                                              1049  26630000
         A     @F,TRN                                             1049  26640000
         ST    @F,TRN                                             1049  26650000
*                     POINT=ADDR(TRS5); /* LINK ADDRESS               * 26660000
         LA    @F,TRS5                                            1050  26670000
         ST    @F,POINT                                           1050  26680000
*                     GO TO TRS4;       /* BRANCH ADDRESS             * 26690000
         BC    15,TRS4                                            1051  26700000
*                   END;                /* END OF DO LOOP             * 26710000
*                 ELSE                  /* ANOTHER TRANSLATOR         * 26720000
*                   DO;                 /* DO LOOP                    * 26730000
*                     POINT=ADDR(TRS6); /* LINK ADDRESS               * 26740000
@934     LA    @F,TRS6                                            1054  26750000
         ST    @F,POINT                                           1054  26760000
*                     NUMO=NUMO+1;      /* ADD ONE TO COUNTER         * 26770000
         LA    @F,1                                               1055  26780000
         L     @1,PARMPTR                                         1055  26790000
         SR    @0,@0                                              1055  26800000
         IC    @0,72(0,@1)                                        1055  26810000
         AR    @F,@0                                              1055  26820000
         STC   @F,72(0,@1)                                        1055  26830000
*                     GO TO TRS2;       /* CONTINUE PROCESSING        * 26840000
         BC    15,TRS2                                            1056  26850000
*                   END;                /* END OF DO LOOP             * 26860000
*             END;                      /* END OF DO LOOP             * 26870000
*           ELSE                        /* ANOTHER CSECT FOR THIS     * 26880000
*                                       /* TRANSLATOR                 * 26890000
*             DO;                       /* DO LOOP                    * 26900000
*               TTRN=TRN;               /* OLD ENTRY                  * 26910000
@935     MVC   TTRN(4),TRN                                        1060  26920000
*               TRN=TRN+15;             /* NEW ENTRY                  * 26930000
         LA    @F,15                                              1061  26940000
         A     @F,TRN                                             1061  26950000
         ST    @F,TRN                                             1061  26960000
*               IF TRBYTE=BLANKS        /* ONLY ONE TRANSLATOR        * 26970000
*                 THEN                  /* YES                        * 26980000
         LR    @1,@F                                              1062  26990000
         CLC   0(1,@1),BLANKS                                     1062  27000000
         BC    07,@931                                            1062  27010000
*                   DO;                 /* DO LOOP                    * 27020000
*                     TRN=TTRN;         /* OLD ENTRY                  * 27030000
         MVC   TRN(4),TTRN                                        1064  27040000
*                     POINT=ADDR(TRS5); /* LINK ADDRESS               * 27050000
         LA    @F,TRS5                                            1065  27060000
         ST    @F,POINT                                           1065  27070000
*                     GO TO TRS4;       /* NEXT TABLE ENTRY           * 27080000
         BC    15,TRS4                                            1066  27090000
*                   END;                /* END OF DO LOOP             * 27100000
*                 ELSE                  /* TWO TRANSLATORS            * 27110000
*                   DO;                 /* DO LOOP                    * 27120000
*                     SRT=SRTPT;        /* OLD ENTRY                  * 27130000
@931     MVC   SRT(4),SRTPT                                       1069  27140000
*                     TNAME=BLANKS;     /* BLANK OUT CSECT ENTRY      * 27150000
         L     @1,SRT                                             1070  27160000
         MVC   0(1,@1),BLANKS                                     1070  27170000
         MVI   1(@1),C' '                                         1070  27180000
         MVC   2(6,@1),1(@1)                                      1070  27190000
*                     POINT=ADDR(TRS7); /* LINK ADDRESS               * 27200000
         LA    @F,TRS7                                            1071  27210000
         ST    @F,POINT                                           1071  27220000
*                     NUMO=NUMO+1;      /* ADD ONE TO COUNTER         * 27230000
         LA    @F,1                                               1072  27240000
         L     @8,PARMPTR                                         1072  27250000
         SR    @0,@0                                              1072  27260000
         IC    @0,72(0,@8)                                        1072  27270000
         AR    @F,@0                                              1072  27280000
         STC   @F,72(0,@8)                                        1072  27290000
*                     GO TO TRS2;       /* CONTINUE PROCESSING        * 27300000
         BC    15,TRS2                                            1073  27310000
*                   END;                /* END OF DO LOOP             * 27320000
*             END;                      /* END OF DO LOOP             * 27330000
@930     EQU   *                                                  1075  27340000
* TRS6:   TTRN=TRN;                     /* OLD ENTRY                  * 27350000
@932     EQU   *                                                  1076  27360000
TRS6     MVC   TTRN(4),TRN                                        1076  27370000
*         TRN=TRN+15;                   /* NEW ENTRY                  * 27380000
         LA    @F,15                                              1077  27390000
         A     @F,TRN                                             1077  27400000
         ST    @F,TRN                                             1077  27410000
*         SRT=SRT+8;                    /* UP TRANS TABLE PTR         * 27420000
         LA    @F,8                                               1078  27430000
         A     @F,SRT                                             1078  27440000
         ST    @F,SRT                                             1078  27450000
*         POINT=ADDR(TRS5);             /* LINK ADDR                  * 27460000
         LA    @F,TRS5                                            1079  27470000
         ST    @F,POINT                                           1079  27480000
*         GO TO TRS4;                   /* FOR NEXT TABLE ENTRY       * 27490000
         BC    15,TRS4                                            1080  27500000
* TRS7:   SRT=SRT+8;                    /* NEXT TABLE ENTRY           * 27510000
TRS7     LA    @F,8                                               1081  27520000
         A     @F,SRT                                             1081  27530000
         ST    @F,SRT                                             1081  27540000
*         IF SRBYTE=BLANKS              /* NO MORE CSECTS             * 27550000
*           THEN                        /* YES - NO MORE CSECTS       * 27560000
         LR    @1,@F                                              1082  27570000
         CLC   0(1,@1),BLANKS                                     1082  27580000
         BC    07,@92F                                            1082  27590000
*             DO;                       /* DO LOOP                    * 27600000
*               SRT=SRT+8;              /* NEXT CSECT                 * 27610000
         LA    @F,8                                               1084  27620000
         A     @F,SRT                                             1084  27630000
         ST    @F,SRT                                             1084  27640000
*               TRN=TRN+15;             /* NEXT TRANSLATOR            * 27650000
         LA    @F,15                                              1085  27660000
         A     @F,TRN                                             1085  27670000
         ST    @F,TRN                                             1085  27680000
*               POINT=ADDR(TRS5);       /* LINK ADDRESS               * 27690000
         LA    @F,TRS5                                            1086  27700000
         ST    @F,POINT                                           1086  27710000
*               GO TO TRS4;             /* BRANCH ADDRESS             * 27720000
         BC    15,TRS4                                            1087  27730000
*             END;                      /* END OF DO LOOP             * 27740000
*           ELSE                        /* MORE CSECTS                * 27750000
*             DO;                       /* DO LOOP                    * 27760000
*               TRN=TTRN;               /* OLD ENTRY                  * 27770000
@92F     MVC   TRN(4),TTRN                                        1090  27780000
*               POINT=ADDR(TRS5);       /* LINK ADDRESS               * 27790000
         LA    @F,TRS5                                            1091  27800000
         ST    @F,POINT                                           1091  27810000
*               GO TO TRS4;             /* BRANCH ADDRESS             * 27820000
         BC    15,TRS4                                            1092  27830000
*             END;                      /* END OF DO LOOP             * 27840000
* END TRSORT;                                                           27850000
@92E     EQU   *                                                  1094  27860000
@EL04    L     @D,4(0,@D)                                         1094  27870000
         LM    @E,@C,12(@D)                                       1094  27880000
         BCR   15,@E                                              1094  27890000
* END HMBLKIDR;                                                         27900000
@DATA1   EQU   *                                                        27910000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           27920000
@1       EQU   01                                                       27930000
@2       EQU   02                                                       27940000
@3       EQU   03                                                       27950000
@4       EQU   04                                                       27960000
@5       EQU   05                                                       27970000
@6       EQU   06                                                       27980000
@7       EQU   07                                                       27990000
@8       EQU   08                                                       28000000
@9       EQU   09                                                       28010000
@A       EQU   10                                                       28020000
@B       EQU   11                                                       28030000
@C       EQU   12                                                       28040000
@D       EQU   13                                                       28050000
@E       EQU   14                                                       28060000
@F       EQU   15                                                       28070000
@D1      DC    H'16'                                                    28080000
@D2      DC    H'-2'                                                    28090000
@D3      DC    H'15'                                                    28100000
@D4      DC    H'3'                                                     28110000
@D5      DC    H'2'                                                     28120000
@D6      DC    H'1'                                                     28130000
@D7      DC    H'4'                                                     28140000
@D8      DC    H'6'                                                     28150000
         DS    0F                                                       28160000
@SIZ001  DC    AL1(&SPN)                                                28170000
         DC    AL3(@DATEND-@DATD)                                       28180000
         DS    0F                                                       28190000
@C4      DC    C'0001'                                                  28200000
@C12     DC    C'$PRIVATE'                                              28210000
@C20     DC    C'IMASPZAP'                                              28220000
@C25     DC    C'THIS LOAD MODULE WAS PRODUCED BY LINKAGE EDITOR '      28230000
@C28     DC    C' ON DAY '                                              28240000
@C17     DC    C'YR'                                                    28250000
@C23     DC    C'THIS LOAD MODULE CONTAINS '                            28260000
@C26     DC    C' AT LEVEL '                                            28270000
@C37     DC    C'TRANSLATOR'                                            28280000
@C38     DC    C'VR'                                                    28290000
@C39     DC    C'MD'                                                    28300000
@C40     DC    C'DY'                                                    28310000
@C16     DC    C'CSECT'                                                 28320000
@C19     DC    C'DAY'                                                   28330000
@C21     DC    C' DATA'                                                 28340000
@C24     DC    C'NO INFORMATION SUPPLIED BY IMASPZAP'                   28350000
@C29     DC    C' OF YEAR '                                             28360000
@C30     DC    C'MISSING'                                               28370000
@C31     DC    C'LISTIDR'                                               28380000
@C32     DC    C' FOR LOAD MODULE '                                     28390000
@C34     DC    C'PAGE '                                                 28400000
@C35     DC    C'RSI'                                                   28410000
@C36     DC    C'USER DATA'                                             28420000
         DS    0D                                                       28430000
@DATA    EQU   *                                                        28440000
DUMMY    EQU   00000000            FULLWORD INTEGER                     28450000
REG1     EQU   00000001            FULLWORD POINTER REGISTER            28460000
PTR2     EQU   00000002            FULLWORD INTEGER REGISTER            28470000
R5       EQU   00000005            FULLWORD POINTER REGISTER            28480000
R6       EQU   00000006            FULLWORD POINTER REGISTER            28490000
SRBYTE   EQU   00000000            1 BYTE(S)                            28500000
TRBYTE   EQU   00000000            1 BYTE(S)                            28510000
PAGE     EQU   00000000            121 BYTE(S) ON WORD                  28520000
USA3     EQU   PAGE+00000000       1 BYTE(S)                            28530000
NULL     EQU   PAGE+00000001       43 BYTE(S)                           28540000
TITLE    EQU   PAGE+00000044       7 BYTE(S)                            28550000
TIT2     EQU   PAGE+00000051       17 BYTE(S)                           28560000
MEM      EQU   PAGE+00000068       8 BYTE(S)                            28570000
NULL2    EQU   PAGE+00000076       20 BYTE(S)                           28580000
PGTITL   EQU   PAGE+00000096       5 BYTE(S)                            28590000
PGNO     EQU   PAGE+00000101       4 BYTE(S)                            28600000
NONE     EQU   PAGE+00000105       16 BYTE(S)                           28610000
CESDRC   EQU   00000000            8 BYTE(S) ON WORD                    28620000
TYPE     EQU   CESDRC+00000000     8 BIT(S)                             28630000
SPARE    EQU   CESDRC+00000001     3 BYTE(S)                            28640000
ESDID    EQU   CESDRC+00000004     2 BYTE(S)                            28650000
COUNT    EQU   CESDRC+00000006     2 BYTE(S)                            28660000
IDRREC   EQU   00000000            3 BYTE(S) ON WORD                    28670000
ID       EQU   IDRREC+00000000     8 BIT(S)                             28680000
BYTCNT   EQU   IDRREC+00000001     1 BYTE(S)                            28690000
SUBTYP   EQU   IDRREC+00000002     8 BIT(S)                             28700000
LINKRC   EQU   00000000            18 BYTE(S) ON WORD                   28710000
SPARE3   EQU   LINKRC+00000000     3 BYTE(S)                            28720000
PROGNM   EQU   LINKRC+00000003     10 BYTE(S)                           28730000
VRSION   EQU   LINKRC+00000013     2 BYTE(S)                            28740000
LKDATE   EQU   LINKRC+00000015     3 BYTE(S)                            28750000
TRANS    EQU   00000000            2 BYTE(S) ON WORD                    28760000
ESDBITS  EQU   TRANS+00000000      16 BIT(S)                            28770000
USRDATA  EQU   00000000            6 BYTE(S) ON WORD                    28780000
ESD4     EQU   USRDATA+00000000    2 BYTE(S)                            28790000
DATE5    EQU   USRDATA+00000002    3 BYTE(S)                            28800000
CNT      EQU   USRDATA+00000005    1  BYTE  POINTER                     28810000
CESDATA  EQU   00000000            16 BYTE(S) ON WORD                   28820000
EXTRNAM  EQU   CESDATA+00000000    8 BYTE(S)                            28830000
ESDTYP   EQU   CESDATA+00000008    8 BIT(S)                             28840000
SKIP     EQU   CESDATA+00000009    7 BYTE(S)                            28850000
ZAPD     EQU   00000000            1 BYTE(S) ON WORD                    28860000
FLG      EQU   ZAPD+00000000       8 BIT(S)                             28870000
ZAP      EQU   00000000            13 BYTE(S) ON WORD                   28880000
ESD      EQU   ZAP+00000000        2 BYTE(S)                            28890000
DATE1    EQU   ZAP+00000002        3 BYTE(S)                            28900000
ZP       EQU   ZAP+00000005        8 BYTE(S)                            28910000
TRNSDSC  EQU   00000000            15 BYTE(S) ON WORD                   28920000
PGM      EQU   TRNSDSC+00000000    10 BYTE(S)                           28930000
VRMOD    EQU   TRNSDSC+00000010    2 BYTE(S)                            28940000
CMPLE    EQU   TRNSDSC+00000012    3 BYTE(S)                            28950000
TRNTAB   EQU   00000000            8 BYTE(S) ON WORD                    28960000
TNAME    EQU   TRNTAB+00000000     8 BYTE(S)                            28970000
TDTAB    EQU   00000000            15 BYTE(S) ON WORD                   28980000
TPROG    EQU   TDTAB+00000000      10 BYTE(S)                           28990000
TVER     EQU   TDTAB+00000010      2 BYTE(S)                            29000000
TDATE    EQU   TDTAB+00000012      3 BYTE(S)                            29010000
TRNPRNT  EQU   00000000            121 BYTE(S) ON WORD                  29020000
USA7     EQU   TRNPRNT+00000000    1 BYTE(S)                            29030000
SSA      EQU   TRNPRNT+00000001    10 BYTE(S)                           29040000
TRCSECT  EQU   TRNPRNT+00000011    8 BYTE(S)                            29050000
SSB      EQU   TRNPRNT+00000019    5 BYTE(S)                            29060000
TRNAME   EQU   TRNPRNT+00000024    10 BYTE(S)                           29070000
SSC      EQU   TRNPRNT+00000034    15 BYTE(S)                           29080000
TRVR     EQU   TRNPRNT+00000049    2 BYTE(S)                            29090000
TRSL     EQU   TRNPRNT+00000051    1 BYTE(S)                            29100000
TRMD     EQU   TRNPRNT+00000052    2 BYTE(S)                            29110000
SSD      EQU   TRNPRNT+00000054    26 BYTE(S)                           29120000
TRYR     EQU   TRNPRNT+00000080    2 BYTE(S)                            29130000
TRSLSH   EQU   TRNPRNT+00000082    1 BYTE(S)                            29140000
TRDY     EQU   TRNPRNT+00000083    3 BYTE(S)                            29150000
SSE      EQU   TRNPRNT+00000086    35 BYTE(S)                           29160000
LINKOUT  EQU   00000000            121 BYTE(S) ON WORD                  29170000
USA4     EQU   LINKOUT+00000000    1 BYTE(S)                            29180000
SP12     EQU   LINKOUT+00000001    9 BYTE(S)                            29190000
MSG1     EQU   LINKOUT+00000010    48 BYTE(S)                           29200000
MSG2     EQU   LINKOUT+00000058    10 BYTE(S)                           29210000
SP10     EQU   LINKOUT+00000068    10 BYTE(S)                           29220000
MSG3A    EQU   LINKOUT+00000078    2 BYTE(S)                            29230000
MSG3B    EQU   LINKOUT+00000080    1 BYTE(S)                            29240000
MSG3C    EQU   LINKOUT+00000081    2 BYTE(S)                            29250000
SP8      EQU   LINKOUT+00000083    8 BYTE(S)                            29260000
MSG4     EQU   LINKOUT+00000091    3 BYTE(S)                            29270000
SP9      EQU   LINKOUT+00000094    9 BYTE(S)                            29280000
MSG5     EQU   LINKOUT+00000103    2 BYTE(S)                            29290000
DOT      EQU   LINKOUT+00000105    1 BYTE(S)                            29300000
SP11     EQU   LINKOUT+00000106    15 BYTE(S)                           29310000
SPBYT    EQU   00000000            8 BIT(S) ON BYTE                     29320000
SPBIT    EQU   00000000            1  BYTE  POINTER                     29330000
CSDTAB   EQU   00000000            12 BYTE(S) ON WORD                   29340000
NAME     EQU   CSDTAB+00000000     8 BYTE(S)                            29350000
SPARE6   EQU   CSDTAB+00000008     2 BYTE(S)                            29360000
IDEN     EQU   CSDTAB+00000010     2 BYTE(S)                            29370000
SORTAB   EQU   00000000            19 BYTE(S) ON WORD                   29380000
CNAME    EQU   SORTAB+00000000     8 BYTE(S)                            29390000
ZPDATE   EQU   SORTAB+00000008     3 BYTE(S)                            29400000
DAZP     EQU   SORTAB+00000011     8 BYTE(S)                            29410000
ZPPRINT  EQU   00000000            121 BYTE(S) ON WORD                  29420000
USA2     EQU   ZPPRINT+00000000    1 BYTE(S)                            29430000
SPCA     EQU   ZPPRINT+00000001    20 BYTE(S)                           29440000
CSNAME   EQU   ZPPRINT+00000021    8 BYTE(S)                            29450000
SPCB     EQU   ZPPRINT+00000029    20 BYTE(S)                           29460000
YEAR     EQU   ZPPRINT+00000049    2 BYTE(S)                            29470000
SL       EQU   ZPPRINT+00000051    1 BYTE(S)                            29480000
DATE     EQU   ZPPRINT+00000052    3 BYTE(S)                            29490000
SPCC     EQU   ZPPRINT+00000055    20 BYTE(S)                           29500000
ZPD      EQU   ZPPRINT+00000075    8 BYTE(S)                            29510000
SPCD     EQU   ZPPRINT+00000083    38 BYTE(S)                           29520000
NOZAP    EQU   00000000            121 BYTE(S) ON WORD                  29530000
USA6     EQU   NOZAP+00000000      1 BYTE(S)                            29540000
SPEA     EQU   NOZAP+00000001      25 BYTE(S)                           29550000
ZPMSG1   EQU   NOZAP+00000026      26 BYTE(S)                           29560000
ZPMSG2   EQU   NOZAP+00000052      35 BYTE(S)                           29570000
SPEB     EQU   NOZAP+00000087      34 BYTE(S)                           29580000
IDENTDAT EQU   00000000            51 BYTE(S) ON WORD                   29590000
USNAME   EQU   IDENTDAT+00000000   8 BYTE(S)                            29600000
USDATE   EQU   IDENTDAT+00000008   3 BYTE(S)                            29610000
USSER    EQU   IDENTDAT+00000011   40 BYTE(S)                           29620000
RSIX     EQU   IDENTDAT+00000011   3 BYTE(S)                            29630000
A00000   EQU   IDENTDAT+00000014   37 BYTE(S)                           29640000
IDPRINT  EQU   00000000            121 BYTE(S) ON WORD                  29650000
USA5     EQU   IDPRINT+00000000    1 BYTE(S)                            29660000
SPDA     EQU   IDPRINT+00000001    10 BYTE(S)                           29670000
USNAM    EQU   IDPRINT+00000011    8 BYTE(S)                            29680000
SPDB     EQU   IDPRINT+00000019    20 BYTE(S)                           29690000
USYR     EQU   IDPRINT+00000039    2 BYTE(S)                            29700000
USL      EQU   IDPRINT+00000041    1 BYTE(S)                            29710000
USDY     EQU   IDPRINT+00000042    3 BYTE(S)                            29720000
SPDC     EQU   IDPRINT+00000045    20 BYTE(S)                           29730000
USER     EQU   IDPRINT+00000065    40 BYTE(S)                           29740000
SPDD     EQU   IDPRINT+00000105    16 BYTE(S)                           29750000
USINFO   EQU   00000000            1  BYTE  POINTER                     29760000
INFO     EQU   00000000            1  BYTE  POINTER                     29770000
MAINT    EQU   *                   400 BYTE(S) ON DWORD                 29780000
         DC    C'MAINTENANCE'                                           29790000
         DC    00389C' '                                                29800000
PARMLIST EQU   00000000            73 BYTE(S) ON WORD                   29810000
DCBIN    EQU   PARMLIST+00000000   FULLWORD POINTER                     29820000
DCBOUT   EQU   PARMLIST+00000004   FULLWORD POINTER                     29830000
TITLEAD  EQU   PARMLIST+00000008   FULLWORD POINTER                     29840000
AREAGET  EQU   PARMLIST+00000012   FULLWORD POINTER                     29850000
GMLENGTH EQU   PARMLIST+00000016   FULLWORD INTEGER                     29860000
FLAGS    EQU   PARMLIST+00000020   16 BIT(S)                            29870000
IDRFLAG  EQU   PARMLIST+00000020   1 BIT(S)                             29880000
OVLYFLAG EQU   PARMLIST+00000020   1 BIT(S)                             29890000
NOTEDIT  EQU   PARMLIST+00000020   1 BIT(S)                             29900000
NORLD    EQU   PARMLIST+00000020   1 BIT(S)                             29910000
MDLB     EQU   PARMLIST+00000020   1 BIT(S)                             29920000
A00001   EQU   PARMLIST+00000020   11 BIT(S)                            29930000
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER                     29940000
BUFF     EQU   PARMLIST+00000024   FULLWORD POINTER                     29950000
SCATLEN  EQU   PARMLIST+00000028   FULLWORD INTEGER                     29960000
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)                            29970000
MEMNAME  EQU   PARMLIST+00000036   8 BYTE(S)                            29980000
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)                            29990000
TXTTR    EQU   PARMLIST+00000052   3 BYTE(S)                            30000000
TXTLEN   EQU   PARMLIST+00000055   2 BYTE(S)                            30010000
A00002   EQU   PARMLIST+00000060   FULLWORD INTEGER                     30020000
A00003   EQU   PARMLIST+00000064   4 BYTE(S)                            30030000
A00004   EQU   PARMLIST+00000068   4 BYTE(S)                            30040000
NUMO     EQU   PARMLIST+00000072   1  BYTE  POINTER                     30050000
         ORG   @DATA                                                    30060000
         DS    00000400C                                                30070000
@L       EQU   1                                                        30080000
@DATD    DSECT                                                          30090000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   30100000
PARMPTR  EQU   @DATD+00000072      FULLWORD POINTER                     30110000
CSDEND   EQU   @DATD+00000076      FULLWORD POINTER                     30120000
A        EQU   @DATD+00000080      1  BYTE  POINTER                     30130000
INREC    EQU   @DATD+00000084      FULLWORD POINTER                     30140000
NEXT     EQU   @DATD+00000088      FULLWORD POINTER                     30150000
CSDNXT   EQU   @DATD+00000092      FULLWORD POINTER                     30160000
SRT      EQU   @DATD+00000096      FULLWORD POINTER                     30170000
SRTEND   EQU   @DATD+00000100      FULLWORD POINTER                     30180000
TRNOUT   EQU   @DATD+00000104      FULLWORD INTEGER                     30190000
OUT      EQU   @DATD+00000108      FULLWORD POINTER                     30200000
CSDPT    EQU   @DATD+00000112      FULLWORD INTEGER                     30210000
SORTOUT  EQU   @DATD+00000116      FULLWORD INTEGER                     30220000
SRTPT    EQU   @DATD+00000120      FULLWORD INTEGER                     30230000
TRN      EQU   @DATD+00000124      FULLWORD POINTER                     30240000
TTRN     EQU   @DATD+00000128      FULLWORD INTEGER                     30250000
COUNTER  EQU   @DATD+00000132      1  BYTE  POINTER                     30260000
NUMBS    EQU   @DATD+00000133      1  BYTE  POINTER                     30270000
SWITCH   EQU   @DATD+00000134      8 BIT(S) ON BYTE                     30280000
ESDNO    EQU   @DATD+00000136      HALFWORD INTEGER                     30290000
ESDCOUNT EQU   @DATD+00000138      HALFWORD INTEGER                     30300000
BLANKS   EQU   @DATD+00000140      1 BYTE(S)                            30310000
LL       EQU   @DATD+00000142      HALFWORD INTEGER                     30320000
READLIST EQU   @DATD+00000144      30 BYTE(S) ON WORD                   30330000
BYTES    EQU   @DATD+00000174      1  BYTE  POINTER                     30340000
FLG1     EQU   @DATD+00000175      8 BIT(S) ON BYTE                     30350000
PG       EQU   @DATD+00000176      FULLWORD INTEGER                     30360000
PGCNT    EQU   @DATD+00000180      HALFWORD INTEGER                     30370000
DBLW     EQU   @DATD+00000184      9 BYTE(S) ON DWORD                   30380000
WRD1     EQU   DBLW+00000000       FULLWORD INTEGER                     30390000
HWRD1    EQU   DBLW+00000000       2 BYTE(S)                            30400000
SIXBYT   EQU   DBLW+00000002       6 BYTE(S)                            30410000
HWRD2    EQU   DBLW+00000002       2 BYTE(S)                            30420000
WRD2     EQU   DBLW+00000004       FULLWORD INTEGER                     30430000
BYTE2    EQU   DBLW+00000004       2 BYTE(S)                            30440000
BYTE2A   EQU   DBLW+00000006       2 BYTE(S)                            30450000
DUMY     EQU   DBLW+00000008       1 BYTE(S)                            30460000
TBIT     EQU   @DATD+00000193      8 BIT(S) ON BYTE                     30470000
TYP      EQU   @DATD+00000194      1 BIT(S) ON BYTE                     30480000
SW1      EQU   @DATD+00000195      2 BIT(S) ON BYTE                     30490000
POINT    EQU   @DATD+00000196      FULLWORD POINTER                     30500000
ZAPSORT  EQU   @DATD+00000200      19 BYTE(S)                           30510000
SORTAREA EQU   @DATD+00000220      19 BYTE(S) ON WORD                   30520000
CSECTNM  EQU   SORTAREA+00000000   8 BYTE(S)                            30530000
ZPSPACE  EQU   SORTAREA+00000008   11 BYTE(S)                           30540000
UPAK2    EQU   @DATD+00000240      5 BYTE(S) ON WORD                    30550000
UPK1     EQU   UPAK2+00000000      2 BYTE(S)                            30560000
UPK2     EQU   UPAK2+00000002      2 BYTE(S)                            30570000
GARB     EQU   UPAK2+00000004      1 BYTE(S)                            30580000
UNPKAREA EQU   @DATD+00000248      5 BYTE(S) ON WORD                    30590000
YRZ      EQU   UNPKAREA+00000000   2 BYTE(S)                            30600000
DYZ      EQU   UNPKAREA+00000002   3 BYTE(S)                            30610000
IDENTAB  EQU   @DATD+00000256      51 BYTE(S) ON WORD                   30620000
NAMUS    EQU   IDENTAB+00000000    8 BYTE(S)                            30630000
RESTAB   EQU   IDENTAB+00000008    43 BYTE(S)                           30640000
IDENSORT EQU   @DATD+00000307      51 BYTE(S)                           30650000
IDSAVE   EQU   @DATD+00000358      16 BIT(S) ON BYTE                    30660000
SAV1     EQU   IDSAVE+00000000     8 BIT(S)                             30670000
SAV2     EQU   IDSAVE+00000001     8 BIT(S)                             30680000
NOTETTR  EQU   @DATD+00000360      4 BYTE(S) ON WORD                    30690000
@SAV002  EQU   @DATD+00000368      72 BYTE(S) ON WORD                   30700000
@SAV003  EQU   @DATD+00000440      72 BYTE(S) ON WORD                   30710000
@SAV004  EQU   @DATD+00000512      72 BYTE(S) ON WORD                   30720000
         DS    00000596C                                                30730000
@TEMPS   DS    0F                                                       30740000
         DS    C                                                        30750000
HMBLKIDR CSECT                                                          30760000
RDLIST   READ  RDECB,SF,MF=L                                            30770000
RDLGTH   EQU   *-RDLIST                                                 30780000
@DATD    DSECT                                                          30790000
@DATEND  EQU   *                                                        30800000
HMBLKIDR CSECT ,                                                        30810000
@9F0     EQU   LK                                                       30820000
@9EF     EQU   LK                                                       30830000
@9EC     EQU   READRT                                                   30840000
@9EB     EQU   @9EA                                                     30850000
@9E5     EQU   READRT                                                   30860000
@9E6     EQU   LKERT                                                    30870000
@9E3     EQU   @9E2                                                     30880000
@9D4     EQU   IDR2                                                     30890000
@9D5     EQU   IDR2                                                     30900000
@9CA     EQU   @9C9                                                     30910000
@9B1     EQU   ERR1                                                     30920000
@9AD     EQU   @9AA                                                     30930000
@9A3     EQU   WRZAP                                                    30940000
@995     EQU   @990                                                     30950000
@98F     EQU   ERR1                                                     30960000
@98B     EQU   @98A                                                     30970000
@97D     EQU   READRT                                                   30980000
@976     EQU   TR2                                                      30990000
@975     EQU   @974                                                     31000000
@971     EQU   @970                                                     31010000
@973     EQU   TR1                                                      31020000
@96B     EQU   @96A                                                     31030000
@966     EQU   TR4                                                      31040000
@967     EQU   @964                                                     31050000
@965     EQU   @964                                                     31060000
@95F     EQU   READRT                                                   31070000
BYMSG    EQU   @EL01                                                    31080000
@958     EQU   NONAME                                                   31090000
@956     EQU   NONAME                                                   31100000
@953     EQU   ERR1                                                     31110000
@948     EQU   RSICH                                                    31120000
@949     EQU   RSICH                                                    31130000
@947     EQU   @946                                                     31140000
@94A     EQU   @946                                                     31150000
@943     EQU   IDS5                                                     31160000
@93D     EQU   @93C                                                     31170000
@93E     EQU   @93C                                                     31180000
@933     EQU   @932                                                     31190000
@9E4     EQU   @9E3                                                     31200000
@96C     EQU   @96B                                                     31210000
         END   HMBLKIDR,(C'PL/S',1400,76175)                            31220000
./  ADD  SSI=32760247,NAME=HMBLKLDM
         TITLE 'LOAD MODULE LISTER - HMBLKLDM'                          00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
HMBLKLDM CSECT ,                                                  0001  00040000
         BC    15,14(0,@F)                                              00050000
         DC    C'Â—HMBLKLDM'                                       0001  00060000
         STM   @E,@C,12(@D)                                       0001  00070000
         BALR  @B,0                                               0001  00080000
@PSTART  DS    0H                                                 0001  00090000
         USING @PSTART+00000,@B                                   0001  00100000
         L     @0,@SIZ001                                         0001  00110000
         GETMAIN  R,LV=(0)                                        0001  00120000
         LR    @C,@1                                              0001  00130000
         USING @DATD+00000,@C                                     0001  00140000
         LM    @0,@1,20(@D)                                       0001  00150000
         XC    @TEMPS(@L),@TEMPS                                  0001  00160000
         ST    @D,@SAV001+4                                       0001  00170000
         LA    @F,@SAV001                                         0001  00180000
         ST    @F,8(0,@D)                                         0001  00190000
         LR    @D,@F                                              0001  00200000
*         PARMS=PARMLST;                /* LOCAL COPY OF PARAMETERS     00210000
*                                          TO AVOID INDIRECT ADDRESSING 00220000
*                                          AND SAVING-RESTORING REG 1   00230000
*                                          AROUND MACRO INSTRUCTIONS    00240000
         MVC   PARMS(57),0(@1)                                    0100  00250000
*         SAVE1=REG1;                   /* SAVE PARM LIST POINTER       00260000
         ST    @1,SAVE1                                           0101  00270000
*         EVCB=LECB;                    /* INITIALIZE DECB              00280000
         MVC   EVCB(20),LECB                                      0102  00290000
*         RECCNT=0;                     /* INIT RECORD NUMBER           00300000
         SR    @F,@F                                              0103  00310000
         STH   @F,RECCNT                                          0103  00320000
*         P=0;                          /* INIT PAGE NUMBER             00330000
         STH   @F,P                                               0104  00340000
*         BIGSEG=0;                     /* INITIALIZE SEGMENT NUMBER    00350000
         MVI   BIGSEG,0                                           0105  00360000
*         SW1='00'X;                    /* INITIALIZE SWITCHES          00370000
         MVI   SW1,X'00'                                          0106  00380000
*         LINE=' ';                     /* BLANK OUT OUTPUT BUFFER      00390000
         MVI   LINE,C' '                                          0107  00400000
         MVC   LINE+1(120),LINE                                   0107  00410000
*         HDLINE=LINE;                  /* BLANK OUT HEADING BUFFER     00420000
         MVC   HDLINE(121),LINE                                   0108  00430000
*         TIT1LINE=LINE;                /* BLANK OUT TITLE BUFFER       00440000
         MVC   TIT1LINE(121),LINE                                 0109  00450000
*         BLANKS=LINE;                  /* BLANK CONVERSION FIELD       00460000
         MVC   DBLW2+8(3),LINE                                    0110  00470000
*         LASTBYT=ADDR(SIGNBYT);        /* ADDR OF LAST BYTE IN CONV    00480000
         LA    @F,DBLW2+7                                         0111  00490000
         ST    @F,LASTBYT                                         0111  00500000
*         ENDADDR=ADDR(LENHEX)+5;       /* ADDR OF LAST BYTE - HEX CONV 00510000
         LA    @F,CESDLIN2+69                                     0112  00520000
         ST    @F,ENDADDR                                         0112  00530000
*         LINECNT=PGEND;                /* INIT LINE COUNT - 55         00540000
         LH    @6,PGEND                                           0113  00550000
*         HCC=SKIP2;                    /* CARRIAGE CNTRL-SKIP 2 LINES  00560000
         MVC   HDLINE(1),SKIP2                                    0114  00570000
*         RECHD=RECHD2;                 /* INITIALIZE HEADING LINE      00580000
         MVC   HDLINE+1(7),RECHD2                                 0115  00590000
*         TYP1=TYP2;                    /* TYPE                         00600000
         MVC   HDLINE+15(4),TYP2                                  0116  00610000
*         HYPH1=HYPH2;                  /* HYPHEN                       00620000
         MVC   HDLINE+23(1),STTAB+7                               0117  00630000
*         SZHD2=SIZEHD;                 /* SIZE                         00640000
         MVC   HDLINE+69(4),SIZEHD                                0118  00650000
*         TCC=NEWPG;                    /* TO SKIP TO A NEW PAGE        00660000
         MVC   TIT1LINE(1),NEWPG                                  0119  00670000
*         MEMB=MEMNAME;                 /* MEMBER NAME                  00680000
         MVC   TIT1LINE+64(8),PARMS+36                            0120  00690000
*         TITLE='LISTING OF LOAD MODULE '; /* TITLE - LOAD MOD LISTING  00700000
         MVC   TIT1LINE+41(23),@C3                                0121  00710000
*         PAGE=PAGE1;                   /* PAGE - HDG                   00720000
         MVC   TIT1LINE+108(4),PAGE1                              0122  00730000
*         IF NOTEDIT='1'B               /* NOT-EDITABLE?              * 00740000
*            THEN NESW='1'B;            /* YES - INIT NE SWITCH       * 00750000
         TM    PARMS+20,B'00100000'                               0123  00760000
         BC    12,@9FF                                            0123  00770000
         OI    SW1,B'00000010'                                    0124  00780000
*         ADDRX=ADDR(LINE);             /* INITIALIZE OUTPUT POINTER    00790000
@9FF     LA    @F,LINE                                            0125  00800000
         ST    @F,ADDRX                                           0125  00810000
*         LABPTR=ADDR(READIN);          /* RETURN ADDR FOR ENDPAGE      00820000
         LA    @4,READIN                                          0126  00830000
*         GOTO PRINT;                   /* GO TO PRINT FIRST HEADING    00840000
         BC    15,PRINT                                           0127  00850000
*                                                                       00860000
* /******************************************************************** 00870000
* /*                  PROCESS                                           00880000
* /******************************************************************** 00890000
*         GEN(READ  LECB,SF,MF=L);      /* LIST FORM OF READ            00900000
         READ  LECB,SF,MF=L                                             00910000
         DS    0H                                                       00920000
* READIN: PTR2=INDCB;                   /* INPUT DCB ADDRESS            00930000
READIN   L     @2,PARMS                                           0129  00940000
*         PTR1=INPTR;                   /* INPUT BUFFER ADDRESS         00950000
         L     @3,PARMS+24                                        0130  00960000
*         GEN(READ  EVCB,SF,(PTR2),(PTR1),'S',MF=E); /* READ INPUT REC. 00970000
         READ  EVCB,SF,(PTR2),(PTR1),'S',MF=E                           00980000
         DS    0H                                                       00990000
*         GEN(CHECK EVCB);              /* CHECK FOR END OF READ OPER   01000000
         CHECK EVCB                                                     01010000
         DS    0H                                                       01020000
*         /* CHECK IF MODULE TO BE LISTED IS NOT-EDITABLE             * 01030000
*         IF NESW='1'B                  /* IS IT NOT-EDITABLE?        * 01040000
*            THEN                                                       01050000
         TM    SW1,B'00000010'                                    0133  01060000
         BC    12,@9FE                                            0133  01070000
*              DO;                      /* YES                        * 01080000
*                GENERATE;                                              01090000
         NOTE  (PTR2)                  GET TTR FROM READ                01100000
         ST    1,NOTETTR               SAVE TTR FROM NOTE               01110000
         DS    0H                                                       01120000
*                NESW='0'B;             /* TURN OFF NOT EDITABLE SW   * 01130000
         NI    SW1,B'11111101'                                    0136  01140000
*              IF NOTETTR(1:3)=TEXTTR   /* DO TTRS MATCH FOR 1ST TEXT * 01150000
*                 THEN                                                  01160000
         CLC   NOTETTR(3),PARMS+52                                0137  01170000
         BC    07,@9FD                                            0137  01180000
*                   DO;                 /* PROCESS 1ST TEXT           * 01190000
*                     COUNTX=TEXTLEN;   /* SET UP 1ST TEXT LENGTH     * 01200000
         MVC   COUNTX(2),PARMS+55                                 0139  01210000
*                     TXTADR=0;         /* STARTING ADDRESS OF TEXT   * 01220000
         SR    @F,@F                                              0140  01230000
         ST    @F,TXTADR                                          0140  01240000
*                     IF NORLD='1'B     /* ARE THERE ANY RLDS ?       * 01250000
*                        THEN EOMSW='1'B; /* INDICATE NO RLDS & EOM   * 01260000
         TM    PARMS+20,B'00010000'                               0141  01270000
         BC    12,@9FC                                            0141  01280000
         OI    SW1,B'00010000'                                    0142  01290000
*                     TXTSW='1'B;       /* TURN ON TEXT SWITCH        * 01300000
@9FC     OI    SW1,B'00100000'                                    0143  01310000
*                     IF OVLYFL='1'B    /* IS IT OVERLAY STRUCTURE?   * 01320000
*                        THEN                                           01330000
         TM    PARMS+20,B'01000000'                               0144  01340000
         BC    12,@9FB                                            0144  01350000
*                          DO;          /* YES                        * 01360000
*                            BIGSEG=SEGRG1;/* SAVE LAST SEG NO IN RGN1* 01370000
         L     @8,PARMS+24         PARMS                          0146  01380000
         MVC   BIGSEG(1),8(@8)                                    0146  01390000
*                            IF SEGRG1<SEGRG2/* RGN2 SEGMENTS?        * 01400000
*                               THEN BIGSEG=SEGRG2;/* SAVE LAST SGMT. * 01410000
         CLC   8(1,@8),10(@8)                                     0147  01420000
         BC    10,@9FA                                            0147  01430000
         MVC   BIGSEG(1),10(@8)                                   0148  01440000
*                            IF SEGRG2<SEGRG3/* RGN3 SEGMENTS?        * 01450000
*                               THEN BIGSEG=SEGRG3;/* SAVE LAST SGMT  * 01460000
@9FA     CLC   10(1,@8),12(@8)                                    0149  01470000
         BC    10,@9F9                                            0149  01480000
         MVC   BIGSEG(1),12(@8)                                   0150  01490000
*                            IF SEGRG3<SEGRG4/*RGN4 SEGMENTS?         * 01500000
*                               THEN BIGSEG=SEGRG4;/* SAVE RGN4 SGMT  * 01510000
@9F9     CLC   12(1,@8),14(@8)                                    0151  01520000
         BC    10,@9F8                                            0151  01530000
         MVC   BIGSEG(1),14(@8)                                   0152  01540000
*                          END;                                         01550000
@9F8     EQU   *                                                  0153  01560000
*                   END;                                                01570000
@9FB     EQU   *                                                  0154  01580000
*              END;                                                     01590000
@9FD     EQU   *                                                  0155  01600000
*         IF TTRSW='1'B                 /* IS IT TTR LIST FOR OVLY SEG? 01610000
*           THEN GOTO TTRLAB;           /* YES-GO TO PROCESS THE LIST   01620000
@9FE     TM    SW1,B'00000100'                                    0156  01630000
         BC    01,TTRLAB                                          0157  01640000
*         RECCNT=RECCNT+1;              /* INCREASE RECORD NUMBER BY 1  01650000
         LA    @F,1                                               0158  01660000
         AH    @F,RECCNT                                          0158  01670000
         STH   @F,RECCNT                                          0158  01680000
*         PTR2=RECCNT;                  /* REC NUMBER INTO REG FOR CONV 01690000
         LR    @2,@F                                              0159  01700000
*         LABPTR2=ADDR(RECNO);          /* RETURN ADDR FOR CONVDEC RTN  01710000
         LA    @5,RECNO                                           0160  01720000
*         GOTO CONVDEC;                 /* TO CONVERT RECORD NUMBER     01730000
         BC    15,CONVDEC                                         0161  01740000
* RECNO:  RECNUM=WKX;                   /* RECORD NUMBER IN DECIMAL     01750000
RECNO    MVC   HDLINE+9(4),0(@2)                                  0162  01760000
*         IF TXTSW='1'B                 /* IS IT TEXT?                  01770000
*           THEN GOTO TEXT1;            /* YES - GO TO PROCESS TEXT     01780000
         TM    SW1,B'00100000'                                    0163  01790000
         BC    01,TEXT1                                           0164  01800000
*         WK3=ID;                       /* RECORD ID FOR CONVERSION     01810000
         L     @8,PARMS+24         PARMS                          0165  01820000
         MVC   DBLW2+4(1),0(@8)                                   0165  01830000
*         GENERATE;                                                     01840000
         UNPK  TYPEID(3),WK3(2)        CONVERT RECORD ID                01850000
         NC    TYPEID(2),ZONEOFF       CLEAR HIGH ORD 4 BITS            01860000
         TR    TYPEID(2),TABLE         TRANSLATE TO PRINTABLE HEX       01870000
         DS    0H                                                       01880000
*         SPAR2=' ';                    /* CLEAR IGNORED BYTE           01890000
         MVI   HDLINE+22,C' '                                     0167  01900000
*         /* IF AT LEAST ONE CONTROL RECORD HAVE BEEN ENCOUNTERED,      01910000
*            DO NOT TEST FOR SYM,CESD,IDR OR SCATTER-TRANSLATION RECORD 01920000
*            BUT GO DIRECTLY TO CHECK FOR RLD OR CONTROL RECORD         01930000
*         IF SKIPSW='1'B                                                01940000
*           THEN GOTO NEXTREC;                                          01950000
         TM    SW1,B'00001000'                                    0168  01960000
         BC    01,NEXTREC                                         0169  01970000
*         IF SCTRSW='1'B                /*MORE THAN ONE SC-TR REC?      01980000
*           THEN                                                        01990000
         TM    SW1,B'10000000'                                    0170  02000000
         BC    12,@9F7                                            0170  02010000
*             DO;                       /* YES -                        02020000
*               SCTRCNT=SCTRCNT-1;      /* DECREASE SC-TR RECORD COUNT  02030000
         LH    @F,SCTRCNT                                         0172  02040000
         BCTR  @F,0                                               0172  02050000
         STH   @F,SCTRCNT                                         0172  02060000
*               IF SCTRCNT=1            /* LAST SC-TR RECORD?           02070000
*                 THEN                                                  02080000
         LA    @F,1                                               0173  02090000
         CH    @F,SCTRCNT                                         0173  02100000
         BC    07,@9F6                                            0173  02110000
*                   DO;                 /* YES - LAST RECORD            02120000
*                     IF ERRORS(4)='0'B /* IF NO ERROR THEN PRINT RTN   02130000
*                                          WILL GO TO PROCESS TABLES    02140000
*                       THEN LABPTR=ADDR(SCTRB);                        02150000
         TM    PARMS+32,B'00010000'                               0175  02160000
         BC    05,@9F5                                            0175  02170000
         LA    @4,SCTRB                                           0176  02180000
         BC    15,@9F4                                            0177  02190000
*                       ELSE SCTRSW='0'B; /* IF ERROR THEN ONLY LAST HD 02200000
*                                            WILL BE PRINTED            02210000
@9F5     NI    SW1,B'01111111'                                    0177  02220000
*                     GOTO SCTRHDG;     /* GO TO PRINT SC-TR HDG        02230000
         BC    15,SCTRHDG                                         0178  02240000
*                   END;                                                02250000
*                 ELSE                  /* NO - MORE RECORDS            02260000
*                   IF ERRORS(4)='0'B   /* ERROR?                       02270000
*                     THEN GOTO SCTRA;  /* NO - GO TO MOVE SC-TR DATA   02280000
@9F6     TM    PARMS+32,B'00010000'                               0180  02290000
*                                          TO WORK AREA                 02300000
         BC    08,SCTRA                                           0181  02310000
*                     ELSE GOTO SCTRHDG; /* YES - GO TO PRINT HDG       02320000
         BC    15,SCTRHDG                                         0182  02330000
*             END;                      /* END OF TEST FOR SC-TR        02340000
@9F3     EQU   *                                                  0183  02350000
*                                                                       02360000
* /******************************************************************** 02370000
* /*  THIS SECTION OF CODE PROCESSES SYM AND IDR RECORDS DATA.          02380000
* /*  IF MODULE IS IN OVERLAY STRUCTURE THE TTR LIST FOR OVERLAY        02390000
* /*  SEGMENTS IS PRINTED BY THIS CODE ALSO.                            02400000
* /******************************************************************** 02410000
*         IF ID=SYM                     /* IS IT SYM RECORD?            02420000
*           THEN                                                        02430000
@9F7     L     @8,PARMS+24         PARMS                          0184  02440000
         CLC   0(1,@8),SYM                                        0184  02450000
         BC    07,@9F2                                            0184  02460000
*             DO;                       /* YES -                        02470000
*               PTR1=PTR1+4;            /* POINT TO SYM RECORD DATA     02480000
         LA    @3,4(0,@3)                                         0186  02490000
*               COUNTX=COUNT;           /* SYM RECORD DATA COUNT        02500000
         MVC   COUNTX(2),2(@8)                                    0187  02510000
*               TP2=SYMHD;              /* SYM RECORD HEADING           02520000
         MVC   HDLINE+25(3),SYMHD                                 0188  02530000
         MVI   HDLINE+28,C' '                                     0188  02540000
         MVC   HDLINE+29(3),HDLINE+28                             0188  02550000
*               WK3=SYMSUBT;            /* SYM REC SUBTYPE FOR CONV     02560000
         MVC   DBLW2+4(1),1(@8)                                   0189  02570000
* IDRLAB:       GENERATE;               /* CONVERTING SUBTYPE ID        02580000
IDRLAB   EQU   *                                                  0190  02590000
         UNPK  SUBTYPID(3),WK3(2)      RESULT DIRECTLY INTO THE BUFFER  02600000
         NC    SUBTYPID(2),ZONEOFF     CLEAR HIGH ORDER 4 BITS          02610000
         TR    SUBTYPID(2),TABLE       TRANSLATE TO PRINTABLE CHAR      02620000
         DS    0H                                                       02630000
*               SUBTYPID(3)=' ';        /* CLEAR LAST BYTE              02640000
         MVI   HDLINE+42,C' '                                     0191  02650000
*               TP3=SYMSHD;             /* SYM REC SUBTYPE HEADING      02660000
         MVC   HDLINE+32(7),SYMSHD                                0192  02670000
*               DATAHD1=DATAHD2;        /* FORMATTING OUTPUT LINE       02680000
         MVC   HDLINE+64(4),DATAHD2                               0193  02690000
*               PTR2=COUNTX;            /* IDR/SYM DATA COUNT FOR CONV  02700000
         LH    @2,COUNTX                                          0194  02710000
*               LABPTR2=ADDR(SYMLAB1);  /* RETURN ADDR FROM CONVERSION  02720000
         LA    @5,SYMLAB1                                         0195  02730000
*               GOTO CONVDEC;           /* TO CONV SYM DATA COUNT       02740000
         BC    15,CONVDEC                                         0196  02750000
* SYMLAB1:      SZ2=WKX;                /* CONVERTED NUMBER             02760000
SYMLAB1  MVC   HDLINE+74(4),0(@2)                                 0197  02770000
*               LABPTR2=ADDR(READIN);   /* RETURN ADDR FOR CONV RTN     02780000
         LA    @5,READIN                                          0198  02790000
*               ADDRX=ADDR(HDLINE);     /* POINT TO HEADING LINE        02800000
         LA    @F,HDLINE                                          0199  02810000
         ST    @F,ADDRX                                           0199  02820000
*               LABPTR=ADDR(TTRLAB);    /* RETURN ADDR FROM PRINT RTN   02830000
         LA    @4,TTRLAB                                          0200  02840000
*               IF LINECNT>49           /* DO NOT START NEW RECORD HDG  02850000
*                                          AT THE BOTTOM OF THE PAGE    02860000
*                 THEN LINECNT=PGEND;                                   02870000
         CH    @6,@D1                                             0201  02880000
         BC    12,@9F1                                            0201  02890000
         LH    @6,PGEND                                           0202  02900000
         BC    15,@9F0                                            0203  02910000
*                 ELSE LINECNT=LINECNT+2; /* INCREASE LINE COUNT        02920000
@9F1     AH    @6,@D2                                             0203  02930000
*               GOTO PRINT;             /* GO TO PRINT SYM/IDR HEADING  02940000
         BC    15,PRINT                                           0204  02950000
* TTRLAB:       CC=SKIP2;               /* CARRIAGE CTL - SKIP 2 LINES  02960000
TTRLAB   MVC   LINE(1),SKIP2                                      0205  02970000
*               LABPTR=ADDR(CONVSYM);   /* INIT LOOP ADDRESS            02980000
         LA    @4,CONVSYM                                         0206  02990000
*               ADDRX=ADDR(LINE);       /* POINT TO OUTPUT BUFFER       03000000
         LA    @F,LINE                                            0207  03010000
         ST    @F,ADDRX                                           0207  03020000
* CONVSYM:      PTR2=ADDR(OLINE);       /* OUTPUT LINE ADDRESS          03030000
CONVSYM  LA    @2,LINE+13                                         0208  03040000
*               DO I=1 TO 10;           /* TEN 4-BYTE ENTRIES PER LINE  03050000
         LA    @7,1                                               0209  03060000
@DO9EF   EQU   *                                                  0209  03070000
*                 GENERATE;             /* CONVERT SYM/IDR DATA         03080000
         UNPK  0(9,PTR2),0(5,PTR1)     CONVERTING DIRECTLY INTO BUFFER  03090000
         NC    0(8,PTR2),ZONEOFF       CLEAR HIGH ORDER 4 BITS          03100000
         TR    0(8,PTR2),TABLE         TRANSLATE TO PRINTABLE CHAR      03110000
         MVI   8(PTR2),BLANK           CLEAR LAST BYTE                  03120000
         DS    0H                                                       03130000
*                 COUNTX=COUNTX-4;      /* DECREASE BYTE COUNT          03140000
         LH    @F,COUNTX                                          0211  03150000
         SH    @F,@D3                                             0211  03160000
         STH   @F,COUNTX                                          0211  03170000
*                 IF COUNTX<=0          /* END OF DATA?                 03180000
*                   THEN                                                03190000
         SR    @F,@F                                              0212  03200000
         CH    @F,COUNTX                                          0212  03210000
         BC    04,@9EB                                            0212  03220000
*                     DO;               /* YES -                        03230000
*                       /* IDR DATA COUNT MAY BE NOT AN EVEN MULT. OF 4 03240000
*                       IF COUNTX<0     /* IS COUNT A NEGATIVE NUMBER?  03250000
*                         THEN                                          03260000
         CH    @F,COUNTX                                          0214  03270000
         BC    12,@9EA                                            0214  03280000
*                           DO;         /* YES -                        03290000
*                             PTR2=PTR2+X*2; /* POINT TO IDR DATA END   03300000
         LH    @E,X                                               0216  03310000
         AR    @E,@E                                              0216  03320000
         AR    @E,@2                                              0216  03330000
         LR    @2,@E                                              0216  03340000
*                             IDREND=' '; /* BLANKS IN PLACE OF GARBAGE 03350000
         MVI   0(@2),C' '                                         0217  03360000
         MVC   1(5,@2),0(@2)                                      0217  03370000
*                           END;                                        03380000
*                       LABPTR=LABPTR2; /* BRANCH AT END OF DATA        03390000
@9EA     LR    @4,@5                                              0219  03400000
*                       GOTO PRINT;     /* GO TO PRINT LAST LINE        03410000
         BC    15,PRINT                                           0220  03420000
*                     END;                                              03430000
*                 PTR1=PTR1+4;          /* ADVANCE INPUT DATA POINTER   03440000
@9EB     LA    @3,4(0,@3)                                         0222  03450000
*                 PTR2=PTR2+10;         /* NEXT ENTRY ON OUTPUT LINE    03460000
         LA    @2,10(0,@2)                                        0223  03470000
*               END;                                                    03480000
*               GOTO PRINT;             /* GO TO PRINT DATA             03490000
         AH    @7,@D4                                             0224  03500000
@DO9EE   CH    @7,@D5                                             0224  03510000
         BC    12,@DO9EF                                          0224  03520000
         BC    15,PRINT                                           0225  03530000
*             END;                      /* END OF SYM,IDR AND TTR LST   03540000
*                                          FOR OVLY SEGMENTS PROCESSING 03550000
*                                                                       03560000
* /******************************************************************** 03570000
* /*                CESD RECORD PROCESSING                              03580000
* /******************************************************************** 03590000
*         IF ID=CESD                    /* CESD RECORD?                 03600000
*           THEN                                                        03610000
@9F2     L     @8,PARMS+24         PARMS                          0227  03620000
         CLC   0(1,@8),CESD                                       0227  03630000
         BC    07,@9E9                                            0227  03640000
*             DO;                       /* YES -                        03650000
*               LABPTR2=ADDR(CESDLAB);  /* RETURN ADDR FOR CONVDEC      03660000
         LA    @5,CESDLAB                                         0229  03670000
*               PTR2=COUNT2;            /* ESD DATA COUNT               03680000
         LH    @2,6(0,@8)                                         0230  03690000
*               GOTO CONVDEC;           /* GO TO CONVERSION RTN         03700000
         BC    15,CONVDEC                                         0231  03710000
* CESDLAB:      SZ2=WKX;                /* CONVTD NUMB IN OUTPUT BUFFER 03720000
CESDLAB  MVC   HDLINE+74(4),0(@2)                                 0232  03730000
*               TP2=CESDTYP;            /* RECORD TYPE - CESD           03740000
         MVC   HDLINE+25(4),CESDTYP                               0233  03750000
         MVI   HDLINE+29,C' '                                     0233  03760000
         MVC   HDLINE+30(2),HDLINE+29                             0233  03770000
*               TP3=ESDIDHD;            /* ESDID HEADING                03780000
         MVC   HDLINE+32(7),ESDIDHD                               0234  03790000
*               DATAHD1=ESDHD;          /* ESD HEADING                  03800000
         MVC   HDLINE+64(4),ESDHD                                 0235  03810000
*               PTR2=COUNT1;            /* ESDID OF FIRST ESD ITEM      03820000
         L     @8,PARMS+24         PARMS                          0236  03830000
         LH    @2,4(0,@8)                                         0236  03840000
*               LABPTR2=ADDR(CESDL1);   /* RETURN ADDR FOR CONVDEC      03850000
         LA    @5,CESDL1                                          0237  03860000
*               GOTO CONVDEC;           /* GO TO CONVERSION RTN         03870000
         BC    15,CONVDEC                                         0238  03880000
* CESDL1:       SUBTYPID=WKX;           /* ESDID OF FIRST ESD ITEM      03890000
CESDL1   MVC   HDLINE+40(4),0(@2)                                 0239  03900000
*               IF LINECNT>48           /* DO NOT START NEW RECORD HDG  03910000
*                                          AT THE BOTTOM OF THE PAGE    03920000
*                 THEN LINECNT=PGEND;                                   03930000
         CH    @6,@D6                                             0240  03940000
         BC    12,@9E8                                            0240  03950000
         LH    @6,PGEND                                           0241  03960000
         BC    15,@9E7                                            0242  03970000
*                 ELSE LINECNT=LINECNT+2; /* INCREASE LINE COUNT        03980000
@9E8     AH    @6,@D2                                             0242  03990000
*               ADDRX=ADDR(HDLINE);     /* POINT TO THE HEADING LINE    04000000
@9E7     LA    @F,HDLINE                                          0243  04010000
         ST    @F,ADDRX                                           0243  04020000
*               LABPTR=ADDR(CESDL2);    /* RET ADDR FOR PRINT ROUTINE   04030000
         LA    @4,CESDL2                                          0244  04040000
*               GOTO PRINT;             /* GO TO PRINT CESD HEADING     04050000
         BC    15,PRINT                                           0245  04060000
* CESDL2:       ADDRX=ADDR(LINE);       /* POINT TO OUTPUT BUFFER       04070000
CESDL2   LA    @F,LINE                                            0246  04080000
         ST    @F,ADDRX                                           0246  04090000
*               OLINE(4:74)=CESDLIN1;   /* CESD SUBHEADING INTO BUFFER  04100000
         MVC   LINE+16(71),CESDLIN1                               0247  04110000
*               CC=SKIP2;               /* SKIP 2 LINES - CESD SUBHDG   04120000
         MVC   LINE(1),SKIP2                                      0248  04130000
*               LABPTR=ADDR(CESDL2A);   /* RET ADDR FOR PRINT ROUTINE   04140000
         LA    @4,CESDL2A                                         0249  04150000
*               GOTO PRINT;             /* GO TO PRINT CESD SUBHEADING  04160000
         BC    15,PRINT                                           0250  04170000
* /******************************************************************** 04180000
* /*           CESD RECORD DATA - EACH PASS WILL PRINT 1 LINE           04190000
* /******************************************************************** 04200000
* CESDL2A:      LABPTR=ADDR(CESDL6);    /* RETURN ADDR FOR PRINT RTN    04210000
CESDL2A  LA    @4,CESDL6                                          0251  04220000
*               COUNTX=COUNT2;          /* CESD DATA COUNT              04230000
         L     @8,PARMS+24         PARMS                          0252  04240000
         MVC   COUNTX(2),6(@8)                                    0252  04250000
*               CESDCNT=COUNT1;         /* INIT CESD # TO FIRST ESDID   04260000
         MVC   CESDCNT(2),4(@8)                                   0253  04270000
*               DO I=COUNTX TO 16 BY -16; /* PROCESS 16-BYTE ENTRIES    04280000
         LH    @7,COUNTX                                          0254  04290000
         BC    15,@DO9E5                                          0254  04300000
*                 PTR2=CESDCNT;         /* CESD ITEM COUNT FOR CONV     04310000
@DO9E6   LH    @2,CESDCNT                                         0255  04320000
*                 LABPTR2=ADDR(CESDL3); /* RETURN ADDR FOR CONVDEC      04330000
         LA    @5,CESDL3                                          0256  04340000
*                 GOTO CONVDEC;         /* GO TO CONV CESD ITEM COUNT   04350000
         BC    15,CONVDEC                                         0257  04360000
* CESDL3:         CESDNUM2=WK2;         /* FORMATTING OUTPUT LINE       04370000
CESDL3   MVC   CESDLIN2(4),DBLW2+4                                0258  04380000
*                 CESDCNT=CESDCNT+1;    /* CESD ITEMS COUNT             04390000
         LA    @F,1                                               0259  04400000
         AH    @F,CESDCNT                                         0259  04410000
         STH   @F,CESDCNT                                         0259  04420000
*                 WK1=TPADDR;           /* CESD DATA FOR CONVERSION     04430000
         MVC   DBLW2(4),16(@3)                                    0260  04440000
*                 GENERATE;             /* CONVERT TYPE & ADDRESS FIELD 04450000
         UNPK  DBLW(9),WK1(5)          LAST BYTE WILL BE IGNORED        04460000
         NC    DBLW(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS          04470000
         TR    DBLW(8),TABLE           TRANSLATE TO PRINTABLE CHAR      04480000
         DS    0H                                                       04490000
*                 CESDTYP1=HWRD1;       /* CESD ITEM ID                 04500000
         MVC   CESDLIN2+18(2),DBLW                                0262  04510000
*                 TYPE=TYPE & '0F'X;    /* CLEAR HIGH ORDER 4 BITS      04520000
         NI    16(@3),X'0F'                                       0263  04530000
*                 CESDTYP2=CESDTYPE(TYPE+1); /* CESD ITEM NAME          04540000
         SR    @8,@8                                              0264  04550000
         IC    @8,16(0,@3)                                        0264  04560000
         MH    @8,@D7                                             0264  04570000
         LA    @E,CESDTYPE(@8)                                    0264  04580000
         MVC   CESDLIN2+20(6),0(@E)                               0264  04590000
*                 CSECTADR=SIXBYT;      /* CSECT ADDRESS                04600000
         MVC   CESDLIN2+29(6),DBLW+2                              0265  04610000
*                 SYMB=SYMBOL;          /* EXTERNAL NAME FOR CESD ITEMS 04620000
         MVC   CESDLIN2+8(8),8(@3)                                0266  04630000
*                 IF TYPE=LR            /* LABEL REFERENCE ITEM?        04640000
*                   THEN LNGTH=LNGTH&'00FFFF'X; /* YES-CLEAR FIRST BYTE 04650000
         CLC   16(1,@3),LR                                        0267  04660000
         BC    07,@9E2                                            0267  04670000
*                                                  OF ID/LENGTH FIELD   04680000
         NC    21(3,@3),@X7                                       0268  04690000
*                 IF TYPE=ER | TYPE=WX  /* ER OR WX ITEM?               04700000
*                   THEN                                                04710000
@9E2     CLC   16(1,@3),ER                                        0269  04720000
         BC    08,@9E1                                            0269  04730000
         CLC   16(1,@3),WX                                        0269  04740000
         BC    07,@9E0                                            0269  04750000
*                     DO;               /* YES - NO CONVERSION REQUIRED 04760000
*                       IF LNGTH(1)='06'X /* NEVER CALL ITEM?           04770000
*                         THEN                                          04780000
@9E1     CLI   21(@3),X'06'                                       0271  04790000
         BC    07,@9DF                                            0271  04800000
*                           DO;         /* YES -                        04810000
*                             LENDEC(7:8)='06'; /* DEC ID               04820000
         MVC   CESDLIN2+56(2),@C9                                 0273  04830000
*                             LENHEX(5:6)='06'; /* HEX ID               04840000
         MVC   CESDLIN2+68(2),@C9                                 0274  04850000
*                             NEVCALL=NCMSG; /* NEVER CALL MESSAGE      04860000
         MVC   CESDLIN2+72(10),NCMSG                              0275  04870000
         BC    15,@9DE                                            0277  04880000
*                           END;                                        04890000
*                         ELSE                                          04900000
*                           DO;         /* NOT A NEVER CALL ER          04910000
*                             LENDEC=LNGTH; /* DEC LENGTH - BLANKS      04920000
@9DF     MVC   CESDLIN2+50(3),21(@3)                              0278  04930000
         MVI   CESDLIN2+53,C' '                                   0278  04940000
         MVC   CESDLIN2+54(4),CESDLIN2+53                         0278  04950000
*                             LENHEX=LNGTH; /* HEX LENGTH - BLANKS      04960000
         MVC   CESDLIN2+64(3),21(@3)                              0279  04970000
         MVI   CESDLIN2+67,C' '                                   0279  04980000
         MVC   CESDLIN2+68(2),CESDLIN2+67                         0279  04990000
*                           END;                                        05000000
*                     END;                                              05010000
         BC    15,@9DD                                            0282  05020000
*                   ELSE                /* NO - ITEM NOT ER             05030000
*                     DO;               /* CONVERT LENGTH FIELD         05040000
*                       WK4=LNGTH;      /* LENGTH FIELD TO BE CONVERTED 05050000
@9E0     MVC   DBLW2+5(3),21(@3)                                  0283  05060000
*                       GENERATE;       /* CONV TO PRINTABLE HEX        05070000
         UNPK  LENHEX(7),WK4(4)        LAST BYTE WILL BE INGORED        05080000
         NC    LENHEX(6),ZONEOFF       CLEAR HIGH ORDER 4 BITS          05090000
         TR    LENHEX(6),TABLE         TRANSLATE TO PRINTABLE CHAR      05100000
         MVI   LENHEX+6,BLANK          CLEAR LAST BYTE                  05110000
         DS    0H                                                       05120000
*                       /* BLANK OUT LEADING ZEROS IN HEX LENGTH FIELD  05130000
*                       PTR2=ADDR(LENHEX); /* POINT TO THE FIRST BYTE   05140000
         LA    @2,CESDLIN2+64                                     0285  05150000
* NEXTBYT:              IF BYTE='0'     /* IS IT ZERO?                  05160000
*                         THEN                                          05170000
NEXTBYT  CLI   0(@2),C'0'                                         0286  05180000
         BC    07,@9DC                                            0286  05190000
*                           DO;         /* YES -                        05200000
*                             BYTE=' '; /* BLANK IN PLACE OF ZERO       05210000
         MVI   0(@2),C' '                                         0288  05220000
*                             PTR2=PTR2+1; /* POINT TO THE NEXT BYTE    05230000
         LA    @2,1(0,@2)                                         0289  05240000
*                             IF PTR2<ENDADDR /* LAST BYTE?             05250000
*                               THEN GOTO NEXTBYT; /* NO - CHECK NEXT   05260000
         C     @2,ENDADDR                                         0290  05270000
         BC    04,NEXTBYT                                         0291  05280000
*                           END;                                        05290000
*                       IF OVLYFL='1'B & NOTEDIT='0'B /* OVERLAY &      05300000
*                                         NOT-EDITABLE?               * 05310000
*                         THEN                                          05320000
@9DC     TM    PARMS+20,B'01000000'                               0293  05330000
         BC    12,@9DB                                            0293  05340000
         TM    PARMS+20,B'00100000'                               0293  05350000
         BC    05,@9DA                                            0293  05360000
*                           IF SEGNUM>BIGSEG /* YES-SAVE NUMBER OF SEGM 05370000
*                             THEN BIGSEG=SEGNUM; /*# OF ELEM IN TTRLST 05380000
         CLC   20(1,@3),BIGSEG                                    0294  05390000
         BC    12,@9D9                                            0294  05400000
         MVC   BIGSEG(1),20(@3)                                   0295  05410000
*                       PTR2=SEGNUM;    /* FOR SEGMENT NUMBER CONV      05420000
@9D9     EQU   *                                                  0296  05430000
@9DA     EQU   *                                                  0296  05440000
@9DB     SR    @2,@2                                              0296  05450000
         IC    @2,20(0,@3)                                        0296  05460000
*                       LABPTR2=ADDR(CESDL4); /* RETURN ADDRESS         05470000
         LA    @5,CESDL4                                          0297  05480000
*                       GOTO CONVDEC;   /* TO CONVERT SEG NUMBER TO DEC 05490000
         BC    15,CONVDEC                                         0298  05500000
* CESDL4:               SEGNO=WK4;      /* SEGMENT NUMBER INTO BUFFER   05510000
CESDL4   MVC   CESDLIN2+41(3),DBLW2+5                             0299  05520000
*                       PTR2=LNGTH;     /* FOR CONVERSION               05530000
         MVC   @TEMP3+1(3),21(@3)                                 0300  05540000
         L     @2,@TEMP3                                          0300  05550000
*                       LABPTR2=ADDR(CESDL5); /* RETURN ADDRESS         05560000
         LA    @5,CESDL5                                          0301  05570000
*                       GOTO CONVDEC;   /* TO CONV ROUTINE              05580000
         BC    15,CONVDEC                                         0302  05590000
* CESDL5:               LENDEC=DBLW2;   /* LENGTH IN DECIMAL            05600000
CESDL5   MVC   CESDLIN2+50(8),DBLW2                               0303  05610000
*                     END;                                              05620000
*                 GOTO PRINT;           /* GO TO PRINT CESD LINE        05630000
         BC    15,PRINT                                           0305  05640000
* CESDL6:         PTR1=PTR1+16;         /* POINT TO THE NEXT CESD ITEM  05650000
CESDL6   LA    @3,16(0,@3)                                        0306  05660000
*               END;                    /* END OF ONE CESD LINE         05670000
*               GOTO READIN;            /* GO TO READ NEXT RECORD       05680000
         SH    @7,@D8                                             0307  05690000
@DO9E5   CH    @7,@D8                                             0307  05700000
         BC    10,@DO9E6                                          0307  05710000
         BC    15,READIN                                          0308  05720000
*             END;                      /* END OF CESD REC PROCESSING   05730000
* /******************************************************************** 05740000
* /*               IDR RECORD                                           05750000
* /******************************************************************** 05760000
*         IF ID=IDR                     /* IDR RECORD?                  05770000
*           THEN                                                        05780000
@9E9     L     @8,PARMS+24         PARMS                          0310  05790000
         CLC   0(1,@8),IDR                                        0310  05800000
         BC    07,@9D8                                            0310  05810000
*             DO;                       /* YES -                        05820000
*               WK3=IDRSUB;             /* IDR SUBTYPE FOR CONVERSION   05830000
         MVC   DBLW2+4(1),2(@8)                                   0312  05840000
*               TP2=IDRTYPE;            /* IDR NAME IN HEADING          05850000
         MVC   HDLINE+25(3),IDRTYPE                               0313  05860000
         MVI   HDLINE+28,C' '                                     0313  05870000
         MVC   HDLINE+29(3),HDLINE+28                             0313  05880000
*               COUNTX=IDRCNT-2;        /* IDR RECORD DATA COUNT        05890000
         LH    @F,@D9                                             0314  05900000
         SR    @0,@0                                              0314  05910000
         IC    @0,1(0,@8)                                         0314  05920000
         AR    @F,@0                                              0314  05930000
         STH   @F,COUNTX                                          0314  05940000
*               X=COUNTX//4;            /* REMAINDER - WILL BE USED     05950000
*                                          AT THE END OF IDR DATA PROC. 05960000
         LR    @E,@F                                              0315  05970000
         SRDA  @E,32                                              0315  05980000
         LA    @0,4                                               0315  05990000
         DR    @E,@0                                              0315  06000000
         STH   @E,X                                               0315  06010000
*               PTR1=ADDR(IDRDATA);     /* BEGINNING OF IDR DATA ADDR   06020000
         LA    @3,3(0,@8)                                         0316  06030000
*               GOTO IDRLAB;            /* GO TO PROCESS IDR REC DATA   06040000
         BC    15,IDRLAB                                          0317  06050000
*             END;                                                      06060000
*                                                                       06070000
* /******************************************************************** 06080000
* /*             SCATTER-TRANSLATION RECORD                             06090000
* /******************************************************************** 06100000
*         IF ID=SCTR                    /* SCTR-TRANS?                  06110000
*           THEN                                                        06120000
@9D8     L     @8,PARMS+24         PARMS                          0319  06130000
         CLC   0(1,@8),SCTR                                       0319  06140000
         BC    07,@9D7                                            0319  06150000
*             DO;                       /* YES -                        06160000
*               TYPENAME=STTAB;         /* RECORD TYPE NAME             06170000
         MVC   HDLINE+25(19),STTAB                                0321  06180000
*               DATAHD1=DATAHD2;        /* DATA HEADING                 06190000
         MVC   HDLINE+64(4),DATAHD2                               0322  06200000
*               SCTRCNT=1;              /* INITIALIZE SC-TR RECORD CNT  06210000
         LA    @F,1                                               0323  06220000
         STH   @F,SCTRCNT                                         0323  06230000
*               COUNTX=SCSZ+TRSZ;       /* TOTAL SCATT-TRANS DATA SIZE  06240000
         LH    @F,PARMS+30                                        0324  06250000
         AH    @F,PARMS+28                                        0324  06260000
         STH   @F,COUNTX                                          0324  06270000
*               IF COUNTX<=MAXREC       /* WORK AREA NEEDED?            06280000
*                 THEN LABPTR=ADDR(SCTRB); /* NO - RET ADR FOR PRINT RT 06290000
         LH    @F,MAXREC                                          0325  06300000
         CH    @F,COUNTX                                          0325  06310000
         BC    04,@9D6                                            0325  06320000
*                                             AFTER PRINTING SC-TR HDG  06330000
         LA    @4,SCTRB                                           0326  06340000
         BC    15,@9D5                                            0327  06350000
*                 ELSE                                                  06360000
*                   DO;                 /* YES- MORE THAN ONE SC-TR REC 06370000
*                     LABPTR=ADDR(READIN); /* PRINT WILL GO TO READ NEX 06380000
*                                             REC AFTER PRINTING HDG    06390000
@9D6     LA    @4,READIN                                          0328  06400000
*                     SCTRSW='1'B;      /* MORE THAN ONE SC-TR REC SW   06410000
         OI    SW1,B'10000000'                                    0329  06420000
*                     SCTRCNT=COUNTX/MAXREC; /* NUMBER OF SC-TR RECORDS 06430000
         LH    @E,COUNTX                                          0330  06440000
         SRDA  @E,32                                              0330  06450000
         LH    @0,MAXREC                                          0330  06460000
         DR    @E,@0                                              0330  06470000
         STH   @F,SCTRCNT                                         0330  06480000
*                     X=COUNTX//MAXREC; /* NUMBER OF BYTES IN LAST REC  06490000
         STH   @E,X                                               0331  06500000
*                     /* COMPUTING SIZE OF WORK AREA FOR SCATTER-TRANSL 06510000
*                     IF X=0            /* EXACTLY 1K RECORDS?          06520000
*                       THEN X=COUNTX-MAXREC; /* YES- X NOW HOLDS THE   06530000
         SR    @F,@F                                              0332  06540000
         CH    @F,X                                               0332  06550000
         BC    07,@9D4                                            0332  06560000
*                                                SIZE OF WRK AR NEEDED  06570000
         LH    @F,COUNTX                                          0333  06580000
         SH    @F,MAXREC                                          0333  06590000
         STH   @F,X                                               0333  06600000
         BC    15,@9D3                                            0334  06610000
*                       ELSE            /* NO -                         06620000
*                         DO;           /* X HAS THE SIZE OF LAST REC   06630000
*                           SCTRCNT=SCTRCNT+1; /* NUMBER OF SC-TR REC   06640000
@9D4     LA    @F,1                                               0335  06650000
         AH    @F,SCTRCNT                                         0335  06660000
         STH   @F,SCTRCNT                                         0335  06670000
*                           X=COUNTX-X; /* X NOW HOLDS THE SIZE         06680000
*                                          OF WORK AREA NEEDED          06690000
         LH    @F,COUNTX                                          0336  06700000
         SH    @F,X                                               0336  06710000
         STH   @F,X                                               0336  06720000
*                         END;                                          06730000
*                     IF X>STORLEN      /* WORK AREA BIG ENOUGH?        06740000
*                       THEN                                            06750000
@9D3     L     @F,PARMS+16                                        0338  06760000
         CH    @F,X                                               0338  06770000
         BC    10,@9D2                                            0338  06780000
*                         DO;           /* NO -                         06790000
*                           ERRORS(4)='1'B; /* ERROR-MORE STORAGE REQD  06800000
         OI    PARMS+32,B'00010000'                               0340  06810000
*                           GOTO SCTRHDG; /* GO TO PRINT HEADING        06820000
         BC    15,SCTRHDG                                         0341  06830000
*                         END;                                          06840000
*                     SCTRPTR=MAINADDR+STORLEN; /* END OF WORK AREA ADR 06850000
@9D2     L     @F,PARMS+16                                        0343  06860000
         A     @F,PARMS+12                                        0343  06870000
         ST    @F,SCTRPTR                                         0343  06880000
*                     SCTRPTR=SCTRPTR-4;/* ADJ FUTURE UNPACK   XA03396  06890000
         SH    @F,@D3                                             0344  06900000
         ST    @F,SCTRPTR                                         0344  06910000
*                                                                       06920000
* SCTRA:              SCTRPTR=SCTRPTR-MAXREC; /* POINT TO CURRENT REC   06930000
SCTRA    L     @F,SCTRPTR                                         0345  06940000
         SH    @F,MAXREC                                          0345  06950000
         ST    @F,SCTRPTR                                         0345  06960000
*                                                                       06970000
*                     /* MOVING SCATTER-TRANSLATION DATA TO WORK AREA   06980000
*                     SCTRREC(1:256)=RECORD(5:260);                     06990000
         L     @8,PARMS+24         PARMS                          0346  07000000
         LR    @9,@F                                              0346  07010000
         MVC   0(256,@9),4(@8)                                    0346  07020000
*                     SCTRREC(257:512)=RECORD(261:516);                 07030000
         MVC   256(256,@9),260(@8)                                0347  07040000
*                     SCTRREC(513:768)=RECORD(517:772);                 07050000
         MVC   512(256,@9),516(@8)                                0348  07060000
*                     SCTRREC(769:1020)=RECORD(773:1024);               07070000
         MVC   768(252,@9),772(@8)                                0349  07080000
*                   END;                                                07090000
* SCTRHDG:      PTR2=COUNT;             /* SCATTER DATA SIZE            07100000
@9D5     EQU   *                                                  0351  07110000
SCTRHDG  L     @8,PARMS+24         PARMS                          0351  07120000
         LH    @2,2(0,@8)                                         0351  07130000
*               LABPTR2=ADDR(SCTRL1);   /* RETURN ADDR FOR CONV RTN     07140000
         LA    @5,SCTRL1                                          0352  07150000
*               GOTO CONVDEC;           /* TO CONV RECORD COUNT         07160000
         BC    15,CONVDEC                                         0353  07170000
* SCTRL1:       SZ2=WKX;                /* COUNT IN DECIMAL             07180000
SCTRL1   MVC   HDLINE+74(4),0(@2)                                 0354  07190000
*               IF LINECNT>48           /* DO NOT START NEW RECORD HDG  07200000
*                                          AT THE BOTTOM OF THE PAGE    07210000
*                THEN LINECNT=PGEND;                                    07220000
         CH    @6,@D6                                             0355  07230000
         BC    12,@9D1                                            0355  07240000
         LH    @6,PGEND                                           0356  07250000
         BC    15,@9D0                                            0357  07260000
*                 ELSE LINECNT=LINECNT+2; /* INCREASE LINE COUNT        07270000
@9D1     AH    @6,@D2                                             0357  07280000
*               ADDRX=ADDR(HDLINE);     /* POINT TO HEADING LINE        07290000
@9D0     LA    @F,HDLINE                                          0358  07300000
         ST    @F,ADDRX                                           0358  07310000
*               GOTO PRINT;             /* TO PRINT SCTR-TRANS HEADING  07320000
         BC    15,PRINT                                           0359  07330000
* /******************************************************************** 07340000
* /*             TRANSLATION TABLE PROCESSING                           07350000
* /******************************************************************** 07360000
* SCTRB:        PTR1=PTR1+4;            /* POINT TO SCATTER-TRANSL DATA 07370000
SCTRB    LA    @3,4(0,@3)                                         0360  07380000
*               IF SCTRSW='1'B          /* MORE THAN ONE REC?           07390000
*                 THEN ENDADDR=PTR1+COUNT; /* YES-GET END OF BUFF ADDR  07400000
         TM    SW1,B'10000000'                                    0361  07410000
         BC    12,@9CF                                            0361  07420000
         L     @8,PARMS+24         PARMS                          0362  07430000
         LH    @F,2(0,@8)                                         0362  07440000
         AR    @F,@3                                              0362  07450000
         ST    @F,ENDADDR                                         0362  07460000
*               OLIN2=TRTAB;            /* TRANSLATION HEADING          07470000
@9CF     MVC   LINE+52(11),STTAB+8                                0363  07480000
*               OLIN5=TAB;              /* TABLE HEADING                07490000
         MVC   LINE+64(5),TAB                                     0364  07500000
*               CC=SKIP2;               /* SKIP 2 LINES BEFORE HDG      07510000
         MVC   LINE(1),SKIP2                                      0365  07520000
*               ADDRX=ADDR(LINE);       /* POINT TO OUTPUT BUFFER       07530000
         LA    @F,LINE                                            0366  07540000
         ST    @F,ADDRX                                           0366  07550000
*               LABPTR=ADDR(SCTRL3);    /* RET ADDR FOR PRINT ROUTINE   07560000
         LA    @4,SCTRL3                                          0367  07570000
*               GOTO PRINT;             /* GO TO PRINT SCATTER TAB HDG  07580000
         BC    15,PRINT                                           0368  07590000
* SCTRL3:       COUNTX=TRSZ;            /* TRANSLATION TABLE SIZE       07600000
SCTRL3   MVC   COUNTX(2),PARMS+30                                 0369  07610000
*               LABPTR2=ADDR(SCTRL4);   /* RETURN ADDR FOR CONVDEC RTN  07620000
         LA    @5,SCTRL4                                          0370  07630000
*               LABPTR=ADDR(NEXTTR);    /* RETURN ADDR FOR PRINT RTN    07640000
         LA    @4,NEXTTR                                          0371  07650000
* NEXTTR:       DATAPTR=ADDR(OLINE);    /* INITIAL OUTPUT LINE ENTRY    07660000
NEXTTR   LA    @F,LINE+13                                         0372  07670000
         ST    @F,DATAPTR                                         0372  07680000
*               DO I=1 TO 20;           /* 20 ENTRIES PER LINE          07690000
         LA    @7,1                                               0373  07700000
*                 PTR2=TR1;             /* FOR CONVERSION TO DEC        07710000
@DO9CE   LH    @2,0(0,@3)                                         0374  07720000
*                 GOTO CONVDEC;         /* TO CONVERT TR-TAB DATA       07730000
         BC    15,CONVDEC                                         0375  07740000
* SCTRL4:         TR2=WK2;              /* OUTPUT BUFFER - 4 BYTES      07750000
SCTRL4   L     @8,DATAPTR                                         0376  07760000
         MVC   0(4,@8),DBLW2+4                                    0376  07770000
*                 PTR1=PTR1+2;          /* POINT TO NEXT ITEM           07780000
         LA    @3,2(0,@3)                                         0377  07790000
*                 COUNTX=COUNTX-2;      /* TRANSLATION TABLE BYTE COUNT 07800000
         LH    @F,COUNTX                                          0378  07810000
         SH    @F,@D2                                             0378  07820000
         STH   @F,COUNTX                                          0378  07830000
*                 IF COUNTX<=0          /* END OF TRANSLATION TABLE?    07840000
*                   THEN                                                07850000
         SR    @F,@F                                              0379  07860000
         CH    @F,COUNTX                                          0379  07870000
         BC    04,@9CA                                            0379  07880000
*                     DO;               /* YES -                        07890000
*                       LABPTR=ADDR(SCATTER); /* GO TO SCTR PROCESSING  07900000
*                                                AFTER PRINT. LAST LINE 07910000
         LA    @4,SCATTER                                         0381  07920000
*                       COUNTX=SCSZ;    /* SCATTER TABLE SIZE           07930000
         MVC   COUNTX(2),PARMS+28                                 0382  07940000
*                       GOTO PRINT;     /* TO PROCESS LAST LINE         07950000
         BC    15,PRINT                                           0383  07960000
*                     END;                                              07970000
*                 IF SCTRSW='1'B & PTR1=ENDADDR /* ANY DATA IN WK AREA  07980000
*                                                  AND END OF BUFFER?   07990000
*                   THEN                                                08000000
@9CA     TM    SW1,B'10000000'                                    0385  08010000
         BC    12,@9C9                                            0385  08020000
         C     @3,ENDADDR                                         0385  08030000
         BC    07,@9C8                                            0385  08040000
*                     DO;               /* YES -                        08050000
*                       SCTRSW='0'B;    /* BUFFER DATA PROCESSED INDIC. 08060000
         NI    SW1,B'01111111'                                    0387  08070000
*                       PTR1=SCTRPTR;   /* POINT TO WORK AREA           08080000
         L     @3,SCTRPTR                                         0388  08090000
*                     END;                                              08100000
*                 DATAPTR=DATAPTR+5;    /* ADVANCE OUTPUT LINE POINTER  08110000
@9C8     EQU   *                                                  0390  08120000
@9C9     LA    @F,5                                               0390  08130000
         A     @F,DATAPTR                                         0390  08140000
         ST    @F,DATAPTR                                         0390  08150000
*               END;                    /* END OF ONE LINE LOOP         08160000
*               GOTO PRINT;             /* GO PRINT TRASLATION TAB LINE 08170000
         AH    @7,@D4                                             0391  08180000
@DO9CD   CH    @7,@D10                                            0391  08190000
         BC    12,@DO9CE                                          0391  08200000
         BC    15,PRINT                                           0392  08210000
* /******************************************************************** 08220000
* /*               SCATTER TABLE PROCESSING                             08230000
* /******************************************************************** 08240000
* SCATTER:      OLIN3=SCTAB;            /* SCATTER HEADING              08250000
SCATTER  MVC   LINE+55(7),STTAB                                   0393  08260000
*               OLIN4=TAB;              /* TABLE HEADING                08270000
         MVC   LINE+63(5),TAB                                     0394  08280000
*               CC=SKIP2;               /* SKIP 2 LINES BEFORE HEADING  08290000
         MVC   LINE(1),SKIP2                                      0395  08300000
*               IF LINECNT>48           /* DO NOT START SCATTER TABLE   08310000
*                                          AT THE BOTTOM OF THE PAGE    08320000
*                 THEN LINECNT=PGEND;                                   08330000
         CH    @6,@D6                                             0396  08340000
         BC    12,@9C7                                            0396  08350000
         LH    @6,PGEND                                           0397  08360000
*               LABPTR=ADDR(NEXTSC);    /* RET ADDR FROM PRINT ROUTINE  08370000
@9C7     LA    @4,NEXTSC                                          0398  08380000
*               GOTO PRINT;             /* TO PRINT SCATTER TABLE LINE  08390000
         BC    15,PRINT                                           0399  08400000
* NEXTSC:       PTR2=ADDR(OLINE)+4;     /* INITIALIZE OUTPUT POINTER    08410000
NEXTSC   LA    @2,LINE+17                                         0400  08420000
*               DO I=1 TO 8;            /* NUMBER OF ENTRIES PER PAGE   08430000
         LA    @7,1                                               0401  08440000
@DO9C6   EQU   *                                                  0401  08450000
*                 GENERATE;             /* CONVERTING SCATTER TABLE     08460000
         UNPK  DBLW(9),0(5,PTR1)       LAST BYTE WILL BE IGNORED        08470000
         NC    DBLW(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS          08480000
         TR    DBLW(8),TABLE           TRANSLATE TO PRINTABLE CHAR      08490000
         DS    0H                                                       08500000
*                 HIAR=HWRD1;           /* HIERARCHY BYTE               08510000
         MVC   0(2,@2),DBLW                                       0403  08520000
*                 ADR=SIXBYT;           /* ADDRESS                      08530000
         MVC   3(6,@2),DBLW+2                                     0404  08540000
*                 PTR1=PTR1+4;          /* ADVANCE INPUT POINTER        08550000
         LA    @3,4(0,@3)                                         0405  08560000
*                 COUNTX=COUNTX-4;      /* DECREASE SCATT TAB BYTE CNT  08570000
         LH    @F,COUNTX                                          0406  08580000
         SH    @F,@D3                                             0406  08590000
         STH   @F,COUNTX                                          0406  08600000
*                 IF COUNTX<=0          /* END OF SCATTER TABLE?        08610000
*                   THEN                                                08620000
         SR    @F,@F                                              0407  08630000
         CH    @F,COUNTX                                          0407  08640000
         BC    04,@9C2                                            0407  08650000
*                     DO;               /* YES -                        08660000
*                       LABPTR=ADDR(READIN); /* PRINT WILL GO TO READ   08670000
*                                               A NEW RECORD            08680000
         LA    @4,READIN                                          0409  08690000
*                       GOTO PRINT;     /* GO TO PROCESS LAST LINE      08700000
         BC    15,PRINT                                           0410  08710000
*                     END;                                              08720000
*                 IF SCTRSW='1'B & PTR1=ENDADDR /* ANY DATA IN WORK ARE 08730000
*                                                  AND END OF BUFFER?   08740000
*                   THEN                                                08750000
@9C2     TM    SW1,B'10000000'                                    0412  08760000
         BC    12,@9C1                                            0412  08770000
         C     @3,ENDADDR                                         0412  08780000
         BC    07,@9C0                                            0412  08790000
*                     DO;               /* YES -                        08800000
*                       SCTRSW='0'B;    /* BUFFER PROCESSED INDICATOR   08810000
         NI    SW1,B'01111111'                                    0414  08820000
*                       PTR1=SCTRPTR;   /* POINT TO WORK AREA           08830000
         L     @3,SCTRPTR                                         0415  08840000
*                     END;              /* END OF TEST FOR END OF BUFF. 08850000
*                 PTR2=PTR2+12;         /* ADVANCE OUTPUT POINTER       08860000
@9C0     EQU   *                                                  0417  08870000
@9C1     LA    @2,12(0,@2)                                        0417  08880000
*               END;                    /* END OF ONE LINE PROCESSING   08890000
*               GOTO PRINT;             /* TO PRINT SCATTER TABLE LINE  08900000
         AH    @7,@D4                                             0418  08910000
@DO9C5   CH    @7,@D11                                            0418  08920000
         BC    12,@DO9C6                                          0418  08930000
         BC    15,PRINT                                           0419  08940000
*             END;                      /* END OF SCTR-TRANS PROCESSING 08950000
*                                                                       08960000
* /******************************************************************** 08970000
* /*              CONTROL RECORD PROCESSING                             08980000
* /******************************************************************** 08990000
*         SKIPSW='1'B;                  /* SET SWITCH TO BRANCH TO      09000000
*                                          NEXTREC AFTER NEXT READ      09010000
@9D7     OI    SW1,B'00001000'                                    0421  09020000
* NEXTREC:                                                              09030000
*         IF ID(1:4)Â¬='0000'B                                           09040000
*           THEN GOTO INVREC;           /* INVALID LOAD MODULE REC TYPE 09050000
NEXTREC  L     @8,PARMS+24         PARMS                          0422  09060000
         TM    0(@8),B'11110000'                                  0422  09070000
         BC    05,INVREC                                          0423  09080000
*         IF (ID&TEST)=CTRL             /* CONTROL RECORD?              09090000
*           THEN                                                        09100000
         MVC   @CTEMP2(1),TEST                                    0424  09110000
         NC    @CTEMP2(1),0(@8)                                   0424  09120000
         CLC   @CTEMP2(1),CTRL                                    0424  09130000
         BC    07,@9BF                                            0424  09140000
*             DO;                       /* YES -                        09150000
*               IF ID=CTLEOM            /* LAST CONTROL RECORD?         09160000
*                 THEN EOMSW='1'B;      /* YES-SET END OF MODULE SWITCH 09170000
         CLC   0(1,@8),CTLEOM                                     0426  09180000
         BC    07,@9BE                                            0426  09190000
         OI    SW1,B'00010000'                                    0427  09200000
*               TYPENAME=CTLTYPE;       /* CONTROL REC HEADING          09210000
@9BE     MVC   HDLINE+25(8),CTRLDTYP                              0428  09220000
         MVI   HDLINE+33,C' '                                     0428  09230000
         MVC   HDLINE+34(10),HDLINE+33                            0428  09240000
*               SIZE2=' ';              /* CLEAR RLD SIZE FIELD         09250000
         MVI   HDLINE+64,C' '                                     0429  09260000
         MVC   HDLINE+65(13),HDLINE+64                            0429  09270000
* CTRLD1:       CTHD=CTLTYPE;           /* FORMATTING OUTPUT LINE       09280000
CTRLD1   MVC   HDLINE+44(8),CTRLDTYP                              0430  09290000
*               SZHD1=SIZEHD;           /* CTL REC SIZE HEADING         09300000
         MVC   HDLINE+52(4),SIZEHD                                0431  09310000
*               PTR2=COUNT1;            /* TO BE CONVERTED TO DEC       09320000
         L     @8,PARMS+24         PARMS                          0432  09330000
         LH    @2,4(0,@8)                                         0432  09340000
*               LABPTR2=ADDR(CNTRL1);   /* RETURN ADDR FOR CONVDEC      09350000
         LA    @5,CNTRL1                                          0433  09360000
*               GOTO CONVDEC;           /* TO CONVERT REC SIZE          09370000
         BC    15,CONVDEC                                         0434  09380000
* CNTRL1:       SZ1=WKX;                /* SIZE INTO BUFFER             09390000
CNTRL1   MVC   HDLINE+57(4),0(@2)                                 0435  09400000
*               CCWHD1=CCWHD2;          /* CCW HEADING                  09410000
         MVC   HDLINE+82(3),CCWHD2                                0436  09420000
*               DBLW2=CCW;              /* CCW FIELD INTO WORK AREA     09430000
         L     @8,PARMS+24         PARMS                          0437  09440000
         MVC   DBLW2(8),8(@8)                                     0437  09450000
         MVI   DBLW2+8,C' '                                       0437  09460000
         MVC   DBLW2+9(2),DBLW2+8                                 0437  09470000
*               GENERATE;                                               09480000
         UNPK  CCW1(9),WK1(5)          FIRST HALF OF CCW                09490000
         UNPK  CCW2(9),WK2(5)          SECOND HALF OF CCW               09500000
         NC    CCW1(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS          09510000
         NC    CCW2(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS          09520000
         TR    CCW1(8),TABLE           TRANSLATE TO PRINTABLE CHAR      09530000
         TR    CCW2(8),TABLE           TRANSLATE TO PRINTABLE CHAR      09540000
         DS    0H                                                       09550000
*               SPARE4=' ';             /* CLEAR SIGN BYTE              09560000
         MVI   HDLINE+94,C' '                                     0439  09570000
*               SPARE5=' ';             /* CLEAR SIGN BYTE              09580000
         MVI   HDLINE+103,C' '                                    0440  09590000
*               IF CRSW='1'B            /* IS IT CTR-RLD RECORD?        09600000
*                 THEN GOTO CTRLD2;     /* YES-GO PRINT RLD INFO FIRST  09610000
         TM    SW1,B'01000000'                                    0441  09620000
         BC    01,CTRLD2                                          0442  09630000
*               PTR1=PTR1+16;           /* POINT TO CONTROL REC DATA    09640000
         LA    @3,16(0,@3)                                        0443  09650000
*               LABPTR=ADDR(CTRLD3);    /* RETURN ADDR FOR PRINT RTN    09660000
         LA    @4,CTRLD3                                          0444  09670000
*               IF LINECNT>48           /* DO NOT START NEW RECORD HDG  09680000
*                                          AT THE BOTTOM OF THE PAGE    09690000
*                 THEN LINECNT=PGEND;                                   09700000
         CH    @6,@D6                                             0445  09710000
         BC    12,@9BD                                            0445  09720000
         LH    @6,PGEND                                           0446  09730000
         BC    15,@9BC                                            0447  09740000
*                 ELSE LINECNT=LINECNT+1; /* INCREASE LINE COUNT        09750000
@9BD     AH    @6,@D4                                             0447  09760000
*               ADDRX=ADDR(HDLINE);     /* HDG ADDR FOR PRINT RTN       09770000
@9BC     LA    @F,HDLINE                                          0448  09780000
         ST    @F,ADDRX                                           0448  09790000
*               GOTO PRINT;             /* GO PRINT CONTROL HEADING     09800000
         BC    15,PRINT                                           0449  09810000
* CTRLD3:       ADDRX=ADDR(LINE);       /* RESET OUTPUT PTR TO REG LINE 09820000
CTRLD3   LA    @F,LINE                                            0450  09830000
         ST    @F,ADDRX                                           0450  09840000
*               OLINE(6:19)=CTLHD;      /* CONTROL REC SUBHDG TO BUFFER 09850000
         MVC   LINE+18(14),CTLHD                                  0451  09860000
*               IF LINECNT>51           /* DO NOT START NEW REC HEADING 09870000
*                                          AT THE BOTTOM OF THE PAGE    09880000
*                 THEN LINECNT=PGEND;                                   09890000
         CH    @6,@D12                                            0452  09900000
         BC    12,@9BB                                            0452  09910000
         LH    @6,PGEND                                           0453  09920000
         BC    15,@9BA                                            0454  09930000
*                 ELSE LINECNT=LINECNT+1; /* INCREASE LINE COUNT        09940000
@9BB     AH    @6,@D4                                             0454  09950000
*               CC=SKIP2;               /* CARRIAGE CTL - SKIP 2 LINES  09960000
@9BA     MVC   LINE(1),SKIP2                                      0455  09970000
*               LABPTR=ADDR(CTRLD3A);   /* RETURN ADDR FOR PRINT RTN    09980000
         LA    @4,CTRLD3A                                         0456  09990000
*               GOTO PRINT;             /* GO TO PRINT CNTRL REC SUBHDG 10000000
         BC    15,PRINT                                           0457  10010000
* CTRLD3A:      LABPTR2=ADDR(CNTRL2);   /* RETURN ADDR FOR CONVDEC RTN  10020000
CTRLD3A  LA    @5,CNTRL2                                          0458  10030000
*               LABPTR=ADDR(CNTRL3);    /* RETURN ADDR FOR PRINT RTN    10040000
         LA    @4,CNTRL3                                          0459  10050000
*               COUNTX=COUNT1;          /* CONTROL RECORD DATA COUNT    10060000
         L     @8,PARMS+24         PARMS                          0460  10070000
         MVC   COUNTX(2),4(@8)                                    0460  10080000
*               DO I=COUNTX TO 4 BY -4; /* PROCESSING CTL DATA          10090000
         LH    @7,COUNTX                                          0461  10100000
         BC    15,@DO9B8                                          0461  10110000
*                 PTR2=CESDNUM;         /* CESD NUMBER WILL BE IN DEC   10120000
@DO9B9   LH    @2,0(0,@3)                                         0462  10130000
*                 GOTO CONVDEC;         /* GO CONVERT CESD NUMBER       10140000
         BC    15,CONVDEC                                         0463  10150000
* CNTRL2:         CESDNO=WK2;           /* CESD DEC ID INTO BUFFER      10160000
CNTRL2   MVC   CTLINE(4),DBLW2+4                                  0464  10170000
*                 WK5=CSECT;            /* CSECT / TEXT LENGTH WILL BE  10180000
*                                          GIVEN IN HEX                 10190000
         MVC   DBLW2+5(2),2(@3)                                   0465  10200000
*                 GENERATE;                                             10210000
         UNPK  WK1(5),WK5(3)           LAST BYTE WILL BE IGNORED        10220000
         NC    WK1(4),ZONEOFF          CLEAR HIGH ORDER 4 BITS          10230000
         TR    WK1(4),TABLE            TRANSLATE TO PRINTABLE CHAR      10240000
         DS    0H                                                       10250000
*                 LNG=WK1;              /* CSECT/TXT LENGTH INTO BUFFER 10260000
         MVC   CTLINE+9(4),DBLW2                                  0467  10270000
*                 GOTO PRINT;           /* TO PRINT CONTROL REC INFO    10280000
         BC    15,PRINT                                           0468  10290000
* CNTRL3:         PTR1=PTR1+4;          /* ADVANCE INPUT REC POINTER    10300000
CNTRL3   LA    @3,4(0,@3)                                         0469  10310000
*               END;                    /* END OF ONE LINE              10320000
* /******************************************************************** 10330000
* /*              TEXT PROCESSING                                       10340000
* /******************************************************************** 10350000
*               COUNTX=CCWCNT;          /* TEXT RECORD BYTE COUNT       10360000
         SH    @7,@D3                                             0470  10370000
@DO9B8   CH    @7,@D3                                             0470  10380000
         BC    10,@DO9B9                                          0470  10390000
         L     @8,PARMS+24         PARMS                          0471  10400000
         MVC   COUNTX(2),14(@8)                                   0471  10410000
*               TXTADR=ADDR1;           /* INITIAL ADDR OF TEXT/CSECT   10420000
         MVC   TXTADR+1(3),9(@8)                                  0472  10430000
         MVI   TXTADR,X'00'                                       0472  10440000
*               TXTSW='1'B;             /* INDICATE TEXT RECORD         10450000
         OI    SW1,B'00100000'                                    0473  10460000
*               GOTO READIN;            /* GO TO READ TEXT RECORD       10470000
         BC    15,READIN                                          0474  10480000
* TEXT1:        TXTSW='0'B;             /* RESET TEXT INDICATOR         10490000
TEXT1    NI    SW1,B'11011111'                                    0475  10500000
*               LINE=HDLINE;            /* COPY HEADING BUFFER          10510000
         MVC   LINE(121),HDLINE                                   0476  10520000
*               OLINE=' ';              /* CLEAR THIS PART OF THE BUFF. 10530000
         MVI   LINE+13,C' '                                       0477  10540000
         MVC   LINE+14(107),LINE+13                               0477  10550000
*               OLIN2(5:11)=TXTHD;      /* TEXT RECORD HEADING          10560000
         MVC   LINE+56(7),TXTHD                                   0478  10570000
*               IF LINECNT>48           /* DO NOT START NEW REC. HEADIN 10580000
*                                          AT THE BOTTOM OF THE PAGE    10590000
*                 THEN LINECNT=PGEND;                                   10600000
         CH    @6,@D6                                             0479  10610000
         BC    12,@9B5                                            0479  10620000
         LH    @6,PGEND                                           0480  10630000
         BC    15,@9B4                                            0481  10640000
*                 ELSE LINECNT=LINECNT+1; /* INCREASE LINE COUNT        10650000
@9B5     AH    @6,@D4                                             0481  10660000
*               LABPTR=ADDR(CONVTXT);   /* INITIALIZE LOOP ADDRESS      10670000
@9B4     LA    @4,CONVTXT                                         0482  10680000
*               GOTO PRINT;             /* GO TO PRINT TEXT REC HEADING 10690000
         BC    15,PRINT                                           0483  10700000
* CONVTXT:      PTR2=ADDR(OLINE);       /* BEGINNING OF NEW LINE        10710000
CONVTXT  LA    @2,LINE+13                                         0484  10720000
*               GENERATE;               /* CONVERTING TEXT ADDRESSES    10730000
         UNPK  0(7,PTR2),TXTADR+1(4)   LAST BYTE WILL BE IGNORED        10740000
         NC    0(6,PTR2),ZONEOFF       CLEAR HIGH ORDER 4 BITS          10750000
         TR    0(6,PTR2),TABLE         TRANSLATE TO PRINTABLE CHAR      10760000
         MVI   6(PTR2),BLANK           CLEAR SIGN BYTE                  10770000
         DS    0H                                                       10780000
*               TXTADR=TXTADR+32;       /* ADDRESS OF TXT ON NEXT LINE  10790000
         LA    @F,32                                              0486  10800000
         A     @F,TXTADR                                          0486  10810000
         ST    @F,TXTADR                                          0486  10820000
*               PTR2=PTR2+10;           /* INIT POSITION ON OUTPUT LINE 10830000
         LA    @2,10(0,@2)                                        0487  10840000
*               DO I=1 TO 8;            /* EIGHT 4-BYTE ENTR PER LINE   10850000
         LA    @7,1                                               0488  10860000
@DO9B3   EQU   *                                                  0488  10870000
*                 GENERATE;             /* CONVERTING TEXT              10880000
         UNPK  0(9,PTR2),0(5,PTR1)     LAST BYTE WILL BE IGNORED        10890000
         NC    0(8,PTR2),ZONEOFF       CLEAR HIGH ORDER 4 BITS          10900000
         TR    0(8,PTR2),TABLE         TRANSLATE TO PRINTABLE CHAR      10910000
         MVI   8(PTR2),BLANK           CLEAR LAST/IGNORED BYTE          10920000
         DS    0H                                                       10930000
*                 COUNTX=COUNTX-4;      /* KEEP TRACK OF BYTE COUNT     10940000
         LH    @F,COUNTX                                          0490  10950000
         SH    @F,@D3                                             0490  10960000
         STH   @F,COUNTX                                          0490  10970000
*                 IF COUNTX<=0          /* END OF RECORD?               10980000
*                   THEN                                                10990000
         SR    @F,@F                                              0491  11000000
         CH    @F,COUNTX                                          0491  11010000
         BC    04,@9AF                                            0491  11020000
*                     DO;               /* YES -                        11030000
*                       IF EOMSW='1'B   /* END OF MODULE?               11040000
*                         THEN LABPTR=ADDR(EOJ); /* YES - PRINT ROUTINE 11050000
         TM    SW1,B'00010000'                                    0493  11060000
         BC    12,@9AE                                            0493  11070000
*                                                 WILL GO TO END OF JOB 11080000
         LA    @4,EOJ                                             0494  11090000
         BC    15,@9AD                                            0495  11100000
*                         ELSE LABPTR=ADDR(READIN); /* NO -PRINT ROUTIN 11110000
*                                             WILL GO TO READ NEXT REC  11120000
@9AE     LA    @4,READIN                                          0495  11130000
*                       GOTO PRINT;     /* GO PRINT LAST LINE OF TEXT   11140000
         BC    15,PRINT                                           0496  11150000
*                     END;              /* END TEST FOR END OF RECORD   11160000
*                 IF I=4                /*                              11170000
*                   THEN PTR2=PTR2+12;  /* DIVIDE TEXT INTO TWO BLOCKS  11180000
@9AF     CH    @7,@D3                                             0498  11190000
         BC    07,@9AC                                            0498  11200000
         LA    @2,12(0,@2)                                        0499  11210000
         BC    15,@9AB                                            0500  11220000
*                   ELSE PTR2=PTR2+9;   /* ONE BLANK BETWEEN 4-BYTE TXT 11230000
@9AC     LA    @2,9(0,@2)                                         0500  11240000
*                 PTR1=PTR1+4;          /* ADVANCE INPUT POINTER        11250000
@9AB     LA    @3,4(0,@3)                                         0501  11260000
*               END;                    /* END OF LINE                  11270000
*               GOTO PRINT;             /* GO TO PRINT TEXT LINE        11280000
         AH    @7,@D4                                             0502  11290000
@DO9B2   CH    @7,@D11                                            0502  11300000
         BC    12,@DO9B3                                          0502  11310000
         BC    15,PRINT                                           0503  11320000
*             END;                      /* END OF CTL / CTL-RLD PROCESS 11330000
*                                                                       11340000
* /******************************************************************** 11350000
* /*                  RLD RECORD PROCESSING                             11360000
* /******************************************************************** 11370000
*         IF (ID&TEST)=RLD              /* RLD RECORD?                  11380000
*           THEN                                                        11390000
@9BF     MVC   @CTEMP2(1),TEST                                    0505  11400000
         L     @8,PARMS+24         PARMS                          0505  11410000
         NC    @CTEMP2(1),0(@8)                                   0505  11420000
         CLC   @CTEMP2(1),RLD                                     0505  11430000
         BC    07,@9AA                                            0505  11440000
*             DO;                       /* YES -                        11450000
*               TYPENAME=RLDTYPE(2:4);  /* RLD TYPE NAME INTO BUFFER    11460000
         MVC   HDLINE+25(3),CTRLDTYP+10                           0507  11470000
         MVI   HDLINE+28,C' '                                     0507  11480000
         MVC   HDLINE+29(15),HDLINE+28                            0507  11490000
*               SIZE1=' ';              /* CLEAR CONTROL REC SIZE FIELD 11500000
         MVI   HDLINE+44,C' '                                     0508  11510000
         MVC   HDLINE+45(16),HDLINE+44                            0508  11520000
*               OCCW=' ';               /* CLEAR CCW FIELD              11530000
         MVI   HDLINE+82,C' '                                     0509  11540000
         MVC   HDLINE+83(20),HDLINE+82                            0509  11550000
* CTRLD2:       DATAHD1=RLDTYPE;        /* FORMAT OUTPUT LINE           11560000
CTRLD2   MVC   HDLINE+64(4),CTRLDTYP+9                            0510  11570000
*               SZHD2=SIZEHD;           /* SIZE HEADING                 11580000
         MVC   HDLINE+69(4),SIZEHD                                0511  11590000
*               PTR2=COUNT2;            /* TO CONVERT RLD REC SIZE      11600000
         L     @8,PARMS+24         PARMS                          0512  11610000
         LH    @2,6(0,@8)                                         0512  11620000
*               LABPTR2=ADDR(RLDL1);    /* RETURN ADDR FOR CONVDEC RTN  11630000
         LA    @5,RLDL1                                           0513  11640000
*               GOTO CONVDEC;           /* GO CONVERT RLD RECORD SIZE   11650000
         BC    15,CONVDEC                                         0514  11660000
* RLDL1:        SZ2=WKX;                /* SIZE INTO BUFFER             11670000
RLDL1    MVC   HDLINE+74(4),0(@2)                                 0515  11680000
*               LABPTR=ADDR(RLDL2);     /* RETURN ADDR FOR PRINT RTN    11690000
         LA    @4,RLDL2                                           0516  11700000
*               ADDRX=ADDR(HDLINE);     /* BUFFER ADDR FOR PRINT RTN    11710000
         LA    @F,HDLINE                                          0517  11720000
         ST    @F,ADDRX                                           0517  11730000
*               IF LINECNT>48           /* DO NOT START NEW REC. HEADIN 11740000
*                                          AT THE BOTTOM OF THE PAGE    11750000
*                 THEN LINECNT=PGEND;                                   11760000
         CH    @6,@D6                                             0518  11770000
         BC    12,@9A9                                            0518  11780000
         LH    @6,PGEND                                           0519  11790000
         BC    15,@9A8                                            0520  11800000
*                 ELSE LINECNT=LINECNT+2; /* INCREASE LINE COUNT        11810000
@9A9     AH    @6,@D2                                             0520  11820000
*               GOTO PRINT;             /* GO TO PRINT RLD HEADING LINE 11830000
         BC    15,PRINT                                           0521  11840000
* RLDL2:        RPHD=RPTR2;             /* R-POINTER HDG                11850000
RLDL2    MVC   RLDHD1(5),RPTR2                                    0522  11860000
*               PPHD=PPTR2;             /* P-POINTER HDG                11870000
         MVC   RLDHD1+7(5),PPTR2                                  0523  11880000
*               PTR2=ADDR(OLINE)+18;    /* POINT TO FL-ADDR FIELD       11890000
         LA    @2,LINE+31                                         0524  11900000
*               DO I=1 TO 6;            /* 6 FL-ADDR ENTRIES PER LINE   11910000
         LA    @7,1                                               0525  11920000
*                 FLADR1=FLADR2;        /* MOVE FL-ADDR HDG TO BUFFER   11930000
@DO9A7   MVC   0(8,@2),FLADR2                                     0526  11940000
*                PTR2=PTR2+11;         /* POINT TO NEXT ENTRY         * 11950000
         LA    @2,11(0,@2)                                        0527  11960000
*               END;                                                    11970000
*               ADDRX=ADDR(LINE);       /* RESET OUTPUT BUFFER PTR      11980000
         AH    @7,@D4                                             0528  11990000
@DO9A6   CH    @7,@D7                                             0528  12000000
         BC    12,@DO9A7                                          0528  12010000
         LA    @F,LINE                                            0529  12020000
         ST    @F,ADDRX                                           0529  12030000
*               CC=SKIP2;               /* CARRIAGE CNTRL-SKIP 2 LINES  12040000
         MVC   LINE(1),SKIP2                                      0530  12050000
*               LABPTR=ADDR(RLDLIN);    /* RETURN ADDR FROM PRINT RTN   12060000
         LA    @4,RLDLIN                                          0531  12070000
*               COUNTX=COUNT2;          /* RLD DATA COUNT               12080000
         L     @8,PARMS+24         PARMS                          0532  12090000
         MVC   COUNTX(2),6(@8)                                    0532  12100000
*               PTR1=PTR1+16;           /* POINT TO RLD REC DATA        12110000
         LA    @3,16(0,@3)                                        0533  12120000
*               GOTO PRINT;             /* GO TO PRINT RLD REC SUBHDG   12130000
         BC    15,PRINT                                           0534  12140000
* RLDLIN:       PTR2=CESDNUM;           /* R-POINTER FOR CONVERSION     12150000
RLDLIN   LH    @2,0(0,@3)                                         0535  12160000
*               LABPTR2=ADDR(RLDL3);    /* RETURN ADDR FOR CONVDEC      12170000
         LA    @5,RLDL3                                           0536  12180000
*               GOTO CONVDEC;           /* TO CONVERT R-POINTER         12190000
         BC    15,CONVDEC                                         0537  12200000
* RLDL3:        RPTR=WK2;               /* R-POINTER INTO BUFFER        12210000
RLDL3    MVC   RLDLINE(4),DBLW2+4                                 0538  12220000
*               PTR2=CSECT;             /* P-POINTER FOR CONVERSION     12230000
         LH    @2,2(0,@3)                                         0539  12240000
*               LABPTR2=ADDR(RLDL4);    /* RETURN ADDR FOR CONVDEC      12250000
         LA    @5,RLDL4                                           0540  12260000
*               GOTO CONVDEC;           /* TO CONVERT P-POINTER         12270000
         BC    15,CONVDEC                                         0541  12280000
* RLDL4:        PPTR=WK2;               /* P-POINTER INTO BUFFER        12290000
RLDL4    MVC   RLDLINE+7(4),DBLW2+4                               0542  12300000
*               LABPTR=ADDR(RLDL6);     /* INIT LOOP ADDRESS            12310000
         LA    @4,RLDL6                                           0543  12320000
*               COUNTX=COUNTX-4;        /* DECREASE BYTE COUNT          12330000
         LH    @F,COUNTX                                          0544  12340000
         SH    @F,@D3                                             0544  12350000
         STH   @F,COUNTX                                          0544  12360000
* RLDL6:        PTR2=ADDR(OLINE)+18;    /* POINT TO FLAG-ADDR POSITION  12370000
RLDL6    LA    @2,LINE+31                                         0545  12380000
*               DO I=1 TO 6;            /* 6 FL-ADDR ENTRIES PER LINE   12390000
         LA    @7,1                                               0546  12400000
*               PTR1=PTR1+4;            /* POINT TO FLAG-ADDR - INPUT   12410000
@DO9A3   LA    @3,4(0,@3)                                         0547  12420000
*                 GENERATE;             /* CONVERTING FL-ADDR DATA      12430000
         UNPK  DBLW(9),0(5,PTR1)       LAST BYTE WILL BE IGNORED        12440000
         NC    DBLW(8),ZONEOFF         CLEAR HIGH ORDER 4 BITS          12450000
         TR    DBLW(8),TABLE           TRANSLATE TO PRINTABLE CHAR      12460000
         DS    0H                                                       12470000
*                 FL=HWRD1;             /* FORMAT OUTPUT LINE - FLAG    12480000
         MVC   0(2,@2),DBLW                                       0549  12490000
*                 ADDR3=SIXBYT;         /* ADDRESS                      12500000
         MVC   3(6,@2),DBLW+2                                     0550  12510000
*                 COUNTX=COUNTX-4;      /* KEEP TRACK OF BYTE COUNT     12520000
         LH    @F,COUNTX                                          0551  12530000
         SH    @F,@D3                                             0551  12540000
         STH   @F,COUNTX                                          0551  12550000
*                 IF COUNTX<=0          /* END OF RLD DATA?             12560000
*                   THEN                                                12570000
         SR    @F,@F                                              0552  12580000
         CH    @F,COUNTX                                          0552  12590000
         BC    04,@99F                                            0552  12600000
*                     DO;               /* YES -                        12610000
*                       IF ID=RLDEOM    /* LAST RECORD?                 12620000
*                         THEN LABPTR=ADDR(EOJ); /* YES - PRINT ROUTINE 12630000
         L     @8,PARMS+24         PARMS                          0554  12640000
         CLC   0(1,@8),RLDEOM                                     0554  12650000
         BC    07,@99E                                            0554  12660000
*                                                   WILL GO TO END      12670000
         LA    @4,EOJ                                             0555  12680000
         BC    15,@99D                                            0556  12690000
*                         ELSE          /* NO - TEST IF CTL-RLD RECORD  12700000
*                           DO;                                         12710000
*                             /* CONTROL-RLD RECORD BEING PROCESSED?    12720000
*                             IF CRSW='1'B                              12730000
*                               THEN                                    12740000
@99E     TM    SW1,B'01000000'                                    0557  12750000
         BC    12,@99C                                            0557  12760000
*                                 DO;   /* YES -                        12770000
*                                   CRSW='0'B; /* RESET CTRL-RLD SWITCH 12780000
         NI    SW1,B'10111111'                                    0559  12790000
*                                   PTR1=PTR1+4; /* POINT TO CTL DATA   12800000
         LA    @3,4(0,@3)                                         0560  12810000
*                                   LABPTR=ADDR(CTRLD3); /* ADR OF CTRL 12820000
         LA    @4,CTRLD3                                          0561  12830000
         BC    15,@99B                                            0563  12840000
*                                 END;                                  12850000
*                             ELSE LABPTR=ADDR(READIN); /* NO-READ NEXT 12860000
@99C     LA    @4,READIN                                          0563  12870000
*                           END;                                        12880000
*                           GOTO PRINT; /* GO TO PRINT LAST RLD LINE    12890000
         BC    15,PRINT                                           0565  12900000
*                     END;              /* END TEST FOR END OF MODULE   12910000
*                                          OR CTL-RLD RECORD            12920000
*                 /* DIFFERENT R & P POINTER FOR NEXT ITEM?             12930000
*                 IF RLDFLG(8)='0'B                                     12940000
*                   THEN                                                12950000
@99F     TM    0(@3),B'00000001'                                  0567  12960000
         BC    05,@99A                                            0567  12970000
*                     DO;               /* YES -                        12980000
*                        PTR1=PTR1+4;   /* POINT TO R & P POINTER FIELD 12990000
         LA    @3,4(0,@3)                                         0569  13000000
*                        LABPTR=ADDR(RLDLIN); /* PRINT RTN WILL GO TO   13010000
*                                                PROCESS NEXT R-P PTR   13020000
         LA    @4,RLDLIN                                          0570  13030000
*                        GOTO PRINT;    /* GO TO PRINT THIS LINE        13040000
         BC    15,PRINT                                           0571  13050000
*                     END;                                              13060000
*                 PTR2=PTR2+11;         /* OUTPUT LINE POSITION POINTER 13070000
@99A     LA    @2,11(0,@2)                                        0573  13080000
*               END;                    /* END OF ONE LINE LOOP         13090000
*               GOTO PRINT;             /* TO PRINT RLD DATA            13100000
         AH    @7,@D4                                             0574  13110000
@DO9A2   CH    @7,@D7                                             0574  13120000
         BC    12,@DO9A3                                          0574  13130000
         BC    15,PRINT                                           0575  13140000
*             END;                      /* END OF RLD REC PROCESSING    13150000
*                                                                       13160000
* /******************************************************************** 13170000
* /*       CONTROL & RLD RECORD PROCESSING                              13180000
* /******************************************************************** 13190000
*         IF (ID&TEST)=CTRLD            /* CONTROL & RLD RECORD?        13200000
*           THEN                                                        13210000
@9AA     MVC   @CTEMP2(1),TEST                                    0577  13220000
         L     @8,PARMS+24         PARMS                          0577  13230000
         NC    @CTEMP2(1),0(@8)                                   0577  13240000
         CLC   @CTEMP2(1),CTRLD                                   0577  13250000
         BC    07,@999                                            0577  13260000
*             DO;                       /* YES -                        13270000
*               IF ID=CTRLDEOM          /* LAST RECORD?                 13280000
*                 THEN EOMSW='1'B;      /* SET END OF MODULE SWITCH     13290000
         CLC   0(1,@8),CTRLDEOM                                   0579  13300000
         BC    07,@998                                            0579  13310000
         OI    SW1,B'00010000'                                    0580  13320000
*               TYPENAME=CTRLDTYP;      /* CTL & RLD HEADING            13330000
@998     MVC   HDLINE+25(13),CTRLDTYP                             0581  13340000
         MVI   HDLINE+38,C' '                                     0581  13350000
         MVC   HDLINE+39(5),HDLINE+38                             0581  13360000
*               CRSW='1'B;              /* SET CTL & RLD SWITCH         13370000
         OI    SW1,B'01000000'                                    0582  13380000
*               GOTO CTRLD1;            /* TO PROCESS CTL & RLD REC     13390000
         BC    15,CTRLD1                                          0583  13400000
*             END;                                                      13410000
*           ELSE                        /* NO - UNDEFINED RECORD TYPE   13420000
* INVREC:     ERRORS(2)='1'B;           /* SET ERROR BIT                13430000
@999     EQU   *                                                  0585  13440000
INVREC   OI    PARMS+32,B'01000000'                               0585  13450000
*             LINE(1:11)='0*****ERROR'; /* MESSAGE INTO BUFFER          13460000
@997     MVC   LINE(11),@C11                                      0586  13470000
*             GOTO EOJERR;              /* GO TO TERMINATE PROCESSING   13480000
         BC    15,EOJERR                                          0587  13490000
*                                                                       13500000
* /******************************************************************** 13510000
* /*                     PRINT ROUTINE                                  13520000
* /******************************************************************** 13530000
* PRINT:                                                                13540000
*         IF LINECNT>=PGEND             /* IS IT END OF PAGE?           13550000
*           THEN                                                        13560000
PRINT    CH    @6,PGEND                                           0588  13570000
         BC    04,@996                                            0588  13580000
*             DO;                       /* YES -                        13590000
*               LINECNT=2;              /* INITIALIZE LINE COUNT        13600000
         LA    @6,2                                               0590  13610000
*               P=P+1;                  /* INCREASE PAGE NUMBER         13620000
         LA    @F,1                                               0591  13630000
         AH    @F,P                                               0591  13640000
         STH   @F,P                                               0591  13650000
*               PTR2=P;                 /* FOR CONVERSION TO DEC        13660000
         LR    @2,@F                                              0592  13670000
*               GENERATE;               /* CONVERT TO PRINTABLE DECIMAL 13680000
         CVD   PTR2,DBLW               RESULT IN WORK AREA              13690000
         UNPK  PGNUM(4),DBLW+5(3)      DIRECTLY INTO OUTPUT BUFFER      13700000
         OI    PGNUM+3,X'F0'           FIX SIGN BYTE                    13710000
         L     REG1,OUTDCB             GET OUTPUT DCB ADDRESS           13720000
         PUT   (1),TIT1LINE            PRINT PROGRAM NAME               13730000
         L     REG1,OUTDCB             OUTPUT DCB ADDRESS               13740000
         L     REG0,TITADDR            USER SPECIFIED TITLE ADDR        13750000
         PUT   (1)                     PRINT USER SPECIFIED TITLE       13760000
         DS    0H                                                       13770000
*               CC=SKIP2;               /* SKIP EXTRA LINE ON NEW PAGE  13780000
         MVC   LINE(1),SKIP2                                      0594  13790000
*             END;                                                      13800000
*         LINECNT=LINECNT+1;            /* INCREASE LINE COUNT BY 1     13810000
@996     AH    @6,@D4                                             0596  13820000
*         REG0=ADDRX;                   /* ADDRESS OF OUTPUT BUFFER     13830000
         L     @0,ADDRX                                           0597  13840000
*         REG1=OUTDCB;                  /* OUTPUT DCB ADDRESS           13850000
         L     @1,PARMS+4                                         0598  13860000
*         GEN(PUT   (1));               /* PRINT OUTPUT LINE            13870000
         PUT   (1)                                                      13880000
         DS    0H                                                       13890000
*         LINE=' ';                     /* BLANK OUT OUTPUT BUFFER      13900000
         MVI   LINE,C' '                                          0600  13910000
         MVC   LINE+1(120),LINE                                   0600  13920000
*         GOTO LABX;                    /* RETURN                       13930000
         BCR   15,@4                                              0601  13940000
*                                                                       13950000
* /******************************************************************** 13960000
* /*     THIS CODE CONVERTS DATA TO DECIMAL                             13970000
* /*     AND BLANKS OUT LEADING ZEROS                                   13980000
* /******************************************************************** 13990000
* CONVDEC:                              /* CONVERT TO DEC & BLANK ZEROS 14000000
*         GENERATE;                                                     14010000
CONVDEC  EQU   *                                                  0602  14020000
         CVD   PTR2,DBLW               GET DECIMAL NUMBER               14030000
         UNPK  DBLW2(8),WRD2(4)        RESULT INTO WORK AREA            14040000
         DS    0H                                                       14050000
*         SIGNBYT=SIGNBYT | 'F0'X;      /* FIX SIGN BYTE                14060000
         OI    DBLW2+7,X'F0'                                      0603  14070000
*         PTR2=ADDR(DBLW2);             /* POINT TO THE FIRST BYTE      14080000
         LA    @2,DBLW2                                           0604  14090000
* NEXTBYTE:                                                             14100000
*         IF BYTE='0'                   /* IS IT ZERO?                  14110000
*           THEN                                                        14120000
NEXTBYTE CLI   0(@2),C'0'                                         0605  14130000
         BC    07,@995                                            0605  14140000
*             DO;                       /* YES -                        14150000
*               BYTE=' ';               /* BLANK                        14160000
         MVI   0(@2),C' '                                         0607  14170000
*               PTR2=PTR2+1;            /* POINT TO THE NEXT BYTE       14180000
         LA    @2,1(0,@2)                                         0608  14190000
*               IF PTR2 < LASTBYT       /* LAST BYTE?                   14200000
*                 THEN GOTO NEXTBYTE;   /* GO TO CHECK NEXT BYTE        14210000
         C     @2,LASTBYT                                         0609  14220000
         BC    04,NEXTBYTE                                        0610  14230000
*             END;                                                      14240000
*         GOTO LABX2;                   /* RETURN                       14250000
@995     BCR   15,@5                                              0612  14260000
*         GENERATE;                                                     14270000
BLANK    EQU   C' '                    BLANK FOR IMMEDIATE INSTR.       14280000
         DS    0H                                                       14290000
*                                                                       14300000
* /******************************************************************** 14310000
* /*        END OF MODULE - TEST IF OVERLAY                             14320000
* /******************************************************************** 14330000
* EOJ:    IF OVLYFL='1'B                /* MODULE IN OVERLAY?           14340000
*           THEN                                                        14350000
EOJ      TM    PARMS+20,B'01000000'                               0614  14360000
         BC    12,@994                                            0614  14370000
*             DO;                       /* YES -                        14380000
*               COUNTX=BIGSEG*4;        /* GET # OF BYTES IN TTR LIST   14390000
         SR    @F,@F                                              0616  14400000
         IC    @F,BIGSEG                                          0616  14410000
         SLA   @F,2                                               0616  14420000
         STH   @F,COUNTX                                          0616  14430000
*               OLINE(1:29)=SEGLSTHD;   /* TTR LIST HEADING             14440000
         MVC   LINE+13(29),SEGLSTHD                               0617  14450000
*               CC=SKIP2;               /* SKIP 2 LINES - CARR CONTROL  14460000
         MVC   LINE(1),SKIP2                                      0618  14470000
*               IF LINECNT>50           /* DO NOT START AT THE BOTTOM   14480000
*                                          OF THE PAGE                  14490000
*                 THEN LINECNT=PGEND;                                   14500000
         CH    @6,@D13                                            0619  14510000
         BC    12,@993                                            0619  14520000
         LH    @6,PGEND                                           0620  14530000
*               LABPTR=ADDR(READIN);    /* RETURN ADDR FROM PRINT RTN   14540000
@993     LA    @4,READIN                                          0621  14550000
*               TTRSW='1'B;             /* INDICATES TTR PROCESSING     14560000
         OI    SW1,B'00000100'                                    0622  14570000
*               LABPTR2=ADDR(EOJX);     /* RETURN ADDR FROM TTR PROCESS 14580000
         LA    @5,EOJX                                            0623  14590000
*               GOTO PRINT;             /* GO TO PRINT HEADING LINE     14600000
         BC    15,PRINT                                           0624  14610000
*             END;                                                      14620000
*                                                                       14630000
* EOJX:   LINE(1:34)=ENDMSG;            /* END OF LISTING MESSAGE       14640000
@994     EQU   *                                                  0626  14650000
EOJX     MVC   LINE(34),ENDMSG                                    0626  14660000
* EOJERR: REG1=OUTDCB;                  /* OUTPUT DCB ADDRESS           14670000
EOJERR   L     @1,PARMS+4                                         0627  14680000
*         GEN(PUT   (1),LINE);          /* PRINT END OF LISTING MSG     14690000
         PUT   (1),LINE                                                 14700000
         DS    0H                                                       14710000
*         REG1=SAVE1+32;                /* RESTORE PARM LIST POINTER    14720000
*                                          AND POINT TO ERROR BITS      14730000
         LA    @1,32                                              0629  14740000
         A     @1,SAVE1                                           0629  14750000
*         ERRBITS=ERRORS;               /* ERROR BITS SET DURING PROC.  14760000
         MVC   0(4,@1),PARMS+32                                   0630  14770000
*         END;                          /* END OF IMBLKLDM              14780000
@EL01    L     @D,4(0,@D)                                         0631  14790000
         LR    @1,@C                                              0631  14800000
         L     @0,@SIZ001                                         0631  14810000
         FREEMAIN R,LV=(0),A=(1)                                  0631  14820000
         LM    @E,@C,12(@D)                                       0631  14830000
         BCR   15,@E                                              0631  14840000
@DATA1   EQU   *                                                        14850000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           14860000
@1       EQU   01                                                       14870000
@2       EQU   02                                                       14880000
@3       EQU   03                                                       14890000
@4       EQU   04                                                       14900000
@5       EQU   05                                                       14910000
@6       EQU   06                                                       14920000
@7       EQU   07                                                       14930000
@8       EQU   08                                                       14940000
@9       EQU   09                                                       14950000
@A       EQU   10                                                       14960000
@B       EQU   11                                                       14970000
@C       EQU   12                                                       14980000
@D       EQU   13                                                       14990000
@E       EQU   14                                                       15000000
@F       EQU   15                                                       15010000
@D1      DC    H'49'                                                    15020000
@D2      DC    H'2'                                                     15030000
@D3      DC    H'4'                                                     15040000
@D4      DC    H'1'                                                     15050000
@D5      DC    H'10'                                                    15060000
@D6      DC    H'48'                                                    15070000
@D7      DC    H'6'                                                     15080000
@D8      DC    H'16'                                                    15090000
@D9      DC    H'-2'                                                    15100000
@D10     DC    H'20'                                                    15110000
@D11     DC    H'8'                                                     15120000
@D12     DC    H'51'                                                    15130000
@D13     DC    H'50'                                                    15140000
         DS    0F                                                       15150000
@SIZ001  DC    AL1(&SPN)                                                15160000
         DC    AL3(@DATEND-@DATD)                                       15170000
         DS    0F                                                       15180000
@C9      DC    C'06'                                                    15190000
@C3      DC    C'LISTING OF LOAD MODULE '                               15200000
@X7      DC    X'00FFFF'                                                15210000
@C11     DC    C'0*****ERROR'                                           15220000
         DS    0D                                                       15230000
@DATA    EQU   *                                                        15240000
DUMMYPTR EQU   00000000            FULLWORD INTEGER                     15250000
REG0     EQU   00000000            FULLWORD INTEGER REGISTER            15260000
REG1     EQU   00000001            3  BYTE  POINTER REGISTER            15270000
PTR2     EQU   00000002            3  BYTE  POINTER REGISTER            15280000
PTR1     EQU   00000003            3  BYTE  POINTER REGISTER            15290000
LABPTR   EQU   00000004            3  BYTE  POINTER REGISTER            15300000
LABPTR2  EQU   00000005            3  BYTE  POINTER REGISTER            15310000
LINECNT  EQU   00000006            FULLWORD INTEGER REGISTER            15320000
I        EQU   00000007            FULLWORD INTEGER REGISTER            15330000
PARMLST  EQU   00000000            57 BYTE(S)                           15340000
RECORD   EQU   00000000            16 BYTE(S) ON WORD                   15350000
ID       EQU   RECORD+00000000     8 BIT(S)                             15360000
SYMSUBT  EQU   RECORD+00000001     8 BIT(S)                             15370000
COUNT    EQU   RECORD+00000002     HALFWORD INTEGER                     15380000
COUNT1   EQU   RECORD+00000004     HALFWORD INTEGER                     15390000
COUNT2   EQU   RECORD+00000006     HALFWORD INTEGER                     15400000
CCW      EQU   RECORD+00000008     8 BYTE(S)                            15410000
A00004   EQU   RECORD+00000008     8 BIT(S)                             15420000
ADDR1    EQU   RECORD+00000009     3 BYTE(S)                            15430000
A00005   EQU   RECORD+00000012     16 BIT(S)                            15440000
CCWCNT   EQU   RECORD+00000014     2  BYTE  INTEGER                     15450000
CTRLDATA EQU   00000000            4 BYTE(S) ON WORD                    15460000
CESDNUM  EQU   CTRLDATA+00000000   HALFWORD INTEGER                     15470000
CSECT    EQU   CTRLDATA+00000002   HALFWORD INTEGER                     15480000
RLDFLG   EQU   00000000            8 BIT(S) ON BYTE                     15490000
CESDDATA EQU   00000008            16 BYTE(S) ON WORD                   15500000
SYMBOL   EQU   CESDDATA+00000000   8 BYTE(S)                            15510000
TPADDR   EQU   CESDDATA+00000008   4 BYTE(S)                            15520000
TYPE     EQU   CESDDATA+00000008   8 BIT(S)                             15530000
ADDR2    EQU   CESDDATA+00000009   3 BYTE(S)                            15540000
SEGNUM   EQU   CESDDATA+00000012   1 BYTE(S)                            15550000
LNGTH    EQU   CESDDATA+00000013   3 BYTE(S)                            15560000
IDRREC   EQU   00000000            4 BYTE(S) ON WORD                    15570000
IDRID    EQU   IDRREC+00000000     8 BIT(S)                             15580000
IDRCTL   EQU   IDRREC+00000001     2 BYTE(S)                            15590000
IDRCNT   EQU   IDRREC+00000001     8 BIT(S)                             15600000
IDRSUB   EQU   IDRREC+00000002     8 BIT(S)                             15610000
IDRDATA  EQU   IDRREC+00000003     1 BYTE(S)                            15620000
SEGTAB   EQU   00000000            16 BYTE(S) ON WORD                   15630000
A00006   EQU   SEGTAB+00000000     8 BYTE(S)                            15640000
SEGRG1   EQU   SEGTAB+00000008     1 BYTE(S)                            15650000
A00007   EQU   SEGTAB+00000009     1 BYTE(S)                            15660000
SEGRG2   EQU   SEGTAB+00000010     1 BYTE(S)                            15670000
A00008   EQU   SEGTAB+00000011     1 BYTE(S)                            15680000
SEGRG3   EQU   SEGTAB+00000012     1 BYTE(S)                            15690000
A00009   EQU   SEGTAB+00000013     1 BYTE(S)                            15700000
SEGRG4   EQU   SEGTAB+00000014     1 BYTE(S)                            15710000
A00010   EQU   SEGTAB+00000015     1 BYTE(S)                            15720000
CESDLIN1 EQU   *                   71 BYTE(S)                           15730000
         DC    C'CESD#    SYMBOL    TYPE     ADDRESS     SE'            15740000
         DC    C'GNUM   ID/LENGTH(DEC)   (HEX)'                         15750000
CESDTYPE EQU   *                   16*6 BYTE(S)                         15760000
         DC    C'(SD)'                                                  15770000
         DC    00002C' '                                                15780000
         DC    C'*UNDEF'                                                15790000
         DC    C'(ER)'                                                  15800000
         DC    00002C' '                                                15810000
         DC    C'(LR)'                                                  15820000
         DC    00002C' '                                                15830000
         DC    C'(PC)'                                                  15840000
         DC    00002C' '                                                15850000
         DC    C'(CM)'                                                  15860000
         DC    00002C' '                                                15870000
         DC    C'(PR)'                                                  15880000
         DC    00002C' '                                                15890000
         DC    C'(NULL)'                                                15900000
         DC    00002C'*UNDEF'                                           15910000
         DC    C'(WX)'                                                  15920000
         DC    00002C' '                                                15930000
         DC    C'*UNDEF'                                                15940000
         DC    C'(PC)'                                                  15950000
         DC    00002C' '                                                15960000
         DC    00003C'*UNDEF'                                           15970000
CTLHD    EQU   *                   14 BYTE(S)                           15980000
         DC    C'CESD#   LENGTH'                                        15990000
FLADR1   EQU   00000000            8 BYTE(S)                            16000000
RLDLIN2  EQU   00000000            9 BYTE(S) ON WORD                    16010000
FL       EQU   RLDLIN2+00000000    2 BYTE(S)                            16020000
SP12     EQU   RLDLIN2+00000002    1 BYTE(S)                            16030000
ADDR3    EQU   RLDLIN2+00000003    6 BYTE(S)                            16040000
SC1      EQU   00000000            FULLWORD INTEGER                     16050000
SC2      EQU   00000000            9 BYTE(S)                            16060000
HIAR     EQU   SC2+00000000        2 BYTE(S)                            16070000
SC2SP    EQU   SC2+00000002        1 BYTE(S)                            16080000
ADR      EQU   SC2+00000003        6 BYTE(S)                            16090000
TR1      EQU   00000000            HALFWORD INTEGER                     16100000
TR2      EQU   00000000            FULLWORD INTEGER                     16110000
SYMHD    EQU   *                   3 BYTE(S)                            16120000
         DC    C'SYM'                                                   16130000
SYMSHD   EQU   *                   7 BYTE(S)                            16140000
         DC    C'SUBTYPE'                                               16150000
CESDTYP  EQU   *                   4 BYTE(S)                            16160000
         DC    C'CESD'                                                  16170000
ESDIDHD  EQU   *                   7 BYTE(S)                            16180000
         DC    C'  ESDID'                                               16190000
STTAB    EQU   @DATA+00000202      19 BYTE(S)                           16200000
SCTAB    EQU   *                   7 BYTE(S)                            16210000
         DC    C'SCATTER'                                               16220000
HYPH2    EQU   *                   1 BYTE(S)                            16230000
         DC    C'-'                                                     16240000
TRTAB    EQU   *                   11 BYTE(S)                           16250000
         DC    C'TRANSLATION'                                           16260000
TAB      EQU   *                   5 BYTE(S)                            16270000
         DC    C'TABLE'                                                 16280000
CTRLDTYP EQU   @DATA+00000228      13 BYTE(S) ON WORD                   16290000
         ORG   CTRLDTYP+00000000                                        16300000
CTLTYPE  EQU   *                   8 BYTE(S)                            16310000
         DC    C'CONTROL'                                               16320000
         DC    00001C' '                                                16330000
AND      EQU   *                   1 BYTE(S)                            16340000
         DC    C'&&'                                                    16350000
RLDTYPE  EQU   *                   4 BYTE(S)                            16360000
         DC    C' RLD'                                                  16370000
RPTR2    EQU   *                   5 BYTE(S)                            16380000
         DC    C'R-PTR'                                                 16390000
PPTR2    EQU   *                   5 BYTE(S)                            16400000
         DC    C'P-PTR'                                                 16410000
FLADR2   EQU   *                   8 BYTE(S)                            16420000
         DC    C'FL  ADDR'                                              16430000
IDRTYPE  EQU   *                   3 BYTE(S)                            16440000
         DC    C'IDR'                                                   16450000
DATAHD2  EQU   *                   4 BYTE(S)                            16460000
         DC    C'DATA'                                                  16470000
ESDHD    EQU   *                   4 BYTE(S)                            16480000
         DC    C' ESD'                                                  16490000
CCWHD2   EQU   *                   3 BYTE(S)                            16500000
         DC    C'CCW'                                                   16510000
RECHD2   EQU   *                   7 BYTE(S)                            16520000
         DC    C'RECORD#'                                               16530000
TYP2     EQU   *                   4 BYTE(S)                            16540000
         DC    C'TYPE'                                                  16550000
SIZEHD   EQU   *                   4 BYTE(S)                            16560000
         DC    C'SIZE'                                                  16570000
PAGE1    EQU   *                   4 BYTE(S)                            16580000
         DC    C'PAGE'                                                  16590000
ENDMSG   EQU   *                   34 BYTE(S)                           16600000
         DC    C'- ******END OF LOAD MODULE LISTING'                    16610000
TXTHD    EQU   *                   7 BYTE(S)                            16620000
         DC    C'T E X T'                                               16630000
NCMSG    EQU   *                   10 BYTE(S)                           16640000
         DC    C'NEVER CALL'                                            16650000
SEGLSTHD EQU   *                   29 BYTE(S)                           16660000
         DC    C'TTR LIST FOR OVERLAY SEGMENTS'                         16670000
TEST     EQU   *                   1 BYTE(S)                            16680000
         DC    X'03'                                                    16690000
SYM      EQU   *                   1 BYTE(S)                            16700000
         DC    X'40'                                                    16710000
IDR      EQU   *                   1 BYTE(S)                            16720000
         DC    X'80'                                                    16730000
CESD     EQU   *                   1 BYTE(S)                            16740000
         DC    X'20'                                                    16750000
SCTR     EQU   *                   1 BYTE(S)                            16760000
         DC    X'10'                                                    16770000
CTRL     EQU   *                   1 BYTE(S)                            16780000
         DC    X'01'                                                    16790000
RLD      EQU   *                   1 BYTE(S)                            16800000
         DC    X'02'                                                    16810000
CTRLD    EQU   *                   1 BYTE(S)                            16820000
         DC    X'03'                                                    16830000
CTLEOM   EQU   *                   1 BYTE(S)                            16840000
         DC    X'0D'                                                    16850000
RLDEOM   EQU   *                   1 BYTE(S)                            16860000
         DC    X'0E'                                                    16870000
CTRLDEOM EQU   *                   1 BYTE(S)                            16880000
         DC    X'0F'                                                    16890000
TABLE    EQU   *                   16 BYTE(S)                           16900000
         DC    C'0123456789ABCDEF'                                      16910000
ZONEOFF  EQU   *                   8 BYTE(S)                            16920000
         DC    X'0F0F0F0F0F0F0F0F'                                      16930000
WKX      EQU   00000000            4 BYTE(S)                            16940000
IDREND   EQU   00000000            6 BYTE(S)                            16950000
BYTE     EQU   00000000            1 BYTE(S)                            16960000
         ORG   @DATA+00000408                                           16970000
PGEND    EQU   *                   HALFWORD INTEGER                     16980000
         DC    FL2'55'                                                  16990000
SCTRREC  EQU   00000000            1020 BYTE(S)                         17000000
SKIP2    EQU   *                   1 BYTE(S)                            17010000
         DC    C'0'                                                     17020000
NEWPG    EQU   *                   1 BYTE(S)                            17030000
         DC    C'1'                                                     17040000
MAXREC   EQU   *                   HALFWORD INTEGER                     17050000
         DC    FL2'1020'                                                17060000
ER       EQU   *                   8 BIT(S) ON BYTE                     17070000
         DC    X'02'                                                    17080000
LR       EQU   *                   8 BIT(S) ON BYTE                     17090000
         DC    X'03'                                                    17100000
WX       EQU   *                   8 BIT(S) ON BYTE                     17110000
         DC    X'0A'                                                    17120000
ERRBITS  EQU   00000000            32 BIT(S) ON BYTE                    17130000
MAINTAR  EQU   @DATA+00000417      200 BYTE(S)                          17140000
         ORG   @DATA                                                    17150000
         DS    00000617C                                                17160000
@L       EQU   3                                                        17170000
@DATD    DSECT                                                          17180000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   17190000
LASTBYT  EQU   @DATD+00000072      FULLWORD POINTER                     17200000
ADDRX    EQU   @DATD+00000076      FULLWORD POINTER                     17210000
DATAPTR  EQU   @DATD+00000080      FULLWORD POINTER                     17220000
SCTRPTR  EQU   @DATD+00000084      FULLWORD POINTER                     17230000
ENDADDR  EQU   @DATD+00000088      FULLWORD POINTER                     17240000
PARMS    EQU   @DATD+00000092      57 BYTE(S) ON WORD                   17250000
INDCB    EQU   PARMS+00000000      FULLWORD POINTER                     17260000
OUTDCB   EQU   PARMS+00000004      FULLWORD POINTER                     17270000
TITADDR  EQU   PARMS+00000008      FULLWORD POINTER                     17280000
MAINADDR EQU   PARMS+00000012      FULLWORD POINTER                     17290000
STORLEN  EQU   PARMS+00000016      FULLWORD INTEGER                     17300000
CTLFL    EQU   PARMS+00000020      16 BIT(S)                            17310000
A00000   EQU   PARMS+00000020      1 BIT(S)                             17320000
OVLYFL   EQU   PARMS+00000020      1 BIT(S)                             17330000
NOTEDIT  EQU   PARMS+00000020      1 BIT(S)                             17340000
NORLD    EQU   PARMS+00000020      1 BIT(S)                             17350000
A00001   EQU   PARMS+00000020      12 BIT(S)                            17360000
A00002   EQU   PARMS+00000022      2 BYTE(S)                            17370000
INPTR    EQU   PARMS+00000024      FULLWORD POINTER                     17380000
SCSZ     EQU   PARMS+00000028      HALFWORD INTEGER                     17390000
TRSZ     EQU   PARMS+00000030      HALFWORD INTEGER                     17400000
ERRORS   EQU   PARMS+00000032      32 BIT(S)                            17410000
MEMNAME  EQU   PARMS+00000036      8 BYTE(S)                            17420000
A00003   EQU   PARMS+00000044      8 BYTE(S)                            17430000
TEXTTR   EQU   PARMS+00000052      3 BYTE(S)                            17440000
TEXTLEN  EQU   PARMS+00000055      2 BYTE(S)                            17450000
LINE     EQU   @DATD+00000149      121 BYTE(S)                          17460000
CC       EQU   LINE+00000000       1 BYTE(S)                            17470000
OLINSP   EQU   LINE+00000001       12 BYTE(S)                           17480000
OLINE    EQU   LINE+00000013       108 BYTE(S)                          17490000
OLIN1    EQU   LINE+00000013       39 BYTE(S)                           17500000
OLIN2    EQU   LINE+00000052       11 BYTE(S)                           17510000
OLINSP1  EQU   LINE+00000052       3 BYTE(S)                            17520000
OLIN3    EQU   LINE+00000055       7 BYTE(S)                            17530000
OLINSP2  EQU   LINE+00000062       1 BYTE(S)                            17540000
OLIN4    EQU   LINE+00000063       5 BYTE(S)                            17550000
OLINSP3  EQU   LINE+00000063       1 BYTE(S)                            17560000
OLIN5    EQU   LINE+00000064       5 BYTE(S)                            17570000
HDLINE   EQU   @DATD+00000270      121 BYTE(S)                          17580000
HCC      EQU   HDLINE+00000000     1 BYTE(S)                            17590000
RECHD    EQU   HDLINE+00000001     7 BYTE(S)                            17600000
HDSP1    EQU   HDLINE+00000008     1 BYTE(S)                            17610000
RECNUM   EQU   HDLINE+00000009     4 BYTE(S)                            17620000
SPARE1   EQU   HDLINE+00000013     2 BYTE(S)                            17630000
TYP1     EQU   HDLINE+00000015     4 BYTE(S)                            17640000
SPARE1A  EQU   HDLINE+00000019     1 BYTE(S)                            17650000
TYPEID   EQU   HDLINE+00000020     2 BYTE(S)                            17660000
SPAR2    EQU   HDLINE+00000022     1 BYTE(S)                            17670000
HYPH1    EQU   HDLINE+00000023     1 BYTE(S)                            17680000
SPARE1B  EQU   HDLINE+00000024     1 BYTE(S)                            17690000
TYPENAME EQU   HDLINE+00000025     19 BYTE(S)                           17700000
TP1      EQU   HDLINE+00000025     15 BYTE(S)                           17710000
TP2      EQU   HDLINE+00000025     7 BYTE(S)                            17720000
TP3      EQU   HDLINE+00000032     7 BYTE(S)                            17730000
SPAR1A   EQU   HDLINE+00000039     1 BYTE(S)                            17740000
SUBTYPID EQU   HDLINE+00000040     4 BYTE(S)                            17750000
SIZE1    EQU   HDLINE+00000044     17 BYTE(S)                           17760000
CTHD     EQU   HDLINE+00000044     8 BYTE(S)                            17770000
SZHD1    EQU   HDLINE+00000052     4 BYTE(S)                            17780000
SPAR2A   EQU   HDLINE+00000056     1 BYTE(S)                            17790000
SZ1      EQU   HDLINE+00000057     4 BYTE(S)                            17800000
SPARE2   EQU   HDLINE+00000061     3 BYTE(S)                            17810000
SIZE2    EQU   HDLINE+00000064     14 BYTE(S)                           17820000
DATAHD1  EQU   HDLINE+00000064     4 BYTE(S)                            17830000
SPAR2B   EQU   HDLINE+00000068     1 BYTE(S)                            17840000
SZHD2    EQU   HDLINE+00000069     4 BYTE(S)                            17850000
SPARE2A  EQU   HDLINE+00000073     1 BYTE(S)                            17860000
SZ2      EQU   HDLINE+00000074     4 BYTE(S)                            17870000
SPARE3   EQU   HDLINE+00000078     4 BYTE(S)                            17880000
OCCW     EQU   HDLINE+00000082     21 BYTE(S)                           17890000
CCWHD1   EQU   HDLINE+00000082     3 BYTE(S)                            17900000
SPARE3A  EQU   HDLINE+00000085     1 BYTE(S)                            17910000
CCWDATA  EQU   HDLINE+00000086     17 BYTE(S)                           17920000
CCW1     EQU   HDLINE+00000086     8 BYTE(S)                            17930000
SPARE4   EQU   HDLINE+00000094     1 BYTE(S)                            17940000
CCW2     EQU   HDLINE+00000095     8 BYTE(S)                            17950000
SPARE5   EQU   HDLINE+00000103     1 BYTE(S)                            17960000
TIT1LINE EQU   @DATD+00000391      121 BYTE(S)                          17970000
TCC      EQU   TIT1LINE+00000000   1 BYTE(S)                            17980000
TITSP1   EQU   TIT1LINE+00000001   40 BYTE(S)                           17990000
TITLE    EQU   TIT1LINE+00000041   23 BYTE(S)                           18000000
MEMB     EQU   TIT1LINE+00000064   8 BYTE(S)                            18010000
TITSP2   EQU   TIT1LINE+00000072   36 BYTE(S)                           18020000
PAGE     EQU   TIT1LINE+00000108   4 BYTE(S)                            18030000
TITSP3   EQU   TIT1LINE+00000112   1 BYTE(S)                            18040000
PGNUM    EQU   TIT1LINE+00000113   4 BYTE(S)                            18050000
CESDLIN2 EQU   @DATD+00000165      82 BYTE(S) ON WORD                   18060000
CESDNUM2 EQU   CESDLIN2+00000000   4 BYTE(S)                            18070000
SP2      EQU   CESDLIN2+00000004   4 BYTE(S)                            18080000
SYMB     EQU   CESDLIN2+00000008   8 BYTE(S)                            18090000
SP3      EQU   CESDLIN2+00000016   2 BYTE(S)                            18100000
CESDTYP1 EQU   CESDLIN2+00000018   2 BYTE(S)                            18110000
CESDTYP2 EQU   CESDLIN2+00000020   6 BYTE(S)                            18120000
SP4      EQU   CESDLIN2+00000026   3 BYTE(S)                            18130000
CSECTADR EQU   CESDLIN2+00000029   6 BYTE(S)                            18140000
SP5      EQU   CESDLIN2+00000035   6 BYTE(S)                            18150000
SEGNO    EQU   CESDLIN2+00000041   3 BYTE(S)                            18160000
SP6      EQU   CESDLIN2+00000044   6 BYTE(S)                            18170000
LENDEC   EQU   CESDLIN2+00000050   8 BYTE(S)                            18180000
SP7      EQU   CESDLIN2+00000058   6 BYTE(S)                            18190000
LENHEX   EQU   CESDLIN2+00000064   6 BYTE(S)                            18200000
SP9      EQU   CESDLIN2+00000070   2 BYTE(S)                            18210000
NEVCALL  EQU   CESDLIN2+00000072   10 BYTE(S)                           18220000
CTLINE   EQU   @DATD+00000167      13 BYTE(S) ON WORD                   18230000
CESDNO   EQU   CTLINE+00000000     4 BYTE(S)                            18240000
SP8      EQU   CTLINE+00000004     5 BYTE(S)                            18250000
LNG      EQU   CTLINE+00000009     4 BYTE(S)                            18260000
RLDHD1   EQU   @DATD+00000164      12 BYTE(S) ON WORD                   18270000
RPHD     EQU   RLDHD1+00000000     5 BYTE(S)                            18280000
S2       EQU   RLDHD1+00000005     2 BYTE(S)                            18290000
PPHD     EQU   RLDHD1+00000007     5 BYTE(S)                            18300000
RLDLINE  EQU   @DATD+00000165      11 BYTE(S) ON WORD                   18310000
RPTR     EQU   RLDLINE+00000000    4 BYTE(S)                            18320000
SP10     EQU   RLDLINE+00000004    3 BYTE(S)                            18330000
PPTR     EQU   RLDLINE+00000007    4 BYTE(S)                            18340000
EVCB     EQU   @DATD+00000512      20 BYTE(S) ON WORD                   18350000
DBLW2    EQU   @DATD+00000536      11 BYTE(S) ON DWORD                  18360000
WK1      EQU   DBLW2+00000000      FULLWORD INTEGER                     18370000
WK2      EQU   DBLW2+00000004      FULLWORD INTEGER                     18380000
WK3      EQU   DBLW2+00000004      1 BYTE(S)                            18390000
WK4      EQU   DBLW2+00000005      3 BYTE(S)                            18400000
WK5      EQU   DBLW2+00000005      2 BYTE(S)                            18410000
SIGNBYT  EQU   DBLW2+00000007      1 BYTE(S)                            18420000
BLANKS   EQU   DBLW2+00000008      3 BYTE(S)                            18430000
DBLW     EQU   @DATD+00000552      9 BYTE(S) ON DWORD                   18440000
WRD1     EQU   DBLW+00000000       FULLWORD INTEGER                     18450000
HWRD1    EQU   DBLW+00000000       2 BYTE(S)                            18460000
SIXBYT   EQU   DBLW+00000002       6 BYTE(S)                            18470000
HWRD2    EQU   DBLW+00000002       2 BYTE(S)                            18480000
WRD2     EQU   DBLW+00000004       FULLWORD INTEGER                     18490000
BYTE2    EQU   DBLW+00000004       2 BYTE(S)                            18500000
BYTE2A   EQU   DBLW+00000006       2 BYTE(S)                            18510000
DUMMY    EQU   DBLW+00000008       1 BYTE(S)                            18520000
SW1      EQU   @DATD+00000564      1 BYTE(S) ON WORD                    18530000
SCTRSW   EQU   SW1+00000000        1 BIT(S)                             18540000
CRSW     EQU   SW1+00000000        1 BIT(S)                             18550000
TXTSW    EQU   SW1+00000000        1 BIT(S)                             18560000
EOMSW    EQU   SW1+00000000        1 BIT(S)                             18570000
SKIPSW   EQU   SW1+00000000        1 BIT(S)                             18580000
TTRSW    EQU   SW1+00000000        1 BIT(S)                             18590000
NESW     EQU   SW1+00000000        1 BIT(S)                             18600000
A00011   EQU   SW1+00000000        1 BIT(S)                             18610000
CESDCNT  EQU   @DATD+00000566      HALFWORD INTEGER                     18620000
COUNTX   EQU   @DATD+00000568      HALFWORD INTEGER                     18630000
BIGSEG   EQU   @DATD+00000570      1  BYTE  POINTER                     18640000
RECCNT   EQU   @DATD+00000572      HALFWORD INTEGER                     18650000
P        EQU   @DATD+00000574      HALFWORD INTEGER                     18660000
X        EQU   @DATD+00000576      HALFWORD INTEGER                     18670000
SCTRCNT  EQU   @DATD+00000578      HALFWORD INTEGER                     18680000
TXTADR   EQU   @DATD+00000580      FULLWORD INTEGER                     18690000
SAVE1    EQU   @DATD+00000584      FULLWORD INTEGER                     18700000
NOTETTR  EQU   @DATD+00000588      4 BYTE(S) ON WORD                    18710000
         DS    00000724C                                                18720000
@TEMPS   DS    0F                                                       18730000
@TEMP3   DC    F'0'                                                     18740000
@CTEMP2  DS    CL001                                                    18750000
@DATEND  EQU   *                                                        18760000
HMBLKLDM CSECT ,                                                        18770000
@9F4     EQU   SCTRHDG                                                  18780000
@9F0     EQU   PRINT                                                    18790000
@9DD     EQU   PRINT                                                    18800000
@9AD     EQU   PRINT                                                    18810000
@9A8     EQU   PRINT                                                    18820000
@99D     EQU   PRINT                                                    18830000
@99B     EQU   PRINT                                                    18840000
@9DE     EQU   @9DD                                                     18850000
         END    ,(C'PL/S',1400,73276)                                   18860000
./  ADD  SSI=33460822,NAME=HMBLKLPA
         TITLE 'HMBLKLPA  LISTS LINK PACK AREA'                         00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
HMBLKLPA CSECT ,                                                  0001  00040000
         BC    15,14(0,@F)                                              00050000
         DC    C'Â—HMBLKLPA'                                       0001  00060000
         STM   @E,@C,12(@D)                                       0001  00070000
         BALR  @B,0                                               0001  00080000
@PSTART  DS    0H                                                 0001  00090000
         USING @PSTART+00000,@B                                   0001  00100000
         L     @0,@SIZ001                                         0001  00110000
         GETMAIN  R,LV=(0)                                        0001  00120000
         LR    @C,@1                                              0001  00130000
         USING @DATD+00000,@C                                     0001  00140000
         LM    @0,@1,20(@D)                                       0001  00150000
         XC    @TEMPS(@L),@TEMPS                                  0001  00160000
         ST    @D,@SAV001+4                                       0001  00170000
         LA    @F,@SAV001                                         0001  00180000
         ST    @F,8(0,@D)                                         0001  00190000
         LR    @D,@F                                              0001  00200000
*         REG6=REG1;                     /* USE REG 6 AS BASE YM03994 * 00210000
         LR    @6,@1                                              0038  00220000
*         LOCPARM=DCBADR;                /* INITIALIZE LOCAL DCB ADDR * 00230000
         MVC   LOCPARM(4),4(@6)                                   0039  00240000
*         REG4=WKARADR;                  /* POINT TO WORK AREA        * 00250000
         MVC   @TEMP4(4),12(@6)                                   0040  00260000
         L     @4,@TEMP4                                          0040  00270000
*         GEN;                                                          00280000
         LA REG2,CVTPTR                 GET ADDR OF PTR TO CVT          00290000
         L REG2,0(REG2)                 GET ADDR OF CVT                 00300000
         USING CVTMAP,REG2              SET BASE OF CVT MAP     YM2968  00310000
         L REG2,CVTLPDIA                POINT TO LPA DIRECTORY  YM2968  00320000
         DS    0H                                                       00330000
*         FLBUF='00'X;                   /* FILL LEFT BUFFER          * 00340000
         MVI   SWITCHES,X'00'                                     0042  00350000
*         ENTCN=0;                       /* INITIALIZE COUNTER        * 00360000
         SR    @F,@F                                              0043  00370000
         STH   @F,ENTCN                                           0043  00380000
*         ALNUSW='00'X;                  /* INITIALIZE SORT SWITCH    * 00390000
         MVI   SWITCHES+1,X'00'                                   0044  00400000
*         /************************************************************ 00410000
*         /* COUNT AND MOVE ENTRIES                                   * 00420000
*         /************************************************************ 00430000
* LPA06:  IF LPDENAME=LASTN              /* IS THIS LAST ENTRY?       * 00440000
*           THEN                         /* YES                       * 00450000
LPA06    CLC   8(8,@2),LASTN                                      0045  00460000
*             GO TO LPA07;               /* GO TO SORT                * 00470000
         BC    08,LPA07                                           0046  00480000
*           ELSE;                        /* NULL ELSE                 * 00490000
*         ENTCN=ENTCN+1;                 /* INCREMENT LPDE COUNTER    * 00500000
         LA    @F,1                                               0048  00510000
         AH    @F,ENTCN                                           0048  00520000
         STH   @F,ENTCN                                           0048  00530000
*         NAME2=LPDENAME;                /* MOVE MODULE NAME          * 00540000
         MVC   0(8,@4),8(@2)                                      0049  00550000
*         IF LPDEMIN='1'B                /* MINOR ENTRY ?             * 00560000
*           THEN                         /* YES                       * 00570000
         TM    28(@2),B'00000100'                                 0050  00580000
         BC    12,@9FF                                            0050  00590000
*             DO;                                                       00600000
*               LOLEMN=LPDEMJNM;         /* MOVE IN MAJOR LPDE NAME   * 00610000
         MVC   8(8,@4),32(@2)                                     0052  00620000
*               MAMIN='FF'X;             /* SET MINOR ENTRY FLAG      * 00630000
         MVI   19(@4),X'FF'                                       0053  00640000
         BC    15,@9FE                                            0055  00650000
*             END;                                                      00660000
*           ELSE                         /* NO,THIS IS A MAJOR ENTRY  * 00670000
*             DO;                                                       00680000
*               LOCN2=LPDEXTAD;          /* MOVE MODULE ADDRESS       * 00690000
@9FF     MVC   8(4,@4),36(@2)                                     0056  00700000
*               LENG2=LPDEXTLN;          /* MOVE MODULE LENGTH        * 00710000
         MVC   12(4,@4),32(@2)                                    0057  00720000
*               MAMIN='00'X;             /* SET MAJOR ENTRY FLAG      * 00730000
         MVI   19(@4),X'00'                                       0058  00740000
*             END;                                                      00750000
*         EPAD5=LPDENTP;                 /* MOVE ENTRY PT ADDR VS03809* 00760000
@9FE     MVC   16(3,@4),17(@2)                                    0060  00770000
*         REG2=REG2+LENGTH(LPDE);        /* INCREMENT LPDE PTR        * 00780000
         AH    @2,@D1                                             0061  00790000
*         REG4=REG4+LENGTH(CDETAB);      /* INCREMENT SORT ENTRY PTR  * 00800000
         AH    @4,@D2                                             0062  00810000
*         GO TO LPA06;                   /* INCREMENT COUNTER         * 00820000
         BC    15,LPA06                                           0063  00830000
*                                                                       00840000
*         RESPECIFY CDETAB BASED(REG2);  /* CHANGE POINTER            * 00850000
*         /************************************************************ 00860000
*         /* SORT ROUTINE                                             * 00870000
*         /************************************************************ 00880000
* LPA07:  COUNT=ENTCN;                   /* GET COUNT FOR SORT        * 00890000
LPA07    MVC   COUNT(2),ENTCN                                     0065  00900000
*         REG2=WKARADR;                  /* POINT TO WORK AREA        * 00910000
         MVC   @TEMP4(4),12(@6)                                   0066  00920000
         L     @2,@TEMP4                                          0066  00930000
*         IF ALNUSW='00'X                /* ALPHA SORT ?              * 00940000
*           THEN                         /* YES                       * 00950000
         CLI   SWITCHES+1,X'00'                                   0067  00960000
         BC    07,@9FD                                            0067  00970000
*             DO;                                                       00980000
*               X=1;                     /* STARTING SORT COLUMN      * 00990000
         LA    @F,1                                               0069  01000000
         STH   @F,X                                               0069  01010000
*               Z=LENGTH(NAME2);         /* ENDING SORT COLUMN        * 01020000
         LA    @F,8                                               0070  01030000
         STH   @F,Z                                               0070  01040000
         BC    15,@9FC                                            0072  01050000
*             END;                                                      01060000
*           ELSE                         /* NO,NUMERIC SORT           * 01070000
*             DO;                                                       01080000
*               X=17;                    /* STARTING SORT COL YM03994 * 01090000
@9FD     LA    @F,17                                              0073  01100000
         STH   @F,X                                               0073  01110000
*                                        /* (CHANGED BY)      YM05937 * 01120000
*               Z=19;                    /* ENDING SORT COL   YM03994 * 01130000
         LA    @F,19                                              0074  01140000
         STH   @F,Z                                               0074  01150000
*                                        /* (CHANGED BY)      YM05937 * 01160000
*             END;                                                      01170000
*                                                                       01180000
* LPA08:  COUNT=COUNT/2;                 /* DIVIDE ARRAY IN HALF      * 01190000
@9FC     EQU   *                                                  0076  01200000
LPA08    LH    @E,COUNT                                           0076  01210000
         SRDA  @E,32                                              0076  01220000
         LA    @0,2                                               0076  01230000
         DR    @E,@0                                              0076  01240000
         STH   @F,COUNT                                           0076  01250000
*         IF COUNT=0                     /* LAST ELEMENT?             * 01260000
*           THEN                         /* YES                       * 01270000
         SR    @F,@F                                              0077  01280000
         CH    @F,COUNT                                           0077  01290000
*             GO TO LPA01;               /* GO FORMAT OUTPUT          * 01300000
         BC    08,LPA01                                           0078  01310000
*           ELSE;                        /* NULL ELSE                 * 01320000
*         K=ENTCN-COUNT;                 /* NO-SET INDEX=1/2 ELEMENTS * 01330000
         LH    @F,ENTCN                                           0080  01340000
         SH    @F,COUNT                                           0080  01350000
         STH   @F,K                                               0080  01360000
*         J=1;                           /* INITIALIZE INDEX          * 01370000
         LA    @F,1                                               0081  01380000
         STH   @F,J                                               0081  01390000
* LPA09:  I=J;                           /* I=ELEM. NUMBER IN 1ST HALF* 01400000
LPA09    MVC   I(2),J                                             0082  01410000
* LPA10:  N=I+COUNT;                     /* N=ELEM. NUMBER IN 2ND HALF* 01420000
LPA10    LH    @F,COUNT                                           0083  01430000
         AH    @F,I                                               0083  01440000
         STH   @F,N                                               0083  01450000
*         /* COMPARE ELEMENT FIELDS                                   * 01460000
*         IF ARRAY(I,X:Z)<=ARRAY(N,X:Z)  /* ASCENDING ORDER?          * 01470000
*           THEN                         /* YES                       * 01480000
         LH    @1,X                                               0084  01490000
         LR    @5,@F                                              0084  01500000
         BCTR  @5,0                                               0084  01510000
         MH    @5,@D2                                             0084  01520000
         LA    @E,0(@5,@2)                                        0084  01530000
         AR    @E,@1                                              0084  01540000
         BCTR  @E,0                                               0084  01550000
         LH    @7,Z                                               0084  01560000
         LH    @8,I                                               0084  01570000
         BCTR  @8,0                                               0084  01580000
         MH    @8,@D2                                             0084  01590000
         SR    @7,@1                                              0084  01600000
         LA    @A,0(@8,@2)                                        0084  01610000
         AR    @A,@1                                              0084  01620000
         BCTR  @A,0                                               0084  01630000
         EX    @7,@CLC                                            0084  01640000
*             GO TO LPA11;               /* BYPASS SWAPPING           * 01650000
         BC    12,LPA11                                           0085  01660000
*           ELSE                         /* NO                        * 01670000
*             DO;                                                       01680000
*               TEMPAREA=ARRAY(I);       /* MOVE ELEMENT INTO TEMPAREA* 01690000
         LA    @E,0(@8,@2)                                        0087  01700000
         MVC   TEMPAREA(20),0(@E)                                 0087  01710000
*               ARRAY(I)=ARRAY(N);       /* REPLACE ELEM IN FIRST HALF* 01720000
         LA    @E,0(@5,@2)                                        0088  01730000
         LA    @A,0(@8,@2)                                        0088  01740000
         MVC   0(20,@A),0(@E)                                     0088  01750000
*               ARRAY(N)=TEMPAREA;       /* FIRST GOES INTO SECOND    * 01760000
         LA    @A,0(@5,@2)                                        0089  01770000
         MVC   0(20,@A),TEMPAREA                                  0089  01780000
*               I=I-COUNT;               /* DECREMENT INDEX           * 01790000
         LH    @F,I                                               0090  01800000
         SH    @F,COUNT                                           0090  01810000
         STH   @F,I                                               0090  01820000
*               IF I>=1                  /* BEGINNING OF TABLE REACHED* 01830000
*                 THEN                   /* NO                        * 01840000
         LA    @F,1                                               0091  01850000
         CH    @F,I                                               0091  01860000
*                   GO TO LPA10;         /* COMPARE NEXT ELEMENT      * 01870000
         BC    12,LPA10                                           0092  01880000
*                 ELSE;                  /* NULL ELSE                 * 01890000
*             END;                                                      01900000
* LPA11:  J=J+1;                         /* INDICATE NEW ELEMENT      * 01910000
LPA11    LA    @F,1                                               0095  01920000
         AH    @F,J                                               0095  01930000
         STH   @F,J                                               0095  01940000
*         IF J>K                         /* END OF FIRST HALF         * 01950000
*           THEN                         /* YES                       * 01960000
         LH    @F,K                                               0096  01970000
         CH    @F,J                                               0096  01980000
*             GO TO LPA08;               /* GO DO ANOTHER PASS        * 01990000
         BC    04,LPA08                                           0097  02000000
*           ELSE                         /* NO                        * 02010000
*             GO TO LPA09;               /* CONTINUE                  * 02020000
         BC    15,LPA09                                           0098  02030000
*                                                                       02040000
*         /************************************************************ 02050000
*         /* DETERMINE WHICH SIDE OF THE BUFFER TO FILL THEN MOVE     * 02060000
*         /* DATA FROM SORT TABLE INTO BUFFER TO PRINT. THERE WILL BE * 02070000
*         /* TWO ENTRIES PER BUFFER EXCEPT FOR THE LAST ODD LPDE      * 02080000
*         /* SITUATION. THERE WILL BE A CHECK MADE ON THE LPDE        * 02090000
*         /* BEFORE IT IS MOVED TO DETERMINE IF A MAJOR OR MINOR      * 02100000
*         /* LPDE STRUCTURE SHOULD BE USED FOR THE MOVE.              * 02110000
*         /************************************************************ 02120000
* LPA01:  CC=NEWPG;                      /* CARRIAGE CNTL-NEW PAGE    * 02130000
LPA01    MVC   BUF(1),NEWPG                                       0099  02140000
*         LINE=' ';                      /* CLEAR BUFFER              * 02150000
         MVI   BUF+1,C' '                                         0100  02160000
         MVC   BUF+2(119),BUF+1                                   0100  02170000
*         IF ALNUSW='00'X                /* ALPHA SORT ?              * 02180000
*           THEN                         /* YES                       * 02190000
         CLI   SWITCHES+1,X'00'                                   0101  02200000
         BC    07,@9FB                                            0101  02210000
*             TITLNE=TITLA;              /* MOVE IN ALPHA TITLE       * 02220000
         MVC   BUF+15(38),TITLA                                   0102  02230000
         MVI   BUF+53,C' '                                        0102  02240000
         BC    15,@9FA                                            0103  02250000
*           ELSE                         /* NO,NUMERIC SORT           * 02260000
*             TITLNE=TITLB;              /* MOVE IN NUMERIC TITLE     * 02270000
@9FB     MVC   BUF+15(39),TITLB                                   0103  02280000
*         RETADR=ADDR(LPA03);            /* GET RETURN ADDR           * 02290000
@9FA     LA    @F,LPA03                                           0104  02300000
         ST    @F,RETADR                                          0104  02310000
*         GO TO PRINTB;                  /* GO TO PRINT               * 02320000
         BC    15,PRINTB                                          0105  02330000
*         /* MOVE IN TWO IDENTICAL HEADINGS AND CARRIAGE CONTROL      * 02340000
* LPA03:  CC=SKIP3;                      /* SET CC TO SKIP 3 LINES    * 02350000
LPA03    MVC   BUF(1),SKIP3                                       0106  02360000
*         FTLNE=HDNG;                    /* MOVE IN FIRST HEADING     * 02370000
         MVC   BUF+1(60),HDNG                                     0107  02380000
*         STLNE=HDNG;                    /* MOVE IN SECOND HEADING    * 02390000
         MVC   BUF+61(60),HDNG                                    0108  02400000
*         RETADR=ADDR(LPA04);            /* GET RETURN ADDR           * 02410000
         LA    @F,LPA04                                           0109  02420000
         ST    @F,RETADR                                          0109  02430000
*         GO TO PRINTB;                  /* GO TO PRINT               * 02440000
         BC    15,PRINTB                                          0110  02450000
* LPA04:  LINECNT=3;                     /* SET LINE COUNT TO 3       * 02460000
LPA04    LA    @F,3                                               0111  02470000
         STH   @F,LINECNT                                         0111  02480000
*         LINE=' ';                      /* CLEAR BUFFER              * 02490000
         MVI   BUF+1,C' '                                         0112  02500000
         MVC   BUF+2(119),BUF+1                                   0112  02510000
* LPA02:  CC=SKIP1;                      /* SET CC TO SKIP 1 LINE     * 02520000
LPA02    MVC   BUF(1),SKIP1                                       0113  02530000
*         IF FLBUF = '00'X               /* FILL LEFT BUFFER ?        * 02540000
*           THEN                         /* YES                       * 02550000
         CLI   SWITCHES,X'00'                                     0114  02560000
         BC    07,@9F9                                            0114  02570000
*            DO;                         /*                           * 02580000
*               REG3=ADDR(FTLNE);        /* GET ADDR LEFT HALF OF BUFF* 02590000
         LA    @3,BUF+1                                           0116  02600000
*               FLBUF = '01'X;           /* FLIP BUFFER FILL SWITCH   * 02610000
         MVI   SWITCHES,X'01'                                     0117  02620000
         BC    15,@9F8                                            0119  02630000
*             END;                                                      02640000
*           ELSE                         /* FILL RIGHT BUFFER         * 02650000
*             DO;                                                       02660000
*               REG3=ADDR(STLNE);        /* GET ADDR RIGHT HALF OF BUF* 02670000
@9F9     LA    @3,BUF+61                                          0120  02680000
*               FLBUF = '00'X;           /* FLIP BUFFER FILL SWITCH   * 02690000
         MVI   SWITCHES,X'00'                                     0121  02700000
*             END;                                                      02710000
*                                                                       02720000
*         /************************************************************ 02730000
*         /* IF MINOR ENTRY MOVE IN MAJOR EP NAME. IF MAJOR ENTRY     * 02740000
*         /* MOVE IN MODULE ADDRESS AND LENGTH                        * 02750000
*         /************************************************************ 02760000
*         COUNT=COUNT+1;                 /* INCREMENT COUNTER         * 02770000
@9F8     LA    @F,1                                               0123  02780000
         AH    @F,COUNT                                           0123  02790000
         STH   @F,COUNT                                           0123  02800000
*         IF MAMIN='FF'X                 /* IS THIS A MINOR ENTRY ?   * 02810000
*           THEN                         /* YES                       * 02820000
         CLI   19(@2),X'FF'                                       0124  02830000
         BC    07,@9F7                                            0124  02840000
*             DO;                                                       02850000
*               MLPDNM=LOLEMN;           /* MOVE IN MAJOR LPDE NAME   * 02860000
         MVC   39(8,@3),8(@2)                                     0126  02870000
         BC    15,@9F6                                            0128  02880000
*             END;                                                      02890000
*           ELSE                         /* THIS IS A MAJOR ENTRY     * 02900000
*             DO;                                                       02910000
*               /* UNPACK HEX LOCATION INTO BUFFER AND INSERT ZONE    * 02920000
*               RESPECIFY (REG4,REG5) RESTRICTED;  /* RESTRICT REGS   * 02930000
*               REG4=ADDR(LCTION);       /* GET ADDR LOCATION IN BUFF * 02940000
@9F7     LA    @4,9(0,@3)                                         0130  02950000
*               REG5=ADDR(LOCN2);        /* GET ADDR LOC IN ENTRY     * 02960000
         LA    @5,8(0,@2)                                         0131  02970000
*               GEN(UNPK 0(7,REG4),1(4,REG5)); /* UNPACK THE ADDR     * 02980000
         UNPK 0(7,REG4),1(4,REG5)                                       02990000
         DS    0H                                                       03000000
*               GEN(NC 0(6,REG4),ZONE);  /* ZERO OUT ZONE BITS        * 03010000
         NC 0(6,REG4),ZONE                                              03020000
         DS    0H                                                       03030000
*               GEN(TR 0(6,REG4),TAB);   /* CONV TO PRINTABLE HEX     * 03040000
         TR 0(6,REG4),TAB                                               03050000
         DS    0H                                                       03060000
*               LCTSN=' ';               /* CLEAR SIGN BYTE           * 03070000
         MVI   15(@3),C' '                                        0135  03080000
*               /* UNPACK HEX LENGTH INTO BUFFER AND INSERT ZONE      * 03090000
*               REG4=ADDR(LENGTA);           /* GET ADDR LENGTH IN BUF* 03100000
         LA    @4,19(0,@3)                                        0136  03110000
*               REG5=ADDR(LENG2);            /* GET LENGTH IN ENTRY   * 03120000
         LA    @5,12(0,@2)                                        0137  03130000
*               GEN(UNPK 0(7,REG4),1(4,REG5)); /* UNPACK THE ADDR     * 03140000
         UNPK 0(7,REG4),1(4,REG5)                                       03150000
         DS    0H                                                       03160000
*               GEN(NC 0(6,REG4),ZONE);  /* ZERO OUT ZONE BITS        * 03170000
         NC 0(6,REG4),ZONE                                              03180000
         DS    0H                                                       03190000
*               GEN(TR 0(6,REG4),TAB);   /* CONV TO PRINTABLE HEX     * 03200000
         TR 0(6,REG4),TAB                                               03210000
         DS    0H                                                       03220000
*               LENSN=' ';               /* CLEAR SIGN BYTE           * 03230000
         MVI   25(@3),C' '                                        0141  03240000
*             END;                                                      03250000
*                                                                       03260000
*         /************************************************************ 03270000
*         /* MOVE IN MODULE NAME AND ENTRY POINT ADDRESS              * 03280000
*         /************************************************************ 03290000
*         NAME=NAME2;                    /* MOVE IN MODULE NAME       * 03300000
@9F6     MVC   0(8,@3),0(@2)                                      0143  03310000
*         /* UNPACK ENTRY POINT ADDRESS INTO BUFFER AND INSERT ZONE   * 03320000
*         REG4=ADDR(EPADDR);             /* PT TO LOC IN BUFFER       * 03330000
         LA    @4,29(0,@3)                                        0144  03340000
*         REG5=ADDR(EPAD2);              /* PT TO LOC IN ENTRY        * 03350000
         LA    @5,16(0,@2)                                        0145  03360000
*         GEN(UNPK 0(7,REG4),0(4,REG5)); /* UNPACK THE ADDR           * 03370000
         UNPK 0(7,REG4),0(4,REG5)                                       03380000
         DS    0H                                                       03390000
*         GEN(NC 0(6,REG4),ZONE);        /* ZERO OUT ZONE BITS        * 03400000
         NC 0(6,REG4),ZONE                                              03410000
         DS    0H                                                       03420000
*         GEN(TR 0(6,REG4),TAB);         /* CONVERT TO PRINTABLE HEX  * 03430000
         TR 0(6,REG4),TAB                                               03440000
         DS    0H                                                       03450000
*         EPSN=' ';                      /* CLEAR SIGN BYTE           * 03460000
         MVI   35(@3),C' '                                        0149  03470000
*         RESPECIFY (REG4,REG5) UNRSTD;  /* RELEASE REGS              * 03480000
*                                                                       03490000
*         /************************************************************ 03500000
*         /* IF LAST ENTRY THEN PRINT BUFFER AND EXIT.                * 03510000
*         /************************************************************ 03520000
*         IF ENTCN=COUNT                 /* LAST LPDE                 * 03530000
*           THEN                         /* YES                       * 03540000
         LH    @F,COUNT                                           0151  03550000
         CH    @F,ENTCN                                           0151  03560000
         BC    07,@9F5                                            0151  03570000
*             DO;                                                       03580000
*               IF ALNUSW='00'X          /* ALPHA SORT                * 03590000
*                 THEN                   /* YES                       * 03600000
         CLI   SWITCHES+1,X'00'                                   0153  03610000
         BC    07,@9F4                                            0153  03620000
*                   DO;                                                 03630000
*                     ALNUSW='01'X;      /* SET NUMERIC SORT SWITCH   * 03640000
         MVI   SWITCHES+1,X'01'                                   0155  03650000
*                     RETADR=ADDR(LPA07);  /* GET SORT ROUTINE ADDR   * 03660000
         LA    @F,LPA07                                           0156  03670000
         ST    @F,RETADR                                          0156  03680000
         BC    15,@9F3                                            0158  03690000
*                   END;                                                03700000
*                 ELSE                   /* NO,NUMERIC SORT           * 03710000
*                   RETADR=ADDR(LPAEN);  /* GET EXIT ADDR             * 03720000
@9F4     LA    @F,LPAEN                                           0158  03730000
         ST    @F,RETADR                                          0158  03740000
*               GO TO PRINTB;            /* PRINT BUFFER              * 03750000
         BC    15,PRINTB                                          0159  03760000
*             END;                                                      03770000
*           ELSE;                        /* NULL ELSE                 * 03780000
@9F5     EQU   *                                                  0161  03790000
*                                                                       03800000
*         /************************************************************ 03810000
*         /* INCREMENT POINTER TO NEXT LPDE ENTRY. IF RIGHT BUFFER    * 03820000
*         /* FILLED THEN PRINT.                                       * 03830000
*         /************************************************************ 03840000
*         REG2=REG2+LENGTH(CDETAB);      /* POINT TO NEXT LPDE        * 03850000
@9F2     AH    @2,@D2                                             0162  03860000
*                                                                       03870000
*         IF FLBUF = '00'X               /* IS RIGHT BUFFER FILLED    * 03880000
*           THEN                         /* YES                       * 03890000
         CLI   SWITCHES,X'00'                                     0163  03900000
         BC    07,@9F1                                            0163  03910000
*             DO;                                                       03920000
*               RETADR=ADDR(LPA05);      /* GET RETURN ADDR           * 03930000
         LA    @F,LPA05                                           0165  03940000
         ST    @F,RETADR                                          0165  03950000
*               GO TO PRINTB;            /* PRINT BUFFER              * 03960000
         BC    15,PRINTB                                          0166  03970000
* LPA05:        LINE=' ';                /* FILL IT WITH BLANKS       * 03980000
LPA05    MVI   BUF+1,C' '                                         0167  03990000
         MVC   BUF+2(119),BUF+1                                   0167  04000000
*               LINECNT=LINECNT+1;       /* INCREMENT LINE COUNT      * 04010000
         LA    @F,1                                               0168  04020000
         AH    @F,LINECNT                                         0168  04030000
         STH   @F,LINECNT                                         0168  04040000
*                 IF LINECNT < PGEND     /* SKIP TO NEW PAGE ?        * 04050000
*                   THEN                 /* NO                        * 04060000
         LH    @F,PGEND                                           0169  04070000
         CH    @F,LINECNT                                         0169  04080000
*                     GO TO LPA02;       /* CONVERT NEXT LPDEE        * 04090000
         BC    02,LPA02                                           0170  04100000
*                   ELSE                 /* YES                       * 04110000
*                     GO TO LPA01;       /* GO TO NEXT PAGE           * 04120000
         BC    15,LPA01                                           0171  04130000
*             END;                                                      04140000
*           ELSE                         /* NO,RIGHT BUFF NOT FILLED  * 04150000
*             GO TO LPA02;               /* CONVERT NEXT LPDE         * 04160000
*                                                                       04170000
*         /************************************************************ 04180000
*         /* PRINT SUBROUTINE                                         * 04190000
*         /************************************************************ 04200000
* PRINTB: REG1=LOCPARM;                  /* PUT DCB ADDR IN REG 1     * 04210000
@9F0     EQU   *                                                  0174  04220000
PRINTB   L     @1,LOCPARM                                         0174  04230000
*         GEN(PUT (REG1),BUF);           /* PRINT LINE                * 04240000
         PUT (REG1),BUF                                                 04250000
         DS    0H                                                       04260000
*         GO TO LABX;                    /* RETURN                    * 04270000
         L     @1,RETADR                                          0176  04280000
         BCR   15,@1                                              0176  04290000
* LPAEN:  END   HMBLKLPA                                                04300000
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.       04310000
* /*%INCLUDE SYSLIB  (IHALPDE )                                         04320000
* ;                                                                     04330000
LPAEN    EQU   *                                                  0177  04340000
@EL01    L     @D,4(0,@D)                                         0177  04350000
         LR    @1,@C                                              0177  04360000
         L     @0,@SIZ001                                         0177  04370000
         FREEMAIN R,LV=(0),A=(1)                                  0177  04380000
         LM    @E,@C,12(@D)                                       0177  04390000
         BCR   15,@E                                              0177  04400000
@DATA1   EQU   *                                                        04410000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           04420000
@1       EQU   01                                                       04430000
@2       EQU   02                                                       04440000
@3       EQU   03                                                       04450000
@4       EQU   04                                                       04460000
@5       EQU   05                                                       04470000
@6       EQU   06                                                       04480000
@7       EQU   07                                                       04490000
@8       EQU   08                                                       04500000
@9       EQU   09                                                       04510000
@A       EQU   10                                                       04520000
@B       EQU   11                                                       04530000
@C       EQU   12                                                       04540000
@D       EQU   13                                                       04550000
@E       EQU   14                                                       04560000
@F       EQU   15                                                       04570000
@D1      DC    H'40'                                                    04580000
@D2      DC    H'20'                                                    04590000
@CLC     CLC   0(1,@A),0(@E)                                            04600000
         DS    0F                                                       04610000
@SIZ001  DC    AL1(&SPN)                                                04620000
         DC    AL3(@DATEND-@DATD)                                       04630000
         DS    0F                                                       04640000
         DS    0D                                                       04650000
@DATA    EQU   *                                                        04660000
REG1     EQU   00000001            FULLWORD POINTER REGISTER            04670000
REG2     EQU   00000002            FULLWORD POINTER REGISTER            04680000
LPDEPTR  EQU   00000002            FULLWORD POINTER REGISTER            04690000
REG3     EQU   00000003            FULLWORD POINTER REGISTER            04700000
REG4     EQU   00000004            FULLWORD POINTER REGISTER            04710000
REG5     EQU   00000005            FULLWORD POINTER REGISTER            04720000
REG6     EQU   00000006            FULLWORD POINTER REGISTER            04730000
LPEPTR   EQU   00000000            FULLWORD POINTER                     04740000
MAINT    EQU   *                   50 BYTE(S) ON DWORD                  04750000
         DC    C'HMBLKLPA MAINTENANCE AREA'                             04760000
         DC    00025C' '                                                04770000
LPDE     EQU   00000000            40 BYTE(S) ON WORD                   04780000
LPDECHN  EQU   LPDE+00000000       FULLWORD POINTER                     04790000
LPDERBP  EQU   LPDE+00000004       FULLWORD POINTER                     04800000
LPDENAME EQU   LPDE+00000008       8 BYTE(S)                            04810000
LPDENTP  EQU   LPDE+00000016       FULLWORD POINTER                     04820000
LPDEXLP  EQU   LPDE+00000020       FULLWORD POINTER                     04830000
LPDEUSE  EQU   LPDE+00000024       HALFWORD POINTER                     04840000
A00000   EQU   LPDE+00000026       HALFWORD POINTER                     04850000
LPDEATTR EQU   LPDE+00000028       1 BYTE(S)                            04860000
LPDENIP  EQU   LPDE+00000028       1 BIT(S)                             04870000
A00001   EQU   LPDE+00000028       1 BIT(S)                             04880000
LPDEREN  EQU   LPDE+00000028       1 BIT(S)                             04890000
LPDESER  EQU   LPDE+00000028       1 BIT(S)                             04900000
A00002   EQU   LPDE+00000028       1 BIT(S)                             04910000
LPDEMIN  EQU   LPDE+00000028       1 BIT(S)                             04920000
A00003   EQU   LPDE+00000028       1 BIT(S)                             04930000
LPDENLR  EQU   LPDE+00000028       1 BIT(S)                             04940000
LPDEATT2 EQU   LPDE+00000029       1 BYTE(S)                            04950000
A00004   EQU   LPDE+00000029       2 BIT(S)                             04960000
LPDEXLE  EQU   LPDE+00000029       1 BIT(S)                             04970000
LPDERLC  EQU   LPDE+00000029       1 BIT(S)                             04980000
A00005   EQU   LPDE+00000029       1 BIT(S)                             04990000
A00006   EQU   LPDE+00000029       1 BIT(S)                             05000000
LPDESYSL EQU   LPDE+00000029       1 BIT(S)                             05010000
LPDEAUTH EQU   LPDE+00000029       1 BIT(S)                             05020000
LPDEATT3 EQU   LPDE+00000030       HALFWORD INTEGER                     05030000
LPDEMJNM EQU   LPDE+00000032       8 BYTE(S) ON WORD                    05040000
LPDEXTLN EQU   LPDE+00000032       FULLWORD INTEGER                     05050000
LPDEXTAD EQU   LPDE+00000036       FULLWORD POINTER                     05060000
PARMLST  EQU   00000000            16 BYTE(S)                           05070000
A00007   EQU   PARMLST+00000000    4 BYTE(S)                            05080000
DCBADR   EQU   PARMLST+00000004    4  BYTE  POINTER                     05090000
A00008   EQU   PARMLST+00000008    4 BYTE(S)                            05100000
WKARADR  EQU   PARMLST+00000012    4  BYTE  POINTER                     05110000
LPDOL    EQU   00000000            57 BYTE(S) ON WORD                   05120000
NAME     EQU   LPDOL+00000000      8 BYTE(S)                            05130000
A00009   EQU   LPDOL+00000008      1 BYTE(S)                            05140000
LCTION   EQU   LPDOL+00000009      7 BYTE(S)                            05150000
A00010   EQU   LPDOL+00000009      6 BYTE(S)                            05160000
LCTSN    EQU   LPDOL+00000015      1 BYTE(S)                            05170000
A00011   EQU   LPDOL+00000016      3 BYTE(S)                            05180000
LENGTA   EQU   LPDOL+00000019      7 BYTE(S)                            05190000
A00012   EQU   LPDOL+00000019      6 BYTE(S)                            05200000
LENSN    EQU   LPDOL+00000025      1 BYTE(S)                            05210000
A00013   EQU   LPDOL+00000026      3 BYTE(S)                            05220000
EPADDR   EQU   LPDOL+00000029      7 BYTE(S)                            05230000
A00014   EQU   LPDOL+00000029      6 BYTE(S)                            05240000
EPSN     EQU   LPDOL+00000035      1 BYTE(S)                            05250000
A00015   EQU   LPDOL+00000036      3 BYTE(S)                            05260000
MLPDNM   EQU   LPDOL+00000039      8 BYTE(S)                            05270000
A00016   EQU   LPDOL+00000047      10 BYTE(S)                           05280000
CDETAB   EQU   00000000            20 BYTE(S)                           05290000
NAME2    EQU   CDETAB+00000000     8 BYTE(S)                            05300000
LOLEMN   EQU   CDETAB+00000008     8 BYTE(S)                            05310000
LOCN2    EQU   CDETAB+00000008     4 BYTE(S)                            05320000
LENG2    EQU   CDETAB+00000012     4 BYTE(S)                            05330000
EPAD2    EQU   CDETAB+00000016     3 BYTE(S)                            05340000
EPAD5    EQU   CDETAB+00000016     3  BYTE  POINTER                     05350000
MAMIN    EQU   CDETAB+00000019     1 BYTE(S)                            05360000
ZONE     EQU   *                   8 BYTE(S)                            05370000
         DC    X'0F0F0F0F0F0F0F0F'                                      05380000
LASTN    EQU   *                   8 BYTE(S)                            05390000
         DC    X'FFFFFFFFFFFFFFFF'                                      05400000
TAB      EQU   *                   16 BYTE(S)                           05410000
         DC    C'0123456789ABCDEF'                                      05420000
NEWPG    EQU   *                   1 BYTE(S)                            05430000
         DC    C'1'                                                     05440000
SKIP1    EQU   *                   1 BYTE(S)                            05450000
         DC    C' '                                                     05460000
SKIP3    EQU   *                   1 BYTE(S)                            05470000
         DC    C'-'                                                     05480000
         ORG   @DATA+00000086                                           05490000
PGEND    EQU   *                   HALFWORD INTEGER                     05500000
         DC    FL2'55'                                                  05510000
TITLA    EQU   *                   38 BYTE(S)                           05520000
         DC    C'LINK PACK MAP - ALPHABETICALLY BY NAME'                05530000
TITLB    EQU   *                   39 BYTE(S)                           05540000
         DC    C'LINK PACK MAP - NUMERICALLY BY LOCATION'               05550000
HDNG     EQU   *                   60 BYTE(S)                           05560000
         DC    C'NAME     LOCATION  LENGTH    EP ADDR  MAJO'            05570000
         DC    C'R LPDE NAME'                                           05580000
         DC    00007C' '                                                05590000
ARRAY    EQU   00000000            20 BYTE(S)                           05600000
         ORG   @DATA                                                    05610000
         DS    00000225C                                                05620000
@L       EQU   1                                                        05630000
@DATD    DSECT                                                          05640000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   05650000
RETADR   EQU   @DATD+00000072      FULLWORD POINTER                     05660000
TEMPAREA EQU   @DATD+00000076      20 BYTE(S)                           05670000
COUNTER  EQU   @DATD+00000096      HALFWORD INTEGER                     05680000
ENTCN    EQU   @DATD+00000098      HALFWORD INTEGER                     05690000
COUNT    EQU   @DATD+00000100      HALFWORD INTEGER                     05700000
I        EQU   @DATD+00000102      HALFWORD INTEGER                     05710000
J        EQU   @DATD+00000104      HALFWORD INTEGER                     05720000
K        EQU   @DATD+00000106      HALFWORD INTEGER                     05730000
N        EQU   @DATD+00000108      HALFWORD INTEGER                     05740000
X        EQU   @DATD+00000110      HALFWORD INTEGER                     05750000
Z        EQU   @DATD+00000112      HALFWORD INTEGER                     05760000
LOCPARM  EQU   @DATD+00000116      FULLWORD POINTER                     05770000
SWITCHES EQU   @DATD+00000120      2 BYTE(S)                            05780000
FLBUF    EQU   SWITCHES+00000000   1 BYTE(S)                            05790000
ALNUSW   EQU   SWITCHES+00000001   1 BYTE(S)                            05800000
LINECNT  EQU   @DATD+00000122      HALFWORD INTEGER                     05810000
BUF      EQU   @DATD+00000124      121 BYTE(S)                          05820000
CC       EQU   BUF+00000000        1 BYTE(S)                            05830000
LINE     EQU   BUF+00000001        120 BYTE(S)                          05840000
FTLNE    EQU   BUF+00000001        60 BYTE(S)                           05850000
A00017   EQU   BUF+00000001        14 BYTE(S)                           05860000
TITLNE   EQU   BUF+00000015        39 BYTE(S)                           05870000
STLNE    EQU   BUF+00000061        60 BYTE(S)                           05880000
         DS    00000245C                                                05890000
@TEMPS   DS    0F                                                       05900000
@TEMP4   DC    F'0'                                                     05910000
            CVT LIST=YES,DSECT=YES                                      05920000
@DATD    DSECT                                                          05930000
@DATEND  EQU   *                                                        05940000
HMBLKLPA CSECT ,                                                        05950000
@9F3     EQU   PRINTB                                                   05960000
@9F1     EQU   LPA02                                                    05970000
         END   HMBLKLPA,(C'PL/S',1400,73347)                            05980000
./  ADD  SSI=61750398,NAME=HMBLKMSG
HMBLKMSG CSECT                                                          00700000
         DC    C'HMBLKMSG'                                              01400000
         SPACE 3                                                        02100021
*********************************************************************** 02800021
*  THE FOLLOWING CSECT IS THE MESSAGE CSECT FOR HMBLIST. IT CONTAINS  * 03500000
* TWO TABLES. THE FIRST ONE MESSAGES, CONTAINS THE MESSAGE NUMBER     * 04200021
* AND TEXT FOR EACH MESSAGE IN AMBLIST. THE SECOND TABLE MSGLIST      * 04900000
* CONTAINS A LENGTH AND DISPLACEMENT FOR EACH MESSAGE IN MESSAGES.    * 05600021
* HMBLKERR IS THE ONLY MODULE WHICH USES HMBLKMSG.                    * 06300000
*********************************************************************** 07000021
         EJECT                                                          07700021
         ENTRY MSGLIST                                                  08400021
         ENTRY MESSAGES                                                 09100021
MESSAGES EQU   *                                                        09800021
MSG01    DC    C' AMB101I ESD CONTAINS INVALID DATA'                    10500000
MSG02    DC    C' AMB102I INVALID LOAD/OBJECT RECORD'                   11200000
MSG03    DC    C' AMB103I RLD POINTER INVALID'                          11900000
MSG04    DC    C' AMB104I TABLE OVERFLOWS, ENLARGE REGION/PARTITION SIZX12600000
               E AND RERUN'                                             13300021
MSG05    DC    C' AMB105I DATANAME DOES NOT DEFINE LOAD MODULE LIBRARY' 14000000
MSG06    DC    C' AMB106I MODULE IS NOT EDITABLE, NO XREF PROVIDED'     14700000
MSG07    EQU   *   MESSAGE ISSUED BY WTO MACRO IN SYNAD PROCEDURE       15400021
MSG08    DC    C' AMB108I MEMBNAME NOT FOUND'                           16100000
MSG09    EQU   *   MESSAGE ISSUED BY WTO MACRO IN SYNAD PROCEDURE       16800021
MSG10    DC    C' AMB110I DATANAME DOES NOT DEFINE AN OBJECT MODULE DATX17500000
               A SET'                                                   18200021
MSG11    DC    C' AMB111I DATANAME CANNOT BE OPENED'                    18900000
MSG12    DC    C' AMB112I LOAD MODULE DOES NOT CONTAIN CSECT IDENTIFICAX19600000
               TION RECORDS'                                            20300021
MSG13    DC    C' AMB113I IDR INFORMATION IS INCOMPLETE'                21000000
MSG14    DC    C' AMB114I CSECT NAME ASSOCIATED WITH AN IDR DATA ENTRY X21700000
                CANNOT BE FOUND'                                        22400021
MSG15    DC    C'AMB115I  BUFFER SPACE NOT AVAILABLE - INCREASE REGION X23100000
               OR PARTITION SIZE'                                       23800021
MSG16    EQU   *   MESSAGE ISSUED BY WTO MACRO IN SYNAD PROCEDURE       24500021
MSG17    DC    C' AMB117I INVALID DIRECTORY BLOCK'               Y03207 24550002
MSG18    EQU   *                                                        25900021
MSG19    EQU   *                                                        26600021
MSG20    DC    C' AMB120I EXPECTED CONTINUATION CARD NOT FOUND -- PROCEX27300000
               SSING TERMINATES'                                        28000021
MSG21    DC    C' AMB121I INVALID CONTROL STATEMENT -- PROCESSING TERMIX28700000
               NATES'                                                   29400021
MSG22    DC    C' AMB122I INVALID OPERAND NEAR COLUMN INDICATED BY ''$'X30100000
               ' -- PROCESSING TERMINATES'                              30800021
MSG23    DC    C' AMB123I CLOSE QUOTE OR PAREN NOT FOUND, OR KEYWORD VAX31500002
               LUE EXCEEDS COL 71'                               Y03007 32200002
MSG24    DC    C' AMB124I NUMBER OF MEMBER NAMES EXCEEDS 32 NEAR COLUMNX32900000
                INDICATED BY ''$'', EXCESS IGNORED -- PROCESSING CONTINX33600021
               UES'                                                     34300021
MSG25    DC    C' AMB125I IMPROPER OPERAND NEAR COLUMN INDICATED BY ''$X35000000
               '' OPERAND IGNORED -- PROCESSING CONTINUES'              35700021
MSG26    DC    C' AMB126I IMPROPER OPTION NEAR COLUMN INDICATED BY ''$'X36400000
               ' DEFAULT TAKEN -- PROCESSING CONTINUES'                 37100021
MSG27    DC    C' AMB127I RELOC OPERAND INVALID WHEN MAPPING NUCLEUS - X37800000
               OPERAND IGNORED'                                         38500021
MSG28    DC    C' AMB128I NUCLEUS NOT MARKED SCTR - STANDARD XREF PROVIX39200000
               DED'                                                     39900021
MSG29    DC    C' AMB129I IMPROPER CESD SEQUENCE IN NUCLEUS - STANDARD X40600000
               XREF PROVIDED'                                           41300021
MSG30    DC    C' AMB130I NUCLEUS REQUESTED FOR OUTPUT=XREF IS NOT THE X42000000
               NUCLEUS THAT WAS IPL''D'                                 42100000
MSG31    EQU   *                                                        42700021
MSG32    EQU   *                                                        43400021
MSG33    EQU   *                                                        44100021
         EJECT                                                          44800021
         DS    0F                                                       45500021
MSGLIST  EQU   *                                                        46200021
LST01    DC    AL2(MSG01-MESSAGES)                                      46900021
         DC    AL2(MSG02-MSG01)                                         47600021
LST02    DC    AL2(MSG02-MESSAGES)                                      48300021
         DC    AL2(MSG03-MSG02)                                         49000021
LST03    DC    AL2(MSG03-MESSAGES)                                      49700021
         DC    AL2(MSG04-MSG03)                                         50400021
LST04    DC    AL2(MSG04-MESSAGES)                                      51100021
         DC    AL2(MSG05-MSG04)                                         51800021
LST05    DC    AL2(MSG05-MESSAGES)                                      52500021
         DC    AL2(MSG06-MSG05)                                         53200021
LST06    DC    AL2(MSG06-MESSAGES)                                      53900021
         DC    AL2(MSG07-MSG06)                                         54600021
LST07    DC    AL2(MSG07-MESSAGES)                                      55300021
         DC    AL2(MSG08-MSG07)                                         56000021
LST08    DC    AL2(MSG08-MESSAGES)                                      56700021
         DC    AL2(MSG09-MSG08)                                         57400021
LST09    DC    AL2(MSG09-MESSAGES)                                      58100021
         DC    AL2(MSG10-MSG09)                                         58800021
LST10    DC    AL2(MSG10-MESSAGES)                                      59500021
         DC    AL2(MSG11-MSG10)                                         60200021
LST11    DC    AL2(MSG11-MESSAGES)                                      60900021
         DC    AL2(MSG12-MSG11)                                         61600021
LST12    DC    AL2(MSG12-MESSAGES)                                      62300021
         DC    AL2(MSG13-MSG12)                                         63000021
LST13    DC    AL2(MSG13-MESSAGES)                                      63700021
         DC    AL2(MSG14-MSG13)                                         64400021
LST14    DC    AL2(MSG14-MESSAGES)                                      65100021
         DC    AL2(MSG15-MSG14)                                         65800021
LST15    DC    AL2(MSG15-MESSAGES)                                      66500021
         DC    AL2(MSG16-MSG15)                                         67200021
LST16    DC    AL2(MSG16-MESSAGES)                                      67900021
         DC    AL2(MSG17-MSG16)                                         68600021
LST17    DC    AL2(MSG17-MESSAGES)                                      69300021
         DC    AL2(MSG18-MSG17)                                         70000021
LST18    DC    AL2(MSG18-MESSAGES)                                      70700021
         DC    AL2(MSG19-MSG18)                                         71400021
LST19    DC    AL2(MSG19-MESSAGES)                                      72100021
         DC    AL2(MSG20-MSG19)                                         72800021
LST20    DC    AL2(MSG20-MESSAGES)                                      73500021
         DC    AL2(MSG21-MSG20)                                         74200021
LST21    DC    AL2(MSG21-MESSAGES)                                      74900021
         DC    AL2(MSG22-MSG21)                                         75600021
LST22    DC    AL2(MSG22-MESSAGES)                                      76300021
         DC    AL2(MSG23-MSG22)                                         77000021
LST23    DC    AL2(MSG23-MESSAGES)                                      77700021
         DC    AL2(MSG24-MSG23)                                         78400021
LST24    DC    AL2(MSG24-MESSAGES)                                      79100021
         DC    AL2(MSG25-MSG24)                                         79800021
LST25    DC    AL2(MSG25-MESSAGES)                                      80500021
         DC    AL2(MSG26-MSG25)                                         81200021
LST26    DC    AL2(MSG26-MESSAGES)                                      81900021
         DC    AL2(MSG27-MSG26)                                         82600021
LST27    DC    AL2(MSG27-MESSAGES)                                      83300021
         DC    AL2(MSG28-MSG27)                                         84000021
LST28    DC    AL2(MSG28-MESSAGES)                                      84700021
         DC    AL2(MSG29-MSG28)                                         85400021
LST29    DC    AL2(MSG29-MESSAGES)                                      86100021
         DC    AL2(MSG30-MSG29)                                         86800021
LST30    DC    AL2(MSG30-MESSAGES)                                      87500021
         DC    AL2(MSG31-MSG30)                                         88200021
LST31    DC    AL2(MSG31-MESSAGES)                                      88900021
         DC    AL2(MSG32-MSG31)                                         89600021
LST32    DC    AL2(MSG32-MESSAGES)                                      90300021
         DC    AL2(MSG33-MSG32)                                         91000021
         END                                                            91700021
./  ADD  SSI=52470045,NAME=HMBLKOBJ
         TITLE ' OBJECT MODULE LISTER - HMBLKOBJ'                       00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
HMBLKOBJ CSECT ,                                                  0001  00040000
         BC    15,14(0,@F)                                              00050000
         DC    C'Â—HMBLKOBJ'                                       0001  00060000
         ST    @E,12(0,@D)                                        0001  00070000
         STM   @0,@C,20(@D)                                       0001  00080000
         BALR  @B,0                                               0001  00090000
@PSTART  DS    0H                                                 0001  00100000
         USING @PSTART+00000,@B                                   0001  00110000
         L     @0,@SIZ001                                         0001  00120000
         GETMAIN  R,LV=(0)                                        0001  00130000
         LR    @C,@1                                              0001  00140000
         USING @DATD+00000,@C                                     0001  00150000
         LM    @0,@1,20(@D)                                       0001  00160000
         XC    @TEMPS(@L),@TEMPS                                  0001  00170000
         ST    @D,@SAV001+4                                       0001  00180000
         LA    @F,@SAV001                                         0001  00190000
         ST    @F,8(0,@D)                                         0001  00200000
         LR    @D,@F                                              0001  00210000
* INITID: MLOG = '0000'X;               /* INITIAL. ERROR BITS        * 00220000
INITID   MVC   MLOG(2),@X1+2                                      0052  00230000
*         ESDCTR = '0000'X;             /* FOR ESDID                  * 00240000
         MVC   ESDCTR(2),@X1+2                                    0053  00250000
*         PAGCTR = '0000'X;             /* FOR PAGE NUMBER            * 00260000
         MVC   PAGCTR(2),@X1+2                                    0054  00270000
*         Q = '00'X;                    /* INITIALIZE Q               * 00280000
         MVI   Q,X'00'                                            0055  00290000
*         RLDSW1 = '00'X;               /* INIT. SWITCH FOR RLD       * 00300000
         MVI   RLDSW1,X'00'                                       0056  00310000
*         RLDSW2 = '00'X;               /* INITIALIZE SWITCH          * 00320000
         MVI   RLDSW2,X'00'                                       0057  00330000
*         RDCTR = '0000'X;              /* INITIALIZE DEBLK LOOP CTR  * 00340000
         MVI   RDCTR,X'00'                                        0058  00350000
*         DECBPTR = ADDR(READLIST);     /* PICK UP DECB ADDR          * 00360000
         LA    @F,READLIST                                        0059  00370000
         ST    @F,DECBPTR                                         0059  00380000
*         PARMPTR = REG1;               /* POINTS TO PARM LIST        * 00390000
         ST    @1,PARMPTR                                         0060  00400000
*         CVTWORK(1:4) = ADDR(OBJEOF);       /*STORE ADDR OF EOF RTN  * 00410000
         LA    @F,OBJEOF                                          0061  00420000
         ST    @F,CVTWORK                                         0061  00430000
*         ADRREG = DCBIN;               /* PICK UP INPUT DCB ADDR     * 00440000
         L     @8,PARMPTR                                         0062  00450000
         L     @3,0(0,@8)                                         0062  00460000
*         GENERATE;                     /* STORE EOF ADDR IN DCB      * 00470000
         USING IHADCB,ADRREG           EST. ADDRABILITY FOR DSECT       00480000
         MVC   DCBEODAD+1(3),CVTWORK+1  MOVE IN EOF ADDR                00490000
         DS    0H                                                       00500000
*         GO TO MAINHD;                 /* SKIP AROUND LIST READ FORM * 00510000
         BC    15,MAINHD                                          0064  00520000
*         GENERATE;                     /* ISSUE LIST FORM OF         * 00530000
READLB1  READ  DECB,SF,MF=L            READ MACRO                       00540000
READLTH  EQU   *-READLB1               PICK UP LIST FORM LENGTH         00550000
         DS    0H                                                       00560000
*         /************************************************************ 00570000
*         /* PRINT OUT LISTOBJ HEADING                                * 00580000
*         /************************************************************ 00590000
* MAINHD: K = 1;                        /* PTR TO PAGE HEADING        * 00600000
MAINHD   MVI   K,1                                                0066  00610000
*         RTNPTR = ADDR(HDLAB1);        /* SET RTN PTR                * 00620000
         LA    @F,HDLAB1                                          0067  00630000
         ST    @F,RTNPTR                                          0067  00640000
*         GO TO INIT1;                  /* GO TO MOVE IN HEADING      * 00650000
         BC    15,INIT1                                           0068  00660000
* HDLAB1: IF MEMNAME = BUF(112:119)     /* IS MEMBER NAME PASSED?     * 00670000
*           THEN                        /* NO                         * 00680000
HDLAB1   L     @8,PARMPTR                                         0069  00690000
         CLC   36(8,@8),BUF+111                                   0069  00700000
*             GO TO HDLAB3;             /* CONTINUE PROCESSING        * 00710000
         BC    08,HDLAB3                                          0070  00720000
*           ELSE                        /* MEMBER NAME PASSED         * 00730000
*             DO;                       /* SO, PUT ON HEADER LINE     * 00740000
*               K = 16;                 /* INDEX INTO HEADINGS        * 00750000
         MVI   K,16                                               0072  00760000
*               RTNPTR = ADDR(HDLAB2);  /* SET RETURN ADDR            * 00770000
         LA    @F,HDLAB2                                          0073  00780000
         ST    @F,RTNPTR                                          0073  00790000
*               GO TO MVHDS;            /* PUT HEADING IN BUFFER      * 00800000
         BC    15,MVHDS                                           0074  00810000
* HDLAB2:       BUF(60:68) = MEMNAME;   /* MOVE NAME INTO BUFFER      * 00820000
HDLAB2   L     @8,PARMPTR                                         0075  00830000
         MVC   BUF+59(8),36(@8)                                   0075  00840000
         MVI   BUF+67,C' '                                        0075  00850000
*             END;                      /* END DO FOR MEMEBER NAME    * 00860000
* HDLAB3: K = 2;                        /*  PTR TO PAGE NO. HEAD      * 00870000
HDLAB3   MVI   K,2                                                0077  00880000
*         RTNPTR = ADDR(HDLAB4);        /* SET RTN PTR                * 00890000
         LA    @F,HDLAB4                                          0078  00900000
         ST    @F,RTNPTR                                          0078  00910000
*         GO TO MVHDS;                  /* MOVE IN HEADING            * 00920000
         BC    15,MVHDS                                           0079  00930000
* HDLAB4: PAGCTR = PAGCTR + 1;          /* UPDATE PAGE NO.CTR         * 00940000
HDLAB4   LA    @F,1                                               0080  00950000
         AH    @F,PAGCTR                                          0080  00960000
         STH   @F,PAGCTR                                          0080  00970000
*         GENERATE;                     /* CVD PAGE NO. TO DEC.       * 00980000
         LH    PTRREG,PAGCTR           PICK UP PAGE NO.                 00990000
         CVD   PTRREG,DBLWD            CONVERT ONTO DOUBLEWD            01000000
         UNPK  CVTWORK(5),DBLWD+5(3)   UNPACK IT                        01010000
         OI    CVTWORK+4,X'F0'         'OR' OUT SIGN BIT                01020000
         MVC   BUF+117(4),CVTWORK+1   MOVE PAGE# INTO BUF               01030000
         DS    0H                                                       01040000
*         LINECT = '02'X;               /* UPDATE LINE CT             * 01050000
         LA    @F,X'02'                                           0082  01060000
         STH   @F,LINECT                                          0082  01070000
*         BUF(1) = '1';                 /* ASA CHAR FOR TOP PAGE      * 01080000
         MVI   BUF,C'1'                                           0083  01090000
*         REG1 = DCBOUT;                /* PICK UP DCB ADDR           * 01100000
         L     @8,PARMPTR                                         0084  01110000
         L     @1,4(0,@8)                                         0084  01120000
*         GENERATE  (PUT   (1),BUF);    /* PRINT HEADING              * 01130000
         PUT   (1),BUF                                                  01140000
         DS    0H                                                       01150000
*         /************************************************************ 01160000
*         /* PRINT USER TITLE                                         * 01170000
*         /************************************************************ 01180000
* PRTITLE:PTRREG = TITLEAD;             /* PICK UP TITLE ADDR         * 01190000
PRTITLE  L     @8,PARMPTR                                         0086  01200000
         L     @2,8(0,@8)                                         0086  01210000
*         REG1 = DCBOUT;                /* PICK UP DCB ADDR           * 01220000
         L     @1,4(0,@8)                                         0087  01230000
*         GENERATE  (PUT   (1),(PTRREG));  /* PRINT TITLE             * 01240000
         PUT   (1),(PTRREG)                                             01250000
         DS    0H                                                       01260000
*         GO TO READ;                   /* GO READ RECORD             * 01270000
         BC    15,READ                                            0089  01280000
*         /************************************************************ 01290000
*         /* COMMON RTN TO MOVE HEADINGS INTO BUFFER AREA             * 01300000
*         /************************************************************ 01310000
* INIT1:  BUF(2) = ' ';                 /* BLANK OUT BUFFER           * 01320000
INIT1    MVI   BUF+1,C' '                                         0090  01330000
*         BUF(3:121) = BUF(2:120);      /* BLANK OUT BUFFER           * 01340000
         MVC   BUF+2(119),BUF+1                                   0091  01350000
* MVHDS:  L = WHERE(K);                 /* INDEX INTO BUFFER          * 01360000
MVHDS    SR    @8,@8                                              0092  01370000
         IC    @8,K                                               0092  01380000
         SR    @F,@F                                              0092  01390000
         IC    @F,HEADERS+63(@8)                                  0092  01400000
         STC   @F,L                                               0092  01410000
*         N = LNGTH(K);                 /*LENGTH TO BE MOVED          * 01420000
         SR    @F,@F                                              0093  01430000
         IC    @F,HEADERS+79(@8)                                  0093  01440000
         STC   @F,N                                               0093  01450000
*         WDSPTR = WDSADR(K);           /* PICK UP PTR                * 01460000
         SR    @9,@9                                              0094  01470000
         IC    @9,K                                               0094  01480000
         SLA   @9,2                                               0094  01490000
         L     @F,HEADERS-4(@9)                                   0094  01500000
         ST    @F,WDSPTR                                          0094  01510000
*         BUF(L:L+N-1) = WDSPTR->HEADBUF(1:N);  /* MOVE MSG INTO BUF  * 01520000
         LR    @6,@F                                              0095  01530000
         LR    @E,@6                                              0095  01540000
         LH    @7,@D1                                             0095  01550000
         SR    @0,@0                                              0095  01560000
         IC    @0,N                                               0095  01570000
         AR    @7,@0                                              0095  01580000
         IC    @0,L                                               0095  01590000
         AR    @7,@0                                              0095  01600000
         SR    @4,@4                                              0095  01610000
         IC    @4,L                                               0095  01620000
         SR    @7,@4                                              0095  01630000
         LA    @A,BUF-1(@4)                                       0095  01640000
         EX    @7,@MVC                                            0095  01650000
*         GO TO RETRN;                  /* RETURN                     * 01660000
         L     @5,RTNPTR                                          0096  01670000
         BCR   15,@5                                              0096  01680000
*         /************************************************************ 01690000
*         /* CHECKS LINE COUNT AND READS NEXT RECORD AND DEBLKS       * 01700000
*         /************************************************************ 01710000
* READ:   IF  LINECT >= 54              /* CAN ANOTHER REC'D FIT?     * 01720000
*           THEN                        /* YES                        * 01730000
READ     LA    @F,54                                              0097  01740000
         CH    @F,LINECT                                          0097  01750000
*             GO TO MAINHD;             /* GO TO PRINT HEADING        * 01760000
         BC    12,MAINHD                                          0098  01770000
*           ELSE                        /* OTHERWISE  CONTINUE        * 01780000
*             IF RDCTR > '0000'X        /* FINISHED WITH THIS BLK     * 01790000
*               THEN                    /* NO                         * 01800000
         L     @F,@X1                                             0099  01810000
         SR    @0,@0                                              0099  01820000
         IC    @0,RDCTR                                           0099  01830000
         CR    @F,@0                                              0099  01840000
         BC    10,@9FF                                            0099  01850000
*                 DO;                   /* CONTINUE DEBLOCKING        * 01860000
*                   INPTR = INPTR + 80;     /* UPDATE INPUT PTR       * 01870000
         LA    @F,80                                              0101  01880000
         A     @F,INPTR                                           0101  01890000
         ST    @F,INPTR                                           0101  01900000
*                   GO TO DEBLKRD;      /* PROCESS THIS RECORD        * 01910000
         BC    15,DEBLKRD                                         0102  01920000
*                 END;                  /* END DEBLK LOOP             * 01930000
*               ELSE;                   /* BLOCK DONE SO READ NEXT    * 01940000
@9FF     EQU   *                                                  0104  01950000
* OBJGET: ADRREG = DCBIN;               /* PICK UP DCB ADDR           * 01960000
@9FE     EQU   *                                                  0105  01970000
OBJGET   L     @8,PARMPTR                                         0105  01980000
         L     @3,0(0,@8)                                         0105  01990000
*         PTRREG = WORKBUF;             /* PICK UP BUFFER ADDR        * 02000000
         L     @2,24(0,@8)                                        0106  02010000
*         INPTR = PTRREG;               /* PICK UP ADDR IN INPUT PTR  * 02020000
         ST    @2,INPTR                                           0107  02030000
*         GENERATE;                     /* READ NEXT RECORD           * 02040000
         MVC   READLIST(READLTH),READLB1  MOVE IN LIST FORM OF READ     02050000
         READ  READLIST,SF,(ADRREG),(PTRREG),MF=E  ISSUE EXECUTE READ   02060000
         CHECK READLIST                CHECK READ                       02070000
         DS    0H                                                       02080000
*         IF  RESIDCT > '0000'X         /* FULL BLK READ IN           * 02090000
*            THEN                       /* NO, SHORT BLOCK            * 02100000
         L     @F,@X1                                             0109  02110000
         L     @9,DECBPTR                                         0109  02120000
         L     @9,16(0,@9)         DECBSTR                        0109  02130000
         MVC   @TEMP2+2(2),14(@9)                                 0109  02140000
         C     @F,@TEMP2                                          0109  02150000
         BC    10,@9FD                                            0109  02160000
*              DO;                      /* FIND NUM RECORDS READ IN   * 02170000
*                RDCTR = (DCBBLKSI - RESIDCT)/80;      /* CALC LOOPCTR* 02180000
         MVC   @TEMP2+2(2),14(@9)                                 0111  02190000
         L     @E,@TEMP2                                          0111  02200000
         LCR   @E,@E                                              0111  02210000
         MVC   @TEMP2+2(2),DCBBLKSI                               0111  02220000
         A     @E,@TEMP2                                          0111  02230000
         SRDA  @E,32                                              0111  02240000
         LA    @0,80                                              0111  02250000
         DR    @E,@0                                              0111  02260000
         STC   @F,RDCTR                                           0111  02270000
*                GO TO DEBLKRD;         /* PROCESS RECORD             * 02280000
         BC    15,DEBLKRD                                         0112  02290000
*              END;                     /* END SHORT BLK PROCESSING   * 02300000
*            ELSE                       /* FULL BLK READ IN           * 02310000
*              RDCTR = BLKCNT;          /* CALC LOOP CTR VALUE        * 02320000
@9FD     L     @8,PARMPTR                                         0114  02330000
         MVC   RDCTR(1),23(@8)                                    0114  02340000
* DEBLKRD:RDCTR = RDCTR - 1;            /* DECREASE CTR AND PROCESS RD* 02350000
@9FC     EQU   *                                                  0115  02360000
DEBLKRD  SR    @F,@F                                              0115  02370000
         IC    @F,RDCTR                                           0115  02380000
         BCTR  @F,0                                               0115  02390000
         STC   @F,RDCTR                                           0115  02400000
*         /************************************************************ 02410000
*         /* CHECK CARD VALIDITY AND TYPE VALIDITY                    * 02420000
*         /************************************************************ 02430000
*         IF  ZEROTWO = '02'X           /* CHECK 1ST CARD COLUMN      * 02440000
*           THEN                        /* OKAY                       * 02450000
         L     @8,INPTR                                           0116  02460000
         CLI   0(@8),X'02'                                        0116  02470000
*             GO TO TYPCK;              /* GO TO CHECK TYPE           * 02480000
         BC    08,TYPCK                                           0117  02490000
*           ELSE                        /* CONTROL CARD OR ERR        * 02500000
*             DO;                       /* CHECK FOR CNTRL CARD       * 02510000
*               IF ZEROTWO = ' '        /* IS FIRST COLUMN BLANK?     * 02520000
*                 THEN                  /* YES, SO CONTROL CARD       * 02530000
         CLI   0(@8),C' '                                         0119  02540000
         BC    07,@9FB                                            0119  02550000
*                   DO;                 /* PROCESS CARD               * 02560000
*                     BUF(1) = '0';      /* TO SKIP NEXT LINE         * 02570000
         MVI   BUF,C'0'                                           0121  02580000
*                     BUF(2) = ' ';     /* BLANK OUT BUFFER           * 02590000
         MVI   BUF+1,C' '                                         0122  02600000
*                     BUF(3:121) = BUF(2:120); /* BLANK OUT ENTIRE BUF* 02610000
         MVC   BUF+2(119),BUF+1                                   0123  02620000
*                     BUF(2:81) = CARD;  /* MOVE CARD IMAGE INTO BUF  * 02630000
         MVC   BUF+1(80),0(@8)                                    0124  02640000
*                     RTNPTR = ADDR(READ);  /* READ NEXT CD AFTER PRT * 02650000
         LA    @F,READ                                            0125  02660000
         ST    @F,RTNPTR                                          0125  02670000
*                     GO TO OBJPUT;     /* PRINT CONTROL RECORD       * 02680000
         BC    15,OBJPUT                                          0126  02690000
*                   END;                /* END CNTRL DO               * 02700000
*                 ELSE                  /* ERROR IN CARD              * 02710000
*                   DO;                 /* ERROR IMB102I              * 02720000
*                     ERRORS(2) = '1'B;     /* SET ERROR BIT          * 02730000
@9FB     L     @8,PARMPTR                                         0129  02740000
         OI    32(@8),B'01000000'                                 0129  02750000
*                     GO TO ERROR;      /* GO TO ERROR RTN            * 02760000
         BC    15,ERROR                                           0130  02770000
*                   END;                /* END OF DO FOR ERROR        * 02780000
*            END;                       /* END FIRST COLM.CHECK       * 02790000
@9FA     EQU   *                                                  0132  02800000
* TYPCK:  DO  I = 1 TO 5;               /* SEARCH TAB FOR TYPE        * 02810000
TYPCK    LA    @F,1                                               0133  02820000
         STC   @F,I                                               0133  02830000
*           IF  TPES(I) = CARDTYP       /* RECORD TYPE MATCH?         * 02840000
*             THEN                      /* MATCH FOUND                * 02850000
@DO9F9   L     @8,INPTR                                           0134  02860000
         SR    @9,@9                                              0134  02870000
         IC    @9,I                                               0134  02880000
         MH    @9,@D2                                             0134  02890000
         LA    @A,TYPETAB+18(@9)                                  0134  02900000
         CLC   0(3,@A),1(@8)                                      0134  02910000
         BC    07,@9F5                                            0134  02920000
*               GO TO TYADR(I);         /* GO TO PROCESS CARD         * 02930000
         SR    @6,@6                                              0135  02940000
         IC    @6,I                                               0135  02950000
         SLA   @6,2                                               0135  02960000
         LA    @A,TYPETAB-3(@6)                                   0135  02970000
         MVC   @TEMP3+1(3),0(@A)                                  0135  02980000
         L     @F,@TEMP3                                          0135  02990000
         BCR   15,@F                                              0135  03000000
*             ELSE ;                    /* CONTINUE SEARCH            * 03010000
*         END  TYPCK;                   /* END TYPE TAB SEARCH        * 03020000
*         ERRORS(2) = '1'B;             /* ERROR:TYPE NOT FOUND       * 03030000
@9F5     SR    @F,@F                                              0137  03040000
         IC    @F,I                                               0137  03050000
         AH    @F,@D3                                             0137  03060000
@DO9F8   STC   @F,I                                               0137  03070000
         CH    @F,@D4                                             0137  03080000
         BC    12,@DO9F9                                          0137  03090000
         L     @8,PARMPTR                                         0138  03100000
         OI    32(@8),B'01000000'                                 0138  03110000
*         GO TO ERROR;                  /* GOTO ERR RTN: IMB102I      * 03120000
*         /************************************************************ 03130000
*         /* ERROR HANDLING:  WILL PRINT ENTIRE CARD                  * 03140000
*         /************************************************************ 03150000
*         /* TO PRINT HEADING                                         * 03160000
*         /************************************************************ 03170000
* ERROR:  K = 15;                       /* PTR TO ERROR HEADING       * 03180000
ERROR    MVI   K,15                                               0140  03190000
*         RTNPTR = ADDR(ER1);           /* SET RTN PTR                * 03200000
         LA    @F,ER1                                             0141  03210000
         ST    @F,RTNPTR                                          0141  03220000
*         GO TO INIT1;                  /* PUT HEADING IN BUF         * 03230000
         BC    15,INIT1                                           0142  03240000
*         /************************************************************ 03250000
*         /* TO PRINT FIRST 40 CHARS OF CARD                          * 03260000
*         /************************************************************ 03270000
* ER1:    PTRREG = INPTR;               /* PTR TO WHAT TO CONVT       * 03280000
ER1      L     @2,INPTR                                           0143  03290000
*         DATA = 40;                    /* NUMBER OF BYTES            * 03300000
         LA    @F,40                                              0144  03310000
         STH   @F,DATA                                            0144  03320000
*         RTNPTR = ADDR(ER2);           /* SET RTN PTR                * 03330000
         LA    @F,ER2                                             0145  03340000
         ST    @F,RTNPTR                                          0145  03350000
*         GO TO CVTHEX;                 /* CONV.TO PRT HEX IN BUF     * 03360000
         BC    15,CVTHEX                                          0146  03370000
* ER2:    RTNPTR = ADDR(ER3);           /* SET RTN PTR                * 03380000
ER2      LA    @F,ER3                                             0147  03390000
         ST    @F,RTNPTR                                          0147  03400000
*         BUF(1) = '0';                 /* TO SKIP TO NEXT LINE       * 03410000
         MVI   BUF,C'0'                                           0148  03420000
*         GO TO OBJPUT;                 /* GO PRINT OUT BUFFER        * 03430000
         BC    15,OBJPUT                                          0149  03440000
*         /************************************************************ 03450000
*         /* TO PRINT OUT LAST 40 CHAR OF CARD                        * 03460000
*         /************************************************************ 03470000
* ER3:    DATA = 40;                    /* SET NO. OF BYTES           * 03480000
ER3      LA    @F,40                                              0150  03490000
         STH   @F,DATA                                            0150  03500000
*         RTNPTR = ADDR(ER4);           /* SET RTN PTR                * 03510000
         LA    @F,ER4                                             0151  03520000
         ST    @F,RTNPTR                                          0151  03530000
*         BUF(1) = ' ';                 /* INITIALIZE  BLANKS         * 03540000
         MVI   BUF,C' '                                           0152  03550000
*         BUF(2:15) = BUF(1:14);        /* TO BLANK OUT HEADING       * 03560000
         MVC   BUF+1(14),BUF                                      0153  03570000
*         GO TO CVTHEX;                 /* CONV AND PUT ON BUF        * 03580000
         BC    15,CVTHEX                                          0154  03590000
* ER4:    RTNPTR = ADDR(READ);          /* SET RTN PTR                * 03600000
ER4      LA    @F,READ                                            0155  03610000
         ST    @F,RTNPTR                                          0155  03620000
*         BUF(1) = ' ';                 /* ASA CHAR TO PRT NEXT LINE  * 03630000
         MVI   BUF,C' '                                           0156  03640000
*         GO TO OBJPUT;                 /* PRINT OUT BUFFER           * 03650000
*         /************************************************************ 03660000
*         /* TO PRINT OUT LINE                                        * 03670000
*         /************************************************************ 03680000
* OBJPUT: REG1 = DCBOUT;                /* PICK UP DCB ADDR           * 03690000
OBJPUT   L     @8,PARMPTR                                         0158  03700000
         L     @1,4(0,@8)                                         0158  03710000
*         GENERATE( PUT   (REG1),BUF);  /* WRITE OUT BUFFER           * 03720000
          PUT   (REG1),BUF                                              03730000
         DS    0H                                                       03740000
*         IF BUF(1) = ' '               /* UPDATE LINE CTR            * 03750000
*           THEN                        /* ONLY 1 LINE PRINTED        * 03760000
         CLI   BUF,C' '                                           0160  03770000
         BC    07,@9F4                                            0160  03780000
*             LINECT = LINECT + 1;      /* ADD ON TO COUNT            * 03790000
         LA    @F,1                                               0161  03800000
         AH    @F,LINECT                                          0161  03810000
         STH   @F,LINECT                                          0161  03820000
         BC    15,@9F3                                            0162  03830000
*           ELSE                        /* 2 LINES PRINTED            * 03840000
*             LINECT = LINECT + '02'X;  /* ADD ON TO COUNT            * 03850000
@9F4     LA    @F,X'02'                                           0162  03860000
         AH    @F,LINECT                                          0162  03870000
         STH   @F,LINECT                                          0162  03880000
*         GO TO RETRN;                  /* RETURN                     * 03890000
@9F3     L     @9,RTNPTR                                          0163  03900000
         BCR   15,@9                                              0163  03910000
*         /************************************************************ 03920000
*         /* TO PROCESS SYM RECORDS                                   * 03930000
*         /************************************************************ 03940000
* SYMTYP: K = 3;                        /* SET POINTER TO MOVE HEADS  * 03950000
SYMTYP   MVI   K,3                                                0164  03960000
*         RTNPTR = ADDR(SYMLAB2);       /* SET RTN POINTER            * 03970000
         LA    @F,SYMLAB2                                         0165  03980000
         ST    @F,RTNPTR                                          0165  03990000
*         GO TO INIT1;                  /* PUT HEADING IN BUFFER      * 04000000
         BC    15,INIT1                                           0166  04010000
* SYMLAB2:K = 4;                        /* SET HEADINGS PTR           * 04020000
SYMLAB2  MVI   K,4                                                0167  04030000
*         RTNPTR = ADDR(SYMLAB3);       /* SET RTN PTR                * 04040000
         LA    @F,SYMLAB3                                         0168  04050000
         ST    @F,RTNPTR                                          0168  04060000
*         GO TO MVHDS;                  /* PUT HEADING IN BUFFER      * 04070000
         BC    15,MVHDS                                           0169  04080000
* SYMLAB3:IF NUMBYTE <= 36              /* LESS THAN 36 DATA BYTES?   * 04090000
*           THEN                        /* YES SO TRANSLATE           * 04100000
SYMLAB3  LA    @F,36                                              0170  04110000
         L     @8,INPTR                                           0170  04120000
         MVC   @TEMP2+2(2),10(@8)                                 0170  04130000
         C     @F,@TEMP2                                          0170  04140000
         BC    04,@9F2                                            0170  04150000
*             DO;                       /* ALL BYTES NOW              * 04160000
*               DATA = NUMBYTE;         /* PICK UP TOTAL NUM OF BYTES * 04170000
         MVC   DATA(2),10(@8)                                     0172  04180000
*               DATARES = '00'X;        /* REMAINING BYTES = ZERO     * 04190000
         LA    @F,X'00'                                           0173  04200000
         STH   @F,DATARES                                         0173  04210000
         BC    15,@9F1                                            0175  04220000
*             END;                      /* CONTINUE PROCESSING        * 04230000
*           ELSE                        /* MORE THAN 36 BYTES, SO     * 04240000
*             DO;                       /* TRANSLATE                  * 04250000
*               DATA = 36;              /* 36 BYTES TESTRAN BYTES AND * 04260000
@9F2     LA    @F,36                                              0176  04270000
         STH   @F,DATA                                            0176  04280000
*               DATARES = NUMBYTE - 36;       /* REST LATER           * 04290000
         LH    @F,@D5                                             0177  04300000
         L     @8,INPTR                                           0177  04310000
         MVC   @TEMP2+2(2),10(@8)                                 0177  04320000
         A     @F,@TEMP2                                          0177  04330000
         STH   @F,DATARES                                         0177  04340000
*             END;                      /* PROCESS FIRST 36 BYTES     * 04350000
*         PTRREG = ADDR(TESTDATA);      /* PTR TO BYTES TO TRANSLATE  * 04360000
@9F1     L     @8,INPTR                                           0179  04370000
         LA    @2,16(0,@8)                                        0179  04380000
*         RTNPTR = ADDR(SYMLAB4);       /* SET RTN PTR                * 04390000
         LA    @F,SYMLAB4                                         0180  04400000
         ST    @F,RTNPTR                                          0180  04410000
*         GO TO CVTHEX;                 /* GO CONVERT BYTES AND PUT     04420000
*                                          IN BUFFER                  * 04430000
         BC    15,CVTHEX                                          0181  04440000
* SYMLAB4:BUF(1) = '0';                 /* SET TO SKIP NEXT LINE      * 04450000
SYMLAB4  MVI   BUF,C'0'                                           0182  04460000
*         RTNPTR = ADDR(SYMLAB5);       /* SET RTN PTR                * 04470000
         LA    @F,SYMLAB5                                         0183  04480000
         ST    @F,RTNPTR                                          0183  04490000
*         GO TO CARDNMHD;               /* GO PUT IN CARD NUM AND       04500000
*                                          PRINT OUT LINE             * 04510000
         BC    15,CARDNMHD                                        0184  04520000
* SYMLAB5:BUF(1) = ' ';                 /* INITIALIZE BLANK           * 04530000
SYMLAB5  MVI   BUF,C' '                                           0185  04540000
*         BUF(2:121) = BUF(1:120);      /* BLANK OUT BUFFER           * 04550000
         MVC   BUF+1(120),BUF                                     0186  04560000
*         IF DATARES = '00'X            /* ANY LEFT TO TRANSLATE & MV * 04570000
*           THEN                        /* NO MORE                    * 04580000
         LA    @F,X'00'                                           0187  04590000
         MVC   @TEMP2+2(2),DATARES                                0187  04600000
         C     @F,@TEMP2                                          0187  04610000
*             GO TO READ;               /* SO GO READ NEXT CARD       * 04620000
         BC    08,READ                                            0188  04630000
*           ELSE                        /* MORE TO GO                 * 04640000
*             DO;                       /* THEREFORE CONTINUE         * 04650000
*               DATA = DATARES;         /* NUM BYTES LEFT TO DO       * 04660000
         MVC   DATA(2),DATARES                                    0190  04670000
*               RTNPTR = ADDR(SYMLAB6); /* SET RTN PTR                * 04680000
         LA    @F,SYMLAB6                                         0191  04690000
         ST    @F,RTNPTR                                          0191  04700000
*               GO TO CVTHEX;           /* GO DO REMAINING BYTES      * 04710000
         BC    15,CVTHEX                                          0192  04720000
*             END;                      /* END DO LOOP                * 04730000
* SYMLAB6:RTNPTR = ADDR(READ);          /* SET RTN PTR TO READ NEXT   * 04740000
SYMLAB6  LA    @F,READ                                            0194  04750000
         ST    @F,RTNPTR                                          0194  04760000
*         BUF(1) = ' ';                 /* ASA CHAR TO PRT NXT LINE   * 04770000
         MVI   BUF,C' '                                           0195  04780000
*         GO TO OBJPUT;                 /* GO PRINT OUT REMAINING LINE* 04790000
         BC    15,OBJPUT                                          0196  04800000
*         /************************************************************ 04810000
*         /* ESD CARD PROCESSING  - HEADINGS                          * 04820000
*         /************************************************************ 04830000
* ESDTYP: K = 5;                        /* SET HEADING PTR            * 04840000
ESDTYP   MVI   K,5                                                0197  04850000
*         RTNPTR = ADDR(ESDLAB1);       /* SET RTN PTR                * 04860000
         LA    @F,ESDLAB1                                         0198  04870000
         ST    @F,RTNPTR                                          0198  04880000
*         BUF(1) = '0';                 /* TO SKIP NEXT LINE          * 04890000
         MVI   BUF,C'0'                                           0199  04900000
*         GO TO INIT1;                  /* PUT HEADING IN BUFFER      * 04910000
         BC    15,INIT1                                           0200  04920000
* ESDLAB1:RTNPTR = ADDR(ESDLAB2);       /* SET RTN PTR                * 04930000
ESDLAB1  LA    @F,ESDLAB2                                         0201  04940000
         ST    @F,RTNPTR                                          0201  04950000
* CARDNMHD:BUF(114:121) = CARDCHAR;     /* FILL IN CC 73-76 FROM CARD * 04960000
CARDNMHD L     @8,INPTR                                           0202  04970000
         MVC   BUF+113(8),72(@8)                                  0202  04980000
*         GO TO OBJPUT;                 /* PRINT OUT BUFFER           * 04990000
         BC    15,OBJPUT                                          0203  05000000
* ESDLAB2:K = 6;                        /* SET HEADING PTR            * 05010000
ESDLAB2  MVI   K,6                                                0204  05020000
*         RTNPTR = ADDR(ESDLAB3);       /* SET RTN PTR                * 05030000
         LA    @F,ESDLAB3                                         0205  05040000
         ST    @F,RTNPTR                                          0205  05050000
*         GO TO INIT1;                  /* GO PUT HEADING IN BUFFER   * 05060000
         BC    15,INIT1                                           0206  05070000
* ESDLAB3:RTNPTR = ADDR(ESDLP1);        /* SET RTN PTR                * 05080000
ESDLAB3  LA    @F,ESDLP1                                          0207  05090000
         ST    @F,RTNPTR                                          0207  05100000
*         BUF(1) = ' ';                 /* SET TO SKIP NEXT LINE      * 05110000
         MVI   BUF,C' '                                           0208  05120000
*         GO TO OBJPUT;                 /* PRINT OUT BUFFER           * 05130000
         BC    15,OBJPUT                                          0209  05140000
*         /************************************************************ 05150000
*         /* ESD PROCESSING                                           * 05160000
*         /************************************************************ 05170000
* ESDLP1: P = NUMBYTE/16;               /* PICK UP NUMBER OF ESD ITEMS* 05180000
ESDLP1   L     @8,INPTR                                           0210  05190000
         MVC   @TEMP2+2(2),10(@8)                                 0210  05200000
         L     @E,@TEMP2                                          0210  05210000
         SRA   @E,4                                               0210  05220000
         STC   @E,P                                               0210  05230000
*         CARDPTR = INPTR + 16;         /* INITIALIZE ESD ITEM PTR    * 05240000
         LA    @F,16                                              0211  05250000
         A     @F,INPTR                                           0211  05260000
         ST    @F,CARDPTR                                         0211  05270000
*         IF FSTESDID Â¬= BUF(120:121)   /* IS 1ST ITEM AN LD ?        * 05280000
*           THEN                        /* NO                         * 05290000
         MVC   @TEMP2+2(2),BUF+119                                0212  05300000
         L     @F,@TEMP2                                          0212  05310000
         MVC   @TEMP2+2(2),14(@8)                                 0212  05320000
         C     @F,@TEMP2                                          0212  05330000
         BC    08,@9F0                                            0212  05340000
*             ESDCTR = FSTESDID - 1;    /* SO ID=ID ON CRD-1,+1 LATER * 05350000
         LH    @F,@D1                                             0213  05360000
         MVC   @TEMP2+2(2),14(@8)                                 0213  05370000
         A     @F,@TEMP2                                          0213  05380000
         STH   @F,ESDCTR                                          0213  05390000
*           ELSE;                       /* YES, LEAVE CTR AS IS       * 05400000
@9F0     EQU   *                                                  0214  05410000
*         DO Q = 1 TO P;                /* LOOP TO PROCESS ESD   CARD * 05420000
@9EF     LA    @F,1                                               0215  05430000
         BC    15,@DO9ED                                          0215  05440000
*           BUF(1) = ' ';               /* SET TO PRINT ON NEXT LINE  * 05450000
@DO9EE   MVI   BUF,C' '                                           0216  05460000
*           BUF(2:121) = BUF(1:120);    /* BLANK OUT BUFFER           * 05470000
         MVC   BUF+1(120),BUF                                     0217  05480000
* ESDNAME:  BUF(20:27) = NAME;          /* MOVE NAME TO BUFFER        * 05490000
ESDNAME  L     @8,CARDPTR                                         0218  05500000
         MVC   BUF+19(8),0(@8)                                    0218  05510000
* IDESD:    IF TYPE = '01'X             /* IS TYPE AN LD?             * 05520000
*             THEN                      /* YES                        * 05530000
IDESD    L     @8,CARDPTR                                         0219  05540000
         CLI   8(@8),X'01'                                        0219  05550000
*               GO TO ESDADDR;          /* DO NOT PROCESS ESDID FOR LD* 05560000
         BC    08,ESDADDR                                         0220  05570000
*             ELSE;                     /* NOT LD. SO PROC. ESDID     * 05580000
*           ESDCTR = ESDCTR + '0001'X;  /* UPDATE ESDID COUNTER       * 05590000
         L     @F,@X8                                             0222  05600000
         MVC   @TEMP2+2(2),ESDCTR                                 0222  05610000
         A     @F,@TEMP2                                          0222  05620000
         STH   @F,ESDCTR                                          0222  05630000
*           GENERATE;                   /* CNVT ID TO PRINTABLE DEC   * 05640000
         LH    PTRREG,ESDCTR           PICK UP ESD ID                   05650000
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL               05660000
         UNPK  CVTWORK(5),DBLWD+5(3)   UNPACK IT                        05670000
         OI    CVTWORK+4,X'F0'     'OR' OUT LAST ZONE                   05680000
         MVC   BUF+3(4),CVTWORK+1   MOVE ID INTO BUF                    05690000
         DS    0H                                                       05700000
* ESDADDR:  DATA = '03'X;               /* NUM BYTES TO TRANS. TO HEX * 05710000
ESDADDR  LA    @F,X'03'                                           0224  05720000
         STH   @F,DATA                                            0224  05730000
*           I = 30;                     /* SET PTR IN OUTPUT BUFFER   * 05740000
         MVI   I,30                                               0225  05750000
*           PTRREG = ADDR(ADRES);       /* PTR TO INPUT:ADDR          * 05760000
         L     @8,CARDPTR                                         0226  05770000
         LA    @2,9(0,@8)                                         0226  05780000
*           RTNPTR = ADDR(IDLTH);       /* SET RTN PTR                * 05790000
         LA    @F,IDLTH                                           0227  05800000
         ST    @F,RTNPTR                                          0227  05810000
*           GO TO BTHLP2;               /* GO TRANS AND PUT IN BUFFER * 05820000
         BC    15,BTHLP2                                          0228  05830000
* IDLTH:    DATA = '03'X;               /* NUM OF BYTES TO TRANS      * 05840000
IDLTH    LA    @F,X'03'                                           0229  05850000
         STH   @F,DATA                                            0229  05860000
*           I = 39;                     /* WHERE TO PLACE IN BUFFER   * 05870000
         MVI   I,39                                               0230  05880000
*           PTRREG = ADDR(IDORLGTH);    /* PTR TO BYTES TO TRANSLATE  * 05890000
         L     @8,CARDPTR                                         0231  05900000
         LA    @2,13(0,@8)                                        0231  05910000
*           RTNPTR = ADDR(ESDLP2);      /* SET RTN PTR                * 05920000
         LA    @F,ESDLP2                                          0232  05930000
         ST    @F,RTNPTR                                          0232  05940000
*           GO TO BTHLP2;               /* GO TRANS. ID/LTH INTO BUF  * 05950000
         BC    15,BTHLP2                                          0233  05960000
* ESDLP2:   DO I = 1 TO 8;              /* DO LOOP TO GET TYPE        * 05970000
ESDLP2   LA    @F,1                                               0234  05980000
         STC   @F,I                                               0234  05990000
*             IF ESDTAB(I) = TYPE       /* IS TYPE MATCH FOUND        * 06000000
*               THEN                    /* YES                        * 06010000
@DO9EA   L     @8,CARDPTR                                         0235  06020000
         SR    @F,@F                                              0235  06030000
         IC    @F,8(0,@8)                                         0235  06040000
         SR    @9,@9                                              0235  06050000
         IC    @9,I                                               0235  06060000
         SR    @0,@0                                              0235  06070000
         IC    @0,ESDTABLE-1(@9)                                  0235  06080000
         CR    @F,@0                                              0235  06090000
         BC    07,@9E6                                            0235  06100000
*                 DO;                   /* PROCESS TYPE               * 06110000
*                   BUF(11:16) = TYPTAB(I);  /* PUT TYPE IN BUFFER    * 06120000
         SR    @6,@6                                              0237  06130000
         IC    @6,I                                               0237  06140000
         MH    @6,@D6                                             0237  06150000
         LA    @E,ESDTABLE+2(@6)                                  0237  06160000
         MVC   BUF+10(6),0(@E)                                    0237  06170000
*                   GO TO ESDLAB4;      /* CONTINUE PROCESSING        * 06180000
         BC    15,ESDLAB4                                         0238  06190000
*                 END;                  /* END IF MATCH FOUND         * 06200000
*               ELSE;                   /* TYPE NOT FOUND,CONT SRCH   * 06210000
@9E6     EQU   *                                                  0240  06220000
*           END ESDLP2;                 /* CONTINUE SEARCH            * 06230000
*           ERRORS(3) = '1'B;           /* ERROR:TYPE NOT FOUND       * 06240000
@9E5     SR    @F,@F                                              0241  06250000
         IC    @F,I                                               0241  06260000
         AH    @F,@D3                                             0241  06270000
@DO9E9   STC   @F,I                                               0241  06280000
         CH    @F,@D7                                             0241  06290000
         BC    12,@DO9EA                                          0241  06300000
         L     @8,PARMPTR                                         0242  06310000
         OI    32(@8),B'00100000'                                 0242  06320000
*           GO TO ERROR;                /* GO PRINT OUT CARD AND ERROR* 06330000
         BC    15,ERROR                                           0243  06340000
* ESDLAB4:  RTNPTR = ADDR(ESDLAB5);     /* SET RTN PTR TO READ NEXT CD* 06350000
ESDLAB4  LA    @F,ESDLAB5                                         0244  06360000
         ST    @F,RTNPTR                                          0244  06370000
*           BUF(1) = ' ';               /* ASA CHAR TO PRT NXT LINE   * 06380000
         MVI   BUF,C' '                                           0245  06390000
*           GO TO OBJPUT;               /* PRINT OUT BUFFER           * 06400000
         BC    15,OBJPUT                                          0246  06410000
* ESDLAB5:  CARDPTR = CARDPTR + 16;     /* UPDATE ESD ITEM POINTER    * 06420000
ESDLAB5  LA    @F,16                                              0247  06430000
         A     @F,CARDPTR                                         0247  06440000
         ST    @F,CARDPTR                                         0247  06450000
*         END;                          /* END LOOP  ESD ITEMS:ESDLP1 * 06460000
*         GO TO READ;                   /* READ NEXT CARD             * 06470000
         SR    @F,@F                                              0248  06480000
         IC    @F,Q                                               0248  06490000
         AH    @F,@D3                                             0248  06500000
@DO9ED   STC   @F,Q                                               0248  06510000
         SR    @0,@0                                              0248  06520000
         IC    @0,P                                               0248  06530000
         CR    @F,@0                                              0248  06540000
         BC    12,@DO9EE                                          0248  06550000
         BC    15,READ                                            0249  06560000
*         /************************************************************ 06570000
*         /* TXT PROCESSING: MOVE IN HEADINGS                         * 06580000
*         /************************************************************ 06590000
* TXTTYP: K = 7;                        /* SET HEADING PTR            * 06600000
TXTTYP   MVI   K,7                                                0250  06610000
*         BUF(1) = '0';                 /* SKIP NEXT PRINTING LINE    * 06620000
         MVI   BUF,C'0'                                           0251  06630000
*         RTNPTR = ADDR(TXTLAB1);       /* SET RTN PTR                * 06640000
         LA    @F,TXTLAB1                                         0252  06650000
         ST    @F,RTNPTR                                          0252  06660000
*         GO TO INIT1;                  /* PUT HEADING IN BUFFER      * 06670000
         BC    15,INIT1                                           0253  06680000
* TXTLAB1:RTNPTR = ADDR(TXTLAB2);       /* SET RTN PTR                * 06690000
TXTLAB1  LA    @F,TXTLAB2                                         0254  06700000
         ST    @F,RTNPTR                                          0254  06710000
*         GO TO CARDNMHD;               /*PUT IN LAST 8 BYTES & PRINT * 06720000
         BC    15,CARDNMHD                                        0255  06730000
* TXTLAB2:BUF(1) = ' ';                 /* TO PRINT ON NEXT LINE      * 06740000
TXTLAB2  MVI   BUF,C' '                                           0256  06750000
*         K = 8;                        /* SET HEADING PTR            * 06760000
         MVI   K,8                                                0257  06770000
*         RTNPTR = ADDR(TXTLAB3);       /* SET RTN PTR                * 06780000
         LA    @F,TXTLAB3                                         0258  06790000
         ST    @F,RTNPTR                                          0258  06800000
*         GO TO INIT1;                  /* PUT HEADINGS IN BUFFER     * 06810000
         BC    15,INIT1                                           0259  06820000
*         /************************************************************ 06830000
*         /* TXT PROCESSING: CARD FORMATTING AND PRINTING             * 06840000
*         /************************************************************ 06850000
* TXTLAB3:DATA = '03'X;                 /* NUM BYTES TO TRANS INTO BUF* 06860000
TXTLAB3  LA    @F,X'03'                                           0260  06870000
         STH   @F,DATA                                            0260  06880000
*         I = 8;                        /* WHERE TO PUT IN BUFFER     * 06890000
         MVI   I,8                                                0261  06900000
*         PTRREG = ADDR(TXTADDR);       /* PTR TO BYTES TO BE TRANS   * 06910000
         L     @8,INPTR                                           0262  06920000
         LA    @2,5(0,@8)                                         0262  06930000
*         RTNPTR = ADDR(TXTLAB4);       /* SET RTN PTR                * 06940000
         LA    @F,TXTLAB4                                         0263  06950000
         ST    @F,RTNPTR                                          0263  06960000
*         GO TO BTHLP2;                 /* GO TRANS AND PUT IN BUFFER * 06970000
         BC    15,BTHLP2                                          0264  06980000
* TXTLAB4:GENERATE;                     /* ESDID TO PRINTABLE DEC     * 06990000
TXTLAB4  EQU   *                                                  0265  07000000
         L     ADRREG,INPTR            PICK UP INPTR                    07010000
         LH    PTRREG,ESDIFER(ADRREG)  PICK UP ESD ID                   07020000
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL               07030000
         UNPK  CVTWORK(5),DBLWD+5(3)  UNPACK IT                         07040000
         OI    CVTWORK+4,X'F0'      'OR' OUT LAST ZONE                  07050000
         MVC   BUF+21(4),CVTWORK+1  MOVE INTO BUF                       07060000
         DS    0H                                                       07070000
*         I = 33;                       /* SET INDEX INTO OUTPUT BUF  * 07080000
         MVI   I,33                                               0266  07090000
*         IF NUMBYTE3 > 40              /* MORE THAN 40 TEXT BYTES ?  * 07100000
*           THEN                        /* THEN                       * 07110000
         LA    @F,40                                              0267  07120000
         L     @8,INPTR                                           0267  07130000
         MVC   @TEMP2+2(2),10(@8)                                 0267  07140000
         C     @F,@TEMP2                                          0267  07150000
         BC    10,@9E4                                            0267  07160000
*             DO;                       /* TRANS. FIRST 40 BYTES 1ST  * 07170000
*                DATA = 40;             /* PICK UP NUM OF BYTES       * 07180000
         LA    @F,40                                              0269  07190000
         STH   @F,DATA                                            0269  07200000
*                DATARES = NUMBYTE3 - 40;     /* SAVE THE REMAINDER   * 07210000
         LH    @F,@D8                                             0270  07220000
         MVC   @TEMP2+2(2),10(@8)                                 0270  07230000
         A     @F,@TEMP2                                          0270  07240000
         STH   @F,DATARES                                         0270  07250000
         BC    15,@9E3                                            0272  07260000
*             END;                      /* CONTINUE  PROCESSING       * 07270000
*           ELSE                        /* LESS THAN 40 BYTES OF TXT  * 07280000
*             DO;                       /* TRANSLATE ALL NOW          * 07290000
*                DATA = NUMBYTE3;       /* PICK UP NUMBER OF BYTES    * 07300000
@9E4     L     @8,INPTR                                           0273  07310000
         MVC   DATA(2),10(@8)                                     0273  07320000
*                DATARES = '00'X;       /* ZERO OUT REMAINDER         * 07330000
         LA    @F,X'00'                                           0274  07340000
         STH   @F,DATARES                                         0274  07350000
*             END;                      /* CONTINUE PROCESSING        * 07360000
*         RTNPTR = ADDR(TXTLAB5);       /* SET RTN PTR                * 07370000
@9E3     LA    @F,TXTLAB5                                         0276  07380000
         ST    @F,RTNPTR                                          0276  07390000
*         PTRREG = ADDR(TXTDATA);       /* PTR TO BYTES TO BE TRANS   * 07400000
         L     @8,INPTR                                           0277  07410000
         LA    @2,16(0,@8)                                        0277  07420000
*         GO TO BTHLP2;                 /* TRANS TXT AND PUT IN BUFFER* 07430000
         BC    15,BTHLP2                                          0278  07440000
* TXTLAB5:RTNPTR = ADDR(TXTLAB6);       /* SET RTN PTR                * 07450000
TXTLAB5  LA    @F,TXTLAB6                                         0279  07460000
         ST    @F,RTNPTR                                          0279  07470000
*         BUF(1) = ' ';                 /* ASA CHAR TO PRT NXT LINE   * 07480000
         MVI   BUF,C' '                                           0280  07490000
*         GO TO OBJPUT;                 /* PRINT BUFFER               * 07500000
         BC    15,OBJPUT                                          0281  07510000
* TXTLAB6:BUF(1) = ' ';                 /* SET ASA CHAR FOR NEXT LINE * 07520000
TXTLAB6  MVI   BUF,C' '                                           0282  07530000
*         BUF(2:121) = BUF(1:120);      /* BLANK OUT HEADINGS         * 07540000
         MVC   BUF+1(120),BUF                                     0283  07550000
*         IF DATARES = '00'X            /* ANY MORE TXT TO TRANS?     * 07560000
*           THEN                        /* NO                         * 07570000
         LA    @F,X'00'                                           0284  07580000
         MVC   @TEMP2+2(2),DATARES                                0284  07590000
         C     @F,@TEMP2                                          0284  07600000
*             GO TO READ;               /* GO READ NEXT CARD          * 07610000
         BC    08,READ                                            0285  07620000
*           ELSE                        /* YES                        * 07630000
*             DO;                       /* SO                         * 07640000
*               RTNPTR = ADDR(TXTLAB7);  /* SET RTN PTR               * 07650000
         LA    @F,TXTLAB7                                         0287  07660000
         ST    @F,RTNPTR                                          0287  07670000
*               I = 33;                 /* SET INDEX INTO BUFFER      * 07680000
         MVI   I,33                                               0288  07690000
*               DATA = DATARES;         /* NUM BYTES LEFT TO TRANS    * 07700000
         MVC   DATA(2),DATARES                                    0289  07710000
*               GO TO BTHLP2;           /* GO TRANSLATE INTO BUFFER   * 07720000
         BC    15,BTHLP2                                          0290  07730000
*             END;                      /* END DO                     * 07740000
* TXTLAB7:RTNPTR = ADDR(READ);          /* SET RTN PTR TO READ NEXT CD* 07750000
TXTLAB7  LA    @F,READ                                            0292  07760000
         ST    @F,RTNPTR                                          0292  07770000
*         BUF(1) = ' ';                 /* ASA CHAR TO PRT NXT LINE   * 07780000
         MVI   BUF,C' '                                           0293  07790000
*         GO TO OBJPUT;                 /* PRINT OUT BUFFER           * 07800000
         BC    15,OBJPUT                                          0294  07810000
*         /************************************************************ 07820000
*         /* RLD PROCESSING: HEADINGS                                 * 07830000
*         /************************************************************ 07840000
* RLDTYP: K = 9;                        /* SET HEADING PTR            * 07850000
RLDTYP   MVI   K,9                                                0295  07860000
*         RTNPTR = ADDR(RLDLAB1);       /* SET RTN PTR                * 07870000
         LA    @F,RLDLAB1                                         0296  07880000
         ST    @F,RTNPTR                                          0296  07890000
*         BUF(1) = '0';                 /* SKIP NEXT PRINTING LINE    * 07900000
         MVI   BUF,C'0'                                           0297  07910000
*         GO TO INIT1;                  /* GO PUT HEADING IN BUFFER   * 07920000
         BC    15,INIT1                                           0298  07930000
* RLDLAB1:RTNPTR = ADDR(RLDLAB2);       /* SET RTN PTR                * 07940000
RLDLAB1  LA    @F,RLDLAB2                                         0299  07950000
         ST    @F,RTNPTR                                          0299  07960000
*         GO TO CARDNMHD;               /* PRINT BUFFER W/ LAST 8 CC  * 07970000
         BC    15,CARDNMHD                                        0300  07980000
* RLDLAB2:RLDPTR = INPTR + '0010'X;     /* PTR TO RLD CARD ITEM       * 07990000
RLDLAB2  L     @F,@X10                                            0301  08000000
         A     @F,INPTR                                           0301  08010000
         ST    @F,RLDPTR                                          0301  08020000
*         RLDCTR = NUMBYTE;             /* PICK UP NUM. ITEM BYTES    * 08030000
         L     @8,INPTR                                           0302  08040000
         MVC   RLDCTR(2),10(@8)                                   0302  08050000
* RLDLB2A:BUF(1) = ' ';                 /* PRINT ON NEXT LINE         * 08060000
RLDLB2A  MVI   BUF,C' '                                           0303  08070000
*         BUF(2:121) = BUF(1:120);      /* BLANK OUT BUFFER           * 08080000
         MVC   BUF+1(120),BUF                                     0304  08090000
*         I = 17;                       /* WHERE TO PLACE IN BUFFER   * 08100000
         MVI   I,17                                               0305  08110000
* RLDLAB3:IF RLDSW1 = '01'X             /* USE SAME PTRS AS LAST TIME?* 08120000
*           THEN                        /* YES                        * 08130000
RLDLAB3  CLI   RLDSW1,X'01'                                       0306  08140000
         BC    07,@9E2                                            0306  08150000
*             DO;                       /* FILL INTO OUTPUT BUFFER    * 08160000
*               BUF(I:I+3) = RPTRSAVE;  /* R POINTER                  * 08170000
         SR    @8,@8                                              0308  08180000
         IC    @8,I                                               0308  08190000
         LA    @A,BUF-1(@8)                                       0308  08200000
         MVC   0(4,@A),RPTRSAVE                                   0308  08210000
*               I = I + 8;              /* UPDATE BUFFER INDEX        * 08220000
         LA    @F,8                                               0309  08230000
         SR    @0,@0                                              0309  08240000
         IC    @0,I                                               0309  08250000
         AR    @F,@0                                              0309  08260000
         STC   @F,I                                               0309  08270000
*               BUF(I:I+3) = PPTRSAVE;  /* P POINTER                  * 08280000
         SR    @8,@8                                              0310  08290000
         IC    @8,I                                               0310  08300000
         LA    @A,BUF-1(@8)                                       0310  08310000
         MVC   0(4,@A),PPTRSAVE                                   0310  08320000
*               RLDSW2 = '01'X;         /* SET SWITCH TO UPDATE CTRS. * 08330000
         MVI   RLDSW2,X'01'                                       0311  08340000
*               RLDFLAG = FLAG2;        /* SAVE FLAG BYTE             * 08350000
         L     @9,RLDPTR                                          0312  08360000
         MVC   RLDFLAG(1),0(@9)                                   0312  08370000
*               RLDADDR = RLDADR2;      /* SAVE RLD ADDRESS           * 08380000
         MVC   RLDADDR(3),1(@9)                                   0313  08390000
*               GO TO RLDLAB4;          /* CONTINUE PROCESSING        * 08400000
         BC    15,RLDLAB4                                         0314  08410000
*             END;                      /* POINTERS IN BUFFER         * 08420000
*           ELSE                        /* MUST FILL IN NEW POINTERS  * 08430000
*             DO;                       /* POINTER CONVERSION         * 08440000
@9E2     EQU   *                                                  0316  08450000
*               GENERATE;               /* TRANS R PTR TO PRINT. DEC  * 08460000
         L     ADRREG,RLDPTR           PICK UP RLD ITEM PTR             08470000
         LH    PTRREG,RPTR(ADRREG)     PICK UP R PTR                    08480000
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL               08490000
         UNPK  CVTWORK(5),DBLWD+5(3)  UNPACK IT                         08500000
         OI    CVTWORK+4,X'F0'      'OR' OUT LAST ZONE                  08510000
         DS    0H                                                       08520000
*               BUF(I:I+3) = CVTWORK(2:5);  /* MOVE R PTR INTO BUFFER * 08530000
         SR    @8,@8                                              0318  08540000
         IC    @8,I                                               0318  08550000
         LA    @A,BUF-1(@8)                                       0318  08560000
         MVC   0(4,@A),CVTWORK+1                                  0318  08570000
*               GENERATE;               /* TRANS P PTR                * 08580000
         L     ADRREG,RLDPTR           PICK UP RLD ITEM PTR             08590000
         LH    PTRREG,PPTR(ADRREG)     PICK UP P PTR                    08600000
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL               08610000
         UNPK  CVTWORK(5),DBLWD+5(3)  UNPACK IT                         08620000
         OI    CVTWORK+4,X'F0'      'OR' OUT LAST ZONE                  08630000
         DS    0H                                                       08640000
*               I = I + 8;              /* UPDATE BUFFER PTR.         * 08650000
         LA    @F,8                                               0320  08660000
         SR    @0,@0                                              0320  08670000
         IC    @0,I                                               0320  08680000
         AR    @F,@0                                              0320  08690000
         STC   @F,I                                               0320  08700000
*               BUF(I:I+3) = CVTWORK(2:5);   /* MOVE INTO BUFFER      * 08710000
         SR    @8,@8                                              0321  08720000
         IC    @8,I                                               0321  08730000
         LA    @A,BUF-1(@8)                                       0321  08740000
         MVC   0(4,@A),CVTWORK+1                                  0321  08750000
*               RLDFLAG = FLAGS;        /* SAVE FLAG BYTE             * 08760000
         L     @9,RLDPTR                                          0322  08770000
         MVC   RLDFLAG(1),4(@9)                                   0322  08780000
*               RLDADDR = RLDADR;       /* SAVE RLD ADDRESS           * 08790000
         MVC   RLDADDR(3),5(@9)                                   0323  08800000
*               RLDSW2 = '00'X;         /* SET SWITCH TO  UPDATE PTRS * 08810000
         MVI   RLDSW2,X'00'                                       0324  08820000
*             END;                      /* END  CALCU.  IN PTRS       * 08830000
* RLDLAB4:DATA = '01'X;                 /* NUM BYTES TO TRANS TO HEX  * 08840000
@9E1     EQU   *                                                  0326  08850000
RLDLAB4  LA    @F,X'01'                                           0326  08860000
         STH   @F,DATA                                            0326  08870000
*         PTRREG = ADDR(RLDFLAG);       /* PICK UP ADDR OF FLAG BYTE  * 08880000
         LA    @2,RLDFLAG                                         0327  08890000
*         RTNPTR = ADDR(RLDLAB5);       /* SET RTN PTR                * 08900000
         LA    @F,RLDLAB5                                         0328  08910000
         ST    @F,RTNPTR                                          0328  08920000
*         I = I + 9;                    /* SET BUFFER PTR             * 08930000
         LA    @F,9                                               0329  08940000
         SR    @0,@0                                              0329  08950000
         IC    @0,I                                               0329  08960000
         AR    @F,@0                                              0329  08970000
         STC   @F,I                                               0329  08980000
*         GO TO BTHLP2;                 /* GO TRANSLATE INTO BUFFER   * 08990000
         BC    15,BTHLP2                                          0330  09000000
* RLDLAB5:RTNPTR = ADDR(RLDLAB6);       /* SET RTN PTR                * 09010000
RLDLAB5  LA    @F,RLDLAB6                                         0331  09020000
         ST    @F,RTNPTR                                          0331  09030000
*         PTRREG = ADDR(RLDADDR);       /* PTR TO WHAT TO TRANS       * 09040000
         LA    @2,RLDADDR                                         0332  09050000
*         I = I + 6;                    /* SET BUFFER POINTER         * 09060000
         LA    @F,6                                               0333  09070000
         SR    @0,@0                                              0333  09080000
         IC    @0,I                                               0333  09090000
         AR    @F,@0                                              0333  09100000
         STC   @F,I                                               0333  09110000
*         DATA = '03'X;                 /* NUM BYTES TO TRANS         * 09120000
         LA    @F,X'03'                                           0334  09130000
         STH   @F,DATA                                            0334  09140000
*         GO TO BTHLP2;                 /* GO TRANS INOT BUFFER       * 09150000
         BC    15,BTHLP2                                          0335  09160000
* RLDLAB6:IF PTRFLAG = '1'B             /* USE SAME PTRS FOR NEXT ITEM* 09170000
*           THEN                        /* YES, SAME PTRS             * 09180000
RLDLAB6  TM    RLDFLAG,B'00000001'                                0336  09190000
         BC    12,@9E0                                            0336  09200000
*             DO;                       /* SO SAVE PTRS               * 09210000
*               RPTRSAVE = BUF(I-23:I-20);  /* R PTR SAVED            * 09220000
         LH    @8,@D9                                             0338  09230000
         SR    @0,@0                                              0338  09240000
         IC    @0,I                                               0338  09250000
         AR    @8,@0                                              0338  09260000
         LH    @9,@D10                                            0338  09270000
         IC    @0,I                                               0338  09280000
         AR    @9,@0                                              0338  09290000
         SR    @8,@9                                              0338  09300000
         XC    @TEMP4(4),@TEMP4                                   0338  09310000
         LA    @E,BUF-1(@9)                                       0338  09320000
         LA    @A,@TEMP4+3                                        0338  09330000
         SR    @A,@8                                              0338  09340000
         EX    @8,@MVC                                            0338  09350000
         L     @F,@TEMP4                                          0338  09360000
         ST    @F,RPTRSAVE                                        0338  09370000
*               PPTRSAVE = BUF(I-15:I-12);  /* P PTR SAVED            * 09380000
         LH    @8,@D11                                            0339  09390000
         IC    @0,I                                               0339  09400000
         AR    @8,@0                                              0339  09410000
         LH    @9,@D12                                            0339  09420000
         IC    @0,I                                               0339  09430000
         AR    @9,@0                                              0339  09440000
         SR    @8,@9                                              0339  09450000
         XC    @TEMP4(4),@TEMP4                                   0339  09460000
         LA    @E,BUF-1(@9)                                       0339  09470000
         LA    @A,@TEMP4+3                                        0339  09480000
         SR    @A,@8                                              0339  09490000
         EX    @8,@MVC                                            0339  09500000
         L     @F,@TEMP4                                          0339  09510000
         ST    @F,PPTRSAVE                                        0339  09520000
*               RLDSW1 = '01'X;         /* TURN ON SWITCH: SAME PTRS  * 09530000
         MVI   RLDSW1,X'01'                                       0340  09540000
*               GO TO RLDLAB7;          /* CONTINUE                   * 09550000
         BC    15,RLDLAB7                                         0341  09560000
*             END;                      /* END SAVE PTRS FOR NEXT ITEM* 09570000
*           ELSE                        /* DON'T SAME PTRS            * 09580000
*             RLDSW1 = '00'X;           /* TURN  SWITCH OFF           * 09590000
@9E0     MVI   RLDSW1,X'00'                                       0343  09600000
*         /************************************************************ 09610000
*         /* TO UPDATE COUNTERS                                       * 09620000
*         /************************************************************ 09630000
* RLDLAB7:IF RLDSW2 = '01'X             /* WERE  OLD PTRS USED HERE?  * 09640000
*           THEN                        /* YES                        * 09650000
@9DF     EQU   *                                                  0344  09660000
RLDLAB7  CLI   RLDSW2,X'01'                                       0344  09670000
         BC    07,@9DE                                            0344  09680000
*             DO;                       /* UPDATE PTRS BY 4           * 09690000
*               RLDPTR = RLDPTR + 4;    /* PTR TO DATA ITEM           * 09700000
         LA    @F,4                                               0346  09710000
         A     @F,RLDPTR                                          0346  09720000
         ST    @F,RLDPTR                                          0346  09730000
*               RLDCTR = RLDCTR - 4;    /* COUNTER FOR LOOP           * 09740000
         LH    @F,RLDCTR                                          0347  09750000
         SH    @F,@D13                                            0347  09760000
         STH   @F,RLDCTR                                          0347  09770000
*               RLDSW2 = '00'X;         /* TURN OFF SWITCH            * 09780000
         MVI   RLDSW2,X'00'                                       0348  09790000
         BC    15,@9DD                                            0350  09800000
*             END;                      /* END UPDATE FOR OLD PTRS    * 09810000
*           ELSE                        /* NEW PTRS USED              * 09820000
*             DO;                       /* UPDATE BY 8                * 09830000
*               RLDPTR = RLDPTR + 8;      /* PTR TO DATA ITEM         * 09840000
@9DE     LA    @F,8                                               0351  09850000
         A     @F,RLDPTR                                          0351  09860000
         ST    @F,RLDPTR                                          0351  09870000
*               RLDCTR = RLDCTR - 8;      /* LOOP CTR                 * 09880000
         LH    @F,RLDCTR                                          0352  09890000
         SH    @F,@D7                                             0352  09900000
         STH   @F,RLDCTR                                          0352  09910000
*             END;                      /* COUNTERS UPDATED FOR NEW   * 09920000
* RLDLAB8:IF RLDCTR = '0000'X           /* FINISHED WITH PROCESSING?  * 09930000
*           THEN                        /* YES                        * 09940000
@9DD     EQU   *                                                  0354  09950000
RLDLAB8  L     @F,@X1                                             0354  09960000
         CH    @F,RLDCTR                                          0354  09970000
         BC    07,@9DC                                            0354  09980000
*             DO;                       /*  GO TO                     * 09990000
*               RTNPTR = ADDR(READ);    /*  READ NEXT CARD UPON RETURN* 10000000
         LA    @F,READ                                            0356  10010000
         ST    @F,RTNPTR                                          0356  10020000
*               BUF(1) = ' ';           /* ASA CHAR TO PRT NXT LINE   * 10030000
         MVI   BUF,C' '                                           0357  10040000
*               GO TO OBJPUT;           /*  PRINT LINE                * 10050000
         BC    15,OBJPUT                                          0358  10060000
*             END;                      /* RLD CARD FINISHED          * 10070000
*           ELSE;                       /* CONTINUE PROCESSING        * 10080000
@9DC     EQU   *                                                  0360  10090000
*         IF I >= 74                    /* IS LINE FULL?              * 10100000
*           THEN                        /* YES                        * 10110000
@9DB     CLI   I,74                                               0361  10120000
         BC    04,@9DA                                            0361  10130000
*             DO;                       /* THEREFORE                  * 10140000
*               RTNPTR = ADDR(RLDLB2A); /* CONTINUE UPON RETURN       * 10150000
         LA    @F,RLDLB2A                                         0363  10160000
         ST    @F,RTNPTR                                          0363  10170000
*               GO TO OBJPUT;           /* PRINT LINE                 * 10180000
         BC    15,OBJPUT                                          0364  10190000
*             END;                      /* LINE FINISHED              * 10200000
*           ELSE                        /* LINE NOT FINISHED          * 10210000
*             DO;                       /* THEREFORE                  * 10220000
*               I = I + 8;              /* UPDATE BUFFER INDEX        * 10230000
@9DA     LA    @F,8                                               0367  10240000
         SR    @0,@0                                              0367  10250000
         IC    @0,I                                               0367  10260000
         AR    @F,@0                                              0367  10270000
         STC   @F,I                                               0367  10280000
*               GO TO RLDLAB3;          /* AND CONTINUE ON THIS LINE  * 10290000
         BC    15,RLDLAB3                                         0368  10300000
*             END;                      /* END IF LINE NOT FINISHED   * 10310000
*         /************************************************************ 10320000
*         /* END PROCESSING:  HEADINGS                                * 10330000
*         /************************************************************ 10340000
* ENDTYP: K = 10;                       /* SET HEADING PTR            * 10350000
@9D9     EQU   *                                                  0370  10360000
ENDTYP   MVI   K,10                                               0370  10370000
*         RTNPTR = ADDR(ENDLAB1);       /* SET RTN PTR                * 10380000
         LA    @F,ENDLAB1                                         0371  10390000
         ST    @F,RTNPTR                                          0371  10400000
*         GO TO INIT1;                  /* PUT HEADING IN BUFFER      * 10410000
         BC    15,INIT1                                           0372  10420000
*         /************************************************************ 10430000
*         /* END CARD PROCESSING: TO PROCESS DATA                     * 10440000
*         /************************************************************ 10450000
* ENDLAB1:IF EPNAME = BUF(113:120)      /* CHECK FOR ENTRY PT NAME    * 10460000
*           THEN                        /* NO EP NAME                 * 10470000
ENDLAB1  L     @8,INPTR                                           0373  10480000
         CLC   16(8,@8),BUF+112                                   0373  10490000
*             GO TO ENDTYP1;            /* THEN TYPE 1 END CARD, GO DO* 10500000
         BC    08,ENDTYP1                                         0374  10510000
*           ELSE;                       /* YES EP NAME, SO PROCESS    * 10520000
*         K = 12;                       /* SET HEDING PTR FOR EP NAME * 10530000
         MVI   K,12                                               0376  10540000
*         RTNPTR = ADDR(ENDLAB2);       /* SET RTN PTR                * 10550000
         LA    @F,ENDLAB2                                         0377  10560000
         ST    @F,RTNPTR                                          0377  10570000
*         GO TO MVHDS;                  /* PUT HEADING IN BUFFER      * 10580000
         BC    15,MVHDS                                           0378  10590000
* ENDLAB2:BUF(26:33) = EPNAME;          /* PUT ENTRY PT NAME IN BUF   * 10600000
ENDLAB2  L     @8,INPTR                                           0379  10610000
         MVC   BUF+25(8),16(@8)                                   0379  10620000
* ENDLB2A:IF LTHBYTE = '00'X            /* IS THERE ANY LENGTH?       * 10630000
*           THEN                        /* YES, SO PROCESS            * 10640000
ENDLB2A  L     @8,INPTR                                           0380  10650000
         CLI   28(@8),X'00'                                       0380  10660000
*             GO TO ENDLTH;             /* GO PROCESS LENGTH          * 10670000
         BC    08,ENDLTH                                          0381  10680000
*           ELSE;                       /* NO LENGTH SO CONT.         * 10690000
* ENDLAB3:BUF(69:107) = CMPDATA;        /* COMPILER DATA MOVED IN BUF * 10700000
ENDLAB3  L     @8,INPTR                                           0383  10710000
         MVC   BUF+68(39),32(@8)                                  0383  10720000
*         RTNPTR = ADDR(READ);          /* END PROC.,RTN TO READ NEXT * 10730000
         LA    @F,READ                                            0384  10740000
         ST    @F,RTNPTR                                          0384  10750000
*         ESDCTR = '0000'X;             /* REINITIALIZE ESD ID CTR    * 10760000
         MVC   ESDCTR(2),@X1+2                                    0385  10770000
*         BUF(1) = '0';                 /* ASA CHAR TO SKIP NEXT LINE * 10780000
         MVI   BUF,C'0'                                           0386  10790000
*         GO TO CARDNMHD;               /* MOVE LAST 8 CC TO BUF & PRT* 10800000
         BC    15,CARDNMHD                                        0387  10810000
* ENDTYP1:IF ENDADDR = BUF(113:115)     /* ANY ADDR ON CARD?          * 10820000
*           THEN                        /* NO, GO CHECK FOR LENGTH    * 10830000
ENDTYP1  MVC   @TEMP3+1(3),BUF+112                                0388  10840000
         L     @F,@TEMP3                                          0388  10850000
         L     @8,INPTR                                           0388  10860000
         MVC   @TEMP3+1(3),5(@8)                                  0388  10870000
         C     @F,@TEMP3                                          0388  10880000
*             GO TO ENDLAB5;            /* GO CHECK ESD ID            * 10890000
         BC    08,ENDLAB5                                         0389  10900000
*           ELSE;                       /* YES, PROCESS ADDR          * 10910000
*         K = 11;                       /* SET HEADING PTR            * 10920000
         MVI   K,11                                               0391  10930000
*         RTNPTR = ADDR(ENDLAB4);       /* SET RTN PTR                * 10940000
         LA    @F,ENDLAB4                                         0392  10950000
         ST    @F,RTNPTR                                          0392  10960000
*         GO TO MVHDS;                  /* GO PUT HEADING IN BUFFER   * 10970000
         BC    15,MVHDS                                           0393  10980000
* ENDLAB4:I = 26;                       /* SET BUFFER PTR             * 10990000
ENDLAB4  MVI   I,26                                               0394  11000000
*         DATA = '03'X;                 /*  NUM BYTES TO TRANS        * 11010000
         LA    @F,X'03'                                           0395  11020000
         STH   @F,DATA                                            0395  11030000
*         RTNPTR = ADDR(ENDLAB5);       /* SET RTN PTR                * 11040000
         LA    @F,ENDLAB5                                         0396  11050000
         ST    @F,RTNPTR                                          0396  11060000
*         PTRREG = ADDR(ENDADDR);       /* BYTES TO BE TRANS. PTR     * 11070000
         L     @8,INPTR                                           0397  11080000
         LA    @2,5(0,@8)                                         0397  11090000
*         GO TO BTHLP2;                 /* TRANS ADDR AND PUT IN BUF  * 11100000
         BC    15,BTHLP2                                          0398  11110000
* ENDLAB5:IF ENDESD = BUF(113:114)      /* IS THERE AN ESD ID PRESENT?* 11120000
*           THEN                        /* NO                         * 11130000
ENDLAB5  MVC   @TEMP2+2(2),BUF+112                                0399  11140000
         L     @F,@TEMP2                                          0399  11150000
         L     @8,INPTR                                           0399  11160000
         MVC   @TEMP2+2(2),14(@8)                                 0399  11170000
         C     @F,@TEMP2                                          0399  11180000
*             GO TO ENDLB2A;            /* GO CONTINUE PROCESSING     * 11190000
         BC    08,ENDLB2A                                         0400  11200000
*           ELSE;                       /* ESD ID PRESENT, SO PROCESS * 11210000
*         K = 13;                       /* HEADING PTR OF ESDID       * 11220000
         MVI   K,13                                               0402  11230000
*         RTNPTR = ADDR(ENDLAB6);       /* SET RTN PTR                * 11240000
         LA    @F,ENDLAB6                                         0403  11250000
         ST    @F,RTNPTR                                          0403  11260000
*         GO TO MVHDS;                  /* PUT ESDID HEADING IN BUFFER* 11270000
         BC    15,MVHDS                                           0404  11280000
* ENDLAB6:GENERATE;                     /* TRANS ESDID TO PRINT. DEC  * 11290000
ENDLAB6  EQU   *                                                  0405  11300000
         L     ADRREG,INPTR            PICK UP CARD PTR ADDR            11310000
         LH    PTRREG,ENDESD(ADRREG)   PICK UP END ESD ID               11320000
         CVD   PTRREG,DBLWD            CONVERT TO DECIMAL               11330000
         UNPK  CVTWORK(5),DBLWD+5(3)  UNPACK IT                         11340000
         OI    CVTWORK+4,X'F0'      'OR' OUT LAST ZONE                  11350000
         DS    0H                                                       11360000
*         BUF(46:49) = CVTWORK(2:5);    /* MOVE INTO BUFFER           * 11370000
         MVC   BUF+45(4),CVTWORK+1                                0406  11380000
*         GO TO ENDLB2A;                /* CONTINUE PROCESSING        * 11390000
         BC    15,ENDLB2A                                         0407  11400000
* ENDLTH: K = 14;                       /* SET HEADING PTR,ESD LTH    * 11410000
ENDLTH   MVI   K,14                                               0408  11420000
*         RTNPTR = ADDR(ENDLAB7);       /* SET RTN PTR                * 11430000
         LA    @F,ENDLAB7                                         0409  11440000
         ST    @F,RTNPTR                                          0409  11450000
*         GO TO MVHDS;                  /* PUT HEADING IN BUF         * 11460000
         BC    15,MVHDS                                           0410  11470000
* ENDLAB7:DATA = '04'X;                 /* NUM BYTES TO TRANS.:LTH    * 11480000
ENDLAB7  LA    @F,X'04'                                           0411  11490000
         STH   @F,DATA                                            0411  11500000
*         I = 59;                       /* SET OUTPUT BUFFER INDEX    * 11510000
         MVI   I,59                                               0412  11520000
*         PTRREG = ADDR(CSLTH);         /* PTR TO BYTES TO TRANS      * 11530000
         L     @8,INPTR                                           0413  11540000
         LA    @2,28(0,@8)                                        0413  11550000
*         RTNPTR = ADDR(ENDLAB3);       /* SET RTN PTR TO CONT.PROC   * 11560000
         LA    @F,ENDLAB3                                         0414  11570000
         ST    @F,RTNPTR                                          0414  11580000
*         GO TO BTHLP2;                 /* TRANS TO PRINT. HEX        * 11590000
         BC    15,BTHLP2                                          0415  11600000
*         /************************************************************ 11610000
*         /* BINARY TO PRINTABLE HEX ROUTEEN                          * 11620000
*         /* DATA CONTAINS NUMBER OF BYTES TO TRANSLATE               * 11630000
*         /* PTRREG = REG2 CONTAINS TO ADDR OF THE BYTES TO TRANSLATE * 11640000
*         /* I IS THE INDEX INTO THE BUFFER AREA WHERE THE TRANSLATED * 11650000
*         /*   BYTES ARE TO BE PLACED                                 * 11660000
*         /* ENTERRED AT:                                             * 11670000
*         /*    CVTHEX - IF I TO BE 28 AND MORE THAN 40 BYTES TO TRANS* 11680000
*         /*    BTHLP2 - IF I IS ALREADY SPECIFIED                    * 11690000
*         /************************************************************ 11700000
* CVTHEX: I = 28;                       /* SET BUF PTR TO 28          * 11710000
CVTHEX   MVI   I,28                                               0416  11720000
* BTHLP2: IF DATA >= '0004'X            /* MRE THAN 8 CHAR TO TRANS?  * 11730000
*           THEN                        /* YES                        * 11740000
BTHLP2   L     @F,@X12                                            0417  11750000
         MVC   @TEMP2+2(2),DATA                                   0417  11760000
         C     @F,@TEMP2                                          0417  11770000
         BC    02,@9D8                                            0417  11780000
*             DO;                       /* PROCESS 4 BYTES            * 11790000
*               GENERATE;               /* CONVERT TO PRINT. HEX      * 11800000
UNPACK       UNPK  CVTWORK(9),0(5,PTRREG)  UNPACK BYTES                 11810000
ANDIT        NC    CVTWORK(8),ZEROZONE   'AND' OUT ZONES                11820000
TRANS        TR    CVTWORK(8),CVTTABLE   FIND EBCD CHAR                 11830000
         DS    0H                                                       11840000
*               DATA = DATA - 4;        /* UPDATE NUM BYTE TO GO      * 11850000
         MVC   @TEMP2+2(2),DATA                                   0420  11860000
         L     @F,@TEMP2                                          0420  11870000
         SH    @F,@D13                                            0420  11880000
         STH   @F,DATA                                            0420  11890000
*               PTRREG = PTRREG + 4;    /* UPDATE TO NEXT 4 BYTES     * 11900000
         AH    @2,@D13                                            0421  11910000
*               BUF(I:I+7) = CVTWORK;   /* MOVE TRANS'ED BYTES TO BUF * 11920000
         SR    @8,@8                                              0422  11930000
         IC    @8,I                                               0422  11940000
         LA    @A,BUF-1(@8)                                       0422  11950000
         MVC   0(8,@A),CVTWORK                                    0422  11960000
*               I = I + 9;              /* UPDATE BUF PTR             * 11970000
         LA    @F,9                                               0423  11980000
         SR    @0,@0                                              0423  11990000
         IC    @0,I                                               0423  12000000
         AR    @F,@0                                              0423  12010000
         STC   @F,I                                               0423  12020000
*               GO TO BTHLP2;           /* CONTINUE PROCESSING        * 12030000
         BC    15,BTHLP2                                          0424  12040000
*             END;                      /* END DO FOR DATA <= 4       * 12050000
*           ELSE                        /* LESS THAN 4 BYTES TO TRANS * 12060000
*             DO;                       /* PROCESS REMAINING BYTES    * 12070000
*               IF DATA = '00'X         /* FINISHED TRANSLATING       * 12080000
*                 THEN                  /* YES                        * 12090000
@9D8     LA    @F,X'00'                                           0427  12100000
         MVC   @TEMP2+2(2),DATA                                   0427  12110000
         C     @F,@TEMP2                                          0427  12120000
*                   GO TO DONECVT;      /* COMPLETE PROCESSING        * 12130000
         BC    08,DONECVT                                         0428  12140000
*                 ELSE                  /* NOT FINISHED               * 12150000
*                   DO;                 /* PROCESS REMAINING BYTES    * 12160000
*                     GENERATE;         /* TRANS. IF < 4 BYTES        * 12170000
           UNPK  CVTWORK(9),0(5,PTRREG)   UNPACK BYTES                  12180000
           NC    CVTWORK(8),ZEROZONE   'AND' OUT ZONES                  12190000
           TR    CVTWORK(8),CVTTABLE   FIND EBCD CHAR                   12200000
         DS    0H                                                       12210000
*                     J = I + (DATA * 2 - 1);     /* PTR TO LAST BYTE * 12220000
         LA    @E,2                                               0431  12230000
         MVC   @TEMP2+2(2),DATA                                   0431  12240000
         LR    @F,@E                                              0431  12250000
         M     @E,@TEMP2                                          0431  12260000
         BCTR  @F,0                                               0431  12270000
         SR    @0,@0                                              0431  12280000
         IC    @0,I                                               0431  12290000
         AR    @F,@0                                              0431  12300000
         STC   @F,J                                               0431  12310000
*                     BUF(I:J) = CVTWORK(1:J-I);   /* MOVE INTO BUFFER* 12320000
         LA    @E,CVTWORK                                         0432  12330000
         SR    @8,@8                                              0432  12340000
         IC    @8,J                                               0432  12350000
         SR    @9,@9                                              0432  12360000
         IC    @9,I                                               0432  12370000
         SR    @8,@9                                              0432  12380000
         LA    @A,BUF-1(@9)                                       0432  12390000
         EX    @8,@MVC                                            0432  12400000
*                   END;                /* END 'NOT FINISHED' DO      * 12410000
*             END;                      /* END DO FOR DATA < 4        * 12420000
* DONECVT:GO TO RETRN;                  /* RETURN TO CALLER           * 12430000
@9D7     EQU   *                                                  0435  12440000
DONECVT  L     @8,RTNPTR                                          0435  12450000
         BCR   15,@8                                              0435  12460000
*         /************************************************************ 12470000
*         /* END OF FILE RTN                                          * 12480000
*         /************************************************************ 12490000
* OBJEOF: RETURN;                       /* RTN TO CONTROL PGM         * 12500000
*         GENERATE;                     /* DSECT FOR DCB              * 12510000
         DCBD  DSORG=PS                DSECT FOR DCB                    12520000
HMBLKOBJ CSECT                                                          12530000
         DS    0H                                                       12540000
*         END HMBLKOBJ;                 /* END HMBLKOBJ               * 12550000
@EL01    L     @D,4(0,@D)                                         0438  12560000
         LR    @1,@C                                              0438  12570000
         L     @0,@SIZ001                                         0438  12580000
         FREEMAIN R,LV=(0),A=(1)                                  0438  12590000
         L     @E,12(0,@D)                                        0438  12600000
         LM    @0,@C,20(@D)                                       0438  12610000
         BCR   15,@E                                              0438  12620000
@DATA1   EQU   *                                                        12630000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           12640000
@1       EQU   01                                                       12650000
@2       EQU   02                                                       12660000
@3       EQU   03                                                       12670000
@4       EQU   04                                                       12680000
@5       EQU   05                                                       12690000
@6       EQU   06                                                       12700000
@7       EQU   07                                                       12710000
@8       EQU   08                                                       12720000
@9       EQU   09                                                       12730000
@A       EQU   10                                                       12740000
@B       EQU   11                                                       12750000
@C       EQU   12                                                       12760000
@D       EQU   13                                                       12770000
@E       EQU   14                                                       12780000
@F       EQU   15                                                       12790000
@D1      DC    H'-1'                                                    12800000
@D2      DC    H'3'                                                     12810000
@D3      DC    H'1'                                                     12820000
@D4      DC    H'5'                                                     12830000
@D5      DC    H'-36'                                                   12840000
@D6      DC    H'6'                                                     12850000
@D7      DC    H'8'                                                     12860000
@D8      DC    H'-40'                                                   12870000
@D9      DC    H'-20'                                                   12880000
@D10     DC    H'-23'                                                   12890000
@D11     DC    H'-12'                                                   12900000
@D12     DC    H'-15'                                                   12910000
@D13     DC    H'4'                                                     12920000
@MVC     MVC   0(1,@A),0(@E)                                            12930000
         DS    0F                                                       12940000
@SIZ001  DC    AL1(&SPN)                                                12950000
         DC    AL3(@DATEND-@DATD)                                       12960000
         DS    0F                                                       12970000
@X1      DC    X'00000000'                                              12980000
@X8      DC    X'00000001'                                              12990000
@X10     DC    X'00000010'                                              13000000
@X12     DC    X'00000004'                                              13010000
         DS    0D                                                       13020000
@DATA    EQU   *                                                        13030000
DUMMY    EQU   00000000            FULLWORD INTEGER                     13040000
REG1     EQU   00000001            FULLWORD POINTER REGISTER            13050000
PARMLIST EQU   00000000            52 BYTE(S) ON WORD                   13060000
DCBIN    EQU   PARMLIST+00000000   FULLWORD POINTER                     13070000
DCBOUT   EQU   PARMLIST+00000004   FULLWORD POINTER                     13080000
TITLEAD  EQU   PARMLIST+00000008   FULLWORD POINTER                     13090000
GETAREA  EQU   PARMLIST+00000012   FULLWORD POINTER                     13100000
A00000   EQU   PARMLIST+00000016   FULLWORD INTEGER                     13110000
A00001   EQU   PARMLIST+00000020   HALFWORD POINTER                     13120000
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER                     13130000
WORKBUF  EQU   PARMLIST+00000024   FULLWORD POINTER                     13140000
A00002   EQU   PARMLIST+00000028   FULLWORD INTEGER                     13150000
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)                            13160000
MEMNAME  EQU   PARMLIST+00000036   8 BYTE(S)                            13170000
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)                            13180000
TITLE    EQU   00000000            121 BYTE(S)                          13190000
ADRREG   EQU   00000003            FULLWORD INTEGER REGISTER            13200000
DECBSTR  EQU   00000000            20 BYTE(S) ON WORD                   13210000
A00003   EQU   DECBSTR+00000000    16 BYTE(S)                           13220000
IOBADR   EQU   DECBSTR+00000016    FULLWORD POINTER                     13230000
IOBSTR   EQU   00000000            16 BYTE(S) ON WORD                   13240000
A00004   EQU   IOBSTR+00000000     9 BYTE(S)                            13250000
IOBCSW   EQU   IOBSTR+00000009     7 BYTE(S)                            13260000
A00005   EQU   IOBSTR+00000009     5 BYTE(S)                            13270000
RESIDCT  EQU   IOBSTR+00000014     2  BYTE  POINTER                     13280000
CARD     EQU   00000000            80 BYTE(S) ON WORD                   13290000
ZEROTWO  EQU   CARD+00000000       1 BYTE(S) ON WORD                    13300000
CARDTYP  EQU   CARD+00000001       3 BYTE(S)                            13310000
DATAS    EQU   CARD+00000004       68 BYTE(S)                           13320000
CARDCHAR EQU   CARD+00000072       8 BYTE(S)                            13330000
HEADERS  EQU   @DATA+00000000      96 BYTE(S) ON WORD                   13340000
WDSADR   EQU   *                   16*FULLWORD POINTER                  13350000
         DC    AL4(W1)                                                  13360000
         DC    AL4(W2)                                                  13370000
         DC    AL4(W3)                                                  13380000
         DC    AL4(W4)                                                  13390000
         DC    AL4(W5)                                                  13400000
         DC    AL4(W6)                                                  13410000
         DC    AL4(W7)                                                  13420000
         DC    AL4(W8)                                                  13430000
         DC    AL4(W9)                                                  13440000
         DC    AL4(W10)                                                 13450000
         DC    AL4(W11)                                                 13460000
         DC    AL4(W12)                                                 13470000
         DC    AL4(W13)                                                 13480000
         DC    AL4(W14)                                                 13490000
         DC    AL4(W15)                                                 13500000
         DC    AL4(W16)                                                 13510000
WHERE    EQU   *                   16*1  BYTE  POINTER                  13520000
         DC    AL1(2)                                                   13530000
         DC    AL1(113)                                                 13540000
         DC    AL1(2)                                                   13550000
         DC    AL1(14)                                                  13560000
         DC    AL1(2)                                                   13570000
         DC    AL1(2)                                                   13580000
         DC    AL1(2)                                                   13590000
         DC    AL1(2)                                                   13600000
         DC    AL1(2)                                                   13610000
         DC    AL1(2)                                                   13620000
         DC    AL1(18)                                                  13630000
         DC    AL1(18)                                                  13640000
         DC    AL1(33)                                                  13650000
         DC    AL1(52)                                                  13660000
         DC    AL1(2)                                                   13670000
         DC    AL1(52)                                                  13680000
LNGTH    EQU   *                   16*1  BYTE  POINTER                  13690000
         DC    AL1(21)                                                  13700000
         DC    AL1(5)                                                   13710000
         DC    AL1(12)                                                  13720000
         DC    AL1(14)                                                  13730000
         DC    AL1(11)                                                  13740000
         DC    AL1(44)                                                  13750000
         DC    AL1(5)                                                   13760000
         DC    AL1(30)                                                  13770000
         DC    AL1(107)                                                 13780000
         DC    AL1(12)                                                  13790000
         DC    AL1(8)                                                   13800000
         DC    AL1(8)                                                   13810000
         DC    AL1(12)                                                  13820000
         DC    AL1(7)                                                   13830000
         DC    AL1(13)                                                  13840000
         DC    AL1(8)                                                   13850000
WORDS    EQU   @DATA+00000096      318 BYTE(S) ON WORD                  13860000
W1       EQU   *                   21 BYTE(S)                           13870000
         DC    C'OBJECT MODULE LISTING'                                 13880000
W2       EQU   *                   5 BYTE(S)                            13890000
         DC    C'PAGE '                                                 13900000
W3       EQU   *                   12 BYTE(S)                           13910000
         DC    C'SYM RECORD: '                                          13920000
W4       EQU   *                   14 BYTE(S)                           13930000
         DC    C'TESTRAN DATA: '                                        13940000
W5       EQU   *                   12 BYTE(S)                           13950000
         DC    C'ESD RECORD: '                                          13960000
W6       EQU   *                   44 BYTE(S)                           13970000
         DC    C' ESDID    TYPE      NAME     ADDR    ID/LT'            13980000
         DC    C'H '                                                    13990000
W7       EQU   *                   5 BYTE(S)                            14000000
         DC    C'TXT: '                                                 14010000
W8       EQU   *                   30 BYTE(S)                           14020000
         DC    C' ADDR=       ESDID=      TEXT:'                        14030000
W9       EQU   *                   107 BYTE(S)                          14040000
         DC    C'RLD RECORD:    R PTR   P PTR   FLAGS   ADD'            14050000
         DC    C'R   R PTR   P PTR   FLAGS   ADDR   R PTR  '            14060000
         DC    C' P PTR   FLAGS   ADDR  '                               14070000
W10      EQU   *                   12 BYTE(S)                           14080000
         DC    C'END RECORD: '                                          14090000
W11      EQU   *                   8 BYTE(S)                            14100000
         DC    C'EP ADDR='                                              14110000
W12      EQU   *                   8 BYTE(S)                            14120000
         DC    C'EP NAME='                                              14130000
W13      EQU   *                   12 BYTE(S)                           14140000
         DC    C'ESDID OF EP='                                          14150000
W14      EQU   *                   7 BYTE(S)                            14160000
         DC    C'LENGTH='                                               14170000
W15      EQU   *                   13 BYTE(S)                           14180000
         DC    C'****ERROR****'                                         14190000
W16      EQU   *                   8 BYTE(S)                            14200000
         DC    C'MEMBER= '                                              14210000
HEADBUF  EQU   00000000            120 BYTE(S)                          14220000
TYPETAB  EQU   @DATA+00000416      36 BYTE(S) ON WORD                   14230000
         ORG   TYPETAB+00000001                                         14240000
TYADR    EQU   *                   5*3  BYTE  POINTER ON WORD+1         14250000
         DC    AL3(SYMTYP)                                              14260000
         ORG   TYADR+00004                                              14270000
         DC    AL3(ESDTYP)                                              14280000
         ORG   TYADR+00008                                              14290000
         DC    AL3(TXTTYP)                                              14300000
         ORG   TYADR+00012                                              14310000
         DC    AL3(RLDTYP)                                              14320000
         ORG   TYADR+00016                                              14330000
         DC    AL3(ENDTYP)                                              14340000
         ORG   TYPETAB+00000021                                         14350000
TPES     EQU   *                   5*3 BYTE(S)                          14360000
         DC    C'SYM'                                                   14370000
         DC    C'ESD'                                                   14380000
         DC    C'TXT'                                                   14390000
         DC    C'RLD'                                                   14400000
         DC    C'END'                                                   14410000
SYMREC   EQU   00000000            72 BYTE(S) ON WORD                   14420000
A00006   EQU   SYMREC+00000000     10 BYTE(S)                           14430000
NUMBYTE  EQU   SYMREC+00000010     HALFWORD POINTER                     14440000
A00007   EQU   SYMREC+00000012     4 BYTE(S)                            14450000
TESTDATA EQU   SYMREC+00000016     56 BYTE(S)                           14460000
ESDHD    EQU   00000000            16 BYTE(S) ON WORD                   14470000
A00008   EQU   ESDHD+00000000      14 BYTE(S)                           14480000
FSTESDID EQU   ESDHD+00000014      HALFWORD POINTER                     14490000
ESDATA   EQU   00000000            16 BYTE(S) ON WORD                   14500000
NAME     EQU   ESDATA+00000000     8 BYTE(S)                            14510000
TYPE     EQU   ESDATA+00000008     1  BYTE  POINTER                     14520000
ADRES    EQU   ESDATA+00000009     3  BYTE  POINTER ON WORD+1           14530000
A00009   EQU   ESDATA+00000012     1 BYTE(S)                            14540000
IDORLGTH EQU   ESDATA+00000013     3  BYTE  POINTER ON WORD+1           14550000
ESDTABLE EQU   @DATA+00000452      56 BYTE(S) ON WORD                   14560000
ESDTAB   EQU   *                   8*1  BYTE  POINTER                   14570000
         DC    XL1'00'                                                  14580000
         DC    XL1'01'                                                  14590000
         DC    XL1'02'                                                  14600000
         DC    XL1'03'                                                  14610000
         DC    XL1'04'                                                  14620000
         DC    XL1'05'                                                  14630000
         DC    XL1'06'                                                  14640000
         DC    XL1'0A'                                                  14650000
TYPTAB   EQU   *                   8*6 BYTE(S)                          14660000
         DC    C'SD(00)'                                                14670000
         DC    C'LD(01)'                                                14680000
         DC    C'ER(02)'                                                14690000
         DC    C'LR(03)'                                                14700000
         DC    C'PC(04)'                                                14710000
         DC    C'CM(05)'                                                14720000
         DC    C'PR(06)'                                                14730000
         DC    C'WX(0A)'                                                14740000
TXTCD    EQU   00000000            71 BYTE(S) ON WORD                   14750000
A00010   EQU   TXTCD+00000000      5 BYTE(S)                            14760000
TXTADDR  EQU   TXTCD+00000005      3  BYTE  POINTER ON WORD+1           14770000
A00011   EQU   TXTCD+00000008      HALFWORD POINTER                     14780000
NUMBYTE3 EQU   TXTCD+00000010      HALFWORD POINTER                     14790000
A00012   EQU   TXTCD+00000012      HALFWORD POINTER                     14800000
ESDIFER  EQU   TXTCD+00000014      HALFWORD POINTER                     14810000
TXTDATA  EQU   TXTCD+00000016      55 BYTE(S)                           14820000
RLDDATA  EQU   00000000            8 BYTE(S) ON WORD                    14830000
RPTR     EQU   RLDDATA+00000000    2  BYTE  POINTER ON WORD             14840000
PPTR     EQU   RLDDATA+00000002    HALFWORD POINTER                     14850000
FLAGS    EQU   RLDDATA+00000004    1 BYTE(S)                            14860000
RLDADR   EQU   RLDDATA+00000005    3 BYTE(S)                            14870000
RLDNOPTR EQU   00000000            4 BYTE(S) ON WORD                    14880000
FLAG2    EQU   RLDNOPTR+00000000   1 BYTE(S)                            14890000
RLDADR2  EQU   RLDNOPTR+00000001   3 BYTE(S)                            14900000
ENDCARD  EQU   00000000            71 BYTE(S) ON WORD                   14910000
A00014   EQU   ENDCARD+00000000    5 BYTE(S) ON WORD                    14920000
ENDADDR  EQU   ENDCARD+00000005    3  BYTE  POINTER ON WORD+1           14930000
A00015   EQU   ENDCARD+00000008    6 BYTE(S)                            14940000
ENDESD   EQU   ENDCARD+00000014    HALFWORD POINTER                     14950000
EPNAME   EQU   ENDCARD+00000016    8 BYTE(S)                            14960000
A00016   EQU   ENDCARD+00000024    4 BYTE(S)                            14970000
CSLTH    EQU   ENDCARD+00000028    4 BYTE(S)                            14980000
LTHBYTE  EQU   ENDCARD+00000028    1 BYTE(S)                            14990000
A00017   EQU   ENDCARD+00000029    3 BYTE(S)                            15000000
CMPDATA  EQU   ENDCARD+00000032    39 BYTE(S)                           15010000
ZEROZONE EQU   *                   8 BYTE(S)                            15020000
         DC    X'0F0F0F0F0F0F0F0F'                                      15030000
CVTTABLE EQU   *                   16 BYTE(S)                           15040000
         DC    C'0123456789ABCDEF'                                      15050000
PTRREG   EQU   00000002            FULLWORD INTEGER REGISTER            15060000
         ORG   @DATA+00000536                                           15070000
MAINT    EQU   *                   175 BYTE(S) ON DWORD                 15080000
         DC    C'MAINTENANCE'                                           15090000
         DC    00164C' '                                                15100000
         ORG   @DATA                                                    15110000
         DS    00000711C                                                15120000
@L       EQU   6                                                        15130000
@DATD    DSECT                                                          15140000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   15150000
PARMPTR  EQU   @DATD+00000072      FULLWORD POINTER                     15160000
INPTR    EQU   @DATD+00000076      FULLWORD POINTER                     15170000
LINECT   EQU   @DATD+00000080      HALFWORD INTEGER                     15180000
PAGCTR   EQU   @DATD+00000082      HALFWORD INTEGER                     15190000
MLOG     EQU   @DATD+00000084      HALFWORD INTEGER                     15200000
READLIST EQU   @DATD+00000088      30 BYTE(S) ON WORD                   15210000
RDCTR    EQU   @DATD+00000118      1  BYTE  POINTER                     15220000
DECBPTR  EQU   @DATD+00000120      FULLWORD POINTER                     15230000
RTNPTR   EQU   @DATD+00000124      FULLWORD POINTER                     15240000
WDSPTR   EQU   @DATD+00000128      FULLWORD POINTER                     15250000
I        EQU   @DATD+00000132      1  BYTE  POINTER                     15260000
J        EQU   @DATD+00000133      1  BYTE  POINTER                     15270000
K        EQU   @DATD+00000134      1  BYTE  POINTER                     15280000
L        EQU   @DATD+00000135      1  BYTE  POINTER                     15290000
N        EQU   @DATD+00000136      1  BYTE  POINTER                     15300000
P        EQU   @DATD+00000137      1  BYTE  POINTER                     15310000
Q        EQU   @DATD+00000138      1  BYTE  POINTER                     15320000
CARDPTR  EQU   @DATD+00000140      FULLWORD POINTER                     15330000
ESDID    EQU   @DATD+00000144      4 BYTE(S)                            15340000
ESDCTR   EQU   @DATD+00000148      HALFWORD POINTER                     15350000
RLDPTR   EQU   @DATD+00000152      FULLWORD POINTER                     15360000
RLDCTR   EQU   @DATD+00000156      HALFWORD POINTER                     15370000
LOOPCTR  EQU   @DATD+00000158      HALFWORD POINTER                     15380000
RLDSW1   EQU   @DATD+00000160      1  BYTE  POINTER                     15390000
RLDSW2   EQU   @DATD+00000161      1  BYTE  POINTER                     15400000
RPTRSAVE EQU   @DATD+00000164      FULLWORD INTEGER                     15410000
PPTRSAVE EQU   @DATD+00000168      FULLWORD INTEGER                     15420000
RLDFLAG  EQU   @DATD+00000172      1 BYTE(S)                            15430000
A00013   EQU   RLDFLAG+00000000    7 BIT(S)                             15440000
PTRFLAG  EQU   RLDFLAG+00000000    1 BIT(S)                             15450000
RLDADDR  EQU   @DATD+00000173      3 BYTE(S)                            15460000
DATA     EQU   @DATD+00000176      HALFWORD POINTER                     15470000
DATARES  EQU   @DATD+00000178      HALFWORD POINTER                     15480000
DBLWD    EQU   @DATD+00000184      8 BYTE(S) ON DWORD                   15490000
CVTWORK  EQU   @DATD+00000192      8 BYTE(S)                            15500000
BUF      EQU   @DATD+00000200      121 BYTE(S)                          15510000
         DS    00000321C                                                15520000
@TEMPS   DS    0F                                                       15530000
@TEMP2   DC    F'0'                                                     15540000
@TEMP3   DC    F'0'                                                     15550000
@TEMP4   DC    F'0'                                                     15560000
@DATEND  EQU   *                                                        15570000
HMBLKOBJ CSECT ,                                                        15580000
OBJEOF   EQU   @EL01                                                    15590000
         END   HMBLKOBJ,(C'PL/S',1400,75247)                            15600000
./  ADD  SSI=32000928,NAME=HMBLKSZE
         TITLE 'HMBLKSZE  -  EXIT ROUTINE FOR SYSPRINT'                 00010000
         LCLA  &T,&SPN                                            0001  00020000
.@001    ANOP                                                     0001  00030000
HMBLKSZE CSECT ,                                                  0001  00040000
         BC    15,14(0,@F)                                              00050000
         DC    C'Â—HMBLKSZE'                                       0001  00060000
         BALR  @B,0                                               0001  00070000
@PSTART  DS    0H                                                 0001  00080000
         USING @PSTART+00000,@B                                   0001  00090000
         LR    @C,@1                                              0001  00100000
         L     @0,@SIZ001                                         0001  00110000
         GETMAIN  R,LV=(0)                                        0001  00120000
         XR    @C,@1                                              0001  00130000
         XR    @1,@C                                              0001  00140000
         XR    @C,@1                                              0001  00150000
         USING @DATD+00000,@C                                     0001  00160000
         XC    @TEMPS(@L),@TEMPS                                  0001  00170000
*   GEN(  ST  14,FOURTEEN);             /* SAVE REG 14 CONTENTS       * 00180000
           ST  14,FOURTEEN                                              00190000
         DS    0H                                                       00200000
*   GEN(  USING IHADCB,R1);             /* USE REG 1 AS BASE FOR DSECT* 00210000
           USING IHADCB,R1                                              00220000
         DS    0H                                                       00230000
*   /* CHECK TO SEE IF A BLOCKING FACTOR WAS USED                     * 00240000
*   IF DCBLRECL > DCBBLKSI              /* IS BLKSIZE = LOGICAL RECORD* 00250000
*      THEN DCBBLKSI = DCBLRECL;        /* STORE RECORD SIZE IN         00260000
         LH    @F,DCBBLKSI                                        0009  00270000
         CH    @F,DCBLRECL                                        0009  00280000
         BC    10,@9FF                                            0009  00290000
*                                         BLOCKSIZE                   * 00300000
         MVC   DCBBLKSI(2),DCBLRECL                               0010  00310000
*   GEN(  L     14,FOURTEEN);           /* RESTORE REG 14             * 00320000
@9FF     EQU   *                                                  0011  00330000
           L     14,FOURTEEN                                            00340000
         DS    0H                                                       00350000
*   END;                                                                00360000
@EL01    LR    @1,@C                                              0012  00370000
         L     @0,@SIZ001                                         0012  00380000
         FREEMAIN R,LV=(0),A=(1)                                  0012  00390000
         BCR   15,@E                                              0012  00400000
@DATA1   EQU   *                                                        00410000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           00420000
@1       EQU   01                                                       00430000
@2       EQU   02                                                       00440000
@3       EQU   03                                                       00450000
@4       EQU   04                                                       00460000
@5       EQU   05                                                       00470000
@6       EQU   06                                                       00480000
@7       EQU   07                                                       00490000
@8       EQU   08                                                       00500000
@9       EQU   09                                                       00510000
@A       EQU   10                                                       00520000
@B       EQU   11                                                       00530000
@C       EQU   12                                                       00540000
@D       EQU   13                                                       00550000
@E       EQU   14                                                       00560000
@F       EQU   15                                                       00570000
         DS    0F                                                       00580000
@SIZ001  DC    AL1(&SPN)                                                00590000
         DC    AL3(@DATEND-@DATD)                                       00600000
         DS    0D                                                       00610000
@DATA    EQU   *                                                        00620000
DCBADR   EQU   00000000            FULLWORD INTEGER                     00630000
R1       EQU   00000001            FULLWORD POINTER REGISTER            00640000
MAINT    EQU   @DATA+00000000      600 BYTE(S)                          00650000
         DS    00000600C                                                00660000
@L       EQU   1                                                        00670000
@DATD    DSECT                                                          00680000
FOURTEEN EQU   @DATD+00000000      FULLWORD INTEGER                     00690000
         DS    00000004C                                                00700000
@TEMPS   DS    0F                                                       00710000
         DS    C                                                        00720000
         DCBD  DSORG=PO                                                 00730000
HMBLKSZE CSECT                                                          00740000
@DATD    DSECT                                                          00750000
@DATEND  EQU   *                                                        00760000
HMBLKSZE CSECT ,                                                        00770000
         END    ,(C'PL/S',1400,73200)                                   00780000
./  ADD  SSI=61750750,NAME=HMBLKXRF
         TITLE 'HMBLKXRF - LOAD MODULE AND NUCLEUS MAPS AND CROSS-REFERX00010000
               ENCES'                                                   00020000
         LCLA  &T,&SPN                                                  00030000
&SPN     SETA  44                      CHANGE AUTO DATA SUBPOOL TO 44   00040000
         AGO   .@001                                                    00050000
         LCLA  &T,&SPN                                            0002  00060000
.@001    ANOP                                                     0002  00070000
HMBLKXRF CSECT ,                                                  0002  00080000
         BC    15,14(0,@F)                                              00090000
         DC    C'Â—HMBLKXRF'                                       0002  00100000
         STM   @E,@C,12(@D)                                       0002  00110000
         BALR  @B,0                                               0002  00120000
@PSTART  DS    0H                                                 0002  00130000
         USING @PSTART+00000,@B                                   0002  00140000
         LA    @9,4095(0,@B)                                      0002  00150000
         USING @PSTART+04095,@9                                   0002  00160000
         LA    @4,4095(0,@9)                                      0002  00170000
         USING @PSTART+08190,@4                                   0002  00180000
         L     @0,@SIZ001                                         0002  00190000
         GETMAIN  R,LV=(0)                                        0002  00200000
         LR    @C,@1                                              0002  00210000
         USING @DATD+00000,@C                                     0002  00220000
         LM    @0,@1,20(@D)                                       0002  00230000
         XC    @TEMPS(@L),@TEMPS                                  0002  00240000
         ST    @D,@SAV001+4                                       0002  00250000
         LA    @F,@SAV001                                         0002  00260000
         ST    @F,8(0,@D)                                         0002  00270000
         LR    @D,@F                                              0002  00280000
*   GEN(MVC   DECBE(READLEN),RD);       /* MOVE READ TO DYNAMIC AREA    00290000
         MVC   DECBE(READLEN),RD                                        00300000
         DS    0H                                                       00310000
*   PARMPTR=PARMREG;                    /* SAVE PTR TO PARAMETER LIST   00320000
         ST    @1,PARMPTR                                         0031  00330000
*   CURRCESD=GTMAINAD;                  /* INIT CURRCESD TO BEGINNING   00340000
*                                          OF WORK AREA                 00350000
         L     @7,PARMPTR                                         0032  00360000
         L     @5,12(0,@7)                                        0032  00370000
*   CETABPTR=GTMAINAD;                  /* INIT CESDTAB POINTER         00380000
         MVC   CETABPTR(4),12(@7)                                 0033  00390000
*   HIGHADDR=GTMAINAD+GMLENGTH;         /* SET END ADDR OF WORK AREA    00400000
         L     @F,16(0,@7)                                        0034  00410000
         A     @F,12(0,@7)                                        0034  00420000
         ST    @F,HIGHADDR                                        0034  00430000
*   TRSCDCNT=SCATDCNT+TRANDCNT;         /* COMPUTE BYTES OF SC/TR DATA  00440000
         LH    @F,30(0,@7)                                        0035  00450000
         AH    @F,28(0,@7)                                        0035  00460000
         STH   @F,TRSCDCNT                                        0035  00470000
*   INCR=4;                             /* INIT INCR TO 4               00480000
         LA    @F,4                                               0036  00490000
         STH   @F,INCR                                            0036  00500000
*   NUMCESDS=0;                         /* INIT NO. CESD TAB ENTS TO 0  00510000
         SR    @F,@F                                              0037  00520000
         STH   @F,NUMCESDS                                        0037  00530000
*   NUMRLDS=0;                          /* INIT NO. RLD TAB ENTS TO 0   00540000
         ST    @F,NUMRLDS                                         0038  00550000
*   PAGENUM=0;                          /* INIT PAGE NUMBER TO 0        00560000
         STH   @F,PAGENUM                                         0039  00570000
*   SEGLENCT=0;                         /* INIT SEGLENCT TO 0           00580000
         STH   @F,SEGLENCT                                        0040  00590000
*   RLDSPRTD=0;                         /* INIT RLDSPRTD TO 0           00600000
         ST    @F,RLDSPRTD                                        0041  00610000
*   LMLEN=0;                            /* INIT LMLEN TO 0              00620000
         MVC   LMLEN(3),@D1+1                                     0042  00630000
*   LMLENNO=0;                          /* INIT LMLENNO TO 0            00640000
         MVC   LMLENNO(3),@D1+1                                   0043  00650000
*   PDLEN=0;                            /* INIT PDLEN TO 0              00660000
         MVC   PDLEN(3),@D1+1                                     0044  00670000
*   LINECNT=61;                         /* INIT LINECNT TO 61           00680000
         LA    @F,61                                              0045  00690000
         ST    @F,LINECNT                                         0045  00700000
*   CURSEGNO=ZERO(1);                   /* INIT CURSEGNO TO 0           00710000
         MVC   CURSEGNO(1),ZERO                                   0046  00720000
*   PREGHERE='0'B;                      /* INIT PREGHERE TO OFF         00730000
         NI    SWITCHES+1,B'11110001'                             0047  00740000
*   EREFPRES='0'B;                      /* INIT EREFPRES TO OFF         00750000
*   DASHLINE='0'B;                      /* INIT DASHLINE TO OFF         00760000
*   NCHD='0'B;                          /* INIT NCHD TO OFF             00770000
         NI    SWITCHES,B'11110000'                               0050  00780000
*   NCSHD='0'B;                         /* INIT NCSHD TO OFF            00790000
*   ACHD='0'B;                          /* INIT ACHD TO OFF             00800000
*   ACSHD='0'B;                         /* INIT ACSHD TO OFF            00810000
*   NRHD='0'B;                          /* INIT NRHD TO OFF             00820000
         NI    SWITCHES+1,B'00011111'                             0054  00830000
*   ARHD='0'B;                          /* INIT ARHD TO OFF             00840000
*   PRHD='0'B;                          /* INIT PRHD TO OFF             00850000
*   NA3RET='0'B;                        /* INIT NA3RET TO OFF           00860000
         NI    SWITCHES+2,B'01111111'                             0057  00870000
*   PRSHD='0'B;                         /* INIT PRSHD TO OFF            00880000
         NI    SWITCHES+1,B'11101111'                             0058  00890000
*   TEXTNEXT='0'B;                      /* INIT TEXTNEXT TO OFF         00900000
         NI    SWITCHES,B'01111111'                               0059  00910000
*   SP2='0'B;                           /* INIT SP2 TO OFF              00920000
         NI    SWITCHES+2,B'11000111'                             0060  00930000
*   DUBLDASH='0'B;                      /* INIT DUBLDASH TO OFF         00940000
*   NUCMAP='0'B;                        /* INIT NUCMAP TO OFF           00950000
*   TRSCREC1='1'B;                      /* INIT TRSCREC1 TO ON          00960000
         OI    SWITCHES+2,B'00000100'                             0063  00970000
*   BLNKHEAD='1'B;                      /* INIT BLNKHEAD TO ON          00980000
         OI    SWITCHES,B'01100000'                               0064  00990000
*   BLNKDATA='1'B;                      /* INIT BLNKDATA TO ON          01000000
*   NUMCESD='1'B;                       /* INIT NUMCESD TO ON           01010000
         OI    SWITCHES+2,B'01000010'                             0066  01020000
*   RELOC='1'B;                         /* INIT RELOC TO ON             01030000
*   /* TEST FOR HOW TO INITIALIZE NUCMAP                                01040000
*   IF LMODNAME(1:7)=IEANUC0            /* IF LOAD MODULE IS NUCLEUS    01050000
*     THEN                              /* THEN                         01060000
         CLC   36(7,@7),IEANUC0                                   0068  01070000
         BC    07,@9FF                                            0068  01080000
*       DO;                             /* TEST FOR NUCLEUS ERRORS      01090000
*         /* TEST IF THERE IS ANY SCATTER DATA                          01100000
*         IF SCATDCNT=0                 /* IF SCATTER DATA COUNT ZERO   01110000
*           THEN                        /* THEN INDICATE ERROR          01120000
         SR    @F,@F                                              0070  01130000
         CH    @F,28(0,@7)                                        0070  01140000
         BC    07,@9FE                                            0070  01150000
*             ERRORS(28)='1'B;          /* NUCLEUS NOT MARKED SCTR      01160000
         OI    35(@7),B'00010000'                                 0071  01170000
         BC    15,@9FD                                            0072  01180000
*           ELSE                        /* ELSE IT'S OKAY FOR NUC MAP   01190000
*             NUCMAP='1'B;              /* TURN NUCMAP SWITCH ON        01200000
@9FE     OI    SWITCHES+2,B'00001000'                             0072  01210000
*         /* TEST IF A RELOCATION FACTOR WAS SPECIFIED                  01220000
*         IF RELOCFACÂ¬=0                /* IF RELOCFAC IS NOT ZERO      01230000
*           THEN                        /* THEN INDICATE ERROR          01240000
@9FD     SR    @F,@F                                              0073  01250000
         C     @F,60(0,@7)                                        0073  01260000
         BC    08,@9FC                                            0073  01270000
*             DO;                       /* NEGATE RELOCFAC              01280000
*               RELOCFAC=0;             /* MAKE RELOCFAC 0              01290000
         ST    @F,60(0,@7)                                        0075  01300000
*               ERRORS(27)='1'B;        /* RELOC INVALID W/NUCLEUS MAP  01310000
         OI    35(@7),B'00100000'                                 0076  01320000
*             END;                                                      01330000
*       END;                                                            01340000
@9FC     EQU   *                                                  0078  01350000
*   RET=ADDR(READ);                     /* SET UP RETURN ADDRESS        01360000
@9FF     LA    @3,READ                                            0079  01370000
*   GO TO WRITE17;                      /* GO TO INIT BUFFERS TO BLANKS 01380000
         BC    15,WRITE17                                         0080  01390000
*                                                                       01400000
* /******************************************************************** 01410000
* /*   THE FOLLOWING SECTION OF CODE READS LOAD MODULE RECORDS.  IT     01420000
* /*   TAKES DATA REQUIRED BY HMBLKXRF FROM CESD AND RLD RECORDS AND    01430000
* /*   BUILDS THE CESD TABLE AND THE RLD TABLE.  DATA FROM OTHER        01440000
* /*   RECORDS IS IGNORED.  THE RECORDS ARE PROCESSED ONE AT A TIME.    01450000
* /******************************************************************** 01460000
*                                                                       01470000
* READ:                                                                 01480000
*   DCBAD=INDCBAD;                      /* LOAD INPUT DCB ADDR INTO REG 01490000
READ     L     @7,PARMPTR                                         0081  01500000
         L     @2,0(0,@7)                                         0081  01510000
*   INBUFAD=INBUF;                      /* LOAD INPUT BUF ADDR INTO REG 01520000
         L     @3,24(0,@7)                                        0082  01530000
*   GEN;                                                                01540000
         READ  DECBE,SF,(DCBAD),(INBUFAD),'S',MF=E READ LOAD MOD RECORD 01550000
         CHECK DECBE                   CHECK READ                       01560000
         DS    0H                                                       01570000
*   /* TEST IF THIS INPUT RECORD IS TEXT                                01580000
*   IF TEXTNEXT='1'B                    /* IF TEXTNEXT SWITCH IS ON     01590000
*     THEN                              /* THEN                         01600000
         TM    SWITCHES,B'10000000'                               0084  01610000
         BC    12,@9FB                                            0084  01620000
*       DO;                             /* THIS RECORD IS TEXT          01630000
*         TEXTNEXT='0'B;                /* INDICATE NEXT REC NOT TEXT   01640000
         NI    SWITCHES,B'01111111'                               0086  01650000
*         GO TO READ;                   /* GO TO READ ANOTHER RECORD    01660000
         BC    15,READ                                            0087  01670000
*       END;                                                            01680000
*   /* TEST IF INPUT RECORD TYPE IS CESD                                01690000
*   IF IDENT1=CESD                      /* IF RECORD ID IS '00100000'   01700000
*     THEN                              /* THEN                         01710000
@9FB     CLC   0(1,@3),CESD                                       0089  01720000
         BC    07,@9FA                                            0089  01730000
*       DO;                             /* PROCESS IT                   01740000
*         CESDTBID=ESDID;               /* SET CESDTBID FROM CURR ESDID 01750000
         MVC   CESDTBID(2),4(@3)                                  0091  01760000
*         NUMITEMS=COUNT1/16;           /* SET NO. 16 BYTE ITEMS IN REC 01770000
         LH    @E,6(0,@3)                                         0092  01780000
         SRDA  @E,32                                              0092  01790000
         LA    @0,16                                              0092  01800000
         DR    @E,@0                                              0092  01810000
         STH   @F,NUMITEMS                                        0092  01820000
*         /* ENTER DATA FROM CESD RECORD INTO CESD TABLE                01830000
*         DO I=1 TO NUMITEMS;           /* LOOP                         01840000
         LA    @2,1                                               0093  01850000
         BC    15,@DO9F8                                          0093  01860000
*          /* IF NULL CESD AND NUCLEUS IS BEING MAPPED THEN ALTER       01870000
*          /* ENTRY FOR LATER SORTOUT                                   01880000
*          TEMPESD=ESDATA(I,9) &'0F'X;  /* SAVE CESD TYPE      YM05307  01890000
@DO9F9   MVI   TEMPESD,X'0F'                                      0094  01900000
         LR    @7,@2                                              0094  01910000
         BCTR  @7,0                                               0094  01920000
         SLA   @7,4                                               0094  01930000
         LA    @E,16(@7,@3)                                       0094  01940000
         NC    TEMPESD(1),0(@E)                                   0094  01950000
*          IF TEMPESD=NULL              /* NULL ITEM ?         YM05307  01960000
*            THEN                       /* YES                          01970000
         CLC   TEMPESD(1),NULL                                    0095  01980000
         BC    07,@9F5                                            0095  01990000
*              DO;                                                      02000000
*                IF NUCMAP='1'B         /* AND NUCLEUS IS BEING MAPPED  02010000
*                  THEN                 /* YES                          02020000
         TM    SWITCHES+2,B'00001000'                             0097  02030000
         BC    12,@9F4                                            0097  02040000
*                    DO;                                                02050000
*                    CESDLINE(3:18)=ESDATA(I,1:16); /* PUT IN CESD DATA 02060000
         LA    @E,8(@7,@3)                                        0099  02070000
         MVC   2(16,@5),0(@E)                                     0099  02080000
*                    SYMBOL=LASTN;          /* SET NAME TO ALL Z'S      02090000
         MVC   2(8,@5),LASTN                                      0100  02100000
*                    CESDADDR=LASTADDR;     /* SET ADDR TO ALL Z'S      02110000
         MVC   11(3,@5),LASTADDR                                  0101  02120000
*                    GO TO READA;           /* INCR PTR                 02130000
         BC    15,READA                                           0102  02140000
*                    END;                                               02150000
*                  ELSE                 /* NUCLEUS IS NOT BEING MAPPED  02160000
*                    GO TO READA1;      /* INCR CESD TABLE ID           02170000
*              END;                                                     02180000
@9F3     EQU   *                                                  0105  02190000
*          /* TEST IF THE CESD TABLE IS BIG ENOUGH TO HOLD ITEM         02200000
*           IF CURRCESD>HIGHADDR-18     /* IF LINE WILL OVERFLOW TABLE  02210000
*             THEN                      /* THEN                         02220000
@9F5     L     @F,HIGHADDR                                        0106  02230000
         SH    @F,@D2                                             0106  02240000
         CR    @F,@5                                              0106  02250000
         BC    10,@9F2                                            0106  02260000
*               DO;                     /* PROCESS THE ERROR            02270000
*                 ERRORS(4)='1'B;       /* INDICATE TABLE OVERFLOW      02280000
         L     @7,PARMPTR                                         0108  02290000
         OI    32(@7),B'00010000'                                 0108  02300000
*                 GO TO ABORT;          /* ABORT (MESSAGE HMB104I)      02310000
         BC    15,ABORT                                           0109  02320000
*               END;                                                    02330000
*           CESDLINE(3:18)=ESDATA(I,1:16); /* PUT CESD REC DATA IN TAB  02340000
@9F2     LR    @7,@2                                              0111  02350000
         BCTR  @7,0                                               0111  02360000
         SLA   @7,4                                               0111  02370000
         LA    @E,8(@7,@3)                                        0111  02380000
         MVC   2(16,@5),0(@E)                                     0111  02390000
* READA:    CESDID=CESDTBID;            /* ENTER ESDID FOR THIS ITEM    02400000
READA    MVC   0(2,@5),CESDTBID                                   0112  02410000
*           NUMCESDS=NUMCESDS+1;        /* INCR NO. CESD TABLE LINES    02420000
         LA    @F,1                                               0113  02430000
         AH    @F,NUMCESDS                                        0113  02440000
         STH   @F,NUMCESDS                                        0113  02450000
*           CURRCESD=CURRCESD+18;       /* LOC NEXT EMPTY LINE IN TABLE 02460000
         LA    @5,18(0,@5)                                        0114  02470000
*           /* BRANCH HERE TO AVOID ENTERING NULL CESD ITEM IN TABLE    02480000
* READA1:   CESDTBID=CESDTBID+1;        /* INCR CESD TABLE ID           02490000
READA1   LA    @F,1                                               0115  02500000
         AH    @F,CESDTBID                                        0115  02510000
         STH   @F,CESDTBID                                        0115  02520000
*         END;                          /* LOOP                         02530000
*         CURRLD=CURRCESD;              /* INIT CURRLD                  02540000
         AH    @2,@D3                                             0116  02550000
@DO9F8   CH    @2,NUMITEMS                                        0116  02560000
         BC    12,@DO9F9                                          0116  02570000
         LR    @6,@5                                              0117  02580000
*         GO TO READ;                   /* GO TO READ ANOTHER RECORD    02590000
         BC    15,READ                                            0118  02600000
*       END;                                                            02610000
*   /* TEST IF INPUT RECORD TYPE IS IDR                                 02620000
*   IF IDENT1=IDR                       /* IF RECORD ID IS '10000000'   02630000
*     THEN                              /* THEN                         02640000
@9FA     CLC   0(1,@3),IDR                                        0120  02650000
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD    02660000
         BC    08,READ                                            0121  02670000
*   /* TEST IF INPUT RECORD TYPE IS CONTROL OR CONTROL-EOS              02680000
*   IF IDENT1=CONTROL                   /* IF RECORD ID IS '00000001'   02690000
*      | IDENT1=CONTEOS                 /* OR IF ID IS '00000101'       02700000
*     THEN                              /* THEN                         02710000
         CLC   0(1,@3),CONTROL                                    0122  02720000
         BC    08,@9F1                                            0122  02730000
         CLC   0(1,@3),CONTEOS                                    0122  02740000
         BC    07,@9F0                                            0122  02750000
*       DO;                             /* DON'T PROCESS NEXT RECORD    02760000
*         TEXTNEXT='1'B;                /* INDICATE NEXT RECORD IS TEXT 02770000
@9F1     OI    SWITCHES,B'10000000'                               0124  02780000
*         GO TO READ;                   /* GO TO READ THIS TEXT RECORD  02790000
         BC    15,READ                                            0125  02800000
*       END;                                                            02810000
*   /* TEST IF INPUT RECORD TYPE IS CONTROL-EOM                         02820000
*   IF IDENT1=CONTEOM                   /* IF RECORD ID IS '00001101'   02830000
*     THEN                              /* THEN EOM HAS BEEN REACHED    02840000
@9F0     CLC   0(1,@3),CONTEOM                                    0127  02850000
*       GO TO NUCCONV;                  /* GO TO CONVERT NUC ADDRESSES  02860000
         BC    08,NUCCONV                                         0128  02870000
*   /* TEST IF INPUT RECORD TYPE IS SYM                                 02880000
*   IF IDENT1=SYM                       /* IF RECORD ID IS '01000000'   02890000
*     THEN                              /* THEN                         02900000
         CLC   0(1,@3),SYM                                        0129  02910000
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD    02920000
         BC    08,READ                                            0130  02930000
*   /* TEST IF INPUT RECORD TYPE IS SCATTER/TRANSLATION                 02940000
*   IF IDENT1=SCATRANS                  /* IF RECORD IS '00010000'      02950000
*     THEN                              /* THEN                         02960000
         CLC   0(1,@3),SCATRANS                                   0131  02970000
         BC    07,@9EF                                            0131  02980000
*       /* TEST IF A NUCLEUS IS BEING MAPPED                            02990000
*       IF NUCMAP='0'B                  /* IF NUCMAP SWITCH IS OFF      03000000
*         THEN                          /* THEN THE LOAD MOD NOT A NUC  03010000
         TM    SWITCHES+2,B'00001000'                             0132  03020000
*           GO TO READ;                 /* GO TO READ ANOTHER RECORD    03030000
         BC    08,READ                                            0133  03040000
*         ELSE                          /* ELSE LOAD MOD IS A NUCLEUS   03050000
*           DO;                                                         03060000
*             /* TEST IF THIS IS FIRST SCAT/TRAN READ                   03070000
*             IF TRSCREC1='1'B          /* IF TRSCREC1 SWITCH IS ON     03080000
*               THEN                    /* THEN                         03090000
         TM    SWITCHES+2,B'00000100'                             0135  03100000
         BC    12,@9EE                                            0135  03110000
*                 DO;                   /* EXECUTE FOLLOWING CODE       03120000
*                   /* CHECK FOR VALID CESD ORDER                       03130000
*                   IF CESDTAB(1,3:10)=IEAANIP0  /* 1ST SYMBOL NIP ?    03140000
*                      & CESDTAB(1,1:2)=1  /* WITH CESDID = 1  YM04682  03150000
*                      | CESDTAB(1,3:10)=IEAVNIP0  /* OR VNIP? YM04682  03160000
*                      & CESDTAB(1,1:2)=1  /* AND ITS CESDID IS 1       03170000
*                     THEN                                              03180000
         L     @7,CETABPTR                                        0137  03190000
         CLC   2(8,@7),IEAANIP0                                   0137  03200000
         BC    07,@9ED                                            0137  03210000
         CLC   0(2,@7),@D3                                        0137  03220000
         BC    08,@9EC                                            0137  03230000
@9ED     L     @7,CETABPTR                                        0137  03240000
         CLC   2(8,@7),IEAVNIP0                                   0137  03250000
         BC    07,@9EB                                            0137  03260000
         CLC   0(2,@7),@D3                                        0137  03270000
         BC    07,@9EA                                            0137  03280000
*                       GO TO READB;         /* CONTINUE                03290000
         BC    08,READB                                           0138  03300000
*                     ELSE;                  /* NO,WRONG CESD           03310000
@9EA     EQU   *                                                  0139  03320000
*                       ERRORS(29)='1'B;     /* INVALID CESD ORDER      03330000
@9EB     L     @7,PARMPTR                                         0140  03340000
         OI    35(@7),B'00001000'                                 0140  03350000
*                       NUCMAP='0'B;         /* TURN NUCMAP SWITCH OFF  03360000
         NI    SWITCHES+2,B'11110111'                             0141  03370000
*                       GO TO READ;          /* GO READ ANOTHER RECORD  03380000
         BC    15,READ                                            0142  03390000
*                 END;                                                  03400000
*               ELSE                    /* ELSE NOT FIRST TIME THRU     03410000
*                 GO TO READB1;         /* CONTINUE BUILDING TABLES     03420000
*         /************************************************************ 03430000
* READB:  /* BRANCH HERE WHEN FIRST CSECT IN CESD TABLE IS IEAANIPO     03440000
*         /************************************************************ 03450000
*         TRNTABAD=CURRCESD+18;         /* INIT TRNTABAD                03460000
@9E9     EQU   *                                                  0145  03470000
READB    LA    @F,18                                              0145  03480000
         AR    @F,@5                                              0145  03490000
         ST    @F,TRNTABAD                                        0145  03500000
*         CESDEND=TRNTABAD;             /* INIT CESDEND                 03510000
         MVC   CESDEND(4),TRNTABAD                                0146  03520000
*         SCTTABAD=TRNTABAD+TRANDCNT-2; /* INIT SCTTABAD                03530000
         LH    @F,@D4                                             0147  03540000
         L     @7,PARMPTR                                         0147  03550000
         AH    @F,30(0,@7)                                        0147  03560000
         A     @F,TRNTABAD                                        0147  03570000
         ST    @F,SCTTABAD                                        0147  03580000
*         ADDRTBAD=SCTTABAD+SCATDCNT-4; /* GET ADDR OF ADDR TABLE       03590000
         LH    @F,@D5                                             0148  03600000
         AH    @F,28(0,@7)                                        0148  03610000
         A     @F,SCTTABAD                                        0148  03620000
         ST    @F,ADDRTBAD                                        0148  03630000
*         RLDTABAD=ADDRTBAD+SCATDCNT-4; /* INIT RLDTABAD                03640000
         LH    @F,@D5                                             0149  03650000
         AH    @F,28(0,@7)                                        0149  03660000
         A     @F,ADDRTBAD                                        0149  03670000
         ST    @F,RLDTABAD                                        0149  03680000
*         CURRLD=RLDTABAD;              /* INIT CURRLD                  03690000
         LR    @6,@F                                              0150  03700000
*         IF RLDTABAD>=HIGHADDR         /* WILL ENTRIES OVERFLOW TABLE  03710000
*           THEN                        /* YES                          03720000
         L     @F,HIGHADDR                                        0151  03730000
         C     @F,RLDTABAD                                        0151  03740000
         BC    02,@9E8                                            0151  03750000
*             DO;                                                       03760000
*               ERRORS(4)='1'B;         /* INDICATE TABLE OVERFLOW      03770000
         OI    32(@7),B'00010000'                                 0153  03780000
*               GO TO ABORT;            /* ABORT (MESSAGE HMB104I)      03790000
         BC    15,ABORT                                           0154  03800000
*             END;                                                      03810000
*           ELSE                        /* ENTRIES WILL NOT OVERFLOW    03820000
*             DO;                                                       03830000
*               CURRTRSC=ADDRTBAD-4;    /* INIT SCAT/TRANTAB LINE PTR   03840000
@9E8     L     @F,ADDRTBAD                                        0157  03850000
         SH    @F,@D6                                             0157  03860000
         ST    @F,CURRTRSC                                        0157  03870000
*               TRSCREC1='0'B;          /* AVOID ABOVE CODE NEXT TIME   03880000
         NI    SWITCHES+2,B'11111011'                             0158  03890000
*             END;                                                      03900000
*             /******************************************************** 03910000
*             /* BUILD SCATTAB AND TRANTAB (SCATTAB IS BUILT FIRST)     03920000
*             /* IF SCATTAB IS BUILT THEN SWITCH TO A DECREMENT OF      03930000
*             /* TWO AND DO NOT PUT ITEM IN TABLE THIS TIME. IF         03940000
*             /* TRANTAB FINISHED THEN DO NOT PUT ITEM IN TABLE BUT     03950000
*             /* DECREMENT COUNTER SO THAT THIS LOOP WILL FINISH.       03960000
*             /******************************************************** 03970000
* READB1:     DO I=COUNT4 TO 1 BY -INCR; /* LOOP THRU LOAD MOD RECORD   03980000
@9E7     EQU   *                                                  0160  03990000
READB1   LH    @F,2(0,@3)                                         0160  04000000
         LR    @2,@F                                              0160  04010000
         BC    15,@DO9E5                                          0160  04020000
*               TRSCDCNT=TRSCDCNT-INCR; /* DECREMENT COUNTER OF         04030000
@DO9E6   LH    @F,TRSCDCNT                                        0161  04040000
         SH    @F,INCR                                            0161  04050000
         STH   @F,TRSCDCNT                                        0161  04060000
*                                       /* SCATTER/TRANSLATION DATA     04070000
*               /* TEST IF SCATTAB OR TRANTAB IS FINISHED BEING BUILT   04080000
*               IF TRSCDCNT=TRANDCNT    /* IF SCATTAB BUILT             04090000
*                  | TRSCDCNT=0         /* OR IF TRANTAB BUILT          04100000
*                 THEN                  /* THEN DO NOT PUT ITEM IN TBL  04110000
         L     @7,PARMPTR                                         0162  04120000
         LH    @F,30(0,@7)                                        0162  04130000
         CH    @F,TRSCDCNT                                        0162  04140000
         BC    08,@9E2                                            0162  04150000
         SR    @F,@F                                              0162  04160000
         CH    @F,TRSCDCNT                                        0162  04170000
         BC    07,@9E1                                            0162  04180000
*                   DO;                 /* THIS TURN BUT STILL DECR     04190000
*                     INCR=2;           /* SET INCR TO BUILD TRANTAB    04200000
@9E2     LA    @F,2                                               0164  04210000
         STH   @F,INCR                                            0164  04220000
*                     CURRTRSC=CURRTRSC+2;  /* INCR TBL LINE PTR        04230000
         A     @F,CURRTRSC                                        0165  04240000
         ST    @F,CURRTRSC                                        0165  04250000
*                     I=I-2;               /* DECR I BY 2               04260000
         SH    @2,@D7                                             0166  04270000
*                     GO TO READC;      /* DO NOT PUT ITEM IN TABLE     04280000
         BC    15,READC                                           0167  04290000
*                   END;                                                04300000
*                 ELSE                  /* PUT ITEM IN TABLE & INCR PTR 04310000
*                   TRSCITEM(1:INCR)=TRSCDATA(I-INCR,2:INCR+1);         04320000
@9E1     LH    @7,INCR                                            0169  04330000
         LCR   @7,@7                                              0169  04340000
         AR    @7,@2                                              0169  04350000
         BCTR  @7,0                                               0169  04360000
         LA    @E,5(@7,@3)                                        0169  04370000
         LH    @8,INCR                                            0169  04380000
         BCTR  @8,0                                               0169  04390000
         L     @7,CURRTRSC                                        0169  04400000
         LR    @A,@7                                              0169  04410000
         EX    @8,@MVC                                            0169  04420000
*                   CURRTRSC=CURRTRSC-INCR; /* LOC NEXT LINE IN TABLE   04430000
@9E0     L     @F,CURRTRSC                                        0170  04440000
         SH    @F,INCR                                            0170  04450000
         ST    @F,CURRTRSC                                        0170  04460000
* READC:            /* BRANCH HERE TO AVOID ENTERING SCAT OR TRAN ITEM  04470000
*                   /* IN TABLE.                                        04480000
*             END;                      /* LOOP TO BUILD TABLE          04490000
*              GO TO READ;              /* READ NEXT RECORD             04500000
READC    SH    @2,INCR                                            0171  04510000
@DO9E5   CH    @2,@D3                                             0171  04520000
         BC    10,@DO9E6                                          0171  04530000
         BC    15,READ                                            0172  04540000
*           END;                                                        04550000
*   /* TEST IF INPUT RECORD TYPE IS CONTROL&RLD                         04560000
*      OR CONTROL&RLD-EOS OR CONTROL&RLD-EOM                            04570000
*   IF IDENT1=CONTRLD                   /* IF RECORD ID IS '00000011'   04580000
*      | IDENT1=CRLDEOS                 /* OR IF ID IS '00000111'       04590000
*      | IDENT1=CRLDEOM                 /* OR IF ID IS '00001111'       04600000
*     THEN                              /* THEN                         04610000
@9EF     CLC   0(1,@3),CONTRLD                                    0174  04620000
         BC    08,@9DF                                            0174  04630000
         CLC   0(1,@3),CRLDEOS                                    0174  04640000
         BC    08,@9DE                                            0174  04650000
         CLC   0(1,@3),CRLDEOM                                    0174  04660000
         BC    07,@9DD                                            0174  04670000
*       DO;                             /* DON'T PROCESS NEXT RECORD    04680000
@9DE     EQU   *                                                  0175  04690000
*         TEXTNEXT='1'B;                /* INDICATE NEXT RECORD IS TEXT 04700000
@9DF     OI    SWITCHES,B'10000000'                               0176  04710000
*         GO TO READ2;                  /* GO TO PUT RLD DATA IN TABLE  04720000
         BC    15,READ2                                           0177  04730000
*       END;                                                            04740000
*   /* TEST IF INPUT RECORD TYPE IS RLD OR RLD-EOS OR RLD-EOM           04750000
*   IF IDENT1=RLD                       /* IF RECORD ID IS '00000010'   04760000
*      | IDENT1=RLDEOS                  /* OR IF ID IS '00000110'       04770000
*      | IDENT1=RLDEOM                  /* OR IF ID IS '00001110'       04780000
*      THEN                             /* THEN                         04790000
@9DD     CLC   0(1,@3),RLD                                        0179  04800000
         BC    08,@9DC                                            0179  04810000
         CLC   0(1,@3),RLDEOS                                     0179  04820000
         BC    08,@9DB                                            0179  04830000
         CLC   0(1,@3),RLDEOM                                     0179  04840000
         BC    07,@9DA                                            0179  04850000
* READ2: /* BRANCH HERE WHEN CONTROL/RLD (-EOS, EOM) RECORD IS ENCOUNT- 04860000
*           ERED.  FOLLOWING CODE ENTERS DATA FROM IT INTO RLD TABLE.   04870000
*       DO;                             /* PROCESS RLD DATA             04880000
@9DB     EQU   *                                                  0180  04890000
@9DC     EQU   *                                                  0180  04900000
*         R=1;                          /* INIT RLDATA R PTR SUBSCRIPT  04910000
READ2    LA    @F,1                                               0181  04920000
         STH   @F,R                                               0181  04930000
*         P=3;                          /* INIT RLDATA P PTR SUBSCRIPT  04940000
         LA    @F,3                                               0182  04950000
         STH   @F,P                                               0182  04960000
*         F=5;                          /* INIT RLDATA FLAG SUBSCRIPT   04970000
         LA    @F,5                                               0183  04980000
         STH   @F,F                                               0183  04990000
*         A=6;                          /* INIT RLDATA ADDR SUBSCRIPT   05000000
         LA    @F,6                                               0184  05010000
         STH   @F,A                                               0184  05020000
*         DATACNT=COUNT3;               /* SET DATA COUNT FOR THIS REC  05030000
         MVC   DATACNT(2),6(@3)                                   0185  05040000
* READ3:  /* BRANCH HERE WHEN ITEM FROM CURRENT RLD RECORD IN PROCESS   05050000
*            ISN'T ENTERED INTO RLD TABLE.  FOLLOWING CODE TRIES TO     05060000
*            ENTER NEXT ITEM FROM RLD RECORD INTO RLD TABLE.            05070000
*         /* TEST IF ALL RLD DATA FROM THIS RECORD HAS BEEN PROCESSED   05080000
*         IF DATACNT=0                  /* IF DATA COUNT IS 0           05090000
*           THEN                        /* THEN                         05100000
READ3    SR    @F,@F                                              0186  05110000
         CH    @F,DATACNT                                         0186  05120000
*             GO TO READ5;              /* GO TO TEST FOR MORE INPUT    05130000
         BC    08,READ5                                           0187  05140000
*         /* TEST IF FOLLOWING RLD ITEM HAS SAME R AND P POINTERS       05150000
*         IF RLDATA(F,8)='1'B           /* IF CHAINED BIT IS ON         05160000
*           THEN                        /* THEN                         05170000
         LH    @7,F                                               0188  05180000
         BCTR  @7,0                                               0188  05190000
         LA    @A,16(@7,@3)                                       0188  05200000
         TM    0(@A),B'00000001'                                  0188  05210000
         BC    12,@9D9                                            0188  05220000
*             DATACNT=DATACNT-4;        /* DECREMENT DATA COUNT BY 4    05230000
         LH    @F,DATACNT                                         0189  05240000
         SH    @F,@D6                                             0189  05250000
         STH   @F,DATACNT                                         0189  05260000
         BC    15,@9D8                                            0190  05270000
*           ELSE                        /* ELSE RLD ITEMS NOT CHAINED   05280000
*             DATACNT=DATACNT-8;        /* DECREMENT DATA COUNT BY 8    05290000
@9D9     LH    @F,DATACNT                                         0190  05300000
         SH    @F,@D8                                             0190  05310000
         STH   @F,DATACNT                                         0190  05320000
*         /* TEST IF RLD DATA SHOULD BE PUT INTO RLD TABLE              05330000
*         IF RLDATA(R,1:16)=0           /* IF R PTR IS 0                05340000
*            | RLDATA(R,1:16)=RLDATA(P,1:16) /* OR SAME AS P PTR        05350000
*           THEN                        /* THEN DON'T PUT DATA INTO TAB 05360000
@9D8     LH    @8,R                                               0191  05370000
         BCTR  @8,0                                               0191  05380000
         LA    @A,16(@8,@3)                                       0191  05390000
         CLC   0(2,@A),@D1+2                                      0191  05400000
         BC    08,@9D7                                            0191  05410000
         LH    @7,P                                               0191  05420000
         BCTR  @7,0                                               0191  05430000
         LA    @E,16(@7,@3)                                       0191  05440000
         CLC   0(2,@A),0(@E)                                      0191  05450000
         BC    07,@9D6                                            0191  05460000
* READ4:      /* BRANCH HERE AFTER ENTERING RLD DATA INTO TABLE.        05470000
*                FOLLOWING CODE INCREMENTS SUBSCRIPTS.                  05480000
*             DO;                       /* INCREMENT SUBSCRIPTS         05490000
@9D7     EQU   *                                                  0192  05500000
*               /* TEST IF FOLLOWING RLD ITEM HAS SAME R AND P POINTERS 05510000
*               IF RLDATA(F,8)='1'B     /* IF CHAINED BIT IS ON         05520000
*                 THEN                  /* THEN                         05530000
READ4    LH    @7,F                                               0193  05540000
         BCTR  @7,0                                               0193  05550000
         LA    @A,16(@7,@3)                                       0193  05560000
         TM    0(@A),B'00000001'                                  0193  05570000
         BC    12,@9D5                                            0193  05580000
*                   DO;                 /* INCREMENT SUBSCRIPTS F AND A 05590000
*                     F=F+4;            /* INCR FLAG SUBSCRIPT          05600000
         LA    @F,4                                               0195  05610000
         AH    @F,F                                               0195  05620000
         STH   @F,F                                               0195  05630000
*                     A=A+4;            /* INCR ADDRESS SUBSCRIPT       05640000
         LA    @F,4                                               0196  05650000
         AH    @F,A                                               0196  05660000
         STH   @F,A                                               0196  05670000
*                     GO TO READ3;      /* TRY AGAIN TO PUT ITEM IN TAB 05680000
         BC    15,READ3                                           0197  05690000
*                   END;                                                05700000
*                 ELSE                  /* ELSE RLD ITEMS NOT CHAINED   05710000
*                   DO;                 /* INCREMENT RLD SUBSCRIPTS     05720000
*                     R=F+4;            /* INCR R PTR SUBSCRIPT         05730000
@9D5     LA    @F,4                                               0200  05740000
         AH    @F,F                                               0200  05750000
         STH   @F,R                                               0200  05760000
*                     P=F+6;            /* INCR P PTR SUBSCRIPT         05770000
         LA    @F,6                                               0201  05780000
         AH    @F,F                                               0201  05790000
         STH   @F,P                                               0201  05800000
*                     F=F+8;            /* INCR FLAG SUBSCRIPT          05810000
         LA    @F,8                                               0202  05820000
         AH    @F,F                                               0202  05830000
         STH   @F,F                                               0202  05840000
*                     A=A+8;            /* INCR ADDRESS SUBSCRIPT       05850000
         LA    @F,8                                               0203  05860000
         AH    @F,A                                               0203  05870000
         STH   @F,A                                               0203  05880000
*                     GO TO READ3;      /* TRY AGAIN TO PUT ITEM IN TAB 05890000
         BC    15,READ3                                           0204  05900000
*                   END;                                                05910000
*             END;                                                      05920000
*           ELSE                        /* ELSE R PTR NOT 0 OR = P PTR  05930000
*             DO;                       /* PUT RLD DATA INTO TABLE      05940000
*               /* TEST IF RLD DATA SHOULD BE PUT INTO TABLE            05950000
*               IF RLDATA(F,3)='1'B     /* IF TYPE IS PR DISP VALUE     05960000
*                                          OR PR CUM DISP VALUE         05970000
*                 THEN                  /* THEN DON'T PUT DATA INTO TAB 05980000
@9D6     LH    @7,F                                               0208  05990000
         BCTR  @7,0                                               0208  06000000
         LA    @A,16(@7,@3)                                       0208  06010000
         TM    0(@A),B'00100000'                                  0208  06020000
*                   GO TO READ4;        /* GO TO INCREMENT SUBSCRIPTS   06030000
         BC    01,READ4                                           0209  06040000
*               /* TEST IF RLD DATA SHOULD BE PUT INTO TABLE            06050000
*               IF RLDATA(F,5)='0'B     /* IF TYPE IS TWO BYTE          06060000
*                 THEN                  /* THEN DON'T PUT DATA INTO TAB 06070000
         TM    0(@A),B'00001000'                                  0210  06080000
*                   GO TO READ4;        /* GO TO INCREMENT SUBSCRIPTS   06090000
         BC    08,READ4                                           0211  06100000
*               /* TEST IF RLD TABLE HAS ROOM FOR RLD DATA              06110000
*               IF CURRLD>HIGHADDR-8    /* IF TABLE IS FULL             06120000
*                 THEN                  /* THEN                         06130000
         L     @F,HIGHADDR                                        0212  06140000
         SH    @F,@D8                                             0212  06150000
         CR    @F,@6                                              0212  06160000
         BC    10,@9D2                                            0212  06170000
*                   DO;                 /* PROCESS ERROR                06180000
*                     ERRORS(4)='1'B;   /* INDICATE TABLE OVERFLOW      06190000
         L     @8,PARMPTR                                         0214  06200000
         OI    32(@8),B'00010000'                                 0214  06210000
*                     GO TO ABORT;      /* ABORT (MESSAGE HMB104I)      06220000
         BC    15,ABORT                                           0215  06230000
*                   END;                                                06240000
*               EREFPRES='1'B;          /* INDIC EXTERNAL REF PRESENT   06250000
@9D2     OI    SWITCHES+1,B'00000010'                             0217  06260000
*               RPTR=RLDATA(R,1:16);    /* PUT R PTR INTO TABLE         06270000
         LH    @7,R                                               0218  06280000
         BCTR  @7,0                                               0218  06290000
         LA    @A,16(@7,@3)                                       0218  06300000
         MVC   @TEMP2+2(2),0(@A)                                  0218  06310000
         L     @F,@TEMP2                                          0218  06320000
         STH   @F,0(0,@6)                                         0218  06330000
*               PPTR=RLDATA(P,1:16);    /* PUT P PTR INTO TABLE         06340000
         LH    @8,P                                               0219  06350000
         BCTR  @8,0                                               0219  06360000
         LA    @A,16(@8,@3)                                       0219  06370000
         MVC   @TEMP2+2(2),0(@A)                                  0219  06380000
         L     @F,@TEMP2                                          0219  06390000
         STH   @F,2(0,@6)                                         0219  06400000
*               RLDFLAG=RLDATA(F);      /* PUT FLAGS INTO TABLE         06410000
         LH    @7,F                                               0220  06420000
         BCTR  @7,0                                               0220  06430000
         LA    @E,16(@7,@3)                                       0220  06440000
         MVC   4(1,@6),0(@E)                                      0220  06450000
*               RLDADDR=RLDATA(A,1:24); /* PUT ADDRESS INTO TABLE       06460000
         LH    @8,A                                               0221  06470000
         BCTR  @8,0                                               0221  06480000
         LA    @A,16(@8,@3)                                       0221  06490000
         MVC   @TEMP3+1(3),0(@A)                                  0221  06500000
         L     @F,@TEMP3                                          0221  06510000
         ST    @F,@TEMP4                                          0221  06520000
         MVC   5(3,@6),@TEMP4+1                                   0221  06530000
*               NUMRLDS=NUMRLDS+1;      /* INCR CNT OF RLD TAB ENTRIES  06540000
         LA    @F,1                                               0222  06550000
         A     @F,NUMRLDS                                         0222  06560000
         ST    @F,NUMRLDS                                         0222  06570000
*               CURRLD=CURRLD+8;        /* LOC NEXT EMPTY RLD TAB LINE  06580000
         LA    @6,8(0,@6)                                         0223  06590000
*               GO TO READ4;            /* GO TO INCREMENT SUBSCRIPTS   06600000
         BC    15,READ4                                           0224  06610000
*             END;                                                      06620000
*       END;                                                            06630000
@9D3     EQU   *                                                  0226  06640000
*   /* ALL LOAD MODULE RECORD TYPES HAVE NOW BEEN TESTED FOR            06650000
*   ERRORS(2)='1'B;                     /* ERROR-INVALID LMOD REC TYPE  06660000
@9DA     L     @7,PARMPTR                                         0227  06670000
         OI    32(@7),B'01000000'                                 0227  06680000
*   GO TO ABORT;                        /* ABORT (MESSAGE HMB102I)      06690000
         BC    15,ABORT                                           0228  06700000
* READ5: /* BRANCH HERE AFTER AN RLD RECORD IS PROCESSED.  FOLLOWING    06710000
*           CODE TESTS FOR END OF INPUT.                                06720000
*   /* TEST IF INPUT RECORD TYPE IS RLD-EOM OR CONTROL&RLD-EOM          06730000
*   IF IDENT1=RLDEOM                    /* IF RECORD ID IS '00001110'   06740000
*      | IDENT1=CRLDEOM                 /* OR IF ID IS '00001111'       06750000
*     THEN                              /* THEN                         06760000
READ5    CLC   0(1,@3),RLDEOM                                     0229  06770000
         BC    08,@9D1                                            0229  06780000
         CLC   0(1,@3),CRLDEOM                                    0229  06790000
         BC    07,@9D0                                            0229  06800000
*       GO TO NUCCONV;                  /* GO TO CONVERT NUC ADDRESSES  06810000
         BC    08,NUCCONV                                         0230  06820000
*     ELSE                              /* ELSE EOM NOT YET REACHED     06830000
*       GO TO READ;                     /* GO TO READ ANOTHER RECORD    06840000
         BC    15,READ                                            0231  06850000
*                                                                       06860000
* /******************************************************************** 06870000
* /*   THE FOLLOWING SECTION OF CODE CONVERTS ALL CESD TABLE AND RLD    06880000
* /*   TABLE ADDRESSES POST-IPL VALUES WHEN A NUCLEUS IS BEING MAPPED.  06890000
* /*   AN ALGORITHM IS USED TO MOVE IEAQFX00 TO LOCATION 00 AND         06900000
* /*   IEAANIP0 TO THE HIGH END OF THE NUCLEUS WHILE THE REST OF THE    06910000
* /*   CONTROL SECTIONS KEEP THEIR SAME ORDER (BUT WITH NEW ADDRESSES)  06920000
* /*   BETWEEN THESE TWO CONTROL SECTIONS. A FEW TABLE INITIALIZATIONS  06930000
* /*   ARE ALSO PERFORMED HERE. THIS SECTION IS ENTERED AFTER ALL       06940000
* /*   LOAD MODULE RECORDS HAVE BEEN READ.                              06950000
* /******************************************************************** 06960000
* NUCCONV:                                                              06970000
*                                                                       06980000
*   CESDEND=CURRCESD;                   /* INIT CESDEND                 06990000
NUCCONV  ST    @5,CESDEND                                         0232  07000000
*   IF NUCMAP='0'B                      /* NUCLEUS BEING MAPPED         07010000
*     THEN                              /* NO                           07020000
         TM    SWITCHES+2,B'00001000'                             0233  07030000
         BC    05,@9CF                                            0233  07040000
*       RLDTABAD=CESDEND;               /* INIT RLD TABLE ADDR          07050000
         MVC   RLDTABAD(4),CESDEND                                0234  07060000
*     ELSE;                             /* NULL ELSE                    07070000
@9CF     EQU   *                                                  0235  07080000
*   RLDEND=NUMRLDS*8+RLDTABAD;          /* INIT RLDEND                  07090000
@9CE     LA    @F,8                                               0236  07100000
         M     @E,NUMRLDS                                         0236  07110000
         A     @F,RLDTABAD                                        0236  07120000
         ST    @F,RLDEND                                          0236  07130000
*   /* TEST IF THERE IS ENOUGH ROOM TO BUILD THE INDEX TABLE            07140000
*   IF RLDEND+CESDTBID*2>HIGHADDR-2     /* IF INDEXES WILL OVERFLOW TAB 07150000
*     THEN                              /* THEN                         07160000
         LH    @E,CESDTBID                                        0237  07170000
         AR    @E,@E                                              0237  07180000
         A     @E,RLDEND                                          0237  07190000
         L     @7,HIGHADDR                                        0237  07200000
         SH    @7,@D7                                             0237  07210000
         CR    @E,@7                                              0237  07220000
         BC    12,@9CD                                            0237  07230000
*       DO;                             /* PROCESS THE ERROR            07240000
*         ERRORS(4)='1'B;               /* INDICATE TABLE OVERFLOW      07250000
         L     @7,PARMPTR                                         0239  07260000
         OI    32(@7),B'00010000'                                 0239  07270000
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB104I)      07280000
         BC    15,ABORT                                           0240  07290000
*       END;                                                            07300000
*     ELSE                              /* ELSE INDEXTAB CAN BE BUILT   07310000
*       INDTABAD=RLDEND;                /* INIT INDTABAD                07320000
@9CD     MVC   INDTABAD(4),RLDEND                                 0242  07330000
*   /* TEST IF LOAD MODULE IS A NUCLEUS                                 07340000
*   IF NUCMAP='0'B                      /* MAPPING THE NUCLEUS ?        07350000
*     THEN                              /* NO                           07360000
@9CC     TM    SWITCHES+2,B'00001000'                             0243  07370000
*       GO TO NCSORT;                   /* DON'T DO NUCLEUS MAP         07380000
         BC    08,NCSORT                                          0244  07390000
*     ELSE;                             /* NULL ELSE                    07400000
*                                                                       07410000
*   IF LMODNAME(1:7)=IEANUC0            /* IF NAME IS IEANUC0X          07420000
*     THEN                              /* THEN                         07430000
         L     @7,PARMPTR                                         0246  07440000
         CLC   36(7,@7),IEANUC0                                   0246  07450000
         BC    07,@9CB                                            0246  07460000
*       DO;                             /* CHECK THE FOLLOWING          07470000
*         RESTRICT(8);                  /* RESTRICT REGISTER 8          07480000
*         GEN;                                                          07490000
         LA    8,CVTPTR                GET LOCATION 10 HEX      YM2968  07500000
         L     8,0(0,8)                GET ADDRESS OF CVT               07510000
         USING CVTMAP,8                SET BASE OF CVT MAP      YM2968  07520000
         L 8,CVTEXT2                   GET ADDR OF EXTENSION    YM2968  07530000
         USING CVTXTNT2,8              SET BASE OF CVT EXT.     YM2968  07540000
         MVC   TEMPAREA(1),CVTNUCLS    GET NUCLEUS NUMBER       YM2968  07550000
         DS    0H                                                       07560000
*         RELEASE (8);                                                  07570000
*         /* TEST IF NUCLEUS NUMBER REQUESTED WAS IPL'D                 07580000
*         IF LMODNAME(8)=TEMPAREA(1)    /* IF USER'S NUC SAME AS CVT'S  07590000
*           THEN                        /* THEN                         07600000
         CLC   43(1,@7),TEMPAREA                                  0251  07610000
*             GO TO NUCCONV1;           /* GO TO CHECK CESD ORDER       07620000
         BC    08,NUCCONV1                                        0252  07630000
*           ELSE;                       /* NULL ELSE                    07640000
*             ERRORS(30)='1'B;          /* ELSE USER'S NUC NOT IPL'D    07650000
         OI    35(@7),B'00000100'                                 0254  07660000
         BC    15,@9CA                                            0256  07670000
*      END;                                                             07680000
*        ELSE;                          /* NULL ELSE                    07690000
@9CB     EQU   *                                                  0256  07700000
*                                                                       07710000
*    /***************************************************************** 07720000
*    /* BRANCH HERE WHEN NUCLEUS FOR WHICH LISTLOAD IS REQUESTED IS     07730000
*    /* THE ONE THAT WAS IPL'D.  FOLLOWING CODE CHECKS FOR PROPER       07740000
*    /* CESD SEQUENCE.                                                  07750000
*    /***************************************************************** 07760000
* NUCCONV1:                                                             07770000
*         IF CESDTAB(1,3:10)=IEAANIP0   /* IF 1ST SYMBOL IS IEAANIP0    07780000
*           | CESDTAB(1,3:10)=IEAVNIP0  /* OR IEAVNIP0                  07790000
*           THEN                        /* THEN                         07800000
@9CA     EQU   *                                                  0257  07810000
NUCCONV1 L     @7,CETABPTR                                        0257  07820000
         CLC   2(8,@7),IEAANIP0                                   0257  07830000
         BC    08,@9C9                                            0257  07840000
         CLC   2(8,@7),IEAVNIP0                                   0257  07850000
         BC    07,@9C8                                            0257  07860000
*             GO TO NUCCONV2;           /* GO TO START CONVERTING       07870000
         BC    08,NUCCONV2                                        0258  07880000
*           ELSE;                       /* NULL ELSE                    07890000
*         ERRORS(29)='1'B;              /* INVALID CESD ORDER (HMB129I) 07900000
@9C8     L     @7,PARMPTR                                         0260  07910000
         OI    35(@7),B'00001000'                                 0260  07920000
*         NUCMAP='0'B;                  /* TURN NUCMAP SWITCH OFF       07930000
         NI    SWITCHES+2,B'11110111'                             0261  07940000
*         GO TO NCSORT;                 /* DON'T DO NUCLEUS MAP         07950000
         BC    15,NCSORT                                          0262  07960000
*                                                                       07970000
*    /***************************************************************** 07980000
*    /* BRANCH HERE WHEN FIRST CSECT IN CESD IS IEAANIP0.               07990000
*    /* FOLLOWING CODE DOES SOME INITIALIZATIONS.                       08000000
*    /***************************************************************** 08010000
* NUCCONV2:                                                             08020000
*    SCATWDCT=(SCATDCNT/4)-1;           /* GET WORD COUNT FOR COUNTER   08030000
NUCCONV2 L     @7,PARMPTR                                         0263  08040000
         LH    @E,28(0,@7)                                        0263  08050000
         SRDA  @E,32                                              0263  08060000
         LA    @0,4                                               0263  08070000
         DR    @E,@0                                              0263  08080000
         BCTR  @F,0                                               0263  08090000
         ST    @F,SCATWDCT                                        0263  08100000
*    IF NUCMAPÂ¬='1'B                    /* IF NUCLEUS NOT BEING MAPPED  08110000
*      THEN                             /* THEN                         08120000
         TM    SWITCHES+2,B'00001000'                             0264  08130000
*        GO TO NCSORT;                  /* GO SORT CESD TABLE ENTRIES   08140000
         BC    12,NCSORT                                          0265  08150000
*      ELSE;                            /* NULL ELSE                    08160000
*                                                                       08170000
*   /*                   THE FOLLOWING LINES ARE CHANGED FOR PTM YM2968 08180000
*                                                                       08190000
*    /* FLAG ALL ENTRIES IN ADDR TABLE                                  08200000
*    DO I=1 TO SCATWDCT;                /* LOOP THRU ADDR TABLE         08210000
         LA    @2,1                                               0267  08220000
         BC    15,@DO9C6                                          0267  08230000
*      ADDRTBL(I)='70000000'X;          /* FLAG ALL ENTRIES             08240000
@DO9C7   LR    @7,@2                                              0268  08250000
         BCTR  @7,0                                               0268  08260000
         SLA   @7,2                                               0268  08270000
         L     @8,ADDRTBAD                                        0268  08280000
         LA    @A,0(@7,@8)                                        0268  08290000
         MVC   0(4,@A),@X4                                        0268  08300000
*    END;                                                               08310000
*                                                                       08320000
*    /* FOLLOWING CODE DOES SOME INITIALIZING                           08330000
*    LASTAD=0;                          /* SET LAST ADDR TO ZERO        08340000
         AH    @2,@D3                                             0269  08350000
@DO9C6   C     @2,SCATWDCT                                        0269  08360000
         BC    12,@DO9C7                                          0269  08370000
         SR    @F,@F                                              0270  08380000
         ST    @F,LASTAD                                          0270  08390000
*    SIZEN=CESDTAB(2,16:18);            /* GET SIZE OF QFX              08400000
         L     @7,CETABPTR                                        0271  08410000
         MVC   @TEMP3+1(3),33(@7)                                 0271  08420000
         L     @F,@TEMP3                                          0271  08430000
         ST    @F,SIZEN                                           0271  08440000
*    REMAINDR=SIZEN//8;                 /* COMPUT REMAINDER             08450000
         LR    @E,@F                                              0272  08460000
         SRDA  @E,32                                              0272  08470000
         LA    @0,8                                               0272  08480000
         DR    @E,@0                                              0272  08490000
         ST    @E,REMAINDR                                        0272  08500000
*    IF REMAINDRÂ¬=0                     /* CHECK IF REMAINDER           08510000
*      THEN                             /* YES                          08520000
         SR    @F,@F                                              0273  08530000
         C     @F,REMAINDR                                        0273  08540000
         BC    08,@9C3                                            0273  08550000
*        SIZEN=SIZEN+8-REMAINDR;        /* GET ROUNDED LENGTH           08560000
         L     @F,REMAINDR                                        0274  08570000
         LCR   @F,@F                                              0274  08580000
         AH    @F,@D8                                             0274  08590000
         A     @F,SIZEN                                           0274  08600000
         ST    @F,SIZEN                                           0274  08610000
*      ELSE;                            /* NULL ELSE                    08620000
@9C3     EQU   *                                                  0275  08630000
*    TRCOUNT=(TRANDCNT-2)/2;            /* GET NO. OF TRANS ENTRIES     08640000
@9C2     LH    @E,@D4                                             0276  08650000
         L     @8,PARMPTR                                         0276  08660000
         AH    @E,30(0,@8)                                        0276  08670000
         SRDA  @E,32                                              0276  08680000
         LA    @0,2                                               0276  08690000
         DR    @E,@0                                              0276  08700000
         ST    @F,TRCOUNT                                         0276  08710000
*    Q=TRANTAB(1);                      /* GET TRANS PTR TO NIP         08720000
         L     @7,TRNTABAD                                        0277  08730000
         MVC   Q(2),0(@7)                                         0277  08740000
*    S=TRANTAB(2);                      /* GET TRANS PTR TO QFX         08750000
         MVC   S(2),2(@7)                                         0278  08760000
*    /***************************************************************** 08770000
*    /* BUILD ADDRESS TABLE TO BE USED WITH THE TRANSLATION TABLE       08780000
*    /***************************************************************** 08790000
*    DO N=3 TO TRCOUNT;                 /* LOOP THRU TRANSLATION TABLE  08800000
         LA    @F,3                                               0279  08810000
         BC    15,@DO9C0                                          0279  08820000
*    P=TRANTAB(N);                      /* GET TRANSLATION TABLE ENTRY  08830000
@DO9C1   LH    @7,N                                               0280  08840000
         BCTR  @7,0                                               0280  08850000
         SLA   @7,1                                               0280  08860000
         L     @8,TRNTABAD                                        0280  08870000
         LH    @F,0(@7,@8)                                        0280  08880000
         STH   @F,P                                               0280  08890000
*    IF P=0                             /* TRANSLATION TBL ENTRY = 0    08900000
*     | P=Q                             /* OR IEAVNIP0 PTR              08910000
*       | P=S                           /* OR IEAQFX00 PTR              08920000
*         THEN                          /* YES                          08930000
         SR    @F,@F                                              0281  08940000
         CH    @F,P                                               0281  08950000
         BC    08,@9BD                                            0281  08960000
         LH    @F,Q                                               0281  08970000
         CH    @F,P                                               0281  08980000
         BC    08,@9BC                                            0281  08990000
         LH    @F,S                                               0281  09000000
         CH    @F,P                                               0281  09010000
         BC    07,@9BB                                            0281  09020000
*            GO TO CHNXT;               /* BYPASS PROCESSING            09030000
         BC    08,CHNXT                                           0282  09040000
*         ELSE;                         /* NULL ELSE                    09050000
*           REMAINDR=SIZEN//8;          /* COMPUTE REMAINDER            09060000
@9BB     L     @E,SIZEN                                           0284  09070000
         SRDA  @E,32                                              0284  09080000
         LA    @0,8                                               0284  09090000
         DR    @E,@0                                              0284  09100000
         ST    @E,REMAINDR                                        0284  09110000
*           IF REMAINDRÂ¬=0              /* CHECK IF REMAINDER           09120000
*              THEN                     /* YES                          09130000
         SR    @F,@F                                              0285  09140000
         C     @F,REMAINDR                                        0285  09150000
         BC    08,@9BA                                            0285  09160000
*                SIZEN=SIZEN+8-REMAINDR;    /* GET ROUNDED LENGTH       09170000
         L     @F,REMAINDR                                        0286  09180000
         LCR   @F,@F                                              0286  09190000
         AH    @F,@D8                                             0286  09200000
         A     @F,SIZEN                                           0286  09210000
         ST    @F,SIZEN                                           0286  09220000
*              ELSE;                    /* NULL ELSE                    09230000
@9BA     EQU   *                                                  0287  09240000
*                                                                       09250000
*    IF ADDRTBL(P)='70000000'X          /* HAS ENTRY BEEN FILLED        09260000
*      THEN                             /* NO                           09270000
@9B9     LH    @7,P                                               0288  09280000
         BCTR  @7,0                                               0288  09290000
         SLA   @7,2                                               0288  09300000
         L     @8,ADDRTBAD                                        0288  09310000
         LA    @A,0(@7,@8)                                        0288  09320000
         CLC   0(4,@A),@X4                                        0288  09330000
         BC    07,@9B8                                            0288  09340000
*        DO;                                                            09350000
*        ADDRTBL(P)=SIZEN+LASTAD;       /* SET ENTRY TO SIZE OF         09360000
         L     @F,LASTAD                                          0290  09370000
         A     @F,SIZEN                                           0290  09380000
         ST    @F,@TEMP4                                          0290  09390000
         MVC   0(4,@A),@TEMP4                                     0290  09400000
*                                       /* PREVIOUS CSECT + LAST ADDR   09410000
*        LASTAD=ADDRTBL(P);             /* SET LASTAD TO SAME           09420000
         MVC   @TEMP4(4),0(@A)                                    0291  09430000
         L     @F,@TEMP4                                          0291  09440000
         ST    @F,LASTAD                                          0291  09450000
*        CESDTYP=CESDTAB(N,11);         /* GET CESD TYPE                09460000
         LH    @7,N                                               0292  09470000
         BCTR  @7,0                                               0292  09480000
         MH    @7,@D2                                             0292  09490000
         L     @8,CETABPTR                                        0292  09500000
         LA    @E,10(@7,@8)                                       0292  09510000
         MVC   CESDTYP(1),0(@E)                                   0292  09520000
*        IF CESDTYP(5:8)='0000'B        /* IS CESD TYPE SD              09530000
*         | CESDTYP(5:8)='0100'B        /* OR PC ?                      09540000
*         | CESDTYP(5:8)='0101'B        /* OR CM ?             ZA03162  09550000
*          THEN                         /* YES                          09560000
         TM    CESDTYP,B'00001111'                                0293  09570000
         BC    08,@9B7                                            0293  09580000
         TM    CESDTYP,B'00000100'                                0293  09590000
         BC    12,@9B6                                            0293  09600000
         TM    CESDTYP,B'00001011'                                0293  09610000
         BC    08,@9B5                                            0293  09620000
@9B6     TM    CESDTYP,B'00000101'                                0293  09630000
         BC    12,@9B4                                            0292  09640000
         TM    CESDTYP,B'00001010'                                0293  09650000
         BC    05,@9B3                                            0293  09660000
*            SIZEN=CESDTAB(N,16:18);     /* SAVE PRESENT CESD SIZE      09670000
@9B5     EQU   *                                                  0294  09680000
@9B7     LH    @7,N                                               0294  09690000
         BCTR  @7,0                                               0294  09700000
         MH    @7,@D2                                             0294  09710000
         L     @8,CETABPTR                                        0294  09720000
         LA    @A,15(@7,@8)                                       0294  09730000
         MVC   @TEMP3+1(3),0(@A)                                  0294  09740000
         L     @F,@TEMP3                                          0294  09750000
         ST    @F,SIZEN                                           0294  09760000
*          ELSE;                        /* NULL ELSE                    09770000
@9B3     EQU   *                                                  0295  09780000
@9B4     EQU   *                                                  0295  09790000
*        IF CESDTYP(5:8)='0011'B        /* IS CESD TYPE LR ?            09800000
*          THEN                         /* YES                          09810000
@9B2     TM    CESDTYP,B'00000011'                                0296  09820000
         BC    12,@9B1                                            0295  09830000
         TM    CESDTYP,B'00001100'                                0296  09840000
         BC    05,@9B0                                            0296  09850000
*            DO;                                                        09860000
*              ID=CESDTAB(N,17:18);     /* GET CESD ID                  09870000
         LH    @7,N                                               0298  09880000
         BCTR  @7,0                                               0298  09890000
         MH    @7,@D2                                             0298  09900000
         L     @8,CETABPTR                                        0298  09910000
         LA    @A,16(@7,@8)                                       0298  09920000
         MVC   @TEMP2+2(2),0(@A)                                  0298  09930000
         L     @F,@TEMP2                                          0298  09940000
         ST    @F,ID                                              0298  09950000
*              SIZEN=CESDTAB(ID,16:18);  /* GET SIZE OF THAT CESD       09960000
         LR    @7,@F                                              0299  09970000
         BCTR  @7,0                                               0299  09980000
         MH    @7,@D2                                             0299  09990000
         LA    @A,15(@7,@8)                                       0299  10000000
         MVC   @TEMP3+1(3),0(@A)                                  0299  10010000
         L     @F,@TEMP3                                          0299  10020000
         ST    @F,SIZEN                                           0299  10030000
*            END;                                                       10040000
*          ELSE;                        /* NULL ELSE                    10050000
*        END;                                                           10060000
*      ELSE;                            /* NULL ELSE                    10070000
@9B8     EQU   *                                                  0303  10080000
* CHNXT: END;                                                           10090000
CHNXT    EQU   *                                                  0304  10100000
*                                                                       10110000
*        /************************************************************* 10120000
*        /* COMPUTE FINAL ADDRESSES AND PUT IN CESD TABLE               10130000
*        /************************************************************* 10140000
*        DO L=3 TO TRCOUNT;             /* LOOP THRU TABLES             10150000
@9AE     LH    @F,N                                               0304  10160000
         AH    @F,@D3                                             0304  10170000
@DO9C0   STH   @F,N                                               0304  10180000
         C     @F,TRCOUNT                                         0304  10190000
         BC    12,@DO9C1                                          0304  10200000
         LA    @F,3                                               0305  10210000
         BC    15,@DO9AC                                          0305  10220000
*        CESDTYP=CESDTAB(L,11);         /* GET CESDTYPE                 10230000
@DO9AD   L     @7,L                                               0306  10240000
         BCTR  @7,0                                               0306  10250000
         MH    @7,@D2                                             0306  10260000
         L     @8,CETABPTR                                        0306  10270000
         LA    @E,10(@7,@8)                                       0306  10280000
         MVC   CESDTYP(1),0(@E)                                   0306  10290000
*        IF CESDTYP(5:8)='0011'B        /* IS IT LR ?                   10300000
*          THEN                         /* YES                          10310000
         TM    CESDTYP,B'00000011'                                0307  10320000
         BC    12,@9A9                                            0306  10330000
         TM    CESDTYP,B'00001100'                                0307  10340000
*            GO TO BYP;                 /* BYPASS UPDATING ADDRESSES    10350000
         BC    10,BYP                                             0308  10360000
*          ELSE;                        /* NULL ELSE                    10370000
@9A8     EQU   *                                                  0309  10380000
*        N=TRANTAB(L);                  /* GET PTR TO SCATTER TBL ENT   10390000
@9A9     L     @7,L                                               0310  10400000
         BCTR  @7,0                                               0310  10410000
         SLA   @7,1                                               0310  10420000
         L     @8,TRNTABAD                                        0310  10430000
         LH    @F,0(@7,@8)                                        0310  10440000
         STH   @F,N                                               0310  10450000
*        SCATAD=SCATTAB(N);             /* GET CSECT ADDR FROM SCATTER  10460000
         LR    @7,@F                                              0311  10470000
         BCTR  @7,0                                               0311  10480000
         SLA   @7,2                                               0311  10490000
         L     @8,SCTTABAD                                        0311  10500000
         LA    @A,0(@7,@8)                                        0311  10510000
         MVC   @TEMP4(4),0(@A)                                    0311  10520000
         L     @F,@TEMP4                                          0311  10530000
         ST    @F,SCATAD                                          0311  10540000
*                                       /* TABLE                        10550000
*        NEWAD=ADDRTBL(N);              /* GET ADDR FROM ADDR TABLE     10560000
         L     @8,ADDRTBAD                                        0312  10570000
         LA    @A,0(@7,@8)                                        0312  10580000
         MVC   @TEMP4(4),0(@A)                                    0312  10590000
         L     @F,@TEMP4                                          0312  10600000
         ST    @F,NEWAD                                           0312  10610000
*        RLF=NEWAD-SCATAD;              /* GET ADDR MINUS SCATTER VALUE 10620000
         S     @F,SCATAD                                          0313  10630000
         ST    @F,RLF                                             0313  10640000
*        CESDTAB(L,12:14)=RLF+CESDTAB(L,12:14); /* ADD EDITOR ASSIGNED  10650000
         L     @7,L                                               0314  10660000
         BCTR  @7,0                                               0314  10670000
         MH    @7,@D2                                             0314  10680000
         L     @8,CETABPTR                                        0314  10690000
         LA    @A,11(@7,@8)                                       0314  10700000
         MVC   @TEMP3+1(3),0(@A)                                  0314  10710000
         L     @F,@TEMP3                                          0314  10720000
         A     @F,RLF                                             0314  10730000
         ST    @F,@TEMP4                                          0314  10740000
         MVC   0(3,@A),@TEMP4+1                                   0314  10750000
*                                       /* ORIGIN + RLF VALUE           10760000
*    BYP: END;                                                          10770000
*        CESDTAB(2,12:14)=0;            /* SET QFX ADDR TO ZERO         10780000
BYP      L     @F,L                                               0315  10790000
         AH    @F,@D3                                             0315  10800000
@DO9AC   ST    @F,L                                               0315  10810000
         C     @F,TRCOUNT                                         0315  10820000
         BC    12,@DO9AD                                          0315  10830000
         L     @7,CETABPTR                                        0316  10840000
         MVC   29(3,@7),@D1+1                                     0316  10850000
*                                                                       10860000
*    /***************************************************************** 10870000
*    /* SUBTRACT NIP SIZE FROM NUCLEUS SIZE AND                         10880000
*    /* ROUND THIS VALUE UP TO A DOUBLEWORD MULTIPLE AND SET NIP        10890000
*    /* ADDR TO THIS VALUE.                                             10900000
*    /***************************************************************** 10910000
*          NUCMINIP=TEXTLEN- CESDTAB(1,16:18);  /* NUC MINUS NIP        10920000
         MVC   @TEMP3+1(3),15(@7)                                 0317  10930000
         L     @F,@TEMP3                                          0317  10940000
         LCR   @F,@F                                              0317  10950000
         L     @8,PARMPTR                                         0317  10960000
         A     @F,64(0,@8)                                        0317  10970000
         ST    @F,@TEMP4                                          0317  10980000
         MVC   NUCMINIP(3),@TEMP4+1                               0317  10990000
*          REMAINDR=NUCMINIP//8;        /* COMPUTE REMAINDER            11000000
         MVC   @TEMP3+1(3),NUCMINIP                               0318  11010000
         L     @E,@TEMP3                                          0318  11020000
         SRDA  @E,32                                              0318  11030000
         LA    @0,8                                               0318  11040000
         DR    @E,@0                                              0318  11050000
         ST    @E,REMAINDR                                        0318  11060000
*          /* TEST IF REMAINDER MUST BE ROUNDED TO A DOUBLEWORD         11070000
*          IF REMAINDRÂ¬=0               /* IF REMAINDER NOT ZERO        11080000
*            THEN                       /* THEN                         11090000
         SR    @F,@F                                              0319  11100000
         C     @F,REMAINDR                                        0319  11110000
         BC    08,@9A7                                            0319  11120000
*              DO;                                                      11130000
*                NUCMINIP=NUCMINIP+8-REMAINDR; /* ROUND TO DOUBLE WORD  11140000
         L     @F,REMAINDR                                        0321  11150000
         LCR   @F,@F                                              0321  11160000
         AH    @F,@D8                                             0321  11170000
         MVC   @TEMP3+1(3),NUCMINIP                               0321  11180000
         A     @F,@TEMP3                                          0321  11190000
         ST    @F,@TEMP4                                          0321  11200000
         MVC   NUCMINIP(3),@TEMP4+1                               0321  11210000
*              END;                                                     11220000
*            ELSE;                      /* ADDR ON DOUBLEWORD BOUNDRY   11230000
@9A7     EQU   *                                                  0323  11240000
*              CESDTAB(1,12:14)=NUCMINIP; /* INSERT NIP ADDR IN CESDTAB 11250000
@9A6     L     @7,CETABPTR                                        0324  11260000
         MVC   11(3,@7),NUCMINIP                                  0324  11270000
*              ADDRTBL(Q,2:4)=NUCMINIP;     /* SET NIP ADDR IN ADDR TBL 11280000
         LH    @8,Q                                               0325  11290000
         BCTR  @8,0                                               0325  11300000
         SLA   @8,2                                               0325  11310000
         L     @7,ADDRTBAD                                        0325  11320000
         LA    @A,1(@8,@7)                                        0325  11330000
         MVC   0(3,@A),NUCMINIP                                   0325  11340000
*              P=TRANTAB(2);            /* GET QFX PTR                  11350000
         L     @8,TRNTABAD                                        0326  11360000
         MVC   P(2),2(@8)                                         0326  11370000
*              ADDRTBL(P)=0;            /* SET QFX ADDR TO ZERO         11380000
         LH    @7,P                                               0327  11390000
         BCTR  @7,0                                               0327  11400000
         SLA   @7,2                                               0327  11410000
         L     @8,ADDRTBAD                                        0327  11420000
         LA    @A,0(@7,@8)                                        0327  11430000
         MVC   0(4,@A),@D1                                        0327  11440000
*              NIPADDR=NUCMINIP;        /* INSERT NIP ADDR IN CESDTAB   11450000
         MVC   NIPADDR(3),NUCMINIP                                0328  11460000
*                                                                       11470000
* /******************************************************************** 11480000
* /* RESOLVE LABEL REFERENCES USING SCATTER/TRANSLATION AND CESD TABLES 11490000
* /* TO OBTAIN NEW ADDRESS                                              11500000
* /******************************************************************** 11510000
* RESLRET: /* BRANCH HERE AFTER FINISHING FIRST PASS OF CESD TABLE      11520000
*          DO R=1 TO TRCOUNT;            /* LOOP THRU TABLES            11530000
RESLRET  LA    @F,1                                               0329  11540000
         BC    15,@DO9A4                                          0329  11550000
*            CESDTYP=CESDTAB(R,11);      /* GET CESD TYPE               11560000
@DO9A5   LH    @7,R                                               0330  11570000
         BCTR  @7,0                                               0330  11580000
         MH    @7,@D2                                             0330  11590000
         L     @8,CETABPTR                                        0330  11600000
         LA    @E,10(@7,@8)                                       0330  11610000
         MVC   CESDTYP(1),0(@E)                                   0330  11620000
*            IF CESDTYP(5:8)='0011'B     /* LABEL REFERENCE ?           11630000
*              THEN                      /* YES                         11640000
         TM    CESDTYP,B'00000011'                                0331  11650000
         BC    12,@9A1                                            0330  11660000
         TM    CESDTYP,B'00001100'                                0331  11670000
         BC    05,@9A0                                            0331  11680000
*                DO;                                                    11690000
*                   N=TRANTAB(R);        /* GET PTR TO SCATTER TBL ENT  11700000
         LH    @7,R                                               0333  11710000
         BCTR  @7,0                                               0333  11720000
         SLA   @7,1                                               0333  11730000
         L     @8,TRNTABAD                                        0333  11740000
         LH    @F,0(@7,@8)                                        0333  11750000
         STH   @F,N                                               0333  11760000
*                   SCATAD=SCATTAB(N);   /* GET CSECT ADDR FROM SCATTER 11770000
         LR    @7,@F                                              0334  11780000
         BCTR  @7,0                                               0334  11790000
         SLA   @7,2                                               0334  11800000
         L     @8,SCTTABAD                                        0334  11810000
         LA    @A,0(@7,@8)                                        0334  11820000
         MVC   @TEMP4(4),0(@A)                                    0334  11830000
         L     @F,@TEMP4                                          0334  11840000
         ST    @F,SCATAD                                          0334  11850000
*                                        /* TABLE                       11860000
*                   /* SUBTRACT CSECT ADDR FROM LR ADDR                 11870000
*                  LRDIF=CESDTAB(R,12:14)-SCATAD;  /* GET LR DISP       11880000
         LCR   @F,@F                                              0335  11890000
         LH    @7,R                                               0335  11900000
         BCTR  @7,0                                               0335  11910000
         MH    @7,@D2                                             0335  11920000
         L     @8,CETABPTR                                        0335  11930000
         LA    @A,11(@7,@8)                                       0335  11940000
         MVC   @TEMP3+1(3),0(@A)                                  0335  11950000
         A     @F,@TEMP3                                          0335  11960000
         ST    @F,LRDIF                                           0335  11970000
*                  /* GET NEW LR ADDR                                   11980000
*                  CESDTAB(R,12:14)=ADDRTBL(N)+LRDIF;                   11990000
         LH    @7,N                                               0336  12000000
         BCTR  @7,0                                               0336  12010000
         SLA   @7,2                                               0336  12020000
         L     @8,ADDRTBAD                                        0336  12030000
         LA    @A,0(@7,@8)                                        0336  12040000
         MVC   @TEMP4(4),0(@A)                                    0336  12050000
         AL    @F,@TEMP4                                          0336  12060000
         LH    @7,R                                               0336  12070000
         BCTR  @7,0                                               0336  12080000
         MH    @7,@D2                                             0336  12090000
         L     @8,CETABPTR                                        0336  12100000
         ST    @F,@TEMP4                                          0336  12110000
         LA    @A,11(@7,@8)                                       0336  12120000
         MVC   0(3,@A),@TEMP4+1                                   0336  12130000
*                END;                                                   12140000
*              ELSE;                    /* NULL ELSE                    12150000
@9A0     EQU   *                                                  0338  12160000
@9A1     EQU   *                                                  0338  12170000
*          END;                         /* END OF LOOP THRU TABLES      12180000
* /*                                      END OF CHANGES FOR PTM YM2968 12190000
*    CURRLD=RLDTABAD-8;                 /* INIT CURRLD                  12200000
@99F     LH    @F,R                                               0339  12210000
         AH    @F,@D3                                             0339  12220000
@DO9A4   STH   @F,R                                               0339  12230000
         C     @F,TRCOUNT                                         0339  12240000
         BC    12,@DO9A5                                          0339  12250000
         LH    @6,@D9                                             0340  12260000
         A     @6,RLDTABAD                                        0340  12270000
*                                                                       12280000
* /******************************************************************** 12290000
* /* BRANCH HERE WHEN ALL CESD TABLE ADDRESSES HAVE BEEN                12300000
* /* CONVERTED. FOLLOWING CODE RELOCATES RLDTAB ADDRESSES               12310000
* /******************************************************************** 12320000
* NUCCONV4:  CURRLD=CURRLD+8;           /* LOC NEXT LINE IN RLDTABLE    12330000
NUCCONV4 LA    @6,8(0,@6)                                         0341  12340000
*    /* TEST IF ALL RLDTABLE ADDRESSES HAVE BEEN CONVERTED              12350000
*    IF CURRLD=RLDEND                   /* IF AT END OF RLD TABLE       12360000
*      THEN                             /* THEN                         12370000
         C     @6,RLDEND                                          0342  12380000
*        GO TO NCSORT ;                 /* GO TO SORT CESDTAB           12390000
         BC    08,NCSORT                                          0343  12400000
*      ELSE;                            /* NULL ELSE                    12410000
*   N=TRANTAB(PPTR);                    /* GET TRANSLATION TABLE ENTRY  12420000
         LH    @7,2(0,@6)                                         0345  12430000
         BCTR  @7,0                                               0345  12440000
         SLA   @7,1                                               0345  12450000
         L     @8,TRNTABAD                                        0345  12460000
         LH    @F,0(@7,@8)                                        0345  12470000
         STH   @F,N                                               0345  12480000
*                                       /* FOR P PTR                    12490000
*   SCADR=SCATTAB(N);                   /* GET SCAT ADDR OF CSECT THAT  12500000
         LR    @7,@F                                              0346  12510000
         BCTR  @7,0                                               0346  12520000
         SLA   @7,2                                               0346  12530000
         L     @8,SCTTABAD                                        0346  12540000
         LA    @A,0(@7,@8)                                        0346  12550000
         MVC   @TEMP4(4),0(@A)                                    0346  12560000
         L     @F,@TEMP4                                          0346  12570000
         ST    @F,SCADR                                           0346  12580000
*                                       /* CONTAINS THE ADCON           12590000
*   OFFSET=RLDADDR-SCADR;               /* GET OFFSET INTO CSECT        12600000
         LCR   @F,@F                                              0347  12610000
         MVC   @TEMP3+1(3),5(@6)                                  0347  12620000
         A     @F,@TEMP3                                          0347  12630000
         ST    @F,OFFSET                                          0347  12640000
*   /* CHECK IF NIP CESD AND GET STORED NIP ADDR IF YES                 12650000
*   IF PPTR=0                           /* NIP CESD            ZA01417  12660000
*      THEN                             /* YES                          12670000
         SR    @F,@F                                              0348  12680000
         CH    @F,2(0,@6)                                         0348  12690000
         BC    07,@99E                                            0348  12700000
*       DO;                                                             12710000
*         RLDADDR=NIPADDR+OFFSET;       /* PUT NEW ADDR OF ADCON IN     12720000
         L     @F,OFFSET                                          0350  12730000
         MVC   @TEMP3+1(3),NIPADDR                                0350  12740000
         A     @F,@TEMP3                                          0350  12750000
         ST    @F,@TEMP4                                          0350  12760000
         MVC   5(3,@6),@TEMP4+1                                   0350  12770000
         BC    15,@99D                                            0352  12780000
*       END;                            /* RLD TABLE                    12790000
*     ELSE                              /* THIS IS NOT NIP CESD         12800000
*       DO;                                                             12810000
*         RLDADDR=ADDRTBL(N)+OFFSET;    /* PUT NEW ADDR OF              12820000
@99E     L     @F,OFFSET                                          0353  12830000
         LH    @7,N                                               0353  12840000
         BCTR  @7,0                                               0353  12850000
         SLA   @7,2                                               0353  12860000
         L     @8,ADDRTBAD                                        0353  12870000
         LA    @A,0(@7,@8)                                        0353  12880000
         MVC   @TEMP4(4),0(@A)                                    0353  12890000
         AL    @F,@TEMP4                                          0353  12900000
         ST    @F,@TEMP4                                          0353  12910000
         MVC   5(3,@6),@TEMP4+1                                   0353  12920000
*                                       /* ADCON IN RLD TABLE           12930000
*       END;                                                            12940000
*   GO TO NUCCONV4;                     /* CHECK NEXT RLD TABLE ENTRY   12950000
         BC    15,NUCCONV4                                        0355  12960000
* /******************************************************************** 12970000
* /*   THE FOLLOWING SECTION OF CODE SORTS CESD TABLE LINES INTO        12980000
* /*   ASCENDING NUMERICAL ORDER ACCORDING TO THE SEGMENT NUMBER        12990000
* /*   (IF THE LOAD MODULE IS IN OVERLAY), ADDRESS, AND CESD TYPE       13000000
* /*   IN EACH LINE. TO COMPARE TWO LINES,THE THREE FIELDS FOR          13010000
* /*   BOTH LINES ARE MOVED INTO TWO 5-BYTE AREAS.  THE RESULT IS       13020000
* /*   SEGMENT 1 SORTED BY ADDRESS, THEN SEGMENT 2, ETC.                13030000
* /*   THIS SECTION ALSO BUILDS THE INDEX TABLE, WHICH IS USED TO       13040000
* /*   DIRECTLY MATCH ID CHAIN POINTERS, R POINTERS, AND P              13050000
* /*   POINTERS TO CESD TABLE LINES.  THESE POINTER VALUES ARE USED     13060000
* /*   AS OFFSETS INTO THE INDEX TABLE TO FIND A VALUE WHICH            13070000
* /*   IS USED AS AN OFFSET INTO THE CESD TABLE.  THIS SECTION          13080000
* /*   HAS BEEN ASSIGNED NEW VALUES.                                    13090000
* /******************************************************************** 13100000
* NCSORT:                                                               13110000
*   M=NUMCESDS;                         /* INIT M TO NO. CESD TAB ENTS  13120000
NCSORT   LH    @F,NUMCESDS                                        0356  13130000
         ST    @F,M                                               0356  13140000
* NCSORT1: /* BRANCH HERE WHEN A PASS THROUGH THE CESD TABLE IS         13150000
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.      13160000
*   M=M/2;                              /* DIVIDE ARRAY IN HALF         13170000
NCSORT1  L     @E,M                                               0357  13180000
         SRDA  @E,32                                              0357  13190000
         LA    @0,2                                               0357  13200000
         DR    @E,@0                                              0357  13210000
         ST    @F,M                                               0357  13220000
*   /* TEST IF SORT IS FINISHED                                         13230000
*   IF M=0                              /* IF M IS 0                    13240000
*     THEN                              /* THEN SORT IS FINISHED        13250000
         SR    @F,@F                                              0358  13260000
         C     @F,M                                               0358  13270000
         BC    07,@99C                                            0358  13280000
*       DO;                             /* DO THE FOLLOWING             13290000
*                 /* BUILD THE INDEX TABLE                              13300000
*         DO J=1 TO NUMCESDS;           /* LOOP THRU CESD & INDEX TABS  13310000
         LA    @F,1                                               0360  13320000
         BC    15,@DO99A                                          0360  13330000
*           N=CESDTAB(J,1:2);           /* USE CESD AS INDEX            13340000
@DO99B   L     @7,J                                               0361  13350000
         BCTR  @7,0                                               0361  13360000
         MH    @7,@D2                                             0361  13370000
         L     @8,CETABPTR                                        0361  13380000
         LA    @A,0(@7,@8)                                        0361  13390000
         MVC   @TEMP2+2(2),0(@A)                                  0361  13400000
         L     @F,@TEMP2                                          0361  13410000
         STH   @F,N                                               0361  13420000
*           INDEXTAB(N)=J;              /* MAKE ENTRY IN INDEX TABLE    13430000
         L     @F,J                                               0362  13440000
         LH    @7,N                                               0362  13450000
         BCTR  @7,0                                               0362  13460000
         SLA   @7,1                                               0362  13470000
         L     @8,INDTABAD                                        0362  13480000
         STH   @F,0(@7,@8)                                        0362  13490000
*         END;                          /* LOOP                         13500000
*         GO TO NRSORT;                 /* GO TO NUMERIC RLD SORT       13510000
         L     @F,J                                               0363  13520000
         AH    @F,@D3                                             0363  13530000
@DO99A   ST    @F,J                                               0363  13540000
         CH    @F,NUMCESDS                                        0363  13550000
         BC    12,@DO99B                                          0363  13560000
         BC    15,NRSORT                                          0364  13570000
*       END;                                                            13580000
*   K=NUMCESDS-M;                       /* SET INDEX L                  13590000
@99C     LH    @F,NUMCESDS                                        0366  13600000
         S     @F,M                                               0366  13610000
         ST    @F,K                                               0366  13620000
*   J=1;                                /* SET INDEX J TO 1             13630000
         LA    @F,1                                               0367  13640000
         ST    @F,J                                               0367  13650000
* NCSORT2: /* BRANCH HERE TO COMPLETE A PASS THRU THE CESD TABLE.       13660000
*         /* FOLLOWING CODE SETS INDEX I.                               13670000
*   I=J;                                /* SET INDEX I                  13680000
NCSORT2  L     @2,J                                               0368  13690000
* NCSORT3: /* BRANCH HERE WHEN TWO COMPARENDS ARE FOUND                 13700000
*         /* FOLLOWING CODE COMPARES THEM                               13710000
*   IM=I+M;                             /* SET INDEX IM                 13720000
NCSORT3  L     @F,M                                               0369  13730000
         AR    @F,@2                                              0369  13740000
         ST    @F,IM                                              0369  13750000
*   BITCHECK=CESDTAB(I,11);             /* PREPARE TYPE AREA FOR TEST   13760000
         LR    @7,@2                                              0370  13770000
         BCTR  @7,0                                               0370  13780000
         MH    @7,@D2                                             0370  13790000
         L     @8,CETABPTR                                        0370  13800000
         LA    @E,10(@7,@8)                                       0370  13810000
         MVC   BITCHECK(1),0(@E)                                  0370  13820000
*   /* FOLLOWING HANDLES CASE WHERE SD AND/OR PC AND/OR LR HAVE         13830000
*   /* SAME ADDRESS                                                     13840000
*   DO N=5 TO 10 BY 5;                  /* LOOP TWICE                   13850000
         LA    @F,5                                               0371  13860000
         STH   @F,N                                               0371  13870000
*     /* TEST IF CESD TYPE IS SD                                        13880000
*     IF BITCHECK(5:8)='0000'B          /* IS SO                        13890000
*       THEN                                                            13900000
@DO997   TM    BITCHECK,B'00001111'                               0372  13910000
         BC    05,@993                                            0372  13920000
*         TEMPAREA(N)=ONE;              /* PUT ONE INTO COMPARISON AREA 13930000
         LH    @7,N                                               0373  13940000
         LA    @A,TEMPAREA-1(@7)                                  0373  13950000
         MVC   0(1,@A),ONE                                        0373  13960000
         BC    15,@992                                            0374  13970000
*       ELSE                            /* ELSE PUT IN TWO OR ZERO      13980000
*         /*TST IF CESD TYPE IS LR                                      13990000
*         IF BITCHECK(5:8)='0011'B      /* IS LR                        14000000
*           THEN                        /* THEN                         14010000
@993     TM    BITCHECK,B'00000011'                               0374  14020000
         BC    12,@991                                            0373  14030000
         TM    BITCHECK,B'00001100'                               0374  14040000
         BC    05,@990                                            0374  14050000
*             TEMPAREA(N)=TWO;          /* PUT TWO INTO COMPARE AREA    14060000
         LH    @7,N                                               0375  14070000
         LA    @A,TEMPAREA-1(@7)                                  0375  14080000
         MVC   0(1,@A),TWO                                        0375  14090000
         BC    15,@98F                                            0376  14100000
*           ELSE                        /* ELSE PC OR OTHER TYPE        14110000
*             TEMPAREA(N)=ZERO(1);      /* PUT 0 INTO COMPARISON AREA   14120000
@990     EQU   *                                                  0376  14130000
@991     LH    @7,N                                               0376  14140000
         LA    @A,TEMPAREA-1(@7)                                  0376  14150000
         MVC   0(1,@A),ZERO                                       0376  14160000
*     BITCHECK=CESDTAB(IM,11);          /* PREPARE TYPE AREA FOR TEST   14170000
@98F     EQU   *                                                  0377  14180000
@992     L     @7,IM                                              0377  14190000
         BCTR  @7,0                                               0377  14200000
         MH    @7,@D2                                             0377  14210000
         L     @8,CETABPTR                                        0377  14220000
         LA    @E,10(@7,@8)                                       0377  14230000
         MVC   BITCHECK(1),0(@E)                                  0377  14240000
*   END;                                /* LOOP                         14250000
*   TEMPAREA(2:4)=CESDTAB(I,12:14);     /* PUT 1ST ADDR INTO TEMPAREA   14260000
         LH    @F,N                                               0378  14270000
         AH    @F,@D10                                            0378  14280000
@DO996   STH   @F,N                                               0378  14290000
         CH    @F,@D11                                            0378  14300000
         BC    12,@DO997                                          0378  14310000
         LR    @7,@2                                              0379  14320000
         BCTR  @7,0                                               0379  14330000
         MH    @7,@D2                                             0379  14340000
         L     @8,CETABPTR                                        0379  14350000
         LA    @E,11(@7,@8)                                       0379  14360000
         MVC   TEMPAREA+1(3),0(@E)                                0379  14370000
*   TEMPAREA(7:9)=CESDTAB(IM,12:14);    /* PUT 2ND ADDR INTO TEMPAREA   14380000
         L     @7,IM                                              0380  14390000
         BCTR  @7,0                                               0380  14400000
         MH    @7,@D2                                             0380  14410000
         LA    @E,11(@7,@8)                                       0380  14420000
         MVC   TEMPAREA+6(3),0(@E)                                0380  14430000
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE                14440000
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON      14450000
*     THEN                              /* THEN                         14460000
         L     @7,PARMPTR                                         0381  14470000
         TM    20(@7),B'01000000'                                 0381  14480000
         BC    12,@98E                                            0381  14490000
*       DO;                             /* FILL HIGH ORDER BYTE W/SEGNO 14500000
*         TEMPAREA(1)=CESDTAB(I,15);    /* PUT SEG NO. INTO TEMPAREA    14510000
         LR    @8,@2                                              0383  14520000
         BCTR  @8,0                                               0383  14530000
         MH    @8,@D2                                             0383  14540000
         L     @7,CETABPTR                                        0383  14550000
         LA    @E,14(@8,@7)                                       0383  14560000
         MVC   TEMPAREA(1),0(@E)                                  0383  14570000
*         TEMPAREA(6)=CESDTAB(IM,15);   /* PUT SEG NO. INTO TEMPAREA    14580000
         L     @8,IM                                              0384  14590000
         BCTR  @8,0                                               0384  14600000
         MH    @8,@D2                                             0384  14610000
         LA    @E,14(@8,@7)                                       0384  14620000
         MVC   TEMPAREA+5(1),0(@E)                                0384  14630000
         BC    15,@98D                                            0386  14640000
*       END;                                                            14650000
*     ELSE                              /* ELSE OVERLAY SWITCH IS OFF   14660000
*       DO;                             /* FILL HIGH ORDER BYTE WITH 0  14670000
*         TEMPAREA(1)=ZERO(1);          /* PUT 0 INTO TEMPAREA          14680000
@98E     MVC   TEMPAREA(1),ZERO                                   0387  14690000
*         TEMPAREA(6)=ZERO(1);          /* PUT 0 INTO TEMPAREA          14700000
         MVC   TEMPAREA+5(1),ZERO                                 0388  14710000
*       END;                                                            14720000
*   /* TEST WHICH IS GREATER OF TWO CESDTAB SEG NOS. AND ADDRESSES      14730000
*   IF TEMPAREA(1:5)<=TEMPAREA(6:10)    /* IF SECOND GREATER THAN FIRST 14740000
*     THEN                              /* THEN                         14750000
@98D     CLC   TEMPAREA(5),TEMPAREA+5                             0390  14760000
*       GO TO NCSORT4;                  /* DON'T EXCHANGE CESD LINES    14770000
         BC    12,NCSORT4                                         0391  14780000
*   TEMPAREA(1:18)=CESDTAB(I);          /* FIRST GOES INTO TEMP AREA    14790000
         LR    @7,@2                                              0392  14800000
         BCTR  @7,0                                               0392  14810000
         MH    @7,@D2                                             0392  14820000
         L     @8,CETABPTR                                        0392  14830000
         LA    @E,0(@7,@8)                                        0392  14840000
         MVC   TEMPAREA(18),0(@E)                                 0392  14850000
*   CESDTAB(I)=CESDTAB(IM);             /* SECOND GOES INTO FIRST       14860000
         L     @7,IM                                              0393  14870000
         BCTR  @7,0                                               0393  14880000
         MH    @7,@D2                                             0393  14890000
         LA    @E,0(@7,@8)                                        0393  14900000
         LR    @7,@2                                              0393  14910000
         BCTR  @7,0                                               0393  14920000
         MH    @7,@D2                                             0393  14930000
         LA    @A,0(@7,@8)                                        0393  14940000
         MVC   0(18,@A),0(@E)                                     0393  14950000
*   CESDTAB(IM)=TEMPAREA(1:18);         /* FIRST GOES INTO SECOND       14960000
         L     @7,IM                                              0394  14970000
         BCTR  @7,0                                               0394  14980000
         MH    @7,@D2                                             0394  14990000
         LA    @A,0(@7,@8)                                        0394  15000000
         MVC   0(18,@A),TEMPAREA                                  0394  15010000
*   I=I-M;                              /* DECREMENT INDEX I BY M       15020000
         S     @2,M                                               0395  15030000
*   /* TEST IF BEGINNING OF CESD TABLE HAS BEEN REACHED                 15040000
*   IF I>=1                             /* IF BEGINNING NOT REACHED     15050000
*     THEN                              /* THEN                         15060000
         CH    @2,@D3                                             0396  15070000
*       GO TO NCSORT3;                  /* GO TO COMPARE AGAIN          15080000
         BC    10,NCSORT3                                         0397  15090000
* NCSORT4: /* BRANCH HERE TO BYPASS SWAPPING TWO CESD TABLE LINES.      15100000
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.                 15110000
*   J=J+1;                              /* INCREMENT INDEX J BY 1       15120000
NCSORT4  LA    @F,1                                               0398  15130000
         A     @F,J                                               0398  15140000
         ST    @F,J                                               0398  15150000
*   /* TEST IF THIS SCAN IS FINISHED                                    15160000
*   IF J>K                              /* IF INDEX J GREATER THAN K    15170000
*     THEN                              /* THEN                         15180000
         L     @F,K                                               0399  15190000
         C     @F,J                                               0399  15200000
*       GO TO NCSORT1;                  /* GO TO POSSIBLY SCAN AGAIN    15210000
         BC    04,NCSORT1                                         0400  15220000
*     ELSE                              /* ELSE SCAN ISN'T FINISHED     15230000
*       GO TO NCSORT2;                  /* GO TO FINISH IT              15240000
         BC    15,NCSORT2                                         0401  15250000
*                                                                       15260000
* /******************************************************************** 15270000
* /*   THE FOLLOWING SECTION OF CODE SORTS RLD TABLE LINES INTO         15280000
* /*   ASCENDING NUMERICAL ORDER ACCORDING TO THE ADDRESS FIELD IN      15290000
* /*   EACH LINE.  COMPARISONS ARE MADE FROM THE RLD TABLE LINES,       15300000
* /*   WITHOUT USING TEMPORARY AREAS.  THIS SECTION IS ENTERED AFTER    15310000
* /*   THE NCSORT IS FINISHED.                                          15320000
* /******************************************************************** 15330000
*                                                                       15340000
* NRSORT:                                                               15350000
*   /* TEST IF LOAD MODULE CONTAINS ANY EXTERNAL REFERENCES             15360000
*   IF EREFPRES='0'B                    /* IF EREFPRES SWITCH IS OFF    15370000
*     THEN                              /* THEN                         15380000
NRSORT   TM    SWITCHES+1,B'00000010'                             0402  15390000
*       GO TO NACESD;                   /* GO TO NACESD PROCESSING      15400000
         BC    08,NACESD                                          0403  15410000
*   M=NUMRLDS;                          /* INIT M TO NO. RLD TAB ENTS   15420000
         MVC   M(4),NUMRLDS                                       0404  15430000
* NRSORT1: /* BRANCH HERE WHEN A PASS THROUGH THE RLD TABLE IS          15440000
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.      15450000
*   M=M/2;                              /* DIVIDE ARRAY IN HALF         15460000
NRSORT1  L     @E,M                                               0405  15470000
         SRDA  @E,32                                              0405  15480000
         LA    @0,2                                               0405  15490000
         DR    @E,@0                                              0405  15500000
         ST    @F,M                                               0405  15510000
*   /* TEST IF SORT IS FINISHED                                         15520000
*   IF M=0                              /* IF M IS 0                    15530000
*     THEN                              /* THEN SORT IS FINISHED        15540000
         SR    @F,@F                                              0406  15550000
         C     @F,M                                               0406  15560000
*         GO TO NACESD;                 /* GO TO NUMERIC CESD PROCESSNG 15570000
         BC    08,NACESD                                          0407  15580000
*   K=NUMRLDS-M;                        /* SET INDEX K                  15590000
         L     @F,NUMRLDS                                         0408  15600000
         S     @F,M                                               0408  15610000
         ST    @F,K                                               0408  15620000
*   J=1;                                /* SET INDEX J TO 1             15630000
         LA    @F,1                                               0409  15640000
         ST    @F,J                                               0409  15650000
* NRSORT2: /* BRANCH HERE TO COMPLETE A PASS THROUGH THE RLD TABLE.     15660000
*             FOLLOWING CODE SETS INDEX I.                              15670000
*   I=J;                                /* SET INDEX I                  15680000
NRSORT2  L     @2,J                                               0410  15690000
* NRSORT3: /* BRANCH HERE WHEN TWO NEW COMPARANDS ARE FOUND.            15700000
*             FOLLOWING CODE COMPARES THEM.                             15710000
*   IM=I+M;                             /* SET INDEX IM                 15720000
NRSORT3  L     @F,M                                               0411  15730000
         AR    @F,@2                                              0411  15740000
         ST    @F,IM                                              0411  15750000
*   /* TEST WHICH IS GREATER OF TWO RLD TABLE ADDRESSES                 15760000
*   IF RLDTAB(I,6:8)<=RLDTAB(IM,6:8)    /* IF SECOND GREATER THAN FIRST 15770000
*     THEN                              /* THEN                         15780000
         LR    @7,@F                                              0412  15790000
         BCTR  @7,0                                               0412  15800000
         SLA   @7,3                                               0412  15810000
         L     @8,RLDTABAD                                        0412  15820000
         LA    @E,5(@7,@8)                                        0412  15830000
         LR    @7,@2                                              0412  15840000
         BCTR  @7,0                                               0412  15850000
         SLA   @7,3                                               0412  15860000
         LA    @A,5(@7,@8)                                        0412  15870000
         CLC   0(3,@A),0(@E)                                      0412  15880000
*       GO TO NRSORT4;                  /* DON'T EXCHANGE RLD LINES     15890000
         BC    12,NRSORT4                                         0413  15900000
*   TEMPAREA(1:8)=RLDTAB(I);            /* FIRST GOES INTO TEMP AREA    15910000
         LA    @E,0(@7,@8)                                        0414  15920000
         MVC   TEMPAREA(8),0(@E)                                  0414  15930000
*   RLDTAB(I)=RLDTAB(IM);               /* SECOND GOES INTO FIRST       15940000
         L     @7,IM                                              0415  15950000
         BCTR  @7,0                                               0415  15960000
         SLA   @7,3                                               0415  15970000
         LA    @E,0(@7,@8)                                        0415  15980000
         LR    @7,@2                                              0415  15990000
         BCTR  @7,0                                               0415  16000000
         SLA   @7,3                                               0415  16010000
         LA    @A,0(@7,@8)                                        0415  16020000
         MVC   0(8,@A),0(@E)                                      0415  16030000
*   RLDTAB(IM)=TEMPAREA(1:8);           /* FIRST GOES INTO SECOND       16040000
         L     @7,IM                                              0416  16050000
         BCTR  @7,0                                               0416  16060000
         SLA   @7,3                                               0416  16070000
         LA    @A,0(@7,@8)                                        0416  16080000
         MVC   0(8,@A),TEMPAREA                                   0416  16090000
*   I=I-M;                              /* DECREMENT INDEX I BY M       16100000
         S     @2,M                                               0417  16110000
*   /* TEST IF BEGINNING OF RLD TABLE HAS BEEN REACHED                  16120000
*   IF I>=1                             /* IF BEGINNING NOT REACHED     16130000
*     THEN                              /* THEN                         16140000
         CH    @2,@D3                                             0418  16150000
*       GO TO NRSORT3;                  /* GO TO COMPARE ADDRESSES      16160000
         BC    10,NRSORT3                                         0419  16170000
* NRSORT4: /* BRANCH HERE TO BYPASS SWAPPING TWO RLD TABLE LINES.       16180000
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.                 16190000
*   J=J+1;                              /* INCREMENT INDEX J BY 1       16200000
NRSORT4  LA    @F,1                                               0420  16210000
         A     @F,J                                               0420  16220000
         ST    @F,J                                               0420  16230000
*   /* TEST IF THIS SCAN IS FINISHED                                    16240000
*   IF J>K                              /* IF INDEX J GREATER THAN K    16250000
*     THEN                              /* THEN                         16260000
         L     @F,K                                               0421  16270000
         C     @F,J                                               0421  16280000
*       GO TO NRSORT1;                  /* GO TO POSSIBLY SCAN AGAIN    16290000
         BC    04,NRSORT1                                         0422  16300000
*     ELSE                              /* ELSE SCAN ISN'T FINISHED     16310000
*       GO TO NRSORT2;                  /* GO TO FINISH IT              16320000
         BC    15,NRSORT2                                         0423  16330000
*                                                                       16340000
* /******************************************************************** 16350000
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE NUMERICAL    16360000
* /*   AND ALPHABETICAL MAPS.  IT IS ENTERED TWICE: AFTER THE NRSORT    16370000
* /*   (AT WHICH TIME IT WILL PRODUCE A NUMERICAL MAP) AND AFTER THE    16380000
* /*   ACSORT (WHEN IT WILL PRODUCE AN ALPHABETICAL MAP).               16390000
* /******************************************************************** 16400000
*                                                                       16410000
* NACESD:                                                               16420000
*   CURRCESD=CESDEND-18;                /* PREPARE FOR NEXT STATEMENT   16430000
NACESD   LH    @5,@D12                                            0424  16440000
         A     @5,CESDEND                                         0424  16450000
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                          16460000
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON      16470000
*     THEN                              /* THEN                         16480000
         L     @7,PARMPTR                                         0425  16490000
         TM    20(@7),B'01000000'                                 0425  16500000
         BC    12,@98C                                            0425  16510000
*       HISEGNO=SEGNO;                  /* INIT HIGHEST SEGNO IN LMOD   16520000
         MVC   HISEGNO+1(1),14(@5)                                0426  16530000
         MVI   HISEGNO,X'00'                                      0426  16540000
         BC    15,@98B                                            0427  16550000
*     ELSE                              /* ELSE OVERLAY SWITCH IS OFF   16560000
*       HISEGNO=SEGLENCT;               /* SET HIGH SEG NO. TO 0        16570000
@98C     MVC   HISEGNO(2),SEGLENCT                                0427  16580000
*   SAVCURR1=CETABPTR;                  /* GET BEGINNING OF CESDTAB     16590000
@98B     MVC   SAVCURR1(4),CETABPTR                               0428  16600000
* NACESD1: /* BRANCH HERE WHEN RETURNING FROM NRLD ROUTINE.  FOLLOWING  16610000
*             CODE PERFORMS INITIALIZATIONS FOR NACESD PROCESSING.      16620000
*   /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED               16630000
*   IF NUMCESD='1'B                     /* IF NUMCESD SWITCH IS ON      16640000
*     THEN                              /* THEN                         16650000
NACESD1  TM    SWITCHES+2,B'01000000'                             0429  16660000
         BC    12,@98A                                            0429  16670000
*       DO;                             /* PREPARE FOR THIS PROCESSING  16680000
*         NCHD='1'B;                    /* INDIC TO PRINT NCESD HEADING 16690000
         OI    SWITCHES,B'00001100'                               0431  16700000
*         NCSHD='1'B;                   /* INDIC TO PRINT NCESD SUBHEAD 16710000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          16720000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      16730000
*           THEN                        /* THEN                         16740000
         L     @7,PARMPTR                                         0433  16750000
         TM    20(@7),B'01000000'                                 0433  16760000
         BC    12,@989                                            0433  16770000
*             DO;                       /* PREPARE FOR THIS PROCESSING  16780000
*               SEGLEN=0;               /* SET SEGLEN TO 0              16790000
         MVC   SEGLEN(3),@D1+1                                    0435  16800000
*               CURSEGNO=CURSEGNO+1;    /* INCR CURR SEGNO IN PROCESS   16810000
         LA    @F,1                                               0436  16820000
         SR    @0,@0                                              0436  16830000
         IC    @0,CURSEGNO                                        0436  16840000
         AR    @F,@0                                              0436  16850000
         STC   @F,CURSEGNO                                        0436  16860000
*               DASHLINE='1'B;          /* INDIC TO PRNT LINE OF DASHES 16870000
         OI    SWITCHES+1,B'00001000'                             0437  16880000
*               DUBLDASH='1'B;          /* PRINT ANOTHER LINE OF DASHES 16890000
         OI    SWITCHES+2,B'00010000'                             0438  16900000
*             END;                                                      16910000
*       END;                                                            16920000
         BC    15,@988                                            0441  16930000
*     ELSE                              /* ELSE NUMCESD SWITCH IS OFF   16940000
*       DO;                             /* PREP FOR ALPHA CESD PROCESNG 16950000
*         ACHD='1'B;                    /* INDIC TO PRINT ACESD HEADING 16960000
@98A     OI    SWITCHES,B'00000011'                               0442  16970000
*         ACSHD='1'B;                   /* INDIC TO PRINT ACESD SUBHEAD 16980000
*       END;                                                            16990000
* NACESD2: /* BRANCH HERE AFTER PROCESSING CURRENT CESD TABLE LINE.     17000000
*             FOLLOWING CODE PROCESSES NEXT ONE.                        17010000
*   CURRCESD=SAVCURR1;                  /* GET NEXT CESD TABLE LINE     17020000
@988     EQU   *                                                  0445  17030000
NACESD2  L     @5,SAVCURR1                                        0445  17040000
*   /* TEST IF THIS CESD ROUTINE IS FINISHED                            17050000
*   IF CURRCESD=CESDEND                 /* IF END OF CESD TABLE REACHED 17060000
*     THEN                              /* THEN                         17070000
         C     @5,CESDEND                                         0446  17080000
         BC    07,@987                                            0446  17090000
*       /* TEST IF THE RLD ROUTINE IS FINISHED                          17100000
*       IF RLDSPRTD=NUMRLDS             /* IF ALL RLD DATA IS PRINTED   17110000
*                                          (THESE TWO SYMBOLS ARE ALWAY 17120000
*                                          EQUAL DURING ALPHA CESD      17130000
*                                          PROCESSING)                  17140000
*         THEN                          /* THEN                         17150000
         L     @F,NUMRLDS                                         0447  17160000
         C     @F,RLDSPRTD                                        0447  17170000
         BC    07,@986                                            0447  17180000
*           DO;                         /* TURN CESD HDNG SWITCHES OFF  17190000
*             NCHD='0'B;                /* TURN NUM CESD HEADING OFF    17200000
         NI    SWITCHES,B'11110000'                               0449  17210000
*             NCSHD='0'B;               /* TURN NUM CESD SUBHEAD OFF    17220000
*             ACHD='0'B;                /* TURN ALPHA CESD HEADING OFF  17230000
*             ACSHD='0'B;               /* TURN ALPHA CESD SUBHEAD OFF  17240000
*             /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED     17250000
*             IF NUMCESD='1'B           /* IF NUMCESD SWITCH IS ON      17260000
*               THEN                    /* THEN                         17270000
         TM    SWITCHES+2,B'01000000'                             0453  17280000
         BC    12,@985                                            0453  17290000
*                 DO;                   /* PRODUCE MODULE LENGTHS       17300000
*                   /* TEST IF ALL SEGMENT LENGTHS HAVE BEEN PRINTED    17310000
*                   IF SEGLENCTÂ¬=HISEGNO  /* IF ANOTHER SEGLEN TO PRINT 17320000
*                     THEN              /* THEN                         17330000
         LH    @F,HISEGNO                                         0455  17340000
         CH    @F,SEGLENCT                                        0455  17350000
         BC    08,@984                                            0455  17360000
*                       DO;             /* PREPARE TO PRINT IT          17370000
*                         NA3RET='1'B;  /* INDIC TO RETURN TO NACESD3   17380000
         OI    SWITCHES+2,B'10000000'                             0457  17390000
*                         GO TO NACESD7; /* GO TO PRODUCE SEG LENGTH    17400000
         BC    15,NACESD7                                         0458  17410000
*                       END;                                            17420000
* NACESD3:          /* BRANCH HERE WHEN THE LAST LOAD MODULE SEGMENT    17430000
*                      HAS NO CROSS-REFERENCE LIST. FOLLOWING CODE      17440000
*                      PRODUCES LOAD MODULE LENGTH.                     17450000
*                   REMAINDR=LMLEN//8;  /* COMPUTE REMAINDER            17460000
@984     EQU   *                                                  0460  17470000
NACESD3  MVC   @TEMP3+1(3),LMLEN                                  0460  17480000
         L     @E,@TEMP3                                          0460  17490000
         SRDA  @E,32                                              0460  17500000
         LA    @0,8                                               0460  17510000
         DR    @E,@0                                              0460  17520000
         ST    @E,REMAINDR                                        0460  17530000
*                   /* TEST IF LMOD LENGTH MUST BE ROUNDED TO DBLWORD   17540000
*                   IF REMAINDRÂ¬=0      /* IF REMAINDER NOT 0           17550000
*                     THEN              /* THEN                         17560000
         SR    @F,@F                                              0461  17570000
         C     @F,REMAINDR                                        0461  17580000
         BC    08,@983                                            0461  17590000
*                       LMLEN=LMLEN+8-REMAINDR; /* ROUND TO DBLWORD     17600000
         L     @F,REMAINDR                                        0462  17610000
         LCR   @F,@F                                              0462  17620000
         AH    @F,@D8                                             0462  17630000
         MVC   @TEMP3+1(3),LMLEN                                  0462  17640000
         A     @F,@TEMP3                                          0462  17650000
         ST    @F,@TEMP4                                          0462  17660000
         MVC   LMLEN(3),@TEMP4+1                                  0462  17670000
*                   DATABUF(1:6)=HEADING1(28:33); /* 'LENGTH' INTO BUF  17680000
@983     MVC   BUFFERS+125(6),HEADING1+27                         0463  17690000
*                   /* TEST IF A NUCLEUS IS BEING MAPPED                17700000
*                   IF NUCMAP='1'B      /* IF NUCMAP SWITCH IS ON       17710000
*                     THEN              /* THEN                         17720000
         TM    SWITCHES+2,B'00001000'                             0464  17730000
         BC    12,@982                                            0464  17740000
*                       DO;             /* PUT FOLLOWING IN BUFFER      17750000
*                         DATABUF(8:9)=HEADING3(19:20); /* 'OF'         17760000
         MVC   BUFFERS+132(2),HEADING3+18                         0466  17770000
*                         DATABUF(11:17)=HEADING7(16:22); /* 'NUCLEUS'  17780000
         MVC   BUFFERS+135(7),HEADING7+15                         0467  17790000
         BC    15,@981                                            0469  17800000
*                       END;                                            17810000
*                     ELSE              /* ELSE NUCMAP SWITCH IS OFF    17820000
*                       DATABUF(8:21)=HEADING3(19:32); /* 'OF LOAD      17830000
*                                                         MODULE'       17840000
@982     MVC   BUFFERS+132(14),HEADING3+18                        0469  17850000
*                   BININT(5:7)=LMLEN; /* PREPARE TO CONVERT LMOD LEN   17860000
@981     MVC   BININT+4(3),LMLEN                                  0470  17870000
*                   RELOC='0'B;         /* INDICATE NOT TO ADD RELOCFAC 17880000
         NI    SWITCHES+2,B'11111101'                             0471  17890000
*                   RET=ADDR(NACESD4); /* SET UP RETURN ADDRESS         17900000
         LA    @3,NACESD4                                         0472  17910000
*                   GO TO BITOHEX;     /* CONV LMOD LEN TO PRINTBLE HEX 17920000
         BC    15,BITOHEX                                         0473  17930000
* NACESD4:          /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.      17940000
*                      FOLLOWING CODE CONTINUES NACESD PROCESSING.      17950000
*                   DATABUF(23:28)=HEXINT(2:7); /* PUT LENGTH INTO BUF  17960000
NACESD4  MVC   BUFFERS+147(6),HEXINT+1                            0474  17970000
*                   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY          17980000
*                   IF OVERLAY='1'B     /* IF OVERLAY SWITCH IS ON      17990000
*                     THEN              /* THEN                         18000000
         L     @7,PARMPTR                                         0475  18010000
         TM    20(@7),B'01000000'                                 0475  18020000
         BC    12,@980                                            0475  18030000
*                       DO;             /* PREPARE FOR PRINT            18040000
*                         DASHLINE='1'B; /* INDICATE TO PRINT DASHES    18050000
         OI    SWITCHES+1,B'00001000'                             0477  18060000
*                         DUBLDASH='1'B; /* PRNT ANOTHER LINE OF DASHES 18070000
         OI    SWITCHES+2,B'00010000'                             0478  18080000
*                         DATABUF(73)=HEADING3(51); /* PUT '(' INTO BUF 18090000
         MVC   BUFFERS+197(1),HEADING3+50                         0479  18100000
*                         DATABUF(74:79)=HEADING1(28:33); /* 'LENGTH'   18110000
         MVC   BUFFERS+198(6),HEADING1+27                         0480  18120000
*                         DATABUF(81:112)=HEADING3(19:50); /* 'OF LOAD  18130000
*                                                             MODULE IF 18140000
*                                                             NOT IN    18150000
*                                                             OVERLAY'  18160000
         MVC   BUFFERS+205(32),HEADING3+18                        0481  18170000
*                         DATABUF(120)=HEADING3(52); /* PUT ')' IN BUF  18180000
         MVC   BUFFERS+244(1),HEADING3+51                         0482  18190000
*                         LMLENNO=LMLENNO-PDLEN; /* COMPUTE LMLENNO     18200000
         MVC   @TEMP3+1(3),LMLENNO                                0483  18210000
         L     @F,@TEMP3                                          0483  18220000
         MVC   @TEMP3+1(3),PDLEN                                  0483  18230000
         S     @F,@TEMP3                                          0483  18240000
         ST    @F,@TEMP4                                          0483  18250000
         MVC   LMLENNO(3),@TEMP4+1                                0483  18260000
*                         BININT(5:7)=LMLENNO; /* PREP CONV LEN NO OVLY 18270000
         MVC   BININT+4(3),LMLENNO                                0484  18280000
*                         RELOC='0'B;   /* INDICATE NOT TO ADD RELOCFAC 18290000
         NI    SWITCHES+2,B'11111101'                             0485  18300000
*                         RET=ADDR(NACESD5); /* SET UP RETURN ADDRESS   18310000
         LA    @3,NACESD5                                         0486  18320000
*                         GO TO BITOHEX; /* CONV LMLENNO TO PRNTBLE HEX 18330000
         BC    15,BITOHEX                                         0487  18340000
* NACESD5:                /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE 18350000
*                            FOLLOWING CODE CONTINUES NACESD PROCES'NG. 18360000
*                         DATABUF(114:119)=HEXINT(2:7); /* PUT INTO BUF 18370000
NACESD5  MVC   BUFFERS+238(6),HEXINT+1                            0488  18380000
*                       END;                                            18390000
*                   SP2='1'B;           /* SET UP DATA BUF CON CHAR     18400000
@980     OI    SWITCHES+2,B'00100000'                             0490  18410000
*                   RET=ADDR(NACESD6);  /* SET UP RETURN ADDRESS        18420000
         LA    @3,NACESD6                                         0491  18430000
*                   GO TO WRITE;        /* GO TO PRINT THIS BUFFER      18440000
         BC    15,WRITE                                           0492  18450000
*                 END;                                                  18460000
* NACESD6:    /* BRANCH HERE TO RETURN FROM WRITE ROUTINE.              18470000
*                FOLLOWING CODE CONTINUES NACESD PROCESSING.            18480000
*             DASHLINE='0'B;            /* TURN DASHLINE SWITCH OFF     18490000
@985     EQU   *                                                  0494  18500000
NACESD6  NI    SWITCHES+1,B'11110111'                             0494  18510000
*             DUBLDASH='0'B;            /* TURN DUBLDASH SWITCH OFF     18520000
         NI    SWITCHES+2,B'11101111'                             0495  18530000
*             GO TO NACESD16;           /* GO TO TEST FOR PSEUDO REGS   18540000
         BC    15,NACESD16                                        0496  18550000
*           END;                                                        18560000
*         ELSE                          /* ELSE NRLD ROUTINE NOT DONE   18570000
*           GO TO NACESD7;              /* GO TO TEST FOR OVERLAY       18580000
*     ELSE                              /* ELSE CESD ROUTINE ISN'T DONE 18590000
*       /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED           18600000
*       IF NUMCESD='1'B                 /* IF NUMCESD SWITCH IS ON      18610000
*         THEN                          /* THEN                         18620000
@987     TM    SWITCHES+2,B'01000000'                             0499  18630000
         BC    12,@97D                                            0499  18640000
*           /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                  18650000
*           IF OVERLAY='1'B             /* IF OVERLAY SWITCH IS ON      18660000
*             THEN                      /* THEN                         18670000
         L     @7,PARMPTR                                         0500  18680000
         TM    20(@7),B'01000000'                                 0500  18690000
         BC    12,@97C                                            0500  18700000
*               /* TEST IF CESD ITEM IS PR, UNRESLVD ER, OR UNRESLVD WX 18710000
*               IF CESDTYPE(7)='0'B     /* IF SD, PC, PD, OR CM         18720000
*                  | CESDTYPE(8)='1'B   /* OR IF LR OR CM               18730000
*                 THEN                  /* THEN                         18740000
         TM    10(@5),B'00000010'                                 0501  18750000
         BC    08,@97B                                            0501  18760000
         TM    10(@5),B'00000001'                                 0501  18770000
         BC    12,@97A                                            0501  18780000
*                   /* TEST IF CURR LINE'S SEG NO.=CURR SEG IN PROCESS  18790000
*                   IF SEGNOÂ¬=CURSEGNO  /* IF THEY ARE NOT EQUAL        18800000
*                     THEN              /* THEN                         18810000
@97B     CLC   14(1,@5),CURSEGNO                                  0502  18820000
         BC    08,@979                                            0502  18830000
* NACESD7:              /* BRANCH HERE WHEN A SEGMENT'S MAP IS COMPLETE 18840000
*                          FOLLOWING CODE PRODUCES SEGMENT LENGTH.      18850000
*                       /* TEST IF INPUT LOAD MODULE IS IN OVERLAY      18860000
*                       IF OVERLAY='1'B /* IF OVERLAY SWITCH IS ON      18870000
*                         THEN          /* THEN                         18880000
NACESD7  L     @7,PARMPTR                                         0503  18890000
         TM    20(@7),B'01000000'                                 0503  18900000
         BC    12,@978                                            0503  18910000
*                           DO;         /* PROCESS SEGMENT LENGTH       18920000
*                             SEGLENCT=SEGLENCT+1; /* INCR SEGLENCT     18930000
         LA    @F,1                                               0505  18940000
         AH    @F,SEGLENCT                                        0505  18950000
         STH   @F,SEGLENCT                                        0505  18960000
*                             LMLENNO=LMLENNO+SEGLEN; /* INCR LMLENNO   18970000
         MVC   @TEMP3+1(3),SEGLEN                                 0506  18980000
         L     @F,@TEMP3                                          0506  18990000
         MVC   @TEMP3+1(3),LMLENNO                                0506  19000000
         A     @F,@TEMP3                                          0506  19010000
         ST    @F,@TEMP4                                          0506  19020000
         MVC   LMLENNO(3),@TEMP4+1                                0506  19030000
*                             BININT(5:7)=SEGLEN; /* PREP TO CONV SEGLN 19040000
         MVC   BININT+4(3),SEGLEN                                 0507  19050000
*                             RELOC='0'B; /* INDIC NOT TO ADD RELOCFAC  19060000
         NI    SWITCHES+2,B'11111101'                             0508  19070000
*                             RET=ADDR(NACESD8); /* SET UP RETURN ADDR  19080000
         LA    @3,NACESD8                                         0509  19090000
*                             GO TO BITOHEX; /* CONV TO PRINTABLE HEX   19100000
         BC    15,BITOHEX                                         0510  19110000
* NACESD8:                    /* BRANCH HERE TO RETURN FROM BITODEC     19120000
*                                ROUTINE.  FOLLOWING CODE CONTINUES     19130000
*                                NACESD PROCESSING.                     19140000
*                             DATABUF(20:25)=HEXINT(2:7); /* PUT LEN IN 19150000
NACESD8  MVC   BUFFERS+144(6),HEXINT+1                            0511  19160000
*                             DATABUF(1:6)=HEADING1(28:33); /* 'LENGTH' 19170000
         MVC   BUFFERS+125(6),HEADING1+27                         0512  19180000
*                             DATABUF(8:9)=HEADING3(19:20); /* 'OF'     19190000
         MVC   BUFFERS+132(2),HEADING3+18                         0513  19200000
*                             DATABUF(11:17)=HEADING7(4:10); /* 'SEG'T' 19210000
         MVC   BUFFERS+135(7),HEADING7+3                          0514  19220000
*                             SP2='1'B; /* SET UP DATA BUF CON CHAR     19230000
         OI    SWITCHES+2,B'00100000'                             0515  19240000
*                             /* TEST FOR WHERE TO RETURN               19250000
*                             IF NA3RET='1'B /* IF NA3RET SWITCH IS ON  19260000
*                               THEN    /* THEN                         19270000
         TM    SWITCHES+2,B'10000000'                             0516  19280000
         BC    12,@977                                            0516  19290000
*                                 RET=ADDR(NACESD3); /* RET TO NACESD3  19300000
         LA    @3,NACESD3                                         0517  19310000
         BC    15,@976                                            0518  19320000
*                               ELSE    /* ELSE NA3RET SWITCH IS OFF    19330000
*                                 RET=ADDR(NRLD); /* RETURN IS TO NRLD  19340000
@977     LA    @3,NRLD                                            0518  19350000
*                             GO TO WRITE; /* PRINT THIS BUFFER         19360000
         BC    15,WRITE                                           0519  19370000
*                           END;                                        19380000
*                         ELSE          /* ELSE OVERLAY SWITCH IS OFF   19390000
*                           GO TO NRLD; /* GO TO NUMERIC RLD ROUTINE    19400000
*   /* TEST IF CESD ITEM IS A SECTION DEF, COMMON AREA, OR PRIVATE CODE 19410000
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD           19420000
*      | CESDTYPE(5:8)='0101'B          /* OR IF CESD ITEM IS CM        19430000
*      | CESDTYPE(6:8)='100'B           /* OR IF CESD ITEM IS PC OR PD  19440000
*     THEN                              /* THEN                         19450000
@975     EQU   *                                                  0522  19460000
@979     EQU   *                                                  0522  19470000
@97A     EQU   *                                                  0522  19480000
@97C     EQU   *                                                  0522  19490000
@97D     EQU   *                                                  0522  19500000
@97E     TM    10(@5),B'00001111'                                 0522  19510000
         BC    08,@974                                            0522  19520000
         TM    10(@5),B'00000101'                                 0522  19530000
         BC    12,@973                                            0522  19540000
         TM    10(@5),B'00001010'                                 0522  19550000
         BC    08,@972                                            0522  19560000
@973     TM    10(@5),B'00000100'                                 0522  19570000
         BC    12,@971                                            0521  19580000
         TM    10(@5),B'00000011'                                 0522  19590000
         BC    05,@970                                            0522  19600000
*       DO;                             /* PUT IT INTO PRINT BUFFER     19610000
@972     EQU   *                                                  0523  19620000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         19630000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      19640000
*           THEN                        /* THEN                         19650000
@974     TM    SWITCHES+2,B'01000000'                             0524  19660000
         BC    12,@96F                                            0524  19670000
*             DO;                       /* PROCESS SEG AND LMOD LENGTHS 19680000
*               REMAINDR=IDLENGTH//8;   /* COMPUTE REMAINDER            19690000
         MVC   @TEMP3+1(3),15(@5)                                 0526  19700000
         L     @E,@TEMP3                                          0526  19710000
         SRDA  @E,32                                              0526  19720000
         LA    @0,8                                               0526  19730000
         DR    @E,@0                                              0526  19740000
         ST    @E,REMAINDR                                        0526  19750000
*               /* TEST IF SEGMENT LENGTH MUST BE ROUNDED TO DOUBLEWORD 19760000
*               IF REMAINDRÂ¬=0          /* IF REMAINDER NOT 0           19770000
*                 THEN                  /* THEN                         19780000
         SR    @F,@F                                              0527  19790000
         C     @F,REMAINDR                                        0527  19800000
         BC    08,@96E                                            0527  19810000
*                   SEGLEN=SEGLEN+8-REMAINDR; /* ROUND TO DOUBLEWORD    19820000
         L     @F,REMAINDR                                        0528  19830000
         LCR   @F,@F                                              0528  19840000
         AH    @F,@D8                                             0528  19850000
         MVC   @TEMP3+1(3),SEGLEN                                 0528  19860000
         A     @F,@TEMP3                                          0528  19870000
         ST    @F,@TEMP4                                          0528  19880000
         MVC   SEGLEN(3),@TEMP4+1                                 0528  19890000
*               SEGLEN=SEGLEN+IDLENGTH; /* INCREMENT SEGMENT LENGTH     19900000
@96E     MVC   @TEMP3+1(3),15(@5)                                 0529  19910000
         L     @F,@TEMP3                                          0529  19920000
         MVC   @TEMP3+1(3),SEGLEN                                 0529  19930000
         A     @F,@TEMP3                                          0529  19940000
         ST    @F,@TEMP4                                          0529  19950000
         MVC   SEGLEN(3),@TEMP4+1                                 0529  19960000
*               /* TEST IF A NUCLEUS IS BEING MAPPED                    19970000
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON       19980000
*                 THEN                  /* THEN                         19990000
         TM    SWITCHES+2,B'00001000'                             0530  20000000
         BC    12,@96D                                            0530  20010000
*                   DO;                 /* INCREMENT NUCLEUS LENGTH     20020000
*                     /* TEST IF CSECT LENGTH MUST BE ROUNDED TO DBLWD  20030000
*                     IF REMAINDRÂ¬=0    /* IF REMAINDER IS NOT ZERO     20040000
*                       THEN            /* THEN                         20050000
         SR    @F,@F                                              0532  20060000
         C     @F,REMAINDR                                        0532  20070000
         BC    08,@96C                                            0532  20080000
*                         LMLEN=LMLEN+8-REMAINDR; /* ROUND TO DOUBLEWRD 20090000
         L     @F,REMAINDR                                        0533  20100000
         LCR   @F,@F                                              0533  20110000
         AH    @F,@D8                                             0533  20120000
         MVC   @TEMP3+1(3),LMLEN                                  0533  20130000
         A     @F,@TEMP3                                          0533  20140000
         ST    @F,@TEMP4                                          0533  20150000
         MVC   LMLEN(3),@TEMP4+1                                  0533  20160000
*                     LMLEN=LMLEN+IDLENGTH; /* INCREMENT NUCLEUS LENGTH 20170000
@96C     MVC   @TEMP3+1(3),15(@5)                                 0534  20180000
         L     @F,@TEMP3                                          0534  20190000
         MVC   @TEMP3+1(3),LMLEN                                  0534  20200000
         A     @F,@TEMP3                                          0534  20210000
         ST    @F,@TEMP4                                          0534  20220000
         MVC   LMLEN(3),@TEMP4+1                                  0534  20230000
         BC    15,@96B                                            0536  20240000
*                   END;                                                20250000
*                 ELSE                  /* ELSE LOAD MODULE NOT NUCLEUS 20260000
*                   /* TEST IF LOAD MODULE LENGTH SHOULD BE INCREMENTED 20270000
*                   IF LMLEN<CESDADDR+IDLENGTH /* IF ADDR LARGST SO FAR 20280000
*                     THEN              /* THEN                         20290000
@96D     MVC   @TEMP3+1(3),15(@5)                                 0536  20300000
         L     @F,@TEMP3                                          0536  20310000
         MVC   @TEMP3+1(3),11(@5)                                 0536  20320000
         A     @F,@TEMP3                                          0536  20330000
         MVC   @TEMP3+1(3),LMLEN                                  0536  20340000
         C     @F,@TEMP3                                          0536  20350000
         BC    12,@96A                                            0536  20360000
*                       LMLEN=CESDADDR+IDLENGTH; /* COMPUTE LMOD LENGTH 20370000
         MVC   @TEMP3+1(3),15(@5)                                 0537  20380000
         L     @F,@TEMP3                                          0537  20390000
         MVC   @TEMP3+1(3),11(@5)                                 0537  20400000
         A     @F,@TEMP3                                          0537  20410000
         ST    @F,@TEMP4                                          0537  20420000
         MVC   LMLEN(3),@TEMP4+1                                  0537  20430000
*             END;                                                      20440000
@96A     EQU   *                                                  0538  20450000
@96B     EQU   *                                                  0538  20460000
*         BININT(5:7)=CESDADDR;         /* PREPARE TO CONVERT LMOD LOC  20470000
@96F     MVC   BININT+4(3),11(@5)                                 0539  20480000
*         RET=ADDR(NACESD9);            /* SET UP RETURN ADDRESS        20490000
         LA    @3,NACESD9                                         0540  20500000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 20510000
         BC    15,BITOHEX                                         0541  20520000
* NACESD9: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.               20530000
*             FOLLOWING CODE CONTINUES NACESD PROCESSING.               20540000
*         DATABUF(19:24)=HEXINT(2:7);   /* PUT LMOD LOC INTO BUFFER     20550000
NACESD9  MVC   BUFFERS+143(6),HEXINT+1                            0542  20560000
*         BININT(5:7)=IDLENGTH;         /* PREPARE TO CONVERT LENGTH    20570000
         MVC   BININT+4(3),15(@5)                                 0543  20580000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 20590000
         NI    SWITCHES+2,B'11111101'                             0544  20600000
*         RET=ADDR(NACESD10);           /* SET UP RETURN ADDRESS        20610000
         LA    @3,NACESD10                                        0545  20620000
*         GO TO BITOHEX;                /* CONV LENGTH TO PRINTABLE HEX 20630000
         BC    15,BITOHEX                                         0546  20640000
* NACESD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              20650000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              20660000
*         DATABUF(41:46)=HEXINT(2:7);   /* PUT LENGTH INTO BUFFER       20670000
NACESD10 MVC   BUFFERS+165(6),HEXINT+1                            0547  20680000
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION                  20690000
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD           20700000
*           THEN                        /* THEN                         20710000
         TM    10(@5),B'00001111'                                 0548  20720000
         BC    05,@969                                            0548  20730000
*             DO;                       /* PROCESS REST OF IT           20740000
*               DATABUF(30:37)=SYMBOL;  /* PUT ITS NAME INTO BUFFER     20750000
         MVC   BUFFERS+154(8),2(@5)                               0550  20760000
*               DATABUF(51:52)=SDPRT;   /* PUT 'SD' INTO BUFFER         20770000
         MVC   BUFFERS+175(2),SDPRT                               0551  20780000
*               GO TO NACESD11;         /* GO TO TEST FOR OVERLAY       20790000
         BC    15,NACESD11                                        0552  20800000
*             END;                                                      20810000
*         /* TEST IF CESD ITEM IS A COMMON AREA                         20820000
*         IF CESDTYPE(5:8)='0101'B      /* IF CESD ITEM IS CM           20830000
*           THEN                        /* THEN                         20840000
@969     TM    10(@5),B'00000101'                                 0554  20850000
         BC    12,@968                                            0553  20860000
         TM    10(@5),B'00001010'                                 0554  20870000
         BC    05,@967                                            0554  20880000
*             DO;                       /* PROCESS REST OF IT           20890000
*               DATABUF(51:52)=CMPRT;   /* PUT 'CM' INTO BUFFER         20900000
         MVC   BUFFERS+175(2),CMPRT                               0556  20910000
*               /* TEST IF THIS IS BLANK COMMON OR NAMED COMMON         20920000
*               IF SYMBOL(1)=BLANK      /* IF NAME FIELD IS BLANK       20930000
*                 THEN                  /* THEN                         20940000
         CLC   2(1,@5),BLANK                                      0557  20950000
         BC    07,@966                                            0557  20960000
*                   DATABUF(29:37)=BLCOMPRT; /* PUT '$BLANKCOM' IN BUF  20970000
         MVC   BUFFERS+153(9),BLCOMPRT                            0558  20980000
         BC    15,@965                                            0559  20990000
*                 ELSE                  /* ELSE IT IS NAMED COMMON      21000000
*                   DATABUF(30:37)=SYMBOL; /* PUT ITS NAME INTO BUFFER  21010000
@966     MVC   BUFFERS+154(8),2(@5)                               0559  21020000
*               GO TO NACESD11;         /* GO TO TEST FOR OVERLAY       21030000
         BC    15,NACESD11                                        0560  21040000
*             END;                                                      21050000
*         /* TEST IF CESD ITEM IS PRIVATE CODE                          21060000
*         IF CESDTYPE(6:8)='100'B       /* IF CESD ITEM IS PRIVATE CODE 21070000
*           THEN                        /* THEN                         21080000
@967     EQU   *                                                  0562  21090000
@968     TM    10(@5),B'00000100'                                 0562  21100000
         BC    12,@964                                            0561  21110000
         TM    10(@5),B'00000011'                                 0562  21120000
         BC    05,@963                                            0562  21130000
*             /* TEST IF CESD ITEM IS PRIVATE CODE MARKED DELETE (PD)   21140000
*             IF CESDTYPE(4)='0'B       /* IF CESD ITEM IS NOT PD       21150000
*               THEN                    /* THEN                         21160000
         TM    10(@5),B'00010000'                                 0563  21170000
         BC    05,@962                                            0563  21180000
*                 DO;                   /* IT IS PC                     21190000
*                   DATABUF(29:36)=PRIVPRT; /* PUT '$PRIVATE' INTO BUF  21200000
         MVC   BUFFERS+153(8),PRIVPRT                             0565  21210000
*                   DATABUF(51:52)=PCPRT; /* PUT 'PC' INTO BUFFER       21220000
         MVC   BUFFERS+175(2),PCPRT                               0566  21230000
*                   GO TO NACESD11;     /* GO TO TEST FOR OVERLAY       21240000
         BC    15,NACESD11                                        0567  21250000
*                 END;                                                  21260000
*               ELSE                    /* ELSE CESD ITEM IS PD         21270000
*                 DO;                   /* PROCESS REST OF IT           21280000
*                   DATABUF(51:52)=PDPRT; /* PUT 'PD' INTO BUFFER       21290000
@962     MVC   BUFFERS+175(2),PDPRT                               0570  21300000
*                   REMAINDR=IDLENGTH//8; /* COMPUTE REMAINDER          21310000
         MVC   @TEMP3+1(3),15(@5)                                 0571  21320000
         L     @E,@TEMP3                                          0571  21330000
         SRDA  @E,32                                              0571  21340000
         LA    @0,8                                               0571  21350000
         DR    @E,@0                                              0571  21360000
         ST    @E,REMAINDR                                        0571  21370000
*                   /* TEST IF LENGTH MUST BE ROUNDED TO DOUBLEWORD     21380000
*                   IF REMAINDRÂ¬=0      /* IF REMAINDER NOT 0           21390000
*                     THEN              /* THEN                         21400000
         SR    @F,@F                                              0572  21410000
         C     @F,REMAINDR                                        0572  21420000
         BC    08,@960                                            0572  21430000
*                       PDLEN=PDLEN+8-REMAINDR; /* ROUND TO DOUBLEWORD  21440000
         L     @F,REMAINDR                                        0573  21450000
         LCR   @F,@F                                              0573  21460000
         AH    @F,@D8                                             0573  21470000
         MVC   @TEMP3+1(3),PDLEN                                  0573  21480000
         A     @F,@TEMP3                                          0573  21490000
         ST    @F,@TEMP4                                          0573  21500000
         MVC   PDLEN(3),@TEMP4+1                                  0573  21510000
*                   PDLEN=PDLEN+IDLENGTH; /* INCR CUMUL LEN OF PD ITEMS 21520000
@960     MVC   @TEMP3+1(3),15(@5)                                 0574  21530000
         L     @F,@TEMP3                                          0574  21540000
         MVC   @TEMP3+1(3),PDLEN                                  0574  21550000
         A     @F,@TEMP3                                          0574  21560000
         ST    @F,@TEMP4                                          0574  21570000
         MVC   PDLEN(3),@TEMP4+1                                  0574  21580000
*                   /* TEST IF THIS ITEM IS A SEGTAB                    21590000
*                   IF CESDADDR=ZERO    /* IF CESD ADDRESS IS 0         21600000
*                     THEN              /* THEN IT IS SEGTAB            21610000
         MVC   @TEMP3+1(3),ZERO                                   0575  21620000
         L     @F,@TEMP3                                          0575  21630000
         MVC   @TEMP3+1(3),11(@5)                                 0575  21640000
         C     @F,@TEMP3                                          0575  21650000
         BC    07,@95F                                            0575  21660000
*                       DATABUF(29:35)=SEGTBPRT; /*PUT '$SEGTAB' IN BUF 21670000
         MVC   BUFFERS+153(7),SEGTBPRT                            0576  21680000
         BC    15,@95E                                            0577  21690000
*                     ELSE              /* ELSE CESD ADDRESS IS NOT 0   21700000
*                       DATABUF(29:34)=ENTABPRT; /* PUT '$ENTAB' IN BUF 21710000
@95F     MVC   BUFFERS+153(6),ENTABPRT                            0577  21720000
*                 END;                                                  21730000
@95E     EQU   *                                                  0578  21740000
* NACESD11: /* BRANCH HERE WHEN LMOD LOC, NAME, LENGTH, AND TYPE HAVE   21750000
*              BEEN PROCESSED.  FOLLOWING CODE PROCESSES SEGMENT NO.    21760000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    21770000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      21780000
*           THEN                        /* THEN                         21790000
@961     EQU   *                                                  0579  21800000
@963     EQU   *                                                  0579  21810000
@964     EQU   *                                                  0579  21820000
NACESD11 L     @7,PARMPTR                                         0579  21830000
         TM    20(@7),B'01000000'                                 0579  21840000
         BC    12,@95D                                            0579  21850000
*             DO;                       /* PROCESS SEGMENT NUMBER       21860000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   21870000
         SR    @2,@2                                              0581  21880000
         IC    @2,14(0,@5)                                        0581  21890000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  21900000
         OI    SWITCHES+1,B'00000001'                             0582  21910000
*               RET=ADDR(NACESD12);     /* SET UP RETURN ADDRESS        21920000
         LA    @3,NACESD12                                        0583  21930000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 21940000
         BC    15,BITODEC                                         0584  21950000
* NACESD12:     /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          21960000
*                  FOLLOWING CODE CONTINUES NACESD PROCESSING.          21970000
*               DATABUF(57:59)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER  21980000
NACESD12 MVC   BUFFERS+181(3),DECINT+1                            0585  21990000
*             END;                                                      22000000
*         SAVLMLOC=CESDADDR;            /* SAVE LMOD LOC FOR LR PROC'NG 22010000
@95D     MVC   SAVLMLOC+1(3),11(@5)                               0587  22020000
         MVI   SAVLMLOC,X'00'                                     0587  22030000
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE  22040000
         LA    @5,18(0,@5)                                        0588  22050000
*         /* TEST IF ALPHABETIC CESD PROCESSING IS BEING PERFORMED      22060000
*         IF NUMCESD='0'B               /* IF NUMCESD SWITCH IS OFF     22070000
*           THEN                        /* THEN                         22080000
         TM    SWITCHES+2,B'01000000'                             0589  22090000
         BC    05,@95C                                            0589  22100000
*             DO;                       /* REARRANGE CSECT DATA IN BUF  22110000
*               TEMPAREA=DATABUF(19:40); /* PUT LOC & NAME IN TEMP AREA 22120000
         MVC   TEMPAREA(22),BUFFERS+143                           0591  22130000
*               DATABUF(13:24)=TEMPAREA(11:22); /* MOVE NAME            22140000
         MVC   BUFFERS+137(12),TEMPAREA+10                        0592  22150000
*               DATABUF(25:34)=TEMPAREA(1:10); /* MOVE LMOD LOC         22160000
         MVC   BUFFERS+149(10),TEMPAREA                           0593  22170000
*               DATABUF(35:44)=DATABUF(41:50); /* MOVE LENGTH           22180000
         MVC   BUFFERS+159(10),BUFFERS+165                        0594  22190000
*               DATABUF(45:50)=DATABUF(51:56); /* MOVE TYPE             22200000
         MVC   BUFFERS+169(6),BUFFERS+175                         0595  22210000
*               DATABUF(51:59)=DATABUF(57:65); /* MOVE SEG NO.          22220000
         MVC   BUFFERS+175(9),BUFFERS+181                         0596  22230000
*             END;                                                      22240000
* NACESD13: /* BRANCH HERE WHEN A LINE OF NACESD DATA IS READY TO BE    22250000
*              PRINTED.  FOLLOWING CODE PREPARES TO PRINT IT.           22260000
*         RET=ADDR(NACESD2);            /* SET UP RETURN ADDRESS        22270000
@95C     EQU   *                                                  0598  22280000
NACESD13 LA    @3,NACESD2                                         0598  22290000
*         SAVCURR1=CURRCESD;            /* SAVE CURRCESD                22300000
         ST    @5,SAVCURR1                                        0599  22310000
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE        22320000
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60 22330000
*           THEN                        /* THEN                         22340000
         LA    @F,60                                              0600  22350000
         C     @F,LINECNT                                         0600  22360000
         BC    10,@95B                                            0600  22370000
*             DO;                       /* SET TWO SWITCHES             22380000
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE  22390000
         OI    SWITCHES,B'00010000'                               0602  22400000
*               /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED   22410000
*               IF NUMCESD='1'B         /* IF NUMCESD SWITCH IS ON      22420000
*                 THEN                  /* THEN                         22430000
         TM    SWITCHES+2,B'01000000'                             0603  22440000
         BC    12,@95A                                            0603  22450000
*                   NCHD='1'B;          /* INDIC TO PRINT NCESD HEADING 22460000
         OI    SWITCHES,B'00001000'                               0604  22470000
         BC    15,@959                                            0605  22480000
*                 ELSE                  /* ELSE NUMCESD SWITCH IS OFF   22490000
*                   ACHD='1'B;          /* INDIC TO PRINT ACESD HEADING 22500000
@95A     OI    SWITCHES,B'00000010'                               0605  22510000
*             END;                                                      22520000
*         GO TO WRITE;                  /* GO TO PRINT LINE OF DATA     22530000
         BC    15,WRITE                                           0607  22540000
*       END;                                                            22550000
*   /* TEST IF CESD ITEM IS A LABEL REFERENCE                           22560000
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR           22570000
*     THEN                              /* THEN                         22580000
@970     EQU   *                                                  0609  22590000
@971     TM    10(@5),B'00000011'                                 0609  22600000
         BC    12,@958                                            0608  22610000
         TM    10(@5),B'00001100'                                 0609  22620000
         BC    05,@957                                            0609  22630000
*       DO;                             /* PROCESS IT                   22640000
*         DATABUF(97:104)=SYMBOL;       /* PUT NAME INTO BUFFER         22650000
         MVC   BUFFERS+221(8),2(@5)                               0611  22660000
*         BININT(5:7)=CESDADDR;         /* PREPARE TO CONVERT LMOD LOC  22670000
         MVC   BININT+4(3),11(@5)                                 0612  22680000
*         RET=ADDR(NACESD14);           /* SET UP RETURN ADDRESS        22690000
         LA    @3,NACESD14                                        0613  22700000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 22710000
         BC    15,BITOHEX                                         0614  22720000
* NACESD14: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              22730000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              22740000
*         DATABUF(74:79)=HEXINT(2:7);   /* PUT LMOD LOC INTO BUFFER     22750000
NACESD14 MVC   BUFFERS+198(6),HEXINT+1                            0615  22760000
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD                22770000
         ST    @5,SAVCURR2                                        0616  22780000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         22790000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      22800000
*           THEN                        /* THEN                         22810000
         TM    SWITCHES+2,B'01000000'                             0617  22820000
         BC    12,@956                                            0617  22830000
*             BININT(5:7)=CESDADDR-SAVLMLOC; /* PREP TO CONV CSECT LOC  22840000
         L     @F,SAVLMLOC                                        0618  22850000
         LCR   @F,@F                                              0618  22860000
         MVC   @TEMP3+1(3),11(@5)                                 0618  22870000
         A     @F,@TEMP3                                          0618  22880000
         ST    @F,@TEMP4                                          0618  22890000
         MVC   BININT+4(3),@TEMP4+1                               0618  22900000
         BC    15,@955                                            0619  22910000
*           ELSE                        /* ELSE ALPH CESD PROCESSING ON 22920000
*             DO;                       /* FIND CSECT LOC               22930000
*               SAVCSDAD=CESDADDR;      /* SAVE LR'S LMOD LOC           22940000
@956     MVC   SAVCSDAD+1(3),11(@5)                               0620  22950000
         MVI   SAVCSDAD,X'00'                                     0620  22960000
*               N=IDLENGTH(2:3);        /* PREP FOR NEXT INSTRUCTION    22970000
         MVC   @TEMP2+2(2),16(@5)                                 0621  22980000
         L     @F,@TEMP2                                          0621  22990000
         STH   @F,N                                               0621  23000000
*               N=INDEXTAB(N);          /* FIND INDEX INTO CESD TAB     23010000
         LR    @7,@F                                              0622  23020000
         BCTR  @7,0                                               0622  23030000
         SLA   @7,1                                               0622  23040000
         L     @8,INDTABAD                                        0622  23050000
         LH    @F,0(@7,@8)                                        0622  23060000
         STH   @F,N                                               0622  23070000
*               CURRCESD=ADDR(CESDTAB(N)); /* POINT TO CESD TABLE LINE  23080000
         LR    @7,@F                                              0623  23090000
         BCTR  @7,0                                               0623  23100000
         MH    @7,@D2                                             0623  23110000
         L     @8,CETABPTR                                        0623  23120000
         LA    @5,0(@7,@8)                                        0623  23130000
*               BININT(5:7)=SAVCSDAD-CESDADDR; /* PREP CONV CSECT LOC   23140000
         MVC   @TEMP3+1(3),11(@5)                                 0624  23150000
         L     @F,@TEMP3                                          0624  23160000
         LCR   @F,@F                                              0624  23170000
         A     @F,SAVCSDAD                                        0624  23180000
         ST    @F,@TEMP4                                          0624  23190000
         MVC   BININT+4(3),@TEMP4+1                               0624  23200000
*             END;                                                      23210000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 23220000
@955     NI    SWITCHES+2,B'11111101'                             0626  23230000
*         RET=ADDR(NACESD15);           /* SET UP RETURN ADDRESS        23240000
         LA    @3,NACESD15                                        0627  23250000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 23260000
         BC    15,BITOHEX                                         0628  23270000
* NACESD15: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              23280000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              23290000
*         DATABUF(84:89)=HEXINT(2:7);   /* PUT CSECT LOC INTO BUFFER    23300000
NACESD15 MVC   BUFFERS+208(6),HEXINT+1                            0629  23310000
*         TEMPAREA(1:8)=SYMBOL;         /* PUT CSECT NAME IN TEMP AREA  23320000
         MVC   TEMPAREA(8),2(@5)                                  0630  23330000
*         CURRCESD=SAVCURR2+18;         /* INCR TO PROCESS NEXT LINE    23340000
         LA    @5,18                                              0631  23350000
         A     @5,SAVCURR2                                        0631  23360000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         23370000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      23380000
*           THEN                        /* THEN                         23390000
         TM    SWITCHES+2,B'01000000'                             0632  23400000
*             GO TO NACESD13;           /* GO TO PRINT ENTRY DATA       23410000
         BC    01,NACESD13                                        0633  23420000
*           ELSE                        /* ELSE DO THE FOLLOWING FIRST  23430000
*             DO;                       /* REARRANGE ENTRY DATA IN BUF  23440000
*               TEMPAREA(9:14)=DATABUF(74:79); /* PUT CSECT LOC IN TEMP 23450000
         MVC   TEMPAREA+8(6),BUFFERS+198                          0635  23460000
*               DATABUF(68:77)=DATABUF(97:106); /* MOVE NAME            23470000
         MVC   BUFFERS+192(10),BUFFERS+221                        0636  23480000
*               DATABUF(78:83)=TEMPAREA(9:14); /* MOVE LMOD LOC         23490000
         MVC   BUFFERS+202(6),TEMPAREA+8                          0637  23500000
*               TEMPAREA(9:14)=DATABUF(84:89); /* PUT CSECT LOC IN TEMP 23510000
         MVC   TEMPAREA+8(6),BUFFERS+208                          0638  23520000
*               DATABUF(84:99)=DATABUF(105:120); /* PUT BLANKS IN BUF   23530000
         MVC   BUFFERS+208(16),BUFFERS+229                        0639  23540000
*               DATABUF(88:93)=TEMPAREA(9:14); /* MOVE CSECT LOC        23550000
         MVC   BUFFERS+212(6),TEMPAREA+8                          0640  23560000
*               IF TEMPAREA(2:3)=PRIVPRT(1:2) /* CHECK FOR $P  ZA01415  23570000
*                  THEN DATABUF(99:106)=PRIVPRT;                        23580000
         CLC   TEMPAREA+1(2),PRIVPRT                              0641  23590000
         BC    07,@954                                            0641  23600000
         MVC   BUFFERS+223(8),PRIVPRT                             0642  23610000
         BC    15,@953                                            0643  23620000
*                               /* IF FOUND, INSERT $PRIVATE   ZA01415  23630000
*                  ELSE DATABUF(100:107)=TEMPAREA(1:8);                 23640000
@954     MVC   BUFFERS+224(8),TEMPAREA                            0643  23650000
*                               /* IF NOT, INSERT SYMBOL       ZA01415  23660000
*               GO TO NACESD13;         /* GO TO PRINT ENTRY DATA       23670000
         BC    15,NACESD13                                        0644  23680000
*             END;                                                      23690000
*       END;                                                            23700000
*   /* TEST IF CESD ITEM IS A PSEUDO REGISTER                           23710000
*   IF CESDTYPE(5:8)='0110'B            /* IF CESD ITEM IS A PSEUDO REG 23720000
*     THEN                              /* THEN                         23730000
@957     EQU   *                                                  0647  23740000
@958     TM    10(@5),B'00000110'                                 0647  23750000
         BC    12,@952                                            0646  23760000
         TM    10(@5),B'00001001'                                 0647  23770000
         BC    05,@951                                            0647  23780000
*       PREGHERE='1'B;                  /* INDIC PSEUDO REG PRESENT     23790000
         OI    SWITCHES+1,B'00000100'                             0648  23800000
*   /* TEST FOR INVALID CESD TYPE                                       23810000
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER           23820000
*      | CESDTYPE(5:8)='1010'B          /* OR IF CESD ITEM IS WX        23830000
*      | CESDTYPE(5:8)='0110'B          /* OR IF CESD ITEM IS PR        23840000
*      | CESDTYPE(5:8)='0111'B          /* OR IF CESD ITEM IS NULL      23850000
*     THEN                              /* THEN CESD TYPE IS VALID      23860000
@951     EQU   *                                                  0649  23870000
@952     TM    10(@5),B'00000010'                                 0649  23880000
         BC    12,@950                                            0649  23890000
         TM    10(@5),B'00001101'                                 0649  23900000
         BC    08,@94F                                            0649  23910000
@950     TM    10(@5),B'00001010'                                 0649  23920000
         BC    12,@94E                                            0649  23930000
         TM    10(@5),B'00000101'                                 0649  23940000
         BC    08,@94D                                            0649  23950000
@94E     TM    10(@5),B'00000110'                                 0649  23960000
         BC    12,@94C                                            0649  23970000
         TM    10(@5),B'00001001'                                 0649  23980000
         BC    08,@94B                                            0649  23990000
@94C     TM    10(@5),B'00000111'                                 0649  24000000
         BC    12,@94A                                            0648  24010000
         TM    10(@5),B'00001000'                                 0649  24020000
         BC    05,@949                                            0649  24030000
*       DO;                             /* CONTINUE PROCESSING          24040000
@94B     EQU   *                                                  0650  24050000
@94D     EQU   *                                                  0650  24060000
*         SAVCURR1=SAVCURR1+18;         /* LOC NEXT LINE IN CESD TABLE  24070000
@94F     LA    @F,18                                              0651  24080000
         A     @F,SAVCURR1                                        0651  24090000
         ST    @F,SAVCURR1                                        0651  24100000
*         GO TO NACESD2;                /* GO TO PROCESS THIS NEXT LINE 24110000
         BC    15,NACESD2                                         0652  24120000
*       END;                                                            24130000
*     ELSE                              /* ELSE CESD TYPE IS INVALID    24140000
*       DO;                             /* PROCESS ERROR                24150000
@949     EQU   *                                                  0654  24160000
*         ERRORS(1)='1'B;               /* ERROR-INVALID CESD REC TYPE  24170000
@94A     L     @7,PARMPTR                                         0655  24180000
         OI    32(@7),B'10000000'                                 0655  24190000
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB101I)      24200000
         BC    15,ABORT                                           0656  24210000
*       END;                                                            24220000
* NACESD16: /* BRANCH HERE WHEN IT IS TIME TO PROCESS PSEUDO REGISTERS. 24230000
*              FOLLOWNG CODE PROCESSES THEM.                            24240000
*   /* TEST IF INPUT LOAD M0DULE CONTAINS ANY PSEUDO REGISTERS          24250000
*   IF PREGHERE='1'B                    /* IF PSEUDO REGS PRESENT       24260000
*     THEN                              /* THEN                         24270000
@948     EQU   *                                                  0658  24280000
NACESD16 TM    SWITCHES+1,B'00000100'                             0658  24290000
         BC    12,@947                                            0658  24300000
*       DO;                             /* GET READY TO PROCESS THEM    24310000
*         DASHLINE='1'B;                /* INDIC TO PRNT LINE OF DASHES 24320000
         OI    SWITCHES+1,B'00001000'                             0660  24330000
*         DUBLDASH='1'B;                /* PRINT ANOTHER LINE OF DASHES 24340000
         OI    SWITCHES+2,B'00010000'                             0661  24350000
*         PRHD='1'B;                    /* INDIC TO PRINT PREG HEADING  24360000
         OI    SWITCHES+1,B'00110000'                             0662  24370000
*         PRSHD='1'B;                   /* INDIC TO PRINT PREG SUBHEAD  24380000
*         CURRCESD=CETABPTR;            /* PT CURRCESD TO  CESDTAB BEG  24390000
         L     @5,CETABPTR                                        0664  24400000
         BC    15,@946                                            0666  24410000
*       END;                                                            24420000
*     ELSE                              /* ELSE BYPASS P REG PROCESSING 24430000
*       DO;                             /* FIND OUT WHERE TO BRANCH TO  24440000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         24450000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      24460000
*           THEN                        /* THEN                         24470000
@947     TM    SWITCHES+2,B'01000000'                             0667  24480000
*             GO TO ACSORT;             /* GO TO ALPHA CESD SORT        24490000
         BC    01,ACSORT                                          0668  24500000
*           ELSE                        /* ELSE ALPHA PROCESSING ON     24510000
*             GO TO ARLD;               /* GO TO ALPHA RLD PROCESSING   24520000
         BC    15,ARLD                                            0669  24530000
*       END;                                                            24540000
* NACESD17: /* BRANCH HERE AFTER PROCESSING CURRENT PSEUDO REGISTER.    24550000
*              FOLLOWING CODE PROCESSES NEXT ONE.                       24560000
*   /* TEST IF ALL PSEUDO REGISTERS HAVE BEEN PROCESSED                 24570000
*   IF CURRCESD=CESDEND                 /* IF END OF CESD TABLE REACHED 24580000
*     THEN                              /* THEN                         24590000
@946     EQU   *                                                  0671  24600000
NACESD17 C     @5,CESDEND                                         0671  24610000
         BC    07,@945                                            0671  24620000
*       /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED           24630000
*       IF NUMCESD='1'B                 /* IF NUMCESD SWITCH IS ON      24640000
*         THEN                          /* THEN                         24650000
         TM    SWITCHES+2,B'01000000'                             0672  24660000
         BC    12,@944                                            0672  24670000
*           DO;                         /* PRINT TOTAL LENGTH OF P REGS 24680000
*             BININT(5:7)=PRLEN;        /* PREPARE TO CONVERT PR LENGTH 24690000
         MVC   BININT+4(3),PRLEN                                  0674  24700000
*             RELOC='0'B;               /* INDICATE NOT TO ADD RELOCFAC 24710000
         NI    SWITCHES+2,B'11111101'                             0675  24720000
*             RET=ADDR(NACESD18);       /* SET UP RETURN ADDRESS        24730000
         LA    @3,NACESD18                                        0676  24740000
*             GO TO BITOHEX;            /* CONV TOT LGTH TO PRINTBL HEX 24750000
         BC    15,BITOHEX                                         0677  24760000
* NACESD18:   /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.            24770000
*                FOLLOWING CODE CONTINUES NACESD PROCESSING.            24780000
*             DATABUF(28:33)=HEXINT(2:7); /* PUT TOTAL LENGTH INTO BUF  24790000
NACESD18 MVC   BUFFERS+152(6),HEXINT+1                            0678  24800000
*             DATABUF(1:6)=HEADING1(28:33); /* PUT'LENGTH' INTO BUF     24810000
         MVC   BUFFERS+125(6),HEADING1+27                         0679  24820000
*             DATABUF(8:9)=HEADING3(19:20); /* PUT 'OF' INTO BUF        24830000
         MVC   BUFFERS+132(2),HEADING3+18                         0680  24840000
*             DATABUF(11:26)=HEADING4(8:23); /* PUT 'PSEUDO REGISTERS'  24850000
         MVC   BUFFERS+135(16),HEADING4+7                         0681  24860000
*             SP2='1'B;                 /* SET UP DATA BUF CON CHAR     24870000
         OI    SWITCHES+2,B'00100000'                             0682  24880000
*             RET=ADDR(ACSORT);         /* SET UP RETURN TO ALPHA SORT  24890000
         LA    @3,ACSORT                                          0683  24900000
*             GO TO WRITE;              /* LAST PRINT OF THIS DATA BUF  24910000
         BC    15,WRITE                                           0684  24920000
*           END;                                                        24930000
*         ELSE                          /* ELSE ALPHA CESD PROCESSNG ON 24940000
*           GO TO ARLD;                 /* GO TO ARLD PROCESSNG         24950000
*   /* TEST IF CESD ITEM IS A PSEUDO REGISTER                           24960000
*   IF CESDTYPE(5:8)Â¬='0110'B           /* IF CESD ITEM IS NOT P REG    24970000
*     THEN                              /* THEN                         24980000
@943     EQU   *                                                  0687  24990000
@945     TM    10(@5),B'00000110'                                 0687  25000000
         BC    12,@942                                            0686  25010000
         TM    10(@5),B'00001001'                                 0687  25020000
         BC    08,@941                                            0687  25030000
*       DO;                             /* DON'T PROCESS IT             25040000
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE  25050000
@942     LA    @5,18(0,@5)                                        0689  25060000
*         GO TO NACESD17;               /* GO TO PROCESS NEXT ITEM      25070000
         BC    15,NACESD17                                        0690  25080000
*       END;                                                            25090000
*   PRLEN=CESDADDR+IDLENGTH;            /* COMPUTE TOT LENGTH OF P REGS 25100000
@941     MVC   @TEMP3+1(3),15(@5)                                 0692  25110000
         L     @F,@TEMP3                                          0692  25120000
         MVC   @TEMP3+1(3),11(@5)                                 0692  25130000
         A     @F,@TEMP3                                          0692  25140000
         ST    @F,@TEMP4                                          0692  25150000
         MVC   PRLEN(3),@TEMP4+1                                  0692  25160000
*   BININT(5:7)=IDLENGTH;               /* PREPARE TO CONVERT LENGTH    25170000
         MVC   BININT+4(3),15(@5)                                 0693  25180000
*   RELOC='0'B;                         /* INDICATE NOT TO ADD RELOCFAC 25190000
         NI    SWITCHES+2,B'11111101'                             0694  25200000
*   RET=ADDR(NACESD19);                 /* SET UP RETURN ADDRESS        25210000
         LA    @3,NACESD19                                        0695  25220000
*   GO TO BITOHEX;                      /* CONV LENGTH TO PRINTABLE HEX 25230000
         BC    15,BITOHEX                                         0696  25240000
* NACESD19: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              25250000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              25260000
*   DATABUF(40:45)=HEXINT(2:7);         /* PUT THIS PR'S LEN INTO BUF   25270000
NACESD19 MVC   BUFFERS+164(6),HEXINT+1                            0697  25280000
*   /* TEST IF LENGTH HAS A NONSIGNIFICANT ZERO                         25290000
*   IF DATABUF(44)=CHARZERO(1)          /* IF TENS CHARACTER IS 0       25300000
*     THEN                              /* THEN                         25310000
         CLC   BUFFERS+168(1),CHARZERO                            0698  25320000
         BC    07,@940                                            0698  25330000
*       DATABUF(44)=BLANK;              /* BLANK IT                     25340000
         MVC   BUFFERS+168(1),BLANK                               0699  25350000
*   BININT(5:7)=CESDADDR;               /* PREPARE TO CONVERT ORIGIN    25360000
@940     MVC   BININT+4(3),11(@5)                                 0700  25370000
*   RELOC='0'B;                         /* INDICATE NOT TO ADD RELOCFAC 25380000
         NI    SWITCHES+2,B'11111101'                             0701  25390000
*   RET=ADDR(NACESD20);                 /* SET UP RETURN ADDRESS        25400000
         LA    @3,NACESD20                                        0702  25410000
*   GO TO BITOHEX;                      /* CONV ORIGIN TO PRINTABLE HEX 25420000
         BC    15,BITOHEX                                         0703  25430000
* NACESD20: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.              25440000
*              FOLLOWING CODE CONTINUES NACESD PROCESSING.              25450000
*   /* TEST IF NUMERIC CESD PROCESSING IS BEING DONE                    25460000
*   IF NUMCESD='1'B                     /* IF NUMCESD SWITCH IS ON      25470000
*     THEN                              /* THEN                         25480000
NACESD20 TM    SWITCHES+2,B'01000000'                             0704  25490000
         BC    12,@93F                                            0704  25500000
*       DO;                             /* PUT DATA INTO BUFFER         25510000
*         DATABUF(19:24)=HEXINT(2:7);   /* PUT VECTOR LOC INTO BUFFER   25520000
         MVC   BUFFERS+143(6),HEXINT+1                            0706  25530000
*         DATABUF(30:37)=SYMBOL;        /* PUT NAME INTO BUFFER         25540000
         MVC   BUFFERS+154(8),2(@5)                               0707  25550000
         BC    15,@93E                                            0709  25560000
*       END;                                                            25570000
*     ELSE                              /* ELSE THE ORDER IS DIFFERENT  25580000
*       DO;                             /* PUT DATA INTO BUFFER         25590000
*         DATABUF(14:21)=SYMBOL;        /* PUT NAME INTO BUFFER         25600000
@93F     MVC   BUFFERS+138(8),2(@5)                               0710  25610000
*         DATABUF(25:30)=HEXINT(2:7);   /* PUT VECTOR LOC INTO BUFFER   25620000
         MVC   BUFFERS+149(6),HEXINT+1                            0711  25630000
*         DATABUF(34:45)=DATABUF(40:51); /* MOVE LENGTH INTO PLACE      25640000
         MVC   BUFFERS+158(12),BUFFERS+164                        0712  25650000
*       END;                                                            25660000
*   CURRCESD=CURRCESD+18;               /* LOC NEXT LINE IN CESD TABLE  25670000
@93E     LA    @5,18(0,@5)                                        0714  25680000
*   RET=ADDR(NACESD17);                 /* SET UP RETURN ADDRESS        25690000
         LA    @3,NACESD17                                        0715  25700000
*   /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE              25710000
*   IF LINECNT>60                       /* IF LINE COUNT GREATR THAN 60 25720000
*     THEN                              /* THEN                         25730000
         LA    @F,60                                              0716  25740000
         C     @F,LINECNT                                         0716  25750000
         BC    10,@93D                                            0716  25760000
*       DO;                             /* SET TWO SWITCHES             25770000
*         LINECT61='1'B;                /* INDIC TO PRINT ON NEXT PAGE  25780000
         OI    SWITCHES,B'00010000'                               0718  25790000
*         PRHD='1'B;                    /* INDIC TO PRINT PREG HEADING  25800000
         OI    SWITCHES+1,B'00100000'                             0719  25810000
*       END;                                                            25820000
*   GO TO WRITE;                        /* PRINT THIS BUFFER OF DATA    25830000
         BC    15,WRITE                                           0721  25840000
*                                                                       25850000
* /******************************************************************** 25860000
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE NUMERICAL    25870000
* /*   CROSS-REFERENCE LIST.  IF THE INPUT LOAD MODULE IS IN OVERLAY,   25880000
* /*   THIS SECTION IS ENTERED FOR EACH SEGMENT.  IF NOT IN OVERLAY,    25890000
* /*   THIS SECTION IS ENTERED ONCE.  EACH TIME ENTERED, THE ENTIRE     25900000
* /*   RLD TABLE IS SCANNED.                                            25910000
* /******************************************************************** 25920000
*                                                                       25930000
* NRLD:                                                                 25940000
*   NRHD='1'B;                          /* INDIC TO PRINT NRLD HEADING  25950000
NRLD     OI    SWITCHES+1,B'10001000'                             0722  25960000
*   DASHLINE='1'B;                      /* INDIC TO PRNT LINE OF DASHES 25970000
*   SAVCURR1=CURRCESD;                  /* SAVE CURRCESD                25980000
         ST    @5,SAVCURR1                                        0724  25990000
*   CURRLD=RLDTABAD;                    /* GET BEGINNING OF RLD TABLE   26000000
         L     @6,RLDTABAD                                        0725  26010000
* NRLD1: /* BRANCH HERE WHEN READY TO PROCESS ANOTHER RLD TABLE LINE.   26020000
*           FOLLOWING CODE SEARCHES FOR THIS NEXT LINE.                 26030000
*   /* TEST IF ALL NUMERIC RLD DATA (FOR CUR SEGMENT IF OVLY) PROCESSED 26040000
*   IF CURRLD=RLDEND                    /* IF END OF RLD TABLE REACHED  26050000
*     THEN                              /* THEN                         26060000
NRLD1    C     @6,RLDEND                                          0726  26070000
         BC    07,@93C                                            0726  26080000
*       DO;                             /* THIS SCAN IS FINISHED        26090000
*         NRHD='0'B;                    /* TURN NUMERIC RLD HEADING OFF 26100000
         NI    SWITCHES+1,B'01110111'                             0728  26110000
*         DASHLINE='0'B;                /* TURN LINE OF DASHES OFF      26120000
*         GO TO NACESD1;                /* RETURN TO NUM CESD ROUTINE   26130000
         BC    15,NACESD1                                         0730  26140000
*       END;                                                            26150000
*   /* TEST IF R AND P PTRS ARE VALID                                   26160000
*   IF RPTR>CESDTBID                    /* IF R PTR PTS BEYOND CESDTAB  26170000
*      | PPTR>CESDTBID                  /* OR IF P PTR PTS BEYOND IT    26180000
*     THEN                              /* THEN                         26190000
@93C     LH    @F,CESDTBID                                        0732  26200000
         CH    @F,0(0,@6)                                         0732  26210000
         BC    04,@93B                                            0732  26220000
         CH    @F,2(0,@6)                                         0732  26230000
         BC    10,@93A                                            0732  26240000
*       DO;                             /* PROCESS ERROR                26250000
*         ERRORS(3)='1'B;               /* RLD PTR IS INVALID           26260000
@93B     L     @7,PARMPTR                                         0734  26270000
         OI    32(@7),B'00100000'                                 0734  26280000
*         GO TO ABORT;                  /* ABORT (MESSAGE HMB103I)      26290000
         BC    15,ABORT                                           0735  26300000
*       END;                                                            26310000
*   N=INDEXTAB(PPTR);                   /* FIND INDEX INTO CESD TABLE   26320000
@93A     LH    @7,2(0,@6)                                         0737  26330000
         BCTR  @7,0                                               0737  26340000
         SLA   @7,1                                               0737  26350000
         L     @8,INDTABAD                                        0737  26360000
         LH    @F,0(@7,@8)                                        0737  26370000
         STH   @F,N                                               0737  26380000
*   CURRCESD=ADDR(CESDTAB(N));          /* POINT TO CESD TABLE LINE     26390000
         LR    @7,@F                                              0738  26400000
         BCTR  @7,0                                               0738  26410000
         MH    @7,@D2                                             0738  26420000
         L     @8,CETABPTR                                        0738  26430000
         LA    @5,0(@7,@8)                                        0738  26440000
*   SAVCURR3=CURRCESD;                  /* SAVE CURRCESD                26450000
         ST    @5,SAVCURR3                                        0739  26460000
*   /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                          26470000
*   IF OVERLAY='1'B                     /* IF OVERLAY SWITCH IS ON      26480000
*     THEN                              /* THEN                         26490000
         L     @7,PARMPTR                                         0740  26500000
         TM    20(@7),B'01000000'                                 0740  26510000
         BC    12,@939                                            0740  26520000
*       /* TEST IF CESDTAB ITEM'S SEGNO = CURR SEG NO. IN PROCESS       26530000
*       IF SEGNO=CURSEGNO               /* IF THIS SEG IS IN PROCESS    26540000
*         THEN                          /* THEN                         26550000
         CLC   14(1,@5),CURSEGNO                                  0741  26560000
*           GO TO NRLD2;                /* GO TO PROCESS RLD TABLE LINE 26570000
         BC    08,NRLD2                                           0742  26580000
*         ELSE                          /* ELSE SEGNOÂ¬=CURSEGNO         26590000
*           DO;                         /* DON'T PROCESS THIS LINE      26600000
*             CURRLD=CURRLD+8;          /* LOC NEXT LINE IN RLD TABLE   26610000
         LA    @6,8(0,@6)                                         0744  26620000
*             GO TO NRLD1;              /* GO TO TRY NEXT RLD TAB LINE  26630000
         BC    15,NRLD1                                           0745  26640000
*           END;                                                        26650000
* NRLD2: /* BRANCH HERE WHEN AN RLD TABLE LINE IS FOUND FOR PROCESSING. 26660000
*           FOLLOWING CODE PROCESSES IT.                                26670000
*   N=INDEXTAB(RPTR);                   /* FIND INDEX INTO CESD TABLE   26680000
@939     EQU   *                                                  0747  26690000
NRLD2    LH    @7,0(0,@6)                                         0747  26700000
         BCTR  @7,0                                               0747  26710000
         SLA   @7,1                                               0747  26720000
         L     @8,INDTABAD                                        0747  26730000
         LH    @F,0(@7,@8)                                        0747  26740000
         STH   @F,N                                               0747  26750000
*   CURRCESD=ADDR(CESDTAB(N));          /* POINT TO CESD TABLE LINE     26760000
         LR    @7,@F                                              0748  26770000
         BCTR  @7,0                                               0748  26780000
         MH    @7,@D2                                             0748  26790000
         L     @8,CETABPTR                                        0748  26800000
         LA    @5,0(@7,@8)                                        0748  26810000
*   BININT(5:7)=RLDADDR;                /* PREP TO CONV ER'S LMOD LOC   26820000
         MVC   BININT+4(3),5(@6)                                  0749  26830000
*   RET=ADDR(NRLD3);                    /* SET UP RETURN ADDRESS        26840000
         LA    @3,NRLD3                                           0750  26850000
*   GO TO BITOHEX;                      /* CONV LMOD LOC TO PRNTBLE HEX 26860000
         BC    15,BITOHEX                                         0751  26870000
* NRLD3: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                 26880000
*           FOLLOWING CODE CONTINUES NRLD PROCESSING.                   26890000
*   DATABUF(7:12)=HEXINT(2:7);          /* PUT ER'S LMOD LOC INTO BUF   26900000
NRLD3    MVC   BUFFERS+131(6),HEXINT+1                            0752  26910000
*   /* TEST IF CESD ITEM IS A RESOLVED EXTERNAL REF (LABEL REFERENCE)   26920000
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR           26930000
*     THEN                              /* THEN                         26940000
         TM    10(@5),B'00000011'                                 0753  26950000
         BC    12,@938                                            0752  26960000
         TM    10(@5),B'00001100'                                 0753  26970000
         BC    05,@937                                            0753  26980000
*       DO;                             /* PROCESS IT                   26990000
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF 27000000
         MVC   BUFFERS+180(8),2(@5)                               0755  27010000
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC 27020000
         MVC   BININT+4(3),11(@5)                                 0756  27030000
*         RET=ADDR(NRLD4);              /* SET UP RETURN ADDRESS        27040000
         LA    @3,NRLD4                                           0757  27050000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 27060000
         BC    15,BITOHEX                                         0758  27070000
* NRLD4:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                27080000
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.                  27090000
*         DATABUF(72:77)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF 27100000
NRLD4    MVC   BUFFERS+196(6),HEXINT+1                            0759  27110000
*         SAVCSDAD=CESDADDR;            /* SAVE CESDADDR                27120000
         MVC   SAVCSDAD+1(3),11(@5)                               0760  27130000
         MVI   SAVCSDAD,X'00'                                     0760  27140000
*         N=IDLENGTH(2:3);              /* PREPARE FOR NEXT INSTRUCTION 27150000
         MVC   @TEMP2+2(2),16(@5)                                 0761  27160000
         L     @F,@TEMP2                                          0761  27170000
         STH   @F,N                                               0761  27180000
*         N=INDEXTAB(N);                /* FIND INDEX INTO CESD TABLE   27190000
         LR    @7,@F                                              0762  27200000
         BCTR  @7,0                                               0762  27210000
         SLA   @7,1                                               0762  27220000
         L     @8,INDTABAD                                        0762  27230000
         LH    @F,0(@7,@8)                                        0762  27240000
         STH   @F,N                                               0762  27250000
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE     27260000
         LR    @7,@F                                              0763  27270000
         BCTR  @7,0                                               0763  27280000
         MH    @7,@D2                                             0763  27290000
         L     @8,CETABPTR                                        0763  27300000
         LA    @5,0(@7,@8)                                        0763  27310000
*         BININT(5:7)=SAVCSDAD-CESDADDR; /* COMPUTE SYMBOL'S CSECT LOC  27320000
         MVC   @TEMP3+1(3),11(@5)                                 0764  27330000
         L     @F,@TEMP3                                          0764  27340000
         LCR   @F,@F                                              0764  27350000
         A     @F,SAVCSDAD                                        0764  27360000
         ST    @F,@TEMP4                                          0764  27370000
         MVC   BININT+4(3),@TEMP4+1                               0764  27380000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 27390000
         NI    SWITCHES+2,B'11111101'                             0765  27400000
*         RET=ADDR(NRLD5);              /* SET UP RETURN ADDRESS        27410000
         LA    @3,NRLD5                                           0766  27420000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 27430000
         BC    15,BITOHEX                                         0767  27440000
* NRLD5:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                27450000
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.                  27460000
*         DATABUF(83:88)=HEXINT(2:7);   /* PUT SYMBL'S CSECT LOC IN BUF 27470000
NRLD5    MVC   BUFFERS+207(6),HEXINT+1                            0768  27480000
*         IF CESDTYPE(5:8)='0000'B      /* CHECK FOR SD        ZA01415  27490000
*            THEN DATABUF(96:103)=SYMBOL;                               27500000
         TM    10(@5),B'00001111'                                 0769  27510000
         BC    05,@936                                            0769  27520000
         MVC   BUFFERS+220(8),2(@5)                               0770  27530000
         BC    15,@935                                            0771  27540000
*                                /* IF SD, INSERT SYMBOL       ZA01415  27550000
*            ELSE DATABUF(95:102)=PRIVPRT;                              27560000
@936     MVC   BUFFERS+219(8),PRIVPRT                             0771  27570000
*                                /* IF PC, INSERT $PRIVATE     ZA01415  27580000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    27590000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      27600000
*           THEN                        /* THEN                         27610000
@935     L     @7,PARMPTR                                         0772  27620000
         TM    20(@7),B'01000000'                                 0772  27630000
         BC    12,@934                                            0772  27640000
*             DO;                       /* PROCESS SEGMENT NUMBER       27650000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   27660000
         SR    @2,@2                                              0774  27670000
         IC    @2,14(0,@5)                                        0774  27680000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  27690000
         OI    SWITCHES+1,B'00000001'                             0775  27700000
*               RET=ADDR(NRLD6);        /* SET UP RETURN ADDRESS        27710000
         LA    @3,NRLD6                                           0776  27720000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 27730000
         BC    15,BITODEC                                         0777  27740000
* NRLD6:  /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.                27750000
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.                  27760000
*               DATABUF(109:111)=DECINT(2:4); /* PUT SEG NO. INTO BUF   27770000
NRLD6    MVC   BUFFERS+233(3),DECINT+1                            0778  27780000
*             END;                                                      27790000
* NRLD7:  /* BRANCH HERE TO BYPASS ABOVE LR PROCESSING WHEN CESD ITEM   27800000
*            FOUND THROUGH P PTR IS NOT LR.  FOLLOWING CODE COMPUTES    27810000
*            EXTERNAL REFERENCE'S CSECT LOC.                            27820000
*         CURRCESD=SAVCURR3;            /* RESTORE CURRCESD FOUND       27830000
*                                          THROUGH P PTR                27840000
@934     EQU   *                                                  0780  27850000
NRLD7    L     @5,SAVCURR3                                        0780  27860000
*         BININT(5:7)=RLDADDR-CESDADDR; /* PREP TO CONV ER'S CSECT LOC  27870000
         MVC   @TEMP3+1(3),11(@5)                                 0781  27880000
         L     @F,@TEMP3                                          0781  27890000
         LCR   @F,@F                                              0781  27900000
         MVC   @TEMP3+1(3),5(@6)                                  0781  27910000
         A     @F,@TEMP3                                          0781  27920000
         ST    @F,@TEMP4                                          0781  27930000
         MVC   BININT+4(3),@TEMP4+1                               0781  27940000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 27950000
         NI    SWITCHES+2,B'11111101'                             0782  27960000
*         RET=ADDR(NRLD8);              /* SET UP RETURN ADDRESS        27970000
         LA    @3,NRLD8                                           0783  27980000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 27990000
         BC    15,BITOHEX                                         0784  28000000
* NRLD8:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                28010000
*            FOLOWING CODE CONTINUES NRLD PROCESSING.                   28020000
*         DATABUF(17:22)=HEXINT(2:7);   /* PUT ER'S CSECT LOC INTO BUF  28030000
NRLD8    MVC   BUFFERS+141(6),HEXINT+1                            0785  28040000
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION                  28050000
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD           28060000
*           THEN                        /* THEN                         28070000
         TM    10(@5),B'00001111'                                 0786  28080000
         BC    05,@933                                            0786  28090000
*             DATABUF(30:37)=SYMBOL;    /* PUT CSECT NAME INTO BUFFER   28100000
         MVC   BUFFERS+154(8),2(@5)                               0787  28110000
         BC    15,@932                                            0788  28120000
*           ELSE                        /* ELSE IT IS PRIVATE CODE      28130000
*             DATABUF(29:36)=PRIVPRT;   /* PUT '$PRIVATE' INTO BUFFER   28140000
@933     MVC   BUFFERS+153(8),PRIVPRT                             0788  28150000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    28160000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      28170000
*           THEN                        /* THEN                         28180000
@932     L     @7,PARMPTR                                         0789  28190000
         TM    20(@7),B'01000000'                                 0789  28200000
         BC    12,@931                                            0789  28210000
*             DO;                       /* PROCESS SEGMENT NUMBER       28220000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   28230000
         SR    @2,@2                                              0791  28240000
         IC    @2,14(0,@5)                                        0791  28250000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  28260000
         OI    SWITCHES+1,B'00000001'                             0792  28270000
*               RET=ADDR(NRLD9);        /* SET UP RETURN ADDRESS        28280000
         LA    @3,NRLD9                                           0793  28290000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 28300000
         BC    15,BITODEC                                         0794  28310000
* NRLD9:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          28320000
*                  FOLLOWING CODE CONTINUES NRLD PROCESSING.            28330000
*               DATABUF(43:45)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER  28340000
NRLD9    MVC   BUFFERS+167(3),DECINT+1                            0795  28350000
*             END;                                                      28360000
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE   28370000
@931     LA    @6,8(0,@6)                                         0797  28380000
*         RLDSPRTD=RLDSPRTD+1;          /* INCR NO. OF RLD LINES PRINTD 28390000
         LA    @F,1                                               0798  28400000
         A     @F,RLDSPRTD                                        0798  28410000
         ST    @F,RLDSPRTD                                        0798  28420000
*         RET=ADDR(NRLD1);              /* SET UP RETURN ADDRESS        28430000
         LA    @3,NRLD1                                           0799  28440000
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE        28450000
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60 28460000
*           THEN                        /* THEN                         28470000
         LA    @F,60                                              0800  28480000
         C     @F,LINECNT                                         0800  28490000
         BC    10,@930                                            0800  28500000
*             DO;                       /* SET TWO SWITCHES             28510000
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE  28520000
         OI    SWITCHES,B'00010000'                               0802  28530000
*               NRHD='1'B;              /* INDIC TO PRINT NRLD HEADING  28540000
         OI    SWITCHES+1,B'10000000'                             0803  28550000
*             END;                                                      28560000
*         GO TO WRITE;                  /* PRINT THIS BUFFER OF DATA    28570000
         BC    15,WRITE                                           0805  28580000
*       END;                                                            28590000
*   /* TEST IF CESD ITEM IS A RESOLVED EXT REF (SECTION DEF OR COMMON)  28600000
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD           28610000
*      | CESDTYPE(5:8)='0101'B          /* OR CESD ITEM IS CM           28620000
*      | CESDTYPE(6:8)='100'B           /* OR CESD ITEM IS PC OY03410   28630000
*     THEN                              /* THEN                         28640000
@937     EQU   *                                                  0807  28650000
@938     TM    10(@5),B'00001111'                                 0807  28660000
         BC    08,@92F                                            0807  28670000
         TM    10(@5),B'00000101'                                 0807  28680000
         BC    12,@92E                                            0807  28690000
         TM    10(@5),B'00001010'                                 0807  28700000
         BC    08,@92D                                            0807  28710000
@92E     TM    10(@5),B'00000100'                                 0807  28720000
         BC    12,@92C                                            0806  28730000
         TM    10(@5),B'00000011'                                 0807  28740000
         BC    05,@92B                                            0807  28750000
*       DO;                             /* PROCESS IT                   28760000
@92D     EQU   *                                                  0808  28770000
*         /* TEST WHETHER TO PRINT $PRIVATE                    OY03410  28780000
*         IF CESDTYPE(6:8)='100'B       /* IS THIS PC?         OY03410  28790000
*           THEN                        /* IF IT IS,           OY03410  28800000
@92F     TM    10(@5),B'00000100'                                 0809  28810000
         BC    12,@92A                                            0808  28820000
         TM    10(@5),B'00000011'                                 0809  28830000
         BC    05,@929                                            0809  28840000
*             DO;                       /* PRINT $PRIVATE      OY03410  28850000
*               DATABUF(55:63)=PRIVPRT; /* REF'D SYMBOL        OY03410  28860000
         MVC   BUFFERS+179(8),PRIVPRT                             0811  28870000
         MVI   BUFFERS+187,C' '                                   0811  28880000
*               DATABUF(95:103)=PRIVPRT; /* REF'D CSECT        OY03410  28890000
         MVC   BUFFERS+219(8),PRIVPRT                             0812  28900000
         MVI   BUFFERS+227,C' '                                   0812  28910000
         BC    15,@928                                            0814  28920000
*            END;                                                       28930000
*         /* TEST WHETHER TO PRINT '$BLANKCOM' AS REF'D TO SYMB & CSECT 28940000
*         ELSE IF SYMBOL(1)=BLANK       /* IF SYMBOL FIELD IS BLANK     28950000
*           THEN                        /* THEN THE ITEM IS BLANK COM   28960000
@929     EQU   *                                                  0814  28970000
@92A     CLC   2(1,@5),BLANK                                      0814  28980000
         BC    07,@927                                            0814  28990000
*             DO;                       /* PUT '$BLANKCOM' INTO BUFFER  29000000
*               DATABUF(55:63)=BLCOMPRT; /* IT'S THE REF'D TO SYMBOL    29010000
         MVC   BUFFERS+179(9),BLCOMPRT                            0816  29020000
*               DATABUF(95:103)=BLCOMPRT; /* IT'S THE REF'D TO CSECT    29030000
         MVC   BUFFERS+219(9),BLCOMPRT                            0817  29040000
         BC    15,@926                                            0819  29050000
*             END;                                                      29060000
*           ELSE                        /* ELSE ITEM ISN'T BLANK COMMON 29070000
*             DO;                       /* PUT SYMBOL INTO BUFFER       29080000
*               DATABUF(56:63)=SYMBOL;  /* IT'S THE REF'D TO SYMBOL     29090000
@927     MVC   BUFFERS+180(8),2(@5)                               0820  29100000
*               DATABUF(96:103)=SYMBOL; /* IT'S THE REF'D TO CSECT      29110000
         MVC   BUFFERS+220(8),2(@5)                               0821  29120000
*             END;                                                      29130000
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC 29140000
@926     EQU   *                                                  0823  29150000
@928     MVC   BININT+4(3),11(@5)                                 0823  29160000
*         RET=ADDR(NRLD10);             /* SET UP RETURN ADDRESS        29170000
         LA    @3,NRLD10                                          0824  29180000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 29190000
         BC    15,BITOHEX                                         0825  29200000
* NRLD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                29210000
*            FOLLOWING CODE CONTINUES NRLD PROCESSING.                  29220000
*         DATABUF(72:77)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF 29230000
NRLD10   MVC   BUFFERS+196(6),HEXINT+1                            0826  29240000
*         DATABUF(87:88)=CHARZERO;      /* PUT LOCATION '00' INTO BUF   29250000
         MVC   BUFFERS+211(2),CHARZERO                            0827  29260000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    29270000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      29280000
*           THEN                        /* THEN                         29290000
         L     @7,PARMPTR                                         0828  29300000
         TM    20(@7),B'01000000'                                 0828  29310000
         BC    12,@925                                            0828  29320000
*             DO;                       /* PROCESS SEGMENT NUMBER       29330000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   29340000
         SR    @2,@2                                              0830  29350000
         IC    @2,14(0,@5)                                        0830  29360000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  29370000
         OI    SWITCHES+1,B'00000001'                             0831  29380000
*               RET=ADDR(NRLD11);       /* SET UP RETURN ADDRESS        29390000
         LA    @3,NRLD11                                          0832  29400000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 29410000
         BC    15,BITODEC                                         0833  29420000
* NRLD11:       /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          29430000
*                  FOLLOWING CODE CONTINUES NRLD PROCESSING.            29440000
*               DATABUF(109:111)=DECINT(2:4); /* PUT SEG NO. INTO BUF   29450000
NRLD11   MVC   BUFFERS+233(3),DECINT+1                            0834  29460000
*             END;                                                      29470000
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING   29480000
         BC    15,NRLD7                                           0836  29490000
*       END;                                                            29500000
*   /* TEST IF CESD ITEM IS AN UNRESOLVED EXTERNAL REFERENCE (ER)       29510000
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER           29520000
*     THEN                              /* THEN                         29530000
@92B     EQU   *                                                  0838  29540000
@92C     TM    10(@5),B'00000010'                                 0838  29550000
         BC    12,@924                                            0837  29560000
         TM    10(@5),B'00001101'                                 0838  29570000
         BC    05,@923                                            0838  29580000
*       DO;                             /* FIND OUT WHICH KIND          29590000
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF 29600000
         MVC   BUFFERS+180(8),2(@5)                               0840  29610000
*         /* TEST IF UNRESOLVED ER IS SIMPLE UNRESOLVED                 29620000
*         IF IDLENGTH(1)=ZERO(1)        /* IF ID IS 0                   29630000
*           THEN                        /* THEN                         29640000
         CLC   15(1,@5),ZERO                                      0841  29650000
         BC    07,@922                                            0841  29660000
*             DATABUF(95:105)=UNRESPRT; /* PUT '$UNRESOLVED' INTO BUF   29670000
         MVC   BUFFERS+219(11),UNRESPRT                           0842  29680000
         BC    15,@921                                            0843  29690000
*           ELSE                        /* ELSE TEST FOR NEVER-CALL     29700000
*             /* TEST IF UNRESOLVED ER IS NEVER-CALL                    29710000
*             IF IDLENGTH(1)=NEVRCALL   /* IF ID IS 6                   29720000
*               THEN                    /* THEN                         29730000
@922     CLC   15(1,@5),NEVRCALL                                  0843  29740000
         BC    07,@920                                            0843  29750000
*                 DATABUF(95:105)=NEVCLPRT; /* PUT '$NEVER-CALL' IN BUF 29760000
         MVC   BUFFERS+219(11),NEVCLPRT                           0844  29770000
         BC    15,@91F                                            0845  29780000
*               ELSE                    /* ELSE                         29790000
*                 DO;                   /* PROCESS ERROR                29800000
*                   ERRORS(3)='1'B;     /* RLD PTR IS INVALID           29810000
@920     L     @7,PARMPTR                                         0846  29820000
         OI    32(@7),B'00100000'                                 0846  29830000
*                   GO TO ABORT;        /* ABORT (MESSAGE HMB103I)      29840000
         BC    15,ABORT                                           0847  29850000
*                 END;                                                  29860000
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING   29870000
*       END;                                                            29880000
*   /* TEST IF CESD ITEM IS AN UNRESOLVED WEAK EXTERNAL REFERENCE       29890000
*   IF CESDTYPE(5:8)='1010'B            /* IF CESD ITEM IS WX           29900000
*     THEN                              /* THEN                         29910000
@923     EQU   *                                                  0851  29920000
@924     TM    10(@5),B'00001010'                                 0851  29930000
         BC    12,@91E                                            0850  29940000
         TM    10(@5),B'00000101'                                 0851  29950000
         BC    05,@91D                                            0851  29960000
*       DO;                             /* PROCESS IT                   29970000
*         DATABUF(56:63)=SYMBOL;        /* PUT REF'D TO SYMBOL INTO BUF 29980000
         MVC   BUFFERS+180(8),2(@5)                               0853  29990000
*         DATABUF(95:108)=UNREWPRT;     /* PUT '$UNRESOLVED(W)' IN BUF  30000000
         MVC   BUFFERS+219(14),UNREWPRT                           0854  30010000
*         GO TO NRLD7;                  /* REST SAME AS LR PROCESSING   30020000
         BC    15,NRLD7                                           0855  30030000
*       END;                                                            30040000
*                                                                       30050000
* /******************************************************************** 30060000
* /*   THE FOLLOWING SECTION OF CODE SORTS CESD TABLE LINES INTO        30070000
* /*   ASCENDING ALPHABETICAL ORDER ACCORDING TO THE SYMBOL FIELD       30080000
* /*   IN EACH LINE.  FOR PC, PD, AND BLANK CM LINES (ALL THEIR         30090000
* /*   SYMBOL FIELDS CONTAIN BLANKS), APPROPRIATE SYMBOLS ARE FIRST     30100000
* /*   PUT INTO THESE FIELDS, SO THESE LINES MAY BE SORTED ALONG        30110000
* /*   WITH THE SD, LR, ER, AND NAMED CM LINES.  THEN THE SORT IS       30120000
* /*   DONE FROM THE CESD TABLE, WITHOUT USING TEMPORARY AREAS FOR      30130000
* /*   COMPARISONS.  THE INDEX TABLE IS ALSO REBUILT HERE.  THIS        30140000
* /*   SECTION OF CODE IS ENTERED AFTER ALL NACESD AND NRLD             30150000
* /*   PROCESSING IS FINISHED.                                          30160000
* /******************************************************************** 30170000
*                                                                       30180000
* ACSORT:                                                               30190000
*   LINECNT=61;                         /* INDIC TO SKIP TO NEXT PAGE   30200000
@91D     EQU   *                                                  0857  30210000
@91E     EQU   *                                                  0857  30220000
ACSORT   LA    @F,61                                              0857  30230000
         ST    @F,LINECNT                                         0857  30240000
*   NUMCESD='0'B;                       /* INDIC NUM CESD ROUTINE DONE  30250000
         NI    SWITCHES+2,B'10111111'                             0858  30260000
*   M=NUMCESDS;                         /* INIT M TO NO. CESDTAB ENTS   30270000
         LH    @F,NUMCESDS                                        0859  30280000
         ST    @F,M                                               0859  30290000
*   CURRCESD=CETABPTR;                  /* GET BEGINNING OF CESD TABLE  30300000
         L     @5,CETABPTR                                        0860  30310000
*   /* PUT $P, $E, $S, OR $B IN SYMBOL FIELD OF APPROPRIATE CESD ITEM   30320000
*   DO I=1 TO NUMCESDS;                 /* LOOP THROUGH CESD TABLE      30330000
         LA    @2,1                                               0861  30340000
         BC    15,@DO91B                                          0861  30350000
*     /* TEST IF CESD ITEM IS PRIVATE CODE                              30360000
*     IF CESDTYPE(6:8)='100'B           /* IF CESD ITEM IS PRIVATE CODE 30370000
*       THEN                            /* THEN                         30380000
@DO91C   TM    10(@5),B'00000100'                                 0862  30390000
         BC    12,@918                                            0861  30400000
         TM    10(@5),B'00000011'                                 0862  30410000
         BC    05,@917                                            0862  30420000
*        /* TEST IF CESD ITEM IS PRIVATE CODE MARKED DELETE (PD)        30430000
*        IF CESDTYPE(4)='0'B            /* IF CESD ITEM IS NOT PD       30440000
*           THEN                        /* THEN                         30450000
         TM    10(@5),B'00010000'                                 0863  30460000
         BC    05,@916                                            0863  30470000
*             DO;                       /* IT IS PC                     30480000
*               SYMBOL(2:3)=PRIVPRT(1:2); /* PUT '$P' INTO SYMBOL FIELD 30490000
         MVC   3(2,@5),PRIVPRT                                    0865  30500000
*               SYMBOL(4:6)=CESDADDR;   /* PUT CESDADDR INTO SYMB FIELD 30510000
         MVC   5(3,@5),11(@5)                                     0866  30520000
*               GO TO ACSORT1;          /* GO TO INCREMENT CURRCESD     30530000
         BC    15,ACSORT1                                         0867  30540000
*             END;                                                      30550000
*           ELSE                        /* ELSE CESD ITEM IS PD         30560000
*             DO;                       /* TEST FOR ENTAB OR SEGTAB     30570000
*               /* TEST IF CESD ITEM IS ENTAB                           30580000
*               IF CESDADDRÂ¬=ZERO       /* IF CESDADDR IS NOT 0         30590000
*                 THEN                  /* THEN ITEM IS ENTAB           30600000
@916     MVC   @TEMP3+1(3),ZERO                                   0870  30610000
         L     @F,@TEMP3                                          0870  30620000
         MVC   @TEMP3+1(3),11(@5)                                 0870  30630000
         C     @F,@TEMP3                                          0870  30640000
         BC    08,@914                                            0870  30650000
*                   DO;                 /* PROCESS IT                   30660000
*                     SYMBOL(2:3)=ENTABPRT(1:2); /* '$E' IN SYMB FIELD  30670000
         MVC   3(2,@5),ENTABPRT                                   0872  30680000
*                     SYMBOL(4:6)=CESDADDR; /* CESDADDR INTO SYMB FIELD 30690000
         MVC   5(3,@5),11(@5)                                     0873  30700000
*                     GO TO ACSORT1;    /* LOOP                         30710000
         BC    15,ACSORT1                                         0874  30720000
*                   END;                                                30730000
*                 ELSE                  /* ELSE ITEM IS SEGTAB          30740000
*                   DO;                 /* PROCESS IT                   30750000
*                     SYMBOL(2:3)=SEGTBPRT(1:2); /* '$S' IN SYMB FIELD  30760000
@914     MVC   3(2,@5),SEGTBPRT                                   0877  30770000
*                     GO TO ACSORT1;    /* GO TO INCREMENT CURRCESD     30780000
         BC    15,ACSORT1                                         0878  30790000
*                   END;                                                30800000
*             END;                                                      30810000
@913     EQU   *                                                  0880  30820000
*     /* TEST IF CESD ITEM IS COMMON AREA                               30830000
*     IF CESDTYPE(5:8)='0101'B          /* IF CESD ITEM IS CM           30840000
*       THEN                            /* THEN                         30850000
@915     EQU   *                                                  0881  30860000
@917     EQU   *                                                  0881  30870000
@918     TM    10(@5),B'00000101'                                 0881  30880000
         BC    12,@912                                            0880  30890000
         TM    10(@5),B'00001010'                                 0881  30900000
         BC    05,@911                                            0881  30910000
*         /* TEST IF COMMON AREA IS BLANK COMMON                        30920000
*         IF SYMBOL(1)=BLANK            /* IF SYMBOL FIELD IS BLANK     30930000
*           THEN                        /* THEN ITEM IS BLANK COMMON    30940000
         CLC   2(1,@5),BLANK                                      0882  30950000
         BC    07,@910                                            0882  30960000
*             SYMBOL(2:3)=BLCOMPRT(1:2); /* PUT '$B' INTO SYMBOL FIELD  30970000
         MVC   3(2,@5),BLCOMPRT                                   0883  30980000
* ACSORT1: /* BRANCH HERE AFTER PRIVATE CODE OR COMMON AREA IS DETECTED 30990000
*             AND FLAGGED IN CESD TABLE.  FOLLOWING CODE LOOPS.         31000000
*     CURRCESD=CURRCESD+18;             /* LOC NEXT LINE IN CESD TABLE  31010000
@910     EQU   *                                                  0884  31020000
@911     EQU   *                                                  0884  31030000
@912     EQU   *                                                  0884  31040000
ACSORT1  LA    @5,18(0,@5)                                        0884  31050000
*   END;                                /* LOOP                         31060000
* ACSORT2: /* BRANCH HERE WHEN A PASS THROUGH THE CESD TABLE IS         31070000
*             FINISHED.  FOLLOWING CODE TESTS IF SORT IS FINISHED.      31080000
*   M=M/2;                              /* DIVIDE ARRAY IN HALF         31090000
         AH    @2,@D3                                             0885  31100000
@DO91B   CH    @2,NUMCESDS                                        0885  31110000
         BC    12,@DO91C                                          0885  31120000
ACSORT2  L     @E,M                                               0886  31130000
         SRDA  @E,32                                              0886  31140000
         LA    @0,2                                               0886  31150000
         DR    @E,@0                                              0886  31160000
         ST    @F,M                                               0886  31170000
*   /* TEST IF SORT IS FINISHED                                         31180000
*   IF M=0                              /* IF M IS 0                    31190000
*     THEN                              /* THEN SORT IS FINISHED        31200000
         SR    @F,@F                                              0887  31210000
         C     @F,M                                               0887  31220000
         BC    07,@90F                                            0887  31230000
*       DO;                             /* REBUILD THE INDEX TABLE      31240000
*         /* REBUILD THE INDEX TABLE                                    31250000
*         DO J=1 TO NUMCESDS;           /* LOOP THRU CESD & INDEX TABS  31260000
         LA    @F,1                                               0889  31270000
         BC    15,@DO90D                                          0889  31280000
*           N=CESDTAB(J,1:2);           /* USE CESDID AS INDEX          31290000
@DO90E   L     @7,J                                               0890  31300000
         BCTR  @7,0                                               0890  31310000
         MH    @7,@D2                                             0890  31320000
         L     @8,CETABPTR                                        0890  31330000
         LA    @A,0(@7,@8)                                        0890  31340000
         MVC   @TEMP2+2(2),0(@A)                                  0890  31350000
         L     @F,@TEMP2                                          0890  31360000
         STH   @F,N                                               0890  31370000
*           INDEXTAB(N)=J;              /* MAKE ENTRY IN INDEX TABLE    31380000
         L     @F,J                                               0891  31390000
         LH    @7,N                                               0891  31400000
         BCTR  @7,0                                               0891  31410000
         SLA   @7,1                                               0891  31420000
         L     @8,INDTABAD                                        0891  31430000
         STH   @F,0(@7,@8)                                        0891  31440000
*         END;                          /* LOOP                         31450000
*         GO TO NACESD;                 /* GO TO ALPHA CESD PROCESSING  31460000
         L     @F,J                                               0892  31470000
         AH    @F,@D3                                             0892  31480000
@DO90D   ST    @F,J                                               0892  31490000
         CH    @F,NUMCESDS                                        0892  31500000
         BC    12,@DO90E                                          0892  31510000
         BC    15,NACESD                                          0893  31520000
*       END;                                                            31530000
*   K=NUMCESDS-M;                       /* SET INDEX K                  31540000
@90F     LH    @F,NUMCESDS                                        0895  31550000
         S     @F,M                                               0895  31560000
         ST    @F,K                                               0895  31570000
*   J=1;                                /* SET INDEX J TO 1             31580000
         LA    @F,1                                               0896  31590000
         ST    @F,J                                               0896  31600000
* ACSORT3: /* BRANCH HERE TO COMPLETE A PASS THROUGH THE CESD TABLE.    31610000
*             FOLLOWING CODE SETS INDEX I.                              31620000
*   I=J;                                /* SET INDEX I                  31630000
ACSORT3  L     @2,J                                               0897  31640000
* ACSORT4: /* BRANCH HERE WHEN TWO NEW COMPARANDS ARE FOUND.            31650000
*             FOLLOWING CODE COMPARES THEM.                             31660000
*   IM=I+M;                             /* SET INDEX IM                 31670000
ACSORT4  L     @F,M                                               0898  31680000
         AR    @F,@2                                              0898  31690000
         ST    @F,IM                                              0898  31700000
*   /* TEST WHICH IS GREATER OF TWO CESD TABLE SYMBOLS                  31710000
*   IF CESDTAB(I,3:10)<=CESDTAB(IM,3:10) /* IF SECOND GREATER THAN 1ST  31720000
*     THEN                              /* THEN                         31730000
         LR    @7,@F                                              0899  31740000
         BCTR  @7,0                                               0899  31750000
         MH    @7,@D2                                             0899  31760000
         L     @8,CETABPTR                                        0899  31770000
         LA    @E,2(@7,@8)                                        0899  31780000
         LR    @7,@2                                              0899  31790000
         BCTR  @7,0                                               0899  31800000
         MH    @7,@D2                                             0899  31810000
         LA    @A,2(@7,@8)                                        0899  31820000
         CLC   0(8,@A),0(@E)                                      0899  31830000
*       GO TO ACSORT5;                  /* DON'T EXCHANGE CESD LINES    31840000
         BC    12,ACSORT5                                         0900  31850000
*   TEMPAREA(1:18)=CESDTAB(I);          /* FIRST GOES INTO TEMP AREA    31860000
         LA    @E,0(@7,@8)                                        0901  31870000
         MVC   TEMPAREA(18),0(@E)                                 0901  31880000
*   CESDTAB(I)=CESDTAB(IM);             /* SECOND GOES INTO FIRST       31890000
         L     @7,IM                                              0902  31900000
         BCTR  @7,0                                               0902  31910000
         MH    @7,@D2                                             0902  31920000
         LA    @E,0(@7,@8)                                        0902  31930000
         LR    @7,@2                                              0902  31940000
         BCTR  @7,0                                               0902  31950000
         MH    @7,@D2                                             0902  31960000
         LA    @A,0(@7,@8)                                        0902  31970000
         MVC   0(18,@A),0(@E)                                     0902  31980000
*   CESDTAB(IM)=TEMPAREA(1:18);         /* FIRST GOES INTO SECOND       31990000
         L     @7,IM                                              0903  32000000
         BCTR  @7,0                                               0903  32010000
         MH    @7,@D2                                             0903  32020000
         LA    @A,0(@7,@8)                                        0903  32030000
         MVC   0(18,@A),TEMPAREA                                  0903  32040000
*   I=I-M;                              /* DECREMENT INDEX I BY M       32050000
         S     @2,M                                               0904  32060000
*   /* TEST IF BEGINNING OF CESD TABLE HAS BEEN REACHED                 32070000
*   IF I>=1                             /* IF BEGINNING NOT REACHED     32080000
*     THEN                              /* THEN                         32090000
         CH    @2,@D3                                             0905  32100000
*       GO TO ACSORT4;                  /* GO TO COMPARE SYMBOLS        32110000
         BC    10,ACSORT4                                         0906  32120000
* ACSORT5: /* BRANCH HERE TO BYPASS SWAPPING TWO CESD TABLE LINES.      32130000
*             FOLLOWING CODE TESTS FOR SCAN COMPLETION.                 32140000
*   J=J+1;                              /* INCREMENT INDEX J BY 1       32150000
ACSORT5  LA    @F,1                                               0907  32160000
         A     @F,J                                               0907  32170000
         ST    @F,J                                               0907  32180000
*   /* TEST IF THIS SCAN IS FINISHED                                    32190000
*   IF J>K                              /* IF INDEX J GREATER THAN K    32200000
*     THEN                              /* THEN                         32210000
         L     @F,K                                               0908  32220000
         C     @F,J                                               0908  32230000
*       GO TO ACSORT2;                  /* GO TO POSSIBLY SCAN AGAIN    32240000
         BC    04,ACSORT2                                         0909  32250000
*     ELSE                              /* ELSE SCAN ISN'T FINISHED     32260000
*       GO TO ACSORT3;                  /* GO TO FINISH IT              32270000
         BC    15,ACSORT3                                         0910  32280000
*                                                                       32290000
* /******************************************************************** 32300000
* /*   THE FOLLOWING SECTION OF CODE PRODUCES DATA FOR THE              32310000
* /*   ALPHABETICAL CROSS-REFERENCE LIST.  THIS SECTION IS ENTERED      32320000
* /*   ONCE: AFTER ALPHABETICAL CESD PROCESSING.                        32330000
* /******************************************************************** 32340000
*                                                                       32350000
* ARLD:                                                                 32360000
*   /* TEST IF THE LOAD MODULE CONTAINS ANY EXTERNAL REFERENCES         32370000
*   IF EREFPRES='0'B                    /* IF EREFPRES SWITCH IS OFF    32380000
*     THEN                              /* THEN                         32390000
ARLD     TM    SWITCHES+1,B'00000010'                             0911  32400000
*       GO TO FINISH;                   /* HMBLKXRF IS FINISHED         32410000
         BC    08,FINISH                                          0912  32420000
*   LINECNT=61;                         /* INDIC TO PRINT ON NEXT PAGE  32430000
         LA    @F,61                                              0913  32440000
         ST    @F,LINECNT                                         0913  32450000
*   CURRLD=RLDTABAD;                    /* GET BEGINNING OF RLD TABLE   32460000
         L     @6,RLDTABAD                                        0914  32470000
*   CURRCESD=CETABPTR;                  /* GET BEGINNING OF CESD TABLE  32480000
         L     @5,CETABPTR                                        0915  32490000
*   ARHD='1'B;                          /* TURN ALPHA RLD HEADING ON    32500000
         OI    SWITCHES+1,B'01000000'                             0916  32510000
* ARLD1: /* BRANCH HERE WHEN READY TO PROCESS ANOTHER RLD TABLE LINE.   32520000
*           FOLLOWING CODE SEARCHES FOR THIS NEXT LINE.                 32530000
*   /* TEST IF A PASS THROUGH THE RLD TABLE IS COMPLETE                 32540000
*      (THERE IS ONE PASS FOR EACH CESD TABLE ITEM)                     32550000
*   IF CURRLD=RLDEND                    /* IF END OF RLD TABLE REACHED  32560000
*     THEN                              /* THEN                         32570000
ARLD1    C     @6,RLDEND                                          0917  32580000
         BC    07,@90A                                            0917  32590000
*       DO;                             /* DO THE FOLLOWING             32600000
*         CURRLD=RLDTABAD;              /* GET BEG OF RLD TABLE AGAIN   32610000
         L     @6,RLDTABAD                                        0919  32620000
*         CURRCESD=CURRCESD+18;         /* LOC NEXT LINE IN CESD TABLE  32630000
         LA    @5,18(0,@5)                                        0920  32640000
*         /* TEST IF ALPHABETIC RLD PROCESSING IS COMPLETE              32650000
*         IF CURRCESD=CESDEND           /* IF END OF CESD TABLE REACHED 32660000
*           THEN                        /* THEN                         32670000
         C     @5,CESDEND                                         0921  32680000
*             GO TO FINISH;             /* IMBLKXRF IS FINISHED         32690000
         BC    08,FINISH                                          0922  32700000
*       END;                                                            32710000
*   /* TEST IF R PTR MATCHES CESD ID                                    32720000
*   IF CESDID=RPTR                      /* IF CESD ID = R PTR           32730000
*     THEN                              /* THEN                         32740000
@90A     LH    @F,0(0,@6)                                         0924  32750000
         CH    @F,0(0,@5)                                         0924  32760000
*       GO TO ARLD2;                    /* GO TO PROCESS THIS MATCHUP   32770000
         BC    08,ARLD2                                           0925  32780000
*     ELSE                              /* ELSE CESD ID Â¬= R PTR        32790000
*       DO;                             /* TRY AGAIN                    32800000
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE   32810000
         LA    @6,8(0,@6)                                         0927  32820000
*         GO TO ARLD1;                  /* GO TO TRY AGAIN FOR MATCHUP  32830000
         BC    15,ARLD1                                           0928  32840000
*       END;                                                            32850000
* ARLD2: /* BRANCH HERE WHEN AN RLD TABLE LINE IS FOUND FOR PROCESSING. 32860000
*           FOLLOWING CODE CONVERTS ITS RLD ADDRESS.                    32870000
*   BININT(5:7)=RLDADDR;                /* PREP TO CONV REF'S LMOD LOC  32880000
ARLD2    MVC   BININT+4(3),5(@6)                                  0930  32890000
*   RET=ADDR(ARLD3);                    /* SET UP RETURN ADDRESS        32900000
         LA    @3,ARLD3                                           0931  32910000
*   GO TO BITOHEX;                      /* CONV LMOD LOC TO PRNTBLE HEX 32920000
         BC    15,BITOHEX                                         0932  32930000
* ARLD3: /* BRANCH HRE TO RETURN FROM BITOHEX ROUTINE.                  32940000
*           FOLLOWING CODE CONTINUES ARLD PROCESSING.                   32950000
*   DATABUF(70:75)=HEXINT(2:7);         /* PUT ER'S LMOD LOC INTO BUF   32960000
ARLD3    MVC   BUFFERS+194(6),HEXINT+1                            0933  32970000
*   /* TEST IF CESD ITEM IS A RESOLVED EXTERNAL REF (LABEL REFERENCE)   32980000
*   IF CESDTYPE(5:8)='0011'B            /* IF CESD ITEM IS LR           32990000
*     THEN                              /* THEN                         33000000
         TM    10(@5),B'00000011'                                 0934  33010000
         BC    12,@909                                            0933  33020000
         TM    10(@5),B'00001100'                                 0934  33030000
         BC    05,@908                                            0934  33040000
*       DO;                             /* PROCESS IT                   33050000
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF 33060000
         MVC   BUFFERS+126(8),2(@5)                               0936  33070000
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC 33080000
         MVC   BININT+4(3),11(@5)                                 0937  33090000
*         RET=ADDR(ARLD4);              /* SET UP RETURN ADDRESS        33100000
         LA    @3,ARLD4                                           0938  33110000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 33120000
         BC    15,BITOHEX                                         0939  33130000
* ARLD4:  /* BRACH HERE TO RETURN FROM BITOHEX ROUTINE.                 33140000
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.                  33150000
*         DATABUF(14:19)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF 33160000
ARLD4    MVC   BUFFERS+138(6),HEXINT+1                            0940  33170000
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD                33180000
         ST    @5,SAVCURR2                                        0941  33190000
*         SAVCSDAD=CESDADDR;            /* SAVE CESDADDR                33200000
         MVC   SAVCSDAD+1(3),11(@5)                               0942  33210000
         MVI   SAVCSDAD,X'00'                                     0942  33220000
*         N=IDLENGTH(2:3);              /* PREPARE FOR NEXT INSTRUCTION 33230000
         MVC   @TEMP2+2(2),16(@5)                                 0943  33240000
         L     @F,@TEMP2                                          0943  33250000
         STH   @F,N                                               0943  33260000
*         N=INDEXTAB(N);                /* FIND INDEX INTO CESD TABLE   33270000
         LR    @7,@F                                              0944  33280000
         BCTR  @7,0                                               0944  33290000
         SLA   @7,1                                               0944  33300000
         L     @8,INDTABAD                                        0944  33310000
         LH    @F,0(@7,@8)                                        0944  33320000
         STH   @F,N                                               0944  33330000
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE     33340000
         LR    @7,@F                                              0945  33350000
         BCTR  @7,0                                               0945  33360000
         MH    @7,@D2                                             0945  33370000
         L     @8,CETABPTR                                        0945  33380000
         LA    @5,0(@7,@8)                                        0945  33390000
*         BININT(5:7)=SAVCSDAD-CESDADDR; /* PREP TO CONV SYM'S CSECT LC 33400000
         MVC   @TEMP3+1(3),11(@5)                                 0946  33410000
         L     @F,@TEMP3                                          0946  33420000
         LCR   @F,@F                                              0946  33430000
         A     @F,SAVCSDAD                                        0946  33440000
         ST    @F,@TEMP4                                          0946  33450000
         MVC   BININT+4(3),@TEMP4+1                               0946  33460000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 33470000
         NI    SWITCHES+2,B'11111101'                             0947  33480000
*         RET=ADDR(ARLD5);              /* SET UP RETURN ADDRESS        33490000
         LA    @3,ARLD5                                           0948  33500000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 33510000
         BC    15,BITOHEX                                         0949  33520000
* ARLD5:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                33530000
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.                  33540000
*         DATABUF(25:30)=HEXINT(2:7);   /* PUT SYMBL'S CSECT LOC IN BUF 33550000
ARLD5    MVC   BUFFERS+149(6),HEXINT+1                            0950  33560000
*         IF SYMBOL(2:3)=PRIVPRT(1:2)   /* CHECK FOR $P        ZA01415  33570000
*            THEN DATABUF(37:44)=PRIVPRT;                               33580000
         CLC   3(2,@5),PRIVPRT                                    0951  33590000
         BC    07,@907                                            0951  33600000
         MVC   BUFFERS+161(8),PRIVPRT                             0952  33610000
         BC    15,@906                                            0953  33620000
*                              /* IF FOUND, INSERT $PRIVATE    ZA01415  33630000
*            ELSE DATABUF(38:45)=SYMBOL;                                33640000
@907     MVC   BUFFERS+162(8),2(@5)                               0953  33650000
*                              /* IF NOT, INSERT SYMBOL        ZA01415  33660000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    33670000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      33680000
*           THEN                        /* THEN                         33690000
@906     L     @7,PARMPTR                                         0954  33700000
         TM    20(@7),B'01000000'                                 0954  33710000
         BC    12,@905                                            0954  33720000
*             DO;                       /* PROCESS SEGMENT NUMBER       33730000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   33740000
         SR    @2,@2                                              0956  33750000
         IC    @2,14(0,@5)                                        0956  33760000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  33770000
         OI    SWITCHES+1,B'00000001'                             0957  33780000
*               RET=ADDR(ARLD6);        /* SET UP RETURN ADDRESS        33790000
         LA    @3,ARLD6                                           0958  33800000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 33810000
         BC    15,BITODEC                                         0959  33820000
* ARLD6:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          33830000
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.            33840000
*               DATABUF(51:53)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER  33850000
ARLD6    MVC   BUFFERS+175(3),DECINT+1                            0960  33860000
*             END;                                                      33870000
*         CURRCESD=SAVCURR2;            /* PREPARE FOR FOLLOWING STMNT  33880000
@905     L     @5,SAVCURR2                                        0962  33890000
* ARLD7:  /* BRANCH HERE TO BYPASS ABOVE LR PROCESSING WHEN CESD ITEM   33900000
*            IS NOT LR.  FOLLOWING CODE LOOKS FOR P PTR MATCH.          33910000
*         SAVCURR2=CURRCESD;            /* SAVE CURRCESD                33920000
ARLD7    ST    @5,SAVCURR2                                        0963  33930000
*         N=INDEXTAB(PPTR);             /* FIND INDEX INTO CESD TABLE   33940000
         LH    @7,2(0,@6)                                         0964  33950000
         BCTR  @7,0                                               0964  33960000
         SLA   @7,1                                               0964  33970000
         L     @8,INDTABAD                                        0964  33980000
         LH    @F,0(@7,@8)                                        0964  33990000
         STH   @F,N                                               0964  34000000
*         CURRCESD=ADDR(CESDTAB(N));    /* POINT TO CESD TABLE LINE     34010000
         LR    @7,@F                                              0965  34020000
         BCTR  @7,0                                               0965  34030000
         MH    @7,@D2                                             0965  34040000
         L     @8,CETABPTR                                        0965  34050000
         LA    @5,0(@7,@8)                                        0965  34060000
*         BININT(5:7)=RLDADDR-CESDADDR; /* COMPUTE REF'S CSECT LOC      34070000
         MVC   @TEMP3+1(3),11(@5)                                 0966  34080000
         L     @F,@TEMP3                                          0966  34090000
         LCR   @F,@F                                              0966  34100000
         MVC   @TEMP3+1(3),5(@6)                                  0966  34110000
         A     @F,@TEMP3                                          0966  34120000
         ST    @F,@TEMP4                                          0966  34130000
         MVC   BININT+4(3),@TEMP4+1                               0966  34140000
*         RELOC='0'B;                   /* INDICATE NOT TO ADD RELOCFAC 34150000
         NI    SWITCHES+2,B'11111101'                             0967  34160000
*         RET=ADDR(ARLD8);              /* SET UP RETURN ADDRESS        34170000
         LA    @3,ARLD8                                           0968  34180000
*         GO TO BITOHEX;                /* CONV CSECT LOC TO PRNTBL HEX 34190000
         BC    15,BITOHEX                                         0969  34200000
* ARLD8:  /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                34210000
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.                  34220000
*         DATABUF(88:93)=HEXINT(2:7);   /* PUT ER'S CSECT LOC INTO BUF  34230000
ARLD8    MVC   BUFFERS+212(6),HEXINT+1                            0970  34240000
*         /* TEST IF CESD ITEM IS A SECTION DEFINITION                  34250000
*         IF CESDTYPE(5:8)='0000'B      /* IF CESD ITEM IS SD           34260000
*           THEN                        /* THEN                         34270000
         TM    10(@5),B'00001111'                                 0971  34280000
         BC    05,@904                                            0971  34290000
*             DATABUF(101:108)=SYMBOL;  /* PUT CSECT NAME INTO BUFFER   34300000
         MVC   BUFFERS+225(8),2(@5)                               0972  34310000
         BC    15,@903                                            0973  34320000
*           ELSE                        /* ELSE IT IS PRIVATE CODE      34330000
*             DATABUF(100:107)=PRIVPRT; /* PUT '$PRIVATE' INTO BUFFER   34340000
@904     MVC   BUFFERS+224(8),PRIVPRT                             0973  34350000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    34360000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      34370000
*           THEN                        /* THEN                         34380000
@903     L     @7,PARMPTR                                         0974  34390000
         TM    20(@7),B'01000000'                                 0974  34400000
         BC    12,@902                                            0974  34410000
*             DO;                       /* PROCESS SEGMENT NUMBER       34420000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   34430000
         SR    @2,@2                                              0976  34440000
         IC    @2,14(0,@5)                                        0976  34450000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  34460000
         OI    SWITCHES+1,B'00000001'                             0977  34470000
*               RET=ADDR(ARLD9);        /* SET UP RETURN ADDRESS        34480000
         LA    @3,ARLD9                                           0978  34490000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 34500000
         BC    15,BITODEC                                         0979  34510000
* ARLD9:        /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          34520000
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.            34530000
*               DATABUF(114:116)=DECINT(2:4); /* PUT SEG NO. INTO BUF   34540000
ARLD9    MVC   BUFFERS+238(3),DECINT+1                            0980  34550000
*             END;                                                      34560000
*         CURRCESD=SAVCURR2;            /* RESTORE CURRCESD             34570000
@902     L     @5,SAVCURR2                                        0982  34580000
*         CURRLD=CURRLD+8;              /* LOC NEXT LINE IN RLD TABLE   34590000
         LA    @6,8(0,@6)                                         0983  34600000
*         RET=ADDR(ARLD1);              /* SET UP RETURN ADDRESS        34610000
         LA    @3,ARLD1                                           0984  34620000
*         /* TEST IF LINE OF DATA SHOULD GO ON THIS OR NEXT PAGE        34630000
*         IF LINECNT>60                 /* IF LINE COUNT GREATR THAN 60 34640000
*           THEN                        /* THEN                         34650000
         LA    @F,60                                              0985  34660000
         C     @F,LINECNT                                         0985  34670000
         BC    10,@901                                            0985  34680000
*             DO;                       /* SET TWO SWITCHES             34690000
*               LINECT61='1'B;          /* INDIC TO PRINT ON NEXT PAGE  34700000
         OI    SWITCHES,B'00010000'                               0987  34710000
*               ARHD='1'B;              /* INDIC TO PRINT ARLD HEADING  34720000
         OI    SWITCHES+1,B'01000000'                             0988  34730000
*             END;                                                      34740000
*         GO TO WRITE;                  /* PRINT THIS BUFFER OF DATA    34750000
         BC    15,WRITE                                           0990  34760000
*       END;                                                            34770000
*   /* TEST IF CESD ITEM IS A RESOLVED EXT REF (SECTION DEF OR COMMON)  34780000
*   IF CESDTYPE(5:8)='0000'B            /* IF CESD ITEM IS SD           34790000
*      | CESDTYPE(5:8)='0101'B          /* OR CESD ITEM IS CM           34800000
*      | CESDTYPE(6:8)='100'B           /* OR CESD ITEM IS PC  OY03410  34810000
*     THEN                              /* THEN                         34820000
@908     EQU   *                                                  0992  34830000
@909     TM    10(@5),B'00001111'                                 0992  34840000
         BC    08,@900                                            0992  34850000
         TM    10(@5),B'00000101'                                 0992  34860000
         BC    12,@8FF                                            0992  34870000
         TM    10(@5),B'00001010'                                 0992  34880000
         BC    08,@8FE                                            0992  34890000
@8FF     TM    10(@5),B'00000100'                                 0992  34900000
         BC    12,@8FD                                            0991  34910000
         TM    10(@5),B'00000011'                                 0992  34920000
         BC    05,@8FC                                            0992  34930000
*       DO;                             /* PROCESS IT                   34940000
@8FE     EQU   *                                                  0993  34950000
*         /* TEST WHETHER TO PRINT $PRIVATE                    OY03410  34960000
*         IF CESDTYPE(6:8)='100'B       /* IS THIS PC?         OY03410  34970000
*           THEN                        /* IF IT IS,           OY03410  34980000
@900     TM    10(@5),B'00000100'                                 0994  34990000
         BC    12,@8FB                                            0993  35000000
         TM    10(@5),B'00000011'                                 0994  35010000
         BC    05,@8FA                                            0994  35020000
*             DO;                       /* PRINT $PRIVATE      OY03410  35030000
*               DATABUF(1:9)=PRIVPRT;   /* REF'D SYMBOL        OY03410  35040000
         MVC   BUFFERS+125(8),PRIVPRT                             0996  35050000
         MVI   BUFFERS+133,C' '                                   0996  35060000
*               DATABUF(37:45)=PRIVPRT; /* REF'D CSECT         OY03410  35070000
         MVC   BUFFERS+161(8),PRIVPRT                             0997  35080000
         MVI   BUFFERS+169,C' '                                   0997  35090000
         BC    15,@8F9                                            0999  35100000
*             END;                                                      35110000
*         /* TEST WHETHER TO PRINT '$BLANKCOM' AS REF'D TO SYMB & CSECT 35120000
*         ELSE IF SYMBOL(1)=BLANK       /* IF SYMBOL FIELD IS BLANK     35130000
*           THEN                        /* THEN THE ITEM IS BLANK COM   35140000
@8FA     EQU   *                                                  0999  35150000
@8FB     CLC   2(1,@5),BLANK                                      0999  35160000
         BC    07,@8F8                                            0999  35170000
*             DO;                       /* PUT '$BLANKCOM' INTO BUFFER  35180000
*               DATABUF(1:9)=BLCOMPRT;  /* IT'S THE REF'D TO SYMBOL     35190000
         MVC   BUFFERS+125(9),BLCOMPRT                            1001  35200000
*               DATABUF(37:45)=BLCOMPRT; /* IT'S THE REF'D TO CSECT     35210000
         MVC   BUFFERS+161(9),BLCOMPRT                            1002  35220000
         BC    15,@8F7                                            1004  35230000
*             END;                                                      35240000
*           ELSE                        /* ELSE ITEM ISN'T BLANK COMMON 35250000
*             DO;                       /* PUT SYMBOL INTO BUFFER       35260000
*               DATABUF(2:9)=SYMBOL;    /* IT'S THE REF'D TO SYMBOL     35270000
@8F8     MVC   BUFFERS+126(8),2(@5)                               1005  35280000
*               DATABUF(38:45)=SYMBOL;  /* IT'S THE REF'D TO CSECT      35290000
         MVC   BUFFERS+162(8),2(@5)                               1006  35300000
*             END;                                                      35310000
*         BININT(5:7)=CESDADDR;         /* PREP TO CONV SYMB'S LMOD LOC 35320000
@8F7     EQU   *                                                  1008  35330000
@8F9     MVC   BININT+4(3),11(@5)                                 1008  35340000
*         RET=ADDR(ARLD10);             /* SET UP RETURN ADDRESS        35350000
         LA    @3,ARLD10                                          1009  35360000
*         GO TO BITOHEX;                /* CONV LMOD LOC TO PRINTBL HEX 35370000
         BC    15,BITOHEX                                         1010  35380000
* ARLD10: /* BRANCH HERE TO RETURN FROM BITOHEX ROUTINE.                35390000
*            FOLLOWING CODE CONTINUES ARLD PROCESSING.                  35400000
*         DATABUF(14:19)=HEXINT(2:7);   /* PUT SYMBOL'S LMOD LOC IN BUF 35410000
ARLD10   MVC   BUFFERS+138(6),HEXINT+1                            1011  35420000
*         DATABUF(29:30)=CHARZERO;      /* PUT LOCATION '00' INTO BUF   35430000
         MVC   BUFFERS+153(2),CHARZERO                            1012  35440000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    35450000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      35460000
*           THEN                        /* THEN                         35470000
         L     @7,PARMPTR                                         1013  35480000
         TM    20(@7),B'01000000'                                 1013  35490000
         BC    12,@8F6                                            1013  35500000
*             DO;                       /* PROCESS SEGMENT NUMBER       35510000
*               BINARY=SEGNO;           /* PREPARE TO CONVERT SEG NO.   35520000
         SR    @2,@2                                              1015  35530000
         IC    @2,14(0,@5)                                        1015  35540000
*               BLNKZERO='1'B;          /* INDIC TO BLANK NONSIG ZEROS  35550000
         OI    SWITCHES+1,B'00000001'                             1016  35560000
*               RET=ADDR(ARLD11);       /* SET UP RETURN ADDRESS        35570000
         LA    @3,ARLD11                                          1017  35580000
*               GO TO BITODEC;          /* CONV SEG NO. TO PRINTBLE DEC 35590000
         BC    15,BITODEC                                         1018  35600000
* ARLD11:       /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.          35610000
*                  FOLLOWING CODE CONTINUES ARLD PROCESSING.            35620000
*               DATABUF(51:53)=DECINT(2:4); /* PUT SEG NO. INTO BUFFER  35630000
ARLD11   MVC   BUFFERS+175(3),DECINT+1                            1019  35640000
*             END;                                                      35650000
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING   35660000
         BC    15,ARLD7                                           1021  35670000
*       END;                                                            35680000
*   /* TEST IF CESD ITEM IS AN UNRESOLVED EXTERNAL REFERENCE            35690000
*   IF CESDTYPE(5:8)='0010'B            /* IF CESD ITEM IS ER           35700000
*     THEN                              /* THEN                         35710000
@8FC     EQU   *                                                  1023  35720000
@8FD     TM    10(@5),B'00000010'                                 1023  35730000
         BC    12,@8F5                                            1022  35740000
         TM    10(@5),B'00001101'                                 1023  35750000
         BC    05,@8F4                                            1023  35760000
*       DO;                             /* FIND OUT WHICH KIND          35770000
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF 35780000
         MVC   BUFFERS+126(8),2(@5)                               1025  35790000
*         /* TEST IF UNRESOLVED ER IS SIMPLE UNRESOLVED                 35800000
*         IF IDLENGTH(1)=ZERO(1)        /* IF ID IS 0                   35810000
*           THEN                        /* THEN                         35820000
         CLC   15(1,@5),ZERO                                      1026  35830000
         BC    07,@8F3                                            1026  35840000
*             DATABUF(37:47)=UNRESPRT;  /* PUT '$UNRESOLVED' INTO BUF   35850000
         MVC   BUFFERS+161(11),UNRESPRT                           1027  35860000
         BC    15,@8F2                                            1028  35870000
*           ELSE                        /* ELSE ID IS 6                 35880000
*             DATABUF(37:47)=NEVCLPRT;  /* PUT '$NEVER-CALL' INTO BUF   35890000
@8F3     MVC   BUFFERS+161(11),NEVCLPRT                           1028  35900000
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING   35910000
         BC    15,ARLD7                                           1029  35920000
*       END;                                                            35930000
*   /* TEST IF CESD ITEM IS A WEAK UNRESOLVED EXTERNAL REFERENCE        35940000
*   IF CESDTYPE(5:8)='1010'B            /* IF CESD ITEM IS WX           35950000
*     THEN                              /* THEN                         35960000
@8F4     EQU   *                                                  1031  35970000
@8F5     TM    10(@5),B'00001010'                                 1031  35980000
         BC    12,@8F1                                            1030  35990000
         TM    10(@5),B'00000101'                                 1031  36000000
         BC    05,@8F0                                            1031  36010000
*       DO;                             /* PROCESS IT                   36020000
*         DATABUF(2:9)=SYMBOL;          /* PUT REF'D TO SYMBOL INTO BUF 36030000
         MVC   BUFFERS+126(8),2(@5)                               1033  36040000
*         DATABUF(37:50)=UNREWPRT;      /* PUT '$UNRESOLVED(W)' IN BUF  36050000
         MVC   BUFFERS+161(14),UNREWPRT                           1034  36060000
*         GO TO ARLD7;                  /* REST SAME AS LR PROCESSING   36070000
         BC    15,ARLD7                                           1035  36080000
*       END;                                                            36090000
*                                                                       36100000
* /******************************************************************** 36110000
* /*   THE FOLLOWING SECTION OF CODE PRINTS ALL HEADINGS AND DATA.      36120000
* /*   HEADINGS ARE ASSEMBLED IN THEIR BUFFER HERE, DATA IS             36130000
* /*   ASSEMBLED IN ITS BUFFER PRIOR TO ENTERING THIS SECTION.  EACH    36140000
* /*   TIME THIS CODE IS EXECUTED, IT WILL FIRST PRINT A HEADING,       36150000
* /*   IF A SWITCH INDICATES IT IS REQUESTED, THEN A LINE OF DATA.      36160000
* /*   THIS SECTION IS ENTERED EACH TIME A LINE IS TO BE PRINTED.       36170000
* /******************************************************************** 36180000
*                                                                       36190000
* WRITE:                                                                36200000
*   SAVERET=RET;                        /* SAVE RETURN ADDRESS          36210000
@8F0     EQU   *                                                  1037  36220000
@8F1     EQU   *                                                  1037  36230000
WRITE    ST    @3,SAVERET                                         1037  36240000
*   /* TEST IF SKIP TO NEXT PAGE IS REQUESTED                           36250000
*   IF LINECT61='1'B                    /* IF LINECT61 SWITCH IS ON     36260000
*     THEN                              /* THEN                         36270000
         TM    SWITCHES,B'00010000'                               1038  36280000
         BC    12,@8EF                                            1038  36290000
* WRITE1: /* BRANCH HERE WHEN WRITE ROUTINE DISCOVERS THAT SKIP TO      36300000
*            NEXT PAGE IS REQUIRED.  FOLLOWING CODE PREPARES TITLE,     36310000
*            PAGE NO., AND USER TITLE FOR PRINTING.                     36320000
*       DO;                             /* PRINT ON NEXT PAGE           36330000
*         LINECT61='0'B;                /* TURN LINECT61 SWITCH OFF     36340000
WRITE1   NI    SWITCHES,B'11101111'                               1040  36350000
*         /* TEST IF NUMERIC CESD OR RLD PROCESSING IS BEING PERFORMED  36360000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      36370000
*           THEN                        /* THEN                         36380000
         TM    SWITCHES+2,B'01000000'                             1041  36390000
         BC    12,@8EE                                            1041  36400000
*             DO;                       /* PUT PAGE HEADING INTO BUFFER 36410000
*               HEADBUF(30:38)=HEADING6(6:14); /* 'NUMERICAL'           36420000
         MVC   BUFFERS+30(9),HEADING6+5                           1043  36430000
*               HEADBUF(40:67)=HEADING5(1:28); /* 'MAP AND CROSS-       36440000
*                                                 REFERENCE LIST'       36450000
         MVC   BUFFERS+40(28),HEADING5                            1044  36460000
*               /* TEST IF A NUCLEUS IS BEING MAPPED                    36470000
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON       36480000
*                 THEN                  /* THEN                         36490000
         TM    SWITCHES+2,B'00001000'                             1045  36500000
         BC    12,@8ED                                            1045  36510000
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF   36520000
*                     HEADBUF(69:70)=HEADING3(19:20); /* 'OF'           36530000
         MVC   BUFFERS+69(2),HEADING3+18                          1047  36540000
*                     HEADBUF(72:78)=HEADING7(16:22); /* 'NUCLEUS'      36550000
         MVC   BUFFERS+72(7),HEADING7+15                          1048  36560000
*                     HEADBUF(80:87)=LMODNAME; /* PUT NUC NAME IN BUF   36570000
         L     @7,PARMPTR                                         1049  36580000
         MVC   BUFFERS+80(8),36(@7)                               1049  36590000
         BC    15,@8EC                                            1051  36600000
*                   END;                                                36610000
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF    36620000
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF  36630000
*                     HEADBUF(69:82)=HEADING3(19:32); /* 'OF LOAD       36640000
*                                                        MODULE'        36650000
@8ED     MVC   BUFFERS+69(14),HEADING3+18                         1052  36660000
*                     HEADBUF(84:91)=LMODNAME; /* PUT LMOD NAME IN BUF  36670000
         L     @7,PARMPTR                                         1053  36680000
         MVC   BUFFERS+84(8),36(@7)                               1053  36690000
*                   END;                                                36700000
*             END;                                                      36710000
@8EC     EQU   *                                                  1055  36720000
*         /* TEST IF ALPHABETIC CESD PROCESSING IS BEING PERFORMED      36730000
*         IF ACHD='1'B                  /* IF ACHD SWITCH IS ON         36740000
*            | PRHD='1'B                /* OR IF PRHD SWITCH IS ON      36750000
*            & NUMCESD='0'B             /* AND IF NUMCESD SWITCH IS OFF 36760000
*           THEN                        /* THEN                         36770000
@8EE     TM    SWITCHES,B'00000010'                               1056  36780000
         BC    01,@8EB                                            1056  36790000
         TM    SWITCHES+1,B'00100000'                             1056  36800000
         BC    12,@8EA                                            1056  36810000
         TM    SWITCHES+2,B'01000000'                             1056  36820000
         BC    05,@8E9                                            1056  36830000
*             DO;                       /* PUT PAGE HEADING INTO BUFFER 36840000
*               HEADBUF(41:52)=HEADING6(16:27); /* 'ALPHABETICAL'       36850000
@8EB     MVC   BUFFERS+41(12),HEADING6+15                         1058  36860000
*               HEADBUF(54:56)=HEADING5(1:3); /* 'MAP'                  36870000
         MVC   BUFFERS+54(3),HEADING5                             1059  36880000
*               /* TEST IF A NUCLEUS IS BEING MAPPED                    36890000
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON       36900000
*                 THEN                  /* THEN                         36910000
         TM    SWITCHES+2,B'00001000'                             1060  36920000
         BC    12,@8E8                                            1060  36930000
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF   36940000
*                     HEADBUF(58:59)=HEADING3(19:20); /* 'OF'           36950000
         MVC   BUFFERS+58(2),HEADING3+18                          1062  36960000
*                     HEADBUF(61:67)=HEADING7(16:22); /* 'NUCLEUS'      36970000
         MVC   BUFFERS+61(7),HEADING7+15                          1063  36980000
*                     HEADBUF(69:76)=LMODNAME; /* PUT NUC NAME IN BUF   36990000
         L     @7,PARMPTR                                         1064  37000000
         MVC   BUFFERS+69(8),36(@7)                               1064  37010000
         BC    15,@8E7                                            1066  37020000
*                   END;                                                37030000
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF    37040000
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF  37050000
*                     HEADBUF(58:71)=HEADING3(19:32); /* 'OF LOAD       37060000
*                                                        MODULE'        37070000
@8E8     MVC   BUFFERS+58(14),HEADING3+18                         1067  37080000
*                     HEADBUF(73:80)=LMODNAME; /* PUT LMOD NAME IN BUF  37090000
         L     @7,PARMPTR                                         1068  37100000
         MVC   BUFFERS+73(8),36(@7)                               1068  37110000
*                   END;                                                37120000
*             END;                                                      37130000
@8E7     EQU   *                                                  1070  37140000
*         /* TEST IF ALPHABETIC RLD PROCESSING IS BEING PERFORMED       37150000
*         IF ARHD='1'B                  /* IF ARHD SWITCH IS ON         37160000
*           THEN                        /* THEN                         37170000
@8E9     EQU   *                                                  1071  37180000
@8EA     TM    SWITCHES+1,B'01000000'                             1071  37190000
         BC    12,@8E6                                            1071  37200000
*             DO;                       /* PUT PAGE HEADING INTO BUFFER 37210000
*               HEADBUF(32:43)=HEADING6(16:27); /* 'ALPHABETICAL'       37220000
         MVC   BUFFERS+32(12),HEADING6+15                         1073  37230000
*               HEADBUF(45:64)=HEADING5(9:28); /* 'CROSS-REF'NCE LIST'  37240000
         MVC   BUFFERS+45(20),HEADING5+8                          1074  37250000
*               /* TEST IF A NUCLEUS IS BEING MAPPED                    37260000
*               IF NUCMAP='1'B          /* IF NUCMAP SWITCH IS ON       37270000
*                 THEN                  /* THEN                         37280000
         TM    SWITCHES+2,B'00001000'                             1075  37290000
         BC    12,@8E5                                            1075  37300000
*                   DO;                 /* PUT NUCLEUS HEADING IN BUF   37310000
*                     HEADBUF(66:67)=HEADING3(19:20); /* 'OF'           37320000
         MVC   BUFFERS+66(2),HEADING3+18                          1077  37330000
*                     HEADBUF(69:75)=HEADING7(16:22); /* 'NUCLEUS'      37340000
         MVC   BUFFERS+69(7),HEADING7+15                          1078  37350000
*                     HEADBUF(77:84)=LMODNAME; /* PUT NUC NAME IN BUF   37360000
         L     @7,PARMPTR                                         1079  37370000
         MVC   BUFFERS+77(8),36(@7)                               1079  37380000
         BC    15,@8E4                                            1081  37390000
*                   END;                                                37400000
*                 ELSE                  /* ELSE NUCMAP SWITCH IS OFF    37410000
*                   DO;                 /* PUT LOAD MOD HEADING IN BUF  37420000
*                     HEADBUF(66:79)=HEADING3(19:32); /* 'OF LOAD       37430000
*                                                        MODULE'        37440000
@8E5     MVC   BUFFERS+66(14),HEADING3+18                         1082  37450000
*                     HEADBUF(81:88)=LMODNAME; /* PUT LMOD NAME IN BUF  37460000
         L     @7,PARMPTR                                         1083  37470000
         MVC   BUFFERS+81(8),36(@7)                               1083  37480000
*                   END;                                                37490000
*             END;                                                      37500000
@8E4     EQU   *                                                  1085  37510000
*         HEADBUF(112:115)=HEADING6(1:4); /* PUT 'PAGE' INTO BUFFER     37520000
@8E6     MVC   BUFFERS+112(4),HEADING6                            1086  37530000
*         PAGENUM=PAGENUM+1;            /* INCREMENT PAGE NUMBER BY 1   37540000
         LA    @F,1                                               1087  37550000
         AH    @F,PAGENUM                                         1087  37560000
         STH   @F,PAGENUM                                         1087  37570000
*         HEADCON=SP1PAGE;              /* CAUSE CARR SKIP TO NEXT PAGE 37580000
         MVC   BUFFERS(1),SP1PAGE                                 1088  37590000
*         BINARY=PAGENUM;               /* LOAD PAGE NO. INTO REGISTER  37600000
         LH    @2,PAGENUM                                         1089  37610000
*         BLNKZERO='0'B;                /* DON'T BLANK NONSIG ZEROS     37620000
         NI    SWITCHES+1,B'11111110'                             1090  37630000
*         RET=ADDR(WRITE2);             /* SET UP RETURN ADDRESS        37640000
         LA    @3,WRITE2                                          1091  37650000
*         GO TO BITODEC;                /* CONVERT TO PRINTABLE DECIMAL 37660000
         BC    15,BITODEC                                         1092  37670000
* WRITE2: /* BRANCH HERE TO RETURN FROM BITODEC ROUTINE.                37680000
*            FOLLOWING CODE PRODUCES PAGE TITLE AND NO.                 37690000
*         HEADBUF(117:120)=DECINT(1:4); /* PUT PAGE NO. INTO BUFFER     37700000
WRITE2   MVC   BUFFERS+117(4),DECINT                              1093  37710000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   37720000
         LA    @1,BUFFERS                                         1094  37730000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 37740000
         OI    SWITCHES,B'01000000'                               1095  37750000
*         RET=ADDR(WRITE3);             /* SET UP RETURN ADDRESS        37760000
         LA    @3,WRITE3                                          1096  37770000
*         GO TO WRITE16;                /* GO TO PRINT PAGE NO.& TITLE  37780000
         BC    15,WRITE16                                         1097  37790000
* WRITE3: /* BRANCH HERE TO RETURN FROM PRINTING PAGE TITLE AND NO.     37800000
*            FOLLOWING CODE PRODUCES USER TITLE.                        37810000
*         LINECNT=5;                    /* SET LINE COUNT TO 5          37820000
WRITE3   LA    @F,5                                               1098  37830000
         ST    @F,LINECNT                                         1098  37840000
*         OUTAREAD=TITLEAD;             /* ADDR OF USER TITLE FOR PUT   37850000
         L     @7,PARMPTR                                         1099  37860000
         L     @1,8(0,@7)                                         1099  37870000
*         RET=ADDR(WRITE4);             /* SET UP RETURN ADDRESS        37880000
         LA    @3,WRITE4                                          1100  37890000
*         GO TO WRITE16;                /* GO TO PRINT TITLE            37900000
         BC    15,WRITE16                                         1101  37910000
*       END;                                                            37920000
* WRITE4: /* BRANCH HERE TO RETURN FROM PRINTING USER TITLE.            37930000
*            FOLLOWING CODE PRODUCES A LINE OF DASHES IF REQUESTED.     37940000
*   /* TEST IF DASHES BETWEEN CESD AND RLD PRINTOUT ARE REQUESTED       37950000
*   IF DASHLINE='1'B                    /* IF DASHLINE SWITCH IS ON     37960000
*     THEN                              /* THEN                         37970000
@8EF     EQU   *                                                  1103  37980000
WRITE4   TM    SWITCHES+1,B'00001000'                             1103  37990000
         BC    12,@8E3                                            1103  38000000
*       DO;                             /* PROCESS DASH PRINTING        38010000
*         /* TEST IF DASHES SHOULD GO ON THIS OR NEXT PAGE              38020000
*         IF LINECNT>56                 /* IF NO ROOM ON THIS PAGE      38030000
*           THEN                        /* THEN                         38040000
         LA    @F,56                                              1105  38050000
         C     @F,LINECNT                                         1105  38060000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      38070000
         BC    04,WRITE1                                          1106  38080000
*         DASHLINE='0'B;                /* TURN DASHES SWITCH OFF       38090000
         NI    SWITCHES+1,B'11110111'                             1107  38100000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    38110000
         LA    @F,3                                               1108  38120000
         A     @F,LINECNT                                         1108  38130000
         ST    @F,LINECNT                                         1108  38140000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   38150000
         MVC   BUFFERS(1),SP3LINES                                1109  38160000
*         HEADBUF(1)=DASH;              /* PUT '-' IN FIRST BYTE        38170000
         MVC   BUFFERS+1(1),DASH                                  1110  38180000
*         HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER WITH DASHES  38190000
         MVC   BUFFERS+2(119),BUFFERS+1                           1111  38200000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   38210000
         LA    @1,BUFFERS                                         1112  38220000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 38230000
         OI    SWITCHES,B'01000000'                               1113  38240000
*         RET=ADDR(WRITE5);             /* SET UP RETURN ADDRESS        38250000
         LA    @3,WRITE5                                          1114  38260000
*         GO TO WRITE16;                /* GO TO PRINT DASHES           38270000
         BC    15,WRITE16                                         1115  38280000
* WRITE5: /* BRANCH HERE TO RETURN FROM PRINTING A LINE OF DASHES.      38290000
*            FOLLOWING CODE PRODUCES 2ND LINE OF DASHES IF REQUESTED.   38300000
*         /* TEST IF DOUBLE LINE OF DASHES IS TO BE PRINTED             38310000
*         IF DUBLDASH='1'B              /* IF DUBLDASH SWITCH IS ON     38320000
*           THEN                        /* THEN                         38330000
WRITE5   TM    SWITCHES+2,B'00010000'                             1116  38340000
         BC    12,@8E2                                            1116  38350000
*             DO;                       /* PREPARE TO PRINT LINE        38360000
*               DUBLDASH='0'B;          /* TURN DUBLDASH SWITCH OFF     38370000
         NI    SWITCHES+2,B'11101111'                             1118  38380000
*               LINECNT=LINECNT+1;      /* INCREMENT LINE COUNT BY 1    38390000
         LA    @F,1                                               1119  38400000
         A     @F,LINECNT                                         1119  38410000
         ST    @F,LINECNT                                         1119  38420000
*               HEADCON=SP1LINE;        /* CAUSE CARR TO SKIP 1 LINE    38430000
         MVC   BUFFERS(1),SP1LINE                                 1120  38440000
*               HEADBUF(1)=DASH;        /* PUT '-' IN FIRST BYTE        38450000
         MVC   BUFFERS+1(1),DASH                                  1121  38460000
*               HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER OF BUF 38470000
         MVC   BUFFERS+2(119),BUFFERS+1                           1122  38480000
*               /* TEST IF SEG NO. IN LINE OF DASHES SHOULD BE PRINTED  38490000
*               IF NCHD='1'B            /* IF NCHD SWITCH IS ON         38500000
*                  | NCSHD='1'B         /* OR NCSHD SWITCH IS ON        38510000
*                  & OVERLAY='1'B       /* AND OVERLAY SWITCH IS ON     38520000
*                 THEN                  /* THEN                         38530000
         TM    SWITCHES,B'00001000'                               1123  38540000
         BC    01,@8E1                                            1123  38550000
         TM    SWITCHES,B'00000100'                               1123  38560000
         BC    12,@8E0                                            1123  38570000
         L     @7,PARMPTR                                         1123  38580000
         TM    20(@7),B'01000000'                                 1123  38590000
         BC    12,@8DF                                            1123  38600000
*                   DO;                 /* PRINT SEGMENT NUMBER         38610000
*                     HEADBUF(1:3)=HEADING7(4:6); /* PUT 'SEG' INTO BUF 38620000
@8E1     MVC   BUFFERS+1(3),HEADING7+3                            1125  38630000
*                     HEADBUF(4)=PERIOD; /* PUT '.' INTO BUFFER         38640000
         MVC   BUFFERS+4(1),PERIOD                                1126  38650000
*                     HEADBUF(5:9)=DATABUF(56:60); /* PUT SEG NO. IN    38660000
         MVC   BUFFERS+5(5),BUFFERS+180                           1127  38670000
*                     /* TEST FOR ONLY ONE SIGNIFICANT DIGIT            38680000
*                        ( IN ORDER TO LEFT ALIGN THE SEGMENT NO. )     38690000
*                     IF HEADBUF(7)=BLANK /* IF SECOND DIGIT BLANK      38700000
*                       THEN            /* THEN                         38710000
         CLC   BUFFERS+7(1),BLANK                                 1128  38720000
         BC    07,@8DE                                            1128  38730000
*                         HEADBUF(6:9)=HEADBUF(8:11); /* MOVE 2 PLACES  38740000
         MVC   BUFFERS+6(4),BUFFERS+8                             1129  38750000
         BC    15,@8DD                                            1130  38760000
*                       ELSE            /* ELSE MORE THAN 1 SIG DIGIT   38770000
*                         /* TEST FOR TWO SIGNIFICANT DIGITS            38780000
*                         IF HEADBUF(6)=BLANK /* IF FIRST DIGIT BLANK   38790000
*                           THEN        /* THEN                         38800000
@8DE     CLC   BUFFERS+6(1),BLANK                                 1130  38810000
         BC    07,@8DC                                            1130  38820000
*                             HEADBUF(6:9)=HEADBUF(7:10); /* MOVE 1 PLC 38830000
         MVC   BUFFERS+6(4),BUFFERS+7                             1131  38840000
*                   END;                                                38850000
@8DC     EQU   *                                                  1132  38860000
@8DD     EQU   *                                                  1132  38870000
*               OUTAREAD=ADDR(HEADPRNT); /* GET ADDR OF BUFFER FOR PUT  38880000
@8DF     EQU   *                                                  1133  38890000
@8E0     LA    @1,BUFFERS                                         1133  38900000
*               BLNKHEAD='1'B;          /* INDIC TO BLANK IT AFTER PRNT 38910000
         OI    SWITCHES,B'01000000'                               1134  38920000
*               RET=ADDR(WRITE6);       /* SET UP RETURN ADDRESS        38930000
         LA    @3,WRITE6                                          1135  38940000
*               GO TO WRITE16;          /* GO TO PRINT DASHES           38950000
         BC    15,WRITE16                                         1136  38960000
*             END;                                                      38970000
*     END;                                                              38980000
@8E2     EQU   *                                                  1138  38990000
* WRITE6: /* BRANCH HERE TO RETURN FROM PRINTING SECOND LINE OF DASHES. 39000000
*            FOLLOWING CODE PRODUCES NUMERIC CESD HEADING IF REQUESTED. 39010000
*   /* TEST IF NUMERIC CESD HEADING IS TO BE PRINTED                    39020000
*   IF NCHD='1'B                        /* IF NUM CESD HD SWITCH IS ON  39030000
*     THEN                              /* THEN                         39040000
@8E3     EQU   *                                                  1139  39050000
WRITE6   TM    SWITCHES,B'00001000'                               1139  39060000
         BC    12,@8DB                                            1139  39070000
*       DO;                             /* PROCESS THIS HEADING         39080000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             39090000
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE      39100000
*           THEN                        /* THEN                         39110000
         LA    @F,57                                              1141  39120000
         C     @F,LINECNT                                         1141  39130000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      39140000
         BC    04,WRITE1                                          1142  39150000
*         NCHD='0'B;                    /* TURN NUM CESD HD SWITCH OFF  39160000
         NI    SWITCHES,B'11110111'                               1143  39170000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    39180000
         LA    @F,3                                               1144  39190000
         A     @F,LINECNT                                         1144  39200000
         ST    @F,LINECNT                                         1144  39210000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   39220000
         MVC   BUFFERS(1),SP3LINES                                1145  39230000
*         HEADBUF(18:32)=HEADING1(1:15); /* PUT 'CONTROL SECTION' IN BF 39240000
         MVC   BUFFERS+18(15),HEADING1                            1146  39250000
*         HEADBUF(73:77)=HEADING1(17:21); /* PUT 'ENTRY' INTO BUFFER    39260000
         MVC   BUFFERS+73(5),HEADING1+16                          1147  39270000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   39280000
         LA    @1,BUFFERS                                         1148  39290000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 39300000
         OI    SWITCHES,B'01000000'                               1149  39310000
*         RET=ADDR(WRITE7);             /* SET UP RETURN ADDRESS        39320000
         LA    @3,WRITE7                                          1150  39330000
*         GO TO WRITE16;                /* GO TO PRINT NUM CESD HEADING 39340000
         BC    15,WRITE16                                         1151  39350000
* WRITE7: /* BRANCH HERE TO RETURN FROM PRINTING NUMERIC CESD HEADING.  39360000
*            FOLLOWING CODE PRODUCES NUMERIC CESD SUBHEADING.           39370000
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1    39380000
WRITE7   LA    @F,1                                               1152  39390000
         A     @F,LINECNT                                         1152  39400000
         ST    @F,LINECNT                                         1152  39410000
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE    39420000
         MVC   BUFFERS(1),SP1LINE                                 1153  39430000
*         GO TO WRITE8;                 /* BYPASS NCSHD & LINECNT TESTS 39440000
         BC    15,WRITE8                                          1154  39450000
*       END;                                                            39460000
*   /* TEST IF NUMERIC CESD SUBHEADING IS REQUESTED                     39470000
*   IF NCSHD='1'B                       /* IF NUM CESD SUBHD IS ON      39480000
*     THEN                              /* THEN                         39490000
@8DB     TM    SWITCHES,B'00000100'                               1156  39500000
         BC    12,@8DA                                            1156  39510000
*       DO;                             /* PROCESS THIS HEADING         39520000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             39530000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      39540000
*           THEN                        /* THEN                         39550000
         LA    @F,58                                              1158  39560000
         C     @F,LINECNT                                         1158  39570000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      39580000
         BC    04,WRITE1                                          1159  39590000
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2    39600000
         LA    @F,2                                               1160  39610000
         A     @F,LINECNT                                         1160  39620000
         ST    @F,LINECNT                                         1160  39630000
*         HEADCON=SP2LINES;             /* CAUSE CARR TO SKIP 2 LINES   39640000
         MVC   BUFFERS(1),SP2LINES                                1161  39650000
* WRITE8: /* BRANCH HERE TO BYPASS NCSHD AND LINECNT TESTS,             39660000
*            BECAUSE EVERY TIME NCHD IS PRINTED NCSHD IS ALSO           39670000
*            PRINTED AND THESE TESTS MUST NOT BE MADE.                  39680000
*            FOLLOWING CODE PRODUCES NUMERIC CESD SUBHEADING.           39690000
*         NCSHD='0'B;                   /* TURN NUM CESD SUBHEAD OFF    39700000
WRITE8   NI    SWITCHES,B'11111011'                               1162  39710000
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR 39720000
         OI    SWITCHES+2,B'00100000'                             1163  39730000
*         HEADBUF(19:26)=HEADING2(22:29); /* PUT 'LMOD LOC' INTO BUF    39740000
         MVC   BUFFERS+19(8),HEADING2+21                          1164  39750000
*         HEADBUF(32:35)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER     39760000
         MVC   BUFFERS+32(4),HEADING1+22                          1165  39770000
*         HEADBUF(42:53)=HEADING1(28:39); /* PUT 'LENGTH TYPE' INTO BUF 39780000
         MVC   BUFFERS+42(12),HEADING1+27                         1166  39790000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          39800000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      39810000
*           THEN                        /* THEN                         39820000
         L     @7,PARMPTR                                         1167  39830000
         TM    20(@7),B'01000000'                                 1167  39840000
         BC    12,@8D9                                            1167  39850000
*             HEADBUF(56:62)=HEADING7(4:10); /* PUT 'SEGMENT' INTO BUF  39860000
         MVC   BUFFERS+56(7),HEADING7+3                           1168  39870000
*         HEADBUF(74:92)=HEADING2(22:40); /* PUT'LMOD LOC               39880000
*                                            CSECT LOC' INTO BUFFER     39890000
@8D9     MVC   BUFFERS+74(19),HEADING2+21                         1169  39900000
*         /* TEST IF A NUCLEUS IS BEING MAPPED                          39910000
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON       39920000
*           THEN                        /* THEN                         39930000
         TM    SWITCHES+2,B'00001000'                             1170  39940000
         BC    12,@8D8                                            1170  39950000
*             DO;                       /* PUT FOLLOWING INTO BUFFER    39960000
*               HEADBUF(19:22)=HEADING7(15:18); /* PUT ' NUC' INTO BUF  39970000
         MVC   BUFFERS+19(4),HEADING7+14                          1172  39980000
*               HEADBUF(74:77)=HEADING7(15:18); /* PUT ' NUC' INTO BUF  39990000
         MVC   BUFFERS+74(4),HEADING7+14                          1173  40000000
*             END;                                                      40010000
*         HEADBUF(99:102)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER    40020000
@8D8     MVC   BUFFERS+99(4),HEADING1+22                          1175  40030000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   40040000
         LA    @1,BUFFERS                                         1176  40050000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 40060000
         OI    SWITCHES,B'01000000'                               1177  40070000
*         RET=ADDR(WRITE9);             /* SET UP RETURN ADDRESS        40080000
         LA    @3,WRITE9                                          1178  40090000
*         GO TO WRITE16;                /* GO TO PRINT NUM CESD SUBHD   40100000
         BC    15,WRITE16                                         1179  40110000
* WRITE9: /* BRANCH HERE TO RETURN FROM PRINTING NUMERIC CESD           40120000
*            SUBHEADING.  FOLLOWING CODE BRANCHES TO CHECK IF LINE      40130000
*            OF DATA IS TO BE PRINTED, BECAUSE IF NCSHD IS PRINTED,     40140000
*            NONE OF THE FOLLOWING HEADINGS CAN BE.                     40150000
*         GO TO WRITE15;                /* GO TO PRINT LINE OF DATA     40160000
*       END;                                                            40170000
*   /* TEST IF ALPHABETIC CESD HEADING IS REQUESTED                     40180000
*   IF ACHD='1'B                        /* IF ALPHA CESD HEAD SWITCH ON 40190000
*     THEN                              /* THEN                         40200000
@8DA     TM    SWITCHES,B'00000010'                               1182  40210000
         BC    12,@8D7                                            1182  40220000
*       DO;                             /* PROCESS THIS HEADING         40230000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             40240000
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE      40250000
*           THEN                        /* THEN                         40260000
         LA    @F,57                                              1184  40270000
         C     @F,LINECNT                                         1184  40280000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      40290000
         BC    04,WRITE1                                          1185  40300000
*         ACHD='0'B;                    /* TURN ALPHA CESD HEAD OFF     40310000
         NI    SWITCHES,B'11111101'                               1186  40320000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    40330000
         LA    @F,3                                               1187  40340000
         A     @F,LINECNT                                         1187  40350000
         ST    @F,LINECNT                                         1187  40360000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   40370000
         MVC   BUFFERS(1),SP3LINES                                1188  40380000
*         HEADBUF(12:26)=HEADING1(1:15); /* PUT 'CONTROL SECTION' IN BF 40390000
         MVC   BUFFERS+12(15),HEADING1                            1189  40400000
*         HEADBUF(67:71)=HEADING1(17:21); /* PUT 'ENTRY' INTO BUFFER    40410000
         MVC   BUFFERS+67(5),HEADING1+16                          1190  40420000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   40430000
         LA    @1,BUFFERS                                         1191  40440000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 40450000
         OI    SWITCHES,B'01000000'                               1192  40460000
*         RET=ADDR(WRITE10);            /* SET UP RETURN ADDRESS        40470000
         LA    @3,WRITE10                                         1193  40480000
*         GO TO WRITE16;                /* GO TO PRINT ALPHA CESD HEAD  40490000
         BC    15,WRITE16                                         1194  40500000
* WRITE10: /* BRANCH HERE TO RETURN FROM PRINTING ALPHABETIC CESD       40510000
*             HEADING.  FOLLOWING CODE PRODUCES ALPHABETIC CESD         40520000
*             SUBHEADING.                                               40530000
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1    40540000
WRITE10  LA    @F,1                                               1195  40550000
         A     @F,LINECNT                                         1195  40560000
         ST    @F,LINECNT                                         1195  40570000
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE    40580000
         MVC   BUFFERS(1),SP1LINE                                 1196  40590000
*         GO TO WRITE11;                /* BYPASS ACSHD & LINECNT TESTS 40600000
         BC    15,WRITE11                                         1197  40610000
*       END;                                                            40620000
*   /* TEST IF ALPHABETIC CESD SUBHEADING IS TO BE PRINTED              40630000
*   IF ACSHD='1'B                       /* IF ALPHA CESD SUBHEAD IS ON  40640000
*     THEN                              /* THEN                         40650000
@8D7     TM    SWITCHES,B'00000001'                               1199  40660000
         BC    12,@8D6                                            1199  40670000
*       DO;                             /* PROCESS THIS HEADING         40680000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             40690000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      40700000
*           THEN                        /* THEN                         40710000
         LA    @F,58                                              1201  40720000
         C     @F,LINECNT                                         1201  40730000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      40740000
         BC    04,WRITE1                                          1202  40750000
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2    40760000
         LA    @F,2                                               1203  40770000
         A     @F,LINECNT                                         1203  40780000
         ST    @F,LINECNT                                         1203  40790000
*         HEADCON=SP2LINES;             /* CAUSE CARR TO SKIP 2 LINES   40800000
         MVC   BUFFERS(1),SP2LINES                                1204  40810000
* WRITE11: /* BRANCH HERE TO BYPASS ACSHD AND LINECNT TESTS, BECAUSE    40820000
*             EVERY TIME ACHD IS PRINTED ACSHD IS ALSO PRINTED AND      40830000
*             THESE TESTS MUST NOT BE MADE.  FOLLOWING CODE PRODUCES    40840000
*             ALPHABETIC CESD SUBHEADING.                               40850000
*         ACSHD='0'B;                   /* TURN ALPHA CESD SUBHEAD OFF  40860000
WRITE11  NI    SWITCHES,B'11111110'                               1205  40870000
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR 40880000
         OI    SWITCHES+2,B'00100000'                             1206  40890000
*         HEADBUF(16:19)=HEADING1(23:26); /* PUT 'NAME' INTO BUF        40900000
         MVC   BUFFERS+16(4),HEADING1+22                          1207  40910000
*         HEADBUF(25:32)=HEADING2(22:29); /* PUT 'LMOD LOC' INTO BUFFER 40920000
         MVC   BUFFERS+25(8),HEADING2+21                          1208  40930000
*         HEADBUF(36:47)=HEADING1(28:39); /* PUT 'LENGTH TYPE' INTO BUF 40940000
         MVC   BUFFERS+36(12),HEADING1+27                         1209  40950000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          40960000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      40970000
*           THEN                        /* THEN                         40980000
         L     @7,PARMPTR                                         1210  40990000
         TM    20(@7),B'01000000'                                 1210  41000000
         BC    12,@8D5                                            1210  41010000
*             HEADBUF(50:56)=HEADING7(4:10); /* PUT 'SEGMENT' INTO BUF  41020000
         MVC   BUFFERS+50(7),HEADING7+3                           1211  41030000
*         HEADBUF(70:73)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER     41040000
@8D5     MVC   BUFFERS+70(4),HEADING1+22                          1212  41050000
*         HEADBUF(78:96)=HEADING2(22:40); /* PUT 'LMOD LOC              41060000
*                                            CSECT LOC' INTO BUFFER     41070000
         MVC   BUFFERS+78(19),HEADING2+21                         1213  41080000
*         /* TEST IF A NUCLEUS IS BEING MAPPED                          41090000
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON       41100000
*           THEN                        /* THEN                         41110000
         TM    SWITCHES+2,B'00001000'                             1214  41120000
         BC    12,@8D4                                            1214  41130000
*             DO;                       /* PUT FOLLOWING INTO BUFFER    41140000
*               HEADBUF(25:28)=HEADING7(15:18); /* PUT ' NUC' INTO BUF  41150000
         MVC   BUFFERS+25(4),HEADING7+14                          1216  41160000
*               HEADBUF(78:81)=HEADING7(15:18); /*'PUT ' NUC' INTO BUF  41170000
         MVC   BUFFERS+78(4),HEADING7+14                          1217  41180000
*             END;                                                      41190000
*         HEADBUF(99:103)=HEADING2(32:36); /* PUT 'CSECT' INTO BUFFER   41200000
@8D4     MVC   BUFFERS+99(5),HEADING2+31                          1219  41210000
*         HEADBUF(105:108)=HEADING1(23:26); /* PUT 'NAME' INTO BUFFER   41220000
         MVC   BUFFERS+105(4),HEADING1+22                         1220  41230000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   41240000
         LA    @1,BUFFERS                                         1221  41250000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 41260000
         OI    SWITCHES,B'01000000'                               1222  41270000
*         RET=ADDR(WRITE12);            /* SET UP RETURN ADDRESS        41280000
         LA    @3,WRITE12                                         1223  41290000
*         GO TO WRITE16;                /* GO TO PRINT ALPHA CESD SUBHD 41300000
         BC    15,WRITE16                                         1224  41310000
* WRITE12: /* BRANCH HERE TO RETURN FROM PRINTING ALPHABETIC CESD       41320000
*             SUBHEADING.  FOLLOWING CODE BRANCHES TO PRINT A LINE      41330000
*             OF DATA, BECAUSE IF ACSHD IS PRINTED NONE OF THE          41340000
*             FOLLOWING HEADINGS CAN BE PRINTED.                        41350000
*         GO TO WRITE15;                /* GO TO PRINT LINE OF DATA     41360000
*       END;                                                            41370000
*   /* TEST IF NUMERIC RLD HEADING IS TO BE PRINTED                     41380000
*   IF NRHD='1'B                        /* IF NUM RLD HEAD SWITCH IS ON 41390000
*     THEN                              /* THEN                         41400000
@8D6     TM    SWITCHES+1,B'10000000'                             1227  41410000
         BC    12,@8D3                                            1227  41420000
*       DO;                             /* PROCESS THIS HEADING         41430000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             41440000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      41450000
*           THEN                        /* THEN                         41460000
         LA    @F,58                                              1229  41470000
         C     @F,LINECNT                                         1229  41480000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      41490000
         BC    04,WRITE1                                          1230  41500000
*         NRHD='0'B;                    /* TURN NUM RLD HEAD SWITCH OFF 41510000
         NI    SWITCHES+1,B'01111111'                             1231  41520000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    41530000
         LA    @F,3                                               1232  41540000
         A     @F,LINECNT                                         1232  41550000
         ST    @F,LINECNT                                         1232  41560000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   41570000
         MVC   BUFFERS(1),SP3LINES                                1233  41580000
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR 41590000
         OI    SWITCHES+2,B'00100000'                             1234  41600000
*         HEADBUF(7:37)=HEADING2(22:52); /* PUT 'LMOD LOC  CSECT LOC    41610000
*                                           IN CSECT' INTO BUFFER       41620000
         MVC   BUFFERS+7(31),HEADING2+21                          1235  41630000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          41640000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      41650000
*           THEN                        /* THEN                         41660000
         L     @7,PARMPTR                                         1236  41670000
         TM    20(@7),B'01000000'                                 1236  41680000
         BC    12,@8D2                                            1236  41690000
*             HEADBUF(40:49)=HEADING7(1:10); /*PUT 'IN SEGMENT' IN BUF  41700000
         MVC   BUFFERS+40(10),HEADING7                            1237  41710000
*         HEADBUF(52:67)=HEADING2(1:16); /* 'REFERS TO SYMBOL'          41720000
@8D2     MVC   BUFFERS+52(16),HEADING2                            1238  41730000
*         HEADBUF(70:103)=HEADING2(19:52); /* PUT 'AT LMOD LOC CSECT LO 41740000
*                                             IN CSECT' INTO BUFFER     41750000
         MVC   BUFFERS+70(34),HEADING2+18                         1239  41760000
*         /* TEST IF A NUCLEUS IS BEING MAPPED                          41770000
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON       41780000
*           THEN                        /* THEN                         41790000
         TM    SWITCHES+2,B'00001000'                             1240  41800000
         BC    12,@8D1                                            1240  41810000
*             DO;                       /* PUT FOLLOWING INTO BUFFER    41820000
*               HEADBUF(7:10)=HEADING7(15:18); /* PUT ' NUC' INTO BUF   41830000
         MVC   BUFFERS+7(4),HEADING7+14                           1242  41840000
*               HEADBUF(73:75)=HEADING7(16:18); /* PUT 'NUC' INTO BUF   41850000
         MVC   BUFFERS+73(3),HEADING7+15                          1243  41860000
*               HEADBUF(76:80)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF 41870000
         MVC   BUFFERS+76(5),HEADING2+25                          1244  41880000
*             END;                                                      41890000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY                    41900000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      41910000
*           THEN                        /* THEN                         41920000
@8D1     L     @7,PARMPTR                                         1246  41930000
         TM    20(@7),B'01000000'                                 1246  41940000
         BC    12,@8D0                                            1246  41950000
*             HEADBUF(106:115)=HEADING7(1:10); /* PUT 'IN SEGMENT IN'   41960000
         MVC   BUFFERS+106(10),HEADING7                           1247  41970000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   41980000
@8D0     LA    @1,BUFFERS                                         1248  41990000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 42000000
         OI    SWITCHES,B'01000000'                               1249  42010000
*         RET=ADDR(WRITE15);            /* SET UP RETURN ADDRESS        42020000
         LA    @3,WRITE15                                         1250  42030000
*         GO TO WRITE16;                /* GO TO PRINT NUM RLD HEADING  42040000
         BC    15,WRITE16                                         1251  42050000
*       END;                                                            42060000
*   /* TEST IF ALPHABETIC RLD HEADING IS TO BE PRINTED                  42070000
*   IF ARHD='1'B                        /* IF ALPHA RLD HEAD SWITCH ON  42080000
*     THEN                              /* THEN                         42090000
@8D3     TM    SWITCHES+1,B'01000000'                             1253  42100000
         BC    12,@8CF                                            1253  42110000
*       DO;                             /* PROCESS THIS HEADING         42120000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             42130000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      42140000
*           THEN                        /* THEN                         42150000
         LA    @F,58                                              1255  42160000
         C     @F,LINECNT                                         1255  42170000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      42180000
         BC    04,WRITE1                                          1256  42190000
*         ARHD='0'B;                    /* TURN ALPHA RLD HD SWITCH OFF 42200000
         NI    SWITCHES+1,B'10111111'                             1257  42210000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    42220000
         LA    @F,3                                               1258  42230000
         A     @F,LINECNT                                         1258  42240000
         ST    @F,LINECNT                                         1258  42250000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   42260000
         MVC   BUFFERS(1),SP3LINES                                1259  42270000
*         SP2='1'B;                     /* SET UP DATA BUF CONTROL CHAR 42280000
         OI    SWITCHES+2,B'00100000'                             1260  42290000
*         HEADBUF(3:8)=HEADING2(11:16); /* PUT 'SYMBOL' INTO BUFFER     42300000
         MVC   BUFFERS+3(6),HEADING2+10                           1261  42310000
*         HEADBUF(12:45)=HEADING2(19:52); /* PUT 'AT LMOD LOC CSECT LOC 42320000
*                                            IN CSECT' INTO BUFFER      42330000
         MVC   BUFFERS+12(34),HEADING2+18                         1262  42340000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          42350000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      42360000
*           THEN                        /* THEN                         42370000
         L     @7,PARMPTR                                         1263  42380000
         TM    20(@7),B'01000000'                                 1263  42390000
         BC    12,@8CE                                            1263  42400000
*             HEADBUF(48:57)=HEADING7(1:10); /*PUT 'IN SEGMENT' IN BUF  42410000
         MVC   BUFFERS+48(10),HEADING7                            1264  42420000
*         HEADBUF(60:76)=HEADING3(1:17); /* PUT 'IS REFERRED TO BY' IN  42430000
@8CE     MVC   BUFFERS+60(17),HEADING3                            1265  42440000
*         HEADBUF(78:108)=HEADING2(22:52); /* PUT 'LMOD LOC  CSECT LOC  42450000
*                                             IN CSECT' INTO BUFFER     42460000
         MVC   BUFFERS+78(31),HEADING2+21                         1266  42470000
*         /* TEST IF A NUCLEUS IS BEING MAPPED                          42480000
*         IF NUCMAP='1'B                /* IF NUCMAP SWITCH IS ON       42490000
*           THEN                        /* THEN                         42500000
         TM    SWITCHES+2,B'00001000'                             1267  42510000
         BC    12,@8CD                                            1267  42520000
*             DO;                       /* PUT FOLLOWING INTO BUFFER    42530000
*               HEADBUF(15:17)=HEADING7(16:18); /* PUT 'NUC' INTO BUF   42540000
         MVC   BUFFERS+15(3),HEADING7+15                          1269  42550000
*               HEADBUF(18:22)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF 42560000
         MVC   BUFFERS+18(5),HEADING2+25                          1270  42570000
*               HEADBUF(78:80)=HEADING7(16:18); /* PUT 'NUC' INTO BUF   42580000
         MVC   BUFFERS+78(3),HEADING7+15                          1271  42590000
*               HEADBUF(81:85)=HEADING2(26:30); /* PUT ' LOC ' INTO BUF 42600000
         MVC   BUFFERS+81(5),HEADING2+25                          1272  42610000
*             END;                                                      42620000
*         /* TEST IF INPUT LOAD MODULE IS IN OVERLAY STRUCTURE          42630000
*         IF OVERLAY='1'B               /* IF OVERLAY SWITCH IS ON      42640000
*           THEN                        /* THEN                         42650000
@8CD     L     @7,PARMPTR                                         1274  42660000
         TM    20(@7),B'01000000'                                 1274  42670000
         BC    12,@8CC                                            1274  42680000
*             HEADBUF(111:120)=HEADING7(1:10); /* PUT 'IN SEGMENT' IN   42690000
         MVC   BUFFERS+111(10),HEADING7                           1275  42700000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   42710000
@8CC     LA    @1,BUFFERS                                         1276  42720000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 42730000
         OI    SWITCHES,B'01000000'                               1277  42740000
*         RET=ADDR(WRITE15);            /* SET UP RETURN ADDRESS        42750000
         LA    @3,WRITE15                                         1278  42760000
*         GO TO WRITE16;                /* GO TO PRINT ALPHA RLD HEADNG 42770000
         BC    15,WRITE16                                         1279  42780000
*       END;                                                            42790000
*   /* TEST IF PSEUDO REGISTER HEADING IS TO BE PRINTED                 42800000
*   IF PRHD='1'B                        /* IF PSEUDO REG HEAD SWITCH ON 42810000
*     THEN                              /* THEN                         42820000
@8CF     TM    SWITCHES+1,B'00100000'                             1281  42830000
         BC    12,@8CB                                            1281  42840000
*       DO;                             /* PROCESS THIS HEADING         42850000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             42860000
*         IF LINECNT>57                 /* IF NO ROOM ON THIS PAGE      42870000
*           THEN                        /* THEN                         42880000
         LA    @F,57                                              1283  42890000
         C     @F,LINECNT                                         1283  42900000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      42910000
         BC    04,WRITE1                                          1284  42920000
*         PRHD='0'B;                    /* TURN PSEUDO REG HEADING OFF  42930000
         NI    SWITCHES+1,B'11011111'                             1285  42940000
*         LINECNT=LINECNT+3;            /* INCREMENT LINE COUNT BY 3    42950000
         LA    @F,3                                               1286  42960000
         A     @F,LINECNT                                         1286  42970000
         ST    @F,LINECNT                                         1286  42980000
*         HEADCON=SP3LINES;             /* CAUSE CARR TO SKIP 3 LINES   42990000
         MVC   BUFFERS(1),SP3LINES                                1287  43000000
*         /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED         43010000
*         IF NUMCESD='1'B               /* IF NUMCESD SWITCH IS ON      43020000
*           THEN                        /* THEN                         43030000
         TM    SWITCHES+2,B'01000000'                             1288  43040000
         BC    12,@8CA                                            1288  43050000
*             HEADBUF(18:32)=HEADING4(8:22); /* 'PSEUDO REGISTER' IN BF 43060000
         MVC   BUFFERS+18(15),HEADING4+7                          1289  43070000
         BC    15,@8C9                                            1290  43080000
*           ELSE                        /* ELSE ALPH CESD PROCESSING ON 43090000
*             HEADBUF(12:26)=HEADING4(8:22); /* PUT IT IN DIFF SPOT     43100000
@8CA     MVC   BUFFERS+12(15),HEADING4+7                          1290  43110000
*         OUTAREAD=ADDR(HEADPRNT);      /* GET ADDR OF BUFFER FOR PUT   43120000
@8C9     LA    @1,BUFFERS                                         1291  43130000
*         BLNKHEAD='1'B;                /* INDIC TO BLANK IT AFTER PRNT 43140000
         OI    SWITCHES,B'01000000'                               1292  43150000
*         RET=ADDR(WRITE13);            /* SET UP RETURN ADDRESS        43160000
         LA    @3,WRITE13                                         1293  43170000
*         GO TO WRITE16;                /* GO TO PRINT PSEUDO REG HEAD  43180000
         BC    15,WRITE16                                         1294  43190000
* WRITE13: /* BRANCH HERE TO RETURN FROM PRINTING PSEUDO REGISTER       43200000
*             HEADING.  FOLLOWING CODE PRODUCES ALPHABETIC OR           43210000
*             NUMERIC PSEUDO REGISTER SUBHEADING.                       43220000
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1    43230000
WRITE13  LA    @F,1                                               1295  43240000
         A     @F,LINECNT                                         1295  43250000
         ST    @F,LINECNT                                         1295  43260000
*         HEADCON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE    43270000
         MVC   BUFFERS(1),SP1LINE                                 1296  43280000
*         GO TO WRITE14;                /* BYPASS PRSHD & LINECNT TESTS 43290000
         BC    15,WRITE14                                         1297  43300000
*       END;                                                            43310000
*   /* TEST IF PSEUDO REGISTER SUBHEADING IS TO BE PRINTED              43320000
*   IF PRSHD='1'B                       /* IF PSEUDO REG SUBHEAD IS ON  43330000
*     THEN                              /* THEN                         43340000
@8CB     TM    SWITCHES+1,B'00010000'                             1299  43350000
         BC    12,@8C8                                            1299  43360000
*       DO;                             /* PROCESS THIS HEADING         43370000
*         /* TEST IF HEADING SHOULD GO ON THIS OR NEXT PAGE             43380000
*         IF LINECNT>58                 /* IF NO ROOM ON THIS PAGE      43390000
*           THEN                        /* THEN                         43400000
         LA    @F,58                                              1301  43410000
         C     @F,LINECNT                                         1301  43420000
*             GO TO WRITE1;             /* GO TO SKIP TO NEXT PAGE      43430000
         BC    04,WRITE1                                          1302  43440000
*           LINECNT=LINECNT+2;          /* INCREMENT LINE COUNT BY 2    43450000
         LA    @F,2                                               1303  43460000
         A     @F,LINECNT                                         1303  43470000
         ST    @F,LINECNT                                         1303  43480000
*           HEADCON=SP2LINES;           /* CAUSE CARR TO SKIP 2 LINES   43490000
         MVC   BUFFERS(1),SP2LINES                                1304  43500000
* WRITE14:  /* BRANCH HERE TO BYPASS PRSHD AND LINECNT TESTS, BECAUSE   43510000
*              EVERY TIME PRHD IS PRINTED PRSHD IS ALSO PRINTED AND     43520000
*              THESE TESTS MUST NOT BE MADE.  FOLLOWING CODE PRODUCES   43530000
*              ALPHABETIC OR NUMERIC PSEUDO REGISTER SUBHEADING.        43540000
*           PRSHD='0'B;                 /* TURN PSEUDO REG SUBHEAD OFF  43550000
WRITE14  NI    SWITCHES+1,B'11101111'                             1305  43560000
*           SP2='1'B;                   /* SET UP DATA BUF CONTROL CHAR 43570000
         OI    SWITCHES+2,B'00100000'                             1306  43580000
*           /* TEST IF NUMERIC CESD PROCESSING IS BEING PERFORMED       43590000
*           IF NUMCESD='1'B             /* IF NUMCESD SWITCH IS ON      43600000
*             THEN                      /* THEN                         43610000
         TM    SWITCHES+2,B'01000000'                             1307  43620000
         BC    12,@8C7                                            1307  43630000
*               DO;                     /* PUT FOLLOWING INTO BUFFER    43640000
*                 HEADBUF(19:24)=HEADING4(1:6); /* PUT 'VECTOR' IN BUF  43650000
         MVC   BUFFERS+19(6),HEADING4                             1309  43660000
*                 HEADBUF(26:28)=HEADING2(27:29); /* PUT 'LOC' IN BUF   43670000
         MVC   BUFFERS+26(3),HEADING2+26                          1310  43680000
*                 HEADBUF(32:35)=HEADING1(23:26); /* PUT 'NAME' IN BUF  43690000
         MVC   BUFFERS+32(4),HEADING1+22                          1311  43700000
*                 HEADBUF(42:47)=HEADING1(28:33); /* PUT 'LENGTH' IN    43710000
         MVC   BUFFERS+42(6),HEADING1+27                          1312  43720000
         BC    15,@8C6                                            1314  43730000
*               END;                                                    43740000
*             ELSE                      /* ELSE ALPH CESD PROCESSING ON 43750000
*               DO;                     /* PUT FOLLOWING INTO BUFFER    43760000
*                 HEADBUF(16:19)=HEADING1(23:26); /* PUT 'NAME' IN BUF  43770000
@8C7     MVC   BUFFERS+16(4),HEADING1+22                          1315  43780000
*                 HEADBUF(24:29)=HEADING4(1:6); /* PUT 'VECTOR' IN BUF  43790000
         MVC   BUFFERS+24(6),HEADING4                             1316  43800000
*                 HEADBUF(31:33)=HEADING2(27:29); /* PUT 'LOC' IN BUF   43810000
         MVC   BUFFERS+31(3),HEADING2+26                          1317  43820000
*                 HEADBUF(36:41)=HEADING1(28:33); /* PUT 'LENGTH' IN    43830000
         MVC   BUFFERS+36(6),HEADING1+27                          1318  43840000
*               END;                                                    43850000
*           OUTAREAD=ADDR(HEADPRNT);    /* GET ADDR OF BUFFER FOR PUT   43860000
@8C6     LA    @1,BUFFERS                                         1320  43870000
*           BLNKHEAD='1'B;              /* INDIC TO BLANK IT AFTER PRNT 43880000
         OI    SWITCHES,B'01000000'                               1321  43890000
*           RET=ADDR(WRITE15);          /* SET UP RETURN ADDRESS        43900000
         LA    @3,WRITE15                                         1322  43910000
*           GO TO WRITE16;              /* GO TO PRINT PSEUDO REG SUBHD 43920000
         BC    15,WRITE16                                         1323  43930000
*         END;                                                          43940000
* WRITE15: /* BRANCH HERE AFTER PRINTING A HEADING.                     43950000
*             FOLLOWING CODE PREPARES TO PRINT A LINE OF DATA.          43960000
*   /* TEST IF SKIP TO 2ND NEXT LINE IS REQUESTED                       43970000
*   IF SP2='1'B                         /* IF SP2 SWITCH IS ON          43980000
*     THEN                              /* THEN                         43990000
@8C8     EQU   *                                                  1325  44000000
WRITE15  TM    SWITCHES+2,B'00100000'                             1325  44010000
         BC    12,@8C5                                            1325  44020000
*       DO;                             /* DO THE FOLLOWING             44030000
*         SP2='0'B;                     /* TURN SP2 SWITCH OFF          44040000
         NI    SWITCHES+2,B'11011111'                             1327  44050000
*         DATACON=SP2LINES;             /* CAUSE SKIP TO 2ND NEXT LINE  44060000
         MVC   BUFFERS+124(1),SP2LINES                            1328  44070000
*         LINECNT=LINECNT+2;            /* INCREMENT LINE COUNT BY 2    44080000
         LA    @F,2                                               1329  44090000
         A     @F,LINECNT                                         1329  44100000
         ST    @F,LINECNT                                         1329  44110000
         BC    15,@8C4                                            1331  44120000
*       END;                                                            44130000
*     ELSE                              /* ELSE SP2 SWITCH IS OFF       44140000
*       DO;                             /* DO THE FOLLOWING             44150000
*         DATACON=SP1LINE;              /* CAUSE CARR TO SKIP 1 LINE    44160000
@8C5     MVC   BUFFERS+124(1),SP1LINE                             1332  44170000
*         LINECNT=LINECNT+1;            /* INCREMENT LINE COUNT BY 1    44180000
         LA    @F,1                                               1333  44190000
         A     @F,LINECNT                                         1333  44200000
         ST    @F,LINECNT                                         1333  44210000
*       END;                                                            44220000
*   OUTAREAD=ADDR(DATAPRNT);            /* GET ADDR OF BUFF FOR SYSTEM  44230000
@8C4     LA    @1,BUFFERS+124                                     1335  44240000
*   BLNKDATA='1'B;                      /* INDIC TO BLANK IT AFTER PRNT 44250000
         OI    SWITCHES,B'00100000'                               1336  44260000
*   RET=SAVERET;                        /* RESTORE RET                  44270000
         L     @3,SAVERET                                         1337  44280000
* WRITE16: /* BRANCH HERE WHEN A HEADING IS TO BE PRINTED.              44290000
*             FOLLOWING CODE PRINTS IT.                                 44300000
*   DCBAD=OUTDCBAD;                     /* LOAD OUTPUT DCB ADR INTO REG 44310000
WRITE16  L     @7,PARMPTR                                         1338  44320000
         L     @2,4(0,@7)                                         1338  44330000
*   OUTBUFAD=OUTAREAD;                  /* LOAD OUTPUT BUF ADR INTO REG 44340000
         LR    @0,@1                                              1339  44350000
*   GEN(PUT (DCBAD));                   /* PRINT ONE LINE               44360000
         PUT (DCBAD)                                                    44370000
         DS    0H                                                       44380000
*   /* TEST IF HEADING BUFFER SHOULD BE BLANKED OUT                     44390000
*   IF BLNKHEAD='1'B                    /* IF BLNKHEAD SWITCH IS ON     44400000
*     THEN                              /* THEN                         44410000
         TM    SWITCHES,B'01000000'                               1341  44420000
         BC    12,@8C3                                            1341  44430000
* WRITE17: /* BRANCH HERE RIGHT AFTER ENTERING HMBLKXRF.                44440000
*             FOLLOWING CODE INITIALIZES BUFFERS TO BLANKS.             44450000
*       DO;                             /* BLANK OUT THE HEADING BUFFER 44460000
*         HEADBUF(1)=BLANK;             /* PUT BLANK INTO FIRST BYTE    44470000
WRITE17  MVC   BUFFERS+1(1),BLANK                                 1343  44480000
*         HEADBUF(2:120)=HEADBUF(1:119); /* FILL REMAINDER OF BUFFER    44490000
         MVC   BUFFERS+2(119),BUFFERS+1                           1344  44500000
*         BLNKHEAD='0'B;                /* TURN BLNKHEAD SWITCH OFF     44510000
         NI    SWITCHES,B'10111111'                               1345  44520000
*       END;                                                            44530000
*   /* TEST IF DATA BUFFER SHOULD BE BLANKED OUT                        44540000
*   IF BLNKDATA='1'B                    /* IF BLNKDATA SWITCH IS ON     44550000
*     THEN                              /* THEN                         44560000
@8C3     TM    SWITCHES,B'00100000'                               1347  44570000
         BC    12,@8C2                                            1347  44580000
*       DO;                             /* BLANK OUT THE DATA BUFFER    44590000
*         DATABUF(1)=BLANK;             /* PUT BLANK INTO FIRST BYTE    44600000
         MVC   BUFFERS+125(1),BLANK                               1349  44610000
*         DATABUF(2:120)=DATABUF(1:119); /* FILL REMAINDER OF BUFFER    44620000
         MVC   BUFFERS+126(119),BUFFERS+125                       1350  44630000
*         BLNKDATA='0'B;                /* TURN BLNKDATA SWITCH OFF     44640000
         NI    SWITCHES,B'11011111'                               1351  44650000
*       END;                                                            44660000
*   GO TO RET;                          /* RETURN WITHIN HMBLKXRF       44670000
@8C2     BCR   15,@3                                              1353  44680000
*                                                                       44690000
* /******************************************************************** 44700000
* /*   THE FOLLOWING SECTION OF CODE CONVERTS A 2-BYTE BINARY INTEGER   44710000
* /*   INTO A 4-BYTE ZONED DECIMAL INTEGER SUITABLE FOR PRINTING.       44720000
* /*   IT IS ENTERED EACH TIME A PAGE NO. OR SEGMENT NO. IS TO BE       44730000
* /*   CONVERTED.                                                       44740000
* /******************************************************************** 44750000
*                                                                       44760000
* BITODEC:                                                              44770000
*   GEN;                                                                44780000
BITODEC  EQU   *                                                  1354  44790000
         CVD   BINARY,BININT           CONVERT TO PACKED DECIMAL        44800000
         UNPK  DECINT(4),BININT+6(2)   CONVERT TO ZONED DECIMAL         44810000
         OI    DECINT+3,X'F0'          DELETE SIGN IN LOW ORDER BYTE    44820000
         DS    0H                                                       44830000
*   /* TEST IF NONSIG ZEROS OF NUMBER TO BE PRINTED SHOULD BE BLANKED   44840000
*   IF BLNKZERO='1'B                    /* IF BLNKZERO SWITCH IS ON     44850000
*     THEN                              /* THEN                         44860000
         TM    SWITCHES+1,B'00000001'                             1355  44870000
         BC    12,@8C1                                            1355  44880000
*       DO;                             /* BLANK OUT NONSIG ZEROS       44890000
*         BLNKZERO='0'B;                /* TURN BLNKZERO SWITCH OFF     44900000
         NI    SWITCHES+1,B'11111110'                             1357  44910000
*         GO TO BLANK0;                 /* GO TO BLANK OUT NONSIG ZEROS 44920000
         BC    15,BLANK0                                          1358  44930000
*       END;                                                            44940000
*     ELSE                              /* ELSE BLNKZERO SWITCH IS OFF  44950000
*       DO;                             /* DON'T BLANK NONSIG ZEROS     44960000
*         GO TO RET;                    /* RETURN WITHIN HMBLKXRF       44970000
@8C1     BCR   15,@3                                              1361  44980000
*       END;                                                            44990000
*                                                                       45000000
* /******************************************************************** 45010000
* /*   THE FOLLOWING SECTION OF CODE CONVERTS A 3-BYTE BINARY INTEGER   45020000
* /*   INTO A 6-BYTE ZONED HEXADECIMAL INTEGER SUITABLE FOR PRINTING.   45030000
* /*   IT IS ENTERED EACH TIME AN ADDRESS IS TO BE CONVERTED.           45040000
* /******************************************************************** 45050000
*                                                                       45060000
* BITOHEX:                                                              45070000
*   /* TEST IF RELOCATION FACTOR IS TO BE ADDED TO ADDR BEING CONVERTED 45080000
*   IF RELOCFACÂ¬=0                      /* IF RELOCFAC IS NOT 0         45090000
*      & RELOC='1'B                     /* AND IF RELOC SWITCH IS ON    45100000
*     THEN                              /* THEN                         45110000
@8C0     EQU   *                                                  1363  45120000
BITOHEX  SR    @F,@F                                              1363  45130000
         L     @7,PARMPTR                                         1363  45140000
         C     @F,60(0,@7)                                        1363  45150000
         BC    08,@8BF                                            1363  45160000
         TM    SWITCHES+2,B'00000010'                             1363  45170000
         BC    12,@8BE                                            1363  45180000
*       BININT(5:7)=BININT(5:7)+RELOCFAC; /* ADD RELOC FACTOR TO ADDR   45190000
         L     @F,60(0,@7)                                        1364  45200000
         MVC   @TEMP3+1(3),BININT+4                               1364  45210000
         A     @F,@TEMP3                                          1364  45220000
         ST    @F,@TEMP4                                          1364  45230000
         MVC   BININT+4(3),@TEMP4+1                               1364  45240000
*   RELOC='1'B;                         /* TURN RELOC SWITCH ON         45250000
@8BE     EQU   *                                                  1365  45260000
@8BF     OI    SWITCHES+2,B'00000010'                             1365  45270000
*   GEN;                                                                45280000
         UNPK  HEXINT+1(7),BININT+4(4) CONVERT TO ZONED BINARY          45290000
         NC    HEXINT+1(6),ZONEOFF     ZERO OUT THE ZONES OF THE DIGITS 45300000
         TR    HEXINT+1(6),HEXCHARS    CONVERT TO PRINTABLE HEXADECIMAL 45310000
         DS    0H                                                       45320000
* BLANK0: /* BRANCH HERE AFTER CONVERTING A NUMBER TO PRINTABLE DECIMAL 45330000
*            FOLLOWING CODE BLANKS NONSIGNIFICANT ZEROS.                45340000
*   /* PUT BLANKS OVER NONSIGNIFICANT ZEROS                             45350000
*   DO I=2 TO 5;                        /* LOOP A POSSIBLE 5 TIMES      45360000
BLANK0   LA    @2,2                                               1367  45370000
*     /* TEST IF NUMBER SHOULD BE BLANKED OUT                           45380000
*     IF HEXINT(I)=CHARZERO(1)          /* IF THE NUMBER IS ZERO        45390000
*       THEN                            /* THEN                         45400000
@DO8BD   LR    @7,@2                                              1368  45410000
         LA    @A,HEXINT-1(@7)                                    1368  45420000
         CLC   0(1,@A),CHARZERO                                   1368  45430000
         BC    07,@8B9                                            1368  45440000
*         HEXINT(I)=BLANK;              /* BLANK IT OUT                 45450000
         MVC   0(1,@A),BLANK                                      1369  45460000
         BC    15,@8B8                                            1370  45470000
*       ELSE                            /* ELSE THE NUMBER IS NOT ZERO  45480000
*         GO TO RET;                    /* RETURN WITHIN HMBLKXRF       45490000
@8B9     BCR   15,@3                                              1370  45500000
*   END;                                                                45510000
*   GO TO RET;                          /* RETURN WITHIN HMBLKXRF       45520000
@8B8     AH    @2,@D3                                             1371  45530000
@DO8BC   CH    @2,@D10                                            1371  45540000
         BC    12,@DO8BD                                          1371  45550000
         BCR   15,@3                                              1372  45560000
*                                                                       45570000
* /******************************************************************** 45580000
* /*   THE FOLLOWING SECTION OF CODE PREPARES THIS MESSAGE FOR          45590000
* /*   PRINTING: '******END OF MAP AND CROSS-REFERENCE LISTING'.        45600000
* /*   IT IS ENTERED WHEN NORMAL PROCESSING COMPLETES.                  45610000
* /******************************************************************** 45620000
*                                                                       45630000
* FINISH:                                                               45640000
*   DATABUF(1)=ASTERISK;                /* PUT '*' IN FIRST BYTE        45650000
FINISH   MVC   BUFFERS+125(1),ASTERISK                            1373  45660000
*   DATABUF(2:6)=DATABUF(1:5);          /* FILL BYTES 2 THRU 6          45670000
         MVC   BUFFERS+126(5),BUFFERS+125                         1374  45680000
*   DATABUF(7:9)=HEADING7(12:14);       /* PUT 'END' INTO BUFFER        45690000
         MVC   BUFFERS+131(3),HEADING7+11                         1375  45700000
*   DATABUF(11:12)=HEADING3(19:20);     /* PUT 'OF' INTO BUFFER         45710000
         MVC   BUFFERS+135(2),HEADING3+18                         1376  45720000
*   DATABUF(14:44)=HEADING5(1:31);      /* PUT 'MAP AND CROSS-REFERENCE 45730000
*                                          LISTING' INTO BUFFER         45740000
         MVC   BUFFERS+138(31),HEADING5                           1377  45750000
*   /* TEST IF LINE SHOULD GO ON THIS OR NEXT PAGE                      45760000
*   IF LINECNT>58                       /* IF NO ROOM IN THIS PAGE      45770000
*     THEN                              /* THEN                         45780000
         LA    @F,58                                              1378  45790000
         C     @F,LINECNT                                         1378  45800000
         BC    10,@8B7                                            1378  45810000
*       DATACON=SP1PAGE;                /* CAUSE CARR TO SKIP 1 PAGE    45820000
         MVC   BUFFERS+124(1),SP1PAGE                             1379  45830000
         BC    15,@8B6                                            1380  45840000
*     ELSE                              /* THERE IS ROOM ON THIS PAGE   45850000
*       DATACON=SP3LINES;               /* CAUSE CARR TO SKIP 3 LINES   45860000
@8B7     MVC   BUFFERS+124(1),SP3LINES                            1380  45870000
*   OUTAREAD=ADDR(DATAPRNT);            /* GET ADDR OF BUFFER FOR PUT   45880000
@8B6     LA    @1,BUFFERS+124                                     1381  45890000
*   RET=ADDR(ABORT);                    /* SET UP RETURN ADDRESS        45900000
         LA    @3,ABORT                                           1382  45910000
*   GO TO WRITE16;                      /* GO TO PRINT TERMINAL MSG     45920000
         BC    15,WRITE16                                         1383  45930000
*                                                                       45940000
* /******************************************************************** 45950000
* /*   THE FOLLOWING SECTION OF CODE RETURNS CONTROL TO THE CONTROL     45960000
* /*   MODULE.  IT IS ENTERED WHEN AN ERROR IS ENCOUNTERED,             45970000
* /*   TERMINATING HMBLKXRF PROCESSING.                                 45980000
* /******************************************************************** 45990000
*                                                                       46000000
* ABORT:                                                                46010000
*   RETURN;                             /* RETURN TO HMBLKCTL           46020000
* END HMBLKXRF;                         /* END OF PROCEDURE HMBLKXRF    46030000
@EL01    L     @D,4(0,@D)                                         1385  46040000
         LR    @1,@C                                              1385  46050000
         L     @0,@SIZ001                                         1385  46060000
         FREEMAIN R,LV=(0),A=(1)                                  1385  46070000
         LM    @E,@C,12(@D)                                       1385  46080000
         BCR   15,@E                                              1385  46090000
@DATA1   EQU   *                                                        46100000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           46110000
@1       EQU   01                                                       46120000
@2       EQU   02                                                       46130000
@3       EQU   03                                                       46140000
@4       EQU   04                                                       46150000
@5       EQU   05                                                       46160000
@6       EQU   06                                                       46170000
@7       EQU   07                                                       46180000
@8       EQU   08                                                       46190000
@9       EQU   09                                                       46200000
@A       EQU   10                                                       46210000
@B       EQU   11                                                       46220000
@C       EQU   12                                                       46230000
@D       EQU   13                                                       46240000
@E       EQU   14                                                       46250000
@F       EQU   15                                                       46260000
@D1      DC    F'0'                                                     46270000
@D2      DC    H'18'                                                    46280000
@D3      DC    H'1'                                                     46290000
@D4      DC    H'-2'                                                    46300000
@D5      DC    H'-4'                                                    46310000
@D6      DC    H'4'                                                     46320000
@D7      DC    H'2'                                                     46330000
@D8      DC    H'8'                                                     46340000
@D9      DC    H'-8'                                                    46350000
@D10     DC    H'5'                                                     46360000
@D11     DC    H'10'                                                    46370000
@D12     DC    H'-18'                                                   46380000
@MVC     MVC   0(1,@A),0(@E)                                            46390000
         DS    0F                                                       46400000
@SIZ001  DC    AL1(&SPN)                                                46410000
         DC    AL3(@DATEND-@DATD)                                       46420000
         DS    0F                                                       46430000
@X4      DC    X'70000000'                                              46440000
         DS    0D                                                       46450000
@DATA    EQU   *                                                        46460000
DUMMY    EQU   00000000            FULLWORD INTEGER                     46470000
OUTBUFAD EQU   00000000            FULLWORD POINTER REGISTER            46480000
PARMREG  EQU   00000001            FULLWORD POINTER REGISTER            46490000
OUTAREAD EQU   00000001            FULLWORD POINTER REGISTER            46500000
DCBAD    EQU   00000002            FULLWORD POINTER REGISTER            46510000
DEBAD    EQU   00000002            FULLWORD POINTER REGISTER            46520000
UCBAD    EQU   00000002            FULLWORD POINTER REGISTER            46530000
BINARY   EQU   00000002            FULLWORD INTEGER REGISTER            46540000
I        EQU   00000002            FULLWORD INTEGER REGISTER            46550000
INBUFAD  EQU   00000003            FULLWORD POINTER REGISTER            46560000
RET      EQU   00000003            3  BYTE  POINTER REGISTER            46570000
CURRCESD EQU   00000005            3  BYTE  POINTER REGISTER            46580000
CURRLD   EQU   00000006            3  BYTE  POINTER REGISTER            46590000
MAINT    EQU   *                   400 BYTE(S) ON DWORD                 46600000
         DC    C'HMBLKXRF MAINTENANCE AREA'                             46610000
         DC    00375C' '                                                46620000
NULL     EQU   *                   8 BIT(S) ON BYTE                     46630000
         DC    B'00000111'                                              46640000
NEVRCALL EQU   *                   1 BYTE(S)                            46650000
         DC    X'06'                                                    46660000
CESD     EQU   *                   8 BIT(S) ON BYTE                     46670000
         DC    B'00100000'                                              46680000
IDR      EQU   *                   8 BIT(S) ON BYTE                     46690000
         DC    B'10000000'                                              46700000
CONTROL  EQU   *                   8 BIT(S) ON BYTE                     46710000
         DC    B'00000001'                                              46720000
CONTEOS  EQU   *                   8 BIT(S) ON BYTE                     46730000
         DC    B'00000101'                                              46740000
CONTEOM  EQU   *                   8 BIT(S) ON BYTE                     46750000
         DC    B'00001101'                                              46760000
CONTRLD  EQU   *                   8 BIT(S) ON BYTE                     46770000
         DC    B'00000011'                                              46780000
CRLDEOS  EQU   *                   8 BIT(S) ON BYTE                     46790000
         DC    B'00000111'                                              46800000
CRLDEOM  EQU   *                   8 BIT(S) ON BYTE                     46810000
         DC    B'00001111'                                              46820000
RLD      EQU   *                   8 BIT(S) ON BYTE                     46830000
         DC    B'00000010'                                              46840000
RLDEOS   EQU   *                   8 BIT(S) ON BYTE                     46850000
         DC    B'00000110'                                              46860000
RLDEOM   EQU   *                   8 BIT(S) ON BYTE                     46870000
         DC    B'00001110'                                              46880000
SYM      EQU   *                   8 BIT(S) ON BYTE                     46890000
         DC    B'01000000'                                              46900000
SCATRANS EQU   *                   8 BIT(S) ON BYTE                     46910000
         DC    B'00010000'                                              46920000
SP1LINE  EQU   *                   1 BYTE(S)                            46930000
         DC    C' '                                                     46940000
SP2LINES EQU   *                   1 BYTE(S)                            46950000
         DC    C'0'                                                     46960000
SP3LINES EQU   *                   1 BYTE(S)                            46970000
         DC    C'-'                                                     46980000
SP1PAGE  EQU   *                   1 BYTE(S)                            46990000
         DC    C'1'                                                     47000000
HEADING1 EQU   *                   39 BYTE(S)                           47010000
         DC    C'CONTROL SECTION ENTRY NAME LENGTH  TYPE'               47020000
HEADING2 EQU   *                   52 BYTE(S)                           47030000
         DC    C'REFERS TO SYMBOL  AT LMOD LOC  CSECT LOC  '            47040000
         DC    C'  IN CSECT'                                            47050000
HEADING3 EQU   *                   52 BYTE(S)                           47060000
         DC    C'IS REFERRED TO BY OF LOAD MODULE IF NOT IN'            47070000
         DC    C' OVERLAY()'                                            47080000
HEADING4 EQU   *                   23 BYTE(S)                           47090000
         DC    C'VECTOR PSEUDO REGISTERS'                               47100000
HEADING5 EQU   *                   31 BYTE(S)                           47110000
         DC    C'MAP AND CROSS-REFERENCE LISTING'                       47120000
HEADING6 EQU   *                   27 BYTE(S)                           47130000
         DC    C'PAGE NUMERICAL ALPHABETICAL'                           47140000
HEADING7 EQU   *                   22 BYTE(S)                           47150000
         DC    C'IN SEGMENT END NUCLEUS'                                47160000
SDPRT    EQU   *                   4 BYTE(S)                            47170000
         DC    C'SD'                                                    47180000
         DC    00002C' '                                                47190000
CMPRT    EQU   *                   4 BYTE(S)                            47200000
         DC    C'CM'                                                    47210000
         DC    00002C' '                                                47220000
PCPRT    EQU   *                   4 BYTE(S)                            47230000
         DC    C'PC'                                                    47240000
         DC    00002C' '                                                47250000
PDPRT    EQU   *                   4 BYTE(S)                            47260000
         DC    C'PD'                                                    47270000
         DC    00002C' '                                                47280000
PRIVPRT  EQU   *                   8 BYTE(S)                            47290000
         DC    C'$PRIVATE'                                              47300000
ENTABPRT EQU   *                   6 BYTE(S)                            47310000
         DC    C'$ENTAB'                                                47320000
SEGTBPRT EQU   *                   7 BYTE(S)                            47330000
         DC    C'$SEGTAB'                                               47340000
BLCOMPRT EQU   *                   9 BYTE(S)                            47350000
         DC    C'$BLANKCOM'                                             47360000
UNRESPRT EQU   *                   11 BYTE(S)                           47370000
         DC    C'$UNRESOLVED'                                           47380000
UNREWPRT EQU   *                   14 BYTE(S)                           47390000
         DC    C'$UNRESOLVED(W)'                                        47400000
NEVCLPRT EQU   *                   11 BYTE(S)                           47410000
         DC    C'$NEVER-CALL'                                           47420000
BLANK    EQU   *                   1 BYTE(S)                            47430000
         DC    C' '                                                     47440000
CHARZERO EQU   *                   2 BYTE(S)                            47450000
         DC    X'F0F0'                                                  47460000
ZERO     EQU   *                   3 BYTE(S)                            47470000
         DC    X'000000'                                                47480000
DASH     EQU   *                   1 BYTE(S)                            47490000
         DC    C'-'                                                     47500000
ASTERISK EQU   *                   1 BYTE(S)                            47510000
         DC    C'*'                                                     47520000
PERIOD   EQU   *                   1 BYTE(S)                            47530000
         DC    C'.'                                                     47540000
ONE      EQU   *                   1 BYTE(S)                            47550000
         DC    X'01'                                                    47560000
TWO      EQU   *                   1 BYTE(S)                            47570000
         DC    X'02'                                                    47580000
IEANUC0  EQU   *                   7 BYTE(S)                            47590000
         DC    C'IEANUC0'                                               47600000
IEAANIP0 EQU   *                   8 BYTE(S)                            47610000
         DC    C'IEAANIP0'                                              47620000
IEAVNIP0 EQU   *                   8 BYTE(S)                            47630000
         DC    C'IEAVNIP0'                                              47640000
IEAQFX00 EQU   *                   8 BYTE(S)                            47650000
         DC    C'IEAQFX00'                                              47660000
SYSNUC   EQU   *                   13 BYTE(S)                           47670000
         DC    C'SYS1.NUCLEUS '                                         47680000
LASTN    EQU   *                   8 BYTE(S)                            47690000
         DC    C'ZZZZZZZZ'                                              47700000
LASTADDR EQU   *                   3 BYTE(S)                            47710000
         DC    X'FFFFFF'                                                47720000
ZONEOFF  EQU   *                   6 BYTE(S)                            47730000
         DC    X'0F0F0F0F0F0F'                                          47740000
HEXCHARS EQU   *                   16 BYTE(S)                           47750000
         DC    C'0123456789ABCDEF'                                      47760000
PARMLIST EQU   00000000            72 BYTE(S) ON WORD                   47770000
INDCBAD  EQU   PARMLIST+00000000   FULLWORD POINTER                     47780000
OUTDCBAD EQU   PARMLIST+00000004   FULLWORD POINTER                     47790000
TITLEAD  EQU   PARMLIST+00000008   FULLWORD POINTER                     47800000
GTMAINAD EQU   PARMLIST+00000012   FULLWORD POINTER                     47810000
GMLENGTH EQU   PARMLIST+00000016   FULLWORD INTEGER                     47820000
FLAGS    EQU   PARMLIST+00000020   16 BIT(S)                            47830000
IDRFLAG  EQU   PARMLIST+00000020   1 BIT(S)                             47840000
OVERLAY  EQU   PARMLIST+00000020   1 BIT(S)                             47850000
A00001   EQU   PARMLIST+00000020   14 BIT(S)                            47860000
BLKCNT   EQU   PARMLIST+00000022   HALFWORD INTEGER                     47870000
INBUF    EQU   PARMLIST+00000024   FULLWORD POINTER                     47880000
SCATDCNT EQU   PARMLIST+00000028   HALFWORD INTEGER                     47890000
TRANDCNT EQU   PARMLIST+00000030   HALFWORD INTEGER                     47900000
ERRORS   EQU   PARMLIST+00000032   32 BIT(S)                            47910000
LMODNAME EQU   PARMLIST+00000036   8 BYTE(S)                            47920000
DDNAME   EQU   PARMLIST+00000044   8 BYTE(S)                            47930000
TXTTTR   EQU   PARMLIST+00000052   3 BYTE(S)                            47940000
TXTLEN   EQU   PARMLIST+00000055   2 BYTE(S)                            47950000
RELOCFAC EQU   PARMLIST+00000060   FULLWORD INTEGER                     47960000
TEXTLEN  EQU   PARMLIST+00000064   FULLWORD INTEGER                     47970000
JFCBARAD EQU   PARMLIST+00000068   FULLWORD POINTER                     47980000
JFCBAREA EQU   00000000            176 BYTE(S)                          47990000
CESDTAB  EQU   00000000            32767*18 BYTE(S)                     48000000
RLDTAB   EQU   00000000            32767*8 BYTE(S)                      48010000
SCATTAB  EQU   00000000            32767*4 BYTE(S)                      48020000
TRANTAB  EQU   00000000            32767*HALFWORD INTEGER               48030000
ADDRTBL  EQU   00000000            32767*4 BYTE(S)                      48040000
INDEXTAB EQU   00000000            32767*HALFWORD INTEGER               48050000
TRSCFORM EQU   00000000            1024 BYTE(S) ON WORD                 48060000
IDENT3   EQU   TRSCFORM+00000000   8 BIT(S)                             48070000
ZEROS1   EQU   TRSCFORM+00000001   1 BYTE(S)                            48080000
COUNT4   EQU   TRSCFORM+00000002   HALFWORD INTEGER                     48090000
TRSCDATA EQU   TRSCFORM+00000004   1020*1 BYTE(S)                       48100000
TRSCITEM EQU   00000000            4 BYTE(S)                            48110000
CESDLINE EQU   00000000            18 BYTE(S) ON WORD                   48120000
CESDID   EQU   CESDLINE+00000000   HALFWORD INTEGER                     48130000
SYMBOL   EQU   CESDLINE+00000002   8 BYTE(S)                            48140000
CESDTYPE EQU   CESDLINE+00000010   8 BIT(S)                             48150000
CESDADDR EQU   CESDLINE+00000011   3  BYTE  POINTER                     48160000
SEGNO    EQU   CESDLINE+00000014   1 BYTE(S)                            48170000
IDLENGTH EQU   CESDLINE+00000015   3 BYTE(S)                            48180000
RLDLINE  EQU   00000000            8 BYTE(S) ON WORD                    48190000
RPTR     EQU   RLDLINE+00000000    HALFWORD INTEGER                     48200000
PPTR     EQU   RLDLINE+00000002    HALFWORD INTEGER                     48210000
RLDFLAG  EQU   RLDLINE+00000004    8 BIT(S)                             48220000
RLDADDR  EQU   RLDLINE+00000005    3  BYTE  POINTER ON WORD+1           48230000
CESDFORM EQU   00000000            248 BYTE(S) ON WORD                  48240000
IDENT1   EQU   CESDFORM+00000000   8 BIT(S)                             48250000
SPARE1   EQU   CESDFORM+00000001   3 BYTE(S)                            48260000
ESDID    EQU   CESDFORM+00000004   HALFWORD INTEGER                     48270000
COUNT1   EQU   CESDFORM+00000006   HALFWORD INTEGER                     48280000
ESDATA   EQU   CESDFORM+00000008   15*16 BYTE(S)                        48290000
RLDFORM  EQU   00000000            256 BYTE(S) ON WORD                  48300000
IDENT2   EQU   RLDFORM+00000000    8 BIT(S)                             48310000
SPARE2   EQU   RLDFORM+00000001    3 BYTE(S)                            48320000
COUNT2   EQU   RLDFORM+00000004    HALFWORD INTEGER                     48330000
COUNT3   EQU   RLDFORM+00000006    HALFWORD INTEGER                     48340000
SPARE3   EQU   RLDFORM+00000008    8 BYTE(S)                            48350000
RLDATA   EQU   RLDFORM+00000016    240*8 BIT(S) ON BYTE                 48360000
         ORG   @DATA                                                    48370000
         DS    00000835C                                                48380000
@L       EQU   6                                                        48390000
@DATD    DSECT                                                          48400000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   48410000
BININT   EQU   @DATD+00000072      8 BYTE(S) ON DWORD                   48420000
DECINT   EQU   @DATD+00000080      8 BYTE(S) ON DWORD                   48430000
HEXINT   EQU   @DATD+00000080      8 BYTE(S)                            48440000
DECBE    EQU   @DATD+00000088      20 BYTE(S) ON DWORD                  48450000
PARMPTR  EQU   @DATD+00000108      FULLWORD POINTER                     48460000
HIGHADDR EQU   @DATD+00000112      FULLWORD POINTER                     48470000
RLDTABAD EQU   @DATD+00000116      FULLWORD POINTER                     48480000
INDTABAD EQU   @DATD+00000120      FULLWORD POINTER                     48490000
CURRTRSC EQU   @DATD+00000124      FULLWORD POINTER                     48500000
TRNTABAD EQU   @DATD+00000128      FULLWORD POINTER                     48510000
SAVCURR2 EQU   @DATD+00000132      FULLWORD POINTER                     48520000
SCTTABAD EQU   @DATD+00000136      FULLWORD POINTER                     48530000
SAVLMLOC EQU   @DATD+00000140      FULLWORD POINTER                     48540000
SAVCSDAD EQU   @DATD+00000144      FULLWORD POINTER                     48550000
RLDEND   EQU   @DATD+00000148      FULLWORD POINTER                     48560000
CESDEND  EQU   @DATD+00000152      FULLWORD POINTER                     48570000
SAVCURR1 EQU   @DATD+00000156      FULLWORD POINTER                     48580000
SAVCURR3 EQU   @DATD+00000160      FULLWORD POINTER                     48590000
CETABPTR EQU   @DATD+00000164      FULLWORD POINTER                     48600000
SAVERET  EQU   @DATD+00000168      FULLWORD POINTER                     48610000
REMAINDR EQU   @DATD+00000172      FULLWORD INTEGER                     48620000
NUMRLDS  EQU   @DATD+00000176      FULLWORD INTEGER                     48630000
RLDSPRTD EQU   @DATD+00000180      FULLWORD INTEGER                     48640000
M        EQU   @DATD+00000184      FULLWORD INTEGER                     48650000
K        EQU   @DATD+00000188      FULLWORD INTEGER                     48660000
J        EQU   @DATD+00000192      FULLWORD INTEGER                     48670000
IM       EQU   @DATD+00000196      FULLWORD INTEGER                     48680000
L        EQU   @DATD+00000200      FULLWORD INTEGER                     48690000
ID       EQU   @DATD+00000204      FULLWORD INTEGER                     48700000
CESDSZSV EQU   @DATD+00000208      FULLWORD INTEGER                     48710000
SCATAD   EQU   @DATD+00000212      FULLWORD INTEGER                     48720000
SCATWDCT EQU   @DATD+00000216      FULLWORD INTEGER                     48730000
TRCOUNT  EQU   @DATD+00000220      FULLWORD INTEGER                     48740000
LINECNT  EQU   @DATD+00000224      FULLWORD INTEGER                     48750000
NUCMINIP EQU   @DATD+00000229      3  BYTE  POINTER ON WORD+1           48760000
LRDIF    EQU   @DATD+00000232      FULLWORD INTEGER                     48770000
TEMPADDR EQU   @DATD+00000236      FULLWORD INTEGER                     48780000
RLF      EQU   @DATD+00000240      FULLWORD INTEGER                     48790000
OFFSET   EQU   @DATD+00000244      FULLWORD INTEGER                     48800000
SCADR    EQU   @DATD+00000248      FULLWORD INTEGER                     48810000
ADDRTBAD EQU   @DATD+00000252      FULLWORD POINTER                     48820000
NIPADDR  EQU   @DATD+00000257      3  BYTE  POINTER ON WORD+1           48830000
PREVAD   EQU   @DATD+00000260      FULLWORD POINTER                     48840000
QFXADDR  EQU   @DATD+00000265      3  BYTE  POINTER ON WORD+1           48850000
PREVLN   EQU   @DATD+00000268      FULLWORD POINTER                     48860000
SIZEN    EQU   @DATD+00000272      FULLWORD INTEGER                     48870000
NEWAD    EQU   @DATD+00000276      FULLWORD INTEGER                     48880000
LASTAD   EQU   @DATD+00000280      FULLWORD INTEGER                     48890000
NIPLEN   EQU   @DATD+00000285      3  BYTE  POINTER ON WORD+1           48900000
QFXLEN   EQU   @DATD+00000289      3  BYTE  POINTER ON WORD+1           48910000
SEGLEN   EQU   @DATD+00000293      3  BYTE  POINTER ON WORD+1           48920000
LMLENNO  EQU   @DATD+00000297      3  BYTE  POINTER ON WORD+1           48930000
LMLEN    EQU   @DATD+00000301      3  BYTE  POINTER ON WORD+1           48940000
PDLEN    EQU   @DATD+00000305      3  BYTE  POINTER ON WORD+1           48950000
PRLEN    EQU   @DATD+00000309      3  BYTE  POINTER ON WORD+1           48960000
CESDTBID EQU   @DATD+00000312      HALFWORD INTEGER                     48970000
NUMITEMS EQU   @DATD+00000314      HALFWORD INTEGER                     48980000
NUMCESDS EQU   @DATD+00000316      HALFWORD INTEGER                     48990000
DATACNT  EQU   @DATD+00000318      HALFWORD INTEGER                     49000000
TRSCDCNT EQU   @DATD+00000320      HALFWORD INTEGER                     49010000
INCR     EQU   @DATD+00000322      HALFWORD INTEGER                     49020000
R        EQU   @DATD+00000324      HALFWORD INTEGER                     49030000
P        EQU   @DATD+00000326      HALFWORD INTEGER                     49040000
F        EQU   @DATD+00000328      HALFWORD INTEGER                     49050000
A        EQU   @DATD+00000330      HALFWORD INTEGER                     49060000
PAGENUM  EQU   @DATD+00000332      HALFWORD INTEGER                     49070000
Q        EQU   @DATD+00000334      HALFWORD INTEGER                     49080000
S        EQU   @DATD+00000336      HALFWORD INTEGER                     49090000
N        EQU   @DATD+00000338      HALFWORD INTEGER                     49100000
SEGLENCT EQU   @DATD+00000340      HALFWORD INTEGER                     49110000
HISEGNO  EQU   @DATD+00000342      HALFWORD INTEGER                     49120000
SWITCHES EQU   @DATD+00000344      24 BIT(S) ON BYTE                    49130000
TEXTNEXT EQU   SWITCHES+00000000   1 BIT(S)                             49140000
BLNKHEAD EQU   SWITCHES+00000000   1 BIT(S)                             49150000
BLNKDATA EQU   SWITCHES+00000000   1 BIT(S)                             49160000
LINECT61 EQU   SWITCHES+00000000   1 BIT(S)                             49170000
NCHD     EQU   SWITCHES+00000000   1 BIT(S)                             49180000
NCSHD    EQU   SWITCHES+00000000   1 BIT(S)                             49190000
ACHD     EQU   SWITCHES+00000000   1 BIT(S)                             49200000
ACSHD    EQU   SWITCHES+00000000   1 BIT(S)                             49210000
NRHD     EQU   SWITCHES+00000001   1 BIT(S)                             49220000
ARHD     EQU   SWITCHES+00000001   1 BIT(S)                             49230000
PRHD     EQU   SWITCHES+00000001   1 BIT(S)                             49240000
PRSHD    EQU   SWITCHES+00000001   1 BIT(S)                             49250000
DASHLINE EQU   SWITCHES+00000001   1 BIT(S)                             49260000
PREGHERE EQU   SWITCHES+00000001   1 BIT(S)                             49270000
EREFPRES EQU   SWITCHES+00000001   1 BIT(S)                             49280000
BLNKZERO EQU   SWITCHES+00000001   1 BIT(S)                             49290000
NA3RET   EQU   SWITCHES+00000002   1 BIT(S)                             49300000
NUMCESD  EQU   SWITCHES+00000002   1 BIT(S)                             49310000
SP2      EQU   SWITCHES+00000002   1 BIT(S)                             49320000
DUBLDASH EQU   SWITCHES+00000002   1 BIT(S)                             49330000
NUCMAP   EQU   SWITCHES+00000002   1 BIT(S)                             49340000
TRSCREC1 EQU   SWITCHES+00000002   1 BIT(S)                             49350000
RELOC    EQU   SWITCHES+00000002   1 BIT(S)                             49360000
A00000   EQU   SWITCHES+00000002   1 BIT(S)                             49370000
BITCHECK EQU   @DATD+00000347      8 BIT(S) ON BYTE                     49380000
CESDTYP  EQU   @DATD+00000348      8 BIT(S) ON BYTE                     49390000
CURSEGNO EQU   @DATD+00000349      1 BYTE(S)                            49400000
TEMPESD  EQU   @DATD+00000350      1 BYTE(S)                            49410000
TEMPAREA EQU   @DATD+00000351      22 BYTE(S)                           49420000
BUFFERS  EQU   @DATD+00000376      245 BYTE(S) ON WORD                  49430000
HEADPRNT EQU   BUFFERS+00000000    121 BYTE(S) ON WORD                  49440000
HEADCON  EQU   BUFFERS+00000000    1 BYTE(S)                            49450000
HEADBUF  EQU   BUFFERS+00000001    120 BYTE(S)                          49460000
DATAPRNT EQU   BUFFERS+00000124    121 BYTE(S) ON WORD                  49470000
DATACON  EQU   BUFFERS+00000124    1 BYTE(S)                            49480000
DATABUF  EQU   BUFFERS+00000125    120 BYTE(S)                          49490000
         DS    00000780C                                                49500000
@TEMPS   DS    0F                                                       49510000
@TEMP2   DC    F'0'                                                     49520000
@TEMP3   DC    F'0'                                                     49530000
@TEMP4   DC    F'0'                                                     49540000
RD       READ  DECBL,SF,MF=L           ISSUE LIST FORMAT READ           49550000
READLEN  EQU   *-RD                    COMPUTE LENGTH OF READ CODE      49560000
         CVT LIST=YES,DSECT=YES                               YM2968    49570000
@DATD    DSECT                                                          49580000
@DATEND  EQU   *                                                        49590000
HMBLKXRF CSECT ,                                                        49600000
@9F4     EQU   READA1                                                   49610000
@9EC     EQU   READB                                                    49620000
@9EE     EQU   READB1                                                   49630000
@9D4     EQU   @9D3                                                     49640000
@9D1     EQU   NUCCONV                                                  49650000
@9D0     EQU   READ                                                     49660000
@9C9     EQU   NUCCONV2                                                 49670000
@9BD     EQU   CHNXT                                                    49680000
@9BC     EQU   CHNXT                                                    49690000
@9AF     EQU   @9AE                                                     49700000
@9B1     EQU   @9AE                                                     49710000
@9B0     EQU   @9AE                                                     49720000
@99D     EQU   NUCCONV4                                                 49730000
@989     EQU   @988                                                     49740000
@986     EQU   NACESD7                                                  49750000
@97F     EQU   @97E                                                     49760000
@976     EQU   WRITE                                                    49770000
@978     EQU   NRLD                                                     49780000
@965     EQU   NACESD11                                                 49790000
@95B     EQU   WRITE                                                    49800000
@959     EQU   WRITE                                                    49810000
@953     EQU   NACESD13                                                 49820000
@944     EQU   ARLD                                                     49830000
@93D     EQU   WRITE                                                    49840000
@930     EQU   WRITE                                                    49850000
@925     EQU   NRLD7                                                    49860000
@921     EQU   NRLD7                                                    49870000
@91F     EQU   NRLD7                                                    49880000
@901     EQU   WRITE                                                    49890000
@8F6     EQU   ARLD7                                                    49900000
@8F2     EQU   ARLD7                                                    49910000
WRITE9   EQU   WRITE15                                                  49920000
WRITE12  EQU   WRITE15                                                  49930000
ABORT    EQU   @EL01                                                    49940000
         END   HMBLKXRF,(C'PL/S',1400,76175)                            49950000
