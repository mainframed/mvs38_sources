./  ADD  SSI=31970585,NAME=AMAPTFLE
AMAPTFLE CSECT                                                          00030002
         TITLE 'AMAPTFLE - PTF APPLICATION PROGRAM'                     00060002
*C 613500                                                       YA01764 00060202
*A 682900-683352                                                SA55374 00060402
*A 611420-611680,614500-614696,637600-637740                    SA55373 00060802
*C 611700,612600,637800                                         SA55373 00061202
*D 336984-337165                                                 YM1475 00062002
*A 194400                                                        Y01006 00066002
*A 369400-369500,377980-377988,599899-600499                     YM1466 00068002
*C 360600,369900,599799                                          YM1466 00070002
*D 599699                                                        YM1466 00072002
*D 490197                                                        YM1467 00074002
*A 367222-367281,367535-367563,490193                            YM1467 00076002
*C 490199                                                        YM1467 00078002
*A 693920-694140                                                 YM1469 00080002
*A 210100,780100                                                 A48079 00082002
*A 377800-377960,372400-372500,734096,772572,772668              Y01045 00084002
*A 336904-337426                                                 Y01045 00086002
*A 359500,380200,399700,764800,355000                            Y01036 00088002
*A 288700-288880,315700-315900,734092                            Y01036 00090002
*D 728100,594000-604200,773100,653100-653400                     Y01983 00092002
*D 363600-366600,465600-489900                                   Y01036 00094002
*C 728400-729300                                                 Y01983 00096002
*C 653700,654840                                                 Y01036 00098002
*A 654700-654860,597700-599799                                   A40797 00100002
*A 336700-336884,442300,772496-772497,775000,734084              Y01045 00102002
*C 336900                                                        Y01045 00104002
*A 733900-734020,772400-772492,360200,360700-367333,689800       Y01036 00106002
*A 465800-484300,485800-491063                                   Y01036 00108002
*A 734060-734080,360100,360400-360500,607900-608000              A40797 00110002
*A 642700-642880,758500-758600,754300,484800-485300              A40797 00112002
*A 771400,301300-301400,374800-374900                            Y01048 00114002
*C 360000,644700                                                 A40797 00116002
*A 318600-319500,3363000-3375000,3921000-393000,783000-783300    X01983 00118002
*********************************************************************** 00120002
*********************************************************************** 00150002
* TITLE        AMAPTFLE                                               * 00180002
****                                                               **** 00210002
* STATUS       OS/VS2 RELEASE 02.0                                    * 00240002
****                                                               **** 00270002
* FUNCTION     GENERATE-                                              * 00300002
*              PRODUCES AN INPUT STREAM WHICH WHEN EXECUTED WILL APPLY* 00330002
*              PTFS TO A SYSTEM.IT PRODUCES THIS INPUT STREAM BY      * 00360002
*              ANALYZING THE STAGE 1 OUTPUT TAPE FROM SYSGEN          * 00390002
*              APPLICATION-                                           * 00420002
*              ASSISTS AMAPTF01 IN BUILDING A SYSLIN DATA SET         * 00450002
*              AND INVOKES THE REQUIRED FUNCIONS OF AMAPTF01          * 00480002
*              TO DIRECTLY APPLY PTFS TO THE SYSTEM                   * 00510002
****                                                               **** 00540002
** ENTRY POINT  TLKEDT                                                * 00570002
****                                                               **** 00600002
* INPUT     STAGE OUTPUT TAPE FROM SYSGEN                             * 00630002
*              GENERATE FUNCTION-                                     * 00660002
*              COMPONENT LIBRARY MODULE NAMES FOR WHCIH JCL IS TO BE  * 00690002
*              PRODUCED.                                              * 00720002
*              APPLICATION FUNCTION-                                  * 00750002
*              COMPONENT LIBRARY MODULE NAMES FOLLOWED BY THE OBJ     * 00780002
*              FOR THE PRECEDING NAMED CONTROL STATEMENT.             * 00810002
****                                                               **** 00840002
* OUTPUT       NORMAL- A JOBSTREAM WHEN USING THE GENERATE FUNCTION   * 00870002
*                      A SYSLIN INPUT DATA SET WHEN USING THE         * 00900002
*                      APPLICATION FUNCTION.                          * 00930002
*              ERROR- IF THE NUMBER OF INPUT MODULE NAMES EXCEEDS 150 * 00960002
*                     A MESSAGE IS PUT OUT INFORMING THE USER OF THE  * 00990002
*                     ERROR AND CONTROL IS RETURNED TO THE SYSTEM VIA * 01020002
*                     REGISTER  FOURTEEN WITHOUT PROCESSING ANY INPUT * 01050002
****                                                               **** 01080002
* EXTERNAL ROUTINES      AMAPTF01                                     * 01110002
****                                                               **** 01140002
* EXITS         NORMAL - TO SYSTEM VIA REGISTER FOURTEEN              * 01170002
*                                                                     * 01200002
****                                                               **** 01230002
* TABLES/WORKAREAS                                                    * 01260002
*                                                                     * 01290002
*                  MODTBL-DEFINES INPUT MODULE NAME AREA              * 01320002
*                                                                     * 01350002
*                  PCHAREA-INPUT CARD BUFFER  FOR STAGE 1 OUTPUT TAPE * 01380002
*                                                                     * 01410002
*                  OUTAREA1-LINKEDIT OUTPUT AREA                      * 01440002
*                                                                     * 01470002
*                  OUTAREA2-LINKEDIT OUTPUT AREA                      * 01500002
*                                                                     * 01530002
*                  P2OUT-MOVE/COPY OUTPUT AREA                        * 01560002
*                  BRPRMLST-PARAMETER LSIT FOR AMAPTF01               * 01590002
* ATTRIBUTES   NON-REUSEABLE                                          * 01620002
****                                                               **** 01650002
* NOTES        INPUT MODULE NAMES MUST NOT EXCEED 150 NAMES           * 01680002
****                                                               **** 01710002
*********************************************************************** 01740002
*********************************************************************** 01770002
*/*AMAPTFLE: CHART  AMAPTFLE AOS/1 RELEASE 1 */                         01800002
*/* E AMAPTFLE */                                                       01830002
*/* P SAVE POINTER TO PARAMETER LIST */                                 01860002
*/* L OPEN MODF,PCHF, OUTF,PRINT DDS */                                 01890002
*/* D (YES,%MODF:R,NO,) OPEN FOR PRINT DD SUCCESSFUL */                 01920002
*/*%AMA002: I WRITE MESSAGE AMA002I */                                  01950002
*/*RET16: P SET RETURN CODE TO 16 */                                    01980002
*/*FILCLOSE: L CLOSE MODF,PCHF, OUTF,PRINT DDS */                       02010002
*/* D (NO,,YES,%RETURN) MODULE TABLE EMPTY SWITCH SET */                02040002
*/* D (NO,,YES,%AMACLOS) APPLICATION FUNCTION REQUESTED */              02070002
*/*%RETURN: P INSERT HIGHEST RETURN CODE */                             02100002
*/* R RETURN */                                                         02130002
*/*%MODF: D (NO,%AMA002:RR,YES,%PCHF) OPEN FOR MODF DD SUCCESSFUL */    02160002
*/*%PCHF: D (NO,%AMA002:RR,YES,%OUTF) OPEN FOR OUTF DD SUCCESSFUL */    02190002
*/*%OUTF: D (NO,%AMA002:RR,YES,%PARM) OPEN FOR OUTF DD SUCCESSFUL */    02220002
*/*%PARM: D (NO,,YES,LODBLOK) PARAMETER LENGTH = 0 */                   02250002
*/* P INDICATE APPLICATION FUNCTION REQUESTED */                        02280002
*/* P LOAD MODULES AMAPTF01 AND AMAPTF02 AND SAVE ENTRY POINTS */       02310002
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 1 (SPOOL DATA) */               02340002
*/*LODBLOK: D (NO,,YES,%AMA009) BLOCKSIZE FOR PCHF DD = 0 */            02370002
*/* L GET STORAGE FOR PCHF INPUT BUFFER */                              02400002
*/* P COMPUTE NUMBER OF LOGICAL RECORDS PER BLOCK */                    02430002
*/* D (NO,,YES,GETBUFS) APPLICATION FUNCTION REQUESTED */               02460002
*/* S AMAWRITE:WRITE JOB CARD TO OUTF */                                02490002
*/*GETBUFS: L GET STORAGE FOR TABLES */                                 02520002
*/* P COMPUTE AND SAVE ADDRESS FOR IDENTIFY TABLE */                    02550002
*/* P INITIALIZE IDENTIFY INDEX */                                      02580002
*/* P COMPUTE AND SAVE ADDRESS FOR MODULE NAME TABLE */                 02610002
*/* P SET MODULE TABLE EMPTY SWITCH */                                  02640002
*/* P COMPUTE AND SAVE ADDRESS FOR SSI TABLE */                         02670002
*/* P COMPUTE AND SAVE END OF MODULE NAME TABLE */                      02700002
*/* P SAVE ADDRESS OF OVERLAY TABLE */                                  02730002
*/*READMOD: I READ A RECORD FROM MODF */                                02760002
*/* D (NO,,YES,ENDMOD:R) END OF MODF FILE */                            02790002
*/*MOVEMOD1: D (NO,,YES,%IDENT) COLUMN 1 BLANK */                       02820002
*/*MOVEMOD2: D (YES,,NO,%FRSTNAM) PART OF OBJECT DECK */                02850002
*/* D (YES,,NO,%AMA008:R) FIRST CARD SWITCH SET */                      02880002
*/* D (NO,%AMA008:R,YES,) APPLICATION FUNCTION REQUESTED */             02910002
*/*%FRSTNAM: P SET NEW CARD AND FIRST CARD SWITCHES */                  02940002
*/* D (NO,,YES,%AMA008) IDENT CONTIN SW SET */                          02970002
*/*SPOOLCD: D (YES,,NO,NMEMOV:R) APPLICATION FUNCTION REQUESTED */      03000002
*/* L AMAPTF01 SPOOL CARD TO WORK FILE */                               03030002
*/* D (NO,,YES,READMOD) CARD PART OF OBJECT DECK */                     03060002
*/* D (NO,NMEMOV:R,YES,READMOD) COLUMN 1 BLANK (IDENTIFY CARD) */       03090002
*/*NMEMOV: P MOVE NAME INTO MODULE NAME TABLE */                        03120002
*/* P SET IDENTIFY INDEX IN TABLE TO 0 */                               03150002
*/* P MOVE SSI INFORMATION INTO SSI TABLE */                            03180002
*/* P INCREMENT MODULE NAME AND SSI TABLE POINTERS */                   03210002
*/* D (YES,,NO,READMOD:R) MODULE NAME TABLE OVERFLOW */                 03240002
*/*MESSAGE: P SET MODULE TABLE OVERFLOW SWITCH */                       03270002
*/*%FLUSH: I READ RECORD FROM MODF TO FLUSH INPUT STREAM */             03300002
*/* D (NO,%FLUSH,YES,ENDMOD) END OF MODF FILE */                        03330002
*/*%AMA008: I WRITE CARD IMAGE */                                       03360002
*/* I (,RET16) WRITE MESSAGE AMA008I */                                 03390002
*/*%AMA009: I (,RET16) WRITE MESSAGE AMA009I */                         03420002
*/*%AMACLOS: P SET AMAPTF01 ROUTINE INDICATOR TO 4 */                   03450002
*/* L (,%RETURN) AMAPTF01  CLOSE WORK FILE */                           03480002
*/*%IDENT: D (NO,,YES,MOVECON) IDENT CONTIN SW SET */                   03510002
*/* D (NO,,YES,SPOOLCD) CONTINUATION (PTF01) */                         03540002
*/* S CHKSPACE:POINT TO NEXT OPERAND */                                 03570002
*/* D (YES,,NO,%AMA008) IDENTIFY CARD */                                03600002
*/* D (NO,,YES,%AMA008) FIRST CARD SWITCH SET */                        03630002
*/* D (NO,,YES,MOVEMOD2) APPLICATION FUNCTION REQUESTED */              03660002
*/* D (YES,,NO,MOVECON:R) NEW NAME CARD SWITCH SET */                   03690002
*/* P STORE IDENTIFY INDEX AFTER MODULE NAME IN TABLE */                03720002
*/* P TURN OFF NEW NAME CARD SWITCH */                                  03750002
*/* P (,MOVECON:R) INDICATE NEW SET OF IDENTIFY CARDS */                03780002
*/*MOVECON: P INCREMENT IDENTIFY INDEX */                               03810002
*/* D (NO,,YES,%AMA011) IDENTIFY TABLE OVERFLOW */                      03840002
*/* P TURN OFF IDENTIFY CONTINUATION SWITCH */                          03870002
*/* P MOVE IDENTIFY CARD INTO IDENTIFY TABLE */                         03900002
*/* P INCREMENT TABLE POINTER */                                        03930002
*/* D (NO,,YES,READMOD) COLUMN 72 BLANK */                              03960002
*/* P (,READMOD) TURN ON IDENTIFY CONTINUATION SWITCH */                03990002
*/*%AMA011: I (,RET16) WRITE MESSAGE AMA011I */                         04020002
*/*ENDMOD: D (NO,,YES,FILCLOSE) MODULE TABLE EMPTY SWITCH SET */        04050002
*/* D (NO,,YES,%AMA001) MODULE TABLE OVERFLOW SWITCH SET */             04080002
*/* P BLANK 'INCLUDE' AND 'INCLUDE SYSLMOD' BUFFERS */                  04110002
*/* P INDICATE END OF MODULE NAME TABLE */                              04140002
*/*READPCH1: P SET NON-JCL ADDRESS TO READ NEXT CARD */                 04170002
*/* S PGMRTN: DETERMINE THE PROGRAM INVOKED ON STAGE I TAPE */          04200002
*/*EXECRTN: P TURN OFF JCL COPIED AND CHANGE/REPLACE SWITCHES */        04230002
*/* P SET ENTRY/ALIAS SWITCH */                                         04260002
*/* P TURN OFF OVERLAY SWITCH */                                        04290002
*/* S NOTERTN:NOTE TAPE POSITION OF LAST BLOCK READ */                  04320002
*/*READPCH2: P SET NON-JCL ADDRESS TO TESTCON*/                         04350002
*/* S (,TESTCON:R) PGMRTN: DETERMINE THE PROGRAM INVOKED ON STAGE I     04380002
*/*TAPE */                                                              04410002
*/*TESTCON: D (NO,,YES,%OVLY) COLUMN 1 BLANK */                         04440002
*/* D (YES,ENDCDRTN,NO,READPCH2:R) END OF STEP CARD */                  04470002
*/*%OVLY: D (NO,%A1,YES,) OVERLAY CONTINUATION SWITCH SET */            04500002
*/* P (,OVLYRTN1) TURN OFF OVERLAY CONTINUATION SWITCH */               04530002
*/*%A1: S CHKSPACE: POINT TO NEXT OPERAND */                            04560002
*/* D (YES,%NMECHK,NO,) OVERLAY NOGO SWITCH SET */                      04590002
*/* D (NO,,YES,OVLYRTN) OVERLAY CARD */                                 04620002
*/* D (YES,,NO,NOOVLY) OVERLAY SWITCH SET */                            04650002
*/* D (NO,,YES,OVLYRTN1) INSERT CARD */                                 04680002
*/*NOOVLY: D (NO,,YES,INCLDRTN) INCLUDE CARD */                         04710002
*/*%NMECHK: D (NO,,YES,NAMERTN) NAME CARD */                            04740002
*/* D (NO,,YES,READPCH2) OVERLAY NOGO SWITCH SET */                     04770002
*/* D (NO,,YES,CHGRPRTN) CHANGE CARD */                                 04800002
*/* D (NO,,YES,CHGRPRTN) REPLACE CARD */                                04830002
*/* D (NO,READPCH2,YES,) JCL COPIED SWITCH SET */                       04860002
*/* D (NO,,YES,ENTRYRTN) ALIAS CARD */                                  04890002
*/* D (NO,,YES,ENTRYRTN) PAGE CARD */                                   04920002
*/* D (NO,,YES,ENTRYRTN) ORDER CARD */                                  04950002
*/* D (NO,,YES,ENTRYRTN) SETCODE CARD */                                04960002
*/* D (NO,READPCH2,YES,ENTRYRTN) ENTRY CARD */                          04980002
*/*INCLDRTN: S CHKSPACE: POINT TO NEXT OPERAND */                       05010002
*/*BLLIBETC: P BLANK 'INCLUDE' BUFFER */                                05040002
*/*STORELIB: P MOVE NEXT CHARACTER FROM CARD TO 'INCLUDE' BUFFER */     05070002
*/* D (NO,,YES,REGPOS:R) CHARACTER = '(' */                             05100002
*/* P (,STORELIB) INCREMENT CARD AND BUFFER POINTERS */                 05130002
*/*REGPOS: P INCREMENT CARD AND BUFFER POINTERS */                      05160002
*/*CHECKMOD: P BLANK MODULE NAME BUFFER */                              05190002
*/*STOREMOD: P MOVE 1 CHARACTER FROM CARD TO MODULE NAME BUFFER */      05220002
*/* P INCREMENT MODULE NAME BUFFER AND CARD POINTERS */                 05250002
*/* D (NO,,YES,COMPMOD1) NEXT CHARACTER = ')' */                        05280002
*/* D (NO,STOREMOD,YES,COMPMOD1) NEXT CHARACTER = ',' */                05310002
*/*COMPMOD1: D (YES,,NO,COMPMOD5) DDNAME FOR DSS (PARMLIB) */           05320002
*/* D (YES,,NO,COMPMOD5) DSS PARMLIB MEMBER IQAORDER */                 05330002
*/* P SET DSS SWITCH */                                                 05332002
*/*COMPMOD5: D (YES,,NO,COMPMOD) OVERLAY SWITCH SET */                  05340002
*/* P OBTAIN CURRENT OVERLAY TABLE ADDRESS */                           05370002
*/* D (NO,,YES,%AMA012) OVERLAY TABLE OVERFLOW */                       05400002
*/* P BLANK NEXT RECORD IN OVERLAY TABLE */                             05430002
*/* P MOVE 'INSERT' INTO TABLE */                                       05460002
*/* P MOVE MODULE NAME FROM MODULE NAME BUFFER TO OVERLAY TABLE */      05490002
*/* P INCREMENT CURRENT OVERLAY TABLE ADDRESS */                        05520002
*/*COMPMOD: D (NO,,YES,MODFOUND) MODULE NAME BUFFER = MODULE NAME TABLE 05550002
*/* */                                                                  05580002
*/* P INCREMENT MODULE NAME TABLE POINTER TO NEXT NAME */               05610002
*/* D (NO,COMPMOD,YES,MODNOTBL) END OF MODULE NAME TABLE FOUND*/        05640002
*/*%AMA012: P TURN OFF OVERLAY SWITCH */                                05670002
*/* P (,READPCH2) SET OVERLAY NOGO SWITCH */                            05700002
*/*MODNOTBL: P SET CHANGE/REPLACE SWITCH */                             05730002
*/* D (YES,,NO,%NEXT) NEXT CHARACTER ON CARD = ',' */                   05760002
*/* P (,CHECKMOD:RB) INCREMENT CARD POINTER PASSED ',' */               05790002
*/*%NEXT: D (YES,,NO,READPCH2) NEXT 2 CHARACTERS ON CARD = '),' */      05820002
*/* P (,BLLIBETC) INCREMENT POINTER PASSED '),' */                      05850002
*/*MODFOUND: P SAVE ADDRESS OF NAME IN MODULE NAME TABLE AFTER MATCH */ 05880002
*/* D (NO,COPYJCL,YES,) JCL COPIED SWITCH SET */                        05910002
*/* D (YES,,NO,RBTILLNM) ENTRY/ALIAS SWITCH SET */                      05940002
*/*CHEKCHRP: D (NO,CRTEINCL,YES,COPYCHRP) CHANGE/ REPLACE SWITCH SET */ 05970002
*/*COPYJCL: P SAVE MATCHED INCLUDE CARD */                              06000002
*/*RBJCL: S POINTRTN: POINT TO BEGINNING OF THIS SET OF JCL */          06030002
*/*JCLCOPY5: S READPCH: READ RECORD FROM STAGE 1 TAPE */                06060002
*/* D (YES,,NO,CHKPARMS) COPY ASSEMBLY JCL SWITCH SET */                06070002
*/*JCLCOPY: S COPYRTN: WRITE CARD AMAGE */                              06090002
*/* D (YES,JCLCOPY4,NO,) COPY ASSEMBLY JCL SWITCH SET */                06100002
*/* S READPCH: READ NEXT RECORD FROM STAGE 1 TAPE */                    06120002
*/* D (NO,CHKBLANK,YES,) EXEC CONTINUATION SWITCH SET */                06170002
*/* P TURN OFF CONTINUATION SWITCH */                                   06180002
*/* S (,PARMCHK) CHKSPACE: POINT TO NEXT KEYWORD */                     06190002
*/*JCLCOPY4: D (NO,JCLCOPY5,YES,PGMRTN1) /* CARD */                     06200002
*/*CHKBLANK: D (YES,,NO,JCLCOPY) FIRST CHARACTER IN INPUT AREA BLANK */ 06210002
*/* P SET JCL COPIED SWITCH */                                          06240002
*/* D (YES,,NO,RFTILLNM) ENTRY/ALIAS SWITCH SET */                      06270002
*/* D (NO,,YES,CHEKCHRP) REACHED MATCHED INCLUDE CARD */                06300002
*/*ALENRTRN: S CHKSPACE: POINT TO NEXT OPERAND */                       06330002
*/* D (NO,,YES,%COPRF) ALIAS CARD */                                    06360002
*/* D (NO,,YES,%COPRF) ENTRY CARD */                                    06390002
*/* D (NO,,YES,%COPRF) PAGE CARD */                                     06420002
*/* D (NO,,YES,%COPRF) ORDER CARD */                                    06450002
*/* D (NO,,YES,%COPRF) SETCODE CARD */                                  06460002
*/* D (NO,,YES,RFCOPY) OVERLAY SWITCH SET */                            06480002
*/* D (YES,,NO,RFCOPY) INSERT STATEMENT */                              06510002
*/*%COPRF: S COPYRTN: COPY CARD */                                      06540002
*/*RFCOPY: S READPCH: READ NEXT RECORD FROM STAGE 1 TAPE */             06570002
*/* D (YES,CHEKCHRP,NO,ALENRTRN) REACHED MATCHED INCLUDE CARD */        06600002
*/*RBTILLNM: P SAVE MATCHED INCLUDE CARD */                             06690002
*/* S (,RFCOPY) POINTRTN: POINT TO SAVED NAME CARD */                   06720002
*/*RFTILLNM: S READPCH: READ NEXT RECORD FROM STAGE 1 TAPE */           06750002
*/* D (NO,RFTILLNM,YES,RFCOPY) REACHED SAVED NAME CARD */               06780002
*/*CRTEINCL: P INCREMENT TABLE POINTER BY 8 */                          06810002
*/* P INDICATE MATCH IN MODULE NAME TABLE */                            06840002
*/* P OBTAIN IDENTIFY INDEX FROM MODULE NAME TABLE FOR MATCHED NAME */  06870002
*/* D (NO,,YES,%MON) IDENTIFY INDEX = 0 */                              06900002
*/* P INDICATE MATCH FOR CORRESPONDING SET OF IDENTIFY CARDS */         06930002
*/*%MON: P MOVE MODULE NAME INTO OUTPUT INCLUDE BUFFER */               06960002
*/*INCCOMP: D (NO,,YES,CLOSEINC) CHARACTER MOVED BLANK */               06990002
*/* P (,INCCOMP) INCREMENT POINTER TO MODULE NAME IN OUTPUT AREA TO     07020002
*/*NEXT CHARACTER */                                                    07050002
*/*CLOSEINC: P MOVE RIGHT PARENTHESIS TO OUTPUT AREA */                 07080002
*/* D (YES,,NO,WRTINCL) APPLICATION FUNCTION REQUESTED */               07110002
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 2 */                            07140002
*/* L AMAPTF01 SPOOL OBJECT MODULE TO OUTF */                           07170002
*/*WRTINCL: S AMAWRITE: WRITE INCLUDE CARD */                           07200002
*/*COMWBLNK: P REPLACE ) WITH BLANK IN BUFFER */                        07230002
*/* P (,MODNOTBL) SET ENTRY/ALIAS SWITCH */                             07260002
*/*OVLYRTN: D (YES,,NO,OVLYRTN1) FIRST OVERLAY CARD */                  07290002
*/* P PICK UP ADDRESS OF BEGINNING OF OVERLAY TABLE */                  07320002
*/*OVLYRTN1: D (YES,,NO,OVLYRTN2) CARD TO BE CONTINUED */               07350002
*/* P SET OVERLAY CONTINUATION SWITCH */                                07380002
*/*OVLYRTN2: D (NO,,YES,%AMA012) OVERLAY TABLE OVERFLOW */              07410002
*/* P MOVE OVERLAY/ INSERT STATEMENT TO OVERLAY TABLE */                07440002
*/* P INCREMENT CURRENT TABLE POSITION */                               07470002
*/* P (,READPCH2) SET OVERLAY SWITCH */                                 07500002
*/*CHGRPRTN: D (NO,,YES,SETUP) CHANGE/ REPLACE SWITCH SET */            07530002
*/*CHGRPGO: P MOVE STATEMENT TO CHANGE/ REPLACE BUFFER */               07560002
*/* P (,READPCH2) INCREMENT POINTER TO BUFFER */                        07590002
*/*SETUP: P TURN OFF CHANGE/ REPLACE SWITCH */                          07620002
*/* P (,CHGRPGO) GET ADDRESS OF CHANGE/ REPLACE BUFFER */               07650002
*/*ENTRYRTN: D (YES,,NO,READPCH2) ENTRY/ ALIAS SWITCH SET */            07680002
*/* S (,READPCH2) COPYRTN: COPY STATEMENT TO OUTPUT */                  07710002
*/*NAMERTN: D (NO,,YES,CRTSYSLM) OVERLAY NOGO SWITCH SET */             07740002
*/* D (NO,STORENAM:R,YES,) JCL COPIED SWITCH SET */                     07770002
*/* S NOTERTN: NOTE TAPE POSITION OF LAST BLOCK READ */                 07800002
*/* D (YES,,NO,STORENAM) ENTRY/ ALIAS SWITCH SET */                     07830002
*/*CRTSYSLM: P INCREMENT CARD POINTER PAST NAME KEYWORD */              07860002
*/* S CHKSPACE: POINT TO NEXT OPERAND */                                07890002
*/*NAMELOOP: P MOVE 1 CHARACTER OF NAME TO INCLUDE SYSLMOD BUFFER */    07920002
*/* P INCREMENT CARD AND BUFFER POINTERS */                             07950002
*/* D (NO,,YES,NMELOOP1:R) NEXT CHARACTER  ( */                         07980002
*/* D (YES,,NO,NAMELOOP) NEXT CHARACTER A BLANK */                      08010002
*/*NMELOOP1: D (NO,,YES,%AMA12W) OVERLAY NOGO SWITCH SET */             08040002
*/* P MOVE ) TO BUFFER */                                               08070002
*/* D (NO,,YES,IDENEXIT) APPLICATION FUNCTION REQUESTED */              08100002
*/* P BLANK OUTPUT BUFFER */                                            08130002
*/*LOOP: D (YES,IDENEXIT,NO,) END OF IDENTIFY TABLE REACHED */          08160002
*/* D (NO,,YES,IDFOUND) MATCH INDICATED FOR THIS SET */                 08190002
*/* P (,LOOP) INCREMENT POINTER TO NEXT ENTRY IN IDENTIFY TABLE */      08220002
*/*%AMA12W: P MOVE LOAD MODULE NAME TO MESSAGE AMA012I */               08250002
*/* I (,RET16) WRITE MESSAGE AMA012I */                                 08280002
*/*IDFOUND: P TURN OFF MATCH INDICATOR */                               08310002
*/* P MOVE IDENTIFY CARD TO OUTPUT BUFFER */                            08340002
*/* S AMAWRITE: WRITE IDENTIFY CARD */                                  08370002
*/* P INCREMENT POINTER TO NEXT ENTRY IN IDENTIFY TABLE */              08400002
*/* D (YES,LOOP,NO,IDFOUND) NEW SET OF IDENTIFY CARDS */                08430002
*/*IDENEXIT: S AMAWRITE: WRITE INCLUDE SYSLMOD CARD */                  08460002
*/* P BLANK INCLUDE SYSLMOD BUFFER */                                   08490002
*/* D (YES,,NO,COPYNAME) OVERLAY SWITCH SET */                          08520002
*/*OVLYLOOP: I WRITE CARD FROM OVERLAY TABLE */                         08550002
*/* P POINT TO NEXT RECORD IN OVERLAY TABLE */                          08580002
*/* D (NO,OVLYLOOP,YES,) END OF OVERLAY TABLE */                        08610002
*/* P TURN OFF OVERLAY SWITCH */                                        08640002
*/*COPYNAME: P TURN ON NAME SWITCH */                                   08670002
*/* S CHKSPACE: POINT TO NEXT OPERAND */                                08700002
*/* P SKIP PASSED NAME KEYWORD */                                       08730002
*/* S CHKSPACE: POINT TO NEXT OPERAND */                                08760002
*/* P BLANK MODULE NAME BUFFER */                                       08790002
*/*COPYLOOP: D (NO,,YES,CPYNAME1:R) CHARACTER = ( */                    08820002
*/* D (NO,,YES,NEEDTHER) CHARACTER A BLANK */                           08850002
*/* P MOVE CHARACTER TO MODULE NAME BUFFER */                           08880002
*/* P (,COPYLOOP) INCREMENT CARD POINTER TO NEXT CHARACTER */           08910002
*/*NEEDTHER: P MOVE (R) TO NAME CARD */                                 08940002
*/*CPYNAME1: P OBTAIN SSI INFORMATION FROM SSI TABLE FOR MATCHED MODULE 08970002
*/* NAME */                                                             09000002
*/* P MOVE SSI INFORMATION TO OUTPUT BUFFER */                          09030002
*/* D (YES,,NO,%WRSSI) SSI INFORMATION BLANK */                         09060002
*/* P SET SSI TO 0 */                                                   09090002
*/*%WRSSI: S AMAWRITE: WRITE SETSSI CARD */                             09120002
*/* S COPYRTN: COPY CARD */                                             09150002
*/* D (YES,,NO,SLSHCHK:R) APPLICATION FUNCTION REQUESTED */             09180002
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 3 */                            09210002
*/* L AMAPTF01 INVOKE LINKAGE EDITOR */                                 09240002
*/*SLSHCHK: D (NO,STORENAM,YES,ENDCRTN1) SLASH SWITCH SET */            09270002
*/*STORENAM: P STORE NAME CARD */                                       09300002
*/* P TURN OFF OVERLAY SWITCH */                                        09330002
*/* P TURN OFF DSS SWITCH */                                            09340002
*/* P TURN OFF ENTRY/ALIAS SWITCH */                                    09360002
*/*ENDCDRTN: D (NO,,YES,COPYNAM1) NAME SWITCH SET */                    09390002
*/* D (NO,,YES,COPYNAM1) SYSLNAME BUFFER BLANK */                       09420002
*/* P SAVE END OF STEP CARD */                                          09450002
*/* P BLANK PCHF INPUT BUFFER */                                        09480002
*/* P MOVE NAME KEYWORD AND NAME FROM SYSLNAME TO PCHF BUFFER */        09510002
*/* P (,CRTSYSLM) SET SLASH SWITCH */                                   09540002
*/*ENDCRTN1: P TURN OFF SLASH SWITCH */                                 09570002
*/* P RESTORE END OF STEP CARD */                                       09600002
*/*COPYNAM1: P BLANK SYSLNAME BUFFER */                                 09630002
*/* P TURN OFF NAME SWITCH */                                           09660002
*/* D (NO,READPCH1,YES,) JCL COPIED SWITCH SET */                       09690002
*/* S (,READPCH1) COPYRTN: COPY CARD */                                 09720002
*/* E CHECK PARAMETER ROUTINE */                                        09770002
*/*CHKPARMS: P LOAD ADDRESS OF PCHAREA */                               09820002
*/* S CHKSPACE: POINT TO 'EXEC' */                                      09870002
*/* S CHKSPACE: POINT TO PROC NAME */                                   09920002
*/* D (YES,,NO,%A2) LINK EDIT STEP ('LINKS') */                         09970002
*/* P (,PARMCHK) INCREMENT PAST 'LINKS,' */                             10020002
*/*%A2: P INCREMENT PAST 'ASMS,' */                                     10070002
*/*PARMCHK: D (YES,MODKEY,NO,) MOD= KEYWORD */                          10120002
*/* D (YES,NKEY,NO,) N= KEYWORD */                                      10170002
*/* D (YES,PKEY,NO,) P1= KEYWORD */                                     10220002
*/* D (YES,PKEY,NO,) P2= KEYWORD */                                     10270002
*/* %I1: P INCREMENT 1 CHAR */                                          10320002
*/*COMMACHK: D (YES,%ICOMMA,NO,) IS THIS A COMMA */                     10370002
*/* D (NO,%I1,YES,CHKBLANK) IS THIS A BLANK */                          10420002
*/*%ICOMMA: P INCREMENT PAST COMMA */                                   10430002
*/* D (YES,,NO,PARMCHK) IS THIS A BLANK */                              10470002
*/*%CONT1: P (,CHKBLANK) TURN ON EXEC CONTINUATION SWITCH */            10520002
*/*MODKEY: P INCREMENT PAST 'MOD=' */                                   10580002
*/* P SAVE POINTER TO DATA SET NAME */                                  10630002
*/* P ZERO COUNTER */                                                   10680002
*/* P OBTAIN ADDR OF NAME BUFFER */                                     10730002
*/*%COMMA1: D (NO,,YES,%BLANK4) IS THIS A COMMA */                      10780002
*/* D (NO,,YES,%BLANK1) IS THIS A BLANK */                              10830002
*/* P MOVE 1 CHAR TO NAME BUFFER */                                     10882002
*/* P INCREMENT TO NEXT CHARACTER */                                    10882402
*/* P INCREMENT PTR TO NAME BUFFER */                                   10884002
*/* P (,%COMMA1) INCREMENT COUNTER TO REFLECT # OF CHAR READ */         10886002
*/*%BLANK4: D (YES,COMMACHK,NO,%ASMCHK) IS COUNTER ZERO */              10886402
*/*%BLANK1: D (YES,CHKBLANK,NO,) COUNTER EQUAL ZERO */                  10888002
*/*%ASMCHK: D (YES,ASMCHK1,NO,) IN ASSEMBLY STEP */                     10888402
*/* P MOVE '(R)' TO NAME BUFFER */                                      10888802
*/* D (YES,COMMACHK,NO,) APPLICATION FUNCTION */                        10889202
*/*MODCARD: P SAVE CURRENT CARD ADDRESS */                              10889602
*/* P SUBTRACT # OF CHAR MOVED */                                       10889702
*/*%BLANK2: D (YES,COMMACHK,NO,) PRESENT LOCATION BLANK */              10889802
*/* P MOVE NEXT CHARACTER IN PLACE */                                   10889902
*/* P INCREMENT PRESENT CARD ADDRESS */                                 10899902
*/* P (,%BLANK2) INCREMENT POSITION TO MOVE CHAR BY 1 */                10909902
*/*ASMCHK1: P GET ADDRESS OF MODULE NAME TABLE */                       10911902
*/*ASMCMPM: D (YES,ASMFOUND,NO,) MATCH WITH MODULE NAME */              10912302
*/* P POINT TO NEXT ENTRY IN TABLE */                                   10912702
*/* D (NO,ASMCMPM,YES,) END OF MODULE NAME TABLE */                     10913102
*/*PGMRTN1: P (,READCD) RESET ASSEMBLY INDICATORS */                    10913802
*/*ASMFOUND: P INDICATE ASSEMBLY MATCH */                               10914202
*/* P (,RBJCL) INCICATE ASSEMBLY JCL TO BE WRITTEN */                   10914602
*/*PKEY: P INCREMENT PAST P1=' OR P2=' */                               10924602
*/* P MAKE CHAR A BLANK */                                              10926602
*/* P (,COMMACHK) INCREMENT PAST  ' */                                  10928602
*/*NKEY: D (YES,COMMACHK,NO,) APPLICATION FUNCTION */                   10928902
*/* P INCREMENT PAST 'N=' */                                            10930902
*/* D (YES,%I2,NO,) IS VALUE 'SYS1,' */                                 10932902
*/* D (YES,%I2,NO,) IS VALUE 'SYS1 ' */                                 10933302
*/* P CLEAR MEF BUFFER */                                               10942602
*/* P MOVE // TO BUFFER */                                              10944602
*/* P (,%ENDSYS) MOVE 'N=SYS1' TO BUFFER */                             10946602
*/*%I2: P (,COMMACHK) INCREMENT PAST 'SYS1' */                          10951402
*/*%ENDSYS: P BLANK TEMPORARY BUFFER */                                 10951902
*/* P MOVE CARD IMAGE TO TEMPORARY BUFFER */                            10952002
*/* P BLANK CARD BUFFER */                                              10961602
*/*%FOUNDN: D (YES,%N1,NO,) 'N=' FOUND IN TEMPORARY BUFFER */           10963602
*/* P MOVE 1 CHAR BACK TO CARD BUFFER */                                10965602
*/* P (,%FOUNDN) INCREMENT CARD AND TEMP BUFFER POINTERS */             10967602
*/*%N1: P INCREMENT BEFORE 'N=' IN TEMP BUFFER */                       10969602
*/* D (NO,%I7,YES,) CHARACTER BEFORE 'N=' A BLANK */                    10970002
*/* P INCREMENT PTR TO TEMPORARY BUFFER */                              10970402
*/* P SET DSN FIRST ON CARD SWITCH */                                   10970802
*/*%I7: P (,SKIPDSN1) INCREMENT TEMPORARY BUFFER PTR PAST 'N=' */       10971202
*/* E COPY CHANGE/REPLACE CARD ROUTINE */                               10971602
*/*COPYCHRP: P INDICATE END OF CHANGE/REPLACE TABLE */                  10981202
*/*CHRPCOPY: P MOVE NEXT CHANGE/REPLACE CARD TO OUTPUT BUFFER */        10990802
*/* I WRITE CHANGE/REPLACE CARD */                                      11000402
*/* P POINT TO NEXT CHANGE/REPLACE CARD */                              11010002
*/* D (YES,,NO,CHRPCOPY) REACHED END OF CHANGE/ REPLACE TABLE */        11040002
*/* P TURN OFF CHANGE/REPLACE SWITCH */                                 11070002
*/* R RETURN TO CRTEINCL */                                             11100002
*/*PART2: P TURN OFF JCL COPIED SWITCH */                               11130002
*/* S NOTERTN: NOTE TAPE POSITION OF LAST BLOCK READ */                 11160002
*/*P2READ: P SET NON-JCL ADDRESS TO P2TEST */                           11190002
*/* P SET BLANKSW TO A BLANK */                                         11220002
*/* S PGMRTN: DETERMINE THE PROGRAM INVOKED ON STAGE I TAPE */          11250002
*/*P2TEST: D (NO,,YES,P2STAT) COLUMN 1 BLANK */                         11280002
*/* D (YES,,NO,P2READ:R) END OF STEP CARD */                            11310002
*/* D (YES,,NO,READPCH1) JCL COPIED SWITCH SET */                       11340002
*/* S (,READPCH1) COPYRTN: COPY CARD */                                 11370002
*/*P2STAT: S CHKSPACE: POINT TO NEXT OPERAND */                         11400002
*/* D (NO,,YES,P2SELECT:R) IS THIS CHARACTER AN 'S' */                  11430002
*/* D (NO,P2READ:R,YES,P2COPYRT) IS THIS CHARACTER A 'C' */             11460002
*/*P2SELECT: S CHKSPACE: POINT TO NEXT OPERAND */                       11490002
*/* D (YES,P2MBRFND,NO,) 'MEMBER=' KEYWORD */                           11520002
*/* P (,%P2COMPA) SKIP PASSED 'M=' KEYWORD */                           11550002
*/*P2MBRFND: P INCREMENT PASSED 'MEMBER' KEYWORD */                     11580002
*/*%P2COMPA: D (YES,,NO,%P2MOD) IS THIS CHARACTER AN '=' */             11610002
*/* P INCREMENT PASSED '=' */                                           11640002
*/*%P2MOD: D (YES,,NO,P2MODINI) IS THIS CHARACTER A '(' */              11670002
*/* P INCREMENT PASSED '(' */                                           11700002
*/* P SET BLANK SWITCH TO NON-BLANK */                                  11730002
*/*P2MODINI: P BLANK OUTPUT AREA */                                     11760002
*/* P BLANK MODULE NAME BUFFER */                                       11790002
*/* P (,P2CHKSVC:R) OBTAIN MODULE NAME TABLE POINTER */                 11820002
*/*P2CHKSVC: D (NO,,YES,P2SVCS) NEXT CHARACTER A'(' */                  11850002
*/* S P2STORP: STORE MODULE NAME */                                     11880002
*/*P2COMPN: D (NO,,YES,P2FOUNDN) MODULE NAME BUFFER = MODULE NAME TABLE 11910002
*/* */                                                                  11940002
*/* P INCREMENT MODULE NAME TABLE POINTER TO NEXT NAME */               11970002
*/* D (NO,P2COMPN,YES,P2NOTFN) END OF MODULE NAME TABLE REACHED */      12000002
*/*P2SVCS: P MOVE '(' TO OUTPUT AREA */                                 12030002
*/* P INCREMENT CARD AND OUTPUT POINTERS */                             12060002
*/* S P2STOR:STORE MODULE NAME */                                       12090002
*/*P2COMPS: D (NO,,YES,P2FOUNDS) MODULE NAME BUFFER = MODULE NAME TABLE 12120002
*/**/                                                                   12150002
*/* P INCREMENT MODULE NAME TABLE POINTER TO NEXT NAME */               12180002
*/* D (NO,P2COMPS,YES,P2NOTFS) END OF MODULE NAME TABLE REACHED */      12210002
*/*P2NOTFN: D (YES,,NO,P2READ) ANY MORE NAMES ON SELECT CARD */         12240002
*/* P (,P2MODINI) INCREMENT POINTER PASSED ',' */                       12270002
*/*P2NOTFS: P INCREMENT CARD POINTER */                                 12300002
*/* D (YES,,NO,P2NOTFS) NEXT CHARACTER = ')' */                         12330002
*/* P (,P2NOTFN) INCREMENT PASSED ')' */                                12360002
*/*P2FOUNDN: D (YES,,NO,P2FOUNDC) APPLICATION FUNCTION REQUESTED */     12390002
*/* P SAVE POINTER TO NAME IN MODULE NAME TABLE */                      12420002
*/* P SAVE POINTER TO NAME TO BUILD NAME CARD */                        12450002
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 5 */                            12480002
*/* L AMAPTF01  SPOOL OBJ MODULE AND DO LINK EDIT */                    12510002
*/*P2FOUNDC: S P2COPY: COPY CARD */                                     12540002
*/* P MOVE ',,R))' AFTER NAME IN OUTPUT BUFFER */                       12570002
*/*P2FOUND: S (,P2NOTFN) P2WRTE: WRITE CARD */                          12600002
*/*P2FOUND2: P (,P2FOUND1) INCREMENT PAST ',R' ON SELECT CARD */        12630002
*/*P2FOUND1: P MOVE ',R)' TO OUTPUT BUFFER */                           12660002
*/* P INCREMENT PASSED ',R)' */                                         12690002
*/* P MOVE ')' TO OUTPUT BUFFER */                                      12720002
*/* P (,P2FOUND) INCREMENT CARD POINTER TO COMMA BETWEEN PARENTHESES */ 12750002
*/*P2FOWNDS: S (,P2FCOMP) P2COPY: COPY JCL FOR SVC MATCH */             12780002
*/*P2FOUNDS: D (YES,,NO,P2FOWNDS) APPLICATION FUNCTION REQUESTED */     12810002
*/* P SAVE POINTER TO NEW NAME ON SELECT CARD */                        12840002
*/* P SAVE POINTER TO NAME IN MODULE NAME TABLE TO GET SSI */           12870002
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 5 */                            12900002
*/* L AMAPTF01 SPOOL OBJ MODULE AND DO LINK EDIT */                     12930002
*/*P2FCOMP: D (NO,,YES,P2FOUND1) NEXT CHARACTER A ')' */                12960002
*/* D (NO,,YES,P2FOUND2) REPLACE OPTION ALREADY ON CARD */              12990002
*/* P MOVE CHARACTER TO OUTPUT AREA */                                  13020002
*/* P (,P2FCOMP:R) INCREMENT CARD AND OUTPUT POINTERS */                13050002
*/*P2COPYRT: D (YES,,NO,P2STCOPY) JCL COPIED SWITCH SET */              13080002
*/* S NOTERTN: NOTE TAPE POSITION OF LAST BLOCK READ */                 13110002
*/*P2STCOPY: P SAVE COPY STATEMENT */                                   13140002
*/* P (,P2READ:R) TURN OFF COPY CARD SWITCH */                          13170002
*/*P2STORP: E PART 2 MODULE NAME STORE ROUTINE */                       13200002
*/* P MOVE '(' TO OUTPUT BUFFER */                                      13230002
*/* P INCREMENT POINTER TO OUTPUT BUFFER */                             13260002
*/*P2STOR: P MOVE CHARACTER FROM CARD TO OUTPUT BUFFER */               13290002
*/* P MOVE CHARACTER FROM CARD TO MODULE NAME BUFFER */                 13320002
*/* P INCREMENT CARD,MODULE NAME AND OUTPUT BUFFER POINTERS */          13350002
*/* D (NO,,YES,P2STOREX) NEXT CHARACTER A ',' */                        13380002
*/* D (NO,,YES,P2STOREX) NEXT CHARACTER A ')' */                        13410002
*/* D (YES,,NO,P2STOR) NEXT CHARACTER A '*' */                          13440002
*/*P2STOREX: R RETURN TO CALLER */                                      13470002
*/*P2WRTE: E PART 2 WRITE ROUTINE */                                    13500002
*/* P INCREMENT MODULE NAME TABLE POINTER PASSED NAME */                13530002
*/* P INDICATE NAME MATCHED IN MODULE NAME TABLE */                     13560002
*/* D (NO,,YES,BMPCTR) APPLICATION FUNCTION REQUESTED */                13590002
*/* S AMAWRITE: WRITE SELECT STATEMENT */                               13620002
*/*BMPCTR: P SET COPY CARD SWITCH */                                    13650002
*/* R RETURN TO CALLER */                                               13680002
*/*P2COPY: E PART 2 COPY ROUTINE */                                     13710002
*/* D (NO,P2CJCL,YES,) JCL COPIED SWITCH SET */                         13740002
*/* D (NO,P2RB,YES,%P2RET) COPY CARD SWITCH SET */                      13770002
*/*%P2RET: R RETURN TO CALLER */                                        13800002
*/*P2CJCL: P SET JCL COPIED SWITCH */                                   13830002
*/* P SAVE SELECT STATEMENT */                                          13860002
*/* S POINTRTN: GO BACK TO BEGINNING OF JCL */                          13890002
*/*P2CJCL1: S READPCH: READ NEXT RECORD FROM STAGE I TAPE */            13920002
*/* D (YES,,NO,P2RF) JCL STATEMENT */                                   13950002
*/*JCLCHECK: D (NO,,YES,DSNCHECK) FOUND DSNAME QUALIFIER ON CARD */     13980002
*/* P INCREMENT CARD POINTER */                                         14010002
*/* D (YES,,NO,JCLCHECK) SCANNED THROUGH COLUMN 64 */                   14040002
*/*DOWRITE: D (NO,,YES,R23REST:R) APPLICATION FUNCTION REQUESTED */     14070002
*/* S (,R23REST:R) AMAWRITE: WRITE STATEMENT */                         14100002
*/*R23REST: D (YES,,NO,P2CJCL1:R) MULTI PROGRAMMING ENVIRONMENT FEATURE 14130002
*/* USED */                                                             14160002
*/* S AMAWRITE: WRITE CONINTUED JCL STATEMNT */                         14190002
*/* P (,P2CJCL1:R) TURN OFF MEF INDICATOR */                            14220002
*/*DSNCHECK: D (NO,,YES,DOWRITE) IS DATA SET QUALIFIER 'SYS1.' */       14250002
*/* P POSITION CARD POINTER AFTER QUALIFIER */                          14280002
*/* S (,DOWRITE:R) SYSGMEF: RESTRUCTURE DD CARD FOR MEF */              14310002
*/*P2RF: D (NO,,YES,P2CCOPY) REACHED SAVED COPY STATEMENT */            14340002
*/* D (NO,P2CJCL1,YES,P2COPYEX) REACHED SAVED SELECT STATEMENT */       14370002
*/*P2COPYEX: P (,%P2RET) TURN OFF DUPLICATE COPY CARD SWITCH */         14400002
*/*P2RB: P SAVE SELECT STATEMENT */                                     14430002
*/* S (,P2CJCL1) POINTRTN:  POINT TO LAST BLOCK NOTED */                14460002
*/*P2CCOPY: D (NO,,YES,P2CJCL1:R) DUPLICATE COPY SW SET */              14490002
*/* P SET DUPLICATE COPY CARD SWITCH */                                 14520002
*/* D (NO,,YES,P2CJCL1) APPLICATION FUNCTION REQUESTED */               14550002
*/* S (,P2CJCL1:R) AMAWRITE: WRITE CARD */                              14580002
*/*EOJRTN: P OBTAIN MODULE NAME TABLE ADDRESS */                        14970002
*/* P INDICATE MESSAGE HEAD NOT WRITTEN */                              15000002
*/*EOJMLOOP: D (NO,,YES,FILCLOSE) REACHED END OF MODULE NAME TABLE */   15030002
*/* P INCREMENT TABLE POINTER PASSED MODULE NAME */                     15060002
*/* D (YES,ASMSG,NO,) ASSEMBLY MATCH ONLY */                            15070002
*/* D (YES,,NO,MSGNOMOD) MATCH FOUND FOR THIS NAME */                   15090002
*/* P (,EOJMLOOP) INCREMENT TABLE POINTER PASSED MATCH INDICATOR */     15120002
*/*ASMSG: D (YES,%NOCHG,N0,) RETURN CODE MORE THAN 4 */                 15130002
*/* P SET RETURN CODE TO 4 */                                           15140002
*/*%NOCHG: P MOVE MSG AMA015I TO BUFFER */                              15142002
*/* P (,MSGRTNC) RESET HEADING WRITTEN INDICATOR */                     15144002
*/*MSGNOMOD: D (YES,,NO,MSGHEAD) MESSAGE HEADING WRITTEN FOR AMA000I */ 15150002
*/*MSGRTNC: P PICK UP NAME IN MODULE NAME TABLE */                      15180002
*/* P MOVE NAME TO OUTPUT BUFFER */                                     15210002
*/* I WRITE NAME UNDER HEADING */                                       15240002
*/* P (,EOJMLOOP) INCREMENT TABLE POINTER TO NEXT NAME */               15270002
*/*MSGHEAD: D (YES,RETNOCHG,NO,) RETURN CODE MORE THAN 4 */             15300002
*/* P SET RETURN CODE TO 4 */                                           15330002
*/*RETNOCHG: I WRITE AMA000I-NO MATCH HEADING */                        15360002
*/* P (,MSGRTNC) INDICATE MESSAGE HEADING WRITTEN */                    15390002
*/*%AMA001: I (,RET16) WRITE MODULE NAME TABLE OVERFLOW MESSAGE         15420002
*/*AMA001I */                                                           15450002
*/*COPYRTN: E COPY ROUTINE */                                           15480002
*/* D (YES,,NO,COPYRTN1) APPLICATION FUNCTION REQUESTED */              15510002
*/* D (NO,,YES,COPYRTN1) COLUMN 1 BLANK */                              15540002
*/* P SET AMAPTF01 ROUTINE INDICATOR TO 6 */                            15570002
*/* L AMAPTF01  CHECK CARD FOR LINKAGE PARAMETERS */                    15600002
*/*%COPRET: R RETURN TO CALLER */                                       15630002
*/*COPYRTN1: S AMAWRITE: WRITE CARD */                                  15660002
*/* D (YES,,NO,%COPRET:R) MEF SWITCH SET */                             15690002
*/* S (,%COPRET:R) AMAWRITE: WRITE CONTINUATION CARD */                 15720002
*/*AMAWRITE: E COMMON WRITE ROUTINE */                                  15750002
*/* I WRITE CARD FROMM BUFFER ADDRESS PASSED */                         15780002
*/* R RETURN TO CALLER */                                               15810002
*/*PGMRTN: E SEARCH STAGE I TAPE */                                     15840002
*/*READCD: S READPCH: READ NEXT RECORD FROM STAGE I TAPE */             15870002
*/* D (YES,,NO,READOUT) JCL CARD */                                     15900002
*/* S CHKSPACE: POINT TO NEXT OPERAND */                                15930002
*/* D (YES,,NO,READCD) EXEC STATEMENT */                                15960002
*/* S CHKSPACE: POINT TO NEXT OPERAND */                                15990002
*/* D (NO,,YES,PART2:R) PGM = IEBCOPY */                                16020002
*/* D (NO,,YES,EXECRTN) PROC = LINKS */                                 16080002
*/* D (NO,,YES,STG1MSG) PGM = IEHMOVE */                                16110002
*/* D (YES,READCD:R,NO,) APPLICATION FUNCTION REQUESTED */              16120002
*/* D (NO,READCD:R,YES,) PROC = ASMS */                                 16130002
*/*ASMRTN: S NOTERTN: NOTE POSITION OF ASSEMBLY EXEC CARD */            16132002
*/*ASMCHK: P (,CHKPARMS) INDICATE ASSEMBLY STEP SEARCH */               16134002
*/*STG1MSG: I (,RET16) WRITE MESSAGE AMA004I */                         16140002
*/*READOUT: R GO TO NON-JCL ADDRESS PASSED */                           16170002
*/*SYSGMEF: E MULTI PROGRAMMING ENVIRONMENT RTN */                      16200002
*/* D (NO,,YES,%SYSGRET) APPLICATION FUNCTION REQUESTED */              16230002
*/* D (NO,,YES,%SYSGRET) IS DATA SET QUALIFIER 'SYS1.' */               16260002
*/* P BLANK MEF BUFFER */                                               16290002
*/* P MOVE '//' TO MEF BUFFER */                                        16320002
*/* P MOVE 'DSN=' TO MEF BUFFER */                                      16350002
*/* P MOVE 'SYS1.' TO MEF BUFFER */                                     16380002
*/*PERLOOP: P INCREMENT CARD POINTER */                                 16410002
*/* D (YES,,NO,PERLOOP) FOUND '.' ON CARD */                            16440002
*/* P INCREMENT CARD POINTER PASSED '.' */                              16470002
*/*MOVEDSN: P MOVE CHARACTER OF DSNAME TO MEF BUFFER */                 16500002
*/* P INCREMENT CARD AND BUFFER POINTERS */                             16530002
*/* D (NO,,YES,CHKCONT) NEXT CHARACTER A ',' */                         16560002
*/* D (NO,MOVEDSN,YES,) NEXT CHARACTER A BLANK */                       16590002
*/*CHKCONT: P BLANK TEMPORARY BUFFER */                                 16620002
*/* P MOVE CARD AMAGE TO TEMPORARY BUFFER */                            16650002
*/* P BLANK CARD BUFFER */                                              16680002
*/*DSNCHK: D (NO,,YES,SKIPDSN) 'DSN' FOUND IN TEMPORARY                 16710002
*/*BUFFER */                                                            16740002
*/* P MOVE 1 CHARACTER BACK TO CARD BUFFER */                           16770002
*/* P (,DSNCHK:R) INCREMENT CARD AND TEMPROARY BUFFER POINTERS */       16800002
*/*SKIPDSN: P POSTION TEMPROARY BUFFER POINTER BEFORE 'DSN' */          16830002
*/* D (YES,,NO,PASSDSN) CHARACTER BEFORE 'DSN' A BLANK */               16860002
*/* P INCREMENT POINTER TO TEMPROARY BUFFER */                          16890002
*/* P SET DSN FIRST ON CARD SWITCH */                                   16920002
*/*PASSDSN: P INCREMENT TEMPORARY BUFFER POINTER PASSED 'DSN=' */       16950002
*/*SKIPDSN1: D (NO,,YES,MOVEREST) NEXT CHARACTER A ',' */               16980002
*/* D (NO,,YES,MOVEDONE) NEXT CHARACTER A BLANK */                      17010002
*/* P (,SKIPDSN1) INCREMENT TEMPORARY BUFFER POINTER */                 17040002
*/*MOVEREST: P INCREMENT TEMPROARY BUFFER POINTER PASSED ',' */         17070002
*/* D (NO,,YES,MOVEDONE:R) NEXT CHARACTER A BLANK */                    17100002
*/*MOVREST1: P MOVE CHARACTER FROM TEMPORARY BUFFER BACK TO CARD        17130002
*/*BUFFER */                                                            17160002
*/* P INCREMENT CARD AND TEMPORARY BUFFER POINTERS */                   17190002
*/* D (YES,LOC,NO,MOVREST1) NEXT CHARACTER A BLANK */                   17220002
*/*MOVEDONE: D (NO,,YES,DSNCONT) DSN FIRST ON CARD SWITCH SET */        17250002
*/*LOC: P TURN OFF DSN FIRST ON CARD SWITCH */                          17280002
*/* P SET POINTER TO PREVIOUS CHARACTER IN CARD BUFFER */               17310002
*/* D (NO,,YES,MOVECONT) IS THAT CHARACTER A ',' */                     17340002
*/* P INCREMENT POINTER */                                              17370002
*/* P MOVE ',' TO CARD BUFFER TO INDICATE CONTINUATION */               17400002
*/*MOVECONT: P MOVE 'X' TO COLUMN 72 TO INDICATE CONTINUATION */        17430002
*/* D (NO,MEF,YES,) IS CARD IN TEMP BUFFER CONTINUED */                 17460002
*/* P MOVE 'X' TO COLUMN 72 OF MEF BUFFER */                            17490002
*/* P MOVE ',' TO MEF BUFFER */                                         17520002
*/*MEF: P SET MEF SWITCH TO INDICATE MULTI PROGRAMMING ENVIRONMENT */   17550002
*/*%SYSGRET: R RETURN TO CALLER */                                      17580002
*/*DSNCONT: P MOVE MEF BUFFER TO CARD BUFFER */                         17610002
*/* P (,%SYSGRET) TURN OFF MEF SWITCH */                                17640002
*/*READPCH: E STAGE I READ ROUTINE */                                   17670002
*/* D (NO,,YES,POINTRD) HAS POINT JUST BEEN DONE */                     17700002
*/* D (YES,,NO,MOVTOPCH) USED ALL LOGICAL RECORDS IN THIS BLOCK */      17730002
*/*POINTRD: I READ A BLOCK FROM STAGE I TAPE TO INPUT BUFFER */         17760002
*/* P GET IOB ADDRESS */                                                17790002
*/* P LOAD RESIDUAL COUNT FROM CSW IN IOB */                            17820002
*/* P GET LOGICAL RECORD LENGTH FROM PCHF DSB */                        17850002
*/* P GET BLOCK SIZE FROM PCHF DCB */                                   17880002
*/* P SUBTRACT RESIDUAL COUNT FROM BLOCKSIZE TO GIVE # BYTES IN BUFFER  17910002
*/**/                                                                   17940002
*/* P DIVIDE BY LOGICAL RECORD LENGTH TO GIVE # LOGICAL RECORDS READ */ 17970002
*/* P SAVE NUMBER OF LOGICAL RECORDS READ */                            18000002
*/* D (NO,,YES,MOVTOPCH:R) HAS A POINT BEEN DONE */                     18030002
*/* P (,MOVTOPCH:R) SAVE NUMBER OF LOGICAL RECORDS REMAINING */         18060002
*/*MOVTOPCH: P LOAD NUMBER OF LOGICAL RECORDS LAST READ */              18090002
*/* P SUBTRACT NUMBER OF LOGICAL RECORDS REMAING */                     18120002
*/* P MULTIPLY DIFFERENCE BY LOGICAL RECORD LENGTH */                   18150002
*/* P ADD TO BUFFER ADDRESS */                                          18180002
*/* P MOVE ONE LOGINCAL RECORD LENGTH FROM BUFFER TO CARD BUFFER */     18210002
*/* P DECREMENT REMAINING COUNT */                                      18240002
*/* P TURN OFF POINT INDICATOR */                                       18270002
*/* R RETURN TO CALLER */                                               18300002
*/*NOTERTN: E NOTE ROUTINE */                                           18330002
*/* L NOTE POSITION OF LAST BLOCK READ FROM PCHF DD */                  18360002
*/* P SAVE BLOCK ADDRESS */                                             18390002
*/* P INCREMENT NUMBER OF RECORDS REMAINING BY 1 */                     18420002
*/* R RETURN TO CALLER */                                               18450002
*/*POINTRTN: E POINT ROUTINE */                                         18480002
*/* L POINT TO BLOCK ADDRESS SAVED BY NOTE */                           18510002
*/* P SET NUMBER REMAINING TO NUMBER IN BUFFER */                       18540002
*/* P TURN ON POINT INDICATOR */                                        18570002
*/* R RETURN TO CALLER */                                               18600002
*/*CHKSPACE: E OPERAND POSITIONING ROUTINE */                           18630002
*/* D (NO,,YES,CHKNOTSP) NEXT CHARACTER A BLANK */                      18660002
*/* P (,CHKSPACE) INCREMENT POINTER */                                  18690002
*/*CHKNOTSP: P INCREMENT POINTER */                                     18720002
*/* D (NO,,YES,CHKNOTSP) NEXT CHARACTER A BLANK */                      18750002
*/* R RETURN TO CALLER */                                               18780002
*/*SYNADEXT: E I/O ERROR ROUTINE */                                     18810002
*/* L OBTAIN ERROR INFORMATION */                                       18840002
*/* P MOVE INFORMATION TO OUTPUT BUFFER */                              18870002
*/* I WRITE MESSAGE AMA003I */                                          18900002
*/* R RETURN TO RET16 */                                                18930002
*/*AMAPTFLE: END */                                                     18960002
         EJECT                                                          18990002
*********************************************************************** 19020002
*                                                                     * 19050002
*            SET UP STANDARD LINKAGE AND ADDRESSABILITY               * 19080002
*            USING REGISTERS 11 AND 12 AS BASE REGISTERS.             * 19110002
*                                                                     * 19140002
*********************************************************************** 19170002
         SPACE                                                          19200002
         USING *,R12,R11                                                19230002
GO       STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS           19260002
         LR    R12,R15                 SET UP FIRST BASE REGISTER       19290002
         L     R11,BASEADR2            SET UP SECOND BASE REGISTER      19320002
         LA    R2,SCSAVE               GET SAVE AREA ADDRESS            19350002
         ST    R2,8(R13)               SET UP FORWARD AND               19380002
         ST    R13,4(R2)               BACKWARD SAVE AREA LINKAGE       19410002
         LR    R13,R2                  SET UP POINTER TO SAVE AREA      19440002
         USING SCSAVE,R13                                               19450002
         B     ADDRSET                 BRANCH AROUND DC                 19470002
BASEADR2 DC    A(GO+4096)              TO SET UP ADDRESSABILITY         19500002
         SPACE                                                          19530002
*********************************************************************** 19560002
*                                                                     * 19590002
*       PICK UP PARAMETER PASSED ON EXEC CARD.                        * 19620002
*       OPEN INPUT-OUTPUT FILES                                       * 19650002
*              INPUT   - MODULE NAMES,OBJECT MODULES,AND              * 19680002
*                        IDENTIFY CARDS                               * 19710002
*                      - STAGE1 OUTPUT FROM SYSGEN                    * 19740002
*              OUTPUT  - EXTRACTS OF SYSGEN STAGE1 OUTPUT             * 19770002
*                      - MESSAGES                                     * 19800002
*                                                                     * 19830002
*********************************************************************** 19860002
         SPACE                                                          19890002
ADDRSET  L     R2,0(R1)                PICK UP POINTER TO PARM          19920002
         ST    R2,PARMPTR              SAVE ADDRESS OF PARAMETER        19950002
         OPEN  (MODFDCB,,PCHFDCB,,OUTFDCB,(OUTPUT),MSGDCB,(OUTPUT))     19980002
         SPACE                                                          20010002
*********************************************************************** 20040002
*                                                                     * 20070002
*             TEST FOR SUCCESSFUL OPEN OF ALL DCBS                    * 20100002
*                                                                     * 20130002
*********************************************************************** 20160002
         SPACE                                                          20190002
         LA    RA,MSGDCB                                                20220002
         USING IHADCB,RA                                                20250002
         TM    DCBOFLGS,OPENBIT        MSG DCB OPEN SUCCESSFUL          20280002
         BZ    MSGWRITE                NO - WRITE ERROR MESSAGE         20310002
         LA    RA,MODFDCB                                               20340002
         TM    DCBOFLGS,OPENBIT        MODF DCB OPEN SUCCESSFUL         20370002
         BZ    MODFRITE                NO - WRITE ERROR MESSAGE         20400002
         LA    RA,PCHFDCB                                               20430002
         TM    DCBOFLGS,OPENBIT        PCHF DCB OPEN SUCCESSFUL         20460002
         BZ    PCHFRITE                NO - WRITE ERROR MESSAGE         20490002
         LA    RA,OUTFDCB                                               20520002
         TM    DCBOFLGS,OPENBIT        OUTF DCB OPEN SUCCESSFUL         20550002
         BZ    OUTFRITE                NO - WRITE ERROR MESSAGE         20580002
         SPACE                                                          20610002
*********************************************************************** 20640002
*                                                                     * 20670002
*                 CHECK IF ANY PARAMETER IS PRESENT.                  * 20700002
*                 IF PRESENT, INDICATE APPLICATION FUNCTION           * 20730002
*                 AND LOAD AMAPTF01 AND AMAPTF02.                     * 20760002
*                                                                     * 20790002
*********************************************************************** 20820002
         SPACE                                                          20850002
         L     R2,PARMPTR              GET POINTER TO PARAMETER LIST    20880002
         LH    R3,0(R2)                GET COUNT OF PARM LIST           20910002
         LTR   R3,R3                   IS PARM LENGTH ZERO              20940002
         BC    8,LODBLOK               YES - GENERATE FUNCTION          20970002
         OI    PARM,X'80'              INDICATE APPLICATION FUNCTION    21000002
         LOAD  EPLOC=LOADOVR           LOAD IEWSZOVR             A48079 21010002
         LOAD  EPLOC=LOAD01            LOAD AMAPTF01                    21030002
         ST    R0,PTF01                SAVE THE ENTRY POINT ADDRESS     21060002
         LOAD  EPLOC=LOAD02            LOAD AMAPTF02                    21090002
         ST    R0,PTF02                SAVE THE ENTRY POINT ADDRESS     21120002
         OI    BRPRMLST,SPOOLUT2       INDICATE AMAPTF01 TO SPOOL       21150002
*                                      MODF INPUT TO SYSUT2 WORK FILE   21180002
         EJECT                                                          21210002
*********************************************************************** 21240002
*                                                                     * 21270002
*        THIS ROUTINE GETS CORE FOR THE READ BUFFER BASED ON BLKSIZE  * 21300002
*                                                                     * 21330002
*********************************************************************** 21360002
         SPACE                                                          21390002
LODBLOK  LA    RA,PCHFDCB              GET PCHF DCB ADDRESS             21420002
         LH    R0,DCBBLKSI             OBTAIN BLKSIZE FROM PCHF DCB     21450002
         LTR   R0,R0                   IS BLKSIZE ZERO            M3991 21480002
         BNP   NOBLKSZ                 YES-BLKSIZE NOT SPECIFIED  M3991 21510002
         GETMAIN EC,LV=(0),A=BUFFADDR  GET CORE FOR READ BUFFER  A45397 21540002
         LTR   R15,R15                 GETMAIN SUCCESSFUL        A45397 21570002
         BNZ   AMA014W1                NO - WRITE ERROR MESSAGE SA55373 21600002
         SPACE                                                          21630002
*********************************************************************** 21660002
*                                                                     * 21690002
*        DETERMINE NUMBER OF LOGICAL RECORDS PER BUFFER               * 21720002
*                                                                     * 21750002
*********************************************************************** 21780002
         SPACE                                                          21810002
         LA    RA,PCHFDCB              GET PCHFDCB ADDRESS              21840002
         SR    R3,R3                   CLEAR REGISTERS FOR DIVIDE       21870002
         SR    R2,R2                                                    21900002
         SR    R1,R1                                                    21930002
         LH    R3,DCBBLKSI             OBTAIN THE BLKSIZE               21960002
         LH    R1,DCBLRECL             OBTAIN THE LOGICAL RECORD LENGTH 21990002
         DR    R2,R1                   DIVIDE THE BLKSIZE BY LRECL AND  22020002
         ST    R3,RECCNT               SAVE NUMBER OF LOGICAL RECORDS   22050002
         SPACE                                                          22080002
*********************************************************************** 22110002
*                                                                     * 22140002
*        WRITE JOB CARD IF GENERATE FUNCTION IS BEING PERFORMED       * 22170002
*                                                                     * 22200002
*********************************************************************** 22230002
         SPACE                                                          22260002
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   22290002
         BO    GETBUFS                 YES - DO NOT WRITE JOB CARD      22320002
         LA    R3,JOBCARD              GET ADDRESS OF OUTPUT BUFFER     22350002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              22380002
         SPACE                                                          22410002
*********************************************************************** 22440002
*                                                                     * 22470002
*                 OBTAIN STORAGE FOR ALL TABLES                       * 22500002
*                                                                     * 22530002
*********************************************************************** 22560002
         SPACE                                                          22590002
GETBUFS  GETMAIN EC,LV=30424,A=OVLYREC DO GETMAIN FOR BUFFERS    A45397 22620002
         LTR   R15,R15                 GETMAIN SUCCESSFUL        A45397 22650002
         BNZ   AMA014W                 NO - WRITE ERROR MESSAGE  A45397 22680002
         L     R2,OVLYREC              GET BEGINNING ADDR OF BUFFER     22710002
         A     R2,AOVLYREC             ADD LENGTH OF OVERLAY TABLE      22740002
         ST    R2,OVLYEND              SAVE END OF OVERLAY TABLE S21995 22770002
         LA    R2,1(R2)                END OF TABLE BYTE         S21995 22800002
         ST    R2,IDENTBL              STORE BEGINNING ADDRESS   S21016 22830002
*                                      OF IDENTIFY TABLE         S21016 22860002
         MVI   0(R2),X'FF'             SET END OF TABLE MARK     S21016 22890002
         A     R2,IDENTSZ              ADD LENGTH,IDENTIFY TABLE S21016 22920002
         ST    R2,IDENTEND             SAVE END-IDENTIFY TABLE   S21016 22950002
         LA    R2,1(R2)                END OF TABLE BYTE         S21016 22980002
         ST    R2,MODTBL               STORE BEGINNING ADDRESS          23010002
*                                      OF MODULE NAME TABLE             23040002
         MVI   0(R2),X'FF'             SET TABLE EMPTY SWITCH     M4002 23070002
         SPACE                                                          23100002
*********************************************************************** 23130002
*            THIS SWITCH IS RESET BY THE FIRST CHARACTER              * 23160002
*            PLACED IN THE MODULE NAME TABLE                          * 23190002
*********************************************************************** 23220002
         SPACE                                                          23250002
         A     R2,AMODTBL              ADD LENGTH OF MODULE NAME TABLE  23280002
         ST    R2,TABLEND              SAVE END,MODULE NAME TBL  S21995 23310002
         LA    R2,1(R2)                END OF TABLE BYTE         S21995 23340002
         ST    R2,SSITABLE             STORE BEGINNING ADDRESS          23370002
*                                      OF SSI TABLE                     23400002
         A     R2,ASSITBL              ADD LENGTH OF SSI TABLE          23430002
         ST    R2,CHGRPSTR             STORE BEGINNING ADDRESS          23460002
*                                      OF CHANGE/REPLACE TABLE          23490002
         L     RA,MODTBL               OBTAIN ADDR OF MODULE NAME TABLE 23520002
         L     R7,SSITABLE             OBTAIN ADDR OF SSI TABLE         23550002
         L     R9,OVLYREC              GET POINTER TO BUFFER            23580002
         ST    R9,OVTABADR             SAVE BEGINNING OF OVERLAY TABLE  23610002
         LA    R4,1                    INITIALIZE IDENTIFY INDEX S21016 23640002
         L     R6,IDENTBL              GET ADDRESS,IDENTIFY TBL  S21016 23670002
         EJECT                                                          23700002
*********************************************************************** 23730002
*                                                                     * 23760002
*         READ CONTROL CARDS,OBJECT MODULES AND IDENTIFY CARDS.       * 23790002
*           STORE MODULE NAMES IN MODULE NAME TABLE,                  * 23820002
*           SSI INFORMATION IN SSI TABLE,                             * 23850002
*           IDENTIFY CARDS IN IDENTIFY TABLE(GENERATE FUNCTION ONLY), * 23880002
*           AND SPOOL ENTIRE INPUT STREAM (APPLICATION FUNCTION ONLY).* 23910002
*                                                                     * 23940002
*********************************************************************** 23970002
         SPACE                                                          24000002
READMOD  GET   MODFDCB,MODAREA         READ CONTROL CARDS FROM MODF     24030002
         LA    R3,MODAREA              OBTAIN THE INPUT AREA ADDRESS    24060002
         CLI   0(R3),SPACE             IS COLUMN 1 BLANK                24090002
         BNE   MOVEMOD2                NO-CHECK FOR VALID CONTROL CARD  24120002
*                                                                S21995 24150002
         SPACE                                                          24180002
*********************************************************************** 24210002
*                                                                     * 24240002
*                 CHECK FOR IDENTIFY CARDS -                          * 24270002
*              VERIFY PROPER ORDER OF CARDS,                          * 24300002
*              MOVE CARDS TO IDENTIFY TABLE AND                       * 24330002
*              STORE IDENTIFY INDEX (GENERATE FUNCTION ONLY).         * 24360002
*                                                                     * 24390002
*********************************************************************** 24420002
         SPACE                                                          24450002
         TM    IDENTCON,X'80'          IDENTIFY CONT. SWITCH SET S21016 24480002
         BO    MOVECON                 YES - HANDLE CONTINUATION S21016 24510002
         TM    IDENTCON,X'08'          CONTINUATION (AMAPTF01)    M0861 24540002
         BO    SPOOLCD                 YES-SPOOL CARD(WORK FILE)  M0861 24570002
         BAL   R2,CHKSPACE             POINT TO FIRST OPERAND    S21016 24600002
         CLC   0(8,R3),IDENTIFY        IDENTIFY CARD             S21016 24630002
         BNE   AMA008WR                NO - WRITE ERROR MESSAGE  S21016 24660002
         TM    FIRSTNEW,X'80'          FIRST NAME CARD READ YET  S21016 24690002
         BNO   AMA008WR                NO - WRITE ERROR MESSAGE  S21016 24720002
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21016 24750002
         BO    MOVEMOD2                YES-DON'T PUT CARD IN TBL S21016 24780002
         TM    FIRSTNEW,X'08'          NEW SET OF CARDS                 24810002
         BNO   MOVECON                 NO - DO NOT STORE IDENTIFY INDEX 24840002
         BCTR  RA,0                    POINT TO INDEX BYTE IN MODTBL    24870002
         STC   R4,0(RA)                STORE IDENTIFY INDEX             24900002
         LA    RA,1(RA)                INCREMENT MODTBL POINTER         24930002
         NI    FIRSTNEW,X'F0'          TURN OFF NEW SET SWITCH          24960002
         OI    MODAREA,X'80'           NEW SET OF IDENTIFY CARDS        24990002
MOVECON  LA    R4,1(R4)                INCREMENT IDENTIFY INDEX         25020002
         C     R6,IDENTEND             IDENTIFY TABLE OVERFLOW          25050002
         BNL   AMA011WR                YES - WRITE ERROR MESSAGE        25080002
         NI    IDENTCON,X'00'          RESET IDENTIFY CONTINUATION SW   25110002
         MVC   0(80,R6),MODAREA        MOVE IDENTIFY CARD TO TBL S21016 25140002
         LA    R6,80(R6)               NEXT TABLE POSITION       S21016 25170002
         MVI   0(R6),X'FF'             SET END OF TABLE MARK     S21016 25200002
         CLI   MODAREA+71,C' '         CARD TO BE CONTINUED      S21016 25230002
         BE    READMOD                 NO - READ NEXT CARD       S21016 25260002
         OI    IDENTCON,X'80'          SET CONTINUATION SWITCH   S21016 25290002
         B     READMOD                 READ NEXT CARD            S21016 25320002
         SPACE                                                          25350002
*********************************************************************** 25380002
*                                                                     * 25410002
*                 PROCESS CONTROL CARDS                               * 25440002
*                                                                     * 25470002
*********************************************************************** 25500002
         SPACE                                                          25530002
MOVEMOD2 EQU   *                                                        25560002
         CLI   0(R3),X'02'             PART OF OBJECT MODULE     S21995 25590002
         BNE   TURNNAM                 NO - HANDLE NAME CARD     S21995 25620002
         TM    FIRSTNEW,X'80'          FIRST NAME CARD READ      S21995 25650002
         BNO   AMA008WR                NO - WRITE ERROR MESSAGE  S21995 25680002
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21995 25710002
         BNO   AMA008WR                NO - WRITE ERROR MESSAGE  S21995 25740002
TURNNAM  OI    FIRSTNEW,X'88'          SET NEW SET,FIRST CARD SW S21995 25770002
         TM    IDENTCON,X'88'          IDENTIFY CONT. SWITCH SET  M0861 25800002
         BM    AMA008WR                YES - WRITE ERROR MESSAGE S21016 25830002
SPOOLCD  TM    PARM,X'80'              APPLICATION FUNCT REQUEST  M0861 25860002
         BNO   NMEMOV                  NO - DO NOT SPOOL THE CARD       25890002
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST    25920002
         L     R15,PTF01               GET AMAPTF01 ROUTINE ADDRESS     25950002
         BALR  R14,R15                 SPOOL CARD TO SYSUT2 WORK FILE   25980002
         CLI   MODAREA,X'02'           IS CARD PART OF OBJECT DECK      26010002
         BE    READMOD                 NO - CHECK FOR IDENTIFY   S21016 26040002
         CLI   MODAREA,C' '            IS CARD AN IDENTIFY CARD  S21016 26070002
         BE    READMOD                 YES - READ NEXT CARD      S21016 26100002
         SPACE                                                          26130002
*********************************************************************** 26160002
*                                                                     * 26190002
*              FILL MODULE NAME AND SSI TABLES                        * 26220002
*                                                                     * 26250002
*********************************************************************** 26280002
         SPACE                                                          26310002
NMEMOV   C     RA,TABLEND              MODULE NAME TBL OVERFLOW  S21995 26340002
         BNL   MESSAGE                 YES-FLUSH INPUT           S21995 26370002
         MVC   0(8,RA),0(R3)           MOVE MODULE NAME TO TABLE A46339 26400002
         MVI   8(RA),SPACE             BLANK STATUS FIELD        A46339 26430002
         MVI   9(RA),X'00'             ZERO IDENTIFY INDEX BYTE  S21016 26460002
         MVC   0(8,R7),9(R3)           MOVE SSI NUMBER INTO SSI TABLE   26490002
         CLC   0(8,R7),BLANK           IS SSI BLANK              S21995 26520002
         BNE   BUMPRA                  NO - CONTINUE             S21995 26550002
         MVC   0(8,R7),ZEROES          REPLACE SSI WITH ZERO     S21995 26580002
BUMPRA   LA    RA,10(RA)               BUMP MODULE NAME TBL PTR  S21016 26610002
         LA    R7,8(R7)                UPDATE SSI TABLE POINTER         26640002
         B     READMOD                 NO-READ NEXT CARD                26670002
         EJECT                                                          26700002
*********************************************************************** 26730002
*                                                                     * 26760002
*                 END OF FILE ROUTINE :                               * 26790002
*        - CHECK FOR EMPTY MODULE NAME TABLE                          * 26820002
*        - CHECK FOR MODULE NAME TABLE OVERFLOW                       * 26850002
*                                                                     * 26880002
*********************************************************************** 26910002
         SPACE                                                          26940002
ENDMOD   EQU   *                                                        26970002
         L     R3,MODTBL               GET MODULE NAME TABLE ADDR M4002 27000002
         CLI   0(R3),X'FF'             TABLE EMPTY SWITCH SET     M4002 27030002
         BE    FILCLOSE                YES,TABLE EMPTY-RETURN     M4002 27060002
         TM    SWITCH1,X'80'           IS OVERFLOW SWITCH SET           27090002
         BO    MESSAGE1                YES,PUT OUT MSG                  27120002
         NI    BRPRMLST,TURNOFF        TURN OFF SPOOL ROUTINE INDICATOR 27150002
*                                                                 M4000 27180002
         MVC   LIBETCB(69),LIBETC      BLANK INCLUDE BUFFER             27210002
         MVC   LMODETCB(60),LMODETC    BLANK INCLUDE SYSLMOD BUFFER     27240002
         MVI   0(RA),SPACE             INDICATE LAST MODULE NAME S21995 27270002
         SPACE                                                          27300002
*********************************************************************** 27330002
*                                                                     * 27360002
*       READ INPUT FILE AND SCAN FOR FIRST EXEC STATEMENT             * 27390002
*              DETERMINE PROPER ROUTINE                               * 27420002
*                                                                     * 27450002
*********************************************************************** 27480002
         SPACE                                                          27510002
READPCH1 LA    R9,PGMRTN               SET NON JCL RETURN ADDR   S21995 27540002
         B     PGMRTN                  SEARCH STAGE I TAPE       S21995 27570002
         EJECT                                                          27600002
*********************************************************************** 27630002
*                                                                     * 27660002
*        PART I     CHECK FOR MODULE MATCHES                          * 27690002
*                   IN IEWL STEP OF STAGE 1 OUTPUT                    * 27720002
*                                                                     * 27750002
*                  - TURN OFF JCL COPIED SWITCH (R8)                  * 27780002
*                  - TURN OFF CHANGE-REPLACE SWITCH (R4)              * 27810002
*                  - SET ENTRY-ALIAS SWITCH (R6)                      * 27840002
*                  - NOTE POSITIONING OF INPUT-FILE                   * 27870002
*                                                                     * 27900002
*********************************************************************** 27930002
         SPACE                                                          27960002
EXECRTN  LA    R4,0                    TURN OFF CHANGE-REPL SW   S21995 27990002
         LA    R6,4                    SET ENTRY-ALIAS SWITCH    S21995 28020002
         LA    R8,0                    TURN OFF JCL COPIED SW    S21995 28050002
         XC    OVLYREC(4),OVLYREC      TURN OFF OVERLAY SWITCH          28080002
         BAL   R14,NOTERTN             NOTE THE LAST BLOCK READ         28110002
         SPACE                                                          28140002
*********************************************************************** 28170002
*                                                                     * 28200002
*                 READ PCHF INPUT FILE AND SCAN FOR                   * 28230002
*                 LINKAGE EDITOR CONTROL CARDS OR                     * 28260002
*                 /* CARD. IF NEITHER, DETERMINE                      * 28290002
*                 TYPE OF PROGRAM INVOKED ON EXEC CARD.               * 28320002
*                                                                     * 28350002
*********************************************************************** 28380002
         SPACE                                                          28410002
READPCH2 BAL   R9,PGMRTN               SET NON JCL RETURN ADDR   S21995 28440002
*                                      SEARCH STAGE I TAPE       S21995 28470002
TESTCON  CLI   0(R3),SPACE             IS COLUMN 1 BLANK         S21995 28500002
         BE    STATEX                  YES-CONTROL CARD                 28530002
         CLC   0(2,R3),ENDCARD         IS THIS END OF STEP              28560002
         BNE   READPCH2                NO-READ NEXT STATEMENT           28590002
         B     ENDCDRTN                YES-PREPARE TO TERMINATE         28620002
STATEX   EQU   *                                                        28650002
         TM    CONTSW2,X'80'           IS THERE AN OVERLAY/INSERT       28680002
*                                      CONTINUATION TO BE PROCESSED     28710002
         BNO   STATEX1                 NO-CHECK TYPE OF CONTROL CARD    28740002
         MVI   CONTSW2,X'00'           YES-TURN OFF THE CONTINUATION    28770002
*                                      SWITCH                           28800002
         B     OVLYRTN1                PROCESS THE CONTINUATION BY      28830002
*                                      MOVING IT TO THE OVERLAY TABLE   28860002
STATEX1  EQU   *                                                        28870002
         TM    CONTSW2,CHRCONT       CHANGE-REPLACE CONTINUATION Y01983 28880002
         BNO   STATEX2                 NO - CONTINUE             Y01983 28884002
         MVI   CONTSW2,TURNOFF         TURN OFF SWITCH           Y01983 28886002
         B     CHGRPRTN                GO COPY CARD              Y01983 28888002
         EJECT                                                          28890002
*********************************************************************** 28920002
*                                                                     * 28950002
*                 DETERMINE TYPE OF LINKAGE EDITOR                    * 28980002
*                 CONTROL CARD AND PROCESS ACCORDINGLY.               * 29010002
*                                                                     * 29040002
*********************************************************************** 29070002
         SPACE                                                          29100002
STATEX2  EQU   *                                                        29130002
         BAL   R2,CHKSPACE             POINT TO THE FIRST LETTER OF THE 29160002
*                                      LINKAGE EDITOR CONTROL STATEMENT 29190002
         TM    OVNOGO,X'08'            OVERLAY NO GO SWITCH SET  S21995 29220002
         BO    NMENOGO                 YES - FIND MODULE NAME    S21995 29250002
         CLC   0(2,R3),OVCARD          IS THIS AN OVERLAY STMT   S21995 29280002
         BE    OVLYRTN                 YES,PROCESS THE OVERLAY CARD     29310002
         TM    OVLYREC,X'80'           IS THE OVERLAY SWITCH SET        29340002
         BNO   NOOVLY                  NO-IGNORE ALL INSERT STATEMENTS  29370002
         CLC   0(3,R3),CHARINS         IS THIS AN INSERT STATEMENT      29400002
         BE    OVLYRTN1                YES-PROCESS THE INSERT STATEMENT 29430002
NOOVLY   EQU   *                                                        29460002
         CLC   0(3,R3),CHARINC         IS THIS AN INCLUDE STATEMENT     29490002
         BE    INCLDRTN                YES - HANDLE INCLUDE STATEMENT   29520002
NMENOGO  CLI   0(R3),LETTERN           IS THIS A NAME STATEMENT  S21995 29550002
         BE    NAMERTN                 YES - HANDLE NAME STATEMENT      29580002
         TM    OVNOGO,X'08'            OVERLAY NO GO SWITCH SET  S21995 29610002
         BO    READPCH2                YES - SEARCH FOR NAME     S21995 29640002
         CLI   0(R3),LETERC            IS THIS A CHANGE STMT     S21995 29670002
         BE    CHGRPRTN                YES - HANDLE CHANGE STATEMENT    29700002
         CLI   0(R3),LETTERR           IS THIS A REPLACE STMT    S21995 29730002
         BE    CHGRPRTN                YES - HANDLE REPLACE STATEMENT   29760002
         B     INCLUDBR(R8)            JCL COPIED ALREADY               29790002
INCLUDBR B     READPCH2                NO - NO MATCH IN INCLUDE         29820002
*                                      STATEMENT PREVIOUSLY FOUND.      29850002
*                                      CONTINUE IF JCL ALREADY COPIED   29880002
         CLI   0(R3),LETTERA           IS THIS AN ALIAS STMT     S21995 29910002
         BE    ENTRYRTN                YES - HANDLE ALIAS STATEMENT     29940002
         CLI   0(R3),LETTERE           IS THIS AN ENTRY STMT     S21995 29970002
         BE    ENTRYRTN                YES - HANDLE ENTRY STATEMENT     30000002
         CLC   0(4,R3),PAGECD          IS THIS A PAGE STMT       X01983 30030002
         BE    ENTRYRTN                YES - HANDLE PAGE STMT    X01983 30060002
         CLC   0(5,R3),ORDERCD         IS THIS AN ORDER STMT     X01983 30090002
         BE    ENTRYRTN                YES - HANDLE ORDER STMT   X01983 30120002
         CLC   0(7,R3),APFCD           IS THIS A SETCODE STMT    Y01048 30130002
         BE    ENTRYRTN                YES- HANDLE SETCODE STMT  Y01048 30140002
         B     READPCH2                READ NEXT RECORD                 30150002
         EJECT                                                          30180002
*********************************************************************** 30210002
*                                                                     * 30240002
*    THE FOLLOWING CODE PROCESSES OVERLAY STATEMENTS,                 * 30270002
*    INITIALIZING THE FIRST TIME SWITCH(OVLYREC).  INSERT             * 30300002
*    STATEMENTS ARE PROCESSED AT THE SECOND ENTRY (OVLYRTN1) WITH     * 30330002
*    BOTH STATEMENTS MOVED TO THE OVERLAY TABLE                       * 30360002
*                                                                     * 30390002
*********************************************************************** 30420002
         SPACE                                                          30450002
OVLYRTN  EQU   *                                                        30480002
         TM    OVLYREC,X'80'           IS OVERLAY SWITCH SET            30510002
         BO    OVLYRTN1                YES-CONTINUE PROCESSING          30540002
         L     R9,OVTABADR             OBTAIN BEGINNING OF OVERLAY TBL  30570002
         ST    R9,OVLYREC                                               30600002
OVLYRTN1 EQU   *                                                        30630002
         L     R9,OVLYREC              OBTAIN PTR TO NEXT POS    S21995 30660002
         CLI   PCHAREA+71,SPACE        IS THE OVERLAY/INSERT     S21995 30690002
*                                      STATEMENT CONTINUED       S21995 30720002
         BE    OVLYRTN2                NO-CONTINUE PROCESSING           30750002
         OI    CONTSW2,X'80'           SET CONTINUATION SWTIITCH        30780002
OVLYRTN2 EQU   *                                                        30810002
         C     R9,OVLYEND              OVERLAY TABLE OVERFLOW    S21995 30840002
         BNE   PCHOVLY                 NO - CONTINUE PROCESSING  S21995 30870002
SETNOGO  MVI   OVNOGO,X'08'            SET OVERLAY NO GO SWITCH         30900002
         B     READPCH2                SEARCH FOR MODULE NAME           30930002
PCHOVLY  MVC   0(80,R9),PCHAREA        MOVE OVLY/INSERT CARD TO THE     30960002
*                                      OVERLAY TABLE                    30990002
         LA    R9,80(R9)               POINT TO NEXT POSITION           31020002
         ST    R9,OVLYREC              SAVE FOR THE NEXT INPUT CARD     31050002
         MVI   OVLYREC,X'80'           TURN ON THE OVERLAY SWITCH       31080002
         MVI   OVLYEND,X'80'           HIGH ORDER BIT,END ADDR   S21995 31110002
         B     READPCH2                READ NEXT INPUT CARD             31140002
         EJECT                                                          31170002
*********************************************************************** 31200002
*                                                                     * 31230002
*       CHANGE-REPLACE ROUTINE                                        * 31260002
*              STORE ANY CONSECUTIVE CHANGE AND/OR REPLACE STATMENTS  * 31290002
*              INTO CHANGE-REPLACE TABLE (R5)                         * 31320002
*              SET CHANGE-REPLACE SWITCH (R4 TO 4)                    * 31350002
*                                                                     * 31380002
*********************************************************************** 31410002
         SPACE                                                          31440002
CHGRPRTN B     CHANGBR(R4)             IS CHANGE-REPLACE SWITCH SET     31470002
CHANGBR  B     SETUP                   NO-SET UP ADDRESS         S21995 31500002
CHGRPGO  MVC   0(80,R5),PCHAREA        MOVE CARD TO CHANGE-REPLACE TBL  31530002
         LA    R5,80(R5)               POINT TO NEXT POSITION IN TABLE  31560002
         CLI   PCHAREA+71,SPACE        CONTINUATION EXPECTED     Y01983 31570002
         BE    READPCH2                NO - CONTINUE             Y01983 31580002
         OI    CONTSW2,CHRCONT         TURN ON CHANGE-REPLACE SW Y01983 31582002
         B     READPCH2                READ NEXT CARD                   31590002
SETUP    LA    R4,4                    SET CHANGE-REPLACE SWITCH S21995 31620002
         L     R5,CHGRPSTR             GET ADDR OF CHANGE-REPLACE TABLE 31650002
         B     CHGRPGO                 GO TO MOVE CARD TO TABLE         31680002
         SPACE                                                          31710002
*********************************************************************** 31740002
*                                                                     * 31770002
*       ENTRY-ALIAS-PAGE-ORDER ROUTINE                          X01983* 31800002
*                 COPY ANY ENTRY,ALIAS,PAGE AND/OR ORDER        X01983* 31830002
*                 STATEMENTS IF A MATCH HAS BEEN FOUND AND      X01983* 31860002
*                 THE JCL HAS BEEN WRITTEN OUT ALREADY. THIS    X01983* 31890002
*                 WILL BE TRUE IF THE ENTRY-ALIAS SWITCH HAS    X01983* 31920002
*                 BEEN SET (R6 SET TO 4).                             * 31950002
*                                                                     * 31980002
*********************************************************************** 32010002
         SPACE                                                          32040002
ENTRYRTN B     READNEXT(R6)            IS ENTRY-ALIAS SWITCH SET        32070002
READNEXT B     READPCH2                NO-READ NEXT CARD                32100002
         BAL   R2,COPYRTN              YES-COPY CARD                    32130002
         B     READPCH2                READ NEXT CARD                   32160002
         EJECT                                                          32190002
*********************************************************************** 32220002
*                                                                     * 32250002
*       INCLUDE ROUTINE                                               * 32280002
*               - SAVE DDNAME IN INCLUDE BUFFER                       * 32310002
*               - SEARCH INCLUDE CARDS FOR MATCHES                    * 32340002
*                 WITH MODULE NAME TABLE                              * 32370002
*               - BUILD INSERT CARDS FOR OVERLAY STRUCTURES           * 32400002
*               - INDICATE MATCH WITH IDENTIFY CARDS (GENERATE)       * 32430002
*                                                                     * 32460002
*********************************************************************** 32490002
         SPACE                                                          32520002
INCLDRTN BAL   R2,CHKSPACE             POINT TO NEXT OPERAND     S21995 32550002
BLLIBETC MVI   LIBETC,C' '             BLANK INCLUDE BUFFER       M4756 32580002
         MVC   LIBETCB(69),LIBETC                                       32610002
         LA    R9,LIBETC               GET INCLUDE BUFFER ADDRESS       32640002
STORELIB MVC   0(1,R9),0(R3)           MOVE ONE CHARACTER OF DDNAME     32670002
         CLI   0(R3),PARNLEFT          BEGINING OF MODULE NAME   S21995 32700002
         BE    REGPOS                  YES-PROCESS MODULE NAME          32730002
         LA    R3,1(R3)                NO-INCREMENT CARD POINTER        32760002
         LA    R9,1(R9)                INCREMENT BUFFER POINTER         32790002
         B     STORELIB                CONTINUE SEARCH FOR MODULE NAME  32820002
REGPOS   LA    R3,1(R3)                INCREMENT CARD POINTER           32850002
         LA    R9,1(R9)                INCREMENT BUFFER POINTER         32880002
CHECKMOD MVC   MODSTORE(8),BLANK       BLANK MODULE NAME BUFFER         32910002
         ST    R5,R5SAVE                                                32940002
         L     RA,MODTBL               GET ADDR OF MODULE NAME TABLE    32970002
         LA    R5,MODSTORE             GET ADDR OF MODULE NAME BUFFER   33000002
         SPACE                                                          33030002
*********************************************************************** 33060002
*                                                                     * 33090002
*              MOVE MODULE NAME INTO MODULE NAME BUFFER               * 33120002
*                                                                     * 33150002
*********************************************************************** 33180002
         SPACE                                                          33210002
STOREMOD MVC   0(1,R5),0(R3)           MOVE CHARACTER TO BUFFER         33240002
         LA    R3,1(R3)                                                 33270002
         LA    R5,1(R5)                                                 33300002
         CLI   0(R3),PARNRITE          END OF MODULE NAME        S21995 33330002
         BE    COMPMOD1                YES-PROCESS NAME                 33360002
         CLI   0(R3),COMMA1            END OF MODULE NAME        S21995 33390002
         BNE   STOREMOD                NO-CONTINUE TO MOVE TO BUFFER    33420002
         SPACE                                                          33450002
*********************************************************************** 33480002
*                                                                     * 33510002
*         THE MODULE NAME IS CURRENTLY LOCATED IN MODSTORE            * 33540002
*                                                                     * 33570002
*********************************************************************** 33600002
         SPACE                                                          33630002
COMPMOD1 EQU   *                                                        33660002
         CLC   LIBETC(7),DSSDNME       DSS DDNAME PARMLIB        Y01045 33670002
         BNE   COMPMOD5                NO - CONTINUE PROCESSING  Y01045 33680002
         CLI   LIBETC+7,PARNLEFT       NEXT CHAR A LEFT PAREN    Y01045 33682002
         BNE   COMPMOD5                NO - CONTINUE PROCESSING  Y01045 33684002
         CLC   MODSTORE,DSSMEMB        DSSPARMLIB MEMBER         Y01045 33686002
         BNE   COMPMOD5                NO - CONTINUE PROCESSING  Y01045 33688002
         LTR   R8,R8                   COPY JCL SW SET           Y01045 33690402
         BZ    COMPMOD5                NO - CONTINUE             Y01045 33692402
OUTDSS   OI    COMSW,DSSSW             SET DSS SWITCH            Y01045 33694402
WRTDSS   STM   R2,R3,RITESAVE                                    Y01045 33716602
         LA    R3,PCHAREA              GET ADDRESS OF BUFFER     Y01045 33724902
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE       Y01045 33726902
         LM    R2,R3,RITESAVE                                    Y01045 33728902
BRCHBACK TM    SWITCH1,CPYDSS          COPY DSS SWITCH SET       Y01045 33730902
         BZ    READPCH2                NO - GO TO READPCH2       Y01045 33732902
         MVI   SWITCH1,TURNOFF         ZERO SWITCH               Y01045 33733302
         B     RFCOPY                  CONTINUE                  Y01045 33742602
COMPMOD5 TM    OVLYREC,X'80'           IS OVERLAY SWITCH SET            33752102
         BNO   COMPMOD2                NO-DO NOT BUILD INSERT CARD      33761402
         L     R5,OVLYREC              YES-GET OVERLAY TABLE POINTER    33770702
         C     R5,OVLYEND              OVERLAY TABLE OVERFLOW    S21995 33780002
         BNL   SETNOGO                 YES-SET OVLY NO GO SWITCH S21995 33810002
         MVI   0(R5),X'40'             BLANK THE OVERLAY TABLE POSITION 33840002
         MVC   1(79,R5),0(R5)                                           33870002
         MVC   0(8,R5),INSERTCD        PLACE 'INSERT' IN THE TABLE      33900002
         MVC   8(8,R5),MODSTORE        MOVE MODULE NAME INTO TABLE      33930002
         LA    R5,80(R5)               POINT TO NEXT AVAILABLE POSITION 33960002
         ST    R5,OVLYREC              SAVE ADDRESS OF NEXT POSITION    33990002
         MVI   OVLYREC,X'80'           SET OVERLAY SWITCH               34020002
COMPMOD2 EQU   *                                                        34050002
         L     R5,R5SAVE               RESTORE REGISTER FIVE            34080002
         SPACE                                                          34110002
*********************************************************************** 34140002
*                                                                     * 34170002
*    COMPARE NAME IN MODULE NAME BUFFER TO NAMES IN MODULE NAME TABLE * 34200002
*                   MATCH  -  GO TO MODFOUND                          * 34230002
*                NO MATCH  -  GO TO MODNOTBL                          * 34260002
*                                                                     * 34290002
*********************************************************************** 34320002
         SPACE                                                          34350002
COMPMOD  CLC   0(8,RA),MODSTORE        FOUND NAME IN MODULE NAME TABLE  34380002
         BE    MODFOUND                YES - HANDLE MATCH               34410002
         LA    RA,10(RA)               POINT TO NEXT NAME        S21016 34440002
         CLI   0(RA),SPACE             END OF MODULE NAME TABLE  S21995 34470002
         BE    MODNOTBL                YES - NAME NOT FOUND             34500002
         B     COMPMOD                 CONTINUE SEARCH                  34530002
         SPACE                                                          34560002
*********************************************************************** 34590002
*                                                                     * 34620002
*       MODULE NOT FOUND IN TABLE - CHECK IF THIS WAS LAST MODULE     * 34650002
*       ON INCLUDE CARD. IF YES, READ NEXT RECORD FROM STAGE 1 TAPE.  * 34680002
*       IF NO, GO TO CHECK NEXT MODULE NAME (CHECKMOD).               * 34710002
*                                                                     * 34740002
*********************************************************************** 34770002
         SPACE                                                          34800002
MODNOTBL LA    R4,0                    RESET CHANGE-REPLACE SW   S21995 34830002
         CLI   0(R3),COMMA1            LAST NAME ON INCLUDE CARD S21995 34860002
         BE    INCR                    NO - CHECK FOR THE REST    M4756 34890002
         CLI   1(R3),COMMA1            IS THERE ANOTHER DDNAME   S21995 34920002
*                                      ON THE INCLUDE CARD        M4756 34950002
         BNE   READPCH2                NO - READ ANOTHER CARD           34980002
         LA    R3,2(R3)                YES-INCREMENT PASSED THE '),'    35010002
         B     BLLIBETC                PROCESS THE NEXT DDNAME    M4756 35040002
INCR     LA    R3,1(R3)                                           M4756 35070002
         B     CHECKMOD                PROCESS NEXT MODULE NAME         35100002
         SPACE                                                          35130002
*********************************************************************** 35160002
*                                                                     * 35190002
*                MODULE FOUND IN TABLE                                * 35220002
*              - WRITE JCL IF NOT ALREADY WRITTEN (GENERATE)          * 35250002
*              - INDICATE MATCH IN IDENTIFY TABLE (GENERATE)          * 35280002
*              - CREATE INCLUDE CARD (GENERATE) OR                    * 35310002
*                SPOOL OBJECT MODULE TO OUTF (APPLICATION)            * 35340002
*              - WRITE CHANGE-REPLACE CARDS IF PRESENT                * 35370002
*                                                                     * 35400002
*********************************************************************** 35430002
         SPACE                                                          35460002
MODFOUND ST    RA,SSISAVE              SAVE LOCATION OF MATCHED NAME    35490002
         ST    R3,R3SAV2               SAVE R3                   Y01036 35500002
         B     JCLCOPY1(R8)            IS JCL COPIED SWITCH SET         35520002
JCLCOPY1 B     COPYJCL                 NO-COPY JCL (GENERATE FUNCTION)  35550002
         B     BYPASS(R6)              YES-IS ENTRY-ALIAS SWITCH SET    35580002
BYPASS   B     RBTILLNM                NO-READ BACK TILL PREVIOUS NAME  35610002
CHEKCHRP B     CPYCHANG(R4)            YES-IS CHANGE-REPLACE SWITCH SET 35640002
CPYCHANG B     CRTEINCL                NO-CREATE INCLUDE CARD OR SPOOL  35670002
         B     COPYCHRP                YES-COPY CHANGE-REPLACE CARDS    35700002
         EJECT                                                          35730002
*********************************************************************** 35760002
*                                                                     * 35790002
*        THIS ROUTINE COPIES THE PRECEEDING SET OF JCL-CARDS          * 35820002
*                                                                     * 35850002
*********************************************************************** 35880002
         SPACE                                                          35910002
COPYJCL  MVC   INCSTORE(80),PCHAREA    SAVE MATCHED INCLUDE CARD        35940002
         ST    R3,R3SAV2               SAVE R3                   Y01036 35950002
RBJCL    BAL   R14,POINTRTN            POINT TO BEGINNING OF STEP JCL   35970002
JCLCOPY5 BAL   R14,READPCH             READ A RECORD             A40797 36000002
         TM    ASMSW,ASMPCH            COPY ASSEMBLY JCL SW SET  A40797 36010002
         BZ    CHKPARMS                NO - CHECK PARMS ON EXEC  Y01036 36020002
JCLCOPY  BAL   R2,COPYRTN              GO TO COPY EXEC CARD             36030002
         TM    ASMSW,ASMPCH            COPY ASSEMBLY JCL SW SET  A40797 36040002
         BO    JCLCOPY4                YES - BRANCH TO CHECK /*  A40797 36050002
JCLREAD  BAL   R14,READPCH             READ A RECORD             XXXXXX 36060002
         LA    R3,PCHAREA              GET ADDRESS OF PCH BUFFER Y01036 36062002
         TM    CONTSW1,EXECCONT        EXEC CONTINUATION SW SET  Y01036 36070002
         BZ    CHKBLANK                NO - CONTINUE PROCESSING  Y01036 36080002
         NI    CONTSW1,HEX00           TURN OFF EXEC CONTIN SW   Y01036 36082002
         BAL   R2,CHKSPACE             POINT TO NEXT KEYWORD     Y01036 36084002
         B     PARMCHK                 GO CHECK PARAMETERS       Y01036 36086002
         SPACE                                                          36090002
*********************************************************************** 36120002
*                                                                     * 36150002
*        THIS SECTION OF CODE EXAMINES THE PARAMETERS ON THE          * 36180002
*        EXEC STATEMENT                                               * 36240002
*                                                                     * 36270002
*********************************************************************** 36300002
         SPACE                                                          36330002
CHKPARMS EQU   *                                                        36380002
         LA    R3,PCHAREA              GET PCHF BUFFER ADDRESS   Y01036 36530002
         BAL   R2,CHKSPACE             POINT TO 'EXEC'           Y01036 36580002
         BAL   R2,CHKSPACE             POINT TO PROC NAME        Y01036 36630002
         CLC   0(5,R3),LINKSPRC        LINK EDIT STEP            Y01036 36680002
         BE    LINKS1                  YES - BRANCH              Y01036 36682002
         LA    R3,4(R3)                INCREMENT PAST 'ASMS'     Y01036 36684002
         B     COMMACHK                BRANCH TO CHECK NEXT CHAR Y01036 36686002
LINKS1   LA    R3,5(R3)                INCREMENT PAST 'LINKS'    Y01036 36688002
         B     COMMACHK                BRANCH TO CHECK NEXT CHAR Y01036 36688102
PARMCHK  EQU   *                                                        36688402
         CLC   0(4,R3),MODPARM         IS THIS MOD= KEYWORD      Y01036 36688802
         BE    MODKEY                  YES - BRANCH              Y01036 36689202
         CLC   0(2,R3),NPARM           IS THIS N= KEYWORD        Y01036 36689602
         BE    NKEY                    YES - BRANCH              Y01036 36689702
         CLC   0(3,R3),P1PARM          IS THIS P1= KEYWORD       Y01036 36689802
         BE    PKEY                    YES - BRANCH              Y01036 36689902
         CLC   0(3,R3),P2PARM          IS THIS P2= KEYWORD       Y01036 36699902
         BE    PKEY                    YES - BRANCH              Y01036 36709902
INC1     LA    R3,1(R3)                INCREMENT 1 CHAR          Y01036 36713202
COMMACHK CLI   0(R3),COMMA1            IS THIS A COMMA           Y01036 36715202
         BE    INC2                    YES - BRANCH              Y01036 36715602
         CLI   0(R3),SPACE             IS THIS A BLANK           Y01036 36716002
         BNE   INC1                    NO - INCREMENT TO NEXT CHAR      36716402
*                                                                Y01036 36716502
         TM    MEFSW,X'80'             MEF IN STAGE 1            Y01036 36722202
         BNO   CHKBLANK                NO - BRANCH               Y01036 36724202
         CLI   MEFBUFF+71,SPACE        CONTINUATION EXPECTED     Y01036 36727302
         BE    CHKBLANK                NO - BRANCH               Y01036 36727702
         OI    CONTSW1,EXECCONT        YES - SET SWITCH          Y01036 36728102
         B     CHKBLANK                CONTINUE PROCESSING       Y01036 36728702
         SPACE 1                                                        36734402
INC2     LA    R3,1(R3)                INCREMENT PAST COMMA      Y01036 36740102
         CLI   0(R3),SPACE             IS THIS A BLANK           Y01036 36745802
         BNE   PARMCHK                 NO CHECK PARAMETERS       Y01036 36751502
         TM    MEFSW,X'80'             MEF IN STAGE 1            Y01036 36753502
         BNO   SETCONT                 NO - BRANCH               Y01036 36755502
         CLI   MEFBUFF+71,SPACE        CONTINUATION EXPECTED     Y01036 36755902
         BE    CHKBLANK                NO - BRANCH               Y01036 36756302
SETCONT  OI    CONTSW1,EXECCONT        TURN ON EXEC CONTINUE SW  Y01036 36757202
         EJECT                                                          36762902
*********************************************************************** 36768602
*                                                                     * 36774302
*        CHECK IF DATA RECORDS HAVE TO BE BYPASSED UNTIL THE          * 36780002
*        PROPER LOAD MODUE OR INCLUDE CARD IS FOUND                   * 36810002
*                                                                     * 36840002
*********************************************************************** 36870002
         SPACE                                                          36900002
CHKBLANK EQU   *                                                        36930002
         TM    ASMSW,ASMPCH            ASSEMBLY PUNCH STEP       Y01036 36940002
         BO    JCLCOPY                 YES - BRANCH              Y01036 36950002
         CLI   PCHAREA,C' '            IS THIS A CONTROL CARD           36960002
         BNE   JCLCHKAS                NO-COPY JCL CARD          Y01036 36990002
         LA    R8,4                    YES-SET JCL COPIED SWITCH S21995 37020002
         B     DOREAD(R6)              IS ENTRY-ALIAS SWITCH SET        37050002
DOREAD   B     RFTILLNM                NO-SKIP TILL SAVED NAME CARD     37080002
         CLC   PCHAREA,INCSTORE        YES-IS THIS SAVED INCLUDE CARD   37110002
         BE    CHEKCHRP                YES-CHECK FOR CHANGE-REPLACE CDS 37140002
COPYALEN ST    R3,R3SAV                                                 37170002
ALENRTRN LA    R3,PCHAREA              GET PCHF INPUT BUFFER ADDRESS    37200002
         BAL   R2,CHKSPACE             POINT TO NEXT OPERAND            37230002
         CLC   0(3,R3),CHARINC         INCLUDE CARD              Y01045 37240002
         BE    CHECKDSS                CHECK IF DSS CARD         Y01045 37250002
         CLI   0(R3),LETTERA           IS THIS AN ALIAS CARD     S21995 37260002
         BE    INSCOPY                 COPY ALIAS CARD           S21995 37290002
         CLI   0(R3),LETTERE           IS THIS AN ENTRY CARD     S21995 37320002
         BE    INSCOPY                 COPY ENTRY CARD           S21995 37350002
         CLC   0(4,R3),PAGECD          IS THIS A PAGE STMT       X01983 37380002
         BE    INSCOPY                 YES - HANDLE PAGE STMT    X01983 37410002
         CLC   0(5,R3),ORDERCD         IS THIS AN ORDER STMT     X01983 37440002
         BE    INSCOPY                 YES - HANDLE ORDER STMT   X01983 37470002
         CLC   0(7,R3),APFCD           IS THIS A SETCODE STMT    Y01048 37480002
         BE    INSCOPY                 YES - HANDLE SETCODE STMT Y01048 37490002
         TM    OVLYREC,X'80'           OVERLAY CARD ENCOUNTERED   M4006 37500002
         BO    RFCOPY                  YES - GO TO RFCOPY         M4006 37530002
         CLC   0(3,R3),CHARINS         YES - IS THIS INSERT STATEMENT   37560002
         BNE   RFCOPY                  NO - GO TO RFCOPY                37590002
INSCOPY  BAL   R2,COPYRTN              YES - COPY INSERT STATEMENT      37620002
RFCOPY   BAL   R14,READPCH             READ A RECORD                    37650002
         CLC   PCHAREA,INCSTORE        REACHED MATCHED INCLUDE CARD     37680002
         BNE   ALENRTRN                NO-CHECK FOR ENTRY OR ALIAS CARD 37710002
         L     R3,R3SAV                                                 37740002
         B     CHEKCHRP                CHECK FOR CHANGE-REPLACE CARDS   37770002
CHECKDSS BAL   R2,CHKSPACE             FIND DDNAME               Y01045 37780002
         CLC   0(17,R3),DSSDNME        CHECK IF DSS              Y01045 37790002
         BNE   RFCOPY                  NO - CONTINUE             Y01045 37792002
         OI    SWITCH1,CPYDSS          SET SWITCH                Y01045 37794002
         B     OUTDSS                  GO COPY CARD              Y01045 37796002
JCLCHKAS TM    ASMSW,ASMMOD            ASSEMBLY STEP             Y01036 37798002
         BNO   JCLCOPY                 NO - BRANCH TO COPY JCL   Y01036 37798402
         B     JCLREAD                 YES - BRANCH TO READ      Y01036 37798802
         SPACE                                                          37800002
*********************************************************************** 37830002
*                                                                     * 37860002
*      READ BACK TO LOAD MODULE BEGINNING, GO TO COPY ALIAS/ENTRY     * 37890002
*                                                                     * 37920002
*********************************************************************** 37950002
         SPACE                                                          37980002
RBTILLNM MVC   INCSTORE(80),PCHAREA     SAVE MATCHED INCLUDE CARD       38010002
         ST    R3,R3SAV2               SAVE R3                   Y01036 38020002
         BAL   R14,POINTRTN             POINT TO PREVIOUS NAME CARD     38040002
         ST    R3,R3SAV                                                 38070002
         B     RFCOPY                   START READING CONTROL CARDS     38100002
         SPACE                                                          38130002
*********************************************************************** 38160002
*                                                                     * 38190002
*           READ FORWARD TO LOAD MODULE BEGINNING,                    * 38220002
*           SKIPPING PREVIOUSLY CHECKED CONTROL CARDS.                * 38250002
*           GO TO COPY ALIAS AND/OR ENTRY CARDS.                      * 38280002
*                                                                     * 38310002
*********************************************************************** 38340002
         SPACE                                                          38370002
RFTILLNM BAL   R14,READPCH             READ A RECORD                    38400002
         CLC   PCHAREA,NAMESTOR        IS THIS SAVED NAME CARD          38430002
         BNE   RFTILLNM                NO-CONTINUE READING CARDS        38460002
         ST    R3,R3SAV                                                 38490002
         B     RFCOPY                  YES-CHECK FOR ENTRY-ALIAS CARDS  38520002
         EJECT                                                          38550002
*********************************************************************** 38580002
*                                                                     * 38610002
*        CREATE INCLUDE ROUTINE                                       * 38640002
*           - MOVE 'X' INTO TABLE TO INDICATE MATCH                   * 38670002
*           - MOVE MODULE INTO OUTPUT INCLUDE BUFFER                  * 38700002
*           - WRITE INCLUDE CARD (GENERATE) OR                        * 38730002
*             SPOOL OBJECT MODULE (APPLICATION)                       * 38760002
*           - INDICATE MATCH IN IDENTIFY TABLE                        * 38790002
*             GO CHECK NEXT MODULE                                    * 38820002
*                                                                     * 38850002
*********************************************************************** 38880002
         SPACE                                                          38910002
CRTEINCL STM   R0,R2,READSTOR                                    S21995 38940002
         ST    R9,R9SAV                                          S21995 38970002
         MVI   8(RA),LETTERX           INDICATE MATCH IN TABLE   S21995 39000002
         CLI   9(RA),X'00'             IS IDENTIFY INDEX 0       S21016 39030002
         BE    MVMODST                 YES - NO IDENTIFY CARDS   S21016 39060002
         LA    R2,80                   FOR MULTIPLY              S21016 39090002
         SR    R1,R1                                             S21016 39120002
         LR    R0,R1                                             S21016 39150002
         IC    R1,9(RA)                IDENTIFY INDEX (MODTBL)   S21016 39180002
         BCTR  R1,0                    DECREMENT INDEX BY 1      S21016 39210002
         MR    R0,R2                   MULTIPLY BY 80 (OFFSET)   S21016 39240002
         A     R1,IDENTBL              ADD BEGINNING ADDR OF TBL S21016 39270002
         OI    0(R1),X'08'             INDICATE MATCH FOR SET    S21016 39300002
MVMODST  LM    R0,R2,READSTOR          RESTORE REGISTERS         S21016 39330002
         LA    RA,10(RA)               NEXT NAME IN MODTBL       S21016 39360002
         MVC   0(8,R9),MODSTORE        MOVE MODULE NAME TO INCLUDE AREA 39390002
INCCOMP  CLI   0(R9),ABLANK            BLANK (IN MODULE NAME)    S21995 39420002
         BE    CLOSEINC                YES-FINISH PROCESSING            39450002
         LA    R9,1(R9)                POINT TO NEXT CHARACTER IN NAME  39480002
         B     INCCOMP                 CONTINUE TO SEARCH FOR BLANK     39510002
CLOSEINC MVI   0(R9),PARNRITE          MOVE IN RIGHT PARENTHESIS S21995 39540002
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   39570002
         BNO   WRTINCL                 NO-WRITE THE INCLUDE STATEMENT   39600002
         OI    BRPRMLST,SPOOLI         INDICATE OBJ TO BE SPOOLED       39630002
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST    39660002
         L     R15,PTF01               GET ADDRESS OF AMAPTF01          39690002
         BALR  R14,R15                 GO TO AMAPTF01 TO SPOOL TO OUTF  39720002
         B     COMWBLNK                SKIP THE WRITE                   39750002
WRTINCL  STM   R2,R3,RITESAVE                                           39780002
         LA    R3,OUTAREA1             GET ADDRESS OF INCLUDE BUFFER    39810002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              39840002
         LM    R2,R3,RITESAVE                                           39870002
COMWBLNK MVI   0(R9),SPACE                                              39900002
         L     R9,R9SAV                                                 39930002
         LA    R6,4                    SET ENTRY ALIAS SWITCH    S21995 39960002
         L     R3,R3SAV2               RESTORE R3                Y01036 39970002
         B     MODNOTBL                CHECK FOR MORE NAMES             39990002
         EJECT                                                          40020002
*********************************************************************** 40050002
*                                                                     * 40080002
*             NAME CARD ROUTINE -                                     * 40110002
*             NOTE POSITION OF NAME CARD                              * 40140002
*             CREATE SYSLMOD CARD FOR PREVIOUS LOAD MODULE            * 40170002
*             SAVE AND COPY NAME CARD                                 * 40200002
*             PERFORM LINK EDIT (APPLICATION)                         * 40230002
*                                                                     * 40260002
*********************************************************************** 40290002
         SPACE                                                          40320002
NAMERTN  TM    OVNOGO,X'08'            OVERLAY NO GO SWITCH SET  S21995 40350002
         BO    CRTSYSLM                YES-SKIP NORMAL PROCESS   S21995 40380002
         B     STORENM1(R8)            IS JCL COPIED SWITCH SET  S21995 40410002
STORENM1 B     STORENAM                NO-SAVE NAME CARD                40440002
         BAL   R14,NOTERTN             NOTE THE LAST BLOCK READ         40470002
         B     STORENM2(R6)            IS ENTRY-ALIAS SWITCH SET        40500002
STORENM2 B     STORENAM                NO-SAVE NAME CARD                40530002
CRTSYSLM LA    R7,LMODETC              ADDR OF INCLUDE SYSLMOD BUFFER   40560002
         BAL   R2,CHKSPACE             POINT TO MODULE NAME ON CARD     40590002
NAMELOOP MVC   0(1,R7),0(R3)           MOVE CHAR FROM CARD TO BUFFER    40620002
         LA    R3,1(R3)                                                 40650002
         LA    R7,1(R7)                                                 40680002
         CLI   0(R3),PARNLEFT          IS THIS A LEFT PAREN      S21995 40710002
         BE    NMELOOP1                YES, A REPLACE EXISTS-OUTPUT     40740002
*                                      THE SYSLMOD INCLUDE CARD         40770002
         CLI   0(R3),SPACE             END OF MODULE NAME        S21995 40800002
         BNE   NAMELOOP                NO-CONTINUE TO SCAN NAME         40830002
NMELOOP1 EQU   *                                                        40860002
         TM    OVNOGO,X'08'            OVERLAY NO GO SWITCH SET  S21995 40890002
         BO    AMA012WR                YES - WRITE ERROR MESSAGE S21995 40920002
         MVI   0(R7),PARNRITE          CHECK FOR RIGHT PAREN     S21995 40950002
         STM   R2,R4,RITESAVE                                    S21995 40980002
         SPACE                                                          41010002
*********************************************************************** 41040002
*                                                                     * 41070002
*             PUT OUT IDENTIFY CARDS FOR THIS LOAD MODULE.            * 41100002
*             THIS IS DONE ONLY FOR THE GENERATE FUNCTION.            * 41130002
*                                                                     * 41160002
*********************************************************************** 41190002
         SPACE                                                          41220002
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21016 41250002
         BO    IDENEXIT                YES-DO NOT WRITE IDENTIFY S21016 41280002
         LA    R3,SSIAREA              ADDRESS OF OUTPUT BUFFER  S21016 41310002
         MVI   SSIAREA,C' '            BLANK FIRST BYTE OF BUFF  S21016 41340002
         L     R4,IDENTBL              IDENTIFY TABLE ADDRESS    S21016 41370002
LOOP     CLI   0(R4),X'FF'             END OF IDENTIFY TABLE     S21016 41400002
         BE    IDENEXIT                YES - EXIT                S21016 41430002
         TM    0(R4),X'08'             MATCH FOR THIS MODULE     S21016 41460002
         BO    IDFOUND                 YES-WRITE IDENTIFY CARDS  S21016 41490002
         LA    R4,80(R4)               NEXT ENTRY IN TABLE       S21016 41520002
         B     LOOP                    SEARCH FOR MATCHES        S21016 41550002
IDFOUND  NI    0(R4),X'F7'             TURN OFF MATCH INDICATOR  S21016 41580002
         MVC   SSIAREA+1(79),1(R4)     IDENTIFY CARD TO BUFFER   S21016 41610002
         BAL   R2,AMAWRITE             WRITE IDENTIFY RECORD     S21016 41640002
         LA    R4,80(R4)               NEXT ENTRY IN TABLE       S21016 41670002
         TM    0(R4),X'80'             NEW SET OF IDENTIFY CARDS S21016 41700002
         BNO   IDFOUND                 NO - WRITE RECORDS        S21016 41730002
         B     LOOP                    CHECK FOR MATCH OR END    S21016 41760002
IDENEXIT LA    R3,OUTAREA2             INCLUDE SYSLMOD BUFFER    S21016 41790002
         BAL   R2,AMAWRITE             WRITE INCLUDE SYSLMOD CARD       41820002
         LM    R2,R4,RITESAVE                                    S21995 41850002
         MVI   LMODETC,C' '            BLANK INCLUDE SYSLMOD BUFFER     41880002
         MVC   LMODETCB(60),LMODETC                                     41910002
         SPACE                                                          41940002
*********************************************************************** 41970002
*                                                                     * 42000002
*          THIS CODE EXAMINES IF OVERLAY WAS SPECIFIED. IF SO         * 42030002
*          THE OVERLAY TABLE IS WRITTEN PRIOR TO THE NAME CARD.       * 42060002
*                                                                     * 42090002
*********************************************************************** 42120002
         SPACE                                                          42150002
         TM    OVLYREC,X'80'           IS OVERLAY SWITCH SET            42180002
         BNO   COPYNAME                NO-SKIP OVERLAY PROCESSING       42210002
         L     R3,OVTABADR             GET OVERLAY TABLE ADDRESS S21995 42240002
         MVI   OVLYREC,X'00'           TURN OFF THE OVERLAY SWITCH      42270002
         L     R9,OVLYREC              CURRENT POSITION IN TABLE S21995 42300002
OVLYLOOP EQU   *                                                        42330002
         BAL   R2,AMAWRITE             WRITE OVERLAY/INSERT CARD S21995 42360002
         LA    R3,80(R3)               POINT TO NEXT RECORD             42390002
         CR    R9,R3                   REACHED LAST RECORD       S21995 42420002
         BNE   OVLYLOOP                NO-WRITE THE NEXT RECORD         42450002
         XC    OVLYREC(4),OVLYREC      YES-ZERO ADDR FOR NEXT MEMBER    42480002
         SPACE                                                          42510002
*********************************************************************** 42540002
*                                                                     * 42570002
*             THIS SECTION DETERMINES IF THE NAME CARD HAS            * 42600002
*             THE 'REPLACE' OPTION ON THE CARD. IF NOT, IT            * 42630002
*             PLACES THE (R) ON THE CARD PRIOR TO WRITING IT.         * 42660002
*                                                                     * 42690002
*********************************************************************** 42720002
         SPACE                                                          42750002
COPYNAME EQU   *                                                        42780002
         OI    NAMESWCH,X'80'          TURN ON NAME SWITCH TO INDICATE  42810002
*                                      A NAME CARD HAS BEEN PROCESSED   42840002
         LA    R3,PCHAREA              GET PCHF INPUT BUFFER ADDRESS    42870002
         BAL   R2,CHKSPACE             POINT TO NAME                    42900002
         BAL   R2,CHKSPACE             CYCLE TO THE MODULE NAME         42930002
         MVC   MODSTORE(8),BLANK       BLANK MODSTORE             M3999 42960002
         LA    R1,MODSTORE             SET UP POINTER TO MODSTORE M3999 42990002
COPYLOOP CLI   0(R3),PARNLEFT          IS THIS A LEFT PAREN      S21995 43020002
         BE    CPYNAME1                YES-REPLACE OPTION IS PRESENT    43050002
         CLI   0(R3),SPACE             IS THIS A BLANK           S21995 43080002
         BE    NEEDTHER                YES-REPLACE OPTION IS NEEDED     43110002
         MVC   0(1,R1),0(R3)           MOVE 1 CHAR OF MODULE NAME M3999 43140002
         LA    R1,1(R1)                INCREMENT MODSTORE POINTER M3999 43170002
         LA    R3,1(R3)                INCREMENT TO CHECK NEXT LETTER   43200002
         B     COPYLOOP                CHECK NEXT CHARACTER             43230002
NEEDTHER EQU   *                                                        43260002
         MVC   0(4,R3),REPLACE         MOVE THE REPLACE(R) OPTION       43290002
CPYNAME1 EQU   *                                                        43320002
         ST    R4,SAVE4                                                 43350002
         ST    R5,SAVE5                                                 43380002
         L     R5,SSISAVE              OBTAIN ADDR OF MATCHED NAME      43410002
         L     R4,MODTBL               OBTAIN ADDR OF MODULE TABLE      43440002
         SR    R5,R4                   OBTAIN OFFSET OF MATCHED NAME    43470002
         SR    R4,R4                                                    43500002
         D     R4,TEN                  DIVIDE OFFSET BY TEN      S21016 43530002
         SLL   R5,3                    MULTIPLY THIS BY 8               43560002
         L     R4,SSITABLE             OBTAIN ADDR OF SSI TABLE         43590002
         AR    R5,R4                   ADD OFFSET OF SSI INFO           43620002
         MVC   SSIAREA(80),SSIAREA-1   BLANK SSIAREA             S21016 43650002
         MVC   SSIAREA+11(8),0(R5)     MOVE SSI INFO INTO OUTPUT BUFFER 43680002
         MVC   SSIAREA+2(6),SSICARD    MOVE 'SETSSI' TO BUFFER   S21016 43710002
         STM   R2,R3,RITESAVE                                           43740002
         LA    R3,SSIAREA              GET ADDRESS OF OUTPUT BUFFER     43770002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              43800002
         LM    R2,R3,RITESAVE                                           43830002
         L     R4,SAVE4                                                 43860002
         L     R5,SAVE5                                                 43890002
         BAL   R2,COPYRTN              WRITE OUT THE 'NAME' CARD        43920002
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   43950002
         BNO   SLSHCHK                 CHECK FOR /* ROUTINE             43980002
         OI    BRPRMLST,LINK           YES - INDICATE LINK ROUINTE      44010002
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST    44040002
         L     R15,PTF01               GET ADDRESS OF AMAPTF01          44070002
         BALR  R14,R15                 GO TO THE LINK ROUTINE           44100002
SLSHCHK  TM    SLASHSW,X'80'           SHOULD WE RETURN TO /* ROUTINE   44130002
         BO    ENDCRTN1                YES--RETURN TO /* ROUTINE        44160002
STORENAM MVC   NAMESTOR(80),PCHAREA    SAVE NAME CARD                   44190002
         XC    OVLYREC(4),OVLYREC      TURN OFF OVERLAY SWITCH    M6106 44220002
         NI    COMSW,TURNOFF           TURNOFF DSS SWITCH        Y01045 44230002
         LA    R6,0                    SET ENTRY-ALIAS SWITCH    S21995 44250002
         B     READPCH2                READ NEXT CARD                   44280002
         EJECT                                                          44310002
*********************************************************************** 44340002
*                                                                     * 44370002
*    THIS SECTION PROCESSES THE NAME STATEMENT AT '/*' TIME. IF A NAME  44400002
*    CARD HAS NOT BEEN PRODUCED FOR THIS LOAD MODULE,THE NAME           44430002
*    OBTAINED FROM THE SYSLMOD INPUT SAVE AREA AND WRITTEN AT           44460002
*    THIS TIME. IF NO NAME EXISTS IN THIS AREA, THE MATCH IS IGNORED.   44490002
*                                                                     * 44520002
*********************************************************************** 44550002
         SPACE                                                          44580002
ENDCDRTN EQU   *                                                        44610002
         TM    NAMESWCH,X'80'          HAS A NAME CARD BEEN FOUND       44640002
         BO    COPYNAM1                YES-WRITE THE /* CARD            44670002
         CLC   SYSLNAME(8),BLANK       IS THE SYSLNAME AREA BLANK       44700002
         BE    COPYNAM1                YES, NO PROCESSING HAS BEEN DONE 44730002
*                                      FOR THIS MODULE--IGNORE IT       44760002
         MVC   SYSLSAVE(80),PCHAREA    SAVE THE /*                      44790002
         MVI   PCHAREA,X'40'                                            44820002
         MVC   PCHAREA+1(79),PCHAREA   BLANK THE PCHF INPUT BUFFER      44850002
         MVC   PCHAREA+1(5),NAMECARD   MOVE THE 'NAME' STATEMENT        44880002
         MVC   PCHAREA+7(11),SYSLNAME  MOVE THE MODULE NAME AND (R)     44910002
         OI    SLASHSW,X'80'           INDICATE THE NAME ROUTINE SHOULD 44940002
*                                      RETURN TO THE /* ROUTINE         44970002
         LA    R3,PCHAREA+1            INITIALIZATION FOR NAME ROUTINE  45000002
         B     CRTSYSLM                WRITE OUT THE OVERLAY,SYSLMOD,   45030002
*                                      AND NAME STATEMENTS              45060002
ENDCRTN1 EQU   *                                                        45090002
         MVI   SLASHSW,X'00'           TURN OFF THE NAME RETURN SWITCH  45120002
         MVC   PCHAREA(80),SYSLSAVE    PREPARE TO WRITE THE '/*' CARD   45150002
COPYNAM1 EQU   *                                                        45180002
         MVI   SYSLNAME,X'40'                                           45210002
         MVC   SYSLNAME+1(10),SYSLNAME BLANK SYSLNAME AREA              45240002
         NI    NAMESWCH,X'00'          TURN OFF THE NAME SWITCH         45270002
         B     DOREAD1(R8)             IS JCL COPIED SWITCH SET         45300002
DOREAD1  B     READPCH1                NO-READ NEXT CARD          M0868 45330002
         BAL   R2,COPYRTN              YES-WRITE CARD                   45360002
         B     READPCH1                READ NEXT CARD             M0868 45390002
         EJECT                                                          45420002
*********************************************************************** 45450002
*                                                                     * 45480002
*        SUBROUTINE TO COPY INPUT TO OUTPUT.                          * 45510002
*        CHECKS FOR LINKAGE EDITOR PARAMETERS (APPLICATION)           * 45540002
*                                                                     * 45570002
*********************************************************************** 45600002
         SPACE                                                          45630002
COPYRTN  TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   45660002
         BNO   COPYRTN1                NO - WRITE THE STATEMENT  S21995 45690002
         CLI   PCHAREA,SPACE           IS IT A CONTROL STATEMENT        45720002
         BE    COPYRTN1                YES - WRITE THE STATEMENT        45750002
         OI    BRPRMLST,PARMCHEK       INDICATE PARAMETER CHECK NEEDED  45780002
         LA    R1,BRPRMLST             GET PARAMETER LIST ADDRESS       45810002
         L     R15,PTF01               GET ADDRESS OF AMAPTF01          45840002
         BALR  R14,R15                 GO TO AMAPTF01 TO CHECK FOR PARM 45870002
         BR    R2                      RETURN TO CALLER          S21995 45900002
COPYRTN1 STM   R2,R3,RITESAVE                                           45930002
         LA    R3,PCHAREA              GET ADDRESS OF PCHF INPUT BUFFER 45960002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              45990002
         LM    R2,R3,RITESAVE                                           46020002
         TM    MEFSW,X'80'             IS MEF IN EFFECT                 46050002
         BNO   NOMEF                   NO-ADDITIONAL WRITE NOT NEEDED   46080002
         STM   R2,R3,RITESAVE                                           46110002
         LA    R3,MEFBUFF              GET ADDRESS OF MEF BUFFER        46140002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              46170002
         LM    R2,R3,RITESAVE                                           46200002
         NI    MEFSW,X'00'             CLEAR MEF INDICATOR              46230002
NOMEF    BR    R2                      RETURN TO CALLER                 46260002
         EJECT                                                          46290002
*********************************************************************** 46320002
*                                                                     * 46350002
*        THIS SECTION OF CODE HANDLES THE PARAMETERS ON THE EXEC      * 46380002
*        STATEMENT                                                    * 46390002
*                                                                     * 46470002
*********************************************************************** 46500002
         SPACE                                                          46530002
PKEY     LA    R3,4(R3)              INCREMENT PAST P1=' OR P2=' Y01036 46580002
         MVI   0(R3),SPACE             MAKE CHAR BLANK           Y01036 46630002
         LA    R3,2(R3)                INCREMENT PAST  '         Y01036 46680002
         B     COMMACHK                YES - CONTINUE PROCESSING Y01036 47380002
         SPACE 1                                                        47430002
MODKEY   EQU   *                                                        47480002
         LA    R3,4(R3)                INCREMENT PAST MOD=       Y01036 47530002
         ST    R3,DSNPNTR              SAVE PTR TO DSNAME        Y01036 47580002
         ST    R9,R9SAVE1              SAVE R9                   Y01036 47590002
         SR    R2,R2                   ZERO COUNTER              Y01036 47630002
         LA    R9,SYSLNAME             OBTAIN ADDR OF NAME AREA  Y01036 47680002
         MVC   SYSLNAME(8),BLANK       SET BUFFER TO BLANKS      Y01036 47730002
COMCHK1  CLI   0(R3),COMMA1            IS THIS A COMMA           Y01036 47780002
         BE    CNTCHK2                 YES - CONTINUE PROCESSING Y01036 47830002
         CLI   0(R3),SPACE             IS THIS A BLANK           Y01036 47880002
         BE    CNTCHK2                 YES - CONTINUE PROCESSING Y01036 47930002
         MVC   0(1,R9),0(R3)           MOVE ONE LETTER OF NAME   Y01036 47980002
         LA    R3,1(R3)                INCREMENT TO NEXR CHAR    Y01036 48030002
         LA    R9,1(R9)                POINT TO NEXT IN BUFFER   Y01036 48080002
         LA    R2,1(R2)                INCREMENT COUNTER         Y01036 48130002
         B     COMCHK1                 CHECK NEXT LETTER         Y01036 48180002
CNTCHK2  LTR   R2,R2                   IS COUNTER ZERO           Y01036 48230002
         BZ    RESTR9                  YES- CONTINUE PROCESSING  Y01036 48430002
CHKASM   TM    ASMSW,ASMMOD            IN ASSEMBLY STEP          A40797 48480002
         BO    ASMCHK1               YES - CHECK NAMES FOR MATCH A40797 48530002
         MVC   0(3,R9),REPLACE         REPLACE OPTION TO BUFFER  Y01036 48580002
         TM    PARM,APPLFUNC           APPLICATION FUNCTION      Y01036 48630002
         BO    RESTR9                  YES - CONTINUE PROCESSING Y01036 48680002
MODCARD  LR    R9,R3                 SAVE CURRENT BUFFER ADDRESS Y01036 48730002
         SR    R3,R2                   POINT TO BEFORE NAME      Y01036 48830002
BLCHK    CLI   0(R3),SPACE             IS THIS A BLANK           Y01036 48930002
         BE    RESTR3                  YES BRANCH                Y01036 48980002
         MVC   0(1,R3),0(R9)           NO - OVERLAY THIS CHAR    Y01036 48990002
         LA    R9,1(R9)                POINT TO NEXT LETTER      Y01036 49000002
         LA    R3,1(R3)                POINT TO NEXT LETTER      Y01036 49010002
         B     BLCHK                   CHECK NEXT LETTER         Y01036 49012002
RESTR3   L     R3,DSNPNTR              RESTORE R3 POINTER        Y01036 49014002
RESTR9   L     R9,R9SAVE1              RESTORE R9                Y01036 49014402
         B     COMMACHK             CONTINUE CHECKING PARAMETERS Y01036 49016002
         SPACE 1                                                        49018402
NKEY     TM    PARM,APPLFUNC           APPLICATION FUNCTION      Y01036 49018802
         BO    COMMACHK                YES - CONTINUE PROCESSING Y01036 49019202
         ST    R3,R3SAVE1              SAVE PTR                  Y01036 49019302
         LA    R3,2(R3)                INCREMENT PAST N=         Y01036 49019602
         ST    R9,R9SAVE               SAVE R9                   Y01036 49019802
         LA    R2,PARMCHK              GET RETURN ADDRESS        Y01036 49019902
         ST    R2,R2SAV2               SAVE FOR RETURN           Y01036 49020002
         CLC   0(5,R3),SYS1COM         IS VALUE 'SYS1,'          Y01036 49029902
         BE    INCSYS                  YES INCREMENT PTR         Y01036 49043202
         CLC   0(5,R3),SYS1BLK         IS VALUE 'SYS1 '          Y01036 49045202
         BE    INCSYS                  YES - BRANCH BACK         Y01036 49045602
         MVI   MEFBUFF,SPACE           CLEAR MEF BUFFER          Y01036 49046002
         MVC   MEFBUFF+1(79),MEFBUFF                             Y01036 49046402
         MVC   MEFBUFF(2),SLASHES      MOVE '//' INTO BUFFER     Y01036 49046502
         MVC   MEFBUFF+15(2),NPARM     MOVE 'N=' INTO BUFFER     Y01036 49046602
         MVC   MEFBUFF+17(4),SYS1COM   MOVE 'SYS1' INTO BUFFER   Y01036 49054902
         MVC   TEMPBUFF(72),PCHAREA    MOVE CARD TO TEMP BUFFER  Y01036 49056902
         LA    R9,MEFBUFF+21           SET UP REGISTER 9         Y01036 49057302
         MVI   PCHAREA,SPACE           CLEAR CARD BUFFER         Y01036 49058902
         MVC   PCHAREA+1(71),PCHAREA                             Y01036 49062902
         LA    R3,TEMPBUFF             POINT TO TEMP BUFFER      Y01036 49063302
         ST    R4,R4SAVE               SAVE R4                   Y01036 49065302
         LA    R4,PCHAREA              POINT TO PCHAREA          Y01036 49072602
FINDN    CLC   0(2,R3),NPARM           FOUND N=                  Y01036 49074602
         BE    FOUNDN                  YES - BRANCH              Y01036 49076602
         MVC   0(1,R4),0(R3)           NO - MOVE BACK TO CARD    Y01036 49078602
         LA    R3,1(R3)                INCREMENT POINTER         Y01036 49080602
         LA    R4,1(R4)                INCREMENT CARD POINTER    Y01036 49081002
         B     FINDN                   CHECK NEXT CHARACTER      Y01036 49081402
FOUNDN   BCTR  R3,0                    POINT TO BEFORE N=        Y01036 49081802
         CLI   0(R3),SPACE             IS N= FIRST ON CARD       Y01036 49081902
         BNE   PASSN                   NO - DONT SET SWITCH      Y01036 49082002
         OI    MEFSW,X'40'            INDICATE DSN FIRST ON CARD Y01036 49093602
PASSN    LA    R3,3(R3)                CYCLE PAST N=             Y01036 49101102
         B     SKIPDSN1                CONTINUE                  Y01036 49101502
INCSYS   LA    R3,4(R3)                INCREMENT PAST 'SYS1'     Y01036 49104302
         B     COMMACHK                CONTINUE PROCESSING       Y01036 49106302
         EJECT                                                          49110002
*********************************************************************** 49111202
*                                                                     * 49120802
*        COPY CHANGE-REPLACE ROUTINE                                  * 49130402
*              INDICATE END OF TABLE BY INSERTING 'X'                 * 49140002
*              COPY ALL ENTRIES IN TABLE TO OUTPUT                    * 49170002
*              GO TO CREATE INCLUDE CARD                              * 49200002
*                                                                     * 49230002
*********************************************************************** 49260002
         SPACE                                                          49290002
COPYCHRP MVI   0(R5),C'X'              INDICATE END OF ENTRIES          49320002
         STM   R2,R3,RITESAVE          SAVE REGISTERS 2 AND 3    S21995 49350002
         L     R3,CHGRPSTR             CHANGE-REPLACE TABLE      S21995 49380002
CHRPCOPY EQU   *                                                        49410002
         BAL   R2,AMAWRITE             WRITE CHANGE/REPLACE CARD S21995 49440002
         LA    R3,80(R3)               POINT TO NEXT ENTRY       S21995 49470002
         CLI   0(R3),C'X'              END OF CHANGE/REPLACE TBL S21995 49500002
         BNE   CHRPCOPY                NO - CONTINUE TO WRITE CARDS     49530002
         LA    R4,0                    RESET CHANGE-REPLACE SW   S21995 49560002
         LM    R2,R3,RITESAVE          RESTORE REGISTERS 2 AND 3 S21995 49590002
         B     CRTEINCL                RETURN TO CRTEINCL               49620002
         EJECT                                                          49650002
*********************************************************************** 49680002
*                                                                     * 49710002
*        PART II    CHECK FOR MODULE-MATCHES                          * 49740002
*                   IN IEBCOPY STEP OF STAGE 1 OUTPUT                 * 49770002
*                                                                     * 49800002
*********************************************************************** 49830002
         SPACE                                                          49860002
PART2    EQU   *                                                        49890002
         LA    R8,0                    TURN OFF JCL COPIED SWITCH       49920002
         BAL   R14,NOTERTN             NOTE THE LAST BLOCK READ         49950002
*                                                                       49980002
P2READ   MVI   BLANKSW,C' '                                      S21995 50010002
         BAL   R9,PGMRTN               SEARCH STAGE I TAPE       S21995 50040002
P2TEST   CLI   0(R3),SPACE             BLANK (CONTROL CARD)      S21995 50070002
         BE    P2STAT                  YES - CHECK IF SELECT OR COPY    50100002
         CLC   0(2,R3),ENDCARD         IS THIS /* CARD                  50130002
         BNE   P2READ                  NO - READ NEXT RECORD            50160002
P2JCLEND B     DOREAD2(R8)             IS THE JCL COPIED SWITCH SET     50190002
DOREAD2  B     READPCH1                NO - READ NEXT RECORD      M0868 50220002
         BAL   R2,COPYRTN              COPY RECORD                      50250002
         B     READPCH1                READ NEXT RECORD           M0868 50280002
P2STAT   EQU   *                                                        50310002
         BAL   R2,CHKSPACE             POINT TO CONTROL CARD TYPE       50340002
         CLI   0(R3),LETERS            IS THIS SELECT STATEMENT  S21995 50370002
         BE    P2SELECT                YES - GO TO SELECT ROUTINE       50400002
         CLI   0(R3),LETERC            IS THIS COPY STATEMENT    S21995 50430002
         BE    P2COPYRT                YES - GO TO COPY ROUTINE         50460002
         B     P2READ                  READ NEXT RECORD                 50490002
         EJECT                                                          50520002
*********************************************************************** 50550002
*                                                                     * 50580002
*              THIS ROUTINE ANALYZES SELECT CONTROL CARDS             * 50610002
*               -BUILD A NEW CONTROL CARD                             * 50640002
*               -CHECK FOR MATCHES WITH MODULE NAME TABLE             * 50670002
*                                                                     * 50700002
*********************************************************************** 50730002
P2SELECT BAL   R2,CHKSPACE             POINT TO 'MEMBER=' KEYWORD       50760002
         CLC   0(7,R3),P2MBR           'MEMBER=' KEYWORD          M0869 50790002
         BE    P2MBRFND                YES - POINT PASSED IT      M0869 50820002
         LA    R3,2(R3)                POINT PASSED 'M=' KEYWORD  M0869 50850002
         B     P2COMPA                 CONTINUE                   M0869 50880002
P2MBRFND LA    R3,7(R3)                SKIP PASSED 'MEMBER='      M0869 50910002
P2COMPA  CLI   0(R3),C'('              IS THIS A LEFT PARENTHESIS       50940002
         BNE   P2MODINI                NO-GO TO BLANK SELECT BUFFER     50970002
         LA    R3,1(R3)                POINT TO NEXT CHARACTER          51000002
         MVI   BLANKSW,C'*'                                             51030002
P2MODINI MVI   P2DATA,C' '                                              51060002
         MVC   P2DATA+1(62),P2DATA     BLANK SELECT BUFFER              51090002
         LA    R9,P2DATA               GET ADDR OF SELECT BUFFER        51120002
         MVC   MODSTORE,BLANK          BLANK MODULE NAME BUFFER         51150002
         L     RA,MODTBL               GET ADDR OF MODULE NAME TABLE    51180002
         LA    R5,MODSTORE             GET ADDR OF MODULE NAME BUFFER   51210002
P2CHKSVC CLI   0(R3),C'('              IS THIS MODULE RENAMED           51240002
         BE    P2SVCS                  YES - GO TO RENAME ROUTINE       51270002
         SPACE                                                          51300002
*********************************************************************** 51330002
*                                                                     * 51360002
*              THIS ROUTINE PROCESSES MODULES WHICH ARE NOT RENAMED   * 51390002
*                                                                     * 51420002
*********************************************************************** 51450002
         SPACE                                                          51480002
P2NORM   BAL   R2,P2STORP              STORE MODULE NAME IN MODSTORE    51510002
P2COMPN  CLC   0(8,RA),MODSTORE        IS THIS NAME IN THE TABLE        51540002
         BE    P2FOUNDN                YES-GO TO MODULE FOUND (NORMAL)  51570002
         LA    RA,10(RA)               NO-NEXT MODULE NAME       S21016 51600002
         CLI   0(RA),SPACE             END OF MODULE NAME TABLE  S21995 51630002
         BE    P2NOTFN                 YES-MODULE NOT FOUND (NORMAL)    51660002
         B     P2COMPN                 NO-CONTINUE COMPARING WITH TABLE 51690002
         SPACE                                                          51720002
*********************************************************************** 51750002
*                                                                     * 51780002
*              THIS ROUTINE PROCESSES MODULES WHICH ARE RENAMED       * 51810002
*                                                                     * 51840002
*********************************************************************** 51870002
         SPACE                                                          51900002
P2SVCS   MVC   0(1,R9),0(R3)           PUT PARENTHESIS IN SELECT BUFFER 51930002
         LA    R3,1(R3)                POINT TO NEXT LETTER ON CARD     51960002
         LA    R9,1(R9)                POINT TO NEXT POSITION IN BUFFER 51990002
         BAL   R2,P2STOR               STORE MODULE NAME IN MODSTORE    52020002
P2COMPS  CLC   0(8,RA),MODSTORE        IS THIS NAME IN THE TABLE        52050002
         BE    P2FOUNDS                YES-GO TO MODULE FOUND (RENAMED) 52080002
         LA    RA,10(RA)               POINT TO NEXT TABLE ENTRY S21016 52110002
         CLI   0(RA),SPACE             END OF MODULE NAME TABLE  S21995 52140002
         BE    P2NOTFS                 YES-MODULE NOT FOUND (RENAMED)   52170002
         B     P2COMPS                 CONTINUE TO SEARCH TABLE         52200002
         EJECT                                                          52230002
*********************************************************************** 52260002
*                                                                     * 52290002
*              THIS ROUTINE OBTAINS THE NEXT MODULE NAME              * 52320002
*              FROM THE SELECT CARD AND MOVES IT TO THE               * 52350002
*              SELECT BUFFER AND THE MODULE NAME BUFFER.              * 52380002
*                                                                     * 52410002
*********************************************************************** 52440002
         SPACE                                                          52470002
P2STORP  MVI   0(R9),C'('              PUT PARENTHESIS IN SELECT BUFFER 52500002
         LA    R9,1(R9)                POINT TO NEXT POSITION IN BUFFER 52530002
P2STOR   MVC   0(1,R9),0(R3)           MOVE ONE LETTER TO SELECT BUFFER 52560002
         MVC   0(1,R5),0(R3)           PUT LETTER IN MODULE NAME BUFFER 52590002
         LA    R3,1(R3)                                                 52620002
         LA    R9,1(R9)                                                 52650002
         LA    R5,1(R5)                                                 52680002
         CLI   0(R3),C','              REACHED END OF OLD MODULE NAME   52710002
         BE    P2STOREX                YES - RETURN TO CALLER           52740002
         CLI   0(R3),C')'              IS THIS END OF THE MODULE NAME   52770002
         BE    P2STOREX                YES - RETURN TO CALLER           52800002
         CLC   0(1,R3),BLANKSW         IS THIS EQUAL TO BLANKSW         52830002
         BNE   P2STOR                  NO - CONTINUE TO MOVE NAME       52860002
P2STOREX BR    R2                      RETURN TO CALLER                 52890002
         EJECT                                                          52920002
*********************************************************************** 52950002
*                                                                     * 52980002
*              PREPARE TO CONTINUE SEARCH OF SELECT CARD              * 53010002
*                                                                     * 53040002
*********************************************************************** 53070002
         SPACE                                                          53100002
P2NOTFN  CLI   0(R3),COMMA1            ANY MORE NAMES ON CARD    S21995 53130002
         BNE   P2READ                  NO - READ NEXT CARD              53160002
         LA    R3,1(R3)                POINT TO NEXT NAME               53190002
         B     P2MODINI                CONTINUE SEARCH OF SELECT CARD   53220002
P2NOTFS  LA    R3,1(R3)                POINT PASSED COMMA BETWEEN NAMES 53250002
         CLI   0(R3),PARNRITE          REACHED END OF RENAME     S21995 53280002
         BNE   P2NOTFS                 NO -CONTINUE TO SCAN             53310002
         LA    R3,1(R3)                YES-SKIP RIGHT PARENTHESIS       53340002
         B     P2NOTFN                 CHECK FOR MORE NAMES ON CARD     53370002
         EJECT                                                          53400002
*********************************************************************** 53430002
*                                                                     * 53460002
*              MATCH FOUND FOR MODULE NOT RENAMED                     * 53490002
*               - BUILD SELECT CARD WITH REPLACE OPTION (GENERATE)    * 53520002
*               - SPOOL OBJ AND PERFORM LINK EDIT (APPLICATION)       * 53550002
*                                                                     * 53580002
*********************************************************************** 53610002
         SPACE                                                          53640002
P2FOUNDN EQU   *                                                        53670002
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   53700002
         BNO   P2FOUNDC                NO-SEE IF JCL SHOULD BE WRITTEN  53730002
         ST    RA,SSISAVE              SAVE POINTER TO NAME       M4000 53760002
*                                      IN ORDER TO FIND SSI             53790002
         ST    RA,SELNAME              SAVE POINTER TO NAME IN          53820002
*                                      ORDER TO BUILD NAME CARD   M4000 53850002
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST    53880002
         OI    BRPRMLST,SPOOLS         INDICATE OBJ TO BE SPOOLED M4000 53910002
         L     R15,PTF01               GET ADDRESS OF AMAPTF01          53940002
         BALR  R14,R15                 AMAPTF01(TO SPOOL AND LINK EDIT) 53970002
P2FOUNDC BAL   R2,P2COPY               SEE IF JCL SHOULD BE WRITTEN     54000002
         MVI   0(R9),C','              PUT COMMA AFTER MODULE NAME      54030002
         MVC   1(4,R9),COMMAR          IEBCOPY REPLACE OPTION    S21995 54060002
P2FOUND  BAL   R2,P2WRTE               WRITE CONSTRUCTED SELECT CARD    54090002
         B     P2NOTFN                 CHECK FOR MORE NAMES ON CARD     54120002
P2FOUND2 LA    R3,2(R3)                INCREMENT PAST ,R ON CARD  M6108 54150002
P2FOUND1 MVC   0(4,R9),COMMAR          IEBCOPY REPLACE OPTION    S21995 54180002
         LA    R9,4(R9)                                          S21995 54210002
         LA    R3,1(R3)                POINT TO NEXT CHARACTER   S21995 54240002
         B     P2FOUND                 WRITE CONSTRUCTED SELECT CARD    54270002
         EJECT                                                          54300002
*********************************************************************** 54330002
*                                                                     * 54360002
*              MATCH FOUND FOR MODULE WHICH IS RENAMED                * 54390002
*               - BUILD SELECT CARD WITH REPLACE OPTION (GENERATE)    * 54420002
*               - SPOOL OBJ AND PERFORM LINK EDIT (APPLICATION)       * 54450002
*                                                                     * 54480002
*********************************************************************** 54510002
P2FOUNDS TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   54540002
         BNO   P2FOWNDS                CHECK IF JCL SHOULD BE WRITTEN   54570002
         LA    R3,1(R3)                POINT TO NEW NAME          M4000 54600002
         ST    R3,SELNAME              SAVE ADDRESS OF NEW NAME   M4000 54630002
         ST    RA,SSISAVE              SAVE POINTER TO NAME TO GET SSI  54660002
         LA    R1,BRPRMLST             GET ADDRESS OF PARAMETER LIST    54690002
         OI    BRPRMLST,SPOOLS         INDICATE OBJ TO BE SPOOLED       54720002
         L     R15,PTF01               GET ADDRESS OF AMAPTF01          54750002
         BALR  R14,R15                 AMAPTF01(TO SPOOL AND LINK EDIT) 54780002
         B     P2FCOMP                 CONTINUE PROCESSING              54810002
P2FOWNDS BAL   R2,P2COPY               COPY JCL IF NEEDED               54840002
P2FCOMP  EQU   *                                                        54870002
         CLI   0(R3),C')'              REACHED END OF RENAME PAIR       54900002
         BE    P2FOUND1                YES - BUILD REPLACE OPTION       54930002
         CLC   0(2,R3),COMMAR          IS REPLACE OPTION ON CARD  M6108 54960002
         BE    P2FOUND2                YES - BUILD REPLACE OPTION M6108 54990002
         MVC   0(1,R9),0(R3)           MOVE NEW NAME TO SELECT BUFFER   55020002
         LA    R3,1(R3)                                                 55050002
         LA    R9,1(R9)                                                 55080002
         B     P2FCOMP                 CONTINUE TO MOVE NEW NAME        55110002
         EJECT                                                          55140002
*********************************************************************** 55170002
*                                                                     * 55200002
*              PART 2 WRITE ROUTINE                                   * 55230002
*               - WRITE RECORDS ONLY FOR GENERATE FUNCTION            * 55260002
*               - SET COPY SWITCH (R6 TO 4)                           * 55290002
*                                                                     * 55320002
*********************************************************************** 55350002
         SPACE                                                          55380002
P2WRTE   MVI   8(RA),C'X'              INDICATE MATCH            S21995 55410002
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   55440002
         BO    BMPCTR                  YES - DO NOT DO THE WRITE        55470002
         STM   R2,R3,RITESAVE                                           55500002
         LA    R3,P2OUT                GET ADDRESS OF SELECT BUFFER     55530002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              55560002
         LM    R2,R3,RITESAVE                                           55590002
BMPCTR   LA    R6,4                    SET COPY SWITCH (R6 TO 4) S21995 55620002
         BR    R2                      RETURN TO CALLER                 55650002
         SPACE                                                          55680002
*********************************************************************** 55710002
*                                                                     * 55740002
*              PART 2 JCL WRITE ROUTINE                               * 55770002
*                                                                     * 55800002
*********************************************************************** 55830002
         SPACE                                                          55860002
P2COPY   B     JCLCOPY2(R8)            IS JCL COPIED SWITCH SET         55890002
JCLCOPY2 B     P2CJCL                  NO - WRITE JCL                   55920002
         B     COPYCD1(R6)             YES - IS COPY SWITCH SET         55950002
COPYCD1  B     P2RB                    NO - WRITE COPY CARD             55980002
         BR    R2                      RETURN TO CALLER                 56010002
P2COPYEX EQU   *                                                        56040002
         NI    DUPCOPY,X'00'           CLEAR IDENTICAL COPY CARD SW     56070002
         BR    R2                      RETURN TO CALLER                 56100002
P2CJCL   EQU   *                                                        56130002
         LA    R8,4                    SET JCL COPIED SWITCH     S21995 56160002
         MVC   INCSTORE(80),PCHAREA    SAVE MATCHED SELECT STATEMENT    56190002
         BAL   R14,POINTRTN            POINT TO JCL FOR THIS STEP       56220002
P2CJCL1  BAL   R14,READPCH             READ A RECORD                    56250002
         CLC   PCHAREA(2),SLASHES      IS THIS A JCL CARD               56280002
         BNE   P2RF                    NO - CHECK IF COPY OR SELECT     56310002
         ST    R2,R2SAV                                                 56340002
         ST    R3,R3SAVE1                                               56370002
         SPACE                                                          56400002
*********************************************************************** 56430002
*                                                                     * 56460002
*              CHECK IF MEF CONVERSION IS NECESSARY                   * 56490002
*                                                                     * 56520002
*********************************************************************** 56550002
         SPACE                                                          56580002
         LA    R2,PCHAREA+63           LAST COLUMN OF SCAN              56610002
         LA    R3,PCHAREA              GET PCHF INPUT BUFFER ADDRESS    56640002
JCLCHECK CLI   4(R3),C'.'              REACHED DSNAME QUALIFIER         56670002
         BE    DSNCHECK                YES-CHECK IF QUALIFIER IS 'SYS1' 56700002
         LA    R3,1(R3)                POINT TO NEXT COLUMN ON CARD     56730002
         CR    R3,R2                   REACHED COLUMN 63                56760002
         BNH   JCLCHECK                NO-CONTINUE SCAN FOR QUALIFIER . 56790002
DOWRITE  TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   56820002
         BO    R23REST                 YES - DO NOT DO THE WRITE  M4001 56850002
         STM   R2,R3,RITESAVE                                           56880002
         LA    R3,PCHAREA              GET ADDRESS OF PCHF INPUT BUFFER 56910002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              56940002
R23REST  L     R3,R3SAVE1                                         M4001 56970002
         L     R2,R2SAV                                                 57000002
         TM    MEFSW,X'80'             MEF CONTINUATION TO BE COPIED    57030002
         BNO   P2CJCL1                 NO-CONTINUE WRITING IEBCOPY JCL  57060002
         STM   R2,R3,RITESAVE                                           57090002
         LA    R3,MEFBUFF              GET ADDRESS OF MEF BUFFER        57120002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              57150002
         LM    R2,R3,RITESAVE                                           57180002
         NI    MEFSW,X'00'             TURN OFF MEF SW                  57210002
         B     P2CJCL1                 CONTINUE WRITING IEBCOPY JCL     57240002
DSNCHECK CLC   0(5,R3),SYS1            IS THE QUALIFIER 'SYS1.'         57270002
         BE    DOWRITE                 YES-WRITE CARD (NO MEF)          57300002
         LA    R3,3(R3)                POINT TO '.' IN QUALIFIER        57330002
         BAL   R2,SYSGMEF              GO RESTRUCTURE DD CARD FOR MEF   57360002
         B     DOWRITE                 WRITE CARD AND MEF CONTINUATION  57390002
         EJECT                                                          57420002
*********************************************************************** 57450002
*                                                                     * 57480002
*              READ FORWARD TILL SAVED COPY CARD IS REACHED.          * 57510002
*              THIS IS TO IGNORE PREVIOUSLY ANALYZED CONTROL          * 57540002
*              CARDS AND GET TO THE COPY CARD FOR WHICH THERE         * 57570002
*              IS A MATCH.                                            * 57600002
*                                                                     * 57630002
*********************************************************************** 57660002
         SPACE                                                          57690002
P2RF     CLC   PCHAREA,NAMESTOR        IS THIS SAVED COPY STATEMENT     57720002
         BE    P2CCOPY                 YES - WRITE COPY CARD            57750002
         CLC   PCHAREA,INCSTORE        IS THIS MATCHED SELECT STATEMENT 57780002
         BE    P2COPYEX                YES-GO TO COPY EXIT              57810002
         B     P2CJCL1                 NO-READ NEXT RECORD              57840002
         SPACE                                                          57870002
*********************************************************************** 57900002
*                                                                     * 57930002
*              SAVE MATCHED SELECT IN ORDER TO                        * 57960002
*              FIND PROPER COPY CARD AND SKIP                         * 57990002
*              INTERVENING SELECT CARDS.                              * 58020002
*                                                                     * 58050002
*********************************************************************** 58080002
         SPACE                                                          58110002
P2RB     MVC   INCSTORE(80),PCHAREA    SAVE MATCHED SELECT CARD         58140002
         BAL   R14,POINTRTN            DO A POINT                       58170002
         B     P2CJCL1                 CHECK FOR COPY CARD              58200002
         EJECT                                                          58230002
*********************************************************************** 58260002
*                                                                     * 58290002
*              OUTPUT COPY CARD IF NEEDED (GENERATE)                  * 58320002
*                                                                     * 58350002
*********************************************************************** 58380002
         SPACE                                                          58410002
*                                                                       58440002
P2CCOPY  EQU   *                                                        58470002
         TM    DUPCOPY,X'80'           IDENTICAL COPY CARD SWITCH SET   58500002
         BO    P2CJCL1                 YES-CHECK FOR SELECT CARD        58530002
         OI    DUPCOPY,X'80'           SET IDENTICAL COPY CARD SWITCH   58560002
         TM    PARM,X'80'              APPLICATION FUNCTION REQUESTED   58590002
         BO    P2CJCL1                 YES - DO NOT DO THE WRITE        58620002
         STM   R2,R3,RITESAVE                                           58650002
         LA    R3,PCHAREA              GET ADDRESS OF PCHF INPUT BUFFER 58680002
         BAL   R2,AMAWRITE             GO TO WRITE ROUTINE              58710002
         LM    R2,R3,RITESAVE                                           58740002
         B     P2CJCL1                 READ NEXT RECORD                 58770002
         SPACE                                                          58800002
*********************************************************************** 58830002
*                                                                     * 58860002
*              POSITION OF COPY CARD IS NOTED IF JCL                  * 58890002
*              HAS BEEN COPIED. THIS ALLOWS IT TO BE                  * 58920002
*              FOUND WITHOUT SEARCHING THROUGH THE                    * 58950002
*              PRECEDING CONTROL STATEMENTS. IF THE                   * 58980002
*              JCL HAS NOT BEEN COPIED, THE COPY CARD                 * 59010002
*              IS SAVED AND THE COPY SWITCH IS TURNED                 * 59040002
*              OFF (R6 SET TO 0).                                     * 59070002
*                                                                     * 59100002
*********************************************************************** 59130002
         SPACE                                                          59160002
P2COPYRT B     JCLCOPY3(R8)            IS THE JCL COPIED SWITCH SET     59190002
JCLCOPY3 B     P2STCOPY                NO - COPY JCL                    59220002
         BAL   R14,NOTERTN             YES - NOTE POSITION OF COPY CARD 59250002
P2STCOPY MVC   NAMESTOR(80),PCHAREA    SAVE COPY CARD                   59280002
         LA    R6,0                    RESET COPY SWITCH         S21995 59310002
         B     P2READ                  READ NEXT RECORD                 59340002
         EJECT                                                          59370002
*********************************************************************** 59420002
*                                                                     * 59470002
*        PART III - ASSEMBLER ROUTINE                                 * 59520002
*                                                                     * 59570002
*                                                                     * 59620002
*********************************************************************** 59670002
         SPACE 1                                                 A40797 59720002
ASMRTN   BAL   R14,NOTERTN             YES - NOTE POSITION OF    A40797 59770002
*                                      ASSEMBLY EXEC CARD        A40797 59820002
ASMCHK   OI    ASMSW,ASMMOD            INDICATE ASSEMBLY SEARCH  A40797 59870002
         B     CHKPARMS                CHECK PARAMETERS          A40797 59920002
         SPACE 1                                                 A40797 59930002
ASMCHK1  L     RA,MODTBL               POINT TO MODULE           A40797 59940002
ASMCMPM  CLC   0(8,RA),SYSLNAME        CHECK MODULE NAME MATCH   A40797 59950002
         BE    ASMFOUND                BR IF SO                  A40797 59960002
         LA    RA,10(RA)               MOVE TO NEXT MODULE ENTRY A40797 59962002
         CLI   0(RA),SPACE             Q. END OF TABLE           A40797 59964002
         BE    PGMRTN1                 YES. NO MATCH             A40797 59966002
         B     ASMCMPM                 CHECK NEXT ENTRY          A40797 59968002
         SPACE 1                                                 A40797 59968402
ASMFOUND MVI   8(RA),LETTERA           MARK ASSEMBLY MATCH       A40797 59968802
         OI    ASMSW,ASMPCH            SET ASSEM SW TO PUNCH JCL A40797 59969202
         B     RBJCL                   GO PUNCH ASSEMBLY JCL     A40797 59969602
         SPACE 1                                                 A40797 59969702
JCLCOPY4 CLC   PCHAREA(2),ENDCARD      IS THIS A /* CARD         A40797 59969802
         BE    PGMRTN1                 RESUME MAIN SEARCH        A40797 59979902
         TM    CONTSW1,EXECCONT       EXEC CONTINUATION EXPECTED Y01036 59989902
         BO    JCLREAD                 YES - BRANCH TO READ IT   Y01036 59999902
         B     JCLCOPY5                NO - USE OTHER READ       Y01036 60049902
         EJECT                                                          60099902
*********************************************************************** 60450002
*                                                                     * 60480002
*        END OF JOB ROUTINE                                           * 60510002
*              CHECK MODULE TABLE FOR MODULES THAT DID                * 60540002
*              NOT FIND ANY MATCH AND PRINT THEM                      * 60570002
*                                                                     * 60600002
*********************************************************************** 60630002
         SPACE                                                          60660002
EOJRTN   L     RA,MODTBL               OBTAIN ADDR OF MODULE NAME TABLE 60690002
         LA    R4,0                    MESSAGE HEAD NOT WRITTEN  S21995 60720002
EOJMLOOP CLI   0(RA),SPACE             END OF MODULE NAME TABLE  S21995 60750002
         BE    FILCLOSE                YES - CLOSE ALL FILES AND EXIT   60780002
         CLI   8(RA),LETTERA           CHECK IF ONLY FOUND ASMB  A40797 60790002
         BE    ASMSG                   THATS ALL - WRITE MESSAGE A40797 60800002
         CLI   8(RA),LETTERX           MATCH FOR THIS NAME       S21995 60810002
         BNE   MSGNOMOD                NO - WRITE MODULE NAME           60840002
INCREASE LA    RA,10(RA)               POINT TO NEXT NAME        S21016 60870002
         B     EOJMLOOP                CONTINUE SEARCH FOR NON-MATCHES  60900002
         SPACE                                                          60930002
*********************************************************************** 60960002
*                                                                     * 60990002
*              CLOSE ALL FILES AND RETURN TO SYSTEM                   * 61020002
*                                                                     * 61050002
*********************************************************************** 61080002
         SPACE                                                          61110002
RET16    MVI   RETCDE,RETCDE16         SET UP RETURN CODE 16     A48711 61140002
FILCLOSE  EQU   *                                               SA55373 61142002
         L     R15,BUFFADDR        ADDR OF INPUT BUFFER TO FREE SA55373 61150002
         LTR   R15,R15             IS THE ADDR ZERO?            SA55373 61160002
         BZ    FILCLOS             YES,DON'T TRY TO FREE CORE   SA55373 61162002
         LA    RA,PCHFDCB          ADDR OF INPUT DCB FOR LENGTH SA55373 61164002
         LH    R0,DCBBLKSI      INPUT BUFFER LNG USED IN GETMAIN A55373 61166002
         FREEMAIN R,LV=(0),A=BUFFADDR FREE READ BUFFERS         SA55373 61168002
FILCLOS  CLOSE (MODFDCB,,PCHFDCB,,OUTFDCB,,MSGDCB)              SA55373 61170002
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21995 61180002
         BNO   FREETBLS                NO - RETURN TO SYSTEM    SA55373 61190002
         L     R1,MODTBL               MODULE NAME TABLE ADDRESS S21995 61200002
         CLI   0(R1),X'FF'             TABLE EMPTY SWITCH SET    S21995 61230002
         BE    DELETMOD                YES-RETURN TO SYSTEM     SA55373 61260002
         MVI   BRPRMLST,CLSEDCBS       DCBS TO BE CLOSED        YA01764 61350002
         LA    R1,BRPRMLST             ADDR OF PARAMETER LIST    S21995 61380002
         L     R15,PTF01               GET ADDRESS OF AMAPTF01   S21995 61410002
         BALR  R14,R15                 AMAPTF01 (CLOSE DCBS)     S21995 61440002
DELETMOD EQU   *                   DELETE APPL FUNC MODULES     SA55373 61450002
         DELETE EPLOC=LOAD01       DELETE IMAPTF01              SA55373 61460002
         DELETE EPLOC=LOAD02       DELETE IMAPTF02              SA55373 61462002
         DELETE EPLOC=LOADOVR      DELETE IEWSZOVR              SA55373 61464002
FREETBLS EQU   *                   FREE THE WORK TABLES         SA55373 61466002
         L     R15,OVTABADR        ADDRESS OF OVERLAY TABLE     SA55373 61468002
         LTR   R15,R15             IS THERE CORE FOR TABLES?    SA55373 61468402
         BZ    RET                 NO,GO RETURN TO CALLER       SA55373 61468802
         FREEMAIN E,LV=26800,A=OVTABADR                         SA55373 61469202
         L    R15,MODTBL          STARTING ADDR OF MODULE TABLE SA55373 61469302
         SH   R15,TWO             CALC ADDR OF THE CORE TO FREE SA55373 61469502
         ST   R15,MODTBL          STORE ADDRESS FOR FREEMAIN    SA55373 61477102
         FREEMAIN E,LV=3624,A=MODTBL FREE MODULE TABLE          SA55373 61484802
         SPACE                                                          61492402
*********************************************************************** 61500002
*                                                                     * 61530002
*              STANDARD RETURN CONVENTION                             * 61560002
*                                                                     * 61590002
*********************************************************************** 61620002
         SPACE                                                          61650002
RET      L     R13,4(R13)              PTR TO CALLER SAVE AREA   S21995 61680002
         L     R14,12(R13)             RESTORE CALLER REG 13     A48711 61710002
         SR    R15,R15                 ZERO REGISTER 15          A48711 61740002
         IC    R15,RETCDE              INSERT RETURN CODE        A48711 61770002
         LM    R0,R12,20(R13)          RESTORE REGS 0 TO 12      A48711 61800002
         MVI   12(R13),X'FF'                                     S21995 61830002
         BR    R14                     RETURN VIA REGISTER 14    S21995 61860002
         EJECT                                                          61890002
*********************************************************************** 61920002
*                                                                     * 61950002
*              THIS CODE IS ENTERED WHEN AN I/O ERROR OCCURS          * 61980002
*                                                                     * 62010002
*********************************************************************** 62040002
         SPACE                                                          62070002
SYNADEXT SYNADAF ACSMETH=BSAM                                    S21995 62100002
         MVC   MSGBUFF+41(78),42(R1)   MOVE SYNAD MSG TO BUFFER  S21995 62130002
         MVC   MSGBUFF(40),MSGAREA4    MOVE MESSAGE ID TO BUFFER S21995 62160002
         OI    PRINTSW,X'80'           SET SYNAD SWITCH          S21995 62190002
         B     WRTPRINT                WRITE MESSAGE             S21995 62220002
SYNADRLS SYNADRLS                      RELEASE SYNAD BUFFER      S21995 62250002
         B      RET16                  PERMANENT I/O ERROR       A48711 62280002
         EJECT                                                          62310002
*********************************************************************** 62340002
*                                                                     * 62370002
*              THIS SECTION OF CODE BUILDS THE VARIOUS MESSAGES       * 62400002
*              REFLECTIONG DIFFERENT ERROR CONDITIONS.                * 62430002
*                                                                     * 62460002
*********************************************************************** 62490002
         SPACE                                                          62520002
NOBLKSZ  MVC   MSGBUFF(67),AMA009I     MOVE AMA009I TO BUFFER    S21995 62550002
         B     WRTPRINT                WRITE MESSAGE AND EXIT    S21995 62580002
*********************************************************************** 62610002
MESSAGE  EQU   *                                                        62640002
         MVI   SWITCH1,X'80'           MODULE NAME TBL OVERFLOW  S21995 62670002
READMOD1 GET   MODFDCB,MODAREA         FLUSH MODF INPUT          S21995 62700002
         B     READMOD1                FLUSH REMAINING INPUT     S21995 62730002
MESSAGE1 MVC   MSGBUFF(78),MSGAREA3    MSG AMA001I TO BUFFER     S21995 62760002
         B     WRTPRINT                WRITE MESSAGE AND RETURN  S21995 62790002
*********************************************************************** 62820002
MODFRITE MVC   MSGAREA+40(4),MODFDD    MOVE 'MODF' DDNAME        S21995 62850002
         B     MESSAGE2                WRITE MESSAGE AMA002I     S21995 62880002
PCHFRITE MVC   MSGAREA+40(4),PCHFDD    MOVE 'PCHF' DDNAME        S21995 62910002
         B     MESSAGE2                WRITE MESSAGE AMA002I     S21995 62940002
OUTFRITE MVC   MSGAREA+40(4),OUTFDD    MOVE 'OUTF' DDNAME        S21995 62970002
         B     MESSAGE2                WRITE MESSAGE AMA002I     S21995 63000002
MSGWRITE EQU   *                                                 S21995 63030002
         LA    R1,WTOPROG              SET UP WTO PARAMETER LIST S21995 63060002
         WTO   MF=(E,(1))              ISSUE WTO FOR 'PRINT' DD  S21995 63090002
         B     RET16                   CLOSE ALL FILES AND EXIT  A48711 63120002
WTOPROG  WTO   'AMA002I  DATA SET ASSOCIATED WITH THE //PRINT DD CARD CX63150002
               ANNOT BE OPENED',MF=L,ROUTCDE=11,DESC=6           S21995 63180002
MESSAGE2 MVC   MSGBUFF(73),MSGAREA     MSG AMA002I TO BUFFER     S21995 63210002
         B     WRTPRINT                WRITE ERROR MESSAGE       S21995 63240002
*********************************************************************** 63270002
STG1MSG  MVC   MSGBUFF(51),MSGAREA5    MOVE MESSAGE AMA004I      S21995 63300002
         B     WRTPRINT                CLOSE DCBS AND RETURN     S21995 63330002
*********************************************************************** 63360002
AMA008WR MVC   MSGBUFF(80),MODAREA     MOVE CARD IN ERROR        S21995 63390002
         OI    PRINTSW,X'08'           SET RETURN SWITCH         S21995 63420002
         B     WRTPRINT                WRITE CARD IN ERROR       S21995 63450002
AMA0080  NI    PRINTSW,X'F7'           TURN OFF RETURN SWITCH    S21995 63480002
         MVC   MSGBUFF(43),AMA008                                S21995 63510002
         B     WRTPRINT                                          S21995 63540002
*********************************************************************** 63570002
AMA011WR MVC   MSGBUFF(61),AMA011      MOVE MESSAGE AMA011I      S21016 63600002
         B     WRTPRINT                WRITE MESSAGE AND EXIT    S21016 63630002
*********************************************************************** 63660002
AMA012WR MVC   MSGBUFF(71),AMA012      MOVE MESSAGE AMA012I      S21995 63690002
         MVC   MSGBUFF+49(8),LMODETC   MOVE MODULE NAME TO BUFF  S21995 63720002
         B     WRTPRINT                WRITE ERROR MESSAGE       A45397 63750002
AMA014W1 SR    R15,R15             PREPARE TO ZERO INPUT POINTER A55373 63760002
         ST    R15,BUFFADDR       GETMAIN NOT GOOD,ZERO PTR     SA55373 63770002
AMA014W  MVC   MSGBUFF(69),AMA014I     MOVE MESSAGE AMA014I     SA55373 63780002
         SPACE                                                          63810002
*********************************************************************** 63840002
*                                                                     * 63870002
*              MESSAGE OUTPUT ROUTINE                                 * 63900002
*                                                                     * 63930002
*********************************************************************** 63960002
         SPACE                                                          63990002
WRTPRINT WRITE MSGDECB4,SF,MSGDCB,MSGBUFF                        S21995 64020002
         CHECK MSGDECB4                                          S21995 64050002
         MVC   MSGBUFF(121),MSGBUFF-1  BLANK MESSAGE BUFFER      S21995 64080002
         TM    PRINTSW,X'08'           RETURN SWITCH SET         S21995 64110002
         BO    AMA0080                 YES - RETURN TO AMA0080   S21995 64140002
         TM    PRINTSW,X'80'           SYNAD SWITCH SET          S21995 64170002
         BO    SYNADRLS                YES - RETURN TO SYNADRLS  S21995 64200002
         B     RET16                   CLOSE FILES AND EXIT      A48711 64230002
*********************************************************************** 64260002
ASMSG    CLI   RETCDE,RETCDE4          RETURN CODE MORE THAN 4   A40797 64270002
         BH    RETANOCG                YES - DO NOT CHANGE       A40797 64280002
         MVI   RETCDE,RETCDE4          SET RETURN CODE 4         A40797 64282002
RETANOCG MVC   MSGBUFF(58),AMA015I     MOVE IN MSG SKELETON      A40797 64284002
         SR    R4,R4                   RESET HEADER WRITTEN SW   A40797 64286002
         B     MSGRTNC                 GO FILL IN AND WRITE MSG  A40797 64288002
MSGNOMOD B     MODWRITE(R4)            HAS MESSAGE HEAD BEEN WRITTEN    64290002
MODWRITE B     MSGHEAD                 NO-WRITE MESSAGE HEAD AMA000I    64320002
MSGRTNC  MVC   MSGBUFF+15(8),0(RA)     MODULE NAME TO BUFFER     S21995 64350002
         WRITE MSGDECB2,SF,MSGDCB,MSGBUFF WRITE MODULE NAME      S21995 64380002
         CHECK MSGDECB2                                          S21995 64410002
         B     INCREASE                SEARCH FOR NON-MATCHES    S21995 64440002
MSGHEAD  MVC   MSGBUFF(58),MSGAREA1    MOVE MESSAGE TO BUFFER    A40797 64470002
         CLI   RETCDE,RETCDE4          RETURN CODE MORE THAN 4   A48711 64500002
         BH    RETNOCHG                YES - DO NOT CHANGE       A48711 64530002
         MVI   RETCDE,RETCDE4          SET RETURN CODE 4         A48711 64560002
RETNOCHG WRITE MSGDECB1,SF,MSGDCB,MSGBUFF WRITE MESSAGE AMA000I  A48711 64590002
         CHECK MSGDECB1                                                 64620002
         MVC   MSGBUFF(121),MSGBUFF-1  BLANK MESSAGE BUFFER      S21995 64650002
         LA    R4,4                    INDICATE MESSAGE WRITTEN  S21995 64680002
         B     MSGRTNC                 WRITE MODULE NAME                64710002
         EJECT                                                          64740002
*********************************************************************** 64770002
*                                                                     * 64800002
*              THIS ROUTINE SEARCHES THE STAGE 1 OUTPUT TAPE.         * 64830002
*              IT GOES TO THE PROPER ROUTINE AS DETERMINED            * 64860002
*              BY THE EXEC CARD FOUND.                                * 64890002
*                                                                     * 64920002
*********************************************************************** 64950002
         SPACE                                                          64980002
PGMRTN1  NI    ASMSW,TURNOFF           CLEAR ASSEMBLY SWITCH     A40797 64990002
         MVC   SYSLNAME(8),BLANK       SET BUFFER TO BLANKS      A40797 65000002
         LA    R9,PGMRTN               RESET R9 FOR SEARCH       A40797 65002002
         SPACE                                                          65004002
PGMRTN   BAL   R14,READPCH             READ RECORD(STAGE I TAPE) S21995 65010002
         LA    R3,PCHAREA              OBTAIN BUFFER ADDRESS     S21995 65040002
         CLC   0(2,R3),SLASHES         IS THIS A JCL STATEMENT   S21995 65070002
         BCR   7,R9                    NO-RETURN TO NON JCL ADDR S21995 65100002
         BAL   R2,CHKSPACE             POINT TO FIRST OPERAND    S21995 65130002
         CLC   0(4,R3),EXECCARD        IS THIS AN EXEC STATEMENT S21995 65160002
         BNE   PGMRTN                  NO  - READ NEXT RECORD    S21995 65190002
         BAL   R2,CHKSPACE             POINT TO NEXT OPERAND     S21995 65220002
         CLC   0(11,R3),IEBCOPY        IS THIS PGM=IEBCOPY       S21995 65250002
         BE    PART2                   YES - GO TO PART2         S21995 65280002
         CLC   0(5,R3),LINKSPRC        IS THIS LINKS PROCEDURE   Y01036 65370002
         BE    EXECRTN                 YES - GO TO PART1         S21995 65400002
         CLC   0(11,R3),IEHMOVE        IEHMOVE STEP              S21995 65430002
         BE    STG1MSG                 YES - INVALID TAPE - MSG  S21995 65460002
         TM    PARM,APPLFUNC           APPLICATION FUNC REQUEST  A40797 65470002
         BO    PGMRTN                  YES - READ NEXT CARD      A40797 65482002
         CLC   0(4,R3),ASMSPROC        IS THIS ASMS PROCEDURE    Y01036 65484002
         BE    ASMRTN                  YES - GO TO PART III      A40797 65486002
         B     PGMRTN                  READ NEXT RECORD          S21995 65490002
         EJECT                                                          65520002
*********************************************************************** 65550002
*                                                                     * 65580002
*       SUBROUTINE TO FIND NEXT OPERAND ON CARDS                      * 65610002
*                                                                     * 65640002
*********************************************************************** 65670002
         SPACE                                                          65700002
CHKSPACE CLI   0(R3),SPACE              CHARACTER A BLANK        S21995 65730002
         BE    CHKNOTSP                 YES - SKIP TO NON-BLANK  S21995 65760002
         LA    R3,1(R3)                                          S21995 65790002
         B     CHKSPACE                 SKIP NON-BLANKS          S21995 65820002
CHKNOTSP LA    R3,1(R3)                                          S21995 65850002
         CLI   0(R3),SPACE              CHARACTER A BLANK        S21995 65880002
         BE    CHKNOTSP                 YES - SKIP BLANKS        S21995 65910002
         BR    R2                       NO - RETURN TO CALLER    S21995 65940002
         EJECT                                                          65970002
*********************************************************************** 66000002
*                                                                     * 66030002
*              THIS ROUTINE HANDLE SYSGEN WITH THE                    * 66060002
*              MULTI-PROGRAMMING ENVIRONMENT FEATURE.                 * 66090002
*              IT IS USED TO RESTRUCTURE DD CARDS SO AS               * 66120002
*              TO MAKE THE FIRST LEVEL QUALIFIER OF EACH              * 66150002
*              DSNAME 'SYS1.'.                                        * 66180002
*                                                                     * 66210002
*********************************************************************** 66240002
         SPACE                                                          66270002
SYSGMEF  EQU   *                                                        66300002
         TM    PARM,X'80'              APPLICATION FUNC REQUEST  S21995 66330002
         BCR   1,R2                    YES-DO NOT MODIFY DD CARD S21995 66360002
         ST    R2,R2SAV2                                                66390002
         ST    R4,R4SAVE                                                66420002
         ST    R9,R9SAVE                                                66450002
         CLC   0(5,R3),SYS1            IS THE QUALIFIER 'SYS1.'         66480002
         BCR   8,R2                    YES-RETURN TO CALLER             66510002
         MVI   MEFBUFF,C' '                                             66540002
         MVC   MEFBUFF+1(79),MEFBUFF   CLEAR THE MEF BUFFER             66570002
         MVC   MEFBUFF(2),SLASHES      MOVE '//' INTO BUFFER            66600002
         MVC   MEFBUFF+15(4),CHARDSN   MOVE 'DSN=' INTO BUFFER          66630002
         MVC   MEFBUFF+19(5),SYS1      MOVE 'SYS1.' INTO BUFFER         66660002
         LA    R9,MEFBUFF+24           POINT TO DSNAME POSITION (MEF)   66690002
PERLOOP  EQU   *                                                        66720002
         LA    R3,1(R3)                POINT TO DSNAME ON CARD          66750002
         CLI   0(R3),C'.'              HAS PERIOD BEEN FOUND            66780002
         BNE   PERLOOP                 NO - CONTINUE SEARCH FOR PERIOD  66810002
         LA    R3,1(R3)                YES-POINT ONE CHAR BEYOND PERIOD 66840002
MOVEDSN  EQU   *                                                        66870002
         MVC   0(1,R9),0(R3)           MOVE DSNAME TO MEF BUFFER        66900002
         LA    R9,1(R9)                                                 66930002
         LA    R3,1(R3)                                                 66960002
         CLI   0(R3),C','              REACHED END OF DSNAME OPERAND    66990002
         BE    CHKCONT                 YES-DSNAME MOVE IS COMPLETE      67020002
         CLI   0(R3),C' '              IS NEXT CHAR A BLANK             67050002
         BNE   MOVEDSN                 NO - FINISH MOVING DSNAME        67080002
CHKCONT  EQU   *                                                        67110002
         MVC   TEMPBUFF(72),PCHAREA    PLACE CARD IN TEMPORARY BUFFER   67140002
         MVI   PCHAREA,C' '                                             67170002
         MVC   PCHAREA+1(71),PCHAREA   CLEAR CARD BUFFER                67200002
         LA    R3,TEMPBUFF                                              67230002
         LA    R4,PCHAREA                                               67260002
DSNCHK   EQU   *                                                        67290002
         CLC   0(3,R3),CHARDSN         FOUND DSNAME KEYWORD             67320002
         BE    SKIPDSN                 YES - SKIP DSNAME                67350002
         MVC   0(1,R4),0(R3)           NO-MOVE BACK TO CARD             67380002
         LA    R3,1(R3)                                                 67410002
         LA    R4,1(R4)                                                 67440002
         B     DSNCHK                  CONTINUE TO MOVE LETTERS BACK    67470002
SKIPDSN  EQU   *                                                        67500002
         BCTR  R3,0                    POINT TO BEFORE DSNAME           67530002
         CLI   0(R3),C' '              IS DSNAME FIRST ON CARD          67560002
         BNE   PASSDSN                 NO - DO NOT SET DSN FIRST SWITCH 67590002
         LA    R3,1(R3)                POINT BACK TO DSNAME             67620002
         OI    MEFSW,X'40'             INDICATE DSN FIRST ON CARD       67650002
PASSDSN  EQU   *                                                        67680002
         LA    R3,4(R3)                CYCLE PAST DSN=                  67710002
SKIPDSN1 EQU   *                                                        67740002
         CLI   0(R3),C','              REACHED END OF DSNAME OPERAND    67770002
         BE    MOVEREST                YES - MOVE REMAINDER OF CARD     67800002
         CLI   0(R3),C' '              IS THIS CHARACTER A BLANK        67830002
         BE    MOVEDONE                YES - MOVE IS COMPLETED          67860002
         LA    R3,1(R3)                                                 67890002
         B     SKIPDSN1                CONTINUE TO SKIP DSNAME OPERAND  67920002
MOVEREST EQU   *                                                        67950002
         LA    R3,1(R3)                                                 67980002
         CLI   0(R3),C' '              ANY MORE AFTER DSN               68010002
         BE    MOVECOMM                NO - DSNAME LAST ON CARD SA55374 68040002
MOVREST1 EQU   *                                                        68070002
         MVC   0(1,R4),0(R3)           MOVE REST OF DD CARD BACK TO     68100002
*                                      PCHF BUFFER                      68130002
         LA    R3,1(R3)                                                 68160002
         LA    R4,1(R4)                                                 68190002
         CLI   0(R3),C' '              FINISHED WITH MOVE OF CARD       68220002
         BNE   MOVREST1                NO - CONTINUE MOVE               68250002
         CLI   1(R3),APOSTR            APOSTROPHE AFTER BLANK    Y01036 68260002
         BE    MOVREST1                YES - CONTINUE MOVE       Y01036 68270002
         B     LOC                     YES - CHECK FOR CONTINUATION     68280002
MOVECOMM EQU   *                  MOVE IN ',' IF NEEDED         SA55374 68290002
         TM    MEFSW,X'40'        IS DSN 1ST & LAST ?           SA55374 68300002
         BNO   LOC                NO,DO NOT MOVE IN THE COMMA   SA55374 68302002
         MVI   0(R9),C','         MOVE IN CONTINUATION COMMA    SA55374 68304002
DSNCONT  EQU  *                                                         68306002
         LA    R9,MEFBUFF+14      ADDRESS OF START OF DSN IN MEF A55374 68308002
         BCTR  R4,0               DECR PTR TO PCHAREA FOR MOVE  SA55374 68308402
DSNCONT1 EQU   *                  MOVE IN DSN =                 SA55374 68308802
         LA    R9,1(R9)           POINT TO NEXT CHARACTER TO MOVE 55374 68309202
         LA    R4,1(R4)           PT TO NEXT AREA TO MOVE INTO  SA55374 68309602
         MVC   0(1,R4),0(R9)      MOVE IN NEXT CHARACTER        SA55374 68309702
         CLI   0(R9),C' '         DID WE MOVE A BLANK           SA55374 68309802
         BE    CLRSW              YES,MOVE IS COMPLETE          SA55374 68309902
         CLI   0(R9),C','         DID WE MOVE A COMMA?          SA55374 68319902
         BNE   DSNCONT1           NO,CONTINUE MOVING            SA55374 68329902
         MVI   PCHAREA+71,C'X'    MOVE IN CONTINUATION          SA55374 68333202
CLRSW    EQU   *                                                SA55374 68335202
         NI    MEFSW,X'00'             CLEAR SWITCH                     68335602
         B     LOADR2                  RETURN TO CALLER                 68336002
MOVEDONE EQU   *                                                        68336702
         TM    MEFSW,X'40'             IS DSNAME FIRST ON CARD          68340002
         BO    DSNCONT                 YES - IT'S ALSO LAST ON CARD     68370002
LOC      EQU   *                                                        68400002
         NI    MEFSW,X'00'             CLEAR SWITCH                     68430002
         BCTR  R4,0                    POINT TO LAST CHAR IN PCHAREA    68460002
         CLI   0(R4),C','              IS CONTINUATION ALREADY THERE    68490002
         BE    MOVECONT                YES - MOVE IN CONTINUATION       68520002
         LA    R4,1(R4)                                                 68550002
         MVI   0(R4),C','              MOVE COMMA TO PCHAREA FOR CONTIN 68580002
MOVECONT EQU   *                                                        68610002
         MVI   PCHAREA+71,C'X'         MOVE IN CONTINUATION CHARACTER   68640002
         BCTR  R3,0                    DECREMENT BUFFER POINTER  S21995 68670002
         CLI   0(R3),C','              CONTINUATION REQUIRED ON CARD    68700002
         BNE   MEF                     NO - RETURN               S21995 68730002
         MVI   MEFBUFF+71,C'X'         MAKE CONTINUATION ON NEW CARD    68760002
         MVI   0(R9),C','              MOVE IN COMMA FOR CONTINUATION   68790002
MEF      EQU   *                                                        68820002
         OI    MEFSW,X'80'             INDICATE MEF                     68850002
LOADR2   EQU   *                                                        68880002
         L     R2,R2SAV2                                                68910002
         L     R4,R4SAVE                                                68940002
         L     R9,R9SAVE                                                68970002
         L     R3,R3SAVE1              RESTORE R3                Y01036 68980002
         BR    R2                      RETURN TO CALLER                 69000002
         EJECT                                                          69150002
*********************************************************************** 69180002
*                                                                     * 69210002
*       THE FOLLOWING WRITE IS A COMMON WRITE FOR THE OUTF FILE       * 69240002
*                                                                     * 69270002
*********************************************************************** 69300002
         SPACE                                                          69330002
AMAWRITE WRITE  OUTFDECB,SF,OUTFDCB,(R3)                                69360002
         CHECK  OUTFDECB                                                69390002
         TM    PARM,APPLFUNC           APPLICATION FUNCTION      Y01006 69392002
         BCR   1,2                     YES - BRANCH BACK         Y01006 69394002
         MVC   MSGBUFF(80),0(R3)       MOVE TO OUTPUT BUFFER     Y01006 69400002
         WRITE MSGDECB3,SF,MSGDCB,MSGBUFF  WRITE TO MSG DATA SET Y01006 69410002
         CHECK MSGDECB3                                          Y01006 69412002
         MVC   MSGBUFF(121),MSGBUFF-1  CLEAR BUFFER              Y01006 69414002
         BR   R2                       RETURN TO THE CALLER      Y01006 69420002
         EJECT                                                          69450002
*********************************************************************** 69480002
*                                                                     * 69510002
*        READ STAGE 1 TAPE AND/OR MOVE LOGICAL RECORD INTO PCHAREA    * 69540002
*                                                                     * 69570002
*********************************************************************** 69600002
         SPACE                                                          69630002
READPCH  STM   14,12,READSTOR          SAVE THE REGISTERS               69660002
         LA    RA,PCHFDCB              GET PCHFDCB ADDRESS FOR BASE     69690002
         TM    POINTBIT,X'80'          HAS POINT JUST BEEN DONE         69720002
         BO    POINTRD                 YES - READ THE POINTED BLOCK     69750002
         SR    R2,R2                                                    69780002
         C     R2,TEMPCNT              SHOULD A NEW BLOCK BE READ       69810002
         BNE   MOVTOPCH                NO - MOVE RECORD TO PCHAREA      69840002
POINTRD  L     R3,BUFFADDR             LOAD ADDRESS OF READ BUFFER      69870002
         READ  PCHDECB,SF,PCHFDCB,(3)  READ A BLOCK                     69900002
         CHECK PCHDECB                                                  69930002
         SPACE                                                          69960002
*********************************************************************** 69990002
*       USE RESIDUAL COUNT FOR CALCULATING NO. OF LOGICAL RECS  A38341* 70020002
*       SHORT BLOCKS MAY OCCUR DUE TO CONCATENATED INPUT        A38341* 70050002
*       ALSO, RESET RECCNT TO REFLECT NO. OF LOGICAL RECS READ  A38341* 70080002
*                                                                     * 70110002
*********************************************************************** 70140002
         SPACE                                                          70170002
         L     R4,DCBIOBA              GET THE IOB ADDRESS              70200002
         LH    R7,22(R4)               LOAD RESIDUAL COUNT FROM CSW     70230002
         LH    R8,DCBLRECL             GET LRECL FOR DIVISOR            70260002
         LH    R9,DCBBLKSI             GET THE BLKSIZE                  70290002
         SR    R9,R7                   SUBTRACT RESIDUAL FROM BLKSIZE   70320002
         LR    R7,R9                   R7 = NUMBER OF BYTES IN BUFFER   70350002
         SR    R6,R6                   CLEAR DIVIDEND REG               70380002
         DR    R6,R8                   DIVIDE RESIDUAL COUNT BY LRECL   70410002
         ST    R7,RECCNT               NO. OF LOGICAL RECS READ  A38341 70440002
         TM    POINTBIT,X'80'          HAS POINT BEEN DONE       A38341 70470002
         BO    MOVTOPCH                YES- DON'T CHANGE TEMPCNT A38341 70500002
         ST    R7,TEMPCNT              INIT NO. OF RECS REMAINING       70530002
MOVTOPCH L     R5,RECCNT               GET NUMBER OF LOG RECS LAST READ 70560002
         S     R5,TEMPCNT              GET MULTIPLICATION FACTOR        70590002
         L     R4,BUFFADDR             LOAD THE BUFFER ADDRESS          70620002
         SR    R6,R6                   CLEAR REGISTERS                  70650002
         LH    R7,DCBLRECL             GET THE LOGICAL RECORD LENGTH    70680002
         MR    R6,R5                   R7 CONTAINS INDEX INTO BUFFER    70710002
         AR    R4,R7                   ADD INDEX TO START OF BUFFER     70740002
         LH    R6,DCBLRECL             LOAD THE LOGICAL RECORD LENGTH   70770002
         BCTR  R6,0                    DECREMENT BY 1 FOR THE EXECUTE   70800002
         EX    R6,MOVLRECL             MOVE THE LOGICAL REC TO PCHAREA  70830002
         L     R8,TEMPCNT              PICK UP COUNT OF REMAINING RECS  70860002
         BCTR  R8,0                    DECREMENT TEMPCNT FOR REC MOVED  70890002
         ST    R8,TEMPCNT              AND RESTORE NEW COUNT            70920002
         NI    POINTBIT,X'00'          TURN OFF POINT INDICATOR         70950002
         LM    14,12,READSTOR          RESTORE THE REGS                 70980002
         BR    R14                     RETURN TO CALLER                 71010002
         EJECT                                                          71040002
*********************************************************************** 71070002
*                                                                     * 71100002
*    THIS SUBROUTINE DOES A NOTE TO SAVE THE LAST BLOCK ADDRESS READ  * 71130002
*                                                                     * 71160002
*********************************************************************** 71190002
         SPACE                                                          71220002
NOTERTN  STM   14,12,READSTOR          SAVE ALL REGISTERS               71250002
         NOTE  PCHFDCB                 NOTE THE LAST BLOCK READ         71280002
         ST    R1,BLKADR               SAVE THE BLOCK ADDRESS FOR POINT 71310002
         L     R2,TEMPCNT              LOAD NUMBER OF RECORDS LEFT      71340002
         LA    R2,1(R2)                POINT TO RECORD JUST NOTED       71370002
         ST    R2,NOTECNT              SAVE IT FOR A LATER READ OF REC  71400002
         LM    14,12,READSTOR          RESTORE THE REGISTERS            71430002
         BR    R14                     RETURN TO THE CALLER             71460002
         SPACE                                                          71490002
*********************************************************************** 71520002
*                                                                     * 71550002
*  THIS SUBROUTINE DOES A POINT TO POSITION A BLK ADDRESS THAT WAS    * 71580002
*  RETRIEVED FROM A PREVIOUS NOTE.  THE TEMPCNT IS THEN MADE EQUAL    * 71610002
*  TO THE NOTECNT SO THAT AFTER THE NEXT READ, THE REQUIRED RECORD    * 71640002
*  FOR THE POINT WILL BE MOVED INTO PCHAREA.                          * 71670002
*                                                                     * 71700002
*********************************************************************** 71730002
         SPACE                                                          71760002
POINTRTN STM   14,12,READSTOR          SAVE ALL REGISTERS               71790002
         POINT PCHFDCB,BLKADR          POINT TO BLK FROM PREVIOUS NOTE  71820002
         L     R2,NOTECNT              MAKE THE TEMPCNT                 71850002
         ST    R2,TEMPCNT              EQUAL TO THE NOTECNT             71880002
         OI    POINTBIT,X'80'          INDICATE POINT HAS BEEN DONE     71910002
         LM    14,12,READSTOR          RESTORE THE REGISTERS            71940002
         BR    R14                     RETURN TO THE CALLER             71970002
         EJECT                                                          72000002
*********************************************************************** 72030002
*                                                                     * 72060002
*              EQUATES                                                * 72090002
*                                                                     * 72120002
*********************************************************************** 72150002
         SPACE                                                          72180002
R0       EQU   0                                                        72210002
R1       EQU   1                                                        72240002
R2       EQU   2                       BAL  CHKSPACE RTN                72270002
R3       EQU   3                       SCAN THRU INPUT                  72300002
R4       EQU   4                       CHANGE-REPLACE RTN               72330002
R5       EQU   5                       STORE CHANGE-REPLACE             72360002
R6       EQU   6                       ENTRY-ALIAS SW                   72390002
R7       EQU   7                       SCAN SYSLMOD                     72420002
R8       EQU   8                       JCL-SW                           72450002
R9       EQU   9                       SCAN THRU OUTPUT                 72480002
RA       EQU   10                      STORE MODULE NAMES               72510002
RB       EQU   11                      SCAN THRU MOD WORK               72540002
R11      EQU   11                      BASE REGISTER                    72570002
R12      EQU   12                      BASE REGISTER                    72600002
R13      EQU   13                      SAVE AREA POINTER                72630002
R14      EQU   14                                                       72660002
R15      EQU   15                                                       72690002
TURNOFF  EQU   X'00'                   TO TURN OFF FLAGS                72720002
SPOOLUT2 EQU   X'01'                   SPOOL TO WORKFILE FLAG           72750002
SPOOLI   EQU   X'02'                   SPOOL TO OUTF FLAG               72780002
LINK     EQU   X'03'                   INVOKE SERVICE PROG FLAG  Y01983 72840002
CLSEDCBS EQU   X'04'                   CLOSE DCBS FLAG           Y01983 72870002
SPOOLS   EQU   X'05'                   SPOOL OBJ FOR MOVE/COPY MODULE   72900002
*                                                                Y01983 72910002
PARMCHEK EQU   X'06'                   CHECK FOR PARAMETERS FLAG Y01983 72930002
OPENBIT  EQU   X'10'                   USED TO TEST DCB OPEN FLAG       72960002
LETTERX  EQU   C'X'                                              S21995 72990002
ABLANK   EQU   C' '                                              S21995 73020002
PARNLEFT EQU   C'('                                              S21995 73050002
LETERS   EQU   C'S'                                              S21995 73080002
LETTERN  EQU   C'N'                                              S21995 73110002
LETERC   EQU   C'C'                                              S21995 73140002
LETTERR  EQU   C'R'                                              S21995 73170002
LETTERA  EQU   C'A'                                              S21995 73200002
LETTERE  EQU   C'E'                                              S21995 73230002
PARNRITE EQU   C')'                                              S21995 73260002
COMMA1   EQU   C','                                              S21995 73290002
SPACE    EQU   C' '                                              S21995 73320002
RETCDE16 EQU   X'10'                   TO SET RETURN CODE        A48711 73350002
RETCDE4  EQU   X'04'                   TO SET RETURN CODE        A48711 73380002
EXECCONT EQU   X'80'                   EXEC CONTINUATION SWITCH  Y01036 73390002
HEX00    EQU   X'00'                                             Y01036 73400002
APPLFUNC EQU   X'80'              APPLICATION FUNCTION REQUESTED Y01036 73402002
ASMMOD   EQU   X'01'                   WORKING ON ASM SEARCH     A40797 73406002
ASMPCH   EQU   X'02'                   NOW PUNCHING ASM JCL      A40797 73408002
DSSSW    EQU   X'80'                   DSS SWITCH                Y01045 73408402
APOSTR   EQU   C''''                   APOSTROPHE                Y01036 73408802
CHRCONT  EQU   X'08'                 CHANGE-REPLACE CONTINUATION Y01983 73409202
CPYDSS   EQU   X'08'                   DSS SWITCH                Y01045 73409602
         SPACE                                                          73410002
*********************************************************************** 73440002
*                                                                     * 73470002
*              CONSTANTS AND STORAGE ALLOCATION                       * 73500002
*                                                                     * 73530002
*********************************************************************** 73560002
         SPACE                                                          73590002
POINTBIT DC    X'00'                   POINT INDICATOR                  73620002
SWITCH1  DC    X'00'                                                    73650002
TWO      DC    H'2'                    ADJUSTS ADDRESS TO FREE  SA55373 73660002
         DS    0H                                                       73680002
MOVLRECL MVC   PCHAREA(0),0(R4)        MOVE RECORD TO PCHAREA           73710002
PRINTSW  DC    X'00'                                             S21995 73740002
MEFSW    DC    X'00'                                             S21995 73770002
READSTOR DS    15F                     INTERNAL REGISTER SAVE AREA      73800002
BUFFADDR DC    F'0'                    ADDRESS OF READ BUFFER           73830002
RECCNT   DC    F'0'                    NUMBER OF LOGICAL RECORDS READ   73860002
TEMPCNT  DC    F'0'                    NUMBER OF LOG RECS REMAINING     73890002
NOTECNT  DC    F'0'                    INDEX INTO BUFFER FOR NOTED REC  73920002
TABLEND  DC    F'0'                                              S21995 73950002
IDENTEND DC    F'0'                                              S21016 73980002
OVLYEND  DC    F'0'                                              S21995 74010002
RITESAVE DS    3F                                                S21995 74070002
BLKADR   DS    F                                                        74100002
ZEROES   DC    C'00000000'                                        M4757 74130002
DSNPNTR  DS    F                                                        74160002
TEMPBUFF DS    CL80                                                     74190002
MEFBUFF  DS    CL80                                                     74220002
R9SAVE   DS    F                                                        74250002
R2SAV    DS    F                                                        74280002
R3SAV    DS    F                                                        74310002
R4SAVE   DS    F                                                        74340002
R5SAVE   DS    F                                                        74370002
R9SAV    DS    F                                                        74400002
MODSPACE DC    C' '                                                     74430002
MODAREA  DS    CL80                    MODF INPUT BUFFER                74460002
         DC    C'? '                   USED TO END BLANK INPUT   S21995 74490002
SSIAREA  DC    CL80' '                                           S21995 74520002
PCHAREA  DS    CL80                                                     74550002
BLANKS   DC    X'4040404040404040'     USED TO COMPLETE MVC FROM        74580002
*                                 SYSLMOD AREA--MUST BE AFTER PCHAREA   74610002
INCSTORE DS    CL80                                                     74640002
NAMESTOR DS    CL80                                                     74670002
OUTAREA1 DS    0CL80                                                    74700002
         DC    C'  '                                                    74730002
         DC    C'INCLUDE '                                              74760002
LIBETC   DC    C' '                                                     74790002
LIBETCB  DS    CL69                                                     74820002
OUTAREA2 DS    0CL80                                                    74850002
         DC    C'  INCLUDE  SYSLMOD('                                   74880002
LMODETC  DC    C' '                                                     74910002
LMODETCB DS    CL70                                                     74940002
P2OUT    DS    0CL80                                                    74970002
         DC    C'  SELECT '                                       M0868 75000002
P2MBR    DC    C'MEMBER=('                                        M0868 75030002
P2DATA   DS    CL63                                                     75060002
BLANKSW  DC    C' '                                                     75090002
COMMAR   DC    C',R))'                                                  75120002
SYS1     DC    C'SYS1.'                                                 75150002
MODFDD   DC    C'MODF'                                                  75180002
PCHFDD   DC    C'PCHF'                                                  75210002
OUTFDD   DC    C'OUTF'                                                  75240002
         DC    C' '                    MUST BE BEFORE MSGBUFF    S21995 75270002
MSGBUFF  DC    CL121' '                                          S21995 75300002
MSGAREA  DC    C'AMA002I  DATA SET ASSOCIATED WITH THE //         DD C' 75330002
         DC    C'ARD CANNOT BE OPENED'                           S21995 75360002
SSICARD  DC    C'SETSSI'                                         S21995 75390002
MSGAREA1 DC    C'AMA000I  THE FOLLOWING MODULE(S) DID NOT FIND A MATCH' 75420002
         DC    CL5'     '              BLANK AFTER MSG AMA015I   A40797 75430002
MSGAREA3 DC    C'AMA001I  INPUT MODULE TABLE HAS OVERFLOWED '    S21995 75450002
         DC    C'BREAK INPUT INTO TWO JOBS AND RERUN'            S21995 75480002
MSGAREA4 DC    C'AMA003I UNCORRECTABLE I/O ERROR OCCURRED'       S21995 75510002
         DS    0F                                                S21995 75540002
MSGAREA5 DC    C'AMA004I  UNIDENTIFIED FORMAT ON SYSGEN STAGE 1 TAPE'   75570002
AMA008   DC    C'AMA008I  THE PRECEDING STATEMENT IS INVALID'    S21995 75600002
AMA009I  DC    C'AMA009I  AMAPTFLE TERMINATED; NO BLOCKSIZE ON THE '    75630002
         DC    C'PCHF DD STATEMENT.'                             S21995 75660002
AMA011   DC    C'AMA011I  NUMBER OF IDENTIFY CARDS IN INPUT STREAM '    75690002
         DC    C'EXCEEDS 150'                                    S21016 75720002
AMA012   DC    C'AMA012I  OVERLAY STRUCTURE DEFINITION FOR MODULE '     75750002
         DC    C'         EXCEEDS LIMIT'                         S21995 75780002
AMA014I  DC    C'AMA014I INSUFFICIENT MAIN STORAGE FOR PROCESSING,'     75810002
         DC    C' AMAPTFLE TERMINATED'                           A45397 75840002
AMA015I  DC    CL58'AMA015I MODULE XXXXXXXX FOUND MATCH ON ASSEMBLY STEX75850002
               P ONLY.'                                          A40797 75860002
JOBCARD  DS    0CL80                                                    75870002
         DC    C'//SYSGENS JOB  1,''SYSTEM GENERATION'',MSGLEVEL=(1,1)' 75900002
         DC    C'                             '                         75930002
MODSTORE DS    CL8                                                      75960002
SLASHES  DC    C'//'                                                    75990002
BLANK    DC    C'        '                                              76020002
OVLYREC  DS    0F                                                       76050002
OVNOGO   DC    X'00'                   OVERLAY NO GO SWITCH      S21995 76080002
         DC    AL3(0)                  ADDRESS OF OVERLAY TABLE  S21995 76110002
SYSLSAVE DS    CL80                    SAVE AREA FOR "/*" OUTPUT        76140002
CONTSW1  DC    X'00'                   SYSLMOD CONTINUATION SWITCH      76170002
CONTSW2  DC    X'00'                   INDICATES AN OVERLAY/INSERT CARD 76200002
*                                      HAS A CONTINUATION/COMMENT CARD  76230002
NAMESWCH DC    X'00'                   USED TO INDICATE "NAME" WRITTEN  76260002
SLASHSW  DC    X'00'                   USED TO NOTIFY THE NAME ROUTINE  76290002
*                                      THAT IT WAS ENTERED FROM THE /*  76320002
*                                      ROUTINE AND MUST RETURN          76350002
R2SAV2   DS    F                                                        76380002
SAVE4    DS    F                                                        76410002
SAVE5    DS    F                                                        76440002
R3SAVE1  DC    F'0'                                                     76470002
R3SAV2   DC    F'0'                                              Y01036 76480002
SYSLNAME DC    C'           '          MEMBER NAME(R) AREA              76500002
R9SAVE1  DC    F'0'                                                     76530002
IEHMOVE  DC    C'PGM=IEHMOVE'                                    995200 76560002
AOVLYREC DC    F'14800'                LENGTH OF OVLYREC BUFFER  S21995 76590002
IDENTSZ  DC    F'12000'                LENGTH OF IDENTIFY TABLE  S21016 76620002
AMODTBL  DC    F'1500'                 LENGTH OF MODTBL BUFFER   S21016 76650002
ASSITBL  DC    F'1200'                 LENGTH OF SSITABLE BUFFER        76680002
IDENTBL  DC    F'0'                    IDENTIFY TABLE ADDRESS    S21016 76710002
IDENTIFY DC    C'IDENTIFY'             CHECK FOR IDENTIFY CARDS  S21016 76740002
FIRSTNEW DC    X'00'                   FIRST,NEW NAME CARD SW    S21016 76770002
IEBCOPY  DC    C'PGM=IEBCOPY'                                           76800002
CHGRPSTR DC    F'0'                                                     76830002
REPLACE  DC    C'(R) '                                                  76860002
TEN      DC    F'10'                                             S21995 76890002
CHARDSN  DC    C'DSN='                                                  76950002
NAMECARD DC    C'NAME '                                                 76980002
CHARINS  DC    C'INS'                                                   77010002
CHARINC  DC    C'INC'                                                   77040002
INSERTCD DC    C' INSERT '                                              77070002
PAGECD   DC    C'PAGE'                                           X01983 77100002
ORDERCD  DC    C'ORDER'                                          X01983 77130002
APFCD    DC    C'SETCODE'                                        Y01048 77140002
EXECCARD DC    C'EXEC'                                                  77190002
LINKSPRC DC    C'LINKS'                                          Y01036 77240002
ASMSPROC DC    C'ASMS'                                           Y01036 77242002
MODPARM  DC    C'MOD='                                           Y01036 77244002
NPARM    DC    C'N='                                             Y01036 77246002
P1PARM   DC    C'P1='                                            Y01036 77248002
P2PARM   DC    C'P2='                                            Y01036 77248402
SYS1BLK  DC    C'SYS1 '                                          Y01036 77248802
SYS1COM  DC    C'SYS1,'                                          Y01036 77249202
DSSDNME  DC    C'PARMLIB'              DSS DDNAME                Y01045 77249602
         DC    C'('                                              Y01045 77257202
DSSMEMB  DC    C'IQAORDER'             DSS PARMLIB MEMBER NAME   Y01045 77264802
         DC    C')'                                              Y01045 77266802
OVCARD   DC    C'OV'                                             S21995 77272402
ENDCARD  DC    C'/*'                                                    77280002
DUPCOPY  DC    X'00'                                                    77340002
PARM     DC    X'00'                                                    77370002
ASMSW    DC    X'00'                   ASSEMBLY CONTROL SWITCH   A40797 77380002
         DS    0F                                                       77400002
BRPRMLST DC    X'00'                   BRANCH SETTINGS FOR PTF01        77430002
IDENTCON DC    X'00'                   IDENTIFY CONT. SWITCH     S21016 77460002
RETCDE   DC    X'00'                   RETURN CODE SAVE AREA     A48711 77490002
COMSW    DC    X'00'                   SWITCHES                  Y01045 77500002
         DC    A(MODSTORE)             ADDR OF MODULE NAME BUFFER       77520002
OVTABADR DC    F'0'                    ADDR OF OVERLAY TABLE      M4000 77550002
PTF01    DS    F                       ENTRY POINT OF AMAPTF01          77580002
PTF02    DS    F                       ENTRY POINT OF AMAPTF02          77610002
PCH      DC    A(PCHAREA)              ADDR OF PCHAREA BUFFER           77640002
MODAR    DC    A(MODAREA)              ADDR OF MODAREA BUFFER           77670002
OUTFCB   DC    A(OUTFDCB)              ADDR OF OUTFDCB                  77700002
SYNADADR DC    A(SYNADEXT)             ADDR OF SYNAD ROUTINE            77730002
DDMSG    DC    A(MSGAREA)              ADDR OF MSGAREA                  77760002
PRINTDCB DC    A(MSGDCB)               ADDR OF MSGDCB                   77790002
SELNAME  DC    F'0'                    ADDR OF MODULE NAME        M4000 77820002
SSISAVE  DC    F'0'                    ADDR OF FOUND MODULE       M4000 77850002
MSGRITE  DC    A(MESSAGE2)             ADDR OF OPEN MESSAGE ROUTINE     77880002
MODTBL   DC    F'0'                    ADDR OF MODULE NAME TABLE  M4000 77910002
SSITABLE DC    F'0'                    ADDR OF SSI TABLE          M4000 77940002
PARMPTR  DS    F                                                        77970002
CLOSEADR DC    A(FILCLOSE)             ADDR OF CLOSE DCBS ROUTINE       78000002
LOADOVR  DC    C'IEWSZOVR'                                       A48079 78010002
LOAD01   DC    C'AMAPTF01'                                              78030002
LOAD02   DC    C'AMAPTF02'                                              78060002
SCSAVE   DS    9D                                                       78070002
PTCHAREA DC    174H'0'                 PATCH AREA FOR AMAPTFLE   Y01983 78090002
         DS    0F                                                S21995 78120002
MODFDCB  DCB   DSORG=PS,MACRF=GM,DDNAME=MODF,LRECL=80,RECFM=FB,        C78150002
               EODAD=ENDMOD,SYNAD=SYNADEXT                       S21995 78180002
PCHFDCB  DCB   DSORG=PS,MACRF=RP,DDNAME=PCHF,RECFM=FB,LRECL=80,        C78210002
               SYNAD=SYNADEXT,EODAD=EOJRTN                       S21995 78240002
OUTFDCB  DCB   DSORG=PS,MACRF=(W,R),DDNAME=OUTF,BLKSIZE=80,RECFM=F,    C78270002
               SYNAD=SYNADEXT                                    S21995 78300002
MSGDCB   DCB   DSORG=PS,MACRF=W,DDNAME=PRINT,BLKSIZE=121,RECFM=F,      X78330002
               SYNAD=SYNADEXT                                    S21995 78360002
         DCBD  DSORG=PS                                          S21995 78390002
         END                                                            78420002
./  ADD  SSI=31970593,NAME=AMAPTF01
         TITLE 'AMAPTF01 - PTF APPLICATION FUNCTION SERVICE PROGRAM'    00010000
*    GENERATE (EJECT);                                                  00020000
         EJECT                                                          00030000
*                                                                       00040000
* AMAPTF01:                                                             00050000
*    PROC;                                                              00060000
         LCLA  &T,&SPN                                            0002  00070000
.@001    ANOP                                                     0002  00080000
AMAPTF01 CSECT ,                                                  0002  00090000
         STM   @E,@C,12(@D)                                       0002  00100000
         BALR  @B,0                                               0002  00110000
@PSTART  DS    0H                                                 0002  00120000
         USING @PSTART+00000,@B                                   0002  00130000
         ST    @D,@SAV001+4                                       0002  00140000
         LA    @F,@SAV001                                         0002  00150000
         ST    @F,8(0,@D)                                         0002  00160000
         LR    @D,@F                                              0002  00170000
*    DECLARE                                                            00180000
*          AMASPUT2 LABEL;                                              00190000
*    DECLARE                                                            00200000
*          AMARDOBJ LABEL GENERATED;                                    00210000
*    DECLARE                                                            00220000
*          SYSUTDCB LABEL GENERATED;                                    00230000
*    DECLARE                                                            00240000
*          AMACLOSE LABEL GENERATED;                                    00250000
*    DECLARE                                                            00260000
*          AMAIDCHK LABEL;           /* S21016                        * 00270000
*    DECLARE                                                            00280000
*          AMAIDBL LABEL;            /* S21016                        * 00290000
*    DECLARE                                                            00300000
*          OPENREG REGISTER(3) PTR(31); /* DCB ADDRESS REGISTER       * 00310000
*    DECLARE                                                            00320000
*          OPENBIT BIT(1) INIT('0'B); /* FIRST TIME ENTRY FLAG        * 00330000
*    DECLARE                                                            00340000
*          RETCODE REGISTER(15);                                        00350000
*    DECLARE                                                            00360000
*          LSTPTR REGISTER(1) PTR(31); /* PARAMETER LIST REGISTER     * 00370000
*    DECLARE                                                            00380000
*          LSTPTRSV REGISTER(5) PTR(31); /* PARAMETER LIST POINTER      00390000
*                                       M3990                         * 00400000
*    DECLARE                                                            00410000
*          I REGISTER(6) PTR(31);    /* COLUMN COUNTER S21995         * 00420000
*    RESTRICT (LSTPTR,OPENREG,LSTPTRSV,I); /* S21995                  * 00430000
*    DECLARE                                                            00440000
*          1 PRMLST BASED(LSTPTRSV), /* PTFLE PARAMETER LIST M3990    * 00450000
*            2 BRFIELD PTR(8),       /* INDEX FOR FUNCTIONAL BRANCH   * 00460000
*            2 IDENTCON PTR(8),      /* IDENTIFY CONT. SWITCH M0861   * 00470000
*            2 RETCDE PTR(8),        /* RETURN CODE SAVE AREA   A48711* 00480000
*            2 COMSW PTR(8),         /* SWITCHES                Y01045* 00490000
*            2 MODSTORE PTR(31),     /* ADDRESS OF MATCHED MOD NAME   * 00500000
*            2 OVTABADR PTR(31),     /* ADDRESS OF OVERLAY TABLE      * 00510000
*            2 PTF01 PTR(31),        /* ENTRY POINT OF AMAPTF01       * 00520000
*            2 PTF02 PTR(31),        /* ENTRY POINT OF AMAPTF02       * 00530000
*            2 PCHAREA PTR(31),      /* STAGE 1 INPUT BUFFER          * 00540000
*            2 MODAREA PTR(31),      /* CONTROL STMNT INPUT BUFFER    * 00550000
*            2 OUTFDCB PTR(31),      /* ADDR OF OUTFDCB               * 00560000
*            2 SYNADEXT PTR(31),     /* ADDR OF AMAPTFLE SYNAD RTN    * 00570000
*            2 MSGAREA PTR(31),      /* ADDR OF ERROR MESSAGE BUFFER  * 00580000
*            2 PRINTDCB PTR(31),     /* ADDR OF PRINTDCB IN AMAPTFLE  * 00590000
*            2 SELNAME PTR(31),      /* ADDR OF SYSTEM MODULE NAME    * 00600000
*                                    /* ON THE SELECT STATEMENT       * 00610000
*            2 SSISAVE PTR(31),      /* ADDR OF MATCHED MODULE        * 00620000
*                                    /* IN MODULE NAME TABLE          * 00630000
*            2 MESSAGE2 PTR(31),     /* ADDR OF MESSAGE WRITE RTN     * 00640000
*            2 MODTBL PTR(31),       /* ADDR OF MODULE NAME TABLE     * 00650000
*            2 SSITABLE PTR(31),     /* ADDR OF SSI TABLE             * 00660000
*            2 PARMPTR PTR(31),      /* ADDR OF EXEC PARM FIELD       * 00670000
*            2 FILCLOSE PTR(31);     /* ADDR OF FILCLOSE RTN          * 00680000
*    DECLARE                                                            00690000
*          AMAPTF02 ENTRY BASED(PTF02);                                 00700000
*    DECLARE                                                            00710000
*          DDMSGOUT CHAR(4) INIT('OUTF'); /* OUTF DDNAME              * 00720000
*    DECLARE                                                            00730000
*          DDMSG CHAR(6) INIT('SYSUT2'); /* SYSUT2 DDNAME             * 00740000
*    DECLARE                                                            00750000
*          DDSYSL CHAR(7) INIT('SYSLMOD'); /* SYSLMOD DDNAME M4012    * 00760000
*    DECLARE                                                            00770000
*          MODSTRBF CHAR(8) BASED(MODSTORE); /* MODULE NAME SAVE      * 00780000
*                                    /* FOR TABLE COMPARE             * 00790000
*    DECLARE                                                            00800000
*          NAMMATCH PTR(8) INIT(0);  /* MODULE NAME MATCH FOR SYSUT2  * 00810000
*                                                                       00820000
* /******************************************************************** 00830000
* /* THE FOLLOWING IS A BRANCH TABLE CONSISTING OF SIX SUBROUTINE     * 00840000
* /* ADDRESSES.  ONE OF THESE ADDRESSES INDEXED BY BRFIELD CAUSES     * 00850000
* /* ENTRY INTO THAT SUBROUTINE.                                      * 00860000
*                                                                       00870000
*    DECLARE                                                            00880000
*          BRTABLE(6) PTR(31)                                           00890000
*                INIT(ADDR(AMAOPEN),ADDR(AMASPOBJ),                     00900000
*          ADDR(AMALINK),ADDR(AMACLOSE),ADDR(AMASPS),                   00910000
*          ADDR(AMALEPRM));           /*                        Y01045* 00920000
*    DECLARE                                                            00930000
*          MSGBUF CHAR(121);         /* A MESSAGE BUFFER              * 00940000
*    DECLARE                                                            00950000
*          UT2OUT CHAR(80);          /* INPUT BUFFER FOR SYSUT2       * 00960000
*    DECLARE                                                            00970000
*          DUMFIELD CHAR(80) BASED(MODAREA); /* MODAREA BUFF IN PTFLE * 00980000
*    DECLARE                                                            00990000
*          TTRZ CHAR(4) INIT(' ') BDY(WORD); /* NOTE ADDRESS          * 01000000
*    DECLARE                                                            01010000
*          ENDPARM CHAR(1);          /* END OF EXEC CARD PARAMETERS     01020000
*                                       M4011                         * 01030000
*    DECLARE                                                            01040000
*          BLDLFLD CHAR(72) BDY(HWORD) INIT(' '); /* BLDL PARAMETER     01050000
*                                       LIST                          * 01060000
*                                    /* FOR PTF02 AND OPT LIST FOR      01070000
*                                       L.E. M3999                    * 01080000
*    DECLARE                                                            01090000
*          PTF02ADR PTR(31);         /* ADDR OF AMAPTF02              * 01100000
*                                                                       01110000
* /******************************************************************** 01120000
* /*    THE FOLLOWING IS A NAME CARD THAT AMAPTF01 MUST GENERATE      * 01130000
* /*    TO BUILD A SYSLIN DATA SET FOR A MODULE THAT WAS              * 01140000
* /*    ORIGINALLY COPIED INTO THE SYSTEM AT SYSGEN TIME.             * 01150000
*                                                                       01160000
*    DECLARE                                                            01170000
*          1 NAMECARD,                                                  01180000
*            2 NME CHAR(10) INIT('     NAME '),                         01190000
*            2 MDN CHAR(11);         /* MODULE NAME WILL BE MOVED IN    01200000
*                                       M4000                         * 01210000
*    DECLARE                                                            01220000
*          REP CHAR(3) INIT('(R)');  /* M4000                         * 01230000
*    DECLARE                                                            01240000
*          NEWNAME CHAR(1) INIT('00'X); /* MODULE NAME SWITCH M4014   * 01250000
*    DECLARE                                                            01260000
*          IDFOUND CHAR(1) INIT('80'X); /* IDENTIFY FOUND SW S21016   * 01270000
*    DECLARE                                                            01280000
*          1 ALIASCD,                /* ALIAS CARD FOR M4014          * 01290000
*            2 * CHAR(7) INIT(' ALIAS '), /* COPIED AT SYSGEN M4014   * 01300000
*            2 ALIASNM CHAR(8);      /* WITH ALIASES M4014            * 01310000
*    DECLARE                                                            01320000
*          1 SSICARD,                                                   01330000
*            2 SETSSI CHAR(12) INIT('     SETSSI '),                    01340000
*            2 SSIINFO CHAR(8);      /* SETSSI CARD FOR COPIED MODULES* 01350000
*    DECLARE                                                            01360000
*          SELBUF CHAR(8) BASED(SELNAME); /* MOD NAME ON SELECT         01370000
*                                       STATEMNT                      * 01380000
*    DECLARE                                                            01390000
*          1 PRMFIELD BASED(PARMPTR),                                   01400000
*            2 PARMLEN PTR(16),      /* LENGTH OF PARAMETER LIST      * 01410000
*            2 PARM CHAR(100);       /* TEXT OF PARAMETER             * 01420000
*    DECLARE                                                            01430000
*          LKEDNAME CHAR(8) INIT(' '); /* NAME OF LINKAGE EDITOR      * 01440000
*                                                                       01450000
* /******************************************************************** 01460000
* /*    THE FOLLOWING IS MESSAGE AMA005I                              * 01470000
* /******************************************************************** 01480000
*                                                                       01490000
*    DECLARE                                                            01500000
*          AMA005I CHAR(54) INIT                                        01510000
*          ('AMA005I  INVALID PARAMETER SPECIFIED ON EXEC STATEMENT');  01520000
*                                                                       01530000
* /******************************************************************** 01540000
* /*    THE FOLLOWING IS MESSAGE AMA006I                              * 01550000
* /******************************************************************** 01560000
*                                                                       01570000
*    DECLARE                                                            01580000
*          1 AMA006I,                                                   01590000
*            2 * CHAR(21) INIT('AMA006I  LOAD MODULE '),                01600000
*            2 CCCCCCCC CHAR(8),     /* MOD NAME                      * 01610000
*            2 * CHAR(24) INIT(' NOT UPDATED WITH PTF - '),             01620000
*            2 NN CHAR(2);           /* REASON CODE                   * 01630000
*                                                                       01640000
* /******************************************************************** 01650000
* /*    THE FOLLOWING MESSAGE IS AMA007I                              * 01660000
* /******************************************************************** 01670000
*                                                                       01680000
*    DECLARE                                                            01690000
*          1 AMA007I,                                                   01700000
*            2 * CHAR(21) INIT('AMA007I  LOAD MODULE '),                01710000
*            2 LLLLLLLL CHAR(8),     /* MOD NAME                      * 01720000
*            2 * CHAR(31) INIT(' UPDATED WITH PTF - NEW SSI IS '), /*   01730000
*                                       M3999                         * 01740000
*            2 SSI CHAR(8);          /* NEW SSI                       * 01750000
*                                                                       01760000
* /******************************************************************** 01770000
* /*    THE FOLLOWING MESSAGE IS AMA010I                              * 01780000
* /******************************************************************** 01790000
*                                                                       01800000
*    DECLARE                                                            01810000
*          1 AMA010I,                /* S21016                        * 01820000
*            2 * CHAR(29) INIT('AMA010I  AMAPTFLE TERMINATED,'), /*     01830000
*                                       S21016                        * 01840000
*            2 * CHAR(33) INIT(' AN IDENTIFY STATEMENT IS MISSING');    01850000
*                                       /* S21016                     * 01860000
* /*                                                            S21016* 01870000
*                                                                       01880000
* /******************************************************************** 01890000
* /*    THE FOLLOWING MESSAGE IS AMA013I                              * 01900000
* /******************************************************************** 01910000
*                                                                       01920000
*    DECLARE                                                            01930000
*          1 AMA013I,                /* S21016                        * 01940000
*            2 * CHAR(26) INIT('AMA013I  THE FOLLOWING IS '), /*        01950000
*                                       S21016                        * 01960000
*            2 * CHAR(32) INIT('IDENTIFY INFORMATION FOR MODULE '), /*  01970000
*                                       S21016                        * 01980000
*            2 AMA013NM CHAR(8) INIT('        '); /* S21016           * 01990000
* /*                                                            S21016* 02000000
*                                                                       02010000
* /******************************************************************** 02020000
* /*    THE FOLLOWING MESSAGE IS AMA016I                        Y01045* 02030000
* /******************************************************************** 02040000
*                                                                       02050000
*    DECLARE                                                            02060000
*          1 AMA016I,             /*                            Y01045* 02070000
*            2 * CHAR(29) INIT('AMA016I  AMAPTFLE TERMINATED,'),        02080000
*                                 /*                            Y01045* 02090000
*            2 * CHAR(32) INIT(' PARMLIB DD STATEMENT IS MISSING');     02100000
*                                /*                             Y01045* 02110000
* /*    DIFF IS THE DIFFERENCE BETWEEN THE BEGINNING ADDRESS OF THE   * 02120000
* /*    MODULE NAME TABLE AND AN ADDRESS OF A NAME IN THE TABLE       * 02130000
*    DECLARE                                                            02140000
*          DIFF FIXED(31);                                              02150000
* /*    QUOTIENT IS DIFF DIVIDED BY 9                                 * 02160000
*    DECLARE                                                            02170000
*          QUOTIENT FIXED(31);                                          02180000
* /*    THE ADDFACTR IS THE QUOTIENT MULTIPLIED BY 8.  WHEN ADDFACTR  * 02190000
* /*    IS ADDED TO SSITABLE, THE RESULTANT WILL BE A POINTER TO AN   * 02200000
* /*    ENTRY IN THE SSI TABLE FOR THE UPDATED MODULE.                * 02210000
*    DECLARE                                                            02220000
*          ADDFACTR FIXED(31);                                          02230000
*    DECLARE                                                            02240000
*          CORRSSI PTR(31);          /* POINTS TO SSI FOR NEW MOD     * 02250000
*    DECLARE                                                            02260000
*          SSIDATA CHAR(8) BASED(CORRSSI); /* SSI FOR NEW MODULE      * 02270000
*    DECLARE                                                            02280000
*          RETCDSAV FIXED(31);       /* SAVE FOR L.E. RET CODE        * 02290000
*    DECLARE                                                            02300000
*          1 DDNMELST BDY (HWORD),   /* DDNAME PARM LIST FOR          * 02310000
*            2 * PTR(16) INIT(64),   /* LINKAGE EDITOR                * 02320000
*            2 * CHAR(8) INIT('OUTF    '),                              02330000
*            2 * CHAR(8) INIT('0000000000000000'X),                     02340000
*            2 * CHAR(8) INIT('SYSLMOD '),                              02350000
*            2 * CHAR(8) INIT('0000000000000000'X),                     02360000
*            2 * CHAR(8) INIT('0000000000000000'X),                     02370000
*            2 * CHAR(8) INIT('SYSPRINT'),                              02380000
*            2 * CHAR(8) INIT('0000000000000000'X),                     02390000
*            2 * CHAR(8) INIT('SYSUT1  ');                              02400000
*    DECLARE                                                            02410000
*          PARMCONT BIT(1) INIT('0'B); /* USED TO INDICATE THAT       * 02420000
*                                    /* PARM IS CONTINUED             * 02430000
*    DECLARE                                                            02440000
*          PCHBUFFR CHAR(80) BASED(PCHAREA); /* STAGE 1 INPUT BUFFER  * 02450000
*    DECLARE                                                            02460000
*          PRMNUMBR PTR(16) INIT('0000'X); /* NUMBER OF L.E. PARMS    * 02470000
*    DECLARE                                                            02480000
*          PARMEQUL CHAR(5) INIT('PARM='); /* USED FOR SEARCH OF      * 02490000
*                                    /* PARM KEYWORD ON EXEC          * 02500000
*                                    /* STATEMENT                     * 02510000
*    DECLARE                                                            02520000
*          B PTR(16);                /* INDEX INTO BLDLFLD            * 02530000
*    DECLARE                                                            02540000
*          DSSDNME CHAR(8) INIT('PARMLIB ');  /* DDNAME FOR DSS Y01045* 02550000
*    DECLARE                                                            02560000
*          DEVDATA CHAR(8) BDY(WORD);  /* DATA AREA FOR DEVTYPE       * 02570000
*                                    /* MACRO                   Y01045* 02580000
*    DECLARE                                                            02590000
*          PATCH(50) CHAR(2) BDY(HWORD) INIT((50)'0000'X);              02600000
*                                    /*  PATCH AREA             Y01983* 02610000
*                                                                       02620000
*    GENERATE;                                                          02630000
IHADCB   DCBD                                                           02640000
AMAPTF01 CSECT                                                          02650000
         DS    0H                                                       02660000
*    LSTPTRSV = LSTPTR;              /* SAVE ADDR OF PARM LIST M3990  * 02670000
         LR    @5,@1                                              0062  02680000
*    GO TO BRTABLE(BRFIELD);         /* BRANCH TO SUBROUTINE    A46805* 02690000
         SR    @2,@2                                              0063  02700000
         IC    @2,0(0,@5)                                         0063  02710000
         SLA   @2,2                                               0063  02720000
         L     @F,BRTABLE-4(@2)                                   0063  02730000
         BCR   15,@F                                              0063  02740000
* AMAOPEN:                                                              02750000
*    IF OPENBIT = '1'B               /* IS IT FIRST ENTRY TO PTF01?   * 02760000
*          THEN                                                         02770000
AMAOPEN  TM    OPENBIT,B'10000000'                                0064  02780000
*      GO TO AMASPUT2;               /* NO - SPOOL CARD         A46805* 02790000
         BC    01,AMASPUT2                                        0065  02800000
*    OPENBIT='1'B;                   /* SET FIRST ENTRY               * 02810000
         OI    OPENBIT,B'10000000'                                0066  02820000
*                                    /* TO PTF01 M4004                * 02830000
*    GENERATE;                                                          02840000
OPENFLG  EQU   X'10'                                                    02850000
         OPEN (SYSUTDCB,(OUTPUT))     OPEN WORKFILE DCB           M4005 02860000
         LA    OPENREG,SYSUTDCB                                         02870000
         USING IHADCB,OPENREG                                           02880000
         TM    DCBOFLGS,OPENFLG    DID DCB OPEN                         02890000
         BZ    AMADDMSG            NO-WRITE ERROR MESSAGE               02900000
         DS    0H                                                       02910000
*    IF PARMLEN > 8                  /* IS PARM IN ERROR?             * 02920000
*          THEN                                                         02930000
         LA    @F,8                                               0068  02940000
         L     @2,64(0,@5)                                        0068  02950000
         MVC   @TEMP2+2(2),0(@2)                                  0068  02960000
         C     @F,@TEMP2                                          0068  02970000
*      GO TO AMA0001;                /* YES-WRITE ERROR MSG           * 02980000
         BC    04,AMA0001                                         0069  02990000
*    BLDLFLD(1) = '0000'X;           /* INDICATE TO PTF02             * 03000000
         MVC   BLDLFLD(1),@X2                                     0070  03010000
*                                    /* THAT BLDL IS FOR              * 03020000
*                                    /* LINKAGE EDITOR                * 03030000
*    BLDLFLD(5:PARMLEN+4) = PARM;    /* PUT NAME IN BLDL LIST M4003   * 03040000
         LA    @E,2(0,@2)                                         0071  03050000
         LA    @4,4                                               0071  03060000
         MVC   @TEMP2+2(2),0(@2)                                  0071  03070000
         A     @4,@TEMP2                                          0071  03080000
         SH    @4,@D1                                             0071  03090000
         LA    @A,BLDLFLD+4                                       0071  03100000
         EX    @4,@MVC                                            0071  03110000
*    LSTPTR = ADDR(BLDLFLD);         /* POINT TO BLDL LIST M3990      * 03120000
         LA    @1,BLDLFLD                                         0072  03130000
*    CALL AMAPTF02;                  /* GO TO PTF02                   * 03140000
         L     @4,16(0,@5)                                        0073  03150000
         LR    @F,@4                                              0073  03160000
         BALR  @E,@F                                              0073  03170000
*    IF BLDLFLD(1:2) = '0000'X       /* WAS BLDL O.K.?                * 03180000
*          THEN                                                         03190000
         CLC   BLDLFLD(2),@X2                                     0074  03200000
         BC    07,@9FF                                            0074  03210000
*      DO;                                                              03220000
* /*    IF THE BLDL WAS NOT GOOD, THEN INITIALIZE THE MESSAGE         * 03230000
* /*    BUFFER WITH THE ERROR MESSAGE AND GO TO AMAERMSG TO WRITE     * 03240000
* /*    THE ERROR MESSAGE.  UPON RETURN FROM AMAERMSG, RETURN TO      * 03250000
* /*    FILCLOSE IN AMAPTFLE TO CLOSE ALL DCBS.                       * 03260000
*                                                                       03270000
* AMA0001:                                                              03280000
*        MSGBUF = ' ';                                                  03290000
AMA0001  MVI   MSGBUF,C' '                                        0076  03300000
         MVC   MSGBUF+1(120),MSGBUF                               0076  03310000
*        MSGBUF(1:54) = AMA005I;                                        03320000
         MVC   MSGBUF(54),AMA005I                                 0077  03330000
*        RETCDE='10'X;                /*SET UP 16 RETURN CODE   A48711* 03340000
         MVI   2(@5),X'10'                                        0078  03350000
*                                                                       03360000
* AMACALL:                                                              03370000
*        CALL AMAERMSG;                                                 03380000
AMACALL  L     @F,@V1              ADDRESS OF AMAERMSG            0079  03390000
         BALR  @E,@F                                              0079  03400000
*        BRFIELD='00'X;              /* ZERO BRFIELD            Y01045* 03410000
         MVI   0(@5),X'00'                                        0080  03420000
*        RETURN TO FILCLOSE;                                            03430000
         L     @D,4(0,@D)                                         0081  03440000
         L     @E,68(0,@5)                                        0081  03450000
         LM    @F,@C,16(@D)                                       0081  03460000
         BCR   15,@E                                              0081  03470000
*      END;                                                             03480000
*    ELSE                                                               03490000
*      DO;                                                              03500000
*        IF BLDLFLD(1) = 'FF'X       /* SYSLMOD OPEN FAIL M4012       * 03510000
*              THEN                                                     03520000
@9FF     CLI   BLDLFLD,X'FF'                                      0084  03530000
*          GO TO AMADDSYS;           /* YES-GO WRITE ERROR MESSAGE    * 03540000
         BC    08,AMADDSYS                                        0085  03550000
* /*    IF THE BLDL AND OPEN WERE GOOD, THEN SAVE THE LINKAGE         * 03560000
* /*    EDITOR NAME AND SPOOL FIRST CONTROL STATEMENT.                * 03570000
*        LKEDNAME(1:PARMLEN) = PARM;                                    03580000
         L     @2,64(0,@5)                                        0086  03590000
         LA    @E,2(0,@2)                                         0086  03600000
         MVC   @TEMP2+2(2),0(@2)                                  0086  03610000
         L     @4,@TEMP2                                          0086  03620000
         BCTR  @4,0                                               0086  03630000
         LA    @A,LKEDNAME                                        0086  03640000
         EX    @4,@MVC                                            0086  03650000
*      END;                                                             03660000
*                                                                       03670000
* /******************************************************************** 03680000
* /*    AMASPUT2 IS A SUBROUTINE THAT IS USED FOR SPOOLING ALL CONTROL* 03690000
* /*    STATEMENTS TO THE SYSUT2 WORK FILE.  THIS ROUTINE IS ENTERED  * 03700000
* /*    WHEN AMAPTFLE IS READING THE CONTROL STATEMENTS.              * 03710000
* /******************************************************************** 03720000
*                                                                       03730000
*                                                                       03740000
* AMASPUT2:                                                             03750000
*    UT2OUT = DUMFIELD;              /* MOVE STMNT IN UT2OUT          * 03760000
@9FE     EQU   *                                                  0088  03770000
AMASPUT2 L     @2,24(0,@5)                                        0088  03780000
         MVC   UT2OUT(80),0(@2)                                   0088  03790000
*    OPENREG = ADDR(SYSUTDCB);       /* SET OPENREG TO SYSUTDCB ADDR  * 03800000
         LA    @3,SYSUTDCB                                        0089  03810000
*    GENERATE;                                                          03820000
         WRITE SYSUDECB,SF,(OPENREG),UT2OUT                             03830000
         CHECK SYSUDECB                                                 03840000
         DS    0H                                                       03850000
*    IF DUMFIELD(1) = '02'X          /* IS THIS AN OBJECT STMNT M4014 * 03860000
*          THEN                                                         03870000
         CLI   0(@2),X'02'                                        0091  03880000
         BC    07,@9FD                                            0091  03890000
*      NEWNAME = '00'X;              /* YES-TURN OFF MODULE NAME SW   * 03900000
         MVI   NEWNAME,X'00'                                      0092  03910000
         BC    15,@9FC                                            0093  03920000
*    ELSE                                                               03930000
*      DO;                           /* M4014                         * 03940000
*        IF DUMFIELD(1) = ' '        /* IS IDENTIFY CARD S21016       * 03950000
*              THEN                                                     03960000
@9FD     L     @2,24(0,@5)                                        0094  03970000
         CLI   0(@2),C' '                                         0094  03980000
         BC    07,@9FB                                            0094  03990000
*          DO;                       /* S21016                        * 04000000
*            IDFOUND = '80'X;        /* SET IDENT FOUND SW            * 04010000
         MVI   IDFOUND,X'80'                                      0096  04020000
*            IDENTCON = '00'X;       /* RESET SW M0861                * 04030000
         MVI   1(@5),X'00'                                        0097  04040000
*            IF DUMFIELD(72) ¬= ' '  /* IDENT CONTIN M0861            * 04050000
*                  THEN                                                 04060000
         L     @2,24(0,@5)                                        0098  04070000
         CLI   71(@2),C' '                                        0098  04080000
         BC    08,@9FA                                            0098  04090000
*              IDENTCON = '08'X;     /* SET IDENT CONT SW             * 04100000
         MVI   1(@5),X'08'                                        0099  04110000
*                                    /* M0861                         * 04120000
*            GO TO AMARET1;          /* RETURN TO AMAPTFLE            * 04130000
         BC    15,AMARET1                                         0100  04140000
*          END;                      /* S21016                        * 04150000
*        IF NEWNAME = '00'X          /* MODULE NAME SWITCH SET M4014  * 04160000
*              THEN                                                     04170000
@9FB     CLI   NEWNAME,X'00'                                      0102  04180000
         BC    07,@9F9                                            0102  04190000
*          DO;                       /* S21016                        * 04200000
*            IF IDFOUND = '80'X      /* IDENT FOUND SW SET            * 04210000
*                  THEN                                                 04220000
         CLI   IDFOUND,X'80'                                      0104  04230000
         BC    07,@9F8                                            0104  04240000
*              DO;                   /* S21016                        * 04250000
*                IDFOUND = '00'X;    /* RESET IDENTIFY SW             * 04260000
         MVI   IDFOUND,X'00'                                      0106  04270000
*                NEWNAME = '80'X;    /* SET SWITCH M4014              * 04280000
         MVI   NEWNAME,X'80'                                      0107  04290000
*              END;                  /* S21016                        * 04300000
*            ELSE                                                       04310000
*              GO TO AMANOID;        /* WRITE MSG S21016              * 04320000
*          END;                      /* S21016                        * 04330000
         BC    15,@9F6                                            0111  04340000
*        ELSE                                                           04350000
*          DUMFIELD(1) = '02'X;      /* INDICATE NAME NOT TO BE M4014 * 04360000
@9F9     L     @2,24(0,@5)                                        0111  04370000
         MVI   0(@2),X'02'                                        0111  04380000
*                                    /* PUT IN MODULE NAME TABLE      * 04390000
*      END;                          /* M4014                         * 04400000
*    GO TO AMARET1;                  /* RETURN TO AMAPTFLE            * 04410000
         BC    15,AMARET1                                         0113  04420000
*                                                                       04430000
* /******************************************************************** 04440000
* /******************************************************************** 04450000
* /*    AMASPS IS ENTERED FORM PART 2(IEBCOPY) OF AMAPTFLE.           * 04460000
* /*    BRFIELD IS SET TO ZERO SO THAT AFTER THE OBJ IS SPOOLED TO    * 04470000
* /*    THE OUTF (SYSLIN) DATA SET, A NAME CARD IS GENERATED AND A    * 04480000
* /*    LINK IS MADE TO THE LINKAGE EDITOR.                           * 04490000
* /******************************************************************** 04500000
*                                                                       04510000
*                                                                       04520000
* AMASPS:                                                               04530000
*    BRFIELD = '00'X;                /* ENTERED FROM IEBCOPY          * 04540000
AMASPS   MVI   0(@5),X'00'                                        0114  04550000
*                                                                       04560000
* /******************************************************************** 04570000
* /******************************************************************** 04580000
* /*    AMASPOBJ IS ENTERED FROM PART 1(IEWL) OF AMAPTFLE.            * 04590000
* /*    THIS SUBROUTINE READS THE OBJ FOR THE APPROPRIATE MODULE      * 04600000
* /*    FROM THE SYSUT2 WORK FILE AND SPOOLS IT TO THE OUTF(SYSLIN)   * 04610000
* /*    DATA SET.                                                     * 04620000
* /******************************************************************** 04630000
*                                                                       04640000
*                                                                       04650000
* AMASPOBJ:                                                             04660000
*    NEWNAME = '00'X;                /* TURN OFF MODULE NAME SW M4014 * 04670000
AMASPOBJ MVI   NEWNAME,X'00'                                      0115  04680000
*    IDFOUND = '00'X;                /* S21016                        * 04690000
         MVI   IDFOUND,X'00'                                      0116  04700000
*    IF TTRZ(1) = ' ' THEN                                              04710000
         CLI   TTRZ,C' '                                          0117  04720000
         BC    07,@9F5                                            0117  04730000
*      DO;                           /* M4005                         * 04740000
*        GENERATE;                                                      04750000
         CLOSE (SYSUTDCB)                                         M4005 04760000
         OPEN  (SYSUTDCB,(INPUT))                                 M4005 04770000
         READ  SYSTDECB,SF,SYSUTDCB,UT2OUT                        M4005 04780000
         CHECK SYSTDECB                                           M4005 04790000
         NOTE  SYSUTDCB                                           M4005 04800000
         ST    LSTPTR,TTRZ                                        M4005 04810000
         DS    0H                                                       04820000
*        GO TO CHKNAME;              /* M4005                         * 04830000
         BC    15,CHKNAME                                         0120  04840000
*      END;                                                             04850000
*    GENERATE;                                                          04860000
@9F5     EQU   *                                                  0122  04870000
         POINT SYSUTDCB,TTRZ     LOCATE BEGINNING OF WORK FILE    M4005 04880000
AMARDOBJ READ SYSRDECB,SF,SYSUTDCB,UT2OUT                               04890000
         CHECK SYSRDECB                                           M4004 04900000
         DS    0H                                                       04910000
*                                                                       04920000
* CHKNAME:                                                              04930000
*    IF NAMMATCH = 1 THEN            /* HAS APPROPRIATE OBJ BEEN        04940000
*                                       FOUND?                        * 04950000
CHKNAME  CLI   NAMMATCH,1                                         0123  04960000
*      GO TO AMACKOBJ;               /* YES-CHECK FOR OBJ CARD M4005  * 04970000
         BC    08,AMACKOBJ                                        0124  04980000
*    ELSE                                                               04990000
* /*    IF THE APPROPRIATE OBJ HAS NOT BEEN LOCATED, THEN ATTEMPT TO  * 05000000
* /*    LOCATE IT BY CHECKING THE STATEMENT READ FROM SYSUT2 TO THE   * 05010000
* /*    MODULE NAME IN THE MODSTRBF BUFFER.                           * 05020000
*      IF UT2OUT(1:8) ¬= MODSTRBF THEN                                  05030000
         L     @2,4(0,@5)                                         0125  05040000
         CLC   UT2OUT(8),0(@2)                                    0125  05050000
*        GO TO AMARDOBJ;             /* NO MATCH- READ ANOTHER RECORD * 05060000
         BC    07,AMARDOBJ                                        0126  05070000
*      ELSE                                                             05080000
*        DO;                                                            05090000
*          NAMMATCH = 1;             /* MATCH-INDICATE A MATCH        * 05100000
         MVI   NAMMATCH,1                                         0128  05110000
*          NEWNAME = '80'X;          /* SET MODULE NAME SWITCH M4014  * 05120000
         MVI   NEWNAME,X'80'                                      0129  05130000
*          GO TO AMARDOBJ;           /* AND READ ANOTHER OBJ RECORD   * 05140000
         BC    15,AMARDOBJ                                        0130  05150000
*        END;                                                           05160000
*                                                                       05170000
* AMACKOBJ:                                                             05180000
*    IF UT2OUT(1) = '02'X            /* IS THE RECORD OBJECT STMNT?   * 05190000
*          THEN                                                         05200000
AMACKOBJ CLI   UT2OUT,X'02'                                       0132  05210000
         BC    07,@9F4                                            0132  05220000
*      DO;                                                              05230000
*        NEWNAME = '00'X;            /* TURN OFF MODULE NAME SW M4014 * 05240000
         MVI   NEWNAME,X'00'                                      0134  05250000
*                                                                       05260000
* OUTFWTE:                                                              05270000
*        OPENREG = OUTFDCB;          /* YES-GET THE OUTFDCB ADDRESS     05280000
*                                       M4014                         * 05290000
OUTFWTE  L     @3,28(0,@5)                                        0135  05300000
*        GENERATE;                                                      05310000
         WRITE OUTFDECB,SF,(OPENREG),UT2OUT                             05320000
         CHECK OUTFDECB                                                 05330000
         DS    0H                                                       05340000
*        GO TO AMARDOBJ;             /* READ ANOTHER SYSUT2 RECORD    * 05350000
         BC    15,AMARDOBJ                                        0137  05360000
*      END;                                                             05370000
*    ELSE                                                               05380000
*      IF NEWNAME = '80'X            /* MODULE NAME ALREADY           * 05390000
*                                    /* READ IN M4014                 * 05400000
*            THEN                                                       05410000
@9F4     CLI   NEWNAME,X'80'                                      0139  05420000
         BC    07,@9F2                                            0139  05430000
*        DO;                         /* YES-BUILD ALIAS CARDS         * 05440000
*          IF BRFIELD ¬= '00'X       /* MODULE COPIED AT M4014        * 05450000
*                                    /* SYSGEN (BRFIELD=0)            * 05460000
*                THEN                                                   05470000
         CLI   0(@5),X'00'                                        0141  05480000
*            GO TO AMARDOBJ;         /* NO-IGNORE ALIAS M4014         * 05490000
         BC    07,AMARDOBJ                                        0142  05500000
*          ALIASNM = UT2OUT(1:8);    /* MOVE ALIAS NAME M4014         * 05510000
         MVC   ALIASCD+7(8),UT2OUT                                0143  05520000
*                                    /* TO ALIAS CARD M4014           * 05530000
*          UT2OUT = ' ';             /* BLANK OUTPUT BUFFER           * 05540000
         MVI   UT2OUT,C' '                                        0144  05550000
         MVC   UT2OUT+1(79),UT2OUT                                0144  05560000
*          UT2OUT(1:15) = ALIASCD;   /* MOVE ALIAS CARD TO            * 05570000
         MVC   UT2OUT(15),ALIASCD                                 0145  05580000
*                                    /* OUTPUT BUFFER M4014           * 05590000
*          GO TO OUTFWTE;            /* WRITE ALIAS CARD M4014        * 05600000
         BC    15,OUTFWTE                                         0146  05610000
*        END;                        /* M4014                         * 05620000
*    IF UT2OUT(1) = ' '              /* IDENTIFY CARD S21016          * 05630000
*          THEN                                                         05640000
@9F2     EQU   *                                                  0148  05650000
@9F3     CLI   UT2OUT,C' '                                        0148  05660000
         BC    07,@9F1                                            0148  05670000
*      DO;                           /* YES-SET IDENTIFY FOUND S21016 * 05680000
*        IDFOUND = '80'X;            /* SWITCH S21016                 * 05690000
         MVI   IDFOUND,X'80'                                      0150  05700000
*        GO TO OUTFWTE;              /* WRITE IDENTIFY CARD S21016    * 05710000
         BC    15,OUTFWTE                                         0151  05720000
*      END;                          /* S21016                        * 05730000
*                                                                       05740000
* /******************************************************************** 05750000
* /*    AMAEODAD IS ENTERED UPON EOF OR WHEN THE OBJ HAS BEEN SPOOLED * 05760000
* /******************************************************************** 05770000
*                                                                       05780000
*                                                                       05790000
* AMAEODAD:                                                             05800000
*    NAMMATCH = 0;                   /* RESET NAME FOUND SWITCH M4000 * 05810000
@9F1     EQU   *                                                  0153  05820000
AMAEODAD MVI   NAMMATCH,0                                         0153  05830000
*    IF IDFOUND = '00'X              /* IDENTIFY CARD MISSING S21016  * 05840000
*          THEN                                                         05850000
         CLI   IDFOUND,X'00'                                      0154  05860000
*      GO TO AMANOID;                /* YES-WRITE MESSAGE S21016      * 05870000
         BC    08,AMANOID                                         0155  05880000
*    IDFOUND = '00'X;                /* TURN OFF IDENTIFY FOUND SWITCH* 05890000
         MVI   IDFOUND,X'00'                                      0156  05900000
*    SSIINFO = '0';                  /* NO SETSSI CARD NEEDED M4000   * 05910000
         MVI   SSICARD+12,C'0'                                    0157  05920000
         MVI   SSICARD+13,C' '                                    0157  05930000
         MVC   SSICARD+14(6),SSICARD+13                           0157  05940000
*    IF BRFIELD ¬= 0 THEN            /* DOES A NAME STMNT HAVE TO BE  * 05950000
         CLI   0(@5),0                                            0158  05960000
*                                    /* WRITTEN BECAUSE OF ENTRY FROM * 05970000
*                                    /* PART 2(IEBCOPY) OF AMAPTFLE?  * 05980000
*                                    /* M4000                         * 05990000
*      GO TO AMARET2;                /* NO-RETURN TO AMAPTFLE         * 06000000
         BC    07,AMARET2                                         0159  06010000
*    UT2OUT = ' ';                   /* YES-CLEAR THE BUFFER M4003    * 06020000
         MVI   UT2OUT,C' '                                        0160  06030000
         MVC   UT2OUT+1(79),UT2OUT                                0160  06040000
*    MDN = ' ';                      /* BLANK MOD NAME BUFFER M4003   * 06050000
         MVI   NAMECARD+10,C' '                                   0161  06060000
         MVC   NAMECARD+11(10),NAMECARD+10                        0161  06070000
*    DO I = 1 TO 8;                  /* MOVE MODULE NAME INTO BUFFER  * 06080000
         LA    @6,1                                               0162  06090000
*      IF SELBUF(I) = ',' | SELBUF(I) = ')' | SELBUF(I) = ' ' THEN      06100000
@DO9F0   LR    @2,@6                                              0163  06110000
         L     @4,44(0,@5)                                        0163  06120000
         LA    @A,0(@2,@4)                                        0163  06130000
         BCTR  @A,0                                               0163  06140000
         CLI   0(@A),C','                                         0163  06150000
         BC    08,@9EC                                            0163  06160000
         CLI   0(@A),C')'                                         0163  06170000
         BC    08,@9EB                                            0163  06180000
         CLI   0(@A),C' '                                         0163  06190000
         BC    07,@9EA                                            0163  06200000
*        GO TO MOVEREP;              /* REACHED END OF NAME M4011     * 06210000
         BC    08,MOVEREP                                         0164  06220000
*      MDN(I) = SELBUF(I);           /* MOVE CHAR TO BUFFER           * 06230000
@9EA     LR    @2,@6                                              0165  06240000
         L     @4,44(0,@5)                                        0165  06250000
         LA    @E,0(@2,@4)                                        0165  06260000
         BCTR  @E,0                                               0165  06270000
         LA    @A,NAMECARD+9(@2)                                  0165  06280000
         MVC   0(1,@A),0(@E)                                      0165  06290000
*    END;                            /* M4003                         * 06300000
*                                                                       06310000
* MOVEREP:                                                              06320000
*    MDN(I:I+2) = REP;               /* MOVE (R) TO NAME CARD         * 06330000
         AH    @6,@D2                                             0166  06340000
@DO9EF   CH    @6,@D3                                             0166  06350000
         BC    12,@DO9F0                                          0166  06360000
MOVEREP  LR    @2,@6                                              0167  06370000
         LA    @A,NAMECARD+9(@2)                                  0167  06380000
         MVC   0(3,@A),REP                                        0167  06390000
*    SSIINFO = ' ';                  /* BLANK SETSSI FIELD M4000      * 06400000
         MVI   SSICARD+12,C' '                                    0168  06410000
         MVC   SSICARD+13(7),SSICARD+12                           0168  06420000
*    GO TO SSIGEN;                   /* GET SSI INFORMATION M4000     * 06430000
         BC    15,SSIGEN                                          0169  06440000
*                                                                       06450000
* MOVESSI:                                                              06460000
*    SSIINFO = SSIDATA;              /* MOVE SSI TO SETSSI CARD       * 06470000
MOVESSI  L     @2,CORRSSI                                         0170  06480000
         MVC   SSICARD+12(8),0(@2)                                0170  06490000
*    UT2OUT = SSICARD;               /* MOVE CARD TO BUFFER M4000     * 06500000
         MVC   UT2OUT(20),SSICARD                                 0171  06510000
         MVI   UT2OUT+20,C' '                                     0171  06520000
         MVC   UT2OUT+21(59),UT2OUT+20                            0171  06530000
*    OPENREG = OUTFDCB;              /* M4000                         * 06540000
         L     @3,28(0,@5)                                        0172  06550000
*    GENERATE;                                                          06560000
         WRITE OUTFSSI,SF,(OPENREG),UT2OUT   WRITE SETSSI CARD    M4000 06570000
         CHECK OUTFSSI                                            M4000 06580000
         DS    0H                                                       06590000
*    UT2OUT = ' ';                                                      06600000
         MVI   UT2OUT,C' '                                        0174  06610000
         MVC   UT2OUT+1(79),UT2OUT                                0174  06620000
*    UT2OUT = NAMECARD;              /* MOVE NAME CARD INTO BUFFER    * 06630000
         MVC   UT2OUT(21),NAMECARD                                0175  06640000
         MVI   UT2OUT+21,C' '                                     0175  06650000
         MVC   UT2OUT+22(58),UT2OUT+21                            0175  06660000
*    OPENREG = OUTFDCB;              /* GET THE OUTFDCB ADDRESS       * 06670000
         L     @3,28(0,@5)                                        0176  06680000
*    GENERATE;                                                          06690000
                   WRITE OUTFNAME,SF,(OPENREG),UT2OUT                   06700000
                   CHECK OUTFNAME                                       06710000
         DS    0H                                                       06720000
*                                                                       06730000
* /******************************************************************** 06740000
* /*    THE AMALINK SUBROUTINE IS ENTERED WHEN A LINK TO THE          * 06750000
* /*    LINKAGE EDITOR IS REQUIRED TO LINKEDIT A MODULE FOR THE PTF.  * 06760000
* /*    IF AMALINK IS ENTERED TO LINKEDIT A MODULE THAT WAS COPIED    * 06770000
* /*    INTO THE SYSTEM AT SYSGEN, THEN A BRANCH IS MADE TO AMAPTF02  * 06780000
* /*    TO RETRIEVE THE LINKEDIT ATTRIBUTES OF THE MODULE BEFORE THE  * 06790000
* /*    LINKEDIT IS DONE.  OTHERWISE, THE ATTRIBUTES HAVE ALREADY BEEN* 06800000
* /*    RETRIEVED FROM THE EXEC STATEMENT AND NO BRANCH TO AMAPTF02   * 06810000
* /*    IS DONE.  IN EITHER CASE, THE OVERLAY RECORD TABLE IN         * 06820000
* /*    AMAPTFLE IS FREED SO THAT THE LINKAGE EDITOR CAN BE BROUGHT   * 06830000
* /*    INTO CORE.  ALSO BEFORE THE LINK IS DONE, THE OUTFDCB IS      * 06840000
* /*    CLOSED BECAUSE THE LINKAGE EDITOR WILL RE-OPEN IT AS THE      * 06850000
* /*    SYSLIN DATA SET.  UPON RETURN FROM THE EDITOR, THE OUTFDCB IS * 06860000
* /*    RE-OPENED AND TESTED FOR A SUCCESSFUL OPEN.  LINKAGE EDITOR   * 06870000
* /*    RETURN CODES ARE CHECKED, AND A DISPOSITION MESSAGE IS ISSUED.* 06880000
* /*    A RETURN IS MADE TO AMAPTFLE.                                 * 06890000
* /******************************************************************** 06900000
*                                                                       06910000
*                                                                       06920000
* AMALINK:                                                              06930000
*    IF BRFIELD = 0                  /* NAME MATCH ON SELECT STMNT?     06940000
*                                       M4000                         * 06950000
*          THEN                                                         06960000
AMALINK  CLI   0(@5),0                                            0178  06970000
         BC    07,@9E9                                            0178  06980000
*      DO;                                                              06990000
*        BLDLFLD = ' ';              /* YES-CLEAR PTF02'S PARM LIST   * 07000000
         MVI   BLDLFLD,C' '                                       0180  07010000
         MVC   BLDLFLD+1(71),BLDLFLD                              0180  07020000
*        BLDLFLD(5:5+I-2) = MDN;               /* MOVE IN NAME        * 07030000
         LA    @E,NAMECARD+10                                     0181  07040000
         LH    @2,@D4                                             0181  07050000
         AR    @2,@6                                              0181  07060000
         AH    @2,@D1                                             0181  07070000
         SH    @2,@D1                                             0181  07080000
         LA    @A,BLDLFLD+4                                       0181  07090000
         EX    @2,@MVC                                            0181  07100000
*                                    /* M4003                         * 07110000
*        GO TO AMATABAD;             /* GO FREE OVERLAY TABLE         * 07120000
         BC    15,AMATABAD                                        0182  07130000
*      END;                                                             07140000
*    CCCCCCCC = MODSTRBF;            /* NO-MOVE MOD NAME INTO MESSAGE * 07150000
@9E9     L     @2,4(0,@5)                                         0184  07160000
         MVC   AMA006I+21(8),0(@2)                                0184  07170000
*    GO TO AMANOBLD;                 /* NO BLDL NEEDED M4003          * 07180000
         BC    15,AMANOBLD                                        0185  07190000
*                                                                       07200000
* /******************************************************************** 07210000
* /*    YES - AMAPTF02 IS NEEDED BECAUSE MODULE WAS ORIGINALLY COPIED * 07220000
* /*    INTO THE SYSTEM.  MOVE MODULE NAME INTO DISPOSITION MESSAGE   * 07230000
* /*    AND THEN GO TO AMAPTF02 TO RETRIEVE LINKEDIT ATTRIBUTES.      * 07240000
* /******************************************************************** 07250000
*                                                                       07260000
*                                                                       07270000
* AMATABAD:                                                             07280000
*    CCCCCCCC = BLDLFLD(5:12);              /* MOVE NAME M4000        * 07290000
AMATABAD MVC   AMA006I+21(8),BLDLFLD+4                            0186  07300000
*    LSTPTR = ADDR(BLDLFLD);         /* GET ADDR OF PTF02'S PARM LIST * 07310000
         LA    @1,BLDLFLD                                         0187  07320000
*    CALL AMAPTF02;                  /* GO TO AMAPTF02                * 07330000
         L     @2,16(0,@5)                                        0188  07340000
         LR    @F,@2                                              0188  07350000
         BALR  @E,@F                                              0188  07360000
*    MSGBUF = ' ';                   /* CLEAR MESSAGE BUFFER          * 07370000
         MVI   MSGBUF,C' '                                        0189  07380000
         MVC   MSGBUF+1(120),MSGBUF                               0189  07390000
*    IF BLDLFLD(1:2) = '0000'X |     /* BLDL SUCCESSFUL?              * 07400000
*          BLDLFLD(1:2) = '0001'X THEN                                  07410000
         CLC   BLDLFLD(2),@X2                                     0190  07420000
         BC    08,@9E8                                            0190  07430000
         CLC   BLDLFLD(2),@X12                                    0190  07440000
         BC    07,@9E7                                            0190  07450000
*      GO TO AMA6IB;                 /* NO-GO WRITE ERROR MESSAGE     * 07460000
         BC    08,AMA6IB                                          0191  07470000
*    IF BLDLFLD(1) = 'FF'X           /* SYSLMOD OPEN FAIL M4012       * 07480000
*          THEN                                                         07490000
@9E7     CLI   BLDLFLD,X'FF'                                      0192  07500000
*      GO TO AMADDSYS;               /* YES-GO WRITE ERROR MESSAGE    * 07510000
         BC    08,AMADDSYS                                        0193  07520000
*                                                                       07530000
* AMANOBLD:                                                             07540000
*    OPENREG = OUTFDCB;              /* GET OUTFDCB ADDRESS           * 07550000
AMANOBLD L     @3,28(0,@5)                                        0194  07560000
*    GENERATE;                                                          07570000
         CLOSE ((OPENREG),)          CLOSE THE OUTFDCB                  07580000
         DS    0H                                                       07590000
*                                                                       07600000
* /******************************************************************** 07610000
* /*    CHECK IF UPDATING THE NUCLEUS                           Y01045* 07620000
* /******************************************************************** 07630000
*                                                                       07640000
*    IF COMSW = '80'X THEN           /* UPDATING THE NUCLEUS    Y01045* 07650000
         CLI   3(@5),X'80'                                        0196  07660000
         BC    07,@9E6                                            0196  07670000
*      DO;                           /* YES                     Y01045* 07680000
*        GENERATE;                                                      07690000
        DEVTYPE   DSSDNME,DEVDATA    PARMLIB DD PRESENT          Y01045 07700000
         DS    0H                                                       07710000
*        IF RETCODE ¬= 0 THEN        /* RETURN CODE ZERO        Y01045* 07720000
         LTR   @F,@F                                              0199  07730000
         BC    08,@9E5                                            0199  07740000
*          DO;                       /* NO - DD STATEMENT MISSING     * 07750000
*                                    /*                         Y01045* 07760000
*            MSGBUF=AMA016I;         /* MOVE MSG TO BUFFER      Y01045* 07770000
         MVC   MSGBUF(61),AMA016I                                 0201  07780000
         MVI   MSGBUF+61,C' '                                     0201  07790000
         MVC   MSGBUF+62(59),MSGBUF+61                            0201  07800000
*            RETCDE='10'X;           /* SET RETURN CODE         Y01045* 07810000
         MVI   2(@5),X'10'                                        0202  07820000
*            GOTO AMACALL;           /* WRITE MESSAGE AND       Y01045* 07830000
         BC    15,AMACALL                                         0203  07840000
*                                    /* RETURN TO FILCLOSE      Y01045* 07850000
*          END;                      /* END DO GROUP            Y01045* 07860000
*        END;                        /* END CHECK FOR NUCLEUS   Y01045* 07870000
@9E5     EQU   *                                                  0205  07880000
*                                    /* UPDATE                  Y01045* 07890000
*                                                                       07900000
*    LSTPTR = OVTABADR;              /* GET OVERLAY TABLE ADDRESS       07910000
*                                       M4000                         * 07920000
@9E6     L     @1,8(0,@5)                                         0206  07930000
*    GENERATE;                                                          07940000
         FREEMAIN  R,LV=26800,A=(LSTPTR)  FREE THE OVERLAY TABLE S21016 07950000
         LINK  EPLOC=LKEDNAME,PARAM=(BLDLFLD,DDNMELST),VL=1             07960000
         DS    0H                                                       07970000
*    RETCDSAV = RETCODE;             /* SAVE L.E. RETURN CODE         * 07980000
         ST    @F,RETCDSAV                                        0208  07990000
*    OPENREG = ADDR(OVTABADR);       /* GET OVERLAY TABLE ADDR M4000  * 08000000
         LA    @3,8(0,@5)                                         0209  08010000
*                                                                       08020000
* /******************************************************************** 08030000
* /*    GETMAIN TO RE-INITIALIZE THE OVERLAY TABLE IN AMAPTFLE        * 08040000
* /******************************************************************** 08050000
*                                                                       08060000
*    GENERATE(GETMAIN EU,LV=26800,A=(OPENREG)); /* S21016             * 08070000
         GETMAIN EU,LV=26800,A=(OPENREG)                                08080000
         DS    0H                                                       08090000
*                                                                       08100000
* /******************************************************************** 08110000
*                                                                       08120000
*    RETCODE = RETCDSAV;             /* RESTORE RETURN CODE      M0867* 08130000
         L     @F,RETCDSAV                                        0211  08140000
*    IF RETCODE = 12|RETCODE = 16 THEN       /* SUCCESSFUL L.E.? M0867* 08150000
         CH    @F,@D5                                             0212  08160000
         BC    08,@9E4                                            0212  08170000
         CH    @F,@D6                                             0212  08180000
         BC    07,@9E3                                            0212  08190000
*      GO TO AMA6II;                 /* NO-GO WRITE ERROR MSG    M0867* 08200000
         BC    08,AMA6II                                          0213  08210000
*    OPENREG = OUTFDCB;              /* GET OUTFDCB ADDRESS           * 08220000
@9E3     L     @3,28(0,@5)                                        0214  08230000
*                                                                       08240000
* /******************************************************************** 08250000
* /*    RE-OPEN THE OUTFDCB TO BUILD ANOTHER SYSLIN DATA SET IF NEEDED* 08260000
* /******************************************************************** 08270000
*                                                                       08280000
*    GENERATE (OPEN ((OPENREG),INPUT)); /*                     S21016 * 08290000
         OPEN ((OPENREG),INPUT)                                         08300000
         DS    0H                                                       08310000
*                                                                       08320000
* /******************************************************************** 08330000
*                                                                       08340000
*    OPENREG = OUTFDCB;              /* GET THE OUTFDCB ADDR          * 08350000
         L     @3,28(0,@5)                                        0216  08360000
*    GENERATE;                                                          08370000
         USING IHADCB,OPENREG                                           08380000
         TM    DCBOFLGS,OPENFLG      DCB OPEN OKAY?                     08390000
         BZ    AMADDOUT              NO-GO WRITE ERROR MESSAGE          08400000
         DS    0H                                                       08410000
*    LLLLLLLL = CCCCCCCC;            /* MOVE MODULE NAME INTO         * 08420000
         MVC   AMA007I+21(8),AMA006I+21                           0218  08430000
*                                    /* DISPOSITION MESSAGE           * 08440000
*                                                                       08450000
* /******************************************************************** 08460000
* /*    LOCATE THE SSI IN THE SSI TABLE FOR INCLUSION IN MESSAGE      * 08470000
* /******************************************************************** 08480000
*                                                                       08490000
*                                                                       08500000
* SSIGEN:                                                               08510000
*    DIFF = SSISAVE - MODTBL;        /* FIND NAME DISPLACEMENT        * 08520000
SSIGEN   L     @F,56(0,@5)                                        0219  08530000
         LCR   @F,@F                                              0219  08540000
         A     @F,48(0,@5)                                        0219  08550000
         ST    @F,DIFF                                            0219  08560000
*                                    /* IN MOD NAME TABLE M4000       * 08570000
*    QUOTIENT = DIFF/10;             /* DIVIDE BY ENTRY LNGTH YA00891 * 08580000
         LR    @E,@F                                              0220  08590000
         SRDA  @E,32                                              0220  08600000
         LA    @0,10                                              0220  08610000
         DR    @E,@0                                              0220  08620000
         ST    @F,QUOTIENT                                        0220  08630000
*    ADDFACTR = QUOTIENT * 8;        /* MULTIPLY BY SSI ENTRY         * 08640000
         SLA   @F,3                                               0221  08650000
         ST    @F,ADDFACTR                                        0221  08660000
*                                    /* LENGTH TO LOCATE THE          * 08670000
*                                    /* MODULE'S SSI IN TABLE         * 08680000
*    CORRSSI = SSITABLE + ADDFACTR;  /* GET SSI ADDRESS               * 08690000
         A     @F,60(0,@5)                                        0222  08700000
         ST    @F,CORRSSI                                         0222  08710000
*    SSI = SSIDATA;                  /* MOVE SSI INTO MSG             * 08720000
         LR    @2,@F                                              0223  08730000
         MVC   AMA007I+60(8),0(@2)                                0223  08740000
*    IF SSIINFO = '        ' THEN                                       08750000
         CLC   SSICARD+12(8),@C13                                 0224  08760000
*      GO TO MOVESSI;                /* NEED SETSSI CARD              * 08770000
         BC    08,MOVESSI                                         0225  08780000
*    MSGBUF = AMA007I;               /* MOVE MSG INTO BUFFER          * 08790000
         MVC   MSGBUF(68),AMA007I                                 0226  08800000
         MVI   MSGBUF+68,C' '                                     0226  08810000
         MVC   MSGBUF+69(52),MSGBUF+68                            0226  08820000
*    CALL AMAERMSG;                  /* WRITE MESSAGE S21016          * 08830000
         L     @F,@V1              ADDRESS OF AMAERMSG            0227  08840000
         BALR  @E,@F                                              0227  08850000
*                                                                       08860000
* /******************************************************************** 08870000
*                                                                       08880000
*    AMA013NM = LLLLLLLL;            /* MOVE MODULE NAME TO MSG       * 08890000
         MVC   AMA013I+58(8),AMA007I+21                           0228  08900000
*                                    /* S21016                        * 08910000
*    MSGBUF = AMA013I;               /* MOVE MSG INTO BUFFER          * 08920000
         MVC   MSGBUF(66),AMA013I                                 0229  08930000
         MVI   MSGBUF+66,C' '                                     0229  08940000
         MVC   MSGBUF+67(54),MSGBUF+66                            0229  08950000
*                                    /* S21016                        * 08960000
*    CALL AMAERMSG;                  /* WRITE MESSAGE S21016          * 08970000
         L     @F,@V1              ADDRESS OF AMAERMSG            0230  08980000
         BALR  @E,@F                                              0230  08990000
*                                                                       09000000
* PREPRD:                                                               09010000
*    OPENREG = OUTFDCB;              /* S21016                        * 09020000
PREPRD   L     @3,28(0,@5)                                        0231  09030000
*    GENERATE;                       /* S21016                        * 09040000
         READ  OUTFDECA,SF,(OPENREG),UT2OUT  READ IDENTIFY CARDS S21016 09050000
         CHECK OUTFDECA                                          S21016 09060000
         DS    0H                                                       09070000
*    IF UT2OUT(1) ¬= ' '             /* CONTROL CARD S21016           * 09080000
*          THEN                                                         09090000
         CLI   UT2OUT,C' '                                        0233  09100000
*      GO TO PREPRD;                 /* NO-GET NEXT CARD S21016       * 09110000
         BC    07,PREPRD                                          0234  09120000
*    I = 1;                          /* INITIALIZE COUNT S21016       * 09130000
         LA    @6,1                                               0235  09140000
*    IF IDENTCON = '08'X THEN                                           09150000
         CLI   1(@5),X'08'                                        0236  09160000
         BC    07,@9E2                                            0236  09170000
*      DO;                           /* CONTINUATION S21016           * 09180000
*        IDENTCON = '00'X;           /* YES-TURN OFF SW S21016        * 09190000
         MVI   1(@5),X'00'                                        0238  09200000
*        GO TO AMAIDST;              /* WRITE INFO S21016             * 09210000
         BC    15,AMAIDST                                         0239  09220000
*      END;                          /*                        S21016 * 09230000
*    OPENREG = ADDR(AMAIDCHK);       /* SET RETURN ADDR        S21016 * 09240000
@9E2     LA    @3,AMAIDCHK                                        0241  09250000
*    GO TO CHKSPACE;                 /* FIND OPERAND           S21016 * 09260000
         BC    15,CHKSPACE                                        0242  09270000
*                                                                       09280000
* AMAIDCHK:                          /*                        S21016 * 09290000
*    IF UT2OUT(I:I+3) = 'NAME'       /* NAME CARD              S21016 * 09300000
*          THEN                                                         09310000
AMAIDCHK LR    @2,@6                                              0243  09320000
         LA    @A,UT2OUT-1(@2)                                    0243  09330000
         CLC   0(4,@A),@C14                                       0243  09340000
*      GO TO OUTFEOF;                /* YES-EXIT               S21016 * 09350000
         BC    08,OUTFEOF                                         0244  09360000
*    IF UT2OUT(I:I+7) ¬= 'IDENTIFY'  /* IDENTIFY CARD          S21016 * 09370000
*          THEN                                                         09380000
         CLC   0(8,@A),@C15                                       0245  09390000
*      GO TO PREPRD;                 /* NO-READ NEW CARD       S21016 * 09400000
         BC    07,PREPRD                                          0246  09410000
*                                                                       09420000
* AMAIDST:                                                              09430000
*    OPENREG = ADDR(AMAIDBL);        /* SET RETURN ADDR        S21016 * 09440000
AMAIDST  LA    @3,AMAIDBL                                         0247  09450000
*    IF UT2OUT(72) ¬= ' '            /* CONTINUATION            M0861 * 09460000
*          THEN                                                         09470000
         CLI   UT2OUT+71,C' '                                     0248  09480000
         BC    08,@9E1                                            0248  09490000
*      IDENTCON = '08'X;             /* YES-INDICATE SO         M0861 * 09500000
         MVI   1(@5),X'08'                                        0249  09510000
*    GO TO CHKSPACE;                 /* FIND IDR INFO          S21016 * 09520000
         BC    15,CHKSPACE                                        0250  09530000
*                                                                       09540000
* AMAIDBL:                                                              09550000
*    MSGBUF = ' ';                   /* BLANK BUFFER           S21016 * 09560000
AMAIDBL  MVI   MSGBUF,C' '                                        0251  09570000
         MVC   MSGBUF+1(120),MSGBUF                               0251  09580000
*    MSGBUF(20:82) = UT2OUT(I:72);   /* MOVE TO BUFFER         S21016 * 09590000
         LA    @2,72                                              0252  09600000
         LR    @4,@6                                              0252  09610000
         SR    @2,@4                                              0252  09620000
         LA    @E,UT2OUT-1(@4)                                    0252  09630000
         LA    @A,MSGBUF+19                                       0252  09640000
         MVI   0(@A),C' '                                         0252  09650000
         MVC   1(062,@A),0(@A)                                    0252  09660000
         EX    @2,@MVC                                            0252  09670000
*    CALL AMAERMSG;                  /* IDENTIFY INFO          S21016 * 09680000
         L     @F,@V1              ADDRESS OF AMAERMSG            0253  09690000
         BALR  @E,@F                                              0253  09700000
*    GO TO PREPRD;                   /* READ NEXT CARD         S21016 * 09710000
         BC    15,PREPRD                                          0254  09720000
*                                                                       09730000
* OUTFEOF:                                                              09740000
*    OPENREG = OUTFDCB;              /*                        S21016 * 09750000
OUTFEOF  L     @3,28(0,@5)                                        0255  09760000
*    GENERATE (CLOSE ((OPENREG)));   /*                        S21016 * 09770000
         CLOSE ((OPENREG))                                              09780000
         DS    0H                                                       09790000
* OPENOUTF:                          /*                         M0867 * 09800000
*    OPENREG = OUTFDCB;              /*                        S21016 * 09810000
OPENOUTF L     @3,28(0,@5)                                        0257  09820000
*    GENERATE (OPEN ((OPENREG),OUTPUT)); /* OPEN OUTF          S21016 * 09830000
         OPEN ((OPENREG),OUTPUT)                                        09840000
         DS    0H                                                       09850000
*    OPENREG = OUTFDCB;              /* GET THE OUTFDCB ADDR   S21016 * 09860000
         L     @3,28(0,@5)                                        0259  09870000
*    GENERATE;                                                          09880000
         USING IHADCB,OPENREG                                    S21016 09890000
         TM    DCBOFLGS,OPENFLG      DCB OPEN OKAY?              S21016 09900000
         BZ    AMADDOUT              NO-GO WRITE ERROR MESSAGE   S21016 09910000
         DS    0H                                                       09920000
*    GO TO AMARET2;                  /* RETURN TO AMAPTFLE            * 09930000
         BC    15,AMARET2                                         0261  09940000
*                                                                       09950000
* CHKSPACE:                                                             09960000
*    DO I = I TO 71;                 /* GET NEXT OPERAND       S21016 * 09970000
*      IF UT2OUT(I) = ' '            /* REACHED NON BLANK      S21016 * 09980000
*            THEN                                                       09990000
@DO9E0   LR    @2,@6                                              0263  10000000
         LA    @A,UT2OUT-1(@2)                                    0263  10010000
         CLI   0(@A),C' '                                         0263  10020000
*        GO TO CHKSP2;               /* NO CONTINUE TO SCAN    S21016 * 10030000
         BC    08,CHKSP2                                          0264  10040000
*    END;                                                               10050000
*                                                                       10060000
* CHKSP2:                                                               10070000
*    DO I = I TO 71;                                                    10080000
         AH    @6,@D2                                             0265  10090000
@DO9DF   CH    @6,@D7                                             0265  10100000
         BC    12,@DO9E0                                          0265  10110000
         BC    15,@DO9DB                                          0266  10120000
*      IF UT2OUT(I) ¬= ' '           /* REACHED NON BLANK      S21016 * 10130000
*            THEN                                                       10140000
@DO9DC   LR    @2,@6                                              0267  10150000
         LA    @A,UT2OUT-1(@2)                                    0267  10160000
         CLI   0(@A),C' '                                         0267  10170000
         BC    08,@9D8                                            0267  10180000
*        GENERATE;                                                      10190000
         BR    3                       RETURN TO CALLER          S21016 10200000
         DS    0H                                                       10210000
*    END;                            /*                        S21016 * 10220000
*                                                                       10230000
* /******************************************************************** 10240000
* /******************************************************************** 10250000
* /*    AMALEPRM IS A SUBROUTINE THAT IS USED TO RETRIEVE THE         * 10260000
* /*    LINKEDIT ATTRIBUTES OF THE MODULE FROM THE EXEC STATEMENT     * 10270000
* /*    IF THE MODULE WAS LINKEDITED INTO THE SYSTEM AT SYSGEN TIME.  * 10280000
* /******************************************************************** 10290000
*                                                                       10300000
*                                                                       10310000
* AMALEPRM:                                                             10320000
*    I = 3;                          /* SET INDEX PAST SLASHES        * 10330000
@9D8     AH    @6,@D2                                             0269  10340000
@DO9DB   CH    @6,@D7                                             0269  10350000
         BC    12,@DO9DC                                          0269  10360000
AMALEPRM LA    @6,3                                               0270  10370000
*    IF PARMCONT = '1'B THEN         /* CONTINUATION STATEMENT?       * 10380000
         TM    PARMCONT,B'10000000'                               0271  10390000
*      GO TO AMABLANK;               /* YES-FIND FIRST KEYWORD        * 10400000
         BC    01,AMABLANK                                        0272  10410000
*    PRMNUMBR = 0;                   /* RESET LKED PARM LENGTH  M4003 * 10420000
         SR    @F,@F                                              0273  10430000
         STH   @F,PRMNUMBR                                        0273  10440000
*                                                                       10450000
* AMACOLCK:                                                             10460000
*    IF I >= 72 THEN                 /* SCAN COMPLETE                 * 10470000
AMACOLCK CH    @6,@D8                                             0274  10480000
*                                                                       10490000
* AMACONT:                                                              10500000
*      GO TO AMARET2;                /* YES-RETURN TO AMAPTFLE        * 10510000
         BC    11,AMARET2                                         0275  10520000
*                                                                       10530000
* AMABLANK:                                                             10540000
*    IF PCHBUFFR(I) = ' '            /* KEYWORD FOUND?                * 10550000
*          THEN                                                         10560000
@9D7     EQU   *                                                  0276  10570000
AMABLANK LR    @2,@6                                              0276  10580000
         L     @4,20(0,@5)                                        0276  10590000
         LA    @A,0(@2,@4)                                        0276  10600000
         BCTR  @A,0                                               0276  10610000
         CLI   0(@A),C' '                                         0276  10620000
         BC    07,@9D6                                            0276  10630000
*      DO;                           /* YES                           * 10640000
*                                                                       10650000
* AMABUMPI:                                                             10660000
*        I = I+1;                    /* BUMP INDEX INTO BUFFER        * 10670000
AMABUMPI AH    @6,@D2                                             0278  10680000
*        GO TO AMACOLCK;             /* CHECK FOR END OF STMNT        * 10690000
         BC    15,AMACOLCK                                        0279  10700000
*      END;                                                             10710000
*    ELSE                            /* NO                            * 10720000
*      IF PARMCONT = '1'B THEN       /* A CONTINUAION STMNT?          * 10730000
@9D6     TM    PARMCONT,B'10000000'                               0281  10740000
*        GO TO AMAPRM2;              /* YES-CONSTRUCT PARM LIST       * 10750000
         BC    01,AMAPRM2                                         0282  10760000
*      ELSE                                                             10770000
* /*    NO - THEN CHECK TO SEE IF PARMS HAVE BEEN FOUND               * 10780000
*        IF PCHBUFFR(I:I+4) = PARMEQUL THEN /* FOUND?                 * 10790000
         LR    @2,@6                                              0283  10800000
         L     @4,20(0,@5)                                        0283  10810000
         LA    @A,0(@2,@4)                                        0283  10820000
         BCTR  @A,0                                               0283  10830000
         CLC   0(5,@A),PARMEQUL                                   0283  10840000
*          GO TO AMAMVPRM;           /* YES-SET UP PARM LIST          * 10850000
*        ELSE                                                           10860000
*          GO TO AMABUMPI;           /* NO-CHECK NEXT CHAR            * 10870000
         BC    07,AMABUMPI                                        0285  10880000
*                                                                       10890000
* AMAMVPRM:                                                             10900000
*    ENDPARM = '7D'X;                /* SET PARM END TO '       M4011 * 10910000
@9D5     EQU   *                                                  0286  10920000
AMAMVPRM MVI   ENDPARM,X'7D'                                      0286  10930000
*    IF PCHBUFFR(I+5) = '('          /* IF PARM BEGIN IS        M4011 * 10940000
*          THEN                                                         10950000
         LA    @2,5                                               0287  10960000
         AR    @2,@6                                              0287  10970000
         L     @4,20(0,@5)                                        0287  10980000
         LA    @A,0(@2,@4)                                        0287  10990000
         BCTR  @A,0                                               0287  11000000
         CLI   0(@A),C'('                                         0287  11010000
         BC    07,@9D4                                            0287  11020000
*      ENDPARM = ')';                /* (,SET END TO )          M4011 * 11030000
         MVI   ENDPARM,C')'                                       0288  11040000
*    I = I+6;                        /* BUMP PAST 'PARM='             * 11050000
@9D4     AH    @6,@D9                                             0289  11060000
*    IF I >= 72                      /* AT END OF STMNT?              * 11070000
*          THEN                                                         11080000
         CH    @6,@D8                                             0290  11090000
         BC    04,@9D3                                            0290  11100000
*      DO;                           /* YES                           * 11110000
*        PARMCONT = '1'B;            /* INDICATE CONTINUATION         * 11120000
         OI    PARMCONT,B'10000000'                               0292  11130000
*        GO TO AMARET2;              /* RETURN TO AMAPTFLE            * 11140000
         BC    15,AMARET2                                         0293  11150000
*      END;                                                             11160000
*                                                                       11170000
* AMAPRM1:                                                              11180000
*    B = 3;                          /* INDEX INTO BLDLFLD            * 11190000
@9D3     EQU   *                                                  0295  11200000
AMAPRM1  LA    @F,3                                               0295  11210000
         STH   @F,B                                               0295  11220000
*                                                                       11230000
* /******************************************************************** 11240000
* /*    MOVE THE PARAMETERS, ONE CHARACTER AT A TIME, INTO BLDLFLD    * 11250000
* /******************************************************************** 11260000
*                                                                       11270000
*                                                                       11280000
* AMAPRM2:                                                              11290000
*    BLDLFLD(B) = PCHBUFFR(I);       /* MOVE A CHARACTER              * 11300000
AMAPRM2  LR    @2,@6                                              0296  11310000
         L     @4,20(0,@5)                                        0296  11320000
         LA    @E,0(@2,@4)                                        0296  11330000
         BCTR  @E,0                                               0296  11340000
         MVC   @TEMP2+2(2),B                                      0296  11350000
         L     @7,@TEMP2                                          0296  11360000
         LA    @A,BLDLFLD-1(@7)                                   0296  11370000
         MVC   0(1,@A),0(@E)                                      0296  11380000
*    B = B+1;                        /* BUMP BLDLFLD INDEX            * 11390000
         LA    @F,1                                               0297  11400000
         MVC   @TEMP2+2(2),B                                      0297  11410000
         A     @F,@TEMP2                                          0297  11420000
         STH   @F,B                                               0297  11430000
*    I = I+1;                        /* BUMP PCHBUFFR INDEX           * 11440000
         AH    @6,@D2                                             0298  11450000
*    PRMNUMBR = PRMNUMBR+1;          /* BUMP NUMBER OF PARMS          * 11460000
         LA    @F,1                                               0299  11470000
         MVC   @TEMP2+2(2),PRMNUMBR                               0299  11480000
         A     @F,@TEMP2                                          0299  11490000
         STH   @F,PRMNUMBR                                        0299  11500000
*    IF I >= 72                      /* END OF STATEMENT?             * 11510000
*          THEN                                                         11520000
         CH    @6,@D8                                             0300  11530000
         BC    04,@9D2                                            0300  11540000
*      DO;                           /* YES                           * 11550000
*        PARMCONT = '1'B;            /* INDICATE PARM CONTINUED       * 11560000
         OI    PARMCONT,B'10000000'                               0302  11570000
*        GO TO AMARET2;              /* RETURN TO AMAPTFLE            * 11580000
         BC    15,AMARET2                                         0303  11590000
*      END;                                                             11600000
*    ELSE                                                               11610000
*      IF PCHBUFFR(I) = ENDPARM      /* END OF PARAMETERS M4011       * 11620000
*            THEN                                                       11630000
@9D2     LR    @2,@6                                              0305  11640000
         L     @4,20(0,@5)                                        0305  11650000
         LA    @A,0(@2,@4)                                        0305  11660000
         BCTR  @A,0                                               0305  11670000
         CLC   0(1,@A),ENDPARM                                    0305  11680000
         BC    07,@9D0                                            0305  11690000
*        DO;                         /* YES                           * 11700000
*          B = 0;                    /* RE-INIT BLDLFLD INDEX         * 11710000
         SR    @F,@F                                              0307  11720000
         STH   @F,B                                               0307  11730000
*          PARMCONT = '0'B;          /* SET NO CONTINUATION           * 11740000
         NI    PARMCONT,B'01111111'                               0308  11750000
*          BLDLFLD(1:2) = PRMNUMBR;  /* MOVE PARM LENGTH              * 11760000
         MVC   BLDLFLD(2),PRMNUMBR                                0309  11770000
*                                    /*                         M4003 * 11780000
*          GO TO AMARET2;            /* RETURN TO AMAPTFLE            * 11790000
         BC    15,AMARET2                                         0310  11800000
*        END;                                                           11810000
*      ELSE                          /* NOT END OF PARMS              * 11820000
*        GO TO AMAPRM2;              /* MOVE ANOTHER PARM             * 11830000
*                                                                       11840000
* /******************************************************************** 11850000
* /******************************************************************** 11860000
* /*    AMACLOSE IS ENTERED FROM AMAPTFLE WHEN ALL OF THE DCBS        * 11870000
* /*    MUST BE CLOSED BEFORE TERMINATION.                            * 11880000
* /******************************************************************** 11890000
*                                                                       11900000
*    GENERATE;                                                          11910000
@9CF     EQU   *                                                  0313  11920000
@9D1     EQU   *                                                  0313  11930000
AMACLOSE  CLOSE (SYSUTDCB)    CLOSE THE SYSUTDCB                        11940000
         DS    0H                                                       11950000
*    GO TO AMARET2;                  /* RETURN TO AMAPTFLE            * 11960000
         BC    15,AMARET2                                         0314  11970000
*                                                                       11980000
* /******************************************************************** 11990000
* /******************************************************************** 12000000
* /******************************************************************** 12010000
* /*    SET UP FOR MESSAGE AMA0006I                                   * 12020000
* /******************************************************************** 12030000
*                                                                       12040000
*                                                                       12050000
* AMA6IB:                                                               12060000
*    NN = '01';                      /* SET UNSUCCESSFUL              * 12070000
AMA6IB   MVC   AMA006I+53(2),@C19                                 0315  12080000
*                                    /* BLDL CODE IN MSG              * 12090000
*    GO TO AMAMV6I;                  /* MOVE REMAINDER OF MSG         * 12100000
         BC    15,AMAMV6I                                         0316  12110000
*                                                                       12120000
* AMA6II:                                                               12130000
*    NN = '02';                      /* SET UNSUCCESSFUL              * 12140000
AMA6II   MVC   AMA006I+53(2),@C20                                 0317  12150000
*                                    /* L.E. CODE IN MSG              * 12160000
*                                                                       12170000
* AMAMV6I:                                                              12180000
*    MSGBUF = AMA006I;               /* MOVE MSG INTO BUFFER          * 12190000
AMAMV6I  MVC   MSGBUF(55),AMA006I                                 0318  12200000
         MVI   MSGBUF+55,C' '                                     0318  12210000
         MVC   MSGBUF+56(65),MSGBUF+55                            0318  12220000
*    IF RETCDE < '08'X THEN          /* CODE < 8                A48711* 12230000
         CLI   2(@5),X'08'                                        0319  12240000
         BC    10,@9CE                                            0319  12250000
*      RETCDE='08'X;                 /* YES. CHANGE TO 8        A48711* 12260000
         MVI   2(@5),X'08'                                        0320  12270000
*    CALL AMAERMSG;                  /* WRITE MESSAGE                 * 12280000
@9CE     L     @F,@V1              ADDRESS OF AMAERMSG            0321  12290000
         BALR  @E,@F                                              0321  12300000
*    IF NN = '02' THEN               /*BAD LINK EDIT             M0867* 12310000
         CLC   AMA006I+53(2),@C20                                 0322  12320000
*      GO TO OPENOUTF;               /*YES-OPEN OUTF             M0867* 12330000
         BC    08,OPENOUTF                                        0323  12340000
*    OPENREG=OUTFDCB;                /* GET DCB ADDRESS         A53522* 12350000
         L     @3,28(0,@5)                                        0324  12360000
*    GENERATE;                       /* POSITION DATA SET       A53522* 12370000
        CLOSE   ((OPENREG),REREAD),TYPE=T                               12380000
         DS    0H                                                       12390000
*    GO TO AMARET2;                  /* RETURN TO AMAPTFLE            * 12400000
         BC    15,AMARET2                                         0326  12410000
*                                                                       12420000
* AMANOID:                           /* NO IDENTIFY CARD       S21016 * 12430000
*    MSGBUF = AMA010I;               /* MOVE MSG TO BUFF       S21016 * 12440000
AMANOID  MVC   MSGBUF(62),AMA010I                                 0327  12450000
         MVI   MSGBUF+62,C' '                                     0327  12460000
         MVC   MSGBUF+63(58),MSGBUF+62                            0327  12470000
*    RETCDE='10'X;                   /* SET 16 RETURN CODE      A48711* 12480000
         MVI   2(@5),X'10'                                        0328  12490000
*    GO TO AMACALL;                  /* WRITE MESSAGE AND             * 12500000
         BC    15,AMACALL                                         0329  12510000
*                                    /* RETURN TO FILCLOSE            * 12520000
*                                                                       12530000
* /******************************************************************** 12540000
* /******************************************************************** 12550000
* /*    AMASYNAD IS THE SYNAD IN CASE OF AN I/O ERROR.                * 12560000
* /*    RETURN IS TO THE SYNADAF ROUTINE IN AMAPTFLE                  * 12570000
* /******************************************************************** 12580000
*                                                                       12590000
*                                                                       12600000
* AMASYNAD:                                                             12610000
*    GENERATE;                       /*                         M4013 * 12620000
AMASYNAD EQU   *                                                  0330  12630000
         L     13,4(0,13)                                         M4013 12640000
         L     14,32(0,5)                                         M4013 12650000
         LM    2,12,28(13)        DO NOT RESTORE REGISTERS 0 OR 1 M4013 12660000
         BCR   15,14                                              M4013 12670000
         DS    0H                                                       12680000
*                                                                       12690000
* /******************************************************************** 12700000
* /******************************************************************** 12710000
*                                                                       12720000
*    RESPECIFY DUMFIELD BASED(MSGAREA);                                 12730000
*                                                                       12740000
* /******************************************************************** 12750000
* /*    AMADDMSG INITIALIZES THE ERROR MESSAGE FOR AN                 * 12760000
* /*    UNSUCCESSFUL OPEN OF THE DCBS.                                * 12770000
* /******************************************************************** 12780000
*                                                                       12790000
*                                                                       12800000
* AMADDSYS:                                                             12810000
*    DUMFIELD(41:47) = DDSYSL;       /* MOVE IN DDNAME          M4012 * 12820000
AMADDSYS L     @2,36(0,@5)                                        0332  12830000
         MVC   40(7,@2),DDSYSL                                    0332  12840000
*    GO TO AMADDRET;                 /* RETURN TO AMAPTFLE            * 12850000
         BC    15,AMADDRET                                        0333  12860000
*                                                                       12870000
* AMADDMSG:                                                             12880000
*    DUMFIELD(41:46) = DDMSG;        /* MOVE IN DDNAME                * 12890000
AMADDMSG L     @2,36(0,@5)                                        0334  12900000
         MVC   40(6,@2),DDMSG                                     0334  12910000
*    GO TO AMADDRET;                 /* RETURN TO AMAPTFLE      M4000 * 12920000
         BC    15,AMADDRET                                        0335  12930000
*                                                                       12940000
* AMADDOUT:                                                             12950000
*    DUMFIELD(41:44) = DDMSGOUT;      /* MOVE IN DDNAME               * 12960000
AMADDOUT L     @2,36(0,@5)                                        0336  12970000
         MVC   40(4,@2),DDMSGOUT                                  0336  12980000
*                                                                       12990000
* AMADDRET:                                                             13000000
*    RETURN TO MESSAGE2;             /* RETURN TO AMAPTFLE            * 13010000
AMADDRET L     @D,4(0,@D)                                         0337  13020000
         L     @E,52(0,@5)                                        0337  13030000
         LM    @F,@C,16(@D)                                       0337  13040000
         BCR   15,@E                                              0337  13050000
*                                    /* TO WRITE ERROR MESSAGE        * 13060000
*                                                                       13070000
* AMARET2:                                                              13080000
*    BRFIELD = 0;                    /* CLEAR BRANCH TAB INDEX        * 13090000
AMARET2  MVI   0(@5),0                                            0338  13100000
*                                                                       13110000
* AMARET1:                                                              13120000
*    RETURN;                         /* RETURN TO AMAPTFLE            * 13130000
         BC    15,@EL01                                           0339  13140000
*                                                                       13150000
* /******************************************************************** 13160000
* /******************************************************************** 13170000
* /*    AMAERMSG IS AN INTERNAL SUBROUTINE THAT IS CALLED TO          * 13180000
* /*    WRITE MESSAGES.                                               * 13190000
* /******************************************************************** 13200000
*                                                                       13210000
*                                                                       13220000
* AMAERMSG:                                                             13230000
*    PROC;                                                              13240000
@EL01    L     @D,4(0,@D)                                         0340  13250000
         LM    @E,@C,12(@D)                                       0340  13260000
         BCR   15,@E                                              0340  13270000
AMAERMSG STM   @E,@C,12(@D)                                       0340  13280000
         ST    @D,@SAV002+4                                       0340  13290000
         LA    @F,@SAV002                                         0340  13300000
         ST    @F,8(0,@D)                                         0340  13310000
         LR    @D,@F                                              0340  13320000
*    OPENREG = PRINTDCB;             /* GET DCB ADDRESS               * 13330000
         L     @3,40(0,@5)                                        0341  13340000
*    GENERATE;                                                          13350000
           WRITE ERRDECB,SF,(OPENREG),MSGBUF   WRITE THE MESSAGE        13360000
           CHECK ERRDECB                                                13370000
         DS    0H                                                       13380000
*    RETURN;                         /* RETURN TO MSG CALLER          * 13390000
         BC    15,@EL01                                           0343  13400000
*                                                                       13410000
* /******************************************************************** 13420000
* /******************************************************************** 13430000
*                                                                       13440000
*    GENERATE;                                                          13450000
SYSUTDCB   DCB DDNAME=SYSUT2,DSORG=PS,MACRF=(RP,W),LRECL=80,BLKSIZE=80,C13460000
               SYNAD=AMASYNAD,EODAD=AMAEODAD,RECFM=F              M4005 13470000
         DS    0H                                                       13480000
*                                                                       13490000
* /******************************************************************** 13500000
*                                                                       13510000
*    END AMAERMSG;                                                      13520000
         BC    15,@EL01                                           0345  13530000
*    END AMAPTF01;                                                      13540000
@DATA1   EQU   *                                                        13550000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           13560000
@1       EQU   01                                                       13570000
@2       EQU   02                                                       13580000
@3       EQU   03                                                       13590000
@4       EQU   04                                                       13600000
@5       EQU   05                                                       13610000
@6       EQU   06                                                       13620000
@7       EQU   07                                                       13630000
@8       EQU   08                                                       13640000
@9       EQU   09                                                       13650000
@A       EQU   10                                                       13660000
@B       EQU   11                                                       13670000
@C       EQU   12                                                       13680000
@D       EQU   13                                                       13690000
@E       EQU   14                                                       13700000
@F       EQU   15                                                       13710000
@D1      DC    H'5'                                                     13720000
@D2      DC    H'1'                                                     13730000
@D3      DC    H'8'                                                     13740000
@D4      DC    H'-2'                                                    13750000
@D5      DC    H'12'                                                    13760000
@D6      DC    H'16'                                                    13770000
@D7      DC    H'71'                                                    13780000
@D8      DC    H'72'                                                    13790000
@D9      DC    H'6'                                                     13800000
@MVC     MVC   0(1,@A),0(@E)                                            13810000
@V1      DC    A(AMAERMSG)                                              13820000
         DS    0F                                                       13830000
@C13     DC    C'        '                                              13840000
@C14     DC    C'NAME'                                                  13850000
@C15     DC    C'IDENTIFY'                                              13860000
@X2      DC    X'0000'                                                  13870000
@X12     DC    X'0001'                                                  13880000
@C19     DC    C'01'                                                    13890000
@C20     DC    C'02'                                                    13900000
         DS    0D                                                       13910000
@DATA    EQU   *                                                        13920000
@SAV001  EQU   @DATA+00000000      72 BYTE(S) ON WORD                   13930000
OPENREG  EQU   00000003            FULLWORD POINTER REGISTER            13940000
         ORG   @DATA+00000072                                           13950000
OPENBIT  EQU   *                   1 BIT(S) ON BYTE                     13960000
         DC    B'00000000'                                              13970000
RETCODE  EQU   00000015            FULLWORD INTEGER REGISTER            13980000
LSTPTR   EQU   00000001            FULLWORD POINTER REGISTER            13990000
LSTPTRSV EQU   00000005            FULLWORD POINTER REGISTER            14000000
I        EQU   00000006            FULLWORD POINTER REGISTER            14010000
PRMLST   EQU   00000000            72 BYTE(S) ON WORD                   14020000
BRFIELD  EQU   PRMLST+00000000     1  BYTE  POINTER                     14030000
IDENTCON EQU   PRMLST+00000001     1  BYTE  POINTER                     14040000
RETCDE   EQU   PRMLST+00000002     1  BYTE  POINTER                     14050000
COMSW    EQU   PRMLST+00000003     1  BYTE  POINTER                     14060000
MODSTORE EQU   PRMLST+00000004     FULLWORD POINTER                     14070000
OVTABADR EQU   PRMLST+00000008     FULLWORD POINTER                     14080000
PTF01    EQU   PRMLST+00000012     FULLWORD POINTER                     14090000
PTF02    EQU   PRMLST+00000016     FULLWORD POINTER                     14100000
PCHAREA  EQU   PRMLST+00000020     FULLWORD POINTER                     14110000
MODAREA  EQU   PRMLST+00000024     FULLWORD POINTER                     14120000
OUTFDCB  EQU   PRMLST+00000028     FULLWORD POINTER                     14130000
SYNADEXT EQU   PRMLST+00000032     FULLWORD POINTER                     14140000
MSGAREA  EQU   PRMLST+00000036     FULLWORD POINTER                     14150000
PRINTDCB EQU   PRMLST+00000040     FULLWORD POINTER                     14160000
SELNAME  EQU   PRMLST+00000044     FULLWORD POINTER                     14170000
SSISAVE  EQU   PRMLST+00000048     FULLWORD POINTER                     14180000
MESSAGE2 EQU   PRMLST+00000052     FULLWORD POINTER                     14190000
MODTBL   EQU   PRMLST+00000056     FULLWORD POINTER                     14200000
SSITABLE EQU   PRMLST+00000060     FULLWORD POINTER                     14210000
PARMPTR  EQU   PRMLST+00000064     FULLWORD POINTER                     14220000
FILCLOSE EQU   PRMLST+00000068     FULLWORD POINTER                     14230000
DDMSGOUT EQU   *                   4 BYTE(S)                            14240000
         DC    C'OUTF'                                                  14250000
DDMSG    EQU   *                   6 BYTE(S)                            14260000
         DC    C'SYSUT2'                                                14270000
DDSYSL   EQU   *                   7 BYTE(S)                            14280000
         DC    C'SYSLMOD'                                               14290000
MODSTRBF EQU   00000000            8 BYTE(S)                            14300000
NAMMATCH EQU   *                   1  BYTE  POINTER                     14310000
         DC    AL1(0)                                                   14320000
         ORG   @DATA+00000092                                           14330000
BRTABLE  EQU   *                   6*FULLWORD POINTER                   14340000
         DC    AL4(AMAOPEN)                                             14350000
         DC    AL4(AMASPOBJ)                                            14360000
         DC    AL4(AMALINK)                                             14370000
         DC    AL4(AMACLOSE)                                            14380000
         DC    AL4(AMASPS)                                              14390000
         DC    AL4(AMALEPRM)                                            14400000
MSGBUF   EQU   @DATA+00000116      121 BYTE(S)                          14410000
UT2OUT   EQU   @DATA+00000237      80 BYTE(S)                           14420000
DUMFIELD EQU   00000000            80 BYTE(S)                           14430000
         ORG   @DATA+00000320                                           14440000
TTRZ     EQU   *                   4 BYTE(S) ON WORD                    14450000
         DC    C' '                                                     14460000
         DC    00003C' '                                                14470000
ENDPARM  EQU   @DATA+00000324      1 BYTE(S)                            14480000
         ORG   @DATA+00000326                                           14490000
BLDLFLD  EQU   *                   72 BYTE(S) ON HWORD                  14500000
         DC    C' '                                                     14510000
         DC    00071C' '                                                14520000
PTF02ADR EQU   @DATA+00000400      FULLWORD POINTER                     14530000
NAMECARD EQU   @DATA+00000404      21 BYTE(S) ON WORD                   14540000
         ORG   NAMECARD+00000000                                        14550000
NME      EQU   *                   10 BYTE(S)                           14560000
         DC    C'     NAME '                                            14570000
MDN      EQU   NAMECARD+00000010   11 BYTE(S)                           14580000
         ORG   @DATA+00000425                                           14590000
REP      EQU   *                   3 BYTE(S)                            14600000
         DC    C'(R)'                                                   14610000
NEWNAME  EQU   *                   1 BYTE(S)                            14620000
         DC    X'00'                                                    14630000
IDFOUND  EQU   *                   1 BYTE(S)                            14640000
         DC    X'80'                                                    14650000
ALIASCD  EQU   @DATA+00000432      15 BYTE(S) ON WORD                   14660000
         ORG   ALIASCD+00000000                                         14670000
A00000   EQU   *                   7 BYTE(S)                            14680000
         DC    C' ALIAS '                                               14690000
ALIASNM  EQU   ALIASCD+00000007    8 BYTE(S)                            14700000
SSICARD  EQU   @DATA+00000448      20 BYTE(S) ON WORD                   14710000
         ORG   SSICARD+00000000                                         14720000
SETSSI   EQU   *                   12 BYTE(S)                           14730000
         DC    C'     SETSSI '                                          14740000
SSIINFO  EQU   SSICARD+00000012    8 BYTE(S)                            14750000
SELBUF   EQU   00000000            8 BYTE(S)                            14760000
PRMFIELD EQU   00000000            102 BYTE(S) ON WORD                  14770000
PARMLEN  EQU   PRMFIELD+00000000   HALFWORD POINTER                     14780000
PARM     EQU   PRMFIELD+00000002   100 BYTE(S)                          14790000
         ORG   @DATA+00000468                                           14800000
LKEDNAME EQU   *                   8 BYTE(S)                            14810000
         DC    C' '                                                     14820000
         DC    00007C' '                                                14830000
AMA005I  EQU   *                   54 BYTE(S)                           14840000
         DC    C'AMA005I  INVALID PARAMETER SPECIFIED ON EX'            14850000
         DC    C'EC STATEMENT'                                          14860000
AMA006I  EQU   @DATA+00000532      55 BYTE(S) ON WORD                   14870000
         ORG   AMA006I+00000000                                         14880000
A00001   EQU   *                   21 BYTE(S)                           14890000
         DC    C'AMA006I  LOAD MODULE '                                 14900000
CCCCCCCC EQU   AMA006I+00000021    8 BYTE(S)                            14910000
         ORG   AMA006I+00000029                                         14920000
A00002   EQU   *                   24 BYTE(S)                           14930000
         DC    C' NOT UPDATED WITH PTF - '                              14940000
NN       EQU   AMA006I+00000053    2 BYTE(S)                            14950000
AMA007I  EQU   @DATA+00000588      68 BYTE(S) ON WORD                   14960000
         ORG   AMA007I+00000000                                         14970000
A00003   EQU   *                   21 BYTE(S)                           14980000
         DC    C'AMA007I  LOAD MODULE '                                 14990000
LLLLLLLL EQU   AMA007I+00000021    8 BYTE(S)                            15000000
         ORG   AMA007I+00000029                                         15010000
A00004   EQU   *                   31 BYTE(S)                           15020000
         DC    C' UPDATED WITH PTF - NEW SSI IS '                       15030000
SSI      EQU   AMA007I+00000060    8 BYTE(S)                            15040000
AMA010I  EQU   @DATA+00000656      62 BYTE(S) ON WORD                   15050000
         ORG   AMA010I+00000000                                         15060000
A00005   EQU   *                   29 BYTE(S)                           15070000
         DC    C'AMA010I  AMAPTFLE TERMINATED,'                         15080000
A00006   EQU   *                   33 BYTE(S)                           15090000
         DC    C' AN IDENTIFY STATEMENT IS MISSING'                     15100000
AMA013I  EQU   @DATA+00000720      66 BYTE(S) ON WORD                   15110000
         ORG   AMA013I+00000000                                         15120000
A00007   EQU   *                   26 BYTE(S)                           15130000
         DC    C'AMA013I  THE FOLLOWING IS '                            15140000
A00008   EQU   *                   32 BYTE(S)                           15150000
         DC    C'IDENTIFY INFORMATION FOR MODULE '                      15160000
AMA013NM EQU   *                   8 BYTE(S)                            15170000
         DC    C'        '                                              15180000
AMA016I  EQU   @DATA+00000788      61 BYTE(S) ON WORD                   15190000
         ORG   AMA016I+00000000                                         15200000
A00009   EQU   *                   29 BYTE(S)                           15210000
         DC    C'AMA016I  AMAPTFLE TERMINATED,'                         15220000
A00010   EQU   *                   32 BYTE(S)                           15230000
         DC    C' PARMLIB DD STATEMENT IS MISSING'                      15240000
DIFF     EQU   @DATA+00000852      FULLWORD INTEGER                     15250000
QUOTIENT EQU   @DATA+00000856      FULLWORD INTEGER                     15260000
ADDFACTR EQU   @DATA+00000860      FULLWORD INTEGER                     15270000
CORRSSI  EQU   @DATA+00000864      FULLWORD POINTER                     15280000
SSIDATA  EQU   00000000            8 BYTE(S)                            15290000
RETCDSAV EQU   @DATA+00000868      FULLWORD INTEGER                     15300000
DDNMELST EQU   @DATA+00000872      66 BYTE(S) ON HWORD                  15310000
         ORG   DDNMELST+00000000                                        15320000
A00011   EQU   *                   HALFWORD POINTER                     15330000
         DC    AL2(64)                                                  15340000
A00012   EQU   *                   8 BYTE(S)                            15350000
         DC    C'OUTF    '                                              15360000
A00013   EQU   *                   8 BYTE(S)                            15370000
         DC    X'0000000000000000'                                      15380000
A00014   EQU   *                   8 BYTE(S)                            15390000
         DC    C'SYSLMOD '                                              15400000
A00015   EQU   *                   8 BYTE(S)                            15410000
         DC    X'0000000000000000'                                      15420000
A00016   EQU   *                   8 BYTE(S)                            15430000
         DC    X'0000000000000000'                                      15440000
A00017   EQU   *                   8 BYTE(S)                            15450000
         DC    C'SYSPRINT'                                              15460000
A00018   EQU   *                   8 BYTE(S)                            15470000
         DC    X'0000000000000000'                                      15480000
A00019   EQU   *                   8 BYTE(S)                            15490000
         DC    C'SYSUT1  '                                              15500000
PARMCONT EQU   *                   1 BIT(S) ON BYTE                     15510000
         DC    B'00000000'                                              15520000
PCHBUFFR EQU   00000000            80 BYTE(S)                           15530000
         ORG   @DATA+00000940                                           15540000
PRMNUMBR EQU   *                   HALFWORD POINTER                     15550000
         DC    XL2'0000'                                                15560000
PARMEQUL EQU   *                   5 BYTE(S)                            15570000
         DC    C'PARM='                                                 15580000
B        EQU   @DATA+00000948      HALFWORD POINTER                     15590000
         ORG   @DATA+00000950                                           15600000
DSSDNME  EQU   *                   8 BYTE(S)                            15610000
         DC    C'PARMLIB '                                              15620000
DEVDATA  EQU   @DATA+00000960      8 BYTE(S) ON WORD                    15630000
         ORG   @DATA+00000968                                           15640000
PATCH    EQU   *                   50*2 BYTE(S) ON HWORD                15650000
         DC    00050X'0000'                                             15660000
@SAV002  EQU   @DATA+00001068      72 BYTE(S) ON WORD                   15670000
         ORG   @DATA                                                    15680000
         DS    00001140C                                                15690000
@TEMPS   DS    0F                                                       15700000
@TEMP2   DC    F'0'                                                     15710000
@DATEND  EQU   *                                                        15720000
@9F8     EQU   AMANOID                                                  15730000
@9EC     EQU   MOVEREP                                                  15740000
@9EB     EQU   MOVEREP                                                  15750000
@9E8     EQU   AMA6IB                                                   15760000
@9E4     EQU   AMA6II                                                   15770000
CHKSPACE EQU   @DO9DF                                                   15780000
CHKSP2   EQU   @DO9DB                                                   15790000
AMACONT  EQU   AMARET2                                                  15800000
@9D0     EQU   AMAPRM2                                                  15810000
AMARET1  EQU   @EL01                                                    15820000
@EL02    EQU   @EL01                                                    15830000
@9FA     EQU   AMARET1                                                  15840000
@9FC     EQU   AMARET1                                                  15850000
@9F6     EQU   AMARET1                                                  15860000
@9E1     EQU   CHKSPACE                                                 15870000
@9F7     EQU   @9F6                                                     15880000
         END   AMAPTF01                                                 15890000
./  ADD  SSI=31991261,NAME=AMAPTF02
AMAPTF02 CSECT                                                          00400002
         TITLE 'AMAPTF02 - PTF APPLICATION FUNCTION SERVICE PROGRAM'    00800002
*D 192000                                                        Y01983 00850002
*A 884500                                                        Y01983 00900002
*C 588000,858500                                                  M4012 01200002
*C 786000,828500-829000,942500                                    M4008 01600002
*A 798500-799500,942600                                           M4008 02000002
*D 834000,836000                                                  M4003 02400002
*C 504000,684000                                                  M4003 02800002
*A 558500-560000,828500-829000,840500-841000,942500-943000        M4003 03200002
*A 600000,624500-630000                                           M3990 03600002
*              STATUS:                                                  04000002
*                       OS/VS2 RELEASE 02.0                             04400002
*                                                                       04800002
*        FUNCTION:                                                      05200002
*                                                                       05600002
*              THIS ROUTINE TAKES THE NAME POINTED TO BY REG 1 AND      06000002
*                                                                       06400002
*              DETERMINES THE LINKEDIT ATTRIBUTES. THIS IS DONE BY      06800002
*                                                                       07200002
*              OPENING THE DD SYSLMOD AND DOING A BLDL TO GET THE       07600002
*                                                                       08000002
*              MEMBER ATTRIBUTES. AFTER THE BLDL ,LINKEDIT PARM INFO    08400002
*                                                                       08800002
*              IS BUILT AND PASSED IN THE AREA SUPPLIED. THE PARM LIST  09200002
*                                                                       09600002
*              IS IN THE FORMAT LLXXX,XXX,...,XXX WHERE LL IS A HALF    10000002
*                                                                       10400002
*              WORD COUNT OF THE ENTIRE LIST AND THE XXX'S ARE LINKEDIT 10800002
*                                                                       11200002
*              ATTRIBUTES.                                              11600002
*                                                                       12000002
*              ENTRY  POINTS:                                           12400002
*                                  AMAPTF02                             12800002
*                                                                       13200002
*              INPUT:                                                   13600002
*                                  PARAMETER LIST WITH MODULE NAME      14000002
*                                  POINTED TO BY REG 1 AND AREA TO      14400002
*                                  RETURN LINK EDIT ATTRIBUTES.         14800002
*                                                                       15200002
*              OUTPUT:                                                  15600002
*                                                                       16000002
*              EXTERNAL REFERENCES:                                     16400002
*                                  SYNADEXT    FOR IO ERRORS            16800002
*                                                                       17200002
*              EXITS:                                                   17600002
*                        ERROR:                                         18000002
*                                  ERROR CODE IN WORK AREA SUPPLIED.    18400002
*                                  0 IN LL FIELD MEANS MEMBER NOT FOUND 18800002
*                                                                       19600002
*                        NORMAL:                                        20000002
*                                  BRANCH REG 14.                       20400002
*                                                                       20800002
*              TABLES / WORK AREAS:                                     21200002
*                                  AREA FOR BLDL PASSED IN REG 1.       21600002
*                                                                       22000002
*              ATTRIBUTES:                                              22400002
*                                  REUSEABLE                            22800002
*                                                                       23200002
*              CHARACTOR CODE DEPENDENTENCY:                            23600002
*                                                                       24000002
*                                  NONE                                 24400002
*                                                                       24800002
*              NOTES:                                                   25200002
*                                  NONE                                 25600002
*                                                                       26000002
*                                                                       26400002
*                                                                       26800002
*                                                                       27200002
*                                                                       27600002
*                                                                       28000002
*                                                                       28400002
*/*AMAPTF02: CHART AMAPTF02 */                                          28800002
*/* E AMAPTF02 */                                                       29200002
*/* P SAVE PARAMETER LIST POINTER */                                    29600002
*/* L OPEN DCB FOR SYSLMOD DD */                                        30000002
*/* D (YES,,NO,AMAERROP) OPEN SUCCESSFUL */                             30400002
*/* D (YES,,NO,AMA00) IS BLDL FOR LINKAGE EDITOR NAME */                30800002
*/* P (,AMA000) SET DCB ADDRESS TO 0 */                                 31200002
*/*AMA00: P SET DCB ADDRESS FOR SYSLMOD DD */                           31600002
*/*AMA000: P SET UP BLDL FLAGS */                                       32000002
*/* L BLDL FOR NAME PASSED */                                           32400002
*/* D (YES,,NO,AMAERROR) BLDL SUCCESSFUL */                             32800002
*/* P SET UP COUNT */                                                   33200002
*/* D (YES,,NO,AMA001) REFRESHABLE BIT SET */                           33600002
*/* P MOVE 'REFR,' OPTION TO BUFFER */                                  34000002
*/* P INCREMENT COUNT BY 5 */                                           34400002
*/*AMA001: D (YES,,NO,AMA002) REENTRANT BIT SET */                      34800002
*/* P MOVE 'RENT,' OPTION TO BUFFER */                                  35200002
*/* P INCREMENT COUNT BY 5 */                                           35600002
*/*AMA002: D (YES,,NO,AMA003:R) REUSABLE BIT SET */                     36000002
*/* P MOVE 'REUS,' OPTION TO BUFFER */                                  36400002
*/* P (,AMA003:R) INCREMENT COUNT BY 5 */                               36800002
*/*AMA003: D (YES,,NO,AMA004) DOWNWARD COMPATIBLE BIT SET */            37200002
*/* P MOVE 'DC,' OPTION TO BUFFER */                                    37600002
*/* P INCREMENT COUNT BY 3 */                                           38000002
*/*AMA004: D (YES,,NO,AMA005) ONLY LOADABLE BIT SET */                  38400002
*/* P MOVE 'OL,' OPTION TO BUFFER */                                    38800002
*/* P INCREMENT COUNT BY 3 */                                           39200002
*/*AMA005: D (YES,,NO,AMA006P) NOT EDITABLE BIT SET */                  39600002
*/* P MOVE 'NE,' OPTION TO BUFFER */                                    40000002
*/* P (,AMA006) INCREMENT COUNT BY 3 */                                 40400002
*/*AMA006P: P MOVE 'XREF,' OPTION TO BUFFER */                          40800002
*/* P (,AMA006:R) INCREMENT COUNT BY 5 */                               41200002
*/*AMA006: D (YES,,NO,AMA007) SCATTER LOADABLE BIT SET */               41600002
*/* P MOVE 'SCTR,' OPTION TO BUFFER */                                  42000002
*/* P INCREMENT COUNT BY 5 */                                           42400002
*/*AMA007: P MOVE 'LIST' OPTION TO BUFFER */                            42800002
*/* P INCREMENT COUNT BY 4 */                                           43200002
*/* P STORE COUNT IN BUFFER */                                          43600002
*/*AMACLOSE: L CLOSE SYSLMOD DD */                                      44000002
*/*RETCODE: R RETURN */                                                 44400002
*/*AMAERROP: P (,RETCODE) INDICATE SYSLMOD OPEN FAILED */               44800002
*/*AMAERROR: P (,AMACLOSE) INDICATE BLDL FAILED */                      45200002
*/*AMAPTF02: END */                                                     45600002
               EJECT                                                    46000002
ZERO     EQU   0                   VALUE OF ZERO                        46400002
ATTB1    EQU   26                  VALUE OF 26 FOR LKED ATTRIBUTES      46800002
ATTB2    EQU   27                  VALUE OF 27 FOR LKED ATTRIBUTES      47200002
SCTR1    EQU   4                   FOR SCTR TEST                        47600002
REFR1    EQU   1                                                        48000002
OL1      EQU   8                   FOR ONLY LOADABLE TEST               48400002
NE1      EQU   8                   FOR NOT EDITABLE  TEST               48800002
REUS1    EQU   64                  FOR REUS TEST                        49200002
DC1      EQU   128                 FOR DC TEST                          49600002
RENT1    EQU   128                 FOR REENTRANT TEST                   50000002
BASE     EQU   12                  BASE REG                             50400002
BASE2    EQU   2                   FOR BASE REG2                        50800002
BASE3    EQU   3                   FOR BASE REG3                        51200002
BLDL     EQU   18                  FOR BLDL SVC                         51600002
GOODBLDL EQU   0                   FOR BLDL TEST                        52000002
COUNT    EQU   2                   REG FOR BYTE COUNT                   52400002
PARMREG1 EQU   1                   FOR REG1                             52800002
PARMREG0 EQU   0                   FOR REG0                             53200002
GOODOPEN EQU   X'10'               FOR OPEN CHECK                 M4003 53600002
RETURN   EQU   14                                                       54000002
BRREG    EQU   15                                                       54400002
SAVEREG  EQU   13                                                       54800002
BLANK    EQU   X'40'               BLANK CHARACTER                      55200002
*                                                                       55600002
*                                                                       56000002
         USING *,BASE                                                   56400002
         STM   RETURN,BASE,BASE(SAVEREG)                                56800002
         LR    BASE,BRREG          BASE REG = R12                       57200002
         LA    BASE2,AMASAVE       GET ADDR OF MY SAVE AREA       M4003 57600002
         ST    BASE2,8(SAVEREG)    FORWARD CHAIN SAVE AREA        M4003 58000002
         ST    SAVEREG,4(BASE2)    BACK CHAIN SAVE AREA           M4003 58400002
         LR    SAVEREG,BASE2       PUT MY SAVE AREA ADDR IN 13    M4003 58800002
         LR    BASE3,PARMREG1      PUT AREA ADDR IN R3                  59200002
         OPEN  (AMADDCD,(INPUT))   OPEN SYSLMOD                         59600002
         TM    AMAOBIT,GOODOPEN    OPEN GOOD ?                          60000002
         BZ    AMAERROP            NO BRANCH                      M4012 60400002
         LR    PARMREG0,BASE3      SET UP                               60800002
         CLI   ZERO(BASE3),ZERO IS THE BLDL FOR THE LINKAGE EDIT. M3990 61200002
         BNE   AMA00               NO - GO LOAD THE DCB ADDRESS         61600002
         LA    PARMREG1,ZERO       YES - USE A DCB ADDRESS OF ZERO      62000002
         B     AMA000              AND ISSUE THE BLDL                   62400002
AMA00    LA    PARMREG1,AMADDCD    PARAMETER REG FOR BLDL               62800002
AMA000   MVC   ZERO(L'CONST,BASE3),CONST   SET BLDL IN R3         M3990 63200002
         SVC   BLDL                ISSUE BLDL SVC                 M3990 63600002
         STC   BRREG,CK                                                 64000002
         CLI   CK,GOODBLDL         WAS BLDL GOOD ?                      64400002
         BNE   AMAERROR            NO BR                                64800002
         LA    COUNT,2(BASE3)      SET UP COUNT REG                     65200002
         TM    ATTB2(BASE3),REFR1  REFREFR BIT ON ?                     65600002
         BZ    AMA001              NO BR                                66000002
         MVC   ZERO(L'REFR,BASE2),REFR                                  66400002
         LA    BASE2,L'REFR(BASE2)    UPDATE REG                        66800002
AMA001   TM    ATTB1(BASE3),RENT1  REENTRANT BIT ON ?             M4003 67200002
         BZ    AMA002              NO BR                                67600002
         MVC   ZERO(L'RENT,BASE2),RENT     RENT PARM                    68000002
         LA    BASE2,L'RENT(BASE2) UPDATE  REG                          68400002
AMA002   TM    ATTB1(BASE3),REUS1  REUSABLE BIT ON ?                    68800002
         BZ    AMA003              NO BR                                69200002
         MVC   ZERO(L'REUS,BASE2),REUS  MOVE IN REUS,                   69600002
         LA    BASE2,L'REUS(BASE2) UPDATE REG                           70000002
AMA003   TM    ATTB2(BASE3),DC1    DOWNWARD COMPATABLE?                 70400002
         BO    AMA004              NO  BR                               70800002
         MVC   ZERO(L'DC,BASE2),DC MOVE IN DC,                          71200002
         LA    BASE2,L'DC(BASE2)   UPDATE REG                           71600002
AMA004   TM    ATTB1(BASE3),OL1    ONLY LOADABLE ?                      72000002
         BZ    AMA005              NO BR                                72400002
         MVC   ZERO(L'OL,BASE2),OL MOVE IN OL,                          72800002
         LA    BASE2,L'OL(BASE2)   UPDATE REG                           73200002
AMA005   TM    ATTB2(BASE3),NE1    NOT EDITABLE ?                       73600002
         BZ    AMA006P             NO BR                          M4008 74000002
         MVC   ZERO(L'NE,BASE2),NE MOVE IN NE,                          74400002
         LA    BASE2,L'NE(BASE2)   UPDATE REG                           74800002
         B     AMA006                                             M4008 75200002
AMA006P  MVC   ZERO(L'XREF,BASE2),XREF   MOVE IN XREF OPTION      M4008 75600002
         LA    BASE2,L'XREF(BASE2)       UPDATE REG               M4008 76000002
AMA006   TM    ATTB1(BASE3),SCTR1  SCTR ?                               76400002
         BZ    AMA007              NO BR                                76800002
         MVC   ZERO(L'SCTR,BASE2),SCTR  MOVE IN SCTR,                   77200002
         LA    BASE2,L'SCTR(BASE2) UPDATE REG                           77600002
AMA007   EQU   *                                                        78000002
         MVC   ZERO(L'LIST,BASE2),LIST   PUT IN LIST              M4008 78400002
         LA    BASE2,L'LIST(BASE2)       BUMP PTR                 M4008 78800002
         SR    BASE2,BASE3         GET COUNT OF PARM DATA               79200002
         LA    PARMREG0,COUNT      DECREMENT BY 2                 M4003 79600002
         SR    COUNT,PARMREG0      LENGTH OF OPTION LIST          M4003 80000002
AMACLOSE STH   COUNT,ZERO(BASE3)   STORE COUNT                          80400002
         CLOSE AMADDCD                                                  80800002
RETCODE  L     SAVEREG,4(SAVEREG)  GET PTR TO BACK SAVE AREA      M4003 81200002
         LM    RETURN,BASE,BASE(SAVEREG)     RESTORE REGS               81600002
         BR    RETURN              RETURN                               82000002
AMAERROP MVI   0(BASE3),X'FF'      SET BAD OPEN INDICATOR         M4012 82400002
         B     RETCODE             RETURN TO CALLER               M4012 82800002
AMAERROR LA    COUNT,ZERO          SET COUNT TO ZERO                    83200002
         B     AMACLOSE                                                 83600002
*                                                                       84000002
CONST    DC    X'00010044'         BLDL CONSTANTS                       84400002
REFR     DC    C'REFR,'                                                 84800002
RENT     DC    C'RENT,'                                                 85200002
REUS     DC    C'REUS,'                                                 85600002
SCTR     DC    C'SCTR,'                                                 86000002
DC       DC    C'DC,'                                                   86400002
OL       DC    C'OL,'                                                   86800002
NE       DC    C'NE,'                                                   87200002
CK       DS    C                                                        87600002
LIST     DC    C'LIST'                                            M4008 88000002
XREF     DC    C'XREF,'                                           M4008 88400002
PATCH    DC    5F'0'                    PATCH AREA               Y01983 88450002
AMASAVE  DC    18F'0'                                             M4003 88800002
AMADDCD  DCB   DDNAME=SYSLMOD,DSORG=PO,RECFM=U,MACRF=R,NCP=1            89200002
AMAOBIT  EQU   AMADDCD+48                                               89600002
         END                                                            90000002
