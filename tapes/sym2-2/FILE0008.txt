./  ADD  SSI=62520081,NAME=IEBCRANL
*********************************************************************** 00010000
*                                                                     * 00020000
*  TITLE: IEBCRANL  DATA GENERATOR  CREATE ANALYZE                    * 00030000
*                                                                     * 00040000
*  STATUS: CHANGE LEVEL 0                                             * 00050000
*  FUNCTION - ANALYZES THE CREATE CARD AND BUILDS TABLES TO HOLD      * 00060000
*              KEYWORD VALUES.                                        * 00070000
*             THIS MODULE IS ALWAYS ENTERED FROM MODULE IEBDG AFTER   * 00080000
*              A CREATE CARD IS READ.  CONTROL IS PASSED TO MODULE    * 00090000
*              IEBCREAT AFTER A SINGLE CREATE CARD IS PROCESSED OR    * 00100000
*              AFTER ALL CREATE CARDS OF A REPEAT GROUP ARE PROCESSED.* 00110000
*              IF THE CREATE CARD IS NOT THE LAST CARD OF A REPEAT    * 00120000
*              GROUP, CONTROL IS PASSED TO MODULE IEBDG TO READ THE   * 00130000
*              NEXT CREATE CARD.                                      * 00140000
*             IF AN ERROR IS FOUND IN THE CREATE CARD, CONTROL IS     * 00150000
*              PASSED TO IEBDG TO PRINT A MESSAGE, SET THE NOGO SWITCH* 00160000
*              TO STOP GENERATING OUTPUT RECORDS, AND READ THE NEXT   * 00170000
*              CONTROL CARD TO CONTINUE SYNTAX CHECKING.              * 00180000
*                                                                     * 00190000
*  ENTRY POINT: IEBCRANL THE CSECT NAME OF THIS MODULE                * 00200000
*             LINKED TO BY MODULE IEBDG.                              * 00210000
*                                                                     * 00220000
*  INPUT -    'INBUFA' - CONTROL CARD READ FROM SYSIN.                * 00230000
*             'COMMON' - WORK AREA.                                   * 00240000
*             R9       - POINTS TO START OF CREATE KEYWORD. FOR A     * 00250000
*                        CREATE CONTINUATION CARD R9 POINTS TO COLUMN * 00260000
*                        1.                                           * 00270000
*             R5       - POINTS TO 'COMMON' WORK AREA.                * 00280000
*             'CRCSW'  - IF ON, THE CONTROL CARD IS A CREATE CONT-    * 00290000
*                         UATION CARD.                                * 00300000
*                                                                     * 00310000
*  OUTPUT -   CREATE TABLE - A CREATE ENTRY IS BUILT FOR EACH CREATE  * 00320000
*              CARD.  IF A REPEAT GROUP IS PRESENT THERE WILL BE      * 00330000
*              MULTIPLE CREATE ENTRIES CHAINED TOGETHER.  ADDITIONAL  * 00340000
*              GETMAINS ARE ISSUED IF NECESSARY TO HOLD ALL CREATE    * 00350000
*              ENTRIES.                                               * 00360000
*             PICTURE TABLE - HOLDS THE PICTURE LENGTH, START         * 00370000
*              LOCATION, AND THE PICTURE VALUE.                       * 00380000
*             FD ADDRESS TABLE - HOLDS ADDRESSES OF FD TABLES FOR     * 00390000
*              EACH FD NAME SPECIFIED ON THE CREATE CARD.             * 00400000
*             EXIT NAME TABLE - HOLDS NAMES OF USER EXIT ROUTINES SO  * 00410000
*              THAT USER EXIT ROUTINES MAY BE DELETED AT END OF DSD   * 00420000
*              GROUP.                                                 * 00430000
*                                                                     * 00440000
*  EXTERNAL ROUTINES - GETMAIN MACRO.                                 * 00450000
*                      LINK MACRO.                                    * 00460000
*                      MODULE IEBCREAT.                               * 00470000
*                                                                     * 00480000
*  EXITS -    NORMAL - RETURN TO MODULE IEBDG.                        * 00490000
*                      LINK TO MODULE IEBCREAT.                       * 00500000
*             ERROR - RETURN TO MODULE IEBDG.                         * 00510000
*                      LINK TO MODULE IEBCREAT.                       * 00520000
*                                                                     * 00530000
*                                                                     * 00540000
*  TABLES/WORKAREAS                                                   * 00550000
*                                                                     * 00560000
*    CREATE TABLES - FIRST GETMAIN IS POINTED TO BY 'CRTABPT'.        * 00570000
*                    STORAGE IS GOTTEN BY THIS MODULE.  IT IS FREED   * 00580000
*                    BY IEBCREAT AFTER ALL RECORDS ARE WRITTEN.       * 00590000
*                                                                     * 00600000
*     BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7 BYTE 8         * 00610000
*    *****************************                                    * 00620000
*    * ADDRESS OF NEXT GETMAIN   *---FIRST 4 BYTES OF EACH 512 BYTE   * 00630000
*    *****************************    GETMAIN.                        * 00640000
*    *********************************************************        * 00650000
*  0 *  ADDRESS OF NEXT CREATE   *       QUANTITY            *        * 00660000
*    *********************************************************        * 00670000
*  8 *   INPUT DCB ADDRESS       *   USER EXIT ADDRESS       *        * 00680000
*    *********************************************************        * 00690000
* 16 *   PICTURE ADDRESS         * FILL *     NOT USED       *        * 00700000
*    *********************************************************        * 00710000
* 24 *   FD ADDRESS TABLE        *                                    * 00720000
*    *****************************                                    * 00730000
*       ANY POINTER OF 0 MEANS NO TABLE OR LAST TABLE.                * 00740000
*                                                                     * 00750000
*                                                                     * 00760000
*                                                                     * 00770000
*    PICTURE TABLE - POINTED TO BY 'PICPTR' IN CREATE ENTRY.          * 00780000
*                    GETMAIN FOR PICTURE LENGTH + 6. FREED WHEN THE   * 00790000
*                    CREATE TABLES ARE FREED.                         * 00800000
*                                                                     * 00810000
*     BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7 BYTE 8         * 00820000
*    *********************************************************        * 00830000
*    *  START LOCATION OFFSET    *  LENGTH     *  PICTURE    *        * 00840000
*    *********************************************************        * 00850000
*    *         STRING                                        *        * 00860000
*    *********************************************************        * 00870000
*                                                                     * 00880000
*                                                                     * 00890000
*                                                                     * 00900000
*    FD ADDRESS TABLE - POINTED TO BY 'FDADTAB' IN CREATE ENTRY.      * 00910000
*                       GETMAIN OF 88 BYTES. FREED WHEN THE CREATE    * 00920000
*                       TABLES ARE FREED.                             * 00930000
*                                                                     * 00940000
*    *****************************                                    * 00950000
*  O * ADDRESS OF NEXT GETMAIN   *                                    * 00960000
*    *****************************                                    * 00970000
*  4 *   FD TABLE ADDRESS        *                                    * 00980000
*    *****************************                                    * 00990000
*  8 *   FD TABLE ADDRESS        *                                    * 01000000
*    *****************************                                    * 01010000
*       LAST FD TABLE ADDRESS IN GETMAIN IS FOLLOWED BY 4 BYTES OF 0'S* 01020000
*                                                                     * 01030000
*                                                                     * 01040000
*                                                                     * 01050000
*    EXIT NAME TABLE - FIRST GETMAIN IS POINTED TO BY 'EXITTAB'.      * 01060000
*                      GETMAIN OF 72 BYTES. FREED BY MODULE IEBDG     * 01070000
*                      WHEN AN END CARD IS READ.                      * 01080000
*                                                                     * 01090000
*     BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7 BYTE 8         * 01100000
*    *****************************                                    * 01110000
*  0 * ADDRESS OF NEXT GETMAIN   *                                    * 01120000
*    *********************************************************        * 01130000
*  4 *      USER EXIT ROUTINE NAME                           *        * 01140000
*    *********************************************************        * 01150000
* 12 *      USER EXIT ROUTINE NAME                           *        * 01160000
*    *********************************************************        * 01170000
*       LAST EXIT NAME IN GETMAIN IS FOLLOWED BY 4 BYTES OF 0'S.      * 01180000
*                                                                     * 01190000
*                                                                     * 01200000
*                                                                     * 01210000
*    DCB TABLES- KEPT FOR DSD GROUP  GETMAIN 272 BYTES FOR EACH UNIQUE* 01220000
*                 DDNAME ON CREATE CARD. INPUT DCB'S ARE CHAINED      * 01230000
*                 TOGETHER AND POINTED TO BY 'IDCBPT'. OUTPUT DCB IS  * 01240000
*                 POINTED TO BY 'ODCBPT'.                             * 01250000
*                                                                     * 01260000
*     BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7 BYTE 8         * 01270000
*    *********************************************************        * 01280000
*    *         DCB FOR INPUT OR OUTPUT DATA SET              *        * 01290000
*    *                   256 BYTES                           *        * 01300000
*    *********************************************************        * 01310000
*    * ADDRESS OF NEXT DCB       *     DDNAME---             *        * 01320000
*    *********************************************************        * 01330000
*    * ---DDNAME                 *EODSW *                    *        * 01340000
*    *********************************************************        * 01350000
*                                                                     * 01360000
*  ATTRIBUTES: REENTRANT,REUSEABLE                                    * 01370000
*                                                                     * 01380000
*********************************************************************** 01390000
*    NEW MODULE, RELEASE 17.                                       DG0H 01400000
*A818600,876600-876900                                           A38710 01410000
*A687600-687998                                                  A38781 01420000
*C687500                                                         A38781 01430000
*C206000                                                       @ZA04231 01440000
*C206000                                                       @ZA07345 01450000
         LCLA  &T,&SPN                                            0003  01460000
.@001    ANOP                                                     0003  01470000
IEBCRANL CSECT ,                                                  0003  01480000
         ST    @E,12(0,@D)                                        0003  01490000
         STM   @0,@8,20(@D)                                       0003  01500000
         STM   @A,@C,60(@D)                                       0003  01510000
         BALR  @B,0                                               0003  01520000
@PSTART  DS    0H                                                 0003  01530000
         USING @PSTART+00000,@B                                   0003  01540000
         L     @0,@SIZ001                                         0003  01550000
         GETMAIN  R,LV=(0)                                        0003  01560000
         LR    @C,@1                                              0003  01570000
         USING @DATD+00000,@C                                     0003  01580000
         LM    @0,@1,20(@D)                                       0003  01590000
         XC    @TEMPS(@L),@TEMPS                                  0003  01600000
         ST    @D,@SAV001+4                                       0003  01610000
         LA    @F,@SAV001                                         0003  01620000
         ST    @F,8(0,@D)                                         0003  01630000
         LR    @D,@F                                              0003  01640000
*  A6A1:;                                                               01650000
*                                   /*SET 'EPSW' TO 2 IN CASE OF SUC- * 01660000
*                                   /* CESSFUL RETURN TO IEBDG.       * 01670000
*            EPSW = 2;                                                  01680000
A6A1     MVI   568(@5),2                                          0050  01690000
*                                   /*TEST IF CREATE CARD OR CREATE */  01700000
*                                   /*CONTINUATION CARD WAS READ.  */   01710000
*         IF CRCSW = ON THEN GO TO A6A21;                               01720000
         CLC   554(1,@5),ON                                       0051  01730000
         BC    08,A6A21                                           0052  01740000
*  A6A15: R9 = R9 + 6     /*POINT AT BLANK FOLLOWING CREATE KEYWORD*/;  01750000
A6A15    AH    @9,@D1                                             0053  01760000
*         IF INBUF(1) ¬=' ' THEN DO;                                    01770000
         CLI   0(@9),C' '                                         0054  01780000
         BC    08,@9FF                                            0054  01790000
*                                   /*NO BLANK FOLLOWING OPERATION FLD. 01800000
*                                   /*SET MSG 20.                       01810000
*            MS = 20;                                                   01820000
         LA    @F,20                                              0056  01830000
         STH   @F,406(0,@5)                                       0056  01840000
*         GO TO ERRORF;                                                 01850000
         BC    15,ERRORF                                          0057  01860000
*         END;                                                          01870000
*  /******************************************************************* 01880000
*  /** THIS SECTION WILL SCAN OUT BLANKS ON THE CONTROL CARD.IT IS    * 01890000
*  /** LOOKING FOR THE FIRST NON-BLANK                                * 01900000
*  /******************************************************************* 01910000
*  A6A3:;                                                               01920000
@9FF     EQU   *                                                  0059  01930000
*         R9 = R9 + 1     /*ADVANCE COLUMN POINTER.*/;                  01940000
A6A3     AH    @9,@D2                                             0060  01950000
*                                   /*TEST IF PAST COLUMN 71. */        01960000
*         IF R9 > COUNTER THEN DO;                                      01970000
         C     @9,232(0,@5)                                       0061  01980000
         BC    12,@9FE                                            0061  01990000
*                              /*************************************** 02000000
*                              /**CREATE CARD HAS NO OPERANDS. CREATE * 02010000
*                              /** ENTRY WILL CONTAIN DEFAULT VALUES  * 02020000
*                              /** OF - QUANTITY = 1                  * 02030000
*                              /**      FILL = X'00'                  * 02040000
*                              /*************************************** 02050000
*                                   /*TURN ON 'CRTBLK' SWITCH. */       02060000
*            CRTBLK = ON;                                               02070000
         MVC   560(1,@5),ON                                       0063  02080000
*                                   /*GO TO GET SPACE FOR CREATE ENTRY. 02090000
*         GO TO A6A10;                                                  02100000
         BC    15,A6A10                                           0064  02110000
*         END;                                                          02120000
*                                   /*TEST IF COLUMN IS BLANK. */       02130000
*         IF INBUF(1) = ' ' THEN GO TO A6A3;                            02140000
@9FE     CLI   0(@9),C' '                                         0066  02150000
         BC    08,A6A3                                            0067  02160000
*         GO TO A6A10;                                                  02170000
         BC    15,A6A10                                           0068  02180000
* /******************************************************************** 02190000
* /** CREATE CONTINUATION - THIS SECTION WILL TEST THE COMMENT CONT.  * 02200000
* /**   SW. BEING ON. IF YES, IT WILL BRANCH TO TEST FOR MORE CONTIN- * 02210000
* /**   UATIONS. IT WILL TEST FOR SPECIFIC NAME OR PICTURE SUB-       * 02220000
* /**   PARAMETER CONTINUATIONS AND BRANCH TO THE ROUTINE TO CONTINUE * 02230000
* /**   PROCESSING THE SUBPARAMETER. IF NONE OF THESE ARE FOUND THEN  * 02240000
* /**   THE CONT. CARD  BEGINS WITH A NEW KEYWORD.                    * 02250000
* /******************************************************************** 02260000
*  A6A21:                                                               02270000
*                                   /*TURN OFF CREATE CONTINUE SWITCH.* 02280000
*         CRCSW = OFF;                                                  02290000
A6A21    MVC   554(1,@5),OFF                                      0069  02300000
*                                   /*TEST IF COMMENT CONT. SW. ON. */  02310000
*         IF COMCSW = ON THEN DO;                                       02320000
         CLC   565(1,@5),ON                                       0070  02330000
         BC    07,@9FD                                            0070  02340000
*                                   /*TURN OFF COMMENT CONT. SW. */     02350000
*            COMCSW = OFF;                                              02360000
         MVC   565(1,@5),OFF                                      0072  02370000
*                                   /*GO TO CHECK MORE CONTINUATIONS. * 02380000
*         GO TO A6P01;                                                  02390000
         BC    15,A6P01                                           0073  02400000
*         END;                                                          02410000
*                                   /*ADVANCE CARD COL PTR TO COL 4.*/  02420000
*            R9 = R9 + 3;                                               02430000
@9FD     AH    @9,@D3                                             0075  02440000
*                                   /*TEST IF PICTURE STRING CONT. */   02450000
*         IF PICCSW(3) = '1'B THEN DO;                                  02460000
         TM    562(@5),B'00100000'                                0076  02470000
         BC    12,@9FC                                            0076  02480000
*                                   /*TURN OFF SWITCH.*/                02490000
*            PICCSW(3) = '0'B;                                          02500000
         NI    562(@5),B'11011111'                                0078  02510000
*                                   /*GO TO CONTINUE PROCESSING */      02520000
*                                   /* PICTURE KEYWORD.         */      02530000
*         GO TO A6D7;                                                   02540000
         BC    15,A6D7                                            0079  02550000
*         END;                                                          02560000
*                    /************************************************* 02570000
*                    /**THIS SECTION WILL SCAN THE CARD BEGINNING AT  * 02580000
*                    /** COL. 4 LOOKING FOR A NON-BLANK. A PICTURE    * 02590000
*                    /** STRING CONT. IS REQUIRED TO START IN COL. 4. * 02600000
*                    /** THE FOLLOWING CONTINUATIONS MAY BEGIN IN COL.* 02610000
*                    /** 4 OR ANY COLUMN AFTER 4.                     * 02620000
*                    /************************************************* 02630000
*                                   /*TEST IF PAST COL. 71. */          02640000
*  A6A31: IF R9 > COUNTER THEN GO TO MSG21;                             02650000
@9FC     EQU   *                                                  0081  02660000
A6A31    C     @9,232(0,@5)                                       0081  02670000
         BC    02,MSG21                                           0082  02680000
*                                   /*TEST IF COLUMN IS BLANK. */       02690000
*         IF INBUF(1) = ' ' THEN DO;                                    02700000
         CLI   0(@9),C' '                                         0083  02710000
         BC    07,@9FB                                            0083  02720000
*                                   /*STEP CARD COL PTR. */             02730000
*            R9 = R9 + 1;                                               02740000
         AH    @9,@D2                                             0085  02750000
*         GO TO A6A31;                                                  02760000
         BC    15,A6A31                                           0086  02770000
*         END;                                                          02780000
*                                   /*TEST IF NAME SUBPARAMETER CONT.*/ 02790000
*         IF NAMCSW(1) = '1'B THEN DO;                                  02800000
@9FB     TM    561(@5),B'10000000'                                0088  02810000
         BC    12,@9FA                                            0088  02820000
*                                   /*TURN OFF SWITCH.*/                02830000
*            NAMCSW(1) = '0'B;                                          02840000
         NI    561(@5),B'01111111'                                0090  02850000
*                                   /*GO TO CONTINUE PROCESSING */      02860000
*                                   /* NAME KEYWORD.            */      02870000
*         GO TO A6C5;                                                   02880000
         BC    15,A6C5                                            0091  02890000
*         END;                                                          02900000
*                                   /*TEST IF NAME SUBPARAMETER CONT.*/ 02910000
*         IF NAMCSW(2) = '1'B THEN DO;                                  02920000
@9FA     TM    561(@5),B'01000000'                                0093  02930000
         BC    12,@9F9                                            0093  02940000
*                                   /*TURN OFF SWITCH.*/                02950000
*            NAMCSW(2) = '0'B;                                          02960000
         NI    561(@5),B'10111111'                                0095  02970000
*                                   /*GO TO CONTINUE PROCESSING */      02980000
*                                   /* NAME KEYWORD.            */      02990000
*         GO TO A6C8;                                                   03000000
         BC    15,A6C8                                            0096  03010000
*         END;                                                          03020000
*                                   /*TEST IF PICTURE SUBPARAM. CONT.*/ 03030000
*         IF PICCSW(1) = '1'B THEN DO;                                  03040000
@9F9     TM    562(@5),B'10000000'                                0098  03050000
         BC    12,@9F8                                            0098  03060000
*                                   /*TURN OFF SWITCH.*/                03070000
*            PICCSW(1) = '0'B;                                          03080000
         NI    562(@5),B'01111111'                                0100  03090000
*                                   /*GO TO CONTINUE PROCESSING */      03100000
*                                   /* PICTURE KEYWORD.         */      03110000
*         GO TO A6D4;                                                   03120000
         BC    15,A6D4                                            0101  03130000
*         END;                                                          03140000
*                                   /*TEST IF PICTURE SUBPARAM. CONT.*/ 03150000
*         IF PICCSW(2) = '1'B THEN DO;                                  03160000
@9F8     TM    562(@5),B'01000000'                                0103  03170000
         BC    12,@9F7                                            0103  03180000
*                                   /*TURN OFF SWITCH.*/                03190000
*            PICCSW(2) = '0'B;                                          03200000
         NI    562(@5),B'10111111'                                0105  03210000
*                                   /*GO TO CONTINUE PROCESSING */      03220000
*                                   /* PICTURE KEYWORD.         */      03230000
*         GO TO A6D6;                                                   03240000
         BC    15,A6D6                                            0106  03250000
*         END;                                                          03260000
*                                   /*CONTINUATION IS AFTER A COMPLETE  03270000
*                                   /* PARAMETER.                       03280000
*         GO TO KEYSCAN;                                                03290000
* /******************************************************************** 03300000
* /** GET SPACE FOR A CREATE ENTRY - THIS SECTION WILL GET SPACE FOR  * 03310000
* /**   THE INITIAL CREATE TABLE OR FOR AN ADDITIONAL TABLE IF THE    * 03320000
* /**   PREVIOUS ONE IS FULL BECAUSE OF THE NUMBER OF CREATE CARDS IN * 03330000
* /**   A REPEAT GROUP. GETMAINS ARE CHAINED TOGETHER. IF A GETMAIN   * 03340000
* /**   IS ISSUED THE ENTIRE AREA IS CLEARED TO 0'S.  EACH CREATE     * 03350000
* /**   TABLE IS 512 BYTES AND EACH CREATE ENTRY IS 28 BYTES.         * 03360000
* /**      ENTRY - 'CREATESW' = OFF IF CREATE CARD ISN'T IN A REPEAT  * 03370000
* /**                 GROUP OR IF IT IS THE 1ST CARD IN A REPEAT GROUP* 03380000
* /**      EXIT  - 'CURCRGM'  POINTS TO THE CURRENT CREATE TABLE.     * 03390000
* /**              'CURCRTE'  POINTS TO THE NEW CREATE ENTRY.         * 03400000
* /******************************************************************** 03410000
*                                   /*TEST IF 1ST CREATE CARD. */       03420000
*  A6A10: IF CREATESW = OFF THEN GO TO A6A11;                           03430000
A6A10    CLC   552(1,@5),OFF                                      0109  03440000
         BC    08,A6A11                                           0110  03450000
*                                   /*TEST IF ENOUGH ROOM IN GETMAIN  * 03460000
*                                   /* FOR FIXED PORTION OF NEW CREATE* 03470000
*                                   /* ENTRY.                         * 03480000
*         IF CURCRGM + 512 > CURCRTE + 56 THEN DO;                      03490000
         LA    @F,512                                             0111  03500000
         A     @F,320(0,@5)                                       0111  03510000
         ST    @F,@T1                                             0111  03520000
         LA    @F,56                                              0111  03530000
         A     @F,316(0,@5)                                       0111  03540000
         C     @F,@T1                                             0111  03550000
         BC    10,@9F6                                            0111  03560000
*                                   /*CHAIN NEW CREATE ENTRY TO         03570000
*                                   /* PREVIOUS ONE.                    03580000
*            CURCRTE -> NXTCRTE = CURCRTE + 28;                         03590000
         LA    @F,28                                              0113  03600000
         A     @F,316(0,@5)                                       0113  03610000
         L     @1,316(0,@5)                                       0113  03620000
         ST    @F,0(0,@1)                                         0113  03630000
*                                   /*POINT TO NEW CREATE ENTRY.*/      03640000
*            CURCRTE = CURCRTE + 28;                                    03650000
         LA    @F,28                                              0114  03660000
         A     @F,316(0,@5)                                       0114  03670000
         ST    @F,316(0,@5)                                       0114  03680000
*         GO TO A6A12;                                                  03690000
         BC    15,A6A12                                           0115  03700000
*         END;                                                          03710000
*                                   /*ISSUE CONDITIONAL GM 512 BYTES*/  03720000
*                                   /* FOR CREATE TABLE. ADR IS     */  03730000
*                                   /* RETURNED IN 'GCADDR'.        */  03740000
*                                   /*PUT LENGTH IN GM PARAMETER LIST.  03750000
*  A6A11:    GLENGTH = 512;                                             03760000
@9F6     EQU   *                                                  0117  03770000
A6A11    LA    @F,512                                             0117  03780000
         ST    @F,364(0,@5)                                       0117  03790000
*                                   /*GO TO GETMAIN ROUTINE. */         03800000
*         CALL GETMAIN;                                                 03810000
         BAL   @E,GETMAIN                                         0118  03820000
*                                   /*BASE POINTER FOR 'AREA'.*/        03830000
*            R4 = GCADDR;                                               03840000
         L     @4,376(0,@5)                                       0119  03850000
*         AREA(1) = '0'X            /*CLEAR GETMAIN AREA.*/;            03860000
         MVI   0(@4),X'00'                                        0120  03870000
*         AREA(2:256) = AREA(1:255);                                    03880000
         MVC   1(255,@4),0(@4)                                    0121  03890000
*         AREA(257:512) = AREA(256:511);                                03900000
         MVC   256(256,@4),255(@4)                                0122  03910000
*                                   /*TEST IF NON-1ST CREATE CARD.*/    03920000
*         IF CREATESW = OFF THEN DO;                                    03930000
         CLC   552(1,@5),OFF                                      0123  03940000
         BC    07,@9F5                                            0123  03950000
*               CRTABPT = GCADDR    /*GM ADR TO CREATE TABLE PTR.*/;    03960000
         MVC   312(4,@5),376(@5)                                  0125  03970000
*               CREATESW = ON       /*TURN ON CREATE SWITCH.*/;         03980000
         MVC   552(1,@5),ON                                       0126  03990000
         BC    15,@9F4                                            0128  04000000
*         END;                                                          04010000
*         ELSE DO;                                                      04020000
*               R4 = CURCRGM        /*POINT TO PREVIOUS GM.*/;          04030000
@9F5     L     @4,320(0,@5)                                       0129  04040000
*               AREA(1:4) = GCADDR  /*LINK NEW GM TO PREVIOUS ONE.*/;   04050000
         MVC   0(4,@4),376(@5)                                    0130  04060000
*         END;                                                          04070000
*         CURCRTE = GCADDR + 4      /*POINT TO NEW CREATE ENTRY.*/;     04080000
@9F4     LA    @F,4                                               0132  04090000
         A     @F,376(0,@5)                                       0132  04100000
         ST    @F,316(0,@5)                                       0132  04110000
*         CURCRGM = GCADDR          /*SAVE ADR OF CURRENT GM.*/;        04120000
         MVC   320(4,@5),376(@5)                                  0133  04130000
*                                   /*IF 'CRTBLK' SW. IS ON, THERE      04140000
*                                   /* ARE NO CREATE OPERANDS.  GO TO   04150000
*                                   /* CHECK FOR COMMENTS CONTINUATION. 04160000
*  A6A12: IF CRTBLK = ON THEN DO;                                       04170000
A6A12    CLC   560(1,@5),ON                                       0134  04180000
         BC    07,@9F3                                            0134  04190000
*                                   /*TURN OFF 'CRTBLK' SWITCH. */      04200000
*            CRTBLK = OFF;                                              04210000
         MVC   560(1,@5),OFF                                      0136  04220000
*                                   /*GO TO CHECK FOR COMMENTS CONTIN-  04230000
*                                   /* UATIONS.                         04240000
*         GO TO A6P01;                                                  04250000
         BC    15,A6P01                                           0137  04260000
*         END;                                                          04270000
* /******************************************************************** 04280000
* /** KEYWORD SCAN - THIS SECTION SCANS FOR ALL VALID CREATE CARD     * 04290000
* /**                 KEYWORDS. IF A KEYWORD IS FOUND INVALID GO TO   * 04300000
* /**                 IEBDG TO ISSUE SYNTAX MESSAGE.                  * 04310000
* /**      ENTRY - R9 POINTS TO START OF KEYWORD.                     * 04320000
* /******************************************************************** 04330000
*  KEYSCAN:;                                                            04340000
@9F3     EQU   *                                                  0139  04350000
*                                   /*TEST IF QUANTITY KEYWORD. */      04360000
*         IF INBUF(1:9) = 'QUANTITY=' THEN GO TO A6B1;                  04370000
KEYSCAN  CLC   0(9,@9),@C5                                        0140  04380000
         BC    08,A6B1                                            0141  04390000
*                                   /*TEST IF NAME KEYWORD. */          04400000
*         IF INBUF(1:5) = 'NAME=' THEN GO TO A6C1;                      04410000
         CLC   0(5,@9),@C6                                        0142  04420000
         BC    08,A6C1                                            0143  04430000
*                                   /*TEST IF PICTURE KEYWORD. */       04440000
*         IF INBUF(1:8) = 'PICTURE=' THEN GO TO A6D1;                   04450000
         CLC   0(8,@9),@C7                                        0144  04460000
         BC    08,A6D1                                            0145  04470000
*                                   /*TEST IF FILL KEYWORD. */          04480000
*         IF INBUF(1:5) = 'FILL=' THEN GO TO A6E1;                      04490000
         CLC   0(5,@9),@C8                                        0146  04500000
         BC    08,A6E1                                            0147  04510000
*                                   /*TEST IF INPUT KEYWORD. */         04520000
*         IF INBUF(1:6) = 'INPUT=' THEN GO TO A6F1;                     04530000
         CLC   0(6,@9),@C9                                        0148  04540000
         BC    08,A6F1                                            0149  04550000
*                                   /*TEST IF EXIT KEYWORD. */          04560000
*         IF INBUF(1:5) = 'EXIT=' THEN GO TO A6G1;                      04570000
         CLC   0(5,@9),@C10                                       0150  04580000
         BC    08,A6G1                                            0151  04590000
*                                   /*INVALID KEYWORD. */               04600000
*                                   /*SET MSG 5.       */               04610000
*            MS = 5;                                                    04620000
         LA    @F,5                                               0152  04630000
         STH   @F,406(0,@5)                                       0152  04640000
*         GO TO ERRORF;                                                 04650000
         BC    15,ERRORF                                          0153  04660000
* /******************************************************************** 04670000
* /**     PROCESS QUANTITY KEYWORD                                    * 04680000
* /**       ENTRY - R9 POINTS TO START OF KEYWORD.                    * 04690000
* /**       EXIT  - R8 POINTS TO DELIMITER FOLLOWING QUANTITY         * 04700000
* /**                 PARAMETER.                                      * 04710000
* /**       FORMAT - QUANTITY=DD  1 TO 9 DECIMAL DIGITS.              * 04720000
* /******************************************************************** 04730000
*  A6B1:                                                                04740000
*                                   /*ADVANCE COLUMN POINTER TO START * 04750000
*                                   /* OF PARAMETER.                  * 04760000
*            R9 = R9 + 9;                                               04770000
A6B1     AH    @9,@D4                                             0154  04780000
*                                   /*GO TO SCAN OUT PARAMETER.*/       04790000
*         CALL SPSCAN;                                                  04800000
         BAL   @E,SPSCAN                                          0155  04810000
*                                   /*GO TO CONVERT QUANTITY TO BINARY. 04820000
*         CALL CONVDB;                                                  04830000
         BAL   @E,CONVDB                                          0156  04840000
*                                   /*STORE QUANTITY IN CREATE ENTRY.*/ 04850000
*            CURCRTE -> QUAN = R6;                                      04860000
         L     @1,316(0,@5)                                       0157  04870000
         ST    @6,4(0,@1)                                         0157  04880000
*                                   /*QUANTITY KEYWORD HAS BEEN */      04890000
*                                   /* PROCESSED. GO TO SCAN OUT NEXT*/ 04900000
*         GO TO CARDSCAN            /* KEYWORD.                      */ 04910000
         BC    15,CARDSCAN                                        0158  04920000
* /******************************************************************** 04930000
* /**     PROCESS NAME KEYWORD.                                       * 04940000
* /**           AFTER EACH NAME IS SCANNED, THE 'FDSRCH' ROUTINE IS   * 04950000
* /**           CALLED TO FIND THE FD TABLE AND STORE ITS ADDRESS IN  * 04960000
* /**           THE FD ADDRESS TABLE. AFTER A COPY GROUP IS COMPLETED,* 04970000
* /**           ALL THE FD ADDRESSES ASSOCIATED WITH THE COPY GROUP   * 04980000
* /**           ARE DUPLICATED IN THE FD ADR. TABLES THE NO. OF TIMES * 04990000
* /**           INDICATED BY THE COPY KEYWORD.                        * 05000000
* /**        ENTRY - R9 POINTS TO START OF KEYWORD.                   * 05010000
* /**        EXIT  - R8 POINTS TO DELIMITER FOLLOWING NAME KEYWORD.   * 05020000
* /**        FORMAT - NAME=NAME1                                      * 05030000
* /**                 NAME=(NAME1,...(COPY=VALUE,NAME2,...),...)      * 05040000
* /******************************************************************** 05050000
*  A6C1:;                                                               05060000
*                                   /*ADVANCE CARD COLUMN PTR TO START  05070000
*                                   /* OF PARAMETER.                    05080000
*            R9 = R9 + 5;                                               05090000
A6C1     AH    @9,@D5                                             0160  05100000
*                                   /*TURN ON FIRSTSW. */               05110000
*            FIRSTSW = ON;                                              05120000
         MVC   637(1,@5),ON                                       0161  05130000
*                                   /*TEST IF COLUMN IS A LEFT PAREND.  05140000
*         IF INBUF(1) = '(' THEN GO TO A6C2;                            05150000
         CLI   0(@9),C'('                                         0162  05160000
         BC    08,A6C2                                            0163  05170000
*                    /************************************************* 05180000
*                    /** ONLY A SINGLE FD NAME PRESENT - NO PARENDS   * 05190000
*                    /**   WERE FOUND.                                * 05200000
*                    /************************************************* 05210000
*                                   /*ONLY ONE FD NAME IS PRESENT.   */ 05220000
*                                   /*GO TO SPSCAN TO SCAN OUT NAME. */ 05230000
*         CALL SPSCAN;                                                  05240000
         BAL   @E,SPSCAN                                          0164  05250000
*                                   /*GO TO SEARCH FD TABLES. */        05260000
*         CALL FDSRCH;                                                  05270000
         BAL   @E,FDSRCH                                          0165  05280000
*                                   /*NAME KEYWORD HAS BEEN PROCESSED,  05290000
*                                   /* GO TO SCAN OUT NEXT KEYWORD.     05300000
*         GO TO CARDSCAN;                                               05310000
         BC    15,CARDSCAN                                        0166  05320000
*                    /************************************************* 05330000
*                    /** SCAN FD NAMES IN AN OUTER PARENTHESES GROUP. * 05340000
*                    /**   THIS SECTION WILL CONTINUE TO SCAN NAMES   * 05350000
*                    /**   UNTIL A RIGHT PAREND IS FOUND. IF A LEFT   * 05360000
*                    /**   PAREND IS FOUND A BRANCH IS TAKEN TO THE   * 05370000
*                    /**   SECTION THAT SCANS THE INNER PARENTHESES   * 05380000
*                    /**   GROUP.                                     * 05390000
*                    /************************************************* 05400000
*                                   /*STEP CARD COLUMN PTR. */          05410000
*  A6C2:     R9 = R9 + 1;                                               05420000
A6C2     AH    @9,@D2                                             0167  05430000
*                                   /*TEST IF COLUMN IS A LEFT PAREND.  05440000
*  A6C5:  IF INBUF(1) = '(' THEN GO TO A6C6;                            05450000
A6C5     CLI   0(@9),C'('                                         0168  05460000
         BC    08,A6C6                                            0169  05470000
*                                   /*GO TO SPSCAN TO SCAN OUT NAME. */ 05480000
*         CALL SPSCAN;                                                  05490000
         BAL   @E,SPSCAN                                          0170  05500000
*                                   /*GO TO SEARCH FD TABLES. */        05510000
*         CALL FDSRCH;                                                  05520000
         BAL   @E,FDSRCH                                          0171  05530000
*                                   /*SET R9 TO DELIMITER FOLLOWING */  05540000
*                                   /* NAME.                        */  05550000
*            R9 = R8;                                                   05560000
         LR    @9,@8                                              0172  05570000
*                                   /*TEST IF COLUMN IS A RIGHT PAREND. 05580000
*  A6C55: IF INBUF(1) = ')' THEN DO;                                    05590000
A6C55    CLI   0(@9),C')'                                         0173  05600000
         BC    07,@9F2                                            0173  05610000
*                                   /*STEP CARD COLUMN PTR. */          05620000
*  A6C54:    R8 = R9 + 1;                                               05630000
A6C54    LA    @8,1                                               0175  05640000
         AR    @8,@9                                              0175  05650000
*                                   /*NAME KEYWORD HAS BEEN PROCESSED,  05660000
*                                   /* GO TO SCAN OUT NEXT KEYWORD.     05670000
*         GO TO CARDSCAN;                                               05680000
         BC    15,CARDSCAN                                        0176  05690000
*         END;                                                          05700000
*                              /*************************************** 05710000
*                              /**THIS SECTION TESTS IF NEXT NAME IS  * 05720000
*                              /** ON THIS CARD OR IF IT IS CONTINUED * 05730000
*                              /** ONTO NEXT CARD.                    * 05740000
*                              /*************************************** 05750000
*                                   /*TEST IF COLUMN IS A COMMA. */     05760000
*         IF INBUF(1) ¬= ',' THEN DO;                                   05770000
@9F2     CLI   0(@9),C','                                         0178  05780000
         BC    08,@9F1                                            0178  05790000
*                                   /*INVALID DELIMITER. */             05800000
*                                   /*SET MSG 3.         */             05810000
*  MSG3:     MS = 3;                                                    05820000
MSG3     LA    @F,3                                               0180  05830000
         STH   @F,406(0,@5)                                       0180  05840000
*         GO TO ERRORF;                                                 05850000
         BC    15,ERRORF                                          0181  05860000
*         END;                                                          05870000
*                                   /*TEST IF COMMA IS IN COL 71. */    05880000
*         IF R9 = COUNTER THEN GO TO A6C52;                             05890000
@9F1     C     @9,232(0,@5)                                       0183  05900000
         BC    08,A6C52                                           0184  05910000
*                                   /*STEP CARD COLUMN PTR. */          05920000
*            R9 = R9 + 1;                                               05930000
         AH    @9,@D2                                             0185  05940000
*                                   /*TEST IF COLUMN PAST COMMA IS */   05950000
*                                   /* BLANK.                      */   05960000
*         IF INBUF(1) = ' ' THEN DO;                                    05970000
         CLI   0(@9),C' '                                         0186  05980000
         BC    07,@9F0                                            0186  05990000
*                                   /*CONTINUATION AFTER A NAME IS */   06000000
*                                   /* INDICATED.                  */   06010000
*                                   /*SET NAMCSW1.                 */   06020000
*  A6C52:    NAMCSW(1) = '1'B;                                          06030000
A6C52    OI    561(@5),B'10000000'                                0188  06040000
*                                   /*TURN ON CREATE CONT. SW. */       06050000
*  A6C53:    CRCSW = ON;                                                06060000
A6C53    MVC   554(1,@5),ON                                       0189  06070000
*                                   /*GO TO IEBDG TO READ CONTINUATION  06080000
*                                   /* CARD.                            06090000
*         GO TO RETURN2;                                                06100000
         BC    15,RETURN2                                         0190  06110000
*         END;                                                          06120000
*                                   /*GO TO SCAN FOR ANOTHER NAME. */   06130000
*         GO TO A6C5;                                                   06140000
*                    /************************************************* 06150000
*                    /** SCAN FD NAMES IN AN INNER PARENTHESES GROUP. * 06160000
*                    /**   THIS SECTION WILL SCAN NAMES UNTIL A RIGHT * 06170000
*                    /**   PAREND IS FOUND. THE COPY KEYWORD MUST     * 06180000
*                    /**   APPEAR FIRST.  WHEN A RIGHT PAREND IS FOUND* 06190000
*                    /**   ALL FD ADR'S ASSOCIATED WITH THE GROUP ARE * 06200000
*                    /**   DUPLICATED IN THE FD ADDRESS TABLE. IF     * 06210000
*                    /**   COPY = 1 NONE ARE DUPLICATED.              * 06220000
*                    /************************************************* 06230000
*                                   /*STEP CARD COLUMN PTR. */          06240000
*  A6C6:     R9 = R9 + 1;                                               06250000
A6C6     AH    @9,@D2                                             0193  06260000
*                                   /*TEST IF COPY KEYWORD IS PRESENT.  06270000
*         IF INBUF(1:5) ¬= 'COPY=' THEN GO TO MSG3;                     06280000
         CLC   0(5,@9),@C14                                       0194  06290000
         BC    07,MSG3                                            0195  06300000
*                                   /*SET SWITCH TO INDICATE 1ST NAME * 06310000
*                                   /* IN COPY GROUP.                 * 06320000
*            FRSTSW = ON;                                               06330000
         MVC   638(1,@5),ON                                       0196  06340000
*                                   /*CLEAR NAME COUNTER. */            06350000
*            NAMCTR = 0;                                                06360000
         SR    @F,@F                                              0197  06370000
         STH   @F,652(0,@5)                                       0197  06380000
*                                   /*ADVANCE CARD COL PTR TO COPY NO.* 06390000
*            R9 = R9 + 5;                                               06400000
         AH    @9,@D5                                             0198  06410000
*                                   /*GO TO SPSCAN TO SCAN OUT COPY */  06420000
*                                   /* VALUE.                       */  06430000
*         CALL SPSCAN;                                                  06440000
         BAL   @E,SPSCAN                                          0199  06450000
*                                   /*GO TO CONVDB TO CONVERT COPY */   06460000
*                                   /* VALUE TO BINARY.            */   06470000
*         CALL CONVDB;                                                  06480000
         BAL   @E,CONVDB                                          0200  06490000
*                                   /*SAVE COPY VALUE. */               06500000
*            COPYVAL = R6;                                              06510000
         STH   @6,640(0,@5)                                       0201  06520000
*                                   /*SET R9 TO DELIMITER FOLLOWING */  06530000
*                                   /* COPY VALUE.                  */  06540000
*            R9 = R8;                                                   06550000
         LR    @9,@8                                              0202  06560000
*                              /*************************************** 06570000
*                              /**THIS SECTION TESTS IF NEXT NAME IS  * 06580000
*                              /** ON THIS CARD OR IF IT IS CONTINUED * 06590000
*                              /** ONTO NEXT CARD.                    * 06600000
*                              /*************************************** 06610000
*                                   /*TEST IF COLUMN IS A COMMA. */     06620000
*  A6C61: IF INBUF(1) ¬= ',' THEN GO TO MSG3;                           06630000
A6C61    CLI   0(@9),C','                                         0203  06640000
         BC    07,MSG3                                            0204  06650000
*                                   /*TEST IF COMMA IS IN COL 71. */    06660000
*         IF R9 = COUNTER THEN GO TO A6C62;                             06670000
         C     @9,232(0,@5)                                       0205  06680000
         BC    08,A6C62                                           0206  06690000
*                                   /*STEP CARD COLUMN PTR. */          06700000
*            R9 = R9 + 1;                                               06710000
         AH    @9,@D2                                             0207  06720000
*                                   /*TEST IF COLUMN PAST COMMA IS */   06730000
*                                   /* BLANK.                      */   06740000
*         IF INBUF(1) = ' ' THEN DO;                                    06750000
         CLI   0(@9),C' '                                         0208  06760000
         BC    07,@9EF                                            0208  06770000
*                                   /*CONTINUATION AFTER COPY OR AN */  06780000
*                                   /* FD NAME IS INDICATED.        */  06790000
*                                   /*SET NAMCSW2.                  */  06800000
*  A6C62:    NAMCSW(2) = '1'B;                                          06810000
A6C62    OI    561(@5),B'01000000'                                0210  06820000
*         GO TO A6C53;                                                  06830000
         BC    15,A6C53                                           0211  06840000
*         END;                                                          06850000
*                                   /*GO TO SPSCAN TO SCAN OUT FD NAME. 06860000
*  A6C8:  CALL SPSCAN;                                                  06870000
@9EF     EQU   *                                                  0213  06880000
A6C8     BAL   @E,SPSCAN                                          0213  06890000
*                                   /*GO TO SEARCH FD TABLES. */        06900000
*         IF NAMCTR = 20 THEN                                           06910000
         LA    @F,20                                              0214  06920000
         CH    @F,652(0,@5)                                       0214  06930000
         BC    07,@9EE                                            0214  06940000
*         FRSTSW = ON;                                                  06950000
         MVC   638(1,@5),ON                                       0215  06960000
*         CALL FDSRCH;                                                  06970000
@9EE     BAL   @E,FDSRCH                                          0216  06980000
*                                   /*TEST IF 1ST NAME IN COPY GROUP. * 06990000
*         IF FRSTSW = ON THEN DO;                                       07000000
         CLC   638(1,@5),ON                                       0217  07010000
         BC    07,@9ED                                            0217  07020000
*                                   /*TURN SWITCH OFF. */               07030000
*            FRSTSW = OFF;                                              07040000
         MVC   638(1,@5),OFF                                      0219  07050000
*                                   /*SAVE PTR TO 1ST FD ADR OF COPY */ 07060000
*                                   /* GROUP.                        */ 07070000
*            COPYFD = CURFD;                                            07080000
         MVC   644(4,@5),352(@5)                                  0220  07090000
*                                   /*SAVE PTR TO GM FOR 1ST FD ADR. */ 07100000
*            COPYFDGM = CURFDGM;                                        07110000
         MVC   648(4,@5),632(@5)                                  0221  07120000
*         END;                                                          07130000
*                                   /*INCREMENT NAME CTR. */            07140000
*            NAMCTR = NAMCTR + 1;                                       07150000
@9ED     LA    @F,1                                               0223  07160000
         AH    @F,652(0,@5)                                       0223  07170000
         STH   @F,652(0,@5)                                       0223  07180000
*                                   /*SET R9 TO DELIMITER FOLLOWING */  07190000
*                                   /* NAME.                        */  07200000
*            R9 = R8;                                                   07210000
         LR    @9,@8                                              0224  07220000
*                                   /*TEST IF COLUMN IS A RIGHT PAREND. 07230000
*         IF INBUF(1) ¬= ')' THEN GO TO A6C61;                          07240000
         CLI   0(@9),C')'                                         0225  07250000
         BC    07,A6C61                                           0226  07260000
*                                   /*DECREMENT COPY VALUE. */          07270000
*  A6C82:    COPYVAL = COPYVAL - 1;                                     07280000
A6C82    LH    @F,@D6                                             0227  07290000
         AH    @F,640(0,@5)                                       0227  07300000
         STH   @F,640(0,@5)                                       0227  07310000
*                                   /*TEST IF COPY VALUE IS 0. */       07320000
*         IF COPYVAL = 0 THEN DO;                                       07330000
         SR    @F,@F                                              0228  07340000
         CH    @F,640(0,@5)                                       0228  07350000
         BC    07,@9EC                                            0228  07360000
*                                   /*STEP CARD COLUMN PTR. */          07370000
*            R9 = R9 + 1;                                               07380000
         AH    @9,@D2                                             0230  07390000
*                    /************************************************* 07400000
*                    /** AT THIS POINT ALL FD NAMES OF AN INNER PAREN-* 07410000
*                    /**   THESES GROUP HAVE BEEN SCANNED. THIS SECT- * 07420000
*                    /**   ION DOES GETMAIN OF 88 BYTES FOR A NEW FD  * 07430000
*                    /**   ADR. TABLE IF NECESSARY. 'NAMCTR' CONTAINS * 07440000
*                    /**   NO. OF FD ADR'S. IN GROUP.                 * 07450000
*                    /************************************************* 07460000
*                                   /*END OF INNER PARENTHESES GROUP. * 07470000
*         GO TO A6C55;                                                  07480000
         BC    15,A6C55                                           0231  07490000
*         END;                                                          07500000
*                                   /*POINT TO 1ST FD ADR IN COPY GROUP 07510000
*            R4 = COPYFD;                                               07520000
@9EC     L     @4,644(0,@5)                                       0233  07530000
*                                   /*POINT TO GM FOR 1ST COPY NAME. */ 07540000
*            R6 = COPYFDGM;                                             07550000
         L     @6,648(0,@5)                                       0234  07560000
*                                   /*LOAD COUNTER WITH NO. OF FD ADRS. 07570000
*                                   /* TO BE COPIED.                    07580000
*            NAMCTR1 = NAMCTR;                                          07590000
         MVC   654(2,@5),652(@5)                                  0235  07600000
*                                   /*TEST IF ROOM IN CURRENT FD ADR */ 07610000
*                                   /* GM FOR ANOTHER FD ADR ENTRY.  */ 07620000
*  A6D88: IF CURFD =< CURFDGM + 76 THEN DO;                             07630000
A6D88    LA    @F,76                                              0236  07640000
         A     @F,632(0,@5)                                       0236  07650000
         C     @F,352(0,@5)                                       0236  07660000
         BC    04,@9EB                                            0236  07670000
*                                   /*THERE IS ENOUGH ROOM.    */       07680000
*                                   /*UPDATE PTR TO NEW ENTRY. */       07690000
*            CURFD = CURFD + 4;                                         07700000
         LA    @F,4                                               0238  07710000
         A     @F,352(0,@5)                                       0238  07720000
         ST    @F,352(0,@5)                                       0238  07730000
*         GO TO A6C81;                                                  07740000
         BC    15,A6C81                                           0239  07750000
*         END;                                                          07760000
*                                   /*GETMAIN 88 BYTES FOR A NEW FD */  07770000
*                                   /* ADR. TABLE.                  */  07780000
*                                   /*PUT LENGTH IN GM PARAMETER LIST.  07790000
*            GLENGTH = 88;                                              07800000
@9EB     LA    @F,88                                              0241  07810000
         ST    @F,364(0,@5)                                       0241  07820000
*                                   /*GO TO GETMAIN ROUTINE. */         07830000
*         CALL GETMAIN;                                                 07840000
         BAL   @E,GETMAIN                                         0242  07850000
*                                   /*CLEAR GETMAIN AREA. */            07860000
*            GCADDR -> AREA(1:88) = GCADDR -> AREA(1:88) &&             07870000
*                    GCADDR -> AREA(1:88);                              07880000
         L     @1,376(0,@5)                                       0243  07890000
         XC    0(88,@1),0(@1)                                     0243  07900000
*                                   /*CHAIN NEW FD ADR. TABLE TO */     07910000
*                                   /* PREVIOUS ONE.             */     07920000
*            CURFDGM -> NXTFDGM = GCADDR;                               07930000
         L     @2,632(0,@5)                                       0244  07940000
         MVC   0(4,@2),376(@5)                                    0244  07950000
*                                   /*UPDATE POINTER TO NEW GM. */      07960000
*            CURFDGM = GCADDR;                                          07970000
         MVC   632(4,@5),376(@5)                                  0245  07980000
*                                   /*UPDATE POINTER TO NEW ENTRY. */   07990000
*            CURFD = GCADDR + 4;                                        08000000
         LA    @F,4                                               0246  08010000
         A     @F,376(0,@5)                                       0246  08020000
         ST    @F,352(0,@5)                                       0246  08030000
*                                   /*COPY FD ADR. TO NEW ENTRY. */     08040000
*  A6C81:    CURFD -> FDADR = FDADR;                                    08050000
A6C81    L     @1,352(0,@5)                                       0247  08060000
         MVC   0(4,@1),0(@4)                                      0247  08070000
*                                   /*DECREMENT 'NAMECTR1'. */          08080000
*            NAMCTR1 = NAMCTR1 - 1;                                     08090000
         LH    @F,@D6                                             0248  08100000
         AH    @F,654(0,@5)                                       0248  08110000
         STH   @F,654(0,@5)                                       0248  08120000
*                                   /*TEST IF 'NAMECTR1' IS 09 */       08130000
*         IF NAMCTR1 = 0 THEN GO TO A6C82;                              08140000
         SR    @F,@F                                              0249  08150000
         CH    @F,654(0,@5)                                       0249  08160000
         BC    08,A6C82                                           0250  08170000
*                                   /*STEP PTR TO NEXT FD ADR. */       08180000
*            R4 = R4 + 4;                                               08190000
         AH    @4,@D7                                             0251  08200000
*                                   /*TEST IF LAST FD ADR IN THIS GM. * 08210000
*         IF FDADR ¬= 0 THEN GO TO A6D88;                               08220000
         C     @F,0(0,@4)                                         0252  08230000
         BC    07,A6D88                                           0253  08240000
*                                   /*LAST FD ADR. GET ADR OF NEXT GM.* 08250000
*            R6 = R6 -> NXTFDGM;                                        08260000
         L     @6,0(0,@6)                                         0254  08270000
*                                   /*POINT TO 1ST FD ADR. */           08280000
*            R4 = R6 + 4;                                               08290000
         LA    @4,4                                               0255  08300000
         AR    @4,@6                                              0255  08310000
*         GO TO A6D88;                                                  08320000
         BC    15,A6D88                                           0256  08330000
* /******************************************************************** 08340000
* /** FDSRCH - THIS SUBROUTINE WILL SCAN THE FD TABLES FOR AN EQUAL   * 08350000
* /**           NAME AND STORE THE ADR OF THE FD TABLE IN THE FD ADR  * 08360000
* /**           TABLE POINTED TO BY THE CREATE ENTRY. IF AN EQUAL NAME* 08370000
* /**           IS NOT FOUND MSG 7 IS ISSUED.                         * 08380000
* /**      ENTRY - R14 IS LINKAGE REGISTER.                           * 08390000
* /**              R9 POINTS TO START OF NAME.                        * 08400000
* /**              R7 CONTAINS LENGTH OF NAME.                        * 08410000
* /**      EXIT  - ENTRY REGISTERS ARE UNCHANGED.                     * 08420000
* /******************************************************************** 08430000
*  FDSRCH:;                                                             08440000
*                                   /*SAVE REG 14 IN COMMON AREA. */    08450000
*            RECREM = R14;                                              08460000
FDSRCH   ST    @E,348(0,@5)                                       0258  08470000
*                                   /*MOVE NAME TO 'Q' FOR COMPARE. */  08480000
*            Q(1:8) = INBUF(1:R7);                                      08490000
         LR    @1,@7                                              0259  08500000
         BCTR  @1,0                                               0259  08510000
         LR    @E,@9                                              0259  08520000
         LA    @A,216(0,@5)                                       0259  08530000
         MVI   0(@A),C' '                                         0259  08540000
         MVC   1(007,@A),0(@A)                                    0259  08550000
         EX    @1,@MVC                                            0259  08560000
*                    /************************************************* 08570000
*                    /** WHILE SCANNING FD TABLES -                   * 08580000
*                    /**   R4 POINTS TO CURRENT FD TABLE GETMAIN.     * 08590000
*                    /**   R6 POINTS TO CURRENT FD TABLE.             * 08600000
*                    /************************************************* 08610000
*                                   /*POINT TO 1ST FD TABLE GM. */      08620000
*            R4 = FDPTR1;                                               08630000
         L     @4,600(0,@5)                                       0260  08640000
*                                   /*TEST IF NO FD TABLES PRESENT. */  08650000
*         IF R4 = 0 THEN GO TO A6C94;                                   08660000
         LTR   @4,@4                                              0261  08670000
         BC    08,A6C94                                           0262  08680000
*                                   /*POINT TO 1ST FD ENTRY. */         08690000
*  A6C93:    R6 = R4;                                                   08700000
A6C93    LR    @6,@4                                              0263  08710000
*                                   /*COMPARE NAME ON CREATE CARD TO */ 08720000
*                                   /* NAME IN FD TABLE.             */ 08730000
*  A6C90: IF Q(1:8) = FDNAME THEN GO TO A6C91;                          08740000
A6C90    CLC   216(8,@5),0(@6)                                    0264  08750000
         BC    08,A6C91                                           0265  08760000
*                                   /*UPDATE PTR TO NEXT FD ENTRY. */   08770000
*            R6 = R6 + 64;                                              08780000
         AH    @6,@D8                                             0266  08790000
*                                   /*TEST IF ANOTHER FD ENTRY IN GM. * 08800000
*         IF R6 -> AREA(1:4) ¬= 0 THEN GO TO A6C90;                     08810000
         CLC   0(4,@6),@D9                                        0267  08820000
         BC    07,A6C90                                           0268  08830000
*                                   /*NO MORE FD ENTRIES IN THIS GM. */ 08840000
*                                   /*TEST IF ANOTHER FD TABLE GM. */   08850000
*         IF R4 -> NXTFDTAB = 0 THEN DO;                                08860000
         SR    @F,@F                                              0269  08870000
         C     @F,516(0,@4)                                       0269  08880000
         BC    07,@9EA                                            0269  08890000
*                                   /*NO FD TABLE FOR FD NAME SPECIFIED 08900000
*                                   /* ON CREATE CARD.                  08910000
*                                   /*SET MSG 7. */                     08920000
*  A6C94:    MS = 7;                                                    08930000
A6C94    LA    @F,7                                               0271  08940000
         STH   @F,406(0,@5)                                       0271  08950000
*         GO TO ERRORF;                                                 08960000
         BC    15,ERRORF                                          0272  08970000
*         END;                                                          08980000
*                                   /*POINT TO NEXT FD TABLE GM. */     08990000
*            R4 = R4 -> NXTFDTAB;                                       09000000
@9EA     L     @4,516(0,@4)                                       0274  09010000
*         GO TO A6C93;                                                  09020000
         BC    15,A6C93                                           0275  09030000
*                                   /*TEST IF FIRSTSW IS ON. */         09040000
*  A6C91: IF FIRSTSW = ON THEN GO TO A6C92;                             09050000
A6C91    CLC   637(1,@5),ON                                       0276  09060000
         BC    08,A6C92                                           0277  09070000
*                                   /*TEST IF ENOUGH ROOM IN FD ADR */  09080000
*                                   /* TABLE FOR NEW ENTRY.         */  09090000
*         IF CURFD =< CURFDGM + 76 THEN DO;                             09100000
         LA    @F,76                                              0278  09110000
         A     @F,632(0,@5)                                       0278  09120000
         C     @F,352(0,@5)                                       0278  09130000
         BC    04,@9E9                                            0278  09140000
*                                   /*THERE IS ENOUGH ROOM.        */   09150000
*                                   /*UPDATE POINTER TO NEW ENTRY. */   09160000
*            CURFD = CURFD + 4;                                         09170000
         LA    @F,4                                               0280  09180000
         A     @F,352(0,@5)                                       0280  09190000
         ST    @F,352(0,@5)                                       0280  09200000
*         GO TO A6C98;                                                  09210000
         BC    15,A6C98                                           0281  09220000
*         END;                                                          09230000
*                                   /*GETMAIN 88 BYTES FOR A NEW FD */  09240000
*                                   /* ADR. TABLE.                  */  09250000
*                                   /*PUT LENGTH IN GM PARAMETER LIST.  09260000
*  A6C92:    GLENGTH = 88;                                              09270000
@9E9     EQU   *                                                  0283  09280000
A6C92    LA    @F,88                                              0283  09290000
         ST    @F,364(0,@5)                                       0283  09300000
*                                   /*GO TO GETMAIN ROUTINE. */         09310000
*         CALL GETMAIN;                                                 09320000
         BAL   @E,GETMAIN                                         0284  09330000
*                                   /*BASE POINTER FOR 'AREA'. */       09340000
*            R4 = GCADDR;                                               09350000
         L     @4,376(0,@5)                                       0285  09360000
*                                   /*CLEAR GETMAIN AREA. */            09370000
*            AREA(1:88) = AREA(1:88) && AREA(1:88);                     09380000
         XC    0(88,@4),0(@4)                                     0286  09390000
*                                   /*TEST IF FIRSTSW IS OFF. */        09400000
*         IF FIRSTSW = OFF THEN DO;                                     09410000
         CLC   637(1,@5),OFF                                      0287  09420000
         BC    07,@9E8                                            0287  09430000
*                                   /*CHAIN NEW FD ADR. TABLE TO */     09440000
*                                   /* PREVIOUS ONE.             */     09450000
*            CURFDGM -> NXTFDGM = R4;                                   09460000
         L     @1,632(0,@5)                                       0289  09470000
         ST    @4,0(0,@1)                                         0289  09480000
         BC    15,@9E7                                            0291  09490000
*         END;                                                          09500000
*         ELSE DO;                                                      09510000
*                                   /*STORE ADR. OF 1ST FD ADR. TABLE * 09520000
*                                   /* IN CREATE ENTRY.               * 09530000
*            CURCRTE -> FDADTAB = R4;                                   09540000
@9E8     L     @1,316(0,@5)                                       0292  09550000
         ST    @4,24(0,@1)                                        0292  09560000
*                                   /*TURN OFF FIRSTSW. */              09570000
*            FIRSTSW = OFF;                                             09580000
         MVC   637(1,@5),OFF                                      0293  09590000
*         END;                                                          09600000
*                                   /*UPDATE POINTER TO NEW GM. */      09610000
*            CURFDGM = R4;                                              09620000
@9E7     ST    @4,632(0,@5)                                       0295  09630000
*                                   /*UPDATE POINTER TO NEW ENTRY. */   09640000
*            CURFD = R4 + 4;                                            09650000
         LA    @F,4                                               0296  09660000
         AR    @F,@4                                              0296  09670000
         ST    @F,352(0,@5)                                       0296  09680000
*                                   /*STORE FD ADR. IN FD ADR. TABLE. * 09690000
*  A6C98:    CURFD -> FDADR = R6;                                       09700000
A6C98    L     @1,352(0,@5)                                       0297  09710000
         ST    @6,0(0,@1)                                         0297  09720000
*                                   /*RESTORE REG 14. */                09730000
*            R14 = RECREM;                                              09740000
         L     @E,348(0,@5)                                       0298  09750000
*                                   /*RETURN TO CALLER. */              09760000
*         GO TO R14;                                                    09770000
         BCR   15,@E                                              0299  09780000
* /******************************************************************** 09790000
* /**     PROCESS PICTURE KEYWORD.                                    * 09800000
* /**        ENTRY - R9 POINTS TO START OF KEYWORD.                   * 09810000
* /**        EXIT  - R8 POINTS TO DELIMITER FOLLOWING PICTURE         * 09820000
* /**                  PARAMETERS.                                    * 09830000
* /**        FORMAT - PICTURE=LENGTH,STARTLOC,'EBCDIC STRING' OR      * 09840000
* /**                                         P'DECIMAL VALUE' OR     * 09850000
* /**                                         B'DECIMAL VALUE'        * 09860000
* /**           LENGTH IS THE NO. OF BYTES THE PICTURE FIELD WILL     * 09870000
* /**            OCCUPY IN THE LOGICAL RECORD.                        * 09880000
* /**           STARTLOC IS THE RELATIVE POSITION TO 0 IN THE LOGICAL * 09890000
* /**            RECORD WHERE THE PICTURE FIELD WILL START.           * 09900000
* /**           'P' TYPE STRING - THE DECIMAL VALUE WILL BE CONVERTED * 09910000
* /**            TO PACKED DECIMAL AND PLACED RIGHT-JUSTIFIED IN THE  * 09920000
* /**            PICTURE FIELD.                                       * 09930000
* /**           'B' TYPE STRING - THE DECIMAL VALUE WILL BE CONVERTED * 09940000
* /**            TO A BINARY NO. AND PLACED RIGHT-JUSTIFIED IN THE    * 09950000
* /**            PICTURE FIELD.                                       * 09960000
* /******************************************************************** 09970000
*  A6D1:;                                                               09980000
*                                   /*ADVANCE CARD COLUMN PTR TO START  09990000
*                                   /* OF PARAMETER.                    10000000
*            R9 = R9 + 8;                                               10010000
A6D1     AH    @9,@D10                                            0301  10020000
*                    /************************************************* 10030000
*                    /**  PROCESS PICTURE LENGTH.                     * 10040000
*                    /************************************************* 10050000
*                                   /*GO TO SCAN OUT FIRST SUBPARAMETER 10060000
*                                   /* (PICTURE LENGTH).                10070000
*         CALL SPSCAN;                                                  10080000
         BAL   @E,SPSCAN                                          0302  10090000
*                                   /*GO TO CONVERT QUANTITY TO BINARY. 10100000
*         CALL CONVDB;                                                  10110000
         BAL   @E,CONVDB                                          0303  10120000
*                                   /*INCREMENT PICUTRE LENGTH + 6 FOR  10130000
*                                   /* SIZE OF PICTURE TABLE.           10140000
*                                   /*PUT LENGTH IN GM PARAMETER LIST.  10150000
*            GLENGTH = R6 + 6;                                          10160000
         LA    @F,6                                               0304  10170000
         AR    @F,@6                                              0304  10180000
         ST    @F,364(0,@5)                                       0304  10190000
*                                   /*GO TO GETMAIN ROUTINE. */         10200000
*         CALL GETMAIN;                                                 10210000
         BAL   @E,GETMAIN                                         0305  10220000
*                                   /*PUT GM ADDRESS IN BASE FOR */     10230000
*                                   /* PICTURE TABLE.            */     10240000
*            PICBASE = GCADDR;                                          10250000
         MVC   664(4,@5),376(@5)                                  0306  10260000
*                                   /*STORE PICTURE LENGTH IN PICTURE * 10270000
*                                   /* TABLE.                         * 10280000
*            PICLGTH = R6;                                              10290000
         L     @1,664(0,@5)                                       0307  10300000
         STH   @6,4(0,@1)                                         0307  10310000
*                             /* STORE ADDR OF PICTURE TABLE */         10320000
*                                   /* IN CREATE ENTRY.              */ 10330000
*            CURCRTE -> PICPTR = ADDR(CRPICT);                          10340000
         L     @2,316(0,@5)                                       0308  10350000
         ST    @1,16(0,@2)                                        0308  10360000
*                                   /*UPDATE CARD COL PTR TO DELIMITER  10370000
*                                   /* AFTER PICTURE LENGTH.            10380000
*            R9 = R8;                                                   10390000
         LR    @9,@8                                              0309  10400000
*                              /*************************************** 10410000
*                              /**THIS SECTION TESTS IF PICTURE START * 10420000
*                              /** LOCATION IS ON THIS CARD OR IF IT  * 10430000
*                              /** CONTINUED ONTO NEXT CARD.          * 10440000
*                              /*************************************** 10450000
*                                   /*TEST IF COMMA AFTER LENGTH  */    10460000
*                                   /* SUBPARAMETER. IF NOT, GO   */    10470000
*                                   /* TO ISSUE MESSAGE #3.       */    10480000
*         IF INBUF(1) ¬= ',' THEN GO TO MSG3;                           10490000
         CLI   0(@9),C','                                         0310  10500000
         BC    07,MSG3                                            0311  10510000
*                                   /*TEST IF COMMA IS IN COL 71.*/     10520000
*         IF R9 = COUNTER THEN GO TO A6D2;                              10530000
         C     @9,232(0,@5)                                       0312  10540000
         BC    08,A6D2                                            0313  10550000
*                                   /*STEP CARD COLUMN PTR.*/           10560000
*            R9 = R9 + 1;                                               10570000
         AH    @9,@D2                                             0314  10580000
*                                   /*TEST IF COLUMN PAST COMMA IS */   10590000
*                                   /* BLANK.                      */   10600000
*         IF INBUF(1) = ' ' THEN DO;                                    10610000
         CLI   0(@9),C' '                                         0315  10620000
         BC    07,@9E6                                            0315  10630000
*                                   /*CONTINUATION AFTER 1ST PICTURE */ 10640000
*                                   /* SUBPARAMETER IS INDICATED.    */ 10650000
*                                   /*SET PICCSW1.                   */ 10660000
*  A6D2:     PICCSW(1) = '1'B;                                          10670000
A6D2     OI    562(@5),B'10000000'                                0317  10680000
*                                   /*TURN ON CREATE CONT. SW. */       10690000
*  A6D3:     CRCSW = ON;                                                10700000
A6D3     MVC   554(1,@5),ON                                       0318  10710000
*                                   /*GO TO IEBDG TO READ CONTINUATION  10720000
*                                   /*CARD.                             10730000
*         GO TO RETURN2;                                                10740000
         BC    15,RETURN2                                         0319  10750000
*         END;                                                          10760000
*                    /************************************************* 10770000
*                    /**  PROCESS PICTURE START LOCATION.             * 10780000
*                    /************************************************* 10790000
*                                   /*GO TO SCAN OUT 2ND SUBPARAMETER.* 10800000
*                                   /* (PICTURE START LOC).           * 10810000
*  A6D4:  CALL SPSCAN;                                                  10820000
@9E6     EQU   *                                                  0321  10830000
A6D4     BAL   @E,SPSCAN                                          0321  10840000
*                                   /*GO TO CONVERT QUANTITY TO BINARY. 10850000
*         CALL CONVDB;                                                  10860000
         BAL   @E,CONVDB                                          0322  10870000
*                                   /*STORE PICTURE START LOC. IN */    10880000
*                                   /* CREATE ENTRY.              */    10890000
*            PICSTLOC = R6 - 1;                                         10900000
         LR    @F,@6                                              0323  10910000
         BCTR  @F,0                                               0323  10920000
         L     @1,664(0,@5)                                       0323  10930000
         ST    @F,0(0,@1)                                         0323  10940000
*                                   /*UPDATE CARD COL PTR TO DELIMITER  10950000
*                                   /* AFTER PICTURE LENGTH.            10960000
*            R9 = R8;                                                   10970000
         LR    @9,@8                                              0324  10980000
*                              /*************************************** 10990000
*                              /**THIS SECTION TESTS IF PICTURE STRING* 11000000
*                              /** IS ON THIS CARD OR IF IT IS        * 11010000
*                              /** CONTINUED ONTO NEXT CARD.          * 11020000
*                              /*************************************** 11030000
*                                   /*TEST IF COMMA AFTER START LOC */  11040000
*                                   /* SUBPARAMETER. IF NOT, GO TO  */  11050000
*                                   /* ISSUE MESSAGE #3.            */  11060000
*         IF INBUF(1) ¬= ',' THEN GO TO MSG3;                           11070000
         CLI   0(@9),C','                                         0325  11080000
         BC    07,MSG3                                            0326  11090000
*                                   /*TEST IF COMMA IS IN COL 71.*/     11100000
*         IF R9 = COUNTER THEN GO TO A6D5;                              11110000
         C     @9,232(0,@5)                                       0327  11120000
         BC    08,A6D5                                            0328  11130000
*                                   /*STEP CARD COLUMN PTR.*/           11140000
*            R9 = R9 + 1;                                               11150000
         AH    @9,@D2                                             0329  11160000
*                                   /*TEST IF COLUMN PAST COMMA IS */   11170000
*                                   /* BLANK.                      */   11180000
*         IF INBUF(1) = ' ' THEN DO;                                    11190000
         CLI   0(@9),C' '                                         0330  11200000
         BC    07,@9E5                                            0330  11210000
*                                   /*CONTINUATION AFTER 2ND PICTURE */ 11220000
*                                   /* SUBPARAMETER IS INDICATED.    */ 11230000
*                                   /* SET PICCSW2.                  */ 11240000
*  A6D5:     PICCSW(2) = '1'B;                                          11250000
A6D5     OI    562(@5),B'01000000'                                0332  11260000
*                                   /*GO TO SET CRCSW.*/                11270000
*         GO TO A6D3;                                                   11280000
         BC    15,A6D3                                            0333  11290000
*         END;                                                          11300000
*                    /************************************************* 11310000
*                    /**  PROCESS EBCDIC PICTURE.                     * 11320000
*                    /**    PICTURE LENGTH IS USED TO DETERMINE       * 11330000
*                    /**    IF THE STRING TERMINATES ON THIS CARD OR  * 11340000
*                    /**    IF A CONTINUATION CARD IS NECESSARY TO    * 11350000
*                    /**    SATISFY LENGTH. THE STRING IS MOVED FROM  * 11360000
*                    /**    THE CARD TO THE PICTURE TABLE AS EACH CARD* 11370000
*                    /**    IS READ IF NECESSARY. 'CURPIC' POINTS TO  * 11380000
*                    /**    LOCATION IN PICTURE TABLE WHERE NEXT      * 11390000
*                    /**    PORTION OF STRING IS TO BE MOVED.         * 11400000
*                    /************************************************* 11410000
*                                   /*INITIALIZE PTR TO START OF */     11420000
*                                   /* PICTURE STRING.           */     11430000
*  A6D6:     CURPIC = ADDR(PICSTRNG);                                   11440000
@9E5     EQU   *                                                  0335  11450000
A6D6     L     @1,664(0,@5)                                       0335  11460000
         LA    @F,6(0,@1)                                         0335  11470000
         ST    @F,324(0,@5)                                       0335  11480000
*                                   /*INITIALIZE PICCTR  TO PICTURE */  11490000
*                                   /* LENGTH.                      */  11500000
*            PICCTR = PICLGTH;                                          11510000
         L     @1,664(0,@5)                                       0336  11520000
         LH    @F,4(0,@1)                                         0336  11530000
         ST    @F,328(0,@5)                                       0336  11540000
*                                   /*TEST IF COLUMN IS A QUOTE.*/      11550000
*         IF INBUF(1) ¬= '''' THEN GO TO A6D65;                         11560000
         CLI   0(@9),C''''                                        0337  11570000
         BC    07,A6D65                                           0338  11580000
*         PICCSW(4) = '1'B ;           /* SET SW. BUSY WITH PIC A41807* 11590000
         OI    562(@5),B'00010000'                                0339  11600000
*                                   /*TEST IF QUOTE IS IN COL 71.*/     11610000
*         IF R9 = COUNTER THEN GO TO A6D73;                             11620000
         C     @9,232(0,@5)                                       0340  11630000
         BC    08,A6D73                                           0341  11640000
*                                   /*PICTURE STRING IS IN EBCDIC.   */ 11650000
*                                   /*ADVANCE CARD COLUMN PTR.*/        11660000
*            R9 = R9 + 1;                                               11670000
         AH    @9,@D2                                             0342  11680000
*                                   /*TEST IF EBCDIC STRING ON THIS  */ 11690000
*                                   /* CARD IS GT THE PICTURE LENGTH.*/ 11700000
*         IF PICCTR => COUNTER - R9 + 1 THEN GO TO A6D68;               11710000
         LA    @F,1                                               0343  11720000
         SR    @F,@9                                              0343  11730000
         A     @F,232(0,@5)                                       0343  11740000
         C     @F,328(0,@5)                                       0343  11750000
         BC    12,A6D68                                           0344  11760000
*                                   /*REMAINDER OF PICTURE STRING IS */ 11770000
*                                   /* CONTAINED ON THIS CARD.       */ 11780000
*                                   /*MOVE STRING FROM CARD TO PICTURE* 11790000
*                                   /* TABLE ACCORDING TO LENGTH      * 11800000
*                                   /* REMAINING IN PICCTR.           * 11810000
*  A6D71:    CURPIC -> AREA(1:PICCTR) = INBUF;                          11820000
A6D71    LR    @E,@9                                              0345  11830000
         L     @1,328(0,@5)                                       0345  11840000
         BCTR  @1,0                                               0345  11850000
         L     @2,324(0,@5)                                       0345  11860000
         LR    @A,@2                                              0345  11870000
         EX    @1,@MVC                                            0345  11880000
*                                   /*ADVANCE CARD COLUMN PTR TO COL */ 11890000
*                                   /* PAST PICTURE STRING.          */ 11900000
*            R9 = R9 + PICCTR;                                          11910000
         A     @9,328(0,@5)                                       0346  11920000
*                                   /*TEST IF COLUMN IS A QUOTE. IF NOT 11930000
*                                   /* GO TO ISSUE MESSAGE #3.          11940000
*  A6D72: IF INBUF(1) ¬= '''' THEN GO TO MSG3;                          11950000
A6D72    CLI   0(@9),C''''                                        0347  11960000
         BC    07,MSG3                                            0348  11970000
*                                   /*SET R8 TO DELIMITER FOLLOWING */  11980000
*                                   /* LAST PICTURE PARAMETER.      */  11990000
*         PICCSW(4) = '0'B ;           /* READY WITH PICTURE    A41807* 12000000
         NI    562(@5),B'11101111'                                0349  12010000
*            R8 = R9 + 1;                                               12020000
         LA    @8,1                                               0350  12030000
         AR    @8,@9                                              0350  12040000
*                                   /*PICTURE KEYWORD HAS BEEN        * 12050000
*                                   /* PROCESSED. GO TO SCAN OUT NEXT * 12060000
*                                   /* KEYWORD.                       * 12070000
*         GO TO CARDSCAN;                                               12080000
         BC    15,CARDSCAN                                        0351  12090000
*                                   /*CALCULATE NO. OF BYTES TO BE */   12100000
*                                   /* MOVED.                      */   12110000
*  A6D68:    R6 = COUNTER - R9 + 1;                                     12120000
A6D68    LA    @6,1                                               0352  12130000
         SR    @6,@9                                              0352  12140000
         A     @6,232(0,@5)                                       0352  12150000
*                                   /*MOVE PICTURE STRING FROM CARD TO  12160000
*                                   /* PICTURE TABLE. STRING IS CONT-   12170000
*                                   /* AINED IN COLUMNS FROM WHERE R9   12180000
*                                   /* POINTS TO COLUMN 71.             12190000
*            CURPIC -> AREA(1:R6) = INBUF;                              12200000
         LR    @E,@9                                              0353  12210000
         LR    @1,@6                                              0353  12220000
         BCTR  @1,0                                               0353  12230000
         L     @2,324(0,@5)                                       0353  12240000
         LR    @A,@2                                              0353  12250000
         EX    @1,@MVC                                            0353  12260000
*                                   /*DECREMENT PICCTR BY NO. IF BYTES* 12270000
*                                   /* MOVED.                         * 12280000
*  A6D69:    PICCTR = PICCTR - R6;                                      12290000
A6D69    LCR   @F,@6                                              0354  12300000
         A     @F,328(0,@5)                                       0354  12310000
         ST    @F,328(0,@5)                                       0354  12320000
*                                   /*UPDATE CURPIC TO POINT TO NEXT    12330000
*                                   /* POSITION IN PICTURE TABLE STRING 12340000
*            CURPIC = CURPIC + R6;                                      12350000
         LR    @F,@6                                              0355  12360000
         A     @F,324(0,@5)                                       0355  12370000
         ST    @F,324(0,@5)                                       0355  12380000
*                                   /*CONTINUATION OF PICTURE STRING IS 12390000
*                                   /* INDICATED.                       12400000
*                                   /*SET PICCSW3.                      12410000
*  A6D73:    PICCSW(3) = '1'B;                                          12420000
A6D73    OI    562(@5),B'00100000'                                0356  12430000
*                                   /*GO TO SET CRCSW.*/                12440000
*            GO TO A6D3;                                                12450000
         BC    15,A6D3                                            0357  12460000
*                              /*************************************** 12470000
*                              /** CONTROL IS TRANSFERRED TO THIS     * 12480000
*                              /**  POINT IF A CONTINUATION CARD WAS  * 12490000
*                              /**  READ.                             * 12500000
*                              /*************************************** 12510000
*                                   /*TEST IF REMAINING LENGTH OF */    12520000
*                                   /* STRING IS GT 67.           */    12530000
*  A6D7:  IF PICCTR > 67 THEN DO;                                       12540000
A6D7     LA    @F,67                                              0358  12550000
         C     @F,328(0,@5)                                       0358  12560000
         BC    10,@9E4                                            0358  12570000
*                                   /*STRING DOESN'T TERMINATE ON THIS  12580000
*                                   /* CARD.                            12590000
*                                   /*MOVE 68 CHARS FROM COL 4 TO COL   12600000
*                                   /* 71 TO PICTURE TABLE STRING.      12610000
*            CURPIC -> AREA(1:68) = INBUF;                              12620000
         L     @1,324(0,@5)                                       0360  12630000
         MVC   0(68,@1),0(@9)                                     0360  12640000
*                                   /*PUT NO. CHARS MOVED IN R6. */     12650000
*            R6 = 68;                                                   12660000
         LA    @6,68                                              0361  12670000
*                                   /*LOOP BACK TO PROCESS REMAINDER */ 12680000
*                                   /* OF PICTURE STRING.            */ 12690000
*         GO TO A6D69;                                                  12700000
         BC    15,A6D69                                           0362  12710000
*         END;                                                          12720000
*                                   /*TEST IF LENGTH OF PICTURE */      12730000
*                                   /* REMAINING IS 0.          */      12740000
*         IF PICCTR = 0 THEN GO TO A6D72;                               12750000
@9E4     SR    @F,@F                                              0364  12760000
         C     @F,328(0,@5)                                       0364  12770000
         BC    08,A6D72                                           0365  12780000
*                                   /*GO TO MOVE REMAINING STRING.*/    12790000
*         GO TO A6D71;                                                  12800000
         BC    15,A6D71                                           0366  12810000
*                    /************************************************* 12820000
*                    /**  PROCESS PACKED DECIMAL OR BINARY PICTURE    * 12830000
*                    /**    STRING.                                   * 12840000
*                    /**    THESE STRINGS MUST BE CONTAINED ON ONE    * 12850000
*                    /**    CARD AND MAY NOT BE CONTINUED.            * 12860000
*                    /************************************************* 12870000
*                                   /*TEST IF START OF PICTURE STRING * 12880000
*                                   /* IS P'.                         * 12890000
*  A6D65: IF INBUF(1:2) = 'P''' THEN DO;                                12900000
A6D65    CLC   0(2,@9),@C16                                       0367  12910000
         BC    07,@9E3                                            0367  12920000
*                                   /*TURN ON PICCSW5.*/                12930000
*            PICCSW(5) = '1'B;                                          12940000
         OI    562(@5),B'00001000'                                0369  12950000
*         GO TO A6D79;                                                  12960000
         BC    15,A6D79                                           0370  12970000
*         END;                                                          12980000
*                                   /*TEST IF START OF PICTURE STRING * 12990000
*                                   /* IS B'. IF NOT, GO TO SET       * 13000000
*                                   /* MESSAGE #3.                    * 13010000
*         IF INBUF(1:2) ¬= 'B''' THEN GO TO MSG3;                       13020000
@9E3     CLC   0(2,@9),@C17                                       0372  13030000
         BC    07,MSG3                                            0373  13040000
*                                   /*TURN ON PICCSW6. */               13050000
*            PICCSW(6) = '1'B;                                          13060000
         OI    562(@5),B'00000100'                                0374  13070000
*                                   /*INITIALIZE PICCTR TO 0.*/         13080000
*  A6D79:    PICCTR = 0;                                                13090000
A6D79    SR    @F,@F                                              0375  13100000
         ST    @F,328(0,@5)                                       0375  13110000
*                              /*************************************** 13120000
*                              /** THIS SECTION SCANS THE STRING      * 13130000
*                              /**  LOOKING FOR AN ENDING QUOTE.      * 13140000
*                              /*************************************** 13150000
*                                   /*ADVANCE CARD COLUMN PTR TO START  13160000
*                                   /* OF STRING.                       13170000
*           R9 = R9 + 2;                                                13180000
         AH    @9,@D11                                            0376  13190000
*            R8 = R9;                                                   13200000
         LR    @8,@9                                              0377  13210000
*                                   /*TEST IF COLUMN IS A QUOTE */      13220000
*                                   /* (ENDING QUOTE).          */      13230000
*  A6D8: IF R8 -> INBUF(1) = '''' THEN GO TO A6D81;                     13240000
A6D8     CLI   0(@8),C''''                                        0378  13250000
         BC    08,A6D81                                           0379  13260000
*                                   /*STEP PICCTR BY 1.*/               13270000
*            PICCTR = PICCTR + 1;                                       13280000
         LA    @F,1                                               0380  13290000
         A     @F,328(0,@5)                                       0380  13300000
         ST    @F,328(0,@5)                                       0380  13310000
*                                   /*TEST IF PICCTR IS GT 16.*/        13320000
*         IF PICCTR > 16 THEN DO;                                       13330000
         LA    @F,16                                              0381  13340000
         C     @F,328(0,@5)                                       0381  13350000
         BC    10,@9E2                                            0381  13360000
*                                   /*PACKED DECIMAL OR BINARY PICTURE* 13370000
*                                   /* TOO LONG.                      * 13380000
*                                   /*SET MSG 8. */                     13390000
*           MS = 8;                                                     13400000
         LA    @F,8                                               0383  13410000
         STH   @F,406(0,@5)                                       0383  13420000
*         GO TO ERRORF;                                                 13430000
         BC    15,ERRORF                                          0384  13440000
*         RETURN;                                                       13450000
*         END;                                                          13460000
*                                   /*TEST IF AT COL 71.*/              13470000
*        IF R8 => COUNTER THEN DO;                                      13480000
@9E2     C     @8,232(0,@5)                                       0387  13490000
         BC    04,@9E1                                            0387  13500000
*                                  /*PARAMETER EXTENDS INTO COL 72. */  13510000
*                                   /*SET MSG 21. */                    13520000
*           MS = 21;                                                    13530000
         LA    @F,21                                              0389  13540000
         STH   @F,406(0,@5)                                       0389  13550000
*         GO TO ERRORF;                                                 13560000
         BC    15,ERRORF                                          0390  13570000
*         END;                                                          13580000
*                                   /*ADVANCE CARD COLUMN PTR.*/        13590000
*            R8 = R8 + 1;                                               13600000
@9E1     AH    @8,@D2                                             0392  13610000
*                                   /*LOOP BACK TO SCAN NEXT COLUMN.*/  13620000
*         GO TO A6D8;                                                   13630000
         BC    15,A6D8                                            0393  13640000
*                                   /*TEST IF BYTE COUNTER IS 0. IF SO, 13650000
*                                   /* GO TO SET MESSAGE #6.            13660000
*  A6D81: IF PICCTR = 0 THEN DO;                                        13670000
A6D81    SR    @F,@F                                              0394  13680000
         C     @F,328(0,@5)                                       0394  13690000
         BC    07,@9E0                                            0394  13700000
*                                  /*NO STRING SUPPLIED. */             13710000
*                                   /*GO TO SET MSG 3. */               13720000
*         GO TO MSG3;                                                   13730000
         BC    15,MSG3                                            0396  13740000
*        END;                                                           13750000
*                              /*************************************** 13760000
*                              /** PICTURE STRING IN PICTURE TABLE    * 13770000
*                              /**  MUST BE CLEARED TO ZEROES TO PRO- * 13780000
*                              /**  VIDE LEADING ZEROES FOR THE VALUE.* 13790000
*                              /*************************************** 13800000
*                                   /*GET LENGTH OF PICTURE STRING. */  13810000
*            R6 = PICLGTH;                                              13820000
@9E0     L     @1,664(0,@5)                                       0398  13830000
         LH    @6,4(0,@1)                                         0398  13840000
*                                   /*GET ADDRESS OF PICTURE STRING. */ 13850000
*            R7 = ADDR(PICSTRNG);                                       13860000
         LA    @7,6(0,@1)                                         0399  13870000
*                                   /*TEST IF LENGTH IS GT 256. */      13880000
*  A6D83: IF R6 > 256 THEN DO;                                          13890000
A6D83    CH    @6,@D12                                            0400  13900000
         BC    12,@9DF                                            0400  13910000
*                                   /*CLEAR 256 BYTES. */               13920000
*            GEN( XC  0(256,R7),0(R7));                                 13930000
          XC  0(256,R7),0(R7)                                           13940000
         DS    0H                                                       13950000
*                                   /*DECREMENT LENGTH BY 256. */       13960000
*            R6 = R6 - 256;                                             13970000
         SH    @6,@D12                                            0403  13980000
*                                   /*INCREMENT ADDRESS BY 256. */      13990000
*            R7 = R7 + 256;                                             14000000
         AH    @7,@D12                                            0404  14010000
*                                   /*LOOP BACK TO CLEAR MORE. */       14020000
*         GO TO A6D83;                                                  14030000
         BC    15,A6D83                                           0405  14040000
*         END;                                                          14050000
*                                   /*PUT LENGTH - 1 INTO R6. */        14060000
*            R6 = R6 - 1;                                               14070000
@9DF     BCTR  @6,0                                               0407  14080000
*                                   /*CLEAR REMAINDER OF AREA. */       14090000
*            GEN( EX  R6,CLEAR);                                        14100000
          EX  R6,CLEAR                                                  14110000
         DS    0H                                                       14120000
*         GO TO A6D87;                                                  14130000
         BC    15,A6D87                                           0409  14140000
*  CLEAR:    GEN( XC  0(1,R7),0(R7));                                   14150000
CLEAR     XC  0(1,R7),0(R7)                                             14160000
         DS    0H                                                       14170000
*                                   /*FIND LENGTH OF STRING ON CARD. */ 14180000
*  A6D87:    R7 = R8 - R9;                                              14190000
A6D87    LCR   @7,@9                                              0411  14200000
         AR    @7,@8                                              0411  14210000
*                              /*************************************** 14220000
*                              /** CALL 'CONVDB' ROUTINE.             * 14230000
*                              /**   PACKED DECIMAL STRING - NO. IS   * 14240000
*                              /**     PACKED INTO 'Q'.               * 14250000
*                              /**   BINARY STRING - NO. IS PACKED AND* 14260000
*                              /**     CONVERTED TO BINARY IN REG 6.  * 14270000
*                              /*************************************** 14280000
*         CALL CONVDB;                                                  14290000
         BAL   @E,CONVDB                                          0412  14300000
*                                   /*TEST IF PACKED DECIMAL STRING.*/  14310000
*         IF PICCSW(5) = '0'B THEN GO TO A6D84;                         14320000
         TM    562(@5),B'00001000'                                0413  14330000
         BC    08,A6D84                                           0414  14340000
*                    /************************************************* 14350000
*                    /**  PROCESS PACKED DECIMAL PICTURE.             * 14360000
*                    /**    PACKED NO. IS MOVED FROM 'Q' INTO PICTURE * 14370000
*                    /**    AND RIGHT-JUSTIFIED.                      * 14380000
*                    /************************************************* 14390000
*                                   /*PICTURE IS PACKED DECIMAL. */     14400000
*                                   /*CLEAR SWITCH.*/                   14410000
*            PICCSW(5) = '0'B;                                          14420000
         NI    562(@5),B'11110111'                                0415  14430000
*                                   /*CALCULATE NO. OF BYTES TO MOVE */ 14440000
*                                   /* BY, LENGTH OF STRING ON CARD  */ 14450000
*                                   /* / 2 + 1.                      */ 14460000
*            R6 = R7 / 2 + 1;                                           14470000
         LR    @E,@7                                              0416  14480000
         SRA   @E,1                                               0416  14490000
         AH    @E,@D2                                             0416  14500000
         LR    @6,@E                                              0416  14510000
*                                   /*MOVE PACKED DECIMAL NUMBER FROM * 14520000
*                                   /* Q TO PICTURE TABLE.            * 14530000
*                                   /*MAKE SIGN OF PACKED DECML NO. A * 14540000
*                                   /* STANDARD PLUS SIGN.            * 14550000
*            Q(16) = Q(16) & 'FC'X;                                     14560000
         NI    231(@5),X'FC'                                      0417  14570000
*                                   /*CALCULATE FROM ADDRESS. */        14580000
*            R9 = ADDR(Q) + 16 - R6;                                    14590000
         LCR   @F,@6                                              0418  14600000
         AH    @F,@D13                                            0418  14610000
         LA    @0,216(0,@5)                                       0418  14620000
         AR    @F,@0                                              0418  14630000
         LR    @9,@F                                              0418  14640000
*                                   /*CALCULATE TO ADDRESS. */          14650000
*            R7 = ADDR(PICSTRNG) + PICLGTH - R6;                        14660000
         LCR   @F,@6                                              0419  14670000
         L     @1,664(0,@5)                                       0419  14680000
         AH    @F,4(0,@1)                                         0419  14690000
         LA    @0,6(0,@1)                                         0419  14700000
         AR    @F,@0                                              0419  14710000
         LR    @7,@F                                              0419  14720000
*            R7 -> AREA(1:R6) = R9 -> AREA(1:R6);                       14730000
         LR    @E,@9                                              0420  14740000
         LR    @2,@6                                              0420  14750000
         BCTR  @2,0                                               0420  14760000
         LR    @A,@7                                              0420  14770000
         EX    @2,@MVC                                            0420  14780000
*                                   /*UPDATE CARD COLUMN PTR TO      */ 14790000
*                                   /* DELIMITER AFTER STRING QUOTE. */ 14800000
*  A6D85:    R8 = R8 + 1;                                               14810000
A6D85    AH    @8,@D2                                             0421  14820000
*                                   /*PICTURE KEYWORD HAS BEEN        * 14830000
*                                   /* PROCESSED. GO TO SCAN OUT NEXT * 14840000
*                                   /* KEYWORD.                       * 14850000
*         GO TO CARDSCAN;                                               14860000
         BC    15,CARDSCAN                                        0422  14870000
*                    /************************************************* 14880000
*                    /**  PROCESS BINARY PICTURE.                     * 14890000
*                    /**    BINARY VALUE IS PLACED RIGHT JUSTIFIED IN * 14900000
*                    /**      THE PICTURE TABLE.                      * 14910000
*                    /************************************************* 14920000
*                                   /*PICTURE IS BINARY. */             14930000
*                                   /*CLEAR SWITCH. */                  14940000
*  A6D84:    PICCSW(6) = '0'B;                                          14950000
A6D84    NI    562(@5),B'11111011'                                0423  14960000
*                                   /*SET R7 TO PICTURE LENGTH. */      14970000
*            R7 = PICLGTH;                                              14980000
         L     @1,664(0,@5)                                       0424  14990000
         LH    @7,4(0,@1)                                         0424  15000000
*                                   /*TEST IF LENGTH IS EQ OR GT 4. */  15010000
*         IF R7 => 4 THEN DO;                                           15020000
         CH    @7,@D7                                             0425  15030000
         BC    04,@9DE                                            0425  15040000
*                                   /*ADJUST R7 FOR A MOVE OF 4 BYTES.  15050000
*            R7 = 4;                                                    15060000
         LA    @7,4                                               0427  15070000
*         GO TO A6D86;                                                  15080000
         BC    15,A6D86                                           0428  15090000
*         END;                                                          15100000
*                                   /*TEST IF LENGTH IS 3. */           15110000
*         IF R7 = 3 THEN DO;                                            15120000
@9DE     CH    @7,@D3                                             0430  15130000
         BC    07,@9DD                                            0430  15140000
*                                   /*SHIFT NO. LEFT 1 BYTE. */         15150000
*            GEN( SLL  R6,8);                                           15160000
          SLL  R6,8                                                     15170000
         DS    0H                                                       15180000
*         GO TO A6D86;                                                  15190000
         BC    15,A6D86                                           0433  15200000
*         END;                                                          15210000
*                                   /*TEST IF LENGTH IS 2. */           15220000
*         IF R7 = 2 THEN DO;                                            15230000
@9DD     CH    @7,@D11                                            0435  15240000
         BC    07,@9DC                                            0435  15250000
*                                   /*SHIFT NO. LEFT 2 BYTES. */        15260000
*            GEN( SLL  R6,16);                                          15270000
          SLL  R6,16                                                    15280000
         DS    0H                                                       15290000
*         GO TO A6D86;                                                  15300000
         BC    15,A6D86                                           0438  15310000
*         END;                                                          15320000
*                                   /*LENGTH IS 1. SHIFT NO. LEFT 3 */  15330000
*                                   /* BYTES.                       */  15340000
*            GEN( SLL  R6,24);                                          15350000
@9DC     EQU   *                                                  0440  15360000
          SLL  R6,24                                                    15370000
         DS    0H                                                       15380000
*                                   /*MOVE BINARY VALUE TO Q. */        15390000
*  A6D86:    Q(1:4) = R6;                                               15400000
A6D86    ST    @6,@TEMP4                                          0441  15410000
         MVC   216(4,@5),@TEMP4                                   0441  15420000
*                                   /********************************** 15430000
*                                   /** MOVE BINARY VALUE TO PICTURE  * 15440000
*                                   /**   TABLE.                      * 15450000
*                                   /********************************** 15460000
*                                   /*CALCULATE TO ADDRESS. */          15470000
*            R6 = ADDR(PICSTRNG) + PICLGTH - R7;                        15480000
         LCR   @F,@7                                              0442  15490000
         L     @1,664(0,@5)                                       0442  15500000
         AH    @F,4(0,@1)                                         0442  15510000
         LA    @0,6(0,@1)                                         0442  15520000
         AR    @F,@0                                              0442  15530000
         LR    @6,@F                                              0442  15540000
*            R6 -> AREA(1:R7) = Q(1:R7);                                15550000
         LA    @E,216(0,@5)                                       0443  15560000
         LR    @2,@7                                              0443  15570000
         BCTR  @2,0                                               0443  15580000
         LR    @A,@6                                              0443  15590000
         EX    @2,@MVC                                            0443  15600000
*         GO TO A6D85;                                                  15610000
         BC    15,A6D85                                           0444  15620000
* /******************************************************************** 15630000
* /**    PROCESS FILL KEYWORD.                                        * 15640000
* /**       ENTRY - R9 POINTS TO START OF KEYWORD.                    * 15650000
* /**       EXIT  - R8 POINTS TO DELIMITER FOLLOWING FILL PARAMETER.  * 15660000
* /**       FORMAT - FILL='C'    1 EBCDIC CHAR.                       * 15670000
* /**                FILL=X'XX'  2 HEX DIGITS.                        * 15680000
* /******************************************************************** 15690000
*  A6E1:;                                                               15700000
*                                   /*ADVANCE COLUMN POINTER TO START * 15710000
*                                   /* OF PARAMETER.                  * 15720000
*            R9 = R9 + 5;                                               15730000
A6E1     AH    @9,@D5                                             0446  15740000
*                                   /*TEST IF AT OR PAST COL 72.*/      15750000
*         IF R9 > COUNTER THEN GO TO A6E4;                              15760000
         C     @9,232(0,@5)                                       0447  15770000
         BC    02,A6E4                                            0448  15780000
*                                   /*TEST IF HEX FORMAT.*/             15790000
*         IF INBUF(1) = 'X' THEN GO TO A6E5;                            15800000
         CLI   0(@9),C'X'                                         0449  15810000
         BC    08,A6E5                                            0450  15820000
*                    /************************************************* 15830000
*                    /**  FILL CHAR. IS EBCDIC.                       * 15840000
*                    /**    CHARACTER IS MOVED DIRECTLY FROM CARD TO  * 15850000
*                    /**    CREATE ENTRY.                             * 15860000
*                    /************************************************* 15870000
*                                   /*FILL IS EBCDIC CHAR.*/            15880000
*                                   /*TEST IF QUOTE.      */            15890000
*         IF INBUF(1) = '''' THEN GO TO A6E3;                           15900000
         CLI   0(@9),C''''                                        0451  15910000
*                                   /*IMPROPER SYNTAX. */               15920000
*                                   /*GO TO SET MSG 3. */               15930000
*         GO TO MSG3;                                                   15940000
         BC    07,MSG3                                            0453  15950000
*                                   /*TEST IF QUOTE.*/                  15960000
*  A6E3:  IF INBUF(3) ¬= '''' THEN GO TO MSG3;                          15970000
A6E3     CLI   2(@9),C''''                                        0454  15980000
         BC    07,MSG3                                            0455  15990000
*                                   /*PUT FILL CHAR IN CREATE ENTRY.*/  16000000
*  A6E35:    CURCRTE -> FILLCH = INBUF(2);                              16010000
A6E35    SR    @F,@F                                              0456  16020000
         IC    @F,1(0,@9)                                         0456  16030000
         L     @1,316(0,@5)                                       0456  16040000
         STC   @F,20(0,@1)                                        0456  16050000
*                                   /*POINT TO END OF PARAMETER.*/      16060000
*            R8 = R9 + 3;                                               16070000
         LA    @8,3                                               0457  16080000
         AR    @8,@9                                              0457  16090000
*                                   /*TEST IF NOT AT COL 72. IF NOT,    16100000
*                                   /* FILL KEYWORD HAS BEEN PROCESSED. 16110000
*                                   /* GO TO SCAN NEXT KEYWORD.         16120000
* A6E36: IF R8 ¬> COUNTER+1             /* NOT PAST COLUMN 72   A38781* 16130000
*             THEN DO ;                 /* CHECK IF AT COL 72   A38781* 16140000
A6E36    LA    @F,1                                               0458  16150000
         A     @F,232(0,@5)                                       0458  16160000
         CR    @F,@8                                              0458  16170000
         BC    04,@9DB                                            0458  16180000
*                 IF R8 = COUNTER+1     /* POINTER JUST AT COL72A38781* 16190000
*                    THEN DO ;          /* CHECK IF CONTINUATIONA38781* 16200000
         LA    @F,1                                               0460  16210000
         A     @F,232(0,@5)                                       0460  16220000
         CR    @F,@8                                              0460  16230000
         BC    07,@9DA                                            0460  16240000
*                       IF R8 -> INBUF(1) ¬= ' '  /* REQUIRED   A38781* 16250000
*                          THEN DO ;    /* COMMENT CONTINUATION A38781* 16260000
         CLI   0(@8),C' '                                         0462  16270000
         BC    08,@9D9                                            0462  16280000
*                             CRCSW = ON ; /* CREATE CONT.SW. ONA38781* 16290000
         MVC   554(1,@5),ON                                       0464  16300000
*                             COMCSW = ON ; /*CREATE COMMENT SW A38781* 16310000
         MVC   565(1,@5),ON                                       0465  16320000
*                             GO TO RETURN2 ; /* READ NEXT CARD A38781* 16330000
         BC    15,RETURN2                                         0466  16340000
*                       END ;           /* END OF CONT. CHECK   A38781* 16350000
*                       GO TO CREATE ;  /* NO CONT.SO END CREATEA38781* 16360000
*                 END ;                 /* NOT IN COL72,BUT LESSA38781* 16370000
*                 GO TO CARDSCAN ;      /* THEREFORE GO ON SCANNING   * 16380000
*                                      /* CREATE CARD           A38781* 16390000
*           END ;                       /* POINTER PAST COL 72  A38781* 16400000
*  A6E4:     MS = 21                /*PARAMETER EXTENDS INTO COL 72.*/; 16410000
@9DB     EQU   *                                                  0472  16420000
A6E4     LA    @F,21                                              0472  16430000
         STH   @F,406(0,@5)                                       0472  16440000
*         GO TO ERRORF;                                                 16450000
         BC    15,ERRORF                                          0473  16460000
*  A6E5:                                                                16470000
*                    /************************************************* 16480000
*                    /**  FILL CHAR. IS HEX.                          * 16490000
*                    /**    EACH CHAR. IS TESTED FOR VALIDITY AND THEN* 16500000
*                    /**     IS CONVERTED TO HEX.                     * 16510000
*                    /************************************************* 16520000
*                                   /*HEX FORMAT. TEST IF QUOTE.*/      16530000
*         IF INBUF(2) ¬= '''' THEN GO TO MSG3;                          16540000
A6E5     CLI   1(@9),C''''                                        0474  16550000
         BC    07,MSG3                                            0475  16560000
*                                   /*TEST IF QUOTE.*/                  16570000
*         IF INBUF(5) ¬= '''' THEN GO TO MSG3;                          16580000
         CLI   4(@9),C''''                                        0476  16590000
         BC    07,MSG3                                            0477  16600000
*                                   /*SET FIRSTSW. */                   16610000
*            FIRSTSW = ON;                                              16620000
         MVC   637(1,@5),ON                                       0478  16630000
*                                   /*STEP CARD COL PTR TO 1ST HEX CHAR 16640000
*            R9 = R9 + 2;                                               16650000
         AH    @9,@D11                                            0479  16660000
*                                   /*TEST IF CHAR IS LT A '0'. */      16670000
*  A6E52: IF INBUF(1) < '0' THEN GO TO A6E6;                            16680000
A6E52    CLI   0(@9),C'0'                                         0480  16690000
         BC    04,A6E6                                            0481  16700000
*                                   /*TEST IF CHAR IS GT A '9'. */      16710000
*         IF INBUF(1) > '9' THEN GO TO MSG3;                            16720000
         CLI   0(@9),C'9'                                         0482  16730000
         BC    02,MSG3                                            0483  16740000
*                                   /*SET R6 TO LO-ORDER DIGIT OF CHAR. 16750000
*            R6 = INBUF(1) & '0F'X;                                     16760000
         LA    @F,X'0F'                                           0484  16770000
         SR    @0,@0                                              0484  16780000
         IC    @0,0(0,@9)                                         0484  16790000
         NR    @F,@0                                              0484  16800000
         LR    @6,@F                                              0484  16810000
*                                   /*TEST IF FIRSTSW IS ON. */         16820000
*  A6E53: IF FIRSTSW = ON THEN DO;                                      16830000
A6E53    CLC   637(1,@5),ON                                       0485  16840000
         BC    07,@9D8                                            0485  16850000
*                                   /*TURN OFF FIRSTSW. */              16860000
*            FIRSTSW = OFF;                                             16870000
         MVC   637(1,@5),OFF                                      0487  16880000
*                                   /*SHIFT DIGIT LEFT 4 BITS. */       16890000
*            R6 = R6 * 16;                                              16900000
         SLA   @6,4                                               0488  16910000
*                                   /*PUT DIGIT IN CREATE ENTRY. */     16920000
*            CURCRTE -> FILLCH = R6;                                    16930000
         L     @1,316(0,@5)                                       0489  16940000
         STC   @6,20(0,@1)                                        0489  16950000
*                                   /*STEP CARD COL PTR. */             16960000
*            R9 = R9 + 1;                                               16970000
         AH    @9,@D2                                             0490  16980000
*                                   /*LOOP BACK TO PROCESS 2ND DIGIT. * 16990000
*         GO TO A6E52;                                                  17000000
         BC    15,A6E52                                           0491  17010000
*         END;                                                          17020000
*                                   /*PUT 2ND DIGIT IN CREATE ENTRY. */ 17030000
*            CURCRTE -> FILLCH = CURCRTE -> FILLCH | R6;                17040000
@9D8     LR    @F,@6                                              0493  17050000
         L     @1,316(0,@5)                                       0493  17060000
         SR    @0,@0                                              0493  17070000
         IC    @0,20(0,@1)                                        0493  17080000
         OR    @F,@0                                              0493  17090000
         STC   @F,20(0,@1)                                        0493  17100000
*                                   /*STEP CARD COL PTR TO DELIMITER */ 17110000
*                                   /* FOLLOWING FILL PARAMETER.     */ 17120000
*            R8 = R9 + 2;                                               17130000
         LA    @8,2                                               0494  17140000
         AR    @8,@9                                              0494  17150000
*                                   /*HEX FILL HAS BEEN PROCESSED. */   17160000
*         GO TO A6E36;                                                  17170000
         BC    15,A6E36                                           0495  17180000
*                                   /*TEST IF CHAR IS LT AN 'A'. */     17190000
*  A6E6:  IF INBUF(1) < 'A' THEN GO TO MSG3;                            17200000
A6E6     CLI   0(@9),C'A'                                         0496  17210000
         BC    04,MSG3                                            0497  17220000
*                                   /*TEST IF CHAR IS GT AN 'F'. */     17230000
*         IF INBUF(1) > 'F' THEN GO TO MSG3;                            17240000
         CLI   0(@9),C'F'                                         0498  17250000
         BC    02,MSG3                                            0499  17260000
*                                   /*SET R6 TO LO-ORDER DIGIT OF CHAR. 17270000
*            R6 = INBUF(1) & '0F'X;                                     17280000
         LA    @F,X'0F'                                           0500  17290000
         SR    @0,@0                                              0500  17300000
         IC    @0,0(0,@9)                                         0500  17310000
         NR    @F,@0                                              0500  17320000
         LR    @6,@F                                              0500  17330000
*                                   /*ADD 9 TO OBTAIN HEX EQUIVALENCE.  17340000
*            R6 = R6 + 9;                                               17350000
         AH    @6,@D4                                             0501  17360000
*         GO TO A6E53;                                                  17370000
         BC    15,A6E53                                           0502  17380000
* /******************************************************************** 17390000
* /**     PROCESS INPUT KEYWORD.                                      * 17400000
* /**        ENTRY - R9 POINTS TO START OF KEYWORD.                   * 17410000
* /**        EXIT  - R8 POINTS TO DELIMITER FOLLOWING DDNAME PARAMETER* 17420000
* /**        FORMAT - INPUT=DDNAME OR                                 * 17430000
* /**                       =SYSIN IMPLIES A $$$E INPUT DELIMETER OR  * 17440000
* /**                      =SYSIN(DDDD) EXPLICIT 1 TO 4 CHAR DELIMITER* 17450000
* /******************************************************************** 17460000
*  A6F1:;                                                               17470000
*                                   /*ADVANCE COLUMN POINTER TO START * 17480000
*                                   /* OF PARAMETER.                  * 17490000
*            R9 = R9 + 6;                                               17500000
A6F1     AH    @9,@D1                                             0504  17510000
*                                   /*GO TO SCAN OUT PARAMETER.*/       17520000
*         CALL SPSCAN;                                                  17530000
         BAL   @E,SPSCAN                                          0505  17540000
*                                   /*TEST IF LENGTH OF DDNAME IS GT */ 17550000
*                                   /* 8 CHARS.                      */ 17560000
*         IF R7 > 8 THEN DO;                                            17570000
         CH    @7,@D10                                            0506  17580000
         BC    12,@9D7                                            0506  17590000
*                                   /*DDNAME IS TOO LONG.*/             17600000
*            MS = 12                /*SET MSG 12.        */;            17610000
         LA    @F,12                                              0508  17620000
         STH   @F,406(0,@5)                                       0508  17630000
*         GO TO ERRORF;                                                 17640000
         BC    15,ERRORF                                          0509  17650000
*         END;                                                          17660000
*                                   /*MOVE DDNAME INTO 'Q' FOR COMPARE. 17670000
*            Q = INBUF(1:R7);                                           17680000
@9D7     LR    @1,@7                                              0511  17690000
         BCTR  @1,0                                               0511  17700000
         LR    @E,@9                                              0511  17710000
         LA    @A,216(0,@5)                                       0511  17720000
         MVI   0(@A),C' '                                         0511  17730000
         MVC   1(015,@A),0(@A)                                    0511  17740000
         EX    @1,@MVC                                            0511  17750000
*                                   /*TEST IF DDNAME IS 'SYSIN'.*/      17760000
*         IF Q(1:8) = 'SYSIN   ' THEN GO TO A6F2;                       17770000
         CLC   216(8,@5),@C24                                     0512  17780000
         BC    08,A6F2                                            0513  17790000
*                    /************************************************* 17800000
*                    /**  DDNAME IS NOT 'SYSIN'. SCAN ALL INPUT DCB'S * 17810000
*                    /**    FOR AN EQUAL DDNAME. ADDRESS OF DCB IS    * 17820000
*                    /**    THEN STORED IN THE CREATE ENTRY.          * 17830000
*                    /************************************************* 17840000
*                                   /*SET 'DCBPTR' TO ADDRESS OF FIRST  17850000
*                                   /* INPUT DCB.                       17860000
*            DCBPTR = FIRSTGMI;                                         17870000
         MVC   300(4,@5),392(@5)                                  0514  17880000
*                                   /*TEST IF NO INPUT DCB'S.     */    17890000
*                                   /*IF NONE, GO TO ISSUE MSG 4. */    17900000
*         IF DCBPTR = 0 THEN GO TO A6F25;                               17910000
         SR    @F,@F                                              0515  17920000
         C     @F,300(0,@5)                                       0515  17930000
         BC    08,A6F25                                           0516  17940000
*                                   /*TEST IF DDNAME ON CREATE CARD IS  17950000
*                                   /* EQUAL TO DDNAME IN THIS INPUT    17960000
*                                   /* DCB.                             17970000
*  A6F3:  IF Q(1:8) = DDNAME1(1:8) THEN DO;                             17980000
A6F3     L     @1,300(0,@5)                                       0517  17990000
         CLC   216(8,@5),260(@1)                                  0517  18000000
         BC    07,@9D6                                            0517  18010000
*                                   /*PUT ADDRESS OF INPUT DCB IN */    18020000
*                                   /* CREATE ENTRY.              */    18030000
*            CURCRTE -> IDCBPTR = DCBPTR;                               18040000
         L     @2,316(0,@5)                                       0519  18050000
         MVC   8(4,@2),300(@5)                                    0519  18060000
*                                   /*DDNAME KEYWORD HAS BEEN PROCESSED 18070000
*                                   /*GO TO SCAN OUT NEXT KEYWORD.      18080000
*         GO TO CARDSCAN;                                               18090000
         BC    15,CARDSCAN                                        0520  18100000
*         END;                                                          18110000
*                                   /*DDNAMES AREN'T EQUAL.*/           18120000
*                                   /*TEST IF PTR TO NEXT INPUT DCB IS  18130000
*                                   /* 0.                               18140000
*         IF NEXTDCB = 0 THEN DO;                                       18150000
@9D6     SR    @F,@F                                              0522  18160000
         L     @1,300(0,@5)                                       0522  18170000
         C     @F,256(0,@1)                                       0522  18180000
         BC    07,@9D5                                            0522  18190000
*                                   /*DDNAME ON CREATE CARD WASN'T */   18200000
*                                   /* FOUND IN INPUT DCB'S.       */   18210000
*                                   /*SET MSG 4.                   */   18220000
*  A6F25:    MS = 4;                                                    18230000
A6F25    LA    @F,4                                               0524  18240000
         STH   @F,406(0,@5)                                       0524  18250000
*         GO TO ERRORF;                                                 18260000
         BC    15,ERRORF                                          0525  18270000
*         END;                                                          18280000
*                                   /*SET 'DCBPTR' TO ADDRESS OF NEXT * 18290000
*                                   /* INPUT DCB.                     * 18300000
*            DCBPTR = NEXTDCB;                                          18310000
@9D5     L     @1,300(0,@5)                                       0527  18320000
         MVC   300(4,@5),256(@1)                                  0527  18330000
*                                   /*LOOP BACK TO TEST NEXT INPUT DCB. 18340000
*         GO TO A6F3;                                                   18350000
         BC    15,A6F3                                            0528  18360000
*                    /************************************************* 18370000
*                    /**  DDNAME IS 'SYSIN'.  ADDRESS OF SYSIN DCB    * 18380000
*                    /**    WHICH RESIDES IN 'COMMON' AREA IS STORED  * 18390000
*                    /**    IN THE CREATE ENTRY.                      * 18400000
*                    /************************************************* 18410000
*                                   /*STORE ADR OF SYSIN DCB IN CREATE  18420000
*                                   /* ENTRY.                           18430000
*  A6F2:     CURCRTE -> IDCBPTR = ADDR(SYSI);                           18440000
A6F2     LA    @F,116(0,@5)                                       0529  18450000
         L     @1,316(0,@5)                                       0529  18460000
         ST    @F,8(0,@1)                                         0529  18470000
*                                   /*TEST IF LEFT  PAREND FOLLOWS */   18480000
*                                   /* DDNAME.                     */   18490000
*       IF R8 -> INBUF(1) ¬= '(' THEN DO;                               18500000
         CLI   0(@8),C'('                                         0530  18510000
         BC    08,@9D4                                            0530  18520000
*                              /*************************************** 18530000
*                              /** NO EXPLICIT SYSIN DELIMITER.       * 18540000
*                              /*************************************** 18550000
*                                   /*SET DELIMITER TO DEFAULT OF  */   18560000
*                                   /* '$$$E'                      */   18570000
*            DELIM = '$$$E';                                            18580000
         MVC   344(4,@5),@C25                                     0532  18590000
         BC    15,@9D3                                            0534  18600000
*         END;                                                          18610000
*                              /*************************************** 18620000
*                              /** THERE IS A SYSIN DELIMITER SPEC-   * 18630000
*                              /**  IFIED.  DELIMITER IS SCANNED AND  * 18640000
*                              /**  SAVED IN 'DELIM'.                 * 18650000
*                              /*************************************** 18660000
*         ELSE DO                   /*SET R9 TO START OF DELIMITER.*/;  18670000
*            R9 = R8 + 1;                                               18680000
@9D4     LA    @9,1                                               0535  18690000
         AR    @9,@8                                              0535  18700000
*                                   /*CALL SPSCAN TO SCAN OUT DELIMITER 18710000
*         CALL SPSCAN;                                                  18720000
         BAL   @E,SPSCAN                                          0536  18730000
*                                   /*TEST IF LENGTH OF DELIMITER IS */ 18740000
*                                   /* GT 4 CHARACTERS.              */ 18750000
*         IF R7 > 4 THEN DO;                                            18760000
         CH    @7,@D7                                             0537  18770000
*                                   /*DELIMITER IS TOO LONG.*/          18780000
*                                   /*GO TO SET MSG 3. */               18790000
*         GO TO MSG3;                                                   18800000
         BC    03,MSG3                                            0539  18810000
*         END;                                                          18820000
*                                   /*MOVE DELIMITER TO 'DELIM'.*/      18830000
*            DELIM = INBUF(1:R7);                                       18840000
@9D2     LR    @1,@7                                              0541  18850000
         BCTR  @1,0                                               0541  18860000
         LR    @E,@9                                              0541  18870000
         LA    @A,344(0,@5)                                       0541  18880000
         MVI   0(@A),C' '                                         0541  18890000
         MVC   1(003,@A),0(@A)                                    0541  18900000
         EX    @1,@MVC                                            0541  18910000
*                                   /*POINT TO COLUMN FOLLOWING RIGHT * 18920000
*                                   /* PAREND.                        * 18930000
*            R8 = R8 + 1;                                               18940000
         AH    @8,@D2                                             0542  18950000
*         END;                                                          18960000
*                                   /*DDNAME KEYWORD HAS BEEN PROCESSED 18970000
*                                   /*GO TO SCAN OUT NEXT KEYWORD.      18980000
*         GO TO CARDSCAN;                                               18990000
         BC    15,CARDSCAN                                        0544  19000000
* /******************************************************************** 19010000
* /**    PROCESS EXIT KEYWORD.                                        * 19020000
* /**     THIS SECTION WILL SCAN OUT THE NAME OF THE USER'S EXIT      * 19030000
* /**      ROUTINE AND LOAD THAT ROUTINE INTO STORAGE. THE ADDRESS OF * 19040000
* /**      THE ROUTINE WILL BE IN THE CREATE ENTRY.                   * 19050000
* /**      IF THE USER'S EXIT ROUTINE IS NOT IN THE LIBRARY, THE LOAD * 19060000
* /**      MACRO WILL ABEND.                                          * 19070000
* /**       ENTRY - R9 POINTS TO START OF KEYWORD.                    * 19080000
* /**       EXIT  - R8 POINTS TO DELIMETER FOLLOWING EXIT NAME.       * 19090000
* /**       FORMAT - EXIT=NAME  1 TO 8 A/N CHARACTERS.                * 19100000
* /******************************************************************** 19110000
*  A6G1:;                                                               19120000
*                                   /*ADVANCE COLUMN POINTER TO START*/ 19130000
*                                   /* OF PARAMETER.                 */ 19140000
*            R9 = R9 + 5;                                               19150000
A6G1     AH    @9,@D5                                             0546  19160000
*                                   /*GO TO SCAN OUT PARAMETER.*/       19170000
*         CALL SPSCAN;                                                  19180000
         BAL   @E,SPSCAN                                          0547  19190000
*                                   /*TEST IF EXITNAME IS GT 8 BYTES.*/ 19200000
*         IF R7 > 8 THEN DO;                                            19210000
         CH    @7,@D10                                            0548  19220000
         BC    12,@9D1                                            0548  19230000
*                                   /*EXIT NAME IS GT 8 CHARS. */       19240000
*                                   /*SET MSG 12.              */       19250000
*            MS = 12;                                                   19260000
         LA    @F,12                                              0550  19270000
         STH   @F,406(0,@5)                                       0550  19280000
*         GO TO ERRORF;                                                 19290000
         BC    15,ERRORF                                          0551  19300000
*         END;                                                          19310000
*                    /************************************************* 19320000
*                    /**  THIS SECTION WILL GETMAIN 72 BYTES FOR AN   * 19330000
*                    /**    INITIAL EXIT NAME TABLE OR FOR AN ADDIT-  * 19340000
*                    /**    IONAL TABLE IF NECESSARY.                 * 19350000
*                    /************************************************* 19360000
*                                   /*TEST IF EXITSW IS OFF. */         19370000
*         IF EXITSW = OFF THEN GO TO A6G2;                              19380000
@9D1     CLC   555(1,@5),OFF                                      0553  19390000
         BC    08,A6G2                                            0554  19400000
*                                   /*TEST IF ENOUGH ROOM IN EXITNAME * 19410000
*                                   /* TABLE FOR NEW ENTRY.           * 19420000
*         IF CUREXIT + 8 => EXITGM + 68 THEN GO TO A6G2;                19430000
         LA    @F,8                                               0555  19440000
         A     @F,340(0,@5)                                       0555  19450000
         ST    @F,@T1                                             0555  19460000
         LA    @F,68                                              0555  19470000
         A     @F,336(0,@5)                                       0555  19480000
         C     @F,@T1                                             0555  19490000
         BC    12,A6G2                                            0556  19500000
*                                   /*POINT TO NEXT EXITNAME ENTRY.*/   19510000
*            CUREXIT = CUREXIT + 8;                                     19520000
         LA    @F,8                                               0557  19530000
         A     @F,340(0,@5)                                       0557  19540000
         ST    @F,340(0,@5)                                       0557  19550000
*         GO TO A6G5;                                                   19560000
         BC    15,A6G5                                            0558  19570000
*                                   /*ISSUE A GM FOR 72 BYTES FOR */    19580000
*                                   /* INITIAL EXITNAME TABLE.    */    19590000
*                                   /*PUT LENGTH IN GM PARAMETER LIST.  19600000
*  A6G2:     GLENGTH = 72;                                              19610000
A6G2     LA    @F,72                                              0559  19620000
         ST    @F,364(0,@5)                                       0559  19630000
*                                   /*GO TO GETMAIN ROUTINE. */         19640000
*         CALL GETMAIN;                                                 19650000
         BAL   @E,GETMAIN                                         0560  19660000
*                                   /*BASE POINTER FOR 'AREA'.*/        19670000
*            R4 = GCADDR;                                               19680000
         L     @4,376(0,@5)                                       0561  19690000
*                                   /*CLEAR GETMAIN AREA.*/             19700000
*            AREA(1) = '0'X;                                            19710000
         MVI   0(@4),X'00'                                        0562  19720000
*            AREA(2:72) = AREA(1:71);                                   19730000
         MVC   1(71,@4),0(@4)                                     0563  19740000
*                                   /*TEST IF EXITSW IS OFF. */         19750000
*         IF EXITSW = OFF THEN DO;                                      19760000
         CLC   555(1,@5),OFF                                      0564  19770000
         BC    07,@9D0                                            0564  19780000
*                                   /*EXITNAME TABLE PTR = ADR OF GM.*/ 19790000
*            EXITTAB = GCADDR;                                          19800000
         MVC   332(4,@5),376(@5)                                  0566  19810000
*                                   /*TURN ON EXITSW. */                19820000
*            EXITSW = ON;                                               19830000
         MVC   555(1,@5),ON                                       0567  19840000
         BC    15,@9CF                                            0569  19850000
*         END;                                                          19860000
*         ELSE DO;                                                      19870000
*                                   /*CHAIN PREVIOUS EXITNAME TABLE TO  19880000
*                                   /* NEW ONE.                         19890000
*            EXITGM -> NXTEXGM = GCADDR;                                19900000
@9D0     L     @1,336(0,@5)                                       0570  19910000
         MVC   0(4,@1),376(@5)                                    0570  19920000
*         END;                                                          19930000
*                                   /*SET CURRENT EXITNAME PTR TO ADR * 19940000
*                                   /* OF GETMAIN + 4.                * 19950000
*            CUREXIT = GCADDR + 4;                                      19960000
@9CF     LA    @F,4                                               0572  19970000
         A     @F,376(0,@5)                                       0572  19980000
         ST    @F,340(0,@5)                                       0572  19990000
*                                   /*SET CURRENT EXITNAME GETMAIN TO * 20000000
*                                   /* ADR OF GETMAIN.                * 20010000
*            EXITGM = GCADDR;                                           20020000
         MVC   336(4,@5),376(@5)                                  0573  20030000
*                    /************************************************* 20040000
*                    /**  THIS SECTION WILL MOVE THE USER'S EXIT      * 20050000
*                    /**    ROUTINE NAME TO THE EXIT NAME TABLE. IT   * 20060000
*                    /**    THEN LOADS THE USER'S ROUTINE INTO STORAGE* 20070000
*                    /************************************************* 20080000
*                                   /*MOVE USER'S EXIT ROUTINE NAME */  20090000
*                                   /* INTO EXITNAME TABLE.         */  20100000
*  A6G5:     CUREXIT -> EXITNAME = INBUF(1:R7);                         20110000
A6G5     LR    @1,@7                                              0574  20120000
         BCTR  @1,0                                               0574  20130000
         LR    @E,@9                                              0574  20140000
         L     @2,340(0,@5)                                       0574  20150000
         LR    @A,@2                                              0574  20160000
         MVI   0(@A),C' '                                         0574  20170000
         MVC   1(007,@A),0(@A)                                    0574  20180000
         EX    @1,@MVC                                            0574  20190000
*                                   /*POINT TO 'EXITNAME'.*/            20200000
*            R6 = CUREXIT;                                              20210000
         L     @6,340(0,@5)                                       0575  20220000
*                                   /*LOAD USER'S EXIT ROUTINE. ADDRESS 20230000
*                                   /* OF ROUTINE IS RETURNED IN REG 0. 20240000
*         GEN( LOAD  EPLOC=(6));                                        20250000
          LOAD  EPLOC=(6)                                               20260000
         DS    0H                                                       20270000
*                                   /*STORE EXIT ADR IN CREATE ENTRY.*/ 20280000
*            CURCRTE -> EXITADR = R0;                                   20290000
         L     @1,316(0,@5)                                       0577  20300000
         ST    @0,12(0,@1)                                        0577  20310000
*                                   /*EXIT KEYWORD HAS BEEN PROCESSED*/ 20320000
*                                   /* GO TO SCAN OUT NEXT KEYWORD.  */ 20330000
*         GO TO CARDSCAN;                                               20340000
         BC    15,CARDSCAN                                        0578  20350000
* /******************************************************************** 20360000
* /** SCAN NEXT KEYWORD - PREVIOUS KEYWORD HAS BEEN PROCESSED. THIS   * 20370000
* /**           SECTION WILL SCAN FOR DELIMITER FOLLOWING PREVIOUS    * 20380000
* /**           KEYWORD. IT WILL CHECK FOR OPERAND CONTINUATION OR    * 20390000
* /**           COMMENTS CONTINUATION AND IF SO, GO TO IEBDG TO READ  * 20400000
* /**           THE NEXT CARD.                                        * 20410000
* /**      ENTRY - R8 POINTS TO DELIMITER FOLLOWING LAST PARAMETER    * 20420000
* /**                THAT WAS PROCESSED.                              * 20430000
* /**      EXIT - TO KEYWORD SCAN(KEYSCAN)                            * 20440000
* /**             R9 POINTS TO START OF NEXT KEYWORD TO BE PROCESSED. * 20450000
* /******************************************************************** 20460000
*  CARDSCAN:;                                                           20470000
*                                   /*SET R9 = R8. R8 POINTS TO DELIMIT 20480000
*                                   /* ER FOLLOWING PARAMETER.          20490000
*            R9 = R8;                                                   20500000
CARDSCAN LR    @9,@8                                              0580  20510000
*                                   /*TEST IF COLUMN IS BLANK.*/        20520000
*         IF INBUF(1) = ' ' THEN GO TO A6P01;                           20530000
         CLI   0(@9),C' '                                         0581  20540000
         BC    08,A6P01                                           0582  20550000
*                                   /*TEST IF COLUMN IS A COMMA.*/      20560000
*         IF INBUF(1) = ',' THEN GO TO A6P1;                            20570000
         CLI   0(@9),C','                                         0583  20580000
         BC    08,A6P1                                            0584  20590000
*                                   /*DELIMETER FOLLOWING A COMPLETE */ 20600000
*                                   /* PARAMETER IS NOT A BLANK OR   */ 20610000
*                                   /* COMMA.                        */ 20620000
*        IF R9 = COUNTER THEN GO TO A6P2 ; /* CONTINUATION     A38710 * 20630000
         C     @9,232(0,@5)                                       0585  20640000
         BC    08,A6P2                                            0586  20650000
*                                   /*GO TO ISSUE MESSAGE NO. 3.     */ 20660000
*         GO TO MSG3;                                                   20670000
         BC    15,MSG3                                            0587  20680000
*  A6P1:  IF R9 = COUNTER THEN DO;                                      20690000
A6P1     C     @9,232(0,@5)                                       0588  20700000
         BC    07,@9CE                                            0588  20710000
*                                   /*TURN ON CREATE CONTINUE SW.*/     20720000
*  A6P2:     CRCSW = ON;                                                20730000
A6P2     MVC   554(1,@5),ON                                       0590  20740000
*                                   /*GO TO IEBDG TO READ CREATE */     20750000
*                                   /* CONTINUATION CARD.        */     20760000
*         GO TO RETURN2;                                                20770000
         BC    15,RETURN2                                         0591  20780000
*         END;                                                          20790000
*                                   /*ADVANCE CARD COLUMN PTR.*/        20800000
*            R9 = R9 + 1;                                               20810000
@9CE     AH    @9,@D2                                             0593  20820000
*                                   /*TEST IF COLUMN IS BLANK.*/        20830000
*         IF INBUF(1) = ' ' THEN GO TO A6P2;                            20840000
         CLI   0(@9),C' '                                         0594  20850000
         BC    08,A6P2                                            0595  20860000
*                                   /*READY TO PROCESS NEXT KEYWORD.*/  20870000
*         GO TO KEYSCAN;                                                20880000
         BC    15,KEYSCAN                                         0596  20890000
*                    /************************************************* 20900000
*                    /**  AT THIS POINT ALL OPERAND KEYWORDS HAVE     * 20910000
*                    /**    BEEN PROCESSED. THERE ARE COMMENTS CONTIN-* 20920000
*                    /**    UATION ON ANOTHER CARD IF COL. 72 IS NOT  * 20930000
*                    /**    BLANK.                                    * 20940000
*                    /************************************************* 20950000
*                                   /*TEST IF COL 72 NOT BLANK.*/       20960000
*  A6P01: IF COUNTER -> AREA(2) ¬= ' ' THEN DO;                         20970000
A6P01    L     @1,232(0,@5)                                       0597  20980000
         CLI   1(@1),C' '                                         0597  20990000
         BC    08,@9CD                                            0597  21000000
*                                   /*TURN ON CREATE CONTINUE SW. */    21010000
*            CRCSW = ON;                                                21020000
         MVC   554(1,@5),ON                                       0599  21030000
*            COMCSW = ON            /*TURN ON COMMENTS CONT. SW.*/;     21040000
         MVC   565(1,@5),ON                                       0600  21050000
*                                   /*GO TO IEBDG TO READ COMMENTS */   21060000
*                                   /*CONTINUATION CARD.          */    21070000
*         GO TO RETURN2;                                                21080000
         BC    15,RETURN2                                         0601  21090000
*         END;                                                          21100000
*                    /************************************************* 21110000
*                    /**  ALL CONTINUATION CARDS THAT ARE PRESENT     * 21120000
*                    /**    HAVE BEEN PROCESSED.  SET DEFAULTS FOR    * 21130000
*                    /**    QUANTITY AND FILL IF NOT SPECIFIED ON THE * 21140000
*                    /**    CREATE CARD.                              * 21150000
*                    /************************************************* 21160000
*                                   /*TEST IF QUANTITY = 0.*/           21170000
*  CREATE:IF CURCRTE -> QUAN = 0 THEN                                   21180000
@9CD     EQU   *                                                  0603  21190000
CREATE   L     @1,316(0,@5)                                       0603  21200000
         CLC   4(4,@1),@D9                                        0603  21210000
         BC    07,@9CC                                            0603  21220000
*                                   /*TEST IF NO INPUT DCB. */          21230000
*         IF CURCRTE -> IDCBPTR = 0 THEN                                21240000
         SR    @F,@F                                              0604  21250000
         C     @F,8(0,@1)                                         0604  21260000
         BC    07,@9CB                                            0604  21270000
*                                   /*SET QUANTITY = 1        */        21280000
*            CURCRTE -> QUAN = 1;                                       21290000
         MVC   4(4,@1),@D14                                       0605  21300000
*                                   /*DECREMENT NO. OF CREATE CARDS */  21310000
*                                   /* REMAINING.                   */  21320000
*            CREATENO = CREATENO - 1;                                   21330000
@9CB     EQU   *                                                  0606  21340000
@9CC     LH    @F,@D6                                             0606  21350000
         AH    @F,18(0,@5)                                        0606  21360000
         STH   @F,18(0,@5)                                        0606  21370000
*                                   /*TEST IF MORE CARDS IN A REPEAT */ 21380000
*                                   /* GROUP.                        */ 21390000
*         IF CREATENO > 0 THEN DO;                                      21400000
         SR    @F,@F                                              0607  21410000
         CH    @F,18(0,@5)                                        0607  21420000
         BC    10,@9CA                                            0607  21430000
*                                   /*GO TO IEBDG TO READ NEXT CREATE*/ 21440000
*                                   /* CARD.                         */ 21450000
*         GO TO RETURN2;                                                21460000
         BC    15,RETURN2                                         0609  21470000
*         END;                                                          21480000
* /******************************************************************** 21490000
* /**  LINK TO IEBCREAT MODULE -  CONTROL IS PASSED TO IEBCREAT TO    * 21500000
* /**           WRITE THE OUTPUT RECORDS FOR A SINGLE CREATE CARD OR  * 21510000
* /**           FOR MULTIPLE CREATE CARDS IF A REPEAT GROUP.          * 21520000
* /******************************************************************** 21530000
*                                   /*TURN OFF 'REPEATSW' TO INDICATE * 21540000
*                                  /* REPEAT GROUP IS COMPLETED.     */ 21550000
*           REPEATSW = OFF;                                             21560000
@9CA     MVC   578(1,@5),OFF                                      0611  21570000
*  LINK:     GEN( LINK  EP=IEBCREAT);                                   21580000
LINK      LINK  EP=IEBCREAT                                             21590000
         DS    0H                                                       21600000
* /******************************************************************** 21610000
* /**  RETURN FROM IEBCREAT MODULE.                                   * 21620000
* /******************************************************************** 21630000
*         GO TO RETURN2;                                                21640000
* /******************************************************************** 21650000
* /**  NORMAL RETURN.                                                 * 21660000
* /**     RETURN TO MODULE IEBDG.                                     * 21670000
* /******************************************************************** 21680000
*                                   /*RETURN TO IEBDG. */               21690000
*  RETURN2: RETURN;                                                     21700000
         BC    15,@EL01                                           0614  21710000
* /******************************************************************** 21720000
* /**   ERROR RETURNS. -  CONTROL IS PASSED TO MODULE IEBCREAT TO     * 21730000
* /**                      TO FREE TABLES. CONTROL IS RETURNED TO     * 21740000
* /**                      MODULE IEBDG TO PRINT THE APPROPRIATE      * 21750000
* /**                      MESSAGE.                                   * 21760000
* /******************************************************************** 21770000
*                                   /*TURN ON ERROR FLAG SW. */         21780000
*  ERRORF:   FLAGSW(1) = '1'B;                                          21790000
ERRORF   OI    566(@5),B'10000000'                                0615  21800000
*                                   /*SET 'EPSW' TO INDICATE ERROR. */  21810000
*  ERROR:    EPSW = 1;                                                  21820000
ERROR    MVI   568(@5),1                                          0616  21830000
*                                   /*SET CONDITION CODE TO 8. */       21840000
*            CONCODE = 8;                                               21850000
         LA    @F,8                                               0617  21860000
         STH   @F,306(0,@5)                                       0617  21870000
*                                   /*TURN ON 'NOGO' SWITCH. */         21880000
*            NOGOSW = ON;                                               21890000
         MVC   551(1,@5),ON                                       0618  21900000
*                                   /*GO TO LINK TO IEBCREAT. */        21910000
*         GO TO LINK;                                                   21920000
         BC    15,LINK                                            0619  21930000
* /******************************************************************** 21940000
* /** SPSCAN - THIS SUBROUTINE WILL SCAN OUT A PARAMETER.             * 21950000
* /**           IT SCANS FOR A DELIMITER OF COMMA, BLANK, LEFT PAREND * 21960000
* /**           OR RIGHT PAREND.                                      * 21970000
* /**           IT CHECKS FOR A FIELD LENGTH OF 0, AND IF SO, ISSUES  * 21980000
* /**           MESSAGE #6.                                           * 21990000
* /**      ENTRY - R14 IS LINKAGE REGISTER.                           * 22000000
* /**              R9 POINTS TO START OF PARAMETER.                   * 22010000
* /**      EXIT  - R9 NO CHANGE.                                      * 22020000
* /**              R8 POINTS TO DELIMETER FOLLOWING PARAMETER.        * 22030000
* /**              R7 CONTAINS LENGTH OF PARAMETER.                   * 22040000
* /******************************************************************** 22050000
*  SPSCAN:;                                                             22060000
*                                   /*SAVE REG 14 IN COMMON AREA. */    22070000
*            SAVE14 = R14;                                              22080000
SPSCAN   ST    @E,360(0,@5)                                       0621  22090000
*            R8 = R9                /*INITIALIZE CARD COL PTR.*/;       22100000
         LR    @8,@9                                              0622  22110000
*  A6M11: IF R8 > COUNTER THEN DO;                                      22120000
A6M11    C     @8,232(0,@5)                                       0623  22130000
         BC    12,@9C9                                            0623  22140000
*  MSG21:    MS = 21                /*PARAMETER EXTENDS INTO COL 72.*/; 22150000
MSG21    LA    @F,21                                              0625  22160000
         STH   @F,406(0,@5)                                       0625  22170000
*         GO TO ERRORF;                                                 22180000
         BC    15,ERRORF                                          0626  22190000
*         END;                                                          22200000
*                                   /*TEST IF COMMA.*/                  22210000
*  A6M12: IF PARAM(1) = ',' THEN GO TO A6M13;                           22220000
@9C9     EQU   *                                                  0628  22230000
A6M12    CLI   0(@8),C','                                         0628  22240000
         BC    08,A6M13                                           0629  22250000
*                                   /*TEST IF BLANK.*/                  22260000
*         IF PARAM(1) = ' ' THEN GO TO A6M13;                           22270000
         CLI   0(@8),C' '                                         0630  22280000
         BC    08,A6M13                                           0631  22290000
*                                   /*TEST IF LEFT PAREND.*/            22300000
*         IF PARAM(1) = '(' THEN GO TO A6M13;                           22310000
         CLI   0(@8),C'('                                         0632  22320000
         BC    08,A6M13                                           0633  22330000
*                                   /*TEST IF RIGHT PAREND.*/           22340000
*         IF PARAM(1) = ')' THEN GO TO A6M13;                           22350000
         CLI   0(@8),C')'                                         0634  22360000
         BC    08,A6M13                                           0635  22370000
*            R8 = R8 + 1            /*ADVANCE COLUMN POINTER.*/;        22380000
         AH    @8,@D2                                             0636  22390000
*        IF R8 = COUNTER + 1 THEN DO ;    /* AT COL 72         A38710 * 22400000
         LA    @F,1                                               0637  22410000
         A     @F,232(0,@5)                                       0637  22420000
         CR    @F,@8                                              0637  22430000
         BC    07,@9C8                                            0637  22440000
*              IF R8 -> INBUF(1) ¬= ' ' THEN  /* NO CONT.CHHAR A38710 * 22450000
         CLI   0(@8),C' '                                         0639  22460000
*                   GO TO A6P2 ;                            /* A38710 * 22470000
         BC    07,A6P2                                            0640  22480000
*              END ;                                        /* A38710 * 22490000
*         GO TO A6M11;                                                  22500000
         BC    15,A6M11                                           0642  22510000
*                                   /*CALCULATE LENGTH OF PARAMETER.*/  22520000
*  A6M13:    R7 = R8 - R9;                                              22530000
A6M13    LCR   @7,@9                                              0643  22540000
         AR    @7,@8                                              0643  22550000
*                                   /*TEST IF PARAMETER LENGTH IS 0.*/  22560000
*         IF R7 = 0 THEN DO;                                            22570000
         LTR   @7,@7                                              0644  22580000
*                                   /*PARAMETER LENGTH IS 0. */         22590000
*                                   /*GO TO ISSUE MSG 3.     */         22600000
*         GO TO MSG3;                                                   22610000
         BC    08,MSG3                                            0646  22620000
*         END;                                                          22630000
*                                   /*RESTORE REG 14 FROM COMMON AREA.  22640000
*            R14 = SAVE14;                                              22650000
@9C7     L     @E,360(0,@5)                                       0648  22660000
*                                   /*RETURN TO CALLER.*/               22670000
*         GO TO R14;                                                    22680000
         BCR   15,@E                                              0649  22690000
* /******************************************************************** 22700000
* /** CONVDB - THIS SUBROUTINE WILL PACK A DECIMAL FIELD FROM THE CARD* 22710000
* /**           AND CONVERT IT TO BINARY. IT CHECKS FOR A MAXIMUM     * 22720000
* /**           DECIMAL VALUE OF 2,147,483,647 OR A VALUE OF 0, AND   * 22730000
* /**           IF SO, ISSUES MESSAGE #6.                             * 22740000
* /**      ENTRY - R14 IS LINKAGE REGISTER.                           * 22750000
* /**              R9 POINTS TO START OF PARAMETER.                   * 22760000
* /**              R7 CONTAINS LENGTH OF PARAMETER.                   * 22770000
* /**      EXIT  - R6 CONTAINS CONVERTED BINARY VALUE.                * 22780000
* /**              R7 NO CHANGE.                                      * 22790000
* /**              R9 NO CHANGE.                                      * 22800000
* /******************************************************************** 22810000
*  CONVDB:;                                                             22820000
*  A6N11:                                                               22830000
*                                   /*SAVE REG 14 IN COMMON AREA. */    22840000
*            SAVE14 = R14;                                              22850000
CONVDB   EQU   *                                                  0651  22860000
A6N11    ST    @E,360(0,@5)                                       0651  22870000
*                                   /*TEST IF LENGTH OF VALUE ON CARD * 22880000
*                                  /* IS GT 16 BYTES.                */ 22890000
*        IF R7 > 16 THEN GO TO A6N20;                                   22900000
         CH    @7,@D13                                            0652  22910000
         BC    02,A6N20                                           0653  22920000
*                                  /*PUT LENGTH - 1 IN R6. */           22930000
*            R6 = R7 - 1;                                               22940000
         LH    @6,@D6                                             0654  22950000
         AR    @6,@7                                              0654  22960000
*                                  /*CLEAR 'Q' TO ZEROS. */             22970000
*            Q = Q && Q;                                                22980000
         XC    216(16,@5),216(@5)                                 0655  22990000
*                                  /*MOVE ZONES ONLY OF CHARACTERS ON * 23000000
*                                  /* CARD INTO 'Q'.                  * 23010000
*           GEN( EX  R6,MVZON );                                        23020000
          EX  R6,MVZON                                                  23030000
         DS    0H                                                       23040000
*                              /*************************************** 23050000
*                              /** CHECK CHARS. ON CARD FOR NUMERIC   * 23060000
*                              /**  BY TESTING ALL ZONES FOR AN 'F'.  * 23070000
*                              /*************************************** 23080000
*         IF Q(1:R7) = FOXZEROS(1:R7) THEN GO TO A6N12;                 23090000
         LA    @E,FOXZEROS                                        0657  23100000
         LR    @1,@7                                              0657  23110000
         BCTR  @1,0                                               0657  23120000
         LA    @A,216(0,@5)                                       0657  23130000
         EX    @1,@CLC                                            0657  23140000
         BC    08,A6N12                                           0658  23150000
*                                  /*IF CHARS ARE INVALID ISSUE MSG 3 * 23160000
*         GO TO MSG3;                                                   23170000
         BC    15,MSG3                                            0659  23180000
*                                   /*PACK QUANTITY INTO Q.*/           23190000
*  A6N12:    GEN( EX  R6,PACK);                                         23200000
A6N12     EX  R6,PACK                                                   23210000
         DS    0H                                                       23220000
*                              /*************************************** 23230000
*                              /** IF PACKED DECIMAL PICTURE RETURN   * 23240000
*                              /**  TO CALLER.  PACKED NO. IS IN 'Q'. * 23250000
*                              /*************************************** 23260000
*         IF PICCSW(5) = '1'B THEN GO TO A6N26;                         23270000
         TM    562(@5),B'00001000'                                0661  23280000
         BC    01,A6N26                                           0662  23290000
*                                  /*TEST IF LENGTH GT 10. */           23300000
*        IF R7 > 10 THEN GO TO A6N20;                                   23310000
         CH    @7,@D15                                            0663  23320000
         BC    02,A6N20                                           0664  23330000
*                                   /*TEST IF DECIMAL VALUE GREATER*/   23340000
*                                   /* THAN 2,147,483,647.         */   23350000
*        IF Q(11:16) > '02147483647F'X THEN DO;                         23360000
         CLC   226(6,@5),@X26                                     0665  23370000
         BC    12,@9C6                                            0665  23380000
*  A6N20:   MS = 6;                                                     23390000
A6N20    LA    @F,6                                               0667  23400000
         STH   @F,406(0,@5)                                       0667  23410000
*         GO TO ERRORF;                                                 23420000
         BC    15,ERRORF                                          0668  23430000
*         END;                                                          23440000
*                                   /*CONVERT QUANTITY FROM PACKED DEC. 23450000
*                                   /* TO BINARY, RESULT IN R6.         23460000
*           GEN( CVB  R6,Q+8(R5));                                      23470000
@9C6     EQU   *                                                  0670  23480000
          CVB  R6,Q+8(R5)                                               23490000
         DS    0H                                                       23500000
*                                   /*TEST IF NOT BINARY PICTURE. */    23510000
*         IF PICCSW(6) = '0'B THEN                                      23520000
         TM    562(@5),B'00000100'                                0671  23530000
         BC    05,@9C5                                            0671  23540000
*                                   /*TEST IF VALUE IS 0. IF SO, GO TO  23550000
*                                   /* ISSUE MSG 3.                     23560000
*         IF R6 = 0 THEN GO TO MSG3;                                    23570000
         LTR   @6,@6                                              0672  23580000
         BC    08,MSG3                                            0673  23590000
*                                   /*RESTORE REG 14 FROM COMMON AREA.  23600000
*  A6N26:    R14 = SAVE14;                                              23610000
@9C5     EQU   *                                                  0674  23620000
A6N26    L     @E,360(0,@5)                                       0674  23630000
*                                   /*RETURN TO USER.*/                 23640000
*         GO TO R14;                                                    23650000
         BCR   15,@E                                              0675  23660000
*  MVZON:   GEN( MVZ  Q(1,R5),0(R9));                                   23670000
MVZON     MVZ  Q(1,R5),0(R9)                                            23680000
         DS    0H                                                       23690000
*  PACK:    GEN( PACK  Q(16,R5),0(1,R9));                               23700000
PACK      PACK  Q(16,R5),0(1,R9)                                        23710000
         DS    0H                                                       23720000
* /******************************************************************** 23730000
* /** GETMAIN - THIS SUBROUTINE ISSUES A CONDITIONAL GETMAIN MACRO    * 23740000
* /**            WHICH IS REENTRANT. IT CHECKS FOR AN ERROR RETURN    * 23750000
* /**            CODE FROM THE GETMAIN AND ISSUES MESSAGE 10 IF       * 23760000
* /**            UNSUCCESSFUL.                                        * 23770000
* /**     ENTRY - 'GLENGTH' CONTAINS THE LENGTH TO BE GOTTEN.         * 23780000
* /**            R14 IS LINKAGE REGISTER.                             * 23790000
* /**     EXIT  - 'GCADDR' CONTAINS THE ADDRESS OF THE GOTTEN CORE.   * 23800000
* /******************************************************************** 23810000
*  GETMAIN:;                                                            23820000
*                                   /*SAVE REG 14 IN COMMON AREA. */    23830000
*            SAVE14 = R14;                                              23840000
GETMAIN  ST    @E,360(0,@5)                                       0679  23850000
*                                   /*POINT TO GETMAIN PARAMETER LIST.  23860000
*            R1 = ADDR(GETMLIST);                                       23870000
         LA    @1,364(0,@5)                                       0680  23880000
*                                   /*POINT TO RETURNED GM ADDRESS. */  23890000
*            R2 = ADDR(GCADDR);                                         23900000
         LA    @2,376(0,@5)                                       0681  23910000
*                                   /*ISSUE GETMAIN MACRO         */    23920000
*                                   /*LENGTH VALUE IS ALREADY IN  */    23930000
*                                   /* PARAMETER LIST.            */    23940000
*            GEN( GETMAIN  EC,A=(2),SP=0,MF=(E,(1)));                   23950000
          GETMAIN  EC,A=(2),SP=0,MF=(E,(1))                             23960000
         DS    0H                                                       23970000
*                                   /*TEST IF GETMAIN SUCCESSFUL. */    23980000
*         IF R15 ¬= 0 THEN DO;                                          23990000
         LTR   @F,@F                                              0683  24000000
         BC    08,@9C4                                            0683  24010000
*                                   /*GETMAIN UNSUCCESSFUL. */          24020000
*                                   /*SET MSG 10.           */          24030000
*            MS = 10;                                                   24040000
         LA    @F,10                                              0685  24050000
         STH   @F,406(0,@5)                                       0685  24060000
*         GO TO ERROR;                                                  24070000
         BC    15,ERROR                                           0686  24080000
*         END;                                                          24090000
*                                   /*RESTORE REG 14. */                24100000
*            R14 = SAVE14;                                              24110000
@9C4     L     @E,360(0,@5)                                       0688  24120000
*                                   /*RETURN TO CALLER. */              24130000
*         GO TO R14;                                                    24140000
         BCR   15,@E                                              0689  24150000
*  END IEBCRANL;                                                        24160000
@EL01    L     @D,4(0,@D)                                         0690  24170000
         LR    @1,@C                                              0690  24180000
         L     @0,@SIZ001                                         0690  24190000
         FREEMAIN R,LV=(0),A=(1)                                  0690  24200000
         L     @E,12(0,@D)                                        0690  24210000
         LM    @0,@8,20(@D)                                       0690  24220000
         LM    @A,@C,60(@D)                                       0690  24230000
         BCR   15,@E                                              0690  24240000
@DATA1   EQU   *                                                        24250000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           24260000
@1       EQU   01                                                       24270000
@2       EQU   02                                                       24280000
@3       EQU   03                                                       24290000
@4       EQU   04                                                       24300000
@5       EQU   05                                                       24310000
@6       EQU   06                                                       24320000
@7       EQU   07                                                       24330000
@8       EQU   08                                                       24340000
@9       EQU   09                                                       24350000
@A       EQU   10                                                       24360000
@B       EQU   11                                                       24370000
@C       EQU   12                                                       24380000
@D       EQU   13                                                       24390000
@E       EQU   14                                                       24400000
@F       EQU   15                                                       24410000
@D9      DC    F'0'                                                     24420000
@D14     DC    F'1'                                                     24430000
@D1      DC    H'6'                                                     24440000
@D2      DC    H'1'                                                     24450000
@D3      DC    H'3'                                                     24460000
@D4      DC    H'9'                                                     24470000
@D5      DC    H'5'                                                     24480000
@D6      DC    H'-1'                                                    24490000
@D7      DC    H'4'                                                     24500000
@D8      DC    H'64'                                                    24510000
@D10     DC    H'8'                                                     24520000
@D11     DC    H'2'                                                     24530000
@D12     DC    H'256'                                                   24540000
@D13     DC    H'16'                                                    24550000
@D15     DC    H'10'                                                    24560000
@CLC     CLC   0(1,@A),0(@E)                                            24570000
@MVC     MVC   0(1,@A),0(@E)                                            24580000
         DS    0F                                                       24590000
@SIZ001  DC    AL1(&SPN)                                                24600000
         DC    AL3(@DATEND-@DATD)                                       24610000
         DS    0F                                                       24620000
@C7      DC    C'PICTURE='                                              24630000
@C24     DC    C'SYSIN   '                                              24640000
@C25     DC    C'$$$E'                                                  24650000
@C9      DC    C'INPUT='                                                24660000
@C16     DC    C'P'''                                                   24670000
@C17     DC    C'B'''                                                   24680000
@X26     DC    X'02147483647F'                                          24690000
@C5      DC    C'QUANTITY='                                             24700000
@C6      DC    C'NAME='                                                 24710000
@C8      DC    C'FILL='                                                 24720000
@C10     DC    C'EXIT='                                                 24730000
@C14     DC    C'COPY='                                                 24740000
         DS    0D                                                       24750000
@DATA    EQU   *                                                        24760000
R1       EQU   00000001            FULLWORD INTEGER REGISTER            24770000
R2       EQU   00000002            FULLWORD INTEGER REGISTER            24780000
R3       EQU   00000003            FULLWORD INTEGER REGISTER            24790000
R4       EQU   00000004            FULLWORD POINTER REGISTER            24800000
R5       EQU   00000005            FULLWORD POINTER REGISTER            24810000
R6       EQU   00000006            FULLWORD POINTER REGISTER            24820000
R7       EQU   00000007            FULLWORD POINTER REGISTER            24830000
R8       EQU   00000008            FULLWORD POINTER REGISTER            24840000
R9       EQU   00000009            FULLWORD POINTER REGISTER            24850000
R14      EQU   00000014            FULLWORD POINTER REGISTER            24860000
R15      EQU   00000015            FULLWORD INTEGER REGISTER            24870000
R0       EQU   00000000            FULLWORD INTEGER REGISTER            24880000
COMMON   EQU   00000000            308 BYTE(S) ON DWORD                 24890000
PAGENO   EQU   COMMON+00000000     4 BYTE(S)                            24900000
LINECT   EQU   COMMON+00000004     FULLWORD INTEGER                     24910000
LINECTR  EQU   COMMON+00000008     FULLWORD INTEGER                     24920000
PARM     EQU   COMMON+00000012     FULLWORD POINTER                     24930000
REPEATNO EQU   COMMON+00000016     HALFWORD INTEGER                     24940000
CREATENO EQU   COMMON+00000018     HALFWORD INTEGER                     24950000
SYSP     EQU   COMMON+00000020     96 BYTE(S)                           24960000
SYSI     EQU   COMMON+00000116     96 BYTE(S)                           24970000
Q        EQU   COMMON+00000216     16 BYTE(S) ON DWORD                  24980000
QFILL    EQU   COMMON+00000216     7 BYTE(S)                            24990000
QSIGN    EQU   COMMON+00000223     8 BIT(S)                             25000000
QFILL1   EQU   COMMON+00000224     7 BYTE(S)                            25010000
QSIGN1   EQU   COMMON+00000231     8 BIT(S)                             25020000
COUNTER  EQU   COMMON+00000232     FULLWORD POINTER                     25030000
OPENLIST EQU   COMMON+00000236     8 BYTE(S)                            25040000
OPTBYTE1 EQU   COMMON+00000236     4 BYTE(S)                            25050000
OPTBYTE2 EQU   COMMON+00000240     4 BYTE(S)                            25060000
EXLST    EQU   COMMON+00000244     24 BYTE(S) ON WORD                   25070000
INHDR    EQU   COMMON+00000244     1 BYTE(S)                            25080000
INHDR1   EQU   COMMON+00000245     3  BYTE  POINTER ON WORD+1           25090000
OUTHDR   EQU   COMMON+00000248     1 BYTE(S)                            25100000
OUTHDR1  EQU   COMMON+00000249     3  BYTE  POINTER ON WORD+1           25110000
INTRL    EQU   COMMON+00000252     1 BYTE(S)                            25120000
INTRL1   EQU   COMMON+00000253     3  BYTE  POINTER ON WORD+1           25130000
OUTTRL   EQU   COMMON+00000256     1 BYTE(S)                            25140000
OUTTRL1  EQU   COMMON+00000257     3  BYTE  POINTER ON WORD+1           25150000
EXITDCB  EQU   COMMON+00000260     1 BYTE(S)                            25160000
EXITDCB1 EQU   COMMON+00000261     3  BYTE  POINTER ON WORD+1           25170000
TOTAL    EQU   COMMON+00000264     1 BYTE(S)                            25180000
TOTAL1   EQU   COMMON+00000265     3  BYTE  POINTER ON WORD+1           25190000
EXLST1   EQU   COMMON+00000268     4 BYTE(S) ON WORD                    25200000
EDCB1    EQU   COMMON+00000268     1 BYTE(S)                            25210000
EDCB2    EQU   COMMON+00000269     3  BYTE  POINTER ON WORD+1           25220000
EXLST2   EQU   COMMON+00000272     4 BYTE(S) ON WORD                    25230000
EDCB3    EQU   COMMON+00000272     1 BYTE(S)                            25240000
EDCB4    EQU   COMMON+00000273     3  BYTE  POINTER ON WORD+1           25250000
EXLST3   EQU   COMMON+00000276     4 BYTE(S) ON WORD                    25260000
EDCB5    EQU   COMMON+00000276     1 BYTE(S)                            25270000
EDCB6    EQU   COMMON+00000277     3  BYTE  POINTER ON WORD+1           25280000
DLRECL   EQU   COMMON+00000280     HALFWORD INTEGER                     25290000
DBLKSI   EQU   COMMON+00000282     HALFWORD INTEGER                     25300000
DRECFM   EQU   COMMON+00000284     8 BIT(S)                             25310000
LEFTOVER EQU   COMMON+00000288     FULLWORD INTEGER                     25320000
OFFSET   EQU   COMMON+00000292     FULLWORD POINTER                     25330000
LPTR     EQU   COMMON+00000296     FULLWORD POINTER                     25340000
DCBPTR   EQU   COMMON+00000300     FULLWORD POINTER                     25350000
DUMMY    EQU   COMMON+00000304     FULLWORD POINTER                     25360000
COMMON1  EQU   00000304            236 BYTE(S) ON WORD                  25370000
SAVEMS   EQU   COMMON1+00000000    HALFWORD INTEGER                     25380000
CONCODE  EQU   COMMON1+00000002    HALFWORD INTEGER                     25390000
OUTREC   EQU   COMMON1+00000004    FULLWORD POINTER                     25400000
CRTABPT  EQU   COMMON1+00000008    FULLWORD POINTER                     25410000
CURCRTE  EQU   COMMON1+00000012    FULLWORD POINTER                     25420000
CURCRGM  EQU   COMMON1+00000016    FULLWORD POINTER                     25430000
CURPIC   EQU   COMMON1+00000020    FULLWORD POINTER                     25440000
PICCTR   EQU   COMMON1+00000024    FULLWORD INTEGER                     25450000
EXITTAB  EQU   COMMON1+00000028    FULLWORD POINTER                     25460000
EXITGM   EQU   COMMON1+00000032    FULLWORD POINTER                     25470000
CUREXIT  EQU   COMMON1+00000036    FULLWORD POINTER                     25480000
DELIM    EQU   COMMON1+00000040    4 BYTE(S)                            25490000
RECREM   EQU   COMMON1+00000044    FULLWORD INTEGER                     25500000
CURFD    EQU   COMMON1+00000048    FULLWORD POINTER                     25510000
CUROUT   EQU   COMMON1+00000052    HALFWORD POINTER                     25520000
SAVE14   EQU   COMMON1+00000056    FULLWORD POINTER                     25530000
GETMLIST EQU   COMMON1+00000060    16 BYTE(S) ON WORD                   25540000
GLENGTH  EQU   COMMON1+00000060    FULLWORD INTEGER                     25550000
ADRLIST  EQU   COMMON1+00000064    FULLWORD POINTER                     25560000
IND      EQU   COMMON1+00000068    4 BYTE(S)                            25570000
GCODE    EQU   COMMON1+00000068    1 BYTE(S)                            25580000
SPOOL    EQU   COMMON1+00000069    1 BYTE(S)                            25590000
CCODE    EQU   COMMON1+00000070    2 BYTE(S)                            25600000
GCADDR   EQU   COMMON1+00000072    FULLWORD POINTER                     25610000
FIRSTGMO EQU   COMMON1+00000076    FULLWORD POINTER                     25620000
CURRGMO  EQU   COMMON1+00000080    FULLWORD POINTER                     25630000
LASTGMO  EQU   COMMON1+00000084    FULLWORD POINTER                     25640000
FIRSTGMI EQU   COMMON1+00000088    FULLWORD POINTER                     25650000
CURRGMI  EQU   COMMON1+00000092    FULLWORD POINTER                     25660000
LASTGMI  EQU   COMMON1+00000096    FULLWORD POINTER                     25670000
CONDCODE EQU   COMMON1+00000100    HALFWORD INTEGER                     25680000
MS       EQU   COMMON1+00000102    HALFWORD INTEGER                     25690000
INBUFA1  EQU   COMMON1+00000104    121 BYTE(S)                          25700000
INFILL   EQU   COMMON1+00000104    10 BYTE(S)                           25710000
INBUFA   EQU   COMMON1+00000114    111 BYTE(S)                          25720000
DDPTR    EQU   COMMON1+00000228    FULLWORD POINTER                     25730000
DUMMY1   EQU   COMMON1+00000232    FULLWORD POINTER                     25740000
COMMON2  EQU   00000536            76 BYTE(S) ON WORD                   25750000
SWITCH   EQU   COMMON2+00000000    52 BYTE(S)                           25760000
FDCSW    EQU   COMMON2+00000000    1 BYTE(S)                            25770000
FDNAMESW EQU   COMMON2+00000001    1 BYTE(S)                            25780000
FDPCSW   EQU   COMMON2+00000002    1 BYTE(S)                            25790000
FDFMTSW  EQU   COMMON2+00000003    1 BYTE(S)                            25800000
FDPLSW   EQU   COMMON2+00000004    1 BYTE(S)                            25810000
RANGESW  EQU   COMMON2+00000005    1 BYTE(S)                            25820000
FILLSW   EQU   COMMON2+00000006    1 BYTE(S)                            25830000
REPSW    EQU   COMMON2+00000007    1 BYTE(S)                            25840000
INDEXSW  EQU   COMMON2+00000008    1 BYTE(S)                            25850000
INDNMSW  EQU   COMMON2+00000009    1 BYTE(S)                            25860000
BQUOTESW EQU   COMMON2+00000010    1 BYTE(S)                            25870000
PQUOTESW EQU   COMMON2+00000011    1 BYTE(S)                            25880000
EQUOTESW EQU   COMMON2+00000012    1 BYTE(S)                            25890000
FDSW     EQU   COMMON2+00000013    1 BYTE(S)                            25900000
DSDSW    EQU   COMMON2+00000014    1 BYTE(S)                            25910000
NOGOSW   EQU   COMMON2+00000015    1 BYTE(S)                            25920000
CREATESW EQU   COMMON2+00000016    1 BYTE(S)                            25930000
DSDCSW   EQU   COMMON2+00000017    1 BYTE(S)                            25940000
CRCSW    EQU   COMMON2+00000018    1 BYTE(S)                            25950000
EXITSW   EQU   COMMON2+00000019    1 BYTE(S)                            25960000
EODSTOP  EQU   COMMON2+00000020    1 BYTE(S)                            25970000
DSDNULSW EQU   COMMON2+00000021    1 BYTE(S)                            25980000
DSDORGSW EQU   COMMON2+00000022    1 BYTE(S)                            25990000
DSDDDSW  EQU   COMMON2+00000023    1 BYTE(S)                            26000000
CRTBLK   EQU   COMMON2+00000024    1 BYTE(S)                            26010000
NAMCSW   EQU   COMMON2+00000025    8 BIT(S)                             26020000
PICCSW   EQU   COMMON2+00000026    8 BIT(S)                             26030000
BUFPSW   EQU   COMMON2+00000027    1 BYTE(S)                            26040000
ENDSW    EQU   COMMON2+00000028    1 BYTE(S)                            26050000
COMCSW   EQU   COMMON2+00000029    1 BYTE(S)                            26060000
FLAGSW   EQU   COMMON2+00000030    8 BIT(S)                             26070000
PAGESW   EQU   COMMON2+00000031    1 BYTE(S)                            26080000
EPSW     EQU   COMMON2+00000032    1  BYTE  POINTER                     26090000
SYSISW   EQU   COMMON2+00000033    1 BYTE(S)                            26100000
SYSPSW   EQU   COMMON2+00000034    1 BYTE(S)                            26110000
OLDNEWSW EQU   COMMON2+00000035    1 BYTE(S)                            26120000
FLUSHSW  EQU   COMMON2+00000036    1 BYTE(S)                            26130000
FLUSHSW1 EQU   COMMON2+00000037    1 BYTE(S)                            26140000
DSDOSW   EQU   COMMON2+00000038    1 BYTE(S)                            26150000
DSDISW   EQU   COMMON2+00000039    1 BYTE(S)                            26160000
QUANSW   EQU   COMMON2+00000040    1 BYTE(S)                            26170000
PARENSW  EQU   COMMON2+00000041    1 BYTE(S)                            26180000
REPEATSW EQU   COMMON2+00000042    1 BYTE(S)                            26190000
SYSINEOD EQU   COMMON2+00000043    1 BYTE(S)                            26200000
FDPLGTH  EQU   COMMON2+00000052    HALFWORD INTEGER                     26210000
SGCADDR  EQU   COMMON2+00000056    FULLWORD POINTER                     26220000
FDPTR    EQU   COMMON2+00000060    FULLWORD POINTER                     26230000
FDPTR1   EQU   COMMON2+00000064    FULLWORD POINTER                     26240000
FDPTR2   EQU   COMMON2+00000068    FULLWORD POINTER                     26250000
DUMMY2   EQU   COMMON2+00000072    FULLWORD POINTER                     26260000
COMMON3  EQU   00000608            188 BYTE(S) ON WORD                  26270000
FDCTR    EQU   COMMON3+00000000    HALFWORD POINTER                     26280000
LREMAIN  EQU   COMMON3+00000004    FULLWORD POINTER                     26290000
COMPCTR  EQU   COMMON3+00000008    FULLWORD POINTER                     26300000
LMOVED   EQU   COMMON3+00000012    HALFWORD POINTER                     26310000
U        EQU   COMMON3+00000016    FULLWORD POINTER                     26320000
PICEND   EQU   COMMON3+00000020    HALFWORD POINTER                     26330000
CURFDGM  EQU   COMMON3+00000024    FULLWORD POINTER                     26340000
SWTCH    EQU   COMMON3+00000028    4 BYTE(S) ON WORD                    26350000
SYSINSEL EQU   COMMON3+00000028    1 BYTE(S)                            26360000
FIRSTSW  EQU   COMMON3+00000029    1 BYTE(S)                            26370000
FRSTSW   EQU   COMMON3+00000030    1 BYTE(S)                            26380000
STOPSW   EQU   COMMON3+00000031    1 BYTE(S)                            26390000
COPYVAL  EQU   COMMON3+00000032    HALFWORD INTEGER                     26400000
COPYFD   EQU   COMMON3+00000036    FULLWORD POINTER                     26410000
COPYFDGM EQU   COMMON3+00000040    FULLWORD POINTER                     26420000
NAMCTR   EQU   COMMON3+00000044    HALFWORD INTEGER                     26430000
NAMCTR1  EQU   COMMON3+00000046    HALFWORD INTEGER                     26440000
INRECSZ  EQU   COMMON3+00000048    HALFWORD POINTER                     26450000
OUTRECSZ EQU   COMMON3+00000050    HALFWORD POINTER                     26460000
INRECFM  EQU   COMMON3+00000052    1 BYTE(S)                            26470000
RECOFFST EQU   COMMON3+00000053    1  BYTE  POINTER                     26480000
OUTRECFM EQU   COMMON3+00000054    1 BYTE(S)                            26490000
PICBASE  EQU   COMMON3+00000056    FULLWORD POINTER                     26500000
MESSAGE  EQU   COMMON3+00000060    121 BYTE(S)                          26510000
DUMMY3   EQU   COMMON3+00000184    FULLWORD POINTER                     26520000
DCBD     EQU   00000000            280 BYTE(S) ON DWORD                 26530000
FILL     EQU   DCBD+00000000       26 BYTE(S)                           26540000
DSORG1   EQU   DCBD+00000026       2 BYTE(S)                            26550000
DSORG    EQU   DCBD+00000026       8 BIT(S)                             26560000
FILLER   EQU   DCBD+00000028       8 BYTE(S)                            26570000
IOBAD    EQU   DCBD+00000028       4 BYTE(S)                            26580000
BFTEK    EQU   DCBD+00000032       8 BIT(S)                             26590000
EODAD    EQU   DCBD+00000033       3 BYTE(S)                            26600000
RECFM    EQU   DCBD+00000036       8 BIT(S)                             26610000
EXLIST   EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           26620000
DDNAME   EQU   DCBD+00000040       8 BYTE(S)                            26630000
DEBAD    EQU   DCBD+00000040       4 BYTE(S)                            26640000
IFLGS    EQU   DCBD+00000040       8 BIT(S)                             26650000
GETAD    EQU   DCBD+00000048       4 BYTE(S)                            26660000
OFLGS    EQU   DCBD+00000048       8 BIT(S)                             26670000
OFLGS1   EQU   DCBD+00000049       1 BYTE(S)                            26680000
MACRF    EQU   DCBD+00000050       2 BYTE(S)                            26690000
FILL2    EQU   DCBD+00000052       10 BYTE(S)                           26700000
BLKSI    EQU   DCBD+00000062       HALFWORD INTEGER                     26710000
FILL3    EQU   DCBD+00000064       18 BYTE(S)                           26720000
LRECL    EQU   DCBD+00000082       HALFWORD INTEGER                     26730000
FILL4    EQU   DCBD+00000084       172 BYTE(S)                          26740000
NEXTDCB  EQU   DCBD+00000256       FULLWORD POINTER                     26750000
DDNAME1  EQU   DCBD+00000260       8 BYTE(S)                            26760000
EODSW    EQU   DCBD+00000268       1 BYTE(S)                            26770000
DCBSW1   EQU   DCBD+00000269       1 BYTE(S)                            26780000
DCBSW2   EQU   DCBD+00000270       1 BYTE(S)                            26790000
DCBSW3   EQU   DCBD+00000271       8 BIT(S)                             26800000
INREC    EQU   DCBD+00000272       FULLWORD POINTER                     26810000
GMLGTH   EQU   DCBD+00000276       HALFWORD INTEGER                     26820000
FIELDSEL EQU   DCBD+00000278       1 BYTE(S)                            26830000
SPARE    EQU   DCBD+00000279       1 BYTE(S)                            26840000
CRPICT   EQU   00000000            7 BYTE(S) ON WORD                    26850000
PICSTLOC EQU   CRPICT+00000000     FULLWORD POINTER                     26860000
PICLGTH  EQU   CRPICT+00000004     HALFWORD INTEGER                     26870000
PICSTRNG EQU   CRPICT+00000006     1 BYTE(S)                            26880000
CRTAB    EQU   00000000            28 BYTE(S) ON WORD                   26890000
NXTCRTE  EQU   CRTAB+00000000      FULLWORD POINTER                     26900000
QUAN     EQU   CRTAB+00000004      4 BYTE(S)                            26910000
IDCBPTR  EQU   CRTAB+00000008      FULLWORD POINTER                     26920000
EXITADR  EQU   CRTAB+00000012      FULLWORD POINTER                     26930000
PICPTR   EQU   CRTAB+00000016      FULLWORD POINTER                     26940000
FILLCH   EQU   CRTAB+00000020      1  BYTE  POINTER                     26950000
EMP1     EQU   CRTAB+00000021      3 BYTE(S)                            26960000
FDADTAB  EQU   CRTAB+00000024      FULLWORD POINTER                     26970000
ENDFD    EQU   CRTAB+00000024      1 BYTE(S)                            26980000
FDTBL    EQU   00000000            520 BYTE(S) ON WORD                  26990000
FDNAME   EQU   FDTBL+00000000      8 BYTE(S)                            27000000
FDREPNM  EQU   FDTBL+00000008      8 BYTE(S)                            27010000
FDINDNM  EQU   FDTBL+00000016      8 BYTE(S) ON WORD                    27020000
FDUMMY   EQU   FDTBL+00000016      4 BYTE(S)                            27030000
FDINDNUM EQU   FDTBL+00000020      FULLWORD POINTER                     27040000
FDLGTH   EQU   FDTBL+00000024      HALFWORD POINTER                     27050000
FDCYCLE  EQU   FDTBL+00000026      HALFWORD POINTER                     27060000
FDACTION EQU   FDTBL+00000028      2 BYTE(S)                            27070000
FDFORMAT EQU   FDTBL+00000030      2 BYTE(S)                            27080000
FDSWITCH EQU   FDTBL+00000032      8 BIT(S)                             27090000
INDBYNAM EQU   FDTBL+00000032      1 BIT(S)                             27100000
PASS     EQU   FDTBL+00000032      1 BIT(S)                             27110000
FXACTION EQU   FDTBL+00000032      1 BIT(S)                             27120000
RPACTION EQU   FDTBL+00000032      1 BIT(S)                             27130000
ROACTION EQU   FDTBL+00000032      1 BIT(S)                             27140000
WVACTION EQU   FDTBL+00000032      1 BIT(S)                             27150000
STACTION EQU   FDTBL+00000032      1 BIT(S)                             27160000
NUACTION EQU   FDTBL+00000032      1 BIT(S)                             27170000
FDFILL   EQU   FDTBL+00000033      1 BYTE(S)                            27180000
FDSIGN   EQU   FDTBL+00000034      1 BYTE(S)                            27190000
FDCHAR   EQU   FDTBL+00000035      1 BYTE(S)                            27200000
FDRANGE  EQU   FDTBL+00000036      4 BYTE(S)                            27210000
FDOBUF   EQU   FDTBL+00000040      HALFWORD POINTER                     27220000
FDFRINC  EQU   FDTBL+00000042      HALFWORD POINTER                     27230000
FDFROMAD EQU   FDTBL+00000044      4 BYTE(S)                            27240000
FDMLGTH  EQU   FDTBL+00000048      HALFWORD POINTER                     27250000
FDTOINC  EQU   FDTBL+00000050      HALFWORD POINTER                     27260000
FDCYCCNT EQU   FDTBL+00000052      HALFWORD POINTER                     27270000
FDSLGTH  EQU   FDTBL+00000054      HALFWORD POINTER                     27280000
FDSLGTHR EQU   FDTBL+00000056      HALFWORD POINTER                     27290000
FDFRINCR EQU   FDTBL+00000058      1 BYTE(S)                            27300000
FDTOINCR EQU   FDTBL+00000059      1 BYTE(S)                            27310000
LTOFREE  EQU   FDTBL+00000060      HALFWORD POINTER                     27320000
FDSW1    EQU   FDTBL+00000062      8 BIT(S)                             27330000
STRTLOC1 EQU   FDTBL+00000062      1 BIT(S)                             27340000
NXTFDTAB EQU   00000516            FULLWORD POINTER                     27350000
INBUF    EQU   00000000            80 BYTE(S)                           27360000
PARAM    EQU   00000000            1 BYTE(S)                            27370000
AREA     EQU   00000000            512 BYTE(S)                          27380000
NXTCRGM  EQU   00000000            FULLWORD POINTER                     27390000
NXTEXGM  EQU   00000000            FULLWORD POINTER                     27400000
EXITNAME EQU   00000000            8 BYTE(S)                            27410000
NXTFDGM  EQU   00000000            FULLWORD POINTER                     27420000
FDADR    EQU   00000000            FULLWORD POINTER                     27430000
ONE      EQU   *                   FULLWORD INTEGER                     27440000
         DC    FL4'0'                                                   27450000
YES      EQU   *                   1 BYTE(S)                            27460000
         DC    X'FF'                                                    27470000
NO       EQU   *                   1 BYTE(S)                            27480000
         DC    X'00'                                                    27490000
ON       EQU   *                   1 BYTE(S)                            27500000
         DC    X'FF'                                                    27510000
OFF      EQU   *                   1 BYTE(S)                            27520000
         DC    X'00'                                                    27530000
FOXZEROS EQU   *                   16 BYTE(S)                           27540000
         DC    X'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'                      27550000
         ORG   @DATA                                                    27560000
         DS    00000024C                                                27570000
@L       EQU   1                                                        27580000
@DATD    DSECT                                                          27590000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   27600000
         DS    00000072C                                                27610000
@TEMPS   DS    0F                                                       27620000
@TEMP4   DC    F'0'                                                     27630000
@T1      DC    F'0'                                                     27640000
@DATEND  EQU   *                                                        27650000
IEBCRANL CSECT ,                                                        27660000
@9F7     EQU   KEYSCAN                                                  27670000
@9F0     EQU   A6C5                                                     27680000
@9D9     EQU   CREATE                                                   27690000
@9DA     EQU   CARDSCAN                                                 27700000
@9D3     EQU   CARDSCAN                                                 27710000
RETURN2  EQU   @EL01                                                    27720000
@9C8     EQU   A6M11                                                    27730000
         END   IEBCRANL                                                 27740000
./  ADD  SSI=80690130,NAME=IEBCREAT
*********************************************************************** 00010000
*  TITLE: IEBCREAT  DATA GENERATOR CREATE MODULE.                     * 00020000
*                                                                     * 00030000
*  STATUS: CHANGE LEVEL 0                                             * 00040000
*                                                                     * 00050000
*  FUNCTION - GENERATES OUTPUT RECORDS AND READS INPUT RECORDS FROM   * 00060000
*              INPUT DATA SETS.  AFTER EACH RECORD IS WRITTEN, ALL    * 00070000
*              FD TABLES THAT ARE ACCESSED ARE PROCESSED TO PERFORM   * 00080000
*              ACTIONS, INDEXING, RANGE, AND CYCLE FUNCTIONS.         * 00090000
*             THIS MODULE IS ALWAYS ENTERED FROM MODULE IEBCRANL AND  * 00100000
*              RETURNS CONTROL TO IEBCRANL.  IF ENTERED WITH THE      * 00110000
*              'NOGO' SWITCH ON ALL OUTPUT GENERATION IS SUPPRESSED   * 00120000
*              AND ANY EXISTING CREATE, FD ADDRESS, OR PICTURE TABLES * 00130000
*              ARE FREED.                                             * 00140000
*             IF AN ERROR IS FOUND CONTROL IS RETURNED TO PRINT A     * 00150000
*              MESSAGE, SET THE NOGO SWITCH, AND READ THE NEXT CONTROL* 00160000
*              CARD TO CONTINUE SYNTAX CHECKING.                      * 00170000
*                                                                     * 00180000
*  ENTRY POINT: IEBCREAT THE CSECT NAME OF THIS MODULE.               * 00190000
*             LINKED TO BY MODULE IEBCRANL.       -                   * 00200000
*                                                                     * 00210000
*  INPUT    -  'COMMON' - WORK AREA.                                  * 00220000
*              R5       - POINTS TO 'COMMON'.                         * 00230000
*             'NOGO'   - IF ON, SUPPRESSES ALL OUTPUT GENERATION.     * 00240000
*              CREATE TABLES.                                         * 00250000
*              PICTURE TABLES.                                        * 00260000
*              FD ADDRESS TABLES.                                     * 00270000
*                                                                     * 00280000
*  OUTPUT   - RECORDS WRITTEN ON THE OUTPUT DEVICE DEFINED BY THE     * 00290000
*              DD NAME SPECIFIED ON THE DSD CARD.                     * 00300000
*                                                                     * 00310000
*  EXTERNAL ROUTINES - GETMAIN MACRO.                                 * 00320000
*                      GET MACRO.                                     * 00330000
*                      PUT MACRO.                                     * 00340000
*                                                                     * 00350000
*  EXITS -    NORMAL - RETURN TO MODULE IEBCRANL.                     * 00360000
*             ERROR  - RETURN TO MODULE IEBCRANL.                     * 00370000
*                                                                     * 00380000
*                                                                     * 00390000
*  TABLES/WORKAREAS                                                   * 00400000
*                                                                     * 00410000
*    CREATE TABLES - FIRST GETMAIN IS POINTED TO BY 'CRTABPT'.        * 00420000
*                                                                     * 00430000
*     BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7 BYTE 8         * 00440000
*    *****************************                                    * 00450000
*    * ADDRESS OF NEXT GETMAIN   *---FIRST 4 BYTES OF EACH 512 BYTE   * 00460000
*    *****************************    GETMAIN.                        * 00470000
*    *********************************************************        * 00480000
*  0 *  ADDRESS OF NEXT CREATE   *       QUANTITY            *        * 00490000
*    *********************************************************        * 00500000
*  8 *   INPUT DCB ADDRESS       *   USER EXIT ADDRESS       *        * 00510000
*    *********************************************************        * 00520000
* 16 *   PICTURE ADDRESS         * FILL *     NOT USED       *        * 00530000
*    *********************************************************        * 00540000
* 24 *   FD ADDRESS TABLE        *                                    * 00550000
*    *****************************                                    * 00560000
*       ANY POINTER OF 0 MEANS NO TABLE OR LAST TABLE.                * 00570000
*                                                                     * 00580000
*                                                                     * 00590000
*                                                                     * 00600000
*    PICTURE TABLE - POINTED TO BY 'PICPTR IN CREATE ENTRY.           * 00610000
*                    GETMAIN FOR PICTURE LENGTH +6.                   * 00620000
*                                                                     * 00630000
*     BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7 BYTE 8         * 00640000
*    *********************************************************        * 00650000
*    *  START LOCATION OFFSET    *  LENGTH     *  PICTURE    *        * 00660000
*    *********************************************************        * 00670000
*    *         STRING                                        *        * 00680000
*    *********************************************************        * 00690000
*                                                                     * 00700000
*                                                                     * 00710000
*                                                                     * 00720000
*    FD ADDRESS TABLE - POINTED TO BY 'FDADTAB' IN CREATE ENTRY.      * 00730000
*                       GETMAIN OF 88 BYTES.                          * 00740000
*                                                                     * 00750000
*    *****************************                                    * 00760000
*  O * ADDRESS OF NEXT GETMAIN   *                                    * 00770000
*    *****************************                                    * 00780000
*  4 *   FD TABLE ADDRESS        *                                    * 00790000
*    *****************************                                    * 00800000
*  8 *   FD TABLE ADDRESS        *                                    * 00810000
*    *****************************                                    * 00820000
*       LAST FD TABLE ADDRESS IN GETMAIN IS FOLLOWED BY 4 BYTES OF 0'S* 00830000
*                                                                     * 00840000
*                                                                     * 00850000
*                                                                     * 00860000
*    EXIT NAME TABLE - FIRST GETMAIN IS POINTED TO BY 'EXITTAB'.      * 00870000
*                      GETMAIN OF 72 BYTES. FREED BY MODULE IEBDG     * 00880000
*                      WHEN AN END CARD IS READ.                      * 00890000
*                                                                     * 00900000
*     BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7 BYTE 8         * 00910000
*    *****************************                                    * 00920000
*  0 * ADDRESS OF NEXT GETMAIN   *                                    * 00930000
*    *********************************************************        * 00940000
*  4 *      USER EXIT ROUTINE NAME                           *        * 00950000
*    *********************************************************        * 00960000
* 12 *      USER EXIT ROUTINE NAME                           *        * 00970000
*    *********************************************************        * 00980000
*       LAST EXIT NAME IN GETMAIN IS FOLLOWED BY 4 BYTES OF 0'S.      * 00990000
*                                                                     * 01000000
*                                                                     * 01010000
*                                                                     * 01020000
*    DCB TABLES- KEPT FOR DSD GROUP  GETMAIN 272 BYTES FOR EACH UNIQUE* 01030000
*                 DDNAME ON CREATE CARD. INPUT DCB'S ARE CHAINED      * 01040000
*                 TOGETHER AND POINTED TO BY 'IDCBPT'. OUTPUT DCB IS  * 01050000
*                 POINTED TO BY 'ODCBPT'.                             * 01060000
*                                                                     * 01070000
*     BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7 BYTE 8         * 01080000
*    *********************************************************        * 01090000
*    *         DCB FOR INPUT OR OUTPUT DATA SET              *        * 01100000
*    *                   256 BYTES                           *        * 01110000
*    *********************************************************        * 01120000
*    * ADDRESS OF NEXT DCB       *     DDNAME---             *        * 01130000
*    *********************************************************        * 01140000
*    * ---DDNAME                 *EODSW *                    *        * 01150000
*    *********************************************************        * 01160000
*                                                                     * 01170000
*  ATTRIBUTES: REENTRANT,REUSEABLE                                    * 01180000
*                                                                     * 01190000
*    NEW MODULE, RELEASE 17.                                       DG0H 01200000
*                                                                A30011 01210000
*A507700-508000.C506400                                          A45152 01220000
*C187800-188300.A280100-280188                                   A45169 01230000
*C667000-673400                                                  A45200 01240000
*A804300,811500,812000                                          YA01453 01250000
*A360010-360380,361210                                          YA01716 01260000
*D804600-808600,814200-816600                                   YA01453 01270000
*A507710-507750                                                 YA02528 01280000
*C508800                                                        YA02528 01290000
*A518700,523840-524320                                         @ZA03396 01300000
*C289200                                                       @ZA03396 01310000
*C237000                                                       @ZA04231 01320000
*C237000                                                       @ZA07345 01330000
*A246700,262300-262600,381700,382110    (ORG)@XA16970,@YA18072,@ZA24201 01340000
*A905500-905700                         (ORG)@XA16970,@YA18072,@ZA24201 01350000
*381920                                                        @ZA26202 01360000
         LCLA  &T,&SPN                                            0003  01370000
.@001    ANOP                                                     0003  01380000
IEBCREAT CSECT ,                                                  0003  01390000
         ST    @E,12(0,@D)                                        0003  01400000
         STM   @0,@8,20(@D)                                       0003  01410000
         STM   @A,@C,60(@D)                                       0003  01420000
         BALR  @B,0                                               0003  01430000
@PSTART  DS    0H                                                 0003  01440000
         USING @PSTART+00000,@B                                   0003  01450000
         L     @0,@SIZ001                                         0003  01460000
         GETMAIN  R,LV=(0)                                        0003  01470000
         LR    @C,@1                                              0003  01480000
         USING @DATD+00000,@C                                     0003  01490000
         LM    @0,@1,20(@D)                                       0003  01500000
         XC    @TEMPS(@L),@TEMPS                                  0003  01510000
         ST    @D,@SAV001+4                                       0003  01520000
         LA    @F,@SAV001                                         0003  01530000
         ST    @F,8(0,@D)                                         0003  01540000
         LR    @D,@F                                              0003  01550000
*            SYSINEOD = OFF;                                            01560000
         MVC   579(1,@5),OFF                                      0048  01570000
*                                   /*CLEAR SYSISW SWITCH. */           01580000
*            SYSISW = OFF;                                              01590000
         MVC   569(1,@5),OFF                                      0049  01600000
*                                   /*TEST IF NOGO SWITCH IS ON.*/      01610000
*         IF NOGOSW = ON THEN GO TO A7A6;                               01620000
         CLC   551(1,@5),ON                                       0050  01630000
         BC    08,A7A6                                            0051  01640000
*                                   /*PUT ADR. OF SYSI DCB IN BASE PTR. 01650000
*            DCBPTR = ADDR(SYSI);                                       01660000
         LA    @F,116(0,@5)                                       0052  01670000
         ST    @F,300(0,@5)                                       0052  01680000
*                                   /*SAVE SYNAD OF SYSIN DCB FOR       01690000
*                                   /* IEBDG.  MUST BE RESTORED BEFORE  01700000
*                                   /* EXITING.                         01710000
*                                   /*SAVE SYNAD ADR. IN 'PARM'. */     01720000
*            PARM = SYNAD;                                              01730000
         L     @1,300(0,@5)                                       0053  01740000
         MVC   12(4,@5),56(@1)                                    0053  01750000
*                                   /*CHANGE SYSIN EODAD FOR   @ZA24201 01760000
*                                   /*READING DATA RECORDS     @ZA24201 01770000
*           SAVEEOD = EODAD;                                 /*@ZA24201 01780000
         L     @1,300(0,@5)                                       0054  01790000
         MVC   SAVEEOD(3),33(@1)                                  0054  01800000
*           EODAD   = ADDR(A7EOD);                           /*@ZA24201 01810000
         LA    @F,A7EOD                                           0055  01820000
         ST    @F,@TEMP4                                          0055  01830000
         MVC   33(3,@1),@TEMP4+1                                  0055  01840000
*                                   /*INITIALIZE OUTPUT DCB SYNAD. */   01850000
*                                   /*PUT SYNAD ADR. IN 'Q'. */         01860000
*            Q(1:4) = ADDR(A7SYNAD);                                    01870000
         LA    @F,A7SYNAD                                         0056  01880000
         ST    @F,216(0,@5)                                       0056  01890000
*                                   /*MOVE SYNAD TO OUTPUT DCB. */      01900000
*            FIRSTGMO -> SYNAD(2:4) = Q(2:4);                           01910000
         L     @1,380(0,@5)                                       0057  01920000
         MVC   57(3,@1),217(@5)                                   0057  01930000
*  A7A1:;                                                               01940000
*                                   /*INITIALIZE CREATE TABLE POINTERS. 01950000
*                                   /*CURRENT CREATE GM = 1ST CREATE GM 01960000
*            CURCRGM = CRTABPT;                                         01970000
A7A1     MVC   320(4,@5),312(@5)                                  0059  01980000
*                                   /*CURRENT CREATE = 1ST CREATE ENTRY 01990000
*            CURCRTE = CRTABPT + 4;                                     02000000
         LA    @F,4                                               0060  02010000
         A     @F,312(0,@5)                                       0060  02020000
         ST    @F,316(0,@5)                                       0060  02030000
* /******************************************************************** 02040000
* /**  DO INITIALIZATION FOR EACH CREATE ENTRY.                       * 02050000
* /**     R4 IS BASE REG. FOR CREATE TABLE AND MUST BE PRESERVED      * 02060000
* /**       ACROSS MOST OF MODULE.                                    * 02070000
* /******************************************************************** 02080000
*  A7A11:;                                                              02090000
*                                   /*BASE REG FOR CREATE ENTRY.*/      02100000
*            R4 = CURCRTE;                                              02110000
A7A11    L     @4,316(0,@5)                                       0062  02120000
*                                   /*CLEAR EODSTOP SWITCH. */          02130000
*            EODSTOP = OFF;                                             02140000
         MVC   556(1,@5),OFF                                      0063  02150000
*                                   /*PUT OUTPUT DCB RECFM BITS 0,1 */  02160000
*                                   /* ONLY IN OUTRECFM.            */  02170000
*            OUTRECFM = FIRSTGMO -> RECFM & 'C0'X;                      02180000
         MVI   662(@5),X'C0'                                      0064  02190000
         L     @1,380(0,@5)                                       0064  02200000
         NC    662(1,@5),36(@1)                                   0064  02210000
*                                   /*IF OUTPUT RECFM IS U RECORD SIZE  02220000
*                                   /* IS BLKSIZE.                      02230000
*         IF OUTRECFM = 'C0'X THEN OUTRECSZ = FIRSTGMO -> BLKSI;        02240000
         CLI   662(@5),X'C0'                                      0065  02250000
         BC    07,@9FF                                            0065  02260000
         L     @1,380(0,@5)                                       0066  02270000
         MVC   658(2,@5),62(@1)                                   0066  02280000
         BC    15,@9FE                                            0067  02290000
*                                   /*ELSE, RECORD SIZE IS LRECL. */    02300000
*         ELSE OUTRECSZ = FIRSTGMO -> LRECL;                            02310000
@9FF     L     @1,380(0,@5)                                       0067  02320000
         MVC   658(2,@5),82(@1)                                   0067  02330000
*          IF FIRSTGMO -> DSORG(1) = '1'B THEN DO ;    /* I.SEQ.A45169* 02340000
@9FE     L     @1,380(0,@5)                                       0068  02350000
         TM    26(@1),B'10000000'                                 0068  02360000
         BC    12,@9FD                                            0068  02370000
*               IF FIRSTGMO -> CIND = '0000'X THEN DO; /* RKP=0 A45169* 02380000
         CLC   60(2,@1),@X3                                       0070  02390000
         BC    07,@9FC                                            0070  02400000
*                  IF FIRSTGMO -> RECFM = '80'X THEN DO; /* F   A45169* 02410000
         CLI   36(@1),X'80'                                       0072  02420000
         BC    07,@9FB                                            0072  02430000
*                           /* LRECL ONLY DATA SO ADD KEYLEN    A45169* 02440000
*                    OUTRECSZ = OUTRECSZ + FIRSTGMO -> KEYLEN ;         02450000
         SR    @F,@F                                              0074  02460000
         IC    @F,16(0,@1)                                        0074  02470000
         AH    @F,658(0,@5)                                       0074  02480000
         STH   @F,658(0,@5)                                       0074  02490000
*                  END;             /* END OF CHECK F UNBLK     A45169* 02500000
*               END;                   /* END OF CHECK RKP      A45169* 02510000
@9FB     EQU   *                                                  0076  02520000
*          END;                     /* END OF CHECK INDEX SEQ   A45169* 02530000
@9FC     EQU   *                                                  0077  02540000
*                                   /*TEST IF OUTPUT RECFM IS V. */     02550000
*         IF OUTRECFM = '40'X THEN RECOFFST = 4;                        02560000
@9FD     CLI   662(@5),X'40'                                      0078  02570000
         BC    07,@9FA                                            0078  02580000
         MVI   661(@5),4                                          0079  02590000
         BC    15,@9F9                                            0080  02600000
*                                   /*ELSE, RECORD OFFSET = 0. */       02610000
*         ELSE RECOFFST = 0;                                            02620000
@9FA     MVI   661(@5),0                                          0080  02630000
*                    /************************************************* 02640000
*                    /** DO INITIALIZATION FOR AN INPUT DATA SET.     * 02650000
*                    /**  THIS SECTION INITIALIZES SWITCHES AND INPUT * 02660000
*                    /**   DCB ADRS.  IT ALSO TESTS IF THE INPUT      * 02670000
*                    /**   RECORD SIZE EXCEEDS THE OUTPUT RECORD      * 02680000
*                    /**   SIZE.                                      * 02690000
*                    /************************************************* 02700000
*                                   /*TEST IF INPUT DCB PRESENT.*/      02710000
*        IF IDCBPTR ¬= 0 THEN DO;                                       02720000
@9F9     SR    @F,@F                                              0081  02730000
         C     @F,8(0,@4)                                         0081  02740000
         BC    08,@9F8                                            0081  02750000
*                                   /*INITIALIZE INPUT DCB SYNAD. */    02760000
*                                   /*PUT SYNAD ADR. IN 'Q'. */         02770000
*            Q(1:4) = ADDR(A7SYNAD1);                       /*@ZA03396* 02780000
         LA    @F,A7SYNAD1                                        0083  02790000
         ST    @F,216(0,@5)                                       0083  02800000
*                                   /*MOVE SYNAD TO INPUT DCB. */       02810000
*            IDCBPTR -> SYNAD(2:4) = Q(2:4);                            02820000
         L     @1,8(0,@4)                                         0084  02830000
         MVC   57(3,@1),217(@5)                                   0084  02840000
*                                   /*PUT INPUT DCB RECFM BITS 0,1 */   02850000
*                                   /* ONLY IN INRECFM.            */   02860000
*            INRECFM = IDCBPTR -> RECFM & 'C0'X;                        02870000
         MVI   660(@5),X'C0'                                      0085  02880000
         NC    660(1,@5),36(@1)                                   0085  02890000
*                                   /*IF INPUT RECFM IS U RECORD SIZE * 02900000
*                                   /* BLKSIZE.                       * 02910000
*         IF INRECFM = 'C0'X THEN INRECSZ = IDCBPTR -> BLKSI;           02920000
         CLI   660(@5),X'C0'                                      0086  02930000
         BC    07,@9F7                                            0086  02940000
         MVC   656(2,@5),62(@1)                                   0087  02950000
         BC    15,@9F6                                            0088  02960000
*                                   /*ELSE, RECORD SIZE IS LRECL. */    02970000
*         ELSE INRECSZ = IDCBPTR -> LRECL;                              02980000
@9F7     MVC   656(2,@5),82(@1)                                   0088  02990000
*                              /*************************************** 03000000
*                              /**IF QUANTITY IS 0, THEN AN INPUT DATA* 03010000
*                              /** SET WAS SPECIFIED.  'EODSTOP' SW.  * 03020000
*                              /** IS USED TO STOP RECORD GENERATION  * 03030000
*                              /** WHEN AN INPUT END-OF-DATA OCCURS.  * 03040000
*                              /*************************************** 03050000
*                                   /*TEST IF QUANTITY = 0. */          03060000
*         IF QUAN = 0 THEN DO;                                          03070000
@9F6     CLC   4(4,@4),@D1                                        0089  03080000
         BC    07,@9F5                                            0089  03090000
*                                   /*SET EODSTOP SWITCH TO STOP GENER- 03100000
*                                   /* ATION ON INPUT EOD.              03110000
*            EODSTOP = ON;                                              03120000
         MVC   556(1,@5),ON                                       0091  03130000
*         END;                                                          03140000
*                                   /*TEST IF INPUT DCB IS SYSIN. */    03150000
*         IF IDCBPTR ¬= ADDR(SYSI) THEN DO;                             03160000
@9F5     LA    @F,116(0,@5)                                       0093  03170000
         C     @F,8(0,@4)                                         0093  03180000
         BC    08,@9F4                                            0093  03190000
*                                  /*PUT EODAD ADR IN INPUT DCB.*/      03200000
*           IDCBPTR -> EODAD = ADDR(A7EODAD);                           03210000
         LA    @F,A7EODAD                                         0095  03220000
         L     @1,8(0,@4)                                         0095  03230000
         ST    @F,@TEMP4                                          0095  03240000
         MVC   33(3,@1),@TEMP4+1                                  0095  03250000
         BC    15,@9F3                                            0097  03260000
*         END;                                                          03270000
*                              /*************************************** 03280000
*                              /**IF THE INPUT DDNAME IS 'SYSIN',     * 03290000
*                              /** 'SYSISW' SW. IS USED TO INDICATE   * 03300000
*                              /** THERE ARE SYSIN DATA RECORDS AFTER * 03310000
*                              /** A SINGLE CREATE OR REPEAT GROUP.   * 03320000
*                              /*************************************** 03330000
*                                   /*TURN ON 'SYSISW' SW. */           03340000
*         ELSE SYSISW = ON;                                             03350000
@9F4     MVC   569(1,@5),ON                                       0097  03360000
*                                   /*TEST IF INPUT RECORD EXCEEDS */   03370000
*                                   /* OUTPUT RECORD.              */   03380000
*         IF INRECSZ > OUTRECSZ THEN DO;                                03390000
@9F3     LH    @F,658(0,@5)                                       0098  03400000
         CH    @F,656(0,@5)                                       0098  03410000
         BC    10,@9F2                                            0098  03420000
*         IF SYSISW = ON THEN DO  /** DO BELOW IF SYSIN **/;            03430000
         CLC   569(1,@5),ON                                       0100  03440000
         BC    07,@9F1                                            0100  03450000
*         IF SYSINSEL = ON THEN GO TO A7A111  /** BR NO MSG REQUIRED**/ 03460000
         CLC   636(1,@5),ON                                       0102  03470000
         BC    08,A7A111                                          0103  03480000
*         END;                                                          03490000
*         IF IDCBPTR -> FIELDSEL = ON THEN GO TO A7A111 /**BR NO MSG**/ 03500000
@9F1     L     @1,8(0,@4)                                         0105  03510000
         CLC   278(1,@1),ON                                       0105  03520000
         BC    08,A7A111                                          0106  03530000
*                                  /*INPUT LRECL IS TOO LARGE.*/        03540000
*           MS = 17                /*SET MSG 17               */;       03550000
         LA    @F,17                                              0107  03560000
         STH   @F,406(0,@5)                                       0107  03570000
*         SYSISW = OFF;                                                 03580000
         MVC   569(1,@5),OFF                                      0108  03590000
*         FLUSHSW = ON;                                                 03600000
         MVC   572(1,@5),ON                                       0109  03610000
*         GO TO ERROR1;                                                 03620000
         BC    15,ERROR1                                          0110  03630000
*        END;                                                           03640000
*        END;                                                           03650000
@9F2     EQU   *                                                  0112  03660000
* A7A111:;                                                              03670000
@9F8     EQU   *                                                  0113  03680000
*                                   /*INIT. NO. OF RECORDS COUNTER.*/   03690000
*            RECREM = QUAN;                                             03700000
A7A111   MVC   348(4,@5),4(@4)                                    0114  03710000
* /******************************************************************** 03720000
* /**  START CONSTRUCTION OF OUTPUT RECORD.                           * 03730000
* /**     CONTROL IS RETURNED TO THIS POINT AFTER THE PREVIOUS RECORD * 03740000
* /**      IS WRITTEN AND ANY FD TABLES PROCESSED AND THERE ARE MORE  * 03750000
* /**      RECORDS TO BE WRITTEN.  ALL FD FIELDS, CREATE PICTURE AND  * 03760000
* /**      INPUT RECORD, IF PRESENT, ARE CONSTRUCTED IN THE OUTPUT    * 03770000
* /**      BUFFER.                                                    * 03780000
* /******************************************************************** 03790000
*                    /************************************************* 03800000
*                    /**  FILL OUTPUT BUFFER WITH FILL CHAR.          * 03810000
*                    /************************************************* 03820000
*  A7A12:    OUTREC -> AREA(1) = FILLCH;                                03830000
A7A12    L     @1,308(0,@5)                                       0115  03840000
         MVC   0(1,@1),20(@4)                                     0115  03850000
*                                   /*CALL MOVEROUT TO FILL OUTPUT REC. 03860000
*                                   /*SETUP PARAMETERS FOR MOVEROUT.*/  03870000
*            R6 = OUTREC            /*FROM FIELD.*/;                    03880000
         L     @6,308(0,@5)                                       0116  03890000
*            R7 = OUTREC + 1        /*TO FIELD.*/;                      03900000
         LA    @7,1                                               0117  03910000
         A     @7,308(0,@5)                                       0117  03920000
*            R8 = OUTRECSZ - 1      /*LENGTH - 1. */;                   03930000
         LH    @8,@D2                                             0118  03940000
         AH    @8,658(0,@5)                                       0118  03950000
*         CALL MOVEROUT;                                                03960000
         BAL   @E,MOVEROUT                                        0119  03970000
*                                   /*INITIALIZE FD FIELD LOCATION    * 03980000
*                                   /* TO 1ST BYTE OF DATA IN RECORD. * 03990000
*            CUROUT = RECOFFST;                                         04000000
         MVC   357(1,@5),661(@5)                                  0120  04010000
         MVI   356(@5),X'00'                                      0120  04020000
*                                   /*INITIALIZE PICTURE LOCATION     * 04030000
*                                   /* TO 1ST BYTE OF DATA IN RECORD. * 04040000
*            PICEND = RECOFFST;                                         04050000
         MVC   629(1,@5),661(@5)                                  0121  04060000
         MVI   628(@5),X'00'                                      0121  04070000
*                                   /*IF V RECFM INIT. LENGTH DESCRIP-  04080000
*                                   /* TOR FIELD TO 4.                  04090000
*         IF OUTRECFM = '40'X THEN LLFLD = 4;                           04100000
         CLI   662(@5),X'40'                                      0122  04110000
         BC    07,@9F0                                            0122  04120000
         LA    @F,4                                               0123  04130000
         L     @1,308(0,@5)                                       0123  04140000
         STH   @F,0(0,@1)                                         0123  04150000
*                    /************************************************* 04160000
*                    /**  READ A RECORD FROM THE INPUT DATA SET.      * 04170000
*                    /**    'SYSINEOD' SW. IS TURNED ON WHEN THE SYSIN* 04180000
*                    /**      DELIMITER IS READ.                      * 04190000
*                    /**    'EODSW' SW. IN THE INPUT DCB TABLE IS     * 04200000
*                    /**      TURNED ON WHEN AN END-OF-DATA OCCURS ON * 04210000
*                    /**      A NON-SYSIN DATA SET.                   * 04220000
*                    /************************************************* 04230000
*                                   /*TEST IF INPUT DCB IS PRESENT.*/   04240000
*         IF IDCBPTR = 0 THEN GO TO A7A18;                              04250000
@9F0     SR    @F,@F                                              0124  04260000
         C     @F,8(0,@4)                                         0124  04270000
         BC    08,A7A18                                           0125  04280000
*                                   /*TEST IF INPUT DCB IS SYSIN. */    04290000
*         IF IDCBPTR = ADDR(SYSI) THEN DO;                              04300000
         LA    @F,116(0,@5)                                       0126  04310000
         C     @F,8(0,@4)                                         0126  04320000
         BC    07,@9EF                                            0126  04330000
*                                   /*TEST IF EOD ON SYSIN DCB. */      04340000
*         IF SYSINEOD = ON THEN GO TO A7A15;                            04350000
         CLC   579(1,@5),ON                                       0128  04360000
         BC    08,A7A15                                           0129  04370000
*                                   /*GO TO ISSUE GET MACRO. */         04380000
*         GO TO A7A13;                                                  04390000
         BC    15,A7A13                                           0130  04400000
*         END;                                                          04410000
*                                   /*TEST IF EOD ON INPUT DCB. */      04420000
*         IF IDCBPTR -> EODSW = ON THEN GO TO A7A15;                    04430000
@9EF     L     @1,8(0,@4)                                         0132  04440000
         CLC   268(1,@1),ON                                       0132  04450000
         BC    08,A7A15                                           0133  04460000
*                                   /*INPUT DCB FOR GET MACRO.*/        04470000
*  A7A13:    R1 = IDCBPTR;                                              04480000
A7A13    L     @1,8(0,@4)                                         0134  04490000
*                                   /** TEST IF INPUT DCB IS SYSIN **/  04500000
*         IF IDCBPTR = ADDR(SYSI) THEN DO;                              04510000
         LA    @F,116(0,@5)                                       0135  04520000
         C     @F,8(0,@4)                                         0135  04530000
         BC    07,@9EE                                            0135  04540000
*                              /** TEST IF FIELD SELECTION ON SYSIN**/  04550000
*         IF SYSINSEL = ON THEN DO;                                     04560000
         CLC   636(1,@5),ON                                       0137  04570000
         BC    07,@9ED                                            0137  04580000
*                              /** READ SYSIN INTO INBUFA**/            04590000
*         R0 = ADDR(INBUFA);                                            04600000
         LA    @0,418(0,@5)                                       0139  04610000
*         GO TO GETINP;                                                 04620000
         BC    15,GETINP                                          0140  04630000
*         END;                                                          04640000
*                              /**INPUT IS SYSIN WITHOUT FIELD SELECT** 04650000
*                              /** READ SYSIN INTO OUTREC**/            04660000
*         GO TO GETIN;                                                  04670000
*         END;                                                          04680000
*                              /**TEST IF FIELD SELECT ON INPUT**/      04690000
*         IF IDCBPTR -> FIELDSEL = ON THEN DO ;                         04700000
@9EE     L     @1,8(0,@4)                                         0144  04710000
         CLC   278(1,@1),ON                                       0144  04720000
         BC    07,@9EC                                            0144  04730000
*                              /**READ INPUT RECORD INTO INREC**/       04740000
*         R0 = IDCBPTR -> INREC;                                        04750000
         L     @0,272(0,@1)                                       0146  04760000
*         GO TO GETINP;                                                 04770000
         BC    15,GETINP                                          0147  04780000
*         END;                                                          04790000
* /******************************************************************** 04800000
* /** INPUT IS WITHOUT FIELD SELECT AND THE INPUT RECORD CAN   YA01716* 04810000
* /** BE READ INTO OUTREC, BUT IF THE INPUT WORKAREA           YA01716* 04820000
* /** PREVIOUSLY HAS BEEN EXTENDED WITH A KEYFIELD THEN THE    YA01716* 04830000
* /** OUTPUT WORKAREA MUST HAVE THE SAME SIZE AS THE INPUT     YA01716* 04840000
* /** WORKAREA, IN THIS CASE A FREEMAIN ON THE OUTPUT WORKAREA YA01716* 04850000
* /** AND A NEW GETMAIN WITH THE SAME SIZE AS THE INPUT        YA01716* 04860000
* /** WORKAREA WILL BE DONE                                    YA01716* 04870000
* /******************************************************************** 04880000
*              DCBPTR = IDCBPTR; /* REINITILIZE DCB POINTER     YA01716 04890000
@9EC     MVC   300(4,@5),8(@4)                                    0149  04900000
*              R15 = GMLGTH; /* PICK UP INPUT WORKAREA LENGTH   YA01716 04910000
         L     @1,300(0,@5)                                       0150  04920000
         LH    @F,276(0,@1)                                       0150  04930000
*              DCBPTR = FIRSTGMO; /* REINITILIZE DCB POINTER    YA01716 04940000
         MVC   300(4,@5),380(@5)                                  0151  04950000
*                        /* TEST IF INPUT WORKAREA EXEEDS       YA01716 04960000
*                        /* OUTPUT WORKAREA                     YA01716 04970000
*              IF R15 > GMLGTH THEN DO;                       /*YA01716 04980000
         L     @1,300(0,@5)                                       0152  04990000
         CH    @F,276(0,@1)                                       0152  05000000
         BC    12,@9EB                                            0152  05010000
*              R7 = GMLGTH; /* PICK UP OUTPUT WORKAREA LENGHT   YA01716 05020000
         LH    @7,276(0,@1)                                       0154  05030000
*              R6 = ADDR(OUTREC); /* GET OUTPUT WORKAREA PTR    YA01716 05040000
         LA    @6,308(0,@5)                                       0155  05050000
*              R1 = ADDR(GETMLIST);                           /*YA01716 05060000
         LA    @1,364(0,@5)                                       0156  05070000
*                        /* FREEMAIN THE 'OLD' OUTPUT           YA01716 05080000
*                        /* WORKAREA                            YA01716 05090000
* GEN ( FREEMAIN E,LV=(R7),A=(R6),SP=0,MF=(E,(R1)));          /*YA01716 05100000
          FREEMAIN E,LV=(R7),A=(R6),SP=0,MF=(E,(R1))                    05110000
         DS    0H                                                       05120000
*              DCBPTR = IDCBPTR; /* REINITILIZE DCB POINTER     YA01716 05130000
         MVC   300(4,@5),8(@4)                                    0158  05140000
*              R6 = GMLGTH; /* PICK UP INPUT WORKAREA LENGHT    YA01716 05150000
         L     @1,300(0,@5)                                       0159  05160000
         LH    @6,276(0,@1)                                       0159  05170000
*              R8 = ADDR(GCADDR); /* GET GC ADDRESS             YA01716 05180000
         LA    @8,376(0,@5)                                       0160  05190000
*              R1 = ADDR(GETMLIST);                           /*YA01716 05200000
         LA    @1,364(0,@5)                                       0161  05210000
*                        /* GETMAIN FOR THE 'NEW'               YA01716 05220000
*                        /* OUTPUT WORKAREA                     YA01716 05230000
* GEN ( GETMAIN EC,LV=(R6),A=(R8),SP=0,MF=(E,(R1)));          /*YA01716 05240000
          GETMAIN EC,LV=(R6),A=(R8),SP=0,MF=(E,(R1))                    05250000
         DS    0H                                                       05260000
*        IF R15 > 0 THEN DO; /* IS GETMAIN NOT SUCCESSESFUL     YA01716 05270000
         LTR   @F,@F                                              0163  05280000
         BC    12,@9EA                                            0163  05290000
*        MS = 10; /*INDICATE MESSAGE                            YA01716 05300000
         LA    @F,10                                              0165  05310000
         STH   @F,406(0,@5)                                       0165  05320000
*        SYSISW = OFF;                                        /*YA01716 05330000
         MVC   569(1,@5),OFF                                      0166  05340000
*        FLUSHSW = ON;                                        /*YA01716 05350000
         MVC   572(1,@5),ON                                       0167  05360000
*        GO TO ERROR1;                                        /*YA01716 05370000
         BC    15,ERROR1                                          0168  05380000
*        END;                                                 /*YA01716 05390000
*        DCBPTR = FIRSTGMO; /* REINITILIZE DCB POINTER          YA01716 05400000
@9EA     MVC   300(4,@5),380(@5)                                  0170  05410000
*        GMLGTH = R6; /* SAVE LENGHT                            YA01716 05420000
         L     @1,300(0,@5)                                       0171  05430000
         STH   @6,276(0,@1)                                       0171  05440000
*        OUTREC = GCADDR; /* INIT ADDR FOR OUTPUT WORKAREA      YA01716 05450000
         MVC   308(4,@5),376(@5)                                  0172  05460000
*        END;                                                 /*YA01716 05470000
*                              /** SET READIN ADDRESS TO OUTREC**/      05480000
*  GETIN:;                                                              05490000
@9EB     EQU   *                                                  0174  05500000
*         R1 = IDCBPTR;                                       /*YA01716 05510000
GETIN    L     @1,8(0,@4)                                         0175  05520000
*         R0 = OUTREC;                                                  05530000
         L     @0,308(0,@5)                                       0176  05540000
*  GETINP:;                                                             05550000
*                              /** GET INPUT RECORD **/                 05560000
*            GEN( GET  (R1),(R0));                                      05570000
GETINP    GET  (R1),(R0)                                                05580000
         DS    0H                                                       05590000
*                                   /*TEST IF INPUT DCB IS SYSIN. */    05600000
*         IF IDCBPTR = ADDR(SYSI) THEN DO;                              05610000
         LA    @F,116(0,@5)                                       0179  05620000
         C     @F,8(0,@4)                                         0179  05630000
         BC    07,@9E9                                            0179  05640000
*                              /** TEST IF FIELD SEL ON SYSIN**/        05650000
*         IF SYSINSEL = ON THEN DO;                                     05660000
         CLC   636(1,@5),ON                                       0181  05670000
         BC    07,@9E8                                            0181  05680000
*                              /**TEST FOR DELIMITER IN INBUFA**/       05690000
*         IF INBUFA(1:4) ¬= DELIM THEN GO TO A7A18;                     05700000
         CLC   418(4,@5),344(@5)                                  0183  05710000
         BC    07,A7A18                                           0184  05720000
*         INBUFA(1:4) = '    ' /**BLANK DELIM IN INBUFA **/;            05730000
         MVC   418(4,@5),@C6                                      0185  05740000
*                              /**GO TO SET SYSIN EOD SW**/             05750000
*         GO TO A7A135;                                                 05760000
         BC    15,A7A135                                          0186  05770000
*       END;                                                            05780000
*                                   /*TEST IF DELIMITER CARD WAS READ.  05790000
*         IF OUTREC -> AREA(1:4) ¬= DELIM THEN GO TO A7A18;             05800000
@9E8     L     @1,308(0,@5)                                       0188  05810000
         CLC   0(4,@1),344(@5)                                    0188  05820000
         BC    07,A7A18                                           0189  05830000
*  A7A135:;                                                             05840000
*                                   /*TURN ON SYSIN EOD SWITCH. */      05850000
*            SYSINEOD = ON;                                             05860000
A7A135   MVC   579(1,@5),ON                                       0191  05870000
*                              /*************************************** 05880000
*                              /**REFILL OUTPUT BUFFER WITH FILL CHAR.* 05890000
*                              /**  BECAUSE DELIMITER WAS READ INTO   * 05900000
*                              /**  BUFFER.                           * 05910000
*                              /*************************************** 05920000
*            OUTREC -> AREA(1) = FILLCH;                                05930000
         L     @1,308(0,@5)                                       0192  05940000
         MVC   0(1,@1),20(@4)                                     0192  05950000
*                                   /*SETUP PARAMETERS FOR MOVEROUT. */ 05960000
*            R6 = OUTREC            /*FROM FIELD. */;                   05970000
         L     @6,308(0,@5)                                       0193  05980000
*            R7 = OUTREC + 1        /*TO FIELD. */;                     05990000
         LA    @7,1                                               0194  06000000
         A     @7,308(0,@5)                                       0194  06010000
*            R8 = OUTRECSZ - 1      /*LENGTH - 1. */;                   06020000
         LH    @8,@D2                                             0195  06030000
         AH    @8,658(0,@5)                                       0195  06040000
*         CALL MOVEROUT             /*LINK TO MOVEROUT. */;             06050000
         BAL   @E,MOVEROUT                                        0196  06060000
*         GO TO A7A15;                                                  06070000
         BC    15,A7A15                                           0197  06080000
*         END;                                                          06090000
*         GO TO A7A18;                                                  06100000
*                              /*************************************** 06110000
*                              /**EODAD ENRTY FOR SYSIN DCB           * 06120000
*                              /*************************************** 06130000
*  A7EOD:;                                                   /*@ZA24201 06140000
*         DCBPTR -> EODSW = ON;                              /*@ZA26202 06150000
A7EOD    L     @1,300(0,@5)                                       0201  06160000
         MVC   268(1,@1),ON                                       0201  06170000
*         GO TO A7A135;                                      /*@ZA24201 06180000
         BC    15,A7A135                                          0202  06190000
*                              /*************************************** 06200000
*                              /**EODAD ENTRY FOR INPUT DCB (EXCEPT   * 06210000
*                              /**  SYSIN).                           * 06220000
*                              /*************************************** 06230000
*  A7EODAD:;                                                            06240000
*                                   /*TURN ON EODSW IN INPUT DCB TABLE. 06250000
*            IDCBPTR -> EODSW = ON;                                     06260000
A7EODAD  L     @1,8(0,@4)                                         0204  06270000
         MVC   268(1,@1),ON                                       0204  06280000
*                                   /*TEST IF EODSTOP SWITCH IS ON, IF  06290000
*                                   /* SO TERMINATE GENERATION FOR THIS 06300000
*                                   /* CREATE ENTRY.                    06310000
*  A7A15: IF EODSTOP = ON THEN GO TO A7A56;                             06320000
A7A15    CLC   556(1,@5),ON                                       0205  06330000
         BC    08,A7A56                                           0206  06340000
*                    /************************************************* 06350000
*                    /**  PROCESS FD NAMES.                           * 06360000
*                    /**    R9 IS USED AS A BASE REG. FOR THE FD TABLE* 06370000
*                    /**     AND MUST BE PRESERVED ACROSS MOST OF     * 06380000
*                    /**     THIS SECTION.                            * 06390000
*                    /**    'CUROUT' POINTS TO THE OFFSET             * 06400000
*                    /**     IN THE RECORD WHERE THE NEXT FD FIELD    * 06410000
*                    /**     BEGINS UNLESS START LOC. WAS SPECIFIED   * 06420000
*                    /**     ON THE FD CARD.                          * 06430000
*                    /**    'FDOBUF' IN THE FD TABLE SPECIFIES THE    * 06440000
*                    /**     OFFSET IN THE RECORD FOR FD START LOC.   * 06450000
*                    /**     (EXCLUDING THE LENGTH DESCRIPTOR IF      * 06460000
*                    /**     V RECFM).                                * 06470000
*                    /************************************************* 06480000
*                                   /*TEST IF ANY FD ADRS. FOR THIS */  06490000
*                                   /* CREATE ENTRY.                */  06500000
*  A7A18: IF FDADTAB = 0 THEN GO TO A7A14;                              06510000
A7A18    SR    @F,@F                                              0207  06520000
         C     @F,24(0,@4)                                        0207  06530000
         BC    08,A7A14                                           0208  06540000
*                                   /*POINT TO 1ST FD ADR. TABLE GM. */ 06550000
*            CURFDGM = FDADTAB;                                         06560000
         MVC   632(4,@5),24(@4)                                   0209  06570000
*                                   /*POINT TO 1ST FD ADR. IN GM. */    06580000
*  A7B1:     CURFD = CURFDGM + 4;                                       06590000
A7B1     LA    @F,4                                               0210  06600000
         A     @F,632(0,@5)                                       0210  06610000
         ST    @F,352(0,@5)                                       0210  06620000
*                                   /*PUT FD ADR. IN BASE PTR. */       06630000
*  A7B2:     R9 = CURFD -> FDADR;                                       06640000
A7B2     L     @1,352(0,@5)                                       0211  06650000
         L     @9,0(0,@1)                                         0211  06660000
*                                   /*TEST IF FD STARTLOC SPECIFIED. */ 06670000
*         IF STRTLOC1 = '1'B THEN DO;                                   06680000
         TM    62(@9),B'10000000'                                 0212  06690000
         BC    12,@9E7                                            0212  06700000
*                                   /*UPDATE CURRENT OUTPUT LOCATION */ 06710000
*                                   /* WITH FD STARTLOC.             */ 06720000
*            CUROUT = FDOBUF + RECOFFST;                                06730000
         SR    @F,@F                                              0214  06740000
         IC    @F,661(0,@5)                                       0214  06750000
         AH    @F,40(0,@9)                                        0214  06760000
         STH   @F,356(0,@5)                                       0214  06770000
*         END;                                                          06780000
*                                   /*TEST IF FD FIELD OVERFLOWS OUTPUT 06790000
*                                   /* RECORD.                          06800000
*         IF CUROUT + FDLGTH > OUTRECSZ THEN DO;                        06810000
@9E7     LH    @F,24(0,@9)                                        0216  06820000
         AH    @F,356(0,@5)                                       0216  06830000
         CH    @F,658(0,@5)                                       0216  06840000
         BC    12,@9E6                                            0216  06850000
*                                   /*FD FIELD OVERFLOWS. */            06860000
*                                   /*GO TO ISSUE MSG 16. */            06870000
*         GO TO A7A16;                                                  06880000
         BC    15,A7A16                                           0218  06890000
*         END;                                                          06900000
*                              /*************************************** 06910000
*                              /**FILL FD FIELD WITH BLANKS.          * 06920000
*                              /** IN CASE OF SHIFT OR TRUNCATE ACT-  * 06930000
*                              /** IONS, ONLY A PROTION OF THE FIELD  * 06940000
*                              /** MAY BE MOVED IN.                   * 06950000
*                              /*************************************** 06960000
*                                   /*SETUP PARAMETERS FOR MOVEROUT     06970000
*                                   /*PUT FD LENGTH - 1 IN R8. */       06980000
*            R8 = FDLGTH - 1;                                           06990000
@9E6     LH    @8,@D2                                             0220  07000000
         AH    @8,24(0,@9)                                        0220  07010000
*                                   /*FROM ADR. IN R6. */               07020000
*            R6 = CUROUT + OUTREC;                                      07030000
         L     @6,308(0,@5)                                       0221  07040000
         AH    @6,356(0,@5)                                       0221  07050000
*                                   /*TO ADR. IN R7. */                 07060000
*            R7 = CUROUT + OUTREC + 1;                                  07070000
         LA    @7,1                                               0222  07080000
         A     @7,308(0,@5)                                       0222  07090000
         AH    @7,356(0,@5)                                       0222  07100000
*                                   /*MOVE A BLANK INTO 1ST CHAR. OF */ 07110000
*                                   /* FD FIELD.                     */ 07120000
*            R6 -> AREA(1) = ' ';                                       07130000
         MVI   0(@6),C' '                                         0223  07140000
*                                   /*CALL MOVEROUT TO BLANK FD FIELD.  07150000
*         CALL MOVEROUT;                                                07160000
         BAL   @E,MOVEROUT                                        0224  07170000
*                              /*************************************** 07180000
*                              /**MOVE FD FIELD TO OUTPUT RECORD.     * 07190000
*                              /*************************************** 07200000
*                                   /*GET LENGTH OF PATTERN TO MOVE. */ 07210000
*            R8 = FDMLGTH;                                              07220000
         LH    @8,48(0,@9)                                        0225  07230000
*                                   /*RESOLVE FROM ADR. */              07240000
*            R6 = FDFROMAD + FDFRINC;                                   07250000
         LH    @6,42(0,@9)                                        0226  07260000
         AL    @6,44(0,@9)                                        0226  07270000
*                                   /*RESOLVE TO ADR. IN OUTPUT RECORD. 07280000
*            R7 = CUROUT + OUTREC + FDTOINC;                            07290000
         LH    @7,50(0,@9)                                        0227  07300000
         A     @7,308(0,@5)                                       0227  07310000
         AH    @7,356(0,@5)                                       0227  07320000
*                                   /*CALL MOVEROUT TO MOVE FD PATTERN  07330000
*                                   /* TO OUTPUT RECORD.                07340000
*         CALL MOVEROUT;                                                07350000
         BAL   @E,MOVEROUT                                        0228  07360000
*                              /*************************************** 07370000
*                              /** 'PASS' BIT IN FD TABLE IS USED IN  * 07380000
*                              /**  PROCESS FD TABLES SECTION         * 07390000
*                              /*************************************** 07400000
*                                   /*CLEAR PASS BIT IN FD TABLE. */    07410000
*            PASS = '0'B;                                               07420000
         NI    32(@9),B'10111111'                                 0229  07430000
*                                   /*UPDATE CURRENT OUTPUT LOCATION. * 07440000
*            CUROUT = CUROUT + FDLGTH;                                  07450000
         LH    @F,24(0,@9)                                        0230  07460000
         AH    @F,356(0,@5)                                       0230  07470000
         STH   @F,356(0,@5)                                       0230  07480000
*                                   /*UPDATE PTR. TO NEXT FD ADR. */    07490000
*            CURFD = CURFD + 4;                                         07500000
         LA    @F,4                                               0231  07510000
         A     @F,352(0,@5)                                       0231  07520000
         ST    @F,352(0,@5)                                       0231  07530000
*                                   /*TEST IF LAST FD ADR. IN GM. */    07540000
*         IF CURFD -> AREA(1:4) ¬= 0 THEN GO TO A7B2;                   07550000
         L     @1,352(0,@5)                                       0232  07560000
         CLC   0(4,@1),@D1                                        0232  07570000
         BC    07,A7B2                                            0233  07580000
*                                   /*TEST IF ANOTHER FD ADR. GM. */    07590000
*         IF CURFDGM -> NXTFDGM = 0 THEN GO TO A7A14;                   07600000
         SR    @F,@F                                              0234  07610000
         L     @2,632(0,@5)                                       0234  07620000
         C     @F,0(0,@2)                                         0234  07630000
         BC    08,A7A14                                           0235  07640000
*                                   /*GET ADR. OF NEXT FD ADR. GM. */   07650000
*            CURFDGM = CURFDGM -> NXTFDGM;                              07660000
         MVC   632(4,@5),0(@2)                                    0236  07670000
*                                   /*LOOP BACK TO PROCESS MORE FD ADRS 07680000
*         GO TO A7B1;                                                   07690000
         BC    15,A7B1                                            0237  07700000
*                    /************************************************* 07710000
*                    /**  PROCESS CREATE PICTURE.                     * 07720000
*                    /**    'PICSTLOC' POINTS TO THE OFFSET IN THE    * 07730000
*                    /**     RECORD WHERE THE PICTURE BEGINS (EXCLUD- * 07740000
*                    /**     ING THE LENGTH DESCRIPTOR IF V RECFM).   * 07750000
*                    /************************************************* 07760000
*  A7A14:;                                                              07770000
*                                   /*TEST IF PICTURE IS PRESENT.*/     07780000
*         IF PICPTR = 0 THEN GO TO A7A2;                                07790000
A7A14    SR    @F,@F                                              0239  07800000
         C     @F,16(0,@4)                                        0239  07810000
         BC    08,A7A2                                            0240  07820000
*                                   /*CALCULATE END LOC. OF PICTURE. */ 07830000
*            PICEND = PICPTR -> PICSTLOC + PICPTR -> PICLGTH + RECOFFST 07840000
         IC    @F,661(0,@5)                                       0241  07850000
         L     @1,16(0,@4)                                        0241  07860000
         AH    @F,4(0,@1)                                         0241  07870000
         A     @F,0(0,@1)                                         0241  07880000
         STH   @F,628(0,@5)                                       0241  07890000
*                                   /*TEST IF PICTURE OVERFLOWS OUTPUT  07900000
*                                   /* RECORD.                          07910000
*         IF PICEND > OUTRECSZ THEN DO;                                 07920000
         LH    @F,658(0,@5)                                       0242  07930000
         CH    @F,628(0,@5)                                       0242  07940000
         BC    10,@9E5                                            0242  07950000
*                                   /*PICTURE OVERFLOWS. */             07960000
*  A7A16:    MS = 16;                                                   07970000
A7A16    LA    @F,16                                              0244  07980000
         STH   @F,406(0,@5)                                       0244  07990000
*         GO TO ERROR1;                                                 08000000
         BC    15,ERROR1                                          0245  08010000
*         END;                                                          08020000
*                              /*************************************** 08030000
*                              /**MOVE PICTURE STRING INTO OUTPUT     * 08040000
*                              /**  RECORD STARTING AT PICTURE START  * 08050000
*                              /**  LOCATION.                         * 08060000
*                              /*************************************** 08070000
*                                   /*SETUP PARAMETERS FOR MOVEROUT TO  08080000
*                                   /* MOVE PICTURE.                    08090000
*            R6 = PICPTR + 6        /*FROM ADDRESS.*/;                  08100000
@9E5     LA    @6,6                                               0247  08110000
         A     @6,16(0,@4)                                        0247  08120000
*                                   /*TO ADDRESS. */                    08130000
*            R7 = OUTREC + PICPTR -> PICSTLOC + RECOFFST;               08140000
         SR    @F,@F                                              0248  08150000
         IC    @F,661(0,@5)                                       0248  08160000
         L     @1,16(0,@4)                                        0248  08170000
         A     @F,0(0,@1)                                         0248  08180000
         A     @F,308(0,@5)                                       0248  08190000
         LR    @7,@F                                              0248  08200000
*            R8 = PICPTR -> PICLGTH         /*LENGTH.      */;          08210000
         LH    @8,4(0,@1)                                         0249  08220000
*                                   /*CALL MOVEROUT.*/                  08230000
*         CALL MOVEROUT;                                                08240000
         BAL   @E,MOVEROUT                                        0250  08250000
*                    /************************************************* 08260000
*                    /** SETUP LENGTH DESCRIPTOR FIELD IF V RECFM .   * 08270000
*                    /**   DESCRIPTOR FIELD CONTAINS 4 UNLESS AN      * 08280000
*                    /**    INPUT RECORD WAS READ.                    * 08290000
*                    /************************************************* 08300000
*  A7A2:;                                                               08310000
*                                   /*TEST IF V TYPE RECORDS. */        08320000
*         IF OUTRECFM = '40'X THEN DO;                                  08330000
A7A2     CLI   662(@5),X'40'                                      0252  08340000
         BC    07,@9E4                                            0252  08350000
*                                   /*TEST IF END LOCATION OF FD IS GT  08360000
*                                   /* LL FIELD.                        08370000
*         IF CUROUT > LLFLD THEN LLFLD = CUROUT;                        08380000
         L     @1,308(0,@5)                                       0254  08390000
         LH    @F,0(0,@1)                                         0254  08400000
         CH    @F,356(0,@5)                                       0254  08410000
         BC    10,@9E3                                            0254  08420000
         MVC   0(2,@1),356(@5)                                    0255  08430000
*                                   /*TEST IF END LOCATION OF PICTURE * 08440000
*                                   /* IS GT LL FIELD.                  08450000
*         IF PICEND > LLFLD THEN LLFLD = PICEND;                        08460000
@9E3     LH    @F,0(0,@1)                                         0256  08470000
         CH    @F,628(0,@5)                                       0256  08480000
         BC    10,@9E2                                            0256  08490000
         MVC   0(2,@1),628(@5)                                    0257  08500000
*                              /*************************************** 08510000
*                              /**IF LL FIELD IS 4, THEN NO INPUT     * 08520000
*                              /** RECORD, FD FIELD, OR PICTURE IS    * 08530000
*                              /** PRESENT.  MAKE LL FIELD EQUAL TO   * 08540000
*                              /** OUTPUT LRECL.                      * 08550000
*                              /*************************************** 08560000
*         IF LLFLD = 4 THEN DO;                                         08570000
@9E2     LA    @F,4                                               0258  08580000
         CH    @F,0(0,@1)                                         0258  08590000
         BC    07,@9E1                                            0258  08600000
*                                   /*PUT LRECL IN LL FIELD. */         08610000
*            LLFLD = FIRSTGMO -> LRECL;                                 08620000
         L     @2,380(0,@5)                                       0260  08630000
         MVC   0(2,@1),82(@2)                                     0260  08640000
*         END;                                                          08650000
*                                   /*CLEAR LAST 2 BYTES OF DESCRIPTOR  08660000
*                                   /* FIELD.                           08670000
*            OUTREC -> AREA(3:4) = '0000'X;                             08680000
@9E1     L     @1,308(0,@5)                                       0262  08690000
         MVC   2(2,@1),@X3                                        0262  08700000
*         END;                                                          08710000
* /******************************************************************** 08720000
* /**  GO TO USER EXIT ROUTINE IF PRESENT.                            * 08730000
* /**    REG. 1 CONTAINS ADR. OF OUTPUT RECORD.                       * 08740000
* /**    USER'S ROUTINE MUST PASS BACK A RETURN CODE IN REG. 15.      * 08750000
* /******************************************************************** 08760000
*                                   /*TEST IF USER EXIT PRESENT.*/      08770000
*         IF EXITADR = 0 THEN GO TO A7A4;                               08780000
@9E4     SR    @F,@F                                              0264  08790000
         C     @F,12(0,@4)                                        0264  08800000
         BC    08,A7A4                                            0265  08810000
*                                   /*PASS OUTPUT RECORD TO USER IN R1. 08820000
*            R1 = OUTREC;                                               08830000
         L     @1,308(0,@5)                                       0266  08840000
*                                   /*SET R15 TO ADR OF EXIT ROUTINE.*/ 08850000
*            R15 = EXITADR;                                             08860000
         L     @F,12(0,@4)                                        0267  08870000
*                                   /*GO TO USER ROUTINE.*/             08880000
*            GEN( BALR  14,15);                                         08890000
          BALR  14,15                                                   08900000
         DS    0H                                                       08910000
*                    /************************************************* 08920000
*                    /** USER PASSES A RETURN CODE IN REG. 15 AS      * 08930000
*                    /**   FOLLOWS-                                   * 08940000
*                    /**    0  WRITE THE RECORD.                      * 08950000
*                    /**    4  SKIP THE RECORD (COUNTS AS 1 RECORD    * 08960000
*                    /**       IN THE QUANTITY OF RECORDS TO BE       * 08970000
*                    /**       WRITTEN).                              * 08980000
*                    /**   12  END GENERATION FOR THIS DSD GROUP.     * 08990000
*                    /**   16  END GENERATION FOR ENTIRE JOB STEP.    * 09000000
*                    /************************************************* 09010000
*                                   /*TEST RETURN CODE FROM USER IN     09020000
*                                   /* REG. 15.                         09030000
*            R6 = R15;                                                  09040000
         LR    @6,@F                                              0269  09050000
*         IF R6 = 0 THEN GO TO A7A4;                                    09060000
         LTR   @6,@6                                              0270  09070000
         BC    08,A7A4                                            0271  09080000
*         IF R6 = 4 THEN GO TO A7C1;                                    09090000
         CH    @6,@D3                                             0272  09100000
         BC    08,A7C1                                            0273  09110000
*         IF R6 = 12 THEN DO;                                           09120000
         CH    @6,@D4                                             0274  09130000
         BC    07,@9E0                                            0274  09140000
*                                   /*SET CONDITION CODE TO 8. */       09150000
*            CONCODE = 8;                                               09160000
         LA    @F,8                                               0276  09170000
         STH   @F,306(0,@5)                                       0276  09180000
*                                   /*TURN ON FLUSHSW. */               09190000
*            FLUSHSW = ON;                                              09200000
         MVC   572(1,@5),ON                                       0277  09210000
*                                   /*GO TO CREATE CLEAN UP. */         09220000
*         GO TO A7A6;                                                   09230000
         BC    15,A7A6                                            0278  09240000
*         END;                                                          09250000
*         IF R6 = 16 THEN DO;                                           09260000
@9E0     CH    @6,@D5                                             0280  09270000
         BC    07,@9DF                                            0280  09280000
*                                   /*SET CONDITION CODE TO 4. */       09290000
*            CONCODE = 4;                                               09300000
         LA    @F,4                                               0282  09310000
         STH   @F,306(0,@5)                                       0282  09320000
*                                   /*TURN ON FLUSHSW1. */              09330000
*            FLUSHSW1 = ON;                                             09340000
         MVC   573(1,@5),ON                                       0283  09350000
*                                   /*GO TO CREATE CLEAN UP. */         09360000
*         GO TO A7A6;                                                   09370000
         BC    15,A7A6                                            0284  09380000
*         END;                                                          09390000
*                                   /*USER DIDN'T RETURN A VALID RETURN 09400000
*                                   /* CODE.                            09410000
*            MS = 9;                                                    09420000
@9DF     LA    @F,9                                               0286  09430000
         STH   @F,406(0,@5)                                       0286  09440000
*         GO TO ERROR1;                                                 09450000
         BC    15,ERROR1                                          0287  09460000
* /******************************************************************** 09470000
* /**  WRITE THE OUTPUT RECORD.                                       * 09480000
* /******************************************************************** 09490000
*  A7A4:;                                                               09500000
*                                   /*OUTPUT DCB FOR PUT MACRO.*/       09510000
*            R1 = FIRSTGMO;                                             09520000
A7A4     L     @1,380(0,@5)                                       0289  09530000
*      IF OUTRECFM='C0'X THEN DO ;          /* RECFM=U          A45152* 09540000
         CLI   662(@5),X'C0'                                      0290  09550000
         BC    07,@9DE                                            0290  09560000
*     R1->LRECL = CUROUT;                                               09570000
         MVC   82(2,@1),356(@5)                                   0292  09580000
*     IF  PICEND>CUROUT  THEN  R1->LRECL  = PICEND;                     09590000
         LH    @F,356(0,@5)                                       0293  09600000
         CH    @F,628(0,@5)                                       0293  09610000
         BC    10,@9DD                                            0293  09620000
         MVC   82(2,@1),628(@5)                                   0294  09630000
*        IF R1 -> LRECL = 0 THEN DO ;   /* NO FD CARD NOR PICT  A45152* 09640000
@9DD     SR    @F,@F                                              0295  09650000
         CH    @F,82(0,@1)                                        0295  09660000
         BC    07,@9DC                                            0295  09670000
*          IF IDCBPTR = 0 THEN DO; /*  NO INPUT DCB           @YA02528* 09680000
         C     @F,8(0,@4)                                         0297  09690000
         BC    07,@9DB                                            0297  09700000
*             R1 -> LRECL = R1 -> BLKSI; /* MAKE LRECL SAME   @YA02528* 09710000
         MVC   82(2,@1),62(@1)                                    0299  09720000
*                                       /* AS BLKSIZE         @YA02528* 09730000
*         GO TO PUTOUT;                                     /*@YA02528* 09740000
         BC    15,PUTOUT                                          0300  09750000
*          END;                                             /*@YA02528* 09760000
*             R14 = IDCBPTR ;           /* INIT INPUT DCB       A45152* 09770000
@9DB     L     @E,8(0,@4)                                         0302  09780000
*             R1 -> LRECL = R14 -> LRECL ; /* STRAIGT COPY      A45152* 09790000
         MVC   82(2,@1),82(@E)                                    0303  09800000
*        END ;                          /* OUTPUT REC. EQU INPUTA45152* 09810000
*     END;                                                              09820000
@9DC     EQU   *                                                  0305  09830000
* PUTOUT:;                        /*OUTPUT AREA FOR PUT MACRO @YA02528* 09840000
@9DE     EQU   *                                                  0306  09850000
*            R0 = OUTREC;                                               09860000
PUTOUT   L     @0,308(0,@5)                                       0307  09870000
*                                   /*WRITE OUTPUT RECORD.*/            09880000
*            GEN( PUT  (R1),(R0));                                      09890000
          PUT  (R1),(R0)                                                09900000
         DS    0H                                                       09910000
*                                   /*GO TO PROCESS FD TABLES. */       09920000
*         GO TO A7C1;                                                   09930000
         BC    15,A7C1                                            0309  09940000
* /******************************************************************** 09950000
* /**    SYNAD ENTRY FOR INPUT OR OUTPUT DCB.                         * 09960000
* /**       THIS SECTION IS ENTERED BY THE ACCESS METHOD WHEN A       * 09970000
* /**        PERMANENT I/O ERROR OCCURS.  SYNADAF MACRO IS ISSUED     * 09980000
* /**        TO GET INFORMATION ABOUT THE ERROR.  THIS INFORMATION IS * 09990000
* /**        PRINTED IN MESSAGE 29.                                   * 10000000
* /******************************************************************** 10010000
*  A7SYNAD:;                                                            10020000
*                                   /*MOVE FIRST PORTION OF MSG 29 */   10030000
*                                   /* INTO BUFFER.                */   10040000
*            INBUFA1 = ' IEB729I PERMANENT I/O ERROR';                  10050000
A7SYNAD  MVC   408(28,@5),@C8                                     0311  10060000
         MVI   436(@5),C' '                                       0311  10070000
         MVC   437(92,@5),436(@5)                                 0311  10080000
*              R1 = FIRSTGMO;      /*GET OUTPUT DCB ADDRESS   @ZA03396* 10090000
         L     @1,380(0,@5)                                       0312  10100000
*         IF R1 -> DSORG = '80'X THEN DO /**IF ISAM USE ISAM SYNADAF ** 10110000
         CLI   26(@1),X'80'                                       0313  10120000
         BC    07,@9DA                                            0313  10130000
*         GEN ( SYNADAF ACSMETH=QISAM);                                 10140000
          SYNADAF ACSMETH=QISAM                                         10150000
         DS    0H                                                       10160000
*               GO TO A7SYNAD5           /**BR TO MOVE INFO AND RLSE**/ 10170000
         BC    15,A7SYNAD5                                        0316  10180000
*         END;                                                          10190000
*                                   /*ISSUE SYNADAF MACRO. */           10200000
*                                   /*SYNADAF RETURNS AN ADDRESS OF THE 10210000
*                                   /* DATA IN REG. 1.  THE DATA TO BE  10220000
*                                   /* PRINTED IS AT AN OFFSET OF 49.   10230000
*            GEN( SYNADAF  ACSMETH=QSAM );                              10240000
@9DA     EQU   *                                                  0318  10250000
          SYNADAF  ACSMETH=QSAM                                         10260000
         DS    0H                                                       10270000
*              GO TO A7SYNAD5; /*BR TO MOVE INFO AND RLSE     @ZA03396* 10280000
         BC    15,A7SYNAD5                                        0319  10290000
*  A7SYNAD1:;                                               /*@ZA03396* 10300000
*  /*MOVE FIRST PORTION OF MSG 29 INTO BUFFER                 @ZA03396* 10310000
*            INBUFA1 = ' IEB729I PERMANENT I/O ERROR';      /*@ZA03396* 10320000
A7SYNAD1 MVC   408(28,@5),@C8                                     0321  10330000
         MVI   436(@5),C' '                                       0321  10340000
         MVC   437(92,@5),436(@5)                                 0321  10350000
*              R1 = IDCBPTR;       /*GET INPUT DCB ADDRESS    @ZA03396* 10360000
         L     @1,8(0,@4)                                         0322  10370000
*  /*IF ISAM USE ISAM SYNADAF                                 @ZA03396* 10380000
*         IF R1 -> DSORG = '80'X  THEN DO;                  /*@ZA03396* 10390000
         CLI   26(@1),X'80'                                       0323  10400000
         BC    07,@9D9                                            0323  10410000
*         GEN ( SYNADAF ACSMETH=QISAM);                     /*@ZA03396* 10420000
          SYNADAF ACSMETH=QISAM                                         10430000
         DS    0H                                                       10440000
*              GO TO A7SYNAD5; /*BR TO MOVE INFO AND RLSE     @ZA03396* 10450000
         BC    15,A7SYNAD5                                        0326  10460000
*          END;                                             /*@ZA03396* 10470000
*  /*ISSUE SYNADAF MACRO. SYNADAF RETURNS AN ADDRESS OF THE   @ZA03396* 10480000
*  /*DATA IN REG1. THE DATA TO BE PRINTED IS AT OFFSET 49     @ZA03396* 10490000
*           GEN ( SYNADAF ACSMETH=QSAM);                    /*@ZA03396* 10500000
@9D9     EQU   *                                                  0328  10510000
          SYNADAF ACSMETH=QSAM                                          10520000
         DS    0H                                                       10530000
*  A7SYNAD5:;                                                           10540000
*                                   /*MOVE SYNAD INFORMATION TO BUFFER. 10550000
*            GEN( MVC  INBUFA1+28(79,5),49(1));                         10560000
A7SYNAD5  MVC  INBUFA1+28(79,5),49(1)                                   10570000
         DS    0H                                                       10580000
*         GEN ( SYNADRLS);                                              10590000
          SYNADRLS                                                      10600000
         DS    0H                                                       10610000
*                                   /*SET CONDITION CODE TO 12. */      10620000
*            CONCODE = 12;                                              10630000
         LA    @F,12                                              0332  10640000
         STH   @F,306(0,@5)                                       0332  10650000
*                                   /*SET 'FLUSHSW1' TO TERMINATE STEP. 10660000
*            FLUSHSW1 = ON;                                             10670000
         MVC   573(1,@5),ON                                       0333  10680000
*                                   /*SET MS=30 TO CAUSE IEBMSG TO  */  10690000
*                                   /* PRINT MESSAGE IN 'INBUFA1'.  */  10700000
*            MS = 30;                                                   10710000
         LA    @F,30                                              0334  10720000
         STH   @F,406(0,@5)                                       0334  10730000
*                                   /*GO TO SET AN ERROR RETURN AND */  10740000
*                                   /* CREATE CLEANUP.              */  10750000
*         GO TO ERROR;                                                  10760000
         BC    15,ERROR                                           0335  10770000
* /******************************************************************** 10780000
* /**  PROCESS FD TABLES.                                             * 10790000
* /**    ANY FD TABLES REFERENCED BY THE CREATE ENTRY MUST BE PRO-    * 10800000
* /**     CESSED FOR ACTION, INDEX, REANGE, AND CYCLE.  IF A TABLE    * 10810000
* /**     IS REFERENCED MORE THAN ONCE, IT IS ONLY PROCESSED ONCE.    * 10820000
* /**     THE 'PASS' BIT IN THE FD TABLE INDICATES THIS.              * 10830000
* /**    REG. 9 IS USED AS A BASE REG. FOR THE FD TABLE AND MUST BE   * 10840000
* /**     PRESERVED ACROSS MOST OF THIS SECTION.                      * 10850000
* /******************************************************************** 10860000
*                                   /*TEST IF ANY FD ADRS. FOR THIS */  10870000
*                                   /* CREATE ENTRY.                */  10880000
*  A7C1:  IF FDADTAB = 0 THEN GO TO A7A5;                               10890000
A7C1     SR    @F,@F                                              0336  10900000
         C     @F,24(0,@4)                                        0336  10910000
         BC    08,A7A5                                            0337  10920000
*                                   /*POINT TO 1ST FD ADR. TABLE GM. */ 10930000
*            CURFDGM = FDADTAB;                                         10940000
         MVC   632(4,@5),24(@4)                                   0338  10950000
*                                   /*POINT TO 1ST FD ADR. IN GM. */    10960000
*  A7J1:     CURFD = CURFDGM + 4;                                       10970000
A7J1     LA    @F,4                                               0339  10980000
         A     @F,632(0,@5)                                       0339  10990000
         ST    @F,352(0,@5)                                       0339  11000000
*                                   /*PUT FD ADR. IN BASE PTR. */       11010000
*  A7J2:     R9 = CURFD -> FDADR;                                       11020000
A7J2     L     @1,352(0,@5)                                       0340  11030000
         L     @9,0(0,@1)                                         0340  11040000
*                                   /*TEST IF FD TABLE ALREADY */       11050000
*                                   /* PROCESSED.              */       11060000
*         IF PASS = '1'B THEN GO TO A7J3;                               11070000
         TM    32(@9),B'01000000'                                 0341  11080000
         BC    01,A7J3                                            0342  11090000
*                                   /*TURN ON PASS BIT IN FD TABLE. */  11100000
*            PASS = '1'B;                                               11110000
         OI    32(@9),B'01000000'                                 0343  11120000
*                                   /*SAVE R4 TEMPORARILY. */           11130000
*            GCADDR = R4;                                               11140000
         ST    @4,376(0,@5)                                       0344  11150000
*                                   /*TEST IF NUACTION BIT ON. */       11160000
*         IF NUACTION = '0'B THEN GO TO A7R8;                           11170000
         TM    32(@9),B'00000001'                                 0345  11180000
         BC    08,A7R8                                            0346  11190000
*                                   /*TEST IF RANDOM FORMAT. */         11200000
*         IF FDFORMAT = 'RA' THEN GO TO A7R6;                           11210000
         CLC   30(2,@9),@C9                                       0347  11220000
         BC    08,A7R6                                            0348  11230000
*                    /************************************************* 11240000
*                    /** PROCESS INDEX, CYCLE, AND RANGE FUNCTIONS.   * 11250000
*                    /************************************************* 11260000
*                                   /*TEST IF INDEX NO. IS 0. */        11270000
*         IF FDINDNUM = 0 THEN GO TO ABCD;                              11280000
         SR    @F,@F                                              0349  11290000
         C     @F,20(0,@9)                                        0349  11300000
         BC    08,ABCD                                            0350  11310000
*                                   /*TEST IF CYCLE IS 0. */            11320000
*         IF FDCYCLE = 0 THEN GO TO A7R1;                               11330000
         CH    @F,26(0,@9)                                        0351  11340000
         BC    08,A7R1                                            0352  11350000
*                                   /*INCREMENT CYCLE CTR. */           11360000
*            FDCYCCNT = FDCYCCNT + 1;                                   11370000
         LA    @F,1                                               0353  11380000
         AH    @F,52(0,@9)                                        0353  11390000
         STH   @F,52(0,@9)                                        0353  11400000
*                                   /*TEST IF CYCLE CTR = CYCLE VALUE.  11410000
*         IF FDCYCCNT < FDCYCLE THEN GO TO ABCD;                        11420000
         LH    @F,26(0,@9)                                        0354  11430000
         CH    @F,52(0,@9)                                        0354  11440000
         BC    02,ABCD                                            0355  11450000
*                                   /*SET CYCLE CTR TO 0. */            11460000
*  A7R1:     FDCYCCNT = 0;                                              11470000
A7R1     SR    @F,@F                                              0356  11480000
         STH   @F,52(0,@9)                                        0356  11490000
*                                   /*CLEAR 'Q' TO ZEROS. */            11500000
*            Q = Q && Q;                                                11510000
         XC    216(16,@5),216(@5)                                 0357  11520000
*                              /*************************************** 11530000
*                              /**CONVERT ZONED DECIMAL NO.           * 11540000
*                              /** NO. IS PACKED INTO 'Q'.            * 11550000
*                              /*************************************** 11560000
*                                   /*TEST IF ZD FORMAT. */             11570000
*         IF FDFORMAT = 'ZD' THEN DO;                                   11580000
         CLC   30(2,@9),@C10                                      0358  11590000
         BC    07,@9D8                                            0358  11600000
*                                   /*TEST IF FD LENGTH GT 15. */       11610000
*         IF FDLGTH > 15 THEN R6 = 15;                                  11620000
         LA    @F,15                                              0360  11630000
         CH    @F,24(0,@9)                                        0360  11640000
         BC    10,@9D7                                            0360  11650000
         LR    @6,@F                                              0361  11660000
         BC    15,@9D6                                            0362  11670000
*                                   /*ELSE, SET R6 TO FD LENGTH. */     11680000
*            ELSE R6 = FDLGTH;                                          11690000
@9D7     LH    @6,24(0,@9)                                        0362  11700000
*                                   /*CALCULATE FROM ADR. */            11710000
*            R7 = FDFROMAD + FDLGTH - R6;                               11720000
@9D6     LCR   @7,@6                                              0363  11730000
         LH    @0,24(0,@9)                                        0363  11740000
         ALR   @7,@0                                              0363  11750000
         AL    @7,44(0,@9)                                        0363  11760000
*                                   /*PACK ZD NO. INTO 'Q'. */          11770000
*                                   /*DECREMENT LENGTH BY 1. */         11780000
*            R6 = R6 - 1;                                               11790000
         BCTR  @6,0                                               0364  11800000
*            GEN( EX  R6,PACK );                                        11810000
          EX  R6,PACK                                                   11820000
         DS    0H                                                       11830000
*         GO TO A7R2;                                                   11840000
         BC    15,A7R2                                            0366  11850000
*         END;                                                          11860000
*                              /*************************************** 11870000
*                              /**CONVERT PACKED DECIMAL NO.          * 11880000
*                              /** NO. IS MOVED INTO 'Q'.             * 11890000
*                              /*************************************** 11900000
*                                   /*TEST IF PD FORMAT. */             11910000
*         IF FDFORMAT = 'PD' THEN DO;                                   11920000
@9D8     CLC   30(2,@9),@C11                                      0368  11930000
         BC    07,@9D5                                            0368  11940000
*                                   /*TEST IF FD LENGTH GT 8. */        11950000
*         IF FDLGTH > 8 THEN R6 = 8;                                    11960000
         LA    @F,8                                               0370  11970000
         CH    @F,24(0,@9)                                        0370  11980000
         BC    10,@9D4                                            0370  11990000
         LR    @6,@F                                              0371  12000000
         BC    15,@9D3                                            0372  12010000
*                                   /*ELSE, SET R6 TO FD LENGTH. */     12020000
*            ELSE R6 = FDLGTH;                                          12030000
@9D4     LH    @6,24(0,@9)                                        0372  12040000
*                                   /*CALCULATE FROM ADR. */            12050000
*            R7 = FDFROMAD + FDLGTH - R6;                               12060000
@9D3     LCR   @7,@6                                              0373  12070000
         LH    @0,24(0,@9)                                        0373  12080000
         ALR   @7,@0                                              0373  12090000
         AL    @7,44(0,@9)                                        0373  12100000
*                                   /*CALCULATE TO ADR. */              12110000
*            R8 = ADDR(Q) + 8 - R6;                                     12120000
         LCR   @F,@6                                              0374  12130000
         AH    @F,@D6                                             0374  12140000
         LA    @0,216(0,@5)                                       0374  12150000
         AR    @F,@0                                              0374  12160000
         LR    @8,@F                                              0374  12170000
*                                   /*MOVE PD NO. INTO 'Q'. */          12180000
*            R8 -> AREA(1:R6) = R7 -> AREA(1:R6);                       12190000
         LR    @E,@7                                              0375  12200000
         LR    @1,@6                                              0375  12210000
         BCTR  @1,0                                               0375  12220000
         LR    @A,@8                                              0375  12230000
         EX    @1,@MVC                                            0375  12240000
*         GO TO A7R2;                                                   12250000
         BC    15,A7R2                                            0376  12260000
*         END;                                                          12270000
*                              /*************************************** 12280000
*                              /**PROCESS BINARY NO.                  * 12290000
*                              /** NO. IS MOVED INTO REG 4.           * 12300000
*                              /*************************************** 12310000
*                                   /*FORMAT MUST BE BI. */             12320000
*                                   /*TEST IF FD LENGTH GT 4. */        12330000
*         IF FDLGTH > 4 THEN R6 = 4;                                    12340000
@9D5     LA    @F,4                                               0378  12350000
         CH    @F,24(0,@9)                                        0378  12360000
         BC    10,@9D2                                            0378  12370000
         LR    @6,@F                                              0379  12380000
         BC    15,@9D1                                            0380  12390000
*                                   /*ELSE, SET R6 TO FD LENGTH. */     12400000
*            ELSE R6 = FDLGTH;                                          12410000
@9D2     LH    @6,24(0,@9)                                        0380  12420000
*                                   /*CALCULATE FROM ADR. */            12430000
*            R7 = FDFROMAD + FDLGTH - R6;                               12440000
@9D1     LCR   @7,@6                                              0381  12450000
         LH    @0,24(0,@9)                                        0381  12460000
         ALR   @7,@0                                              0381  12470000
         AL    @7,44(0,@9)                                        0381  12480000
*                                   /*CALCULATE TO ADR. */              12490000
*            R8 = ADDR(Q) + 4 - R6;                                     12500000
         LCR   @F,@6                                              0382  12510000
         AH    @F,@D3                                             0382  12520000
         LA    @0,216(0,@5)                                       0382  12530000
         AR    @F,@0                                              0382  12540000
         LR    @8,@F                                              0382  12550000
*                                   /*MOVE BINARY NO. INTO 'Q'. */      12560000
*            R8 -> AREA(1:R6) = R7 -> AREA(1:R6);                       12570000
         LR    @E,@7                                              0383  12580000
         LR    @1,@6                                              0383  12590000
         BCTR  @1,0                                               0383  12600000
         LR    @A,@8                                              0383  12610000
         EX    @1,@MVC                                            0383  12620000
*            R4 = Q(1:4);                                               12630000
         L     @4,216(0,@5)                                       0384  12640000
*         GO TO A7R3;                                                   12650000
         BC    15,A7R3                                            0385  12660000
*                              /*************************************** 12670000
*                              /**IF PD OR ZD FORMAT, CONVERT PACKED  * 12680000
*                              /** DECIMAL NO. TO BINARY.             * 12690000
*                              /*************************************** 12700000
*                                   /*CONVERT PACKED NO. IN 'Q' TO */   12710000
*                                   /*BINARY.                      */   12720000
* A7R2:                                                                 12730000
*         IF Q(1:8) >= '000002147483647C'X THEN                         12740000
A7R2     CLC   216(8,@5),@X12                                     0386  12750000
         BC    04,@9D0                                            0386  12760000
*         DO;                                                           12770000
* MESS6:                                                                12780000
*         MS = 6;                                                       12790000
MESS6    LA    @F,6                                               0388  12800000
         STH   @F,406(0,@5)                                       0388  12810000
*         GOTO ERROR1;                                                  12820000
         BC    15,ERROR1                                          0389  12830000
*         END;                                                          12840000
*         GEN (CVB  R4,Q(R5));                                          12850000
@9D0     EQU   *                                                  0391  12860000
         CVB  R4,Q(R5)                                                  12870000
         DS    0H                                                       12880000
* A7R3:                                                                 12890000
*         R0 = FDINDNUM;                                                12900000
A7R3     L     @0,20(0,@9)                                        0392  12910000
* INDEXIT:                                                              12920000
*         R0 = R0 - 1;                                                  12930000
INDEXIT  LR    @F,@0                                              0393  12940000
         BCTR  @F,0                                               0393  12950000
         LR    @0,@F                                              0393  12960000
*         R4 = R4 + 1;                                                  12970000
         AH    @4,@D7                                             0394  12980000
*         IF R4 = BINARYMX THEN DO;                                     12990000
         C     @4,BINARYMX                                        0395  13000000
         BC    07,@9CF                                            0395  13010000
*         IF R0 = 0 THEN                                                13020000
         LTR   @0,@0                                              0397  13030000
*         GOTO A7R33;                                                   13040000
         BC    08,A7R33                                           0398  13050000
*         GOTO MESS6;                                                   13060000
         BC    15,MESS6                                           0399  13070000
*         END;                                                          13080000
*         IF R0 = 0 THEN                                                13090000
@9CF     LTR   @0,@0                                              0401  13100000
*         GOTO A7R33;                                                   13110000
         BC    08,A7R33                                           0402  13120000
*         GOTO INDEXIT;                                                 13130000
         BC    15,INDEXIT                                         0403  13140000
*                                   /*ADD INDEX NO. TO R4. */           13150000
*                              /*************************************** 13160000
*                              /**AT THIS POINT REG. 4 CONTAINS THE   * 13170000
*                              /** INDEXED BINARY NO.  IT MUST NOW BE * 13180000
*                              /** CONVERTED BACK TO ITS ORIGINAL     * 13190000
*                              /** FORMAT.                            * 13200000
*                              /*************************************** 13210000
*                                   /*TEST IF RANGE VALUE IS 0. */      13220000
* A7R33:                                                                13230000
*         IF FDRANGE = 0 THEN GO TO A7R4;                               13240000
A7R33    CLC   36(4,@9),@D1                                       0404  13250000
         BC    08,A7R4                                            0405  13260000
*                                   /*TEST IF VALUE EXCEEDS RANGE. */   13270000
*                                   /*IF YES, DONT CHANGE VALUE IN FD * 13280000
*                                   /* TABLE.                         * 13290000
*         IF R4 > FDRANC  THEN GO TO ABCD;                              13300000
         C     @4,36(0,@9)                                        0406  13310000
         BC    02,ABCD                                            0407  13320000
*                                   /*TEST IF BI FORMAT. */             13330000
*  A7R4:  IF FDFORMAT = 'BI' THEN DO;                                   13340000
A7R4     CLC   30(2,@9),@C13                                      0408  13350000
         BC    07,@9CE                                            0408  13360000
*                                   /*PUT NO. IN 'Q'. */                13370000
*            Q(1:4) = R4;                                               13380000
         ST    @4,@TEMP4                                          0410  13390000
         MVC   216(4,@5),@TEMP4                                   0410  13400000
*         GO TO A7R5;                                                   13410000
         BC    15,A7R5                                            0411  13420000
*         END;                                                          13430000
*                                   /*CONVERT BINARY NO. TO PACKED */   13440000
*                                   /* DECIMAL.                    */   13450000
*            GEN( CVD  R4,Q(R5));                                       13460000
@9CE     EQU   *                                                  0413  13470000
          CVD  R4,Q(R5)                                                 13480000
         DS    0H                                                       13490000
*                                   /*TEST IF PD FORMAT. */             13500000
*         IF FDFORMAT = 'PD' THEN DO;                                   13510000
         CLC   30(2,@9),@C11                                      0414  13520000
         BC    07,@9CD                                            0414  13530000
*                                   /*MOVE PACKED NO. OR BINARY NO. */  13540000
*                                   /* INTO FD FIELD.               */  13550000
*  A7R5:     R7 -> AREA(1:R6) = R8 -> AREA(1:R6);                       13560000
A7R5     LR    @E,@8                                              0416  13570000
         LR    @1,@6                                              0416  13580000
         BCTR  @1,0                                               0416  13590000
         LR    @A,@7                                              0416  13600000
         EX    @1,@MVC                                            0416  13610000
*         GO TO ABCD;                                                   13620000
         BC    15,ABCD                                            0417  13630000
*         END;                                                          13640000
*                                   /*TEST IF ZD FORMAT. */             13650000
*         IF FDFORMAT = 'ZD' THEN DO;                                   13660000
@9CD     CLC   30(2,@9),@C10                                      0419  13670000
         BC    07,@9CC                                            0419  13680000
*                                   /*SHIFT R6 LEFT 4 BITS FOR UNPACK * 13690000
*                                   /* INSTRUCTION.                   * 13700000
*            R6 = R6 * 16;                                              13710000
         SLA   @6,4                                               0421  13720000
*                                   /*UNPACK NO. INTO FD FIELD. */      13730000
*            GEN( EX  R6,UNPACK);                                       13740000
          EX  R6,UNPACK                                                 13750000
         DS    0H                                                       13760000
*                                   /*CALCULATE ADR. OF LO-ORDER BYTE * 13770000
*                                   /* OF FD FIELD.                   * 13780000
*            R4 = FDFROMAD + FDLGTH - 1;                                13790000
         L     @4,@D8                                             0423  13800000
         LH    @0,24(0,@9)                                        0423  13810000
         ALR   @4,@0                                              0423  13820000
         AL    @4,44(0,@9)                                        0423  13830000
*                                   /*OR A 'F0' INTO LO-ORDER BYTE TO * 13840000
*                                   /* MAKE CHAR. A VALID EBCDIC NO.  * 13850000
*            R4 -> AREA(1) = R4 -> AREA(1) | 'F0'X;                     13860000
         OI    0(@4),X'F0'                                        0424  13870000
*         GO TO ABCD;                                                   13880000
         BC    15,ABCD                                            0425  13890000
*         END;                                                          13900000
*  PACK:     GEN( PACK  Q(8,R5),0(1,R7));                               13910000
@9CC     EQU   *                                                  0427  13920000
PACK      PACK  Q(8,R5),0(1,R7)                                         13930000
         DS    0H                                                       13940000
*  UNPACK:   GEN( UNPK  0(1,R7),Q(8,R5));                               13950000
UNPACK    UNPK  0(1,R7),Q(8,R5)                                         13960000
         DS    0H                                                       13970000
*                    /************************************************* 13980000
*                    /** PROCESS RANDOM FORMAT NO.                    * 13990000
*                    /**   'U' CONTAINS LAST RANDOM NO.               * 14000000
*                    /************************************************* 14010000
*  A7R6:;                                                               14020000
*         R6 = U ;                     /* PICK UP LAST RANDOM # A45200* 14030000
A7R6     L     @6,624(0,@5)                                       0430  14040000
*         GENERATE ;                                                    14050000
         LA    R7,1                    SET ALL FF IN R7          A45200 14060000
         LCR   R7,R7                   FOR SUBTRACTING           A45200 14070000
         SRDL  R6,8                    SHIFT TO RETAIN           A45200 14080000
         SLL   R6,8                    CLEAN NUMBER              A45200 14090000
         SLR   R7,R6                   SUBTRACT TO NUMBER        A45200 14100000
         SRL   R6,8                    SHIFT TO GET BYTE         A45200 14110000
         SLDL  R6,8                    PLACE IN                  A45200 14120000
         DS    0H                                                       14130000
*         R7 = 524293 ;                /* INIT MULTIPLIER       A45200* 14140000
         L     @7,@D9                                             0432  14150000
*         GENERATE ;                                                    14160000
         MR    R6,R6                   MULTIPLY FOR NEW RANDOM   A45200 14170000
         LA    R6,3201                 LOAD NUMBER FOR ADD       A45200 14180000
         ALR   R7,R6                   ADD VALUE RANDOMIZING     A45200 14190000
         LR    R6,R7                   SAVE NEW VALUE            A45200 14200000
         SLL   R7,24                   SHIFT TO ADD RANDOM #     A45200 14210000
         ALR   R7,R6                   ADD TO NEW # TO AVOID     A45200 14220000
         SRL   R6,8                    PAIR/UNPAIR SEQUENCE      A45200 14230000
         SLDL  R6,8                    RESULT RANDOM             A45200 14240000
         DS    0H                                                       14250000
         DS    0H                                                       14260000
*         U = R6 ;                     /* NEW RANDOM #          A45200* 14270000
         ST    @6,624(0,@5)                                       0434  14280000
*                                   /*TEST IF FD LENGTH IS GT 4. */     14290000
*                                   /*IF YES, SET R6 = 4.        */     14300000
*         IF FDLGTH > 4 THEN R6 = 4;                                    14310000
         LA    @F,4                                               0435  14320000
         CH    @F,24(0,@9)                                        0435  14330000
         BC    10,@9CB                                            0435  14340000
         LR    @6,@F                                              0436  14350000
         BC    15,@9CA                                            0437  14360000
*                                   /*ELSE, R6 = FD LENGTH. */          14370000
*            ELSE R6 = FDLGTH;                                          14380000
@9CB     LH    @6,24(0,@9)                                        0437  14390000
*                                   /*CALCULATE FROM ADDRESS. */        14400000
*            R7 = ADDR(U) + 4 - R6;                                     14410000
@9CA     LCR   @F,@6                                              0438  14420000
         AH    @F,@D3                                             0438  14430000
         LA    @0,624(0,@5)                                       0438  14440000
         AR    @F,@0                                              0438  14450000
         LR    @7,@F                                              0438  14460000
*                                   /*CALCULATE TO ADDRESS. */          14470000
*            R8 = FDFROMAD + FDLGTH - R6;                               14480000
         LCR   @8,@6                                              0439  14490000
         LH    @0,24(0,@9)                                        0439  14500000
         ALR   @8,@0                                              0439  14510000
         AL    @8,44(0,@9)                                        0439  14520000
*                                   /*MOVE NEW RANDOM NO. INTO FD TABLE 14530000
*            R8 -> AREA(1:R6) = R7 -> AREA(1:R6);                       14540000
         LR    @E,@7                                              0440  14550000
         LR    @1,@6                                              0440  14560000
         BCTR  @1,0                                               0440  14570000
         LR    @A,@8                                              0440  14580000
         EX    @1,@MVC                                            0440  14590000
*                                   /*RANDOM NO. IS PROCESSED. */       14600000
*         GO TO ABCD;                                                   14610000
         BC    15,ABCD                                            0441  14620000
*                    /************************************************* 14630000
*                    /** PROCESS SHIFT OR TRUNCATE ACTIONS.           * 14640000
*                    /************************************************* 14650000
*  A7R8:;                                                               14660000
*         IF FXACTION = '1'B THEN GO TO ABCD /**BR NO ACTION TO DO**/;  14670000
A7R8     TM    32(@9),B'00100000'                                 0443  14680000
         BC    01,ABCD                                            0444  14690000
*         IF STACTION ¬= '1'B THEN GO TO ABCD1 /**BR NOT S OR T **/;    14700000
         TM    32(@9),B'00000010'                                 0445  14710000
         BC    12,ABCD1                                           0446  14720000
*         IF FDMLGTH > 1 THEN DO;                                       14730000
         LA    @F,1                                               0447  14740000
         CH    @F,48(0,@9)                                        0447  14750000
         BC    10,@9C9                                            0447  14760000
*               FDMLGTH = FDMLGTH- 1 /**COUNT DOWN ON MOVE LGTH**/;     14770000
         LH    @F,@D2                                             0449  14780000
         AH    @F,48(0,@9)                                        0449  14790000
         STH   @F,48(0,@9)                                        0449  14800000
*               FDFRINC = FDFRINC + FDFRINCR /**INCREASE FROM INC**/;   14810000
         SR    @F,@F                                              0450  14820000
         IC    @F,58(0,@9)                                        0450  14830000
         AH    @F,42(0,@9)                                        0450  14840000
         STH   @F,42(0,@9)                                        0450  14850000
*               FDTOINC = FDTOINC + FDTOINCR /**INCREASE TO INC**/;     14860000
         SR    @F,@F                                              0451  14870000
         IC    @F,59(0,@9)                                        0451  14880000
         AH    @F,50(0,@9)                                        0451  14890000
         STH   @F,50(0,@9)                                        0451  14900000
*               GO TO ABCD     /** BR WE ARE DONE**/;                   14910000
         BC    15,ABCD                                            0452  14920000
*         END;                                                          14930000
*               FDMLGTH = FDLGTH /**RESTORE MOVE LENGTH**/;             14940000
@9C9     MVC   48(2,@9),24(@9)                                    0454  14950000
*               FDFRINC = 0    /**RESTORE FROM INCREMENT**/;            14960000
         SR    @F,@F                                              0455  14970000
         STH   @F,42(0,@9)                                        0455  14980000
*               FDTOINC = 0    /**RESTORE TO INCREMENT**/;              14990000
         STH   @F,50(0,@9)                                        0456  15000000
*               GO TO ABCD     /**BR TO PROCESS**/;                     15010000
         BC    15,ABCD                                            0457  15020000
*                    /************************************************* 15030000
*                    /** PROCESS RIPPLE ACTION.                       * 15040000
*                    /************************************************* 15050000
*  ABCD1:;                                                              15060000
*         IF RPACTION ¬= '1'B THEN GO TO ABCD5 /**BR NOT RIPPLE**/;     15070000
ABCD1    TM    32(@9),B'00010000'                                 0459  15080000
         BC    12,ABCD5                                           0460  15090000
*         IF FDSLGTH > 1 THEN DO /**DO BELOW IF ANY COUNT LEFT**/;      15100000
         LA    @F,1                                               0461  15110000
         CH    @F,54(0,@9)                                        0461  15120000
         BC    10,@9C8                                            0461  15130000
*               FDSLGTH = FDSLGTH - 1 /**COUNT DOWN ON SEQUENCE**/;     15140000
         LH    @F,@D2                                             0463  15150000
         AH    @F,54(0,@9)                                        0463  15160000
         STH   @F,54(0,@9)                                        0463  15170000
*               FDFRINC = FDFRINC + 1 /**INCREASE FROM INC**/;          15180000
         LA    @F,1                                               0464  15190000
         AH    @F,42(0,@9)                                        0464  15200000
         STH   @F,42(0,@9)                                        0464  15210000
*               GO TO ABCD     /** BRANCH TO PROCESS**/;                15220000
         BC    15,ABCD                                            0465  15230000
*         END;                                                          15240000
*               FDSLGTH = FDSLGTHR /**RESTORE SEQ LGTH COUNTER**/;      15250000
@9C8     MVC   54(2,@9),56(@9)                                    0467  15260000
*               FDFRINC = 0    /**RESTORE FROM INCREMENT**/;            15270000
         SR    @F,@F                                              0468  15280000
         STH   @F,42(0,@9)                                        0468  15290000
*         GO TO ABCD           /** BRANCH TO PROCESS*/;                 15300000
         BC    15,ABCD                                            0469  15310000
*  ABCD5:;                                                              15320000
*            R6 = FDFROMAD + FDFRINC  /*PICKUP FROM ADDRESS. */;        15330000
ABCD5    LH    @6,42(0,@9)                                        0471  15340000
         AL    @6,44(0,@9)                                        0471  15350000
*         IF WVACTION ¬= '1'B THEN GO TO ABCD2 /**DO BELOW IF WAVE**/;  15360000
         TM    32(@9),B'00000100'                                 0472  15370000
         BC    12,ABCD2                                           0473  15380000
*                    /************************************************* 15390000
*                    /** PROCESS WAVE ACTION.                         * 15400000
*                    /************************************************* 15410000
*                                   /*DO BELOW IF FROMAD NOT BLANK. */  15420000
*         IF R6 -> AREA(1) = ' ' THEN DO;                               15430000
         CLI   0(@6),C' '                                         0474  15440000
         BC    07,@9C7                                            0474  15450000
*               FDFRINC = FDFRINC + 1 /**RESOLVE NEW FROM INCREMENT**/; 15460000
         LA    @F,1                                               0476  15470000
         AH    @F,42(0,@9)                                        0476  15480000
         STH   @F,42(0,@9)                                        0476  15490000
*               GO TO ABCD     /** BRANCH TO PROCESS**/;                15500000
         BC    15,ABCD                                            0477  15510000
*         END;                                                          15520000
*               FDFRINC = 0    /**RESTORE FROM INCREMENT**/;            15530000
@9C7     SR    @F,@F                                              0479  15540000
         STH   @F,42(0,@9)                                        0479  15550000
*               FDMLGTH = FDLGTH /**RESTORE MOVE LENGTH**/;             15560000
         MVC   48(2,@9),24(@9)                                    0480  15570000
*               GO TO ABCD /**BRANCH FINISHED WAVEING**/;               15580000
         BC    15,ABCD                                            0481  15590000
*  ABCD2:;                                                              15600000
*         IF ROACTION ¬= '1'B THEN GO TO ABCD /**BRANCH IF NOT ROLL**/; 15610000
ABCD2    TM    32(@9),B'00001000'                                 0483  15620000
         BC    12,ABCD                                            0484  15630000
*  /**IF USER PATTERN IS ALLOWED IN THE FUTURE THIS BRANCH**/           15640000
*  /**SHOULD GO TO TEST A USER SWITCH SET WHEN THE ACTION IS TAKEN**/   15650000
*  /** FROM CONTROL CARD DURING INITIAL SCAN**/                         15660000
*                    /************************************************* 15670000
*                    /** PROCESS ROLL ACTION.                         * 15680000
*                    /************************************************* 15690000
*         IF FDFRINCR = '01'X THEN GO TO ABCD3 /**BR TO TEST LEFT BL**/ 15700000
         CLI   58(@9),X'01'                                       0485  15710000
         BC    08,ABCD3                                           0486  15720000
*         R6 = R6 + FDLGTH - 1 /**POINT AT END OF FIELD**/;             15730000
         LH    @F,@D2                                             0487  15740000
         AH    @F,24(0,@9)                                        0487  15750000
         AR    @6,@F                                              0487  15760000
*         IF R6 -> AREA(1) ¬= ' ' THEN DO;                              15770000
         CLI   0(@6),C' '                                         0488  15780000
         BC    08,@9C6                                            0488  15790000
*               FDFRINCR = '01'X /**INDICATE ROLL TO LEFT**/;           15800000
         MVI   58(@9),X'01'                                       0490  15810000
*         FDFRINC = FDFRINC + 1 /**RESOLVE FROM IINCREMENT**/;          15820000
         LA    @F,1                                               0491  15830000
         AH    @F,42(0,@9)                                        0491  15840000
         STH   @F,42(0,@9)                                        0491  15850000
*               GO TO ABCD     /** BRANCH TO PROCESS**/;                15860000
         BC    15,ABCD                                            0492  15870000
*         END;                                                          15880000
*         FDFRINC = FDFRINC - 1 /**RESOLVE FROM INC-ROLL TO RIGHT**/;   15890000
@9C6     LH    @F,@D2                                             0494  15900000
         AH    @F,42(0,@9)                                        0494  15910000
         STH   @F,42(0,@9)                                        0494  15920000
*               GO TO ABCD     /**BRANCH TO PROCESS**/;                 15930000
         BC    15,ABCD                                            0495  15940000
*  ABCD3:;                                                              15950000
*                                   /*BRANCH NEED TO RESTORE. */        15960000
*         IF R6 -> AREA(1) ¬= ' ' THEN GO TO ABCD4;                     15970000
ABCD3    CLI   0(@6),C' '                                         0497  15980000
         BC    07,ABCD4                                           0498  15990000
*         FDFRINC = FDFRINC + 1 /**RESOLVE NEW FROM INCREMENT**/;       16000000
         LA    @F,1                                               0499  16010000
         AH    @F,42(0,@9)                                        0499  16020000
         STH   @F,42(0,@9)                                        0499  16030000
*               GO TO ABCD     /**BRANCH TO PROCESS**/;                 16040000
         BC    15,ABCD                                            0500  16050000
*  ABCD4:;                                                              16060000
*               FDFRINCR = '02'X /** CHANGE INDICATOR**/;               16070000
ABCD4    MVI   58(@9),X'02'                                       0502  16080000
*         FDFRINC = FDFRINC - 1 /**RESOLVE NEW FROM INCREMENT**/;       16090000
         LH    @F,@D2                                             0503  16100000
         AH    @F,42(0,@9)                                        0503  16110000
         STH   @F,42(0,@9)                                        0503  16120000
*         GO TO ABCD           /** BRANCH TO PROCESS**/;                16130000
*                    /************************************************* 16140000
*                    /**  FD TABLE HAS BEEN PROCESSED.  THIS SECTION  * 16150000
*                    /**    TESTS IF ANY MORE TABLES ARE TO BE PRO-   * 16160000
*                    /**    CESSED.                                   * 16170000
*                    /************************************************* 16180000
*  ABCD:;                                                               16190000
*                                   /*RESTORE REG 4. */                 16200000
*            R4 = GCADDR;                                               16210000
ABCD     L     @4,376(0,@5)                                       0506  16220000
*                                   /*UPDATE PTR TO NEXT FD ADR. */     16230000
*  A7J3:     CURFD = CURFD + 4;                                         16240000
A7J3     LA    @F,4                                               0507  16250000
         A     @F,352(0,@5)                                       0507  16260000
         ST    @F,352(0,@5)                                       0507  16270000
*                                   /*TEST IF LAST FD ADR. IN GM. */    16280000
*         IF CURFD -> AREA(1:4) ¬= 0 THEN GO TO A7J2;                   16290000
         L     @1,352(0,@5)                                       0508  16300000
         CLC   0(4,@1),@D1                                        0508  16310000
         BC    07,A7J2                                            0509  16320000
*                                   /*TEST IF ANOTHER FD ADR. GM. */    16330000
*         IF CURFDGM -> NXTFDGM = 0 THEN GO TO A7A5;                    16340000
         SR    @F,@F                                              0510  16350000
         L     @2,632(0,@5)                                       0510  16360000
         C     @F,0(0,@2)                                         0510  16370000
         BC    08,A7A5                                            0511  16380000
*                                   /*GET ADR. OF NEXT FD ADR. GM. */   16390000
*            CURFDGM = CURFDGM -> NXTFDGM;                              16400000
         MVC   632(4,@5),0(@2)                                    0512  16410000
*                                   /*LOOP BACK TO PROCESS NORE FD TABS 16420000
*         GO TO A7J1;                                                   16430000
         BC    15,A7J1                                            0513  16440000
* /******************************************************************** 16450000
* /**  CHECK NO. OF RECORDS TO GENERATE.                              * 16460000
* /**    IF 'EODSTOP' SW. IS ON, RECORDS ARE WRITTEN UNTIL AN         * 16470000
* /**      END-OF DATA OCCURS.                                        * 16480000
* /******************************************************************** 16490000
*                                   /*TEST IF EODSTOP SWITCH IS ON. */  16500000
*  A7A5:  IF EODSTOP = ON THEN GO TO A7A12;                             16510000
A7A5     CLC   556(1,@5),ON                                       0514  16520000
         BC    08,A7A12                                           0515  16530000
*                                   /*DECREMENT RECORD COUNTER.*/       16540000
*            RECREM = RECREM - 1;                                       16550000
         LH    @F,@D2                                             0516  16560000
         A     @F,348(0,@5)                                       0516  16570000
         ST    @F,348(0,@5)                                       0516  16580000
*                                   /*TEST IF ALL RECORDS WRITTEN FOR * 16590000
*                                   /* THIS CREATE ENTRY.             * 16600000
*         IF RECREM ¬= 0 THEN GO TO A7A12;                              16610000
         SR    @F,@F                                              0517  16620000
         C     @F,348(0,@5)                                       0517  16630000
         BC    07,A7A12                                           0518  16640000
* /******************************************************************** 16650000
* /**  CHECK FOR ANY MORE CREATE ENTRIES.                             * 16660000
* /**    IF THE CREATE CARD WASN'T IN A REPEAT GROUP, THEN THERE ARE  * 16670000
* /**     NO MORE CREATE ENTRIES.                                     * 16680000
* /******************************************************************** 16690000
*                                   /*TEST IF NEXT CREATE POINTER IS 0. 16700000
*  A7A56: IF NXTCRTE ¬= 0 THEN DO;                                      16710000
A7A56    SR    @F,@F                                              0519  16720000
         C     @F,0(0,@4)                                         0519  16730000
         BC    08,@9C5                                            0519  16740000
*                                   /*IT'S NOT 0.  POINT TO NEXT */     16750000
*                                   /* CREATE ENTRY.             */     16760000
*            CURCRTE = NXTCRTE;                                         16770000
         MVC   316(4,@5),0(@4)                                    0521  16780000
*                                   /*GO TO PROCESS NEW CREATE ENTRY.*/ 16790000
*         GO TO A7A11;                                                  16800000
         BC    15,A7A11                                           0522  16810000
*         END;                                                          16820000
*                                   /*TEST IF NEXT CREATE GM POINTER*/  16830000
*                                   /* IS 0.                        */  16840000
*         IF CURCRGM -> NXTCRGM ¬= 0 THEN DO;                           16850000
@9C5     SR    @F,@F                                              0524  16860000
         L     @1,320(0,@5)                                       0524  16870000
         C     @F,0(0,@1)                                         0524  16880000
         BC    08,@9C4                                            0524  16890000
*                                   /*IT'S NOT 0. UPDATE CURRENT CREATE 16900000
*                                   /* GM POINTER.                      16910000
*            CURCRGM = CURCRGM -> NXTCRGM;                              16920000
         MVC   320(4,@5),0(@1)                                    0526  16930000
*                                   /*UPDATE CURRENT CREATE POINTER.*/  16940000
*            CURCRTE = CURCRGM + 4;                                     16950000
         LA    @F,4                                               0527  16960000
         A     @F,320(0,@5)                                       0527  16970000
         ST    @F,316(0,@5)                                       0527  16980000
*                                   /*GO TO PROCESS NEW CREATE ENTRY.*/ 16990000
*         GO TO A7A11;                                                  17000000
         BC    15,A7A11                                           0528  17010000
*         END;                                                          17020000
*                                   /*DECREMENT REPEATNO.*/             17030000
*            REPEATNO = REPEATNO - 1;                                   17040000
@9C4     LH    @F,@D2                                             0530  17050000
         AH    @F,16(0,@5)                                        0530  17060000
         STH   @F,16(0,@5)                                        0530  17070000
*                                   /*TEST IF REPEATNO = 0. IF NOT,   * 17080000
*                                   /* LOOP BACK TO PROCESS ALL       * 17090000
*                                   /* CREATE ENTRIES AGAIN.          * 17100000
*         IF REPEATNO ¬= 0 THEN GO TO A7A1;   /* REPEATNO NOT 0OY01163* 17110000
         SR    @F,@F                                              0531  17120000
         CH    @F,16(0,@5)                                        0531  17130000
         BC    07,A7A1                                            0532  17140000
* /******************************************************************** 17150000
* /** CREATE CLEAN UP - ALL CREATE ENTRIES HAVE BEEN PROCESSED.       * 17160000
* /**           CREATE TABLES, PICTURE TABLES, & NAME TABLES MUST BE  * 17170000
* /**           FREED. ALSO, ANY USER EXIT ROUTINES MUST BE DELETED.  * 17180000
* /******************************************************************** 17190000
*  A7A6:;                                                               17200000
*                    /************************************************* 17210000
*                    /** FLUSH SYSIN DATA RECORDS.                    * 17220000
*                    /**   IF INPUT=SYSIN WAS SPECIFIED AND THE DELIM-* 17230000
*                    /**    WASN'T READ, SYSIN MUST BE FLUSHED TO THE * 17240000
*                    /**    NEXT CONTROL CARD.                        * 17250000
*                    /************************************************* 17260000
*                                   /*TEST IF THERE WERE ANY CREATE  */ 17270000
*                                   /* ENTRIES WITH SYSIN INPUT DCB. */ 17280000
*         IF SYSISW = OFF THEN GO TO A7A62;                             17290000
A7A6     CLC   569(1,@5),OFF                                      0534  17300000
         BC    08,A7A62                                           0535  17310000
*                                   /*TEST IF WE HAD AN EOD ON SYSIN. * 17320000
*  A7A61:                                                               17330000
*         IF SYSINEOD = ON THEN GO TO A7A62;                            17340000
A7A61    CLC   579(1,@5),ON                                       0536  17350000
         BC    08,A7A62                                           0537  17360000
*                                   /*FLUSH AN INPUT RECORD. */         17370000
*                                   /*PUT SYSIN DCB ADR IN REG 1. */    17380000
*         R1 = ADDR(SYSI);                                              17390000
         LA    @1,116(0,@5)                                       0538  17400000
*         R0 = ADDR(MESSAGE);      /**ADDRESS OF FLUSH BUFFER YA01453** 17410000
         LA    @0,668(0,@5)                                       0539  17420000
*  A7FLUSH:;                                                            17430000
*                                   /*ISSUE GET MACRO. */               17440000
*            GEN( GET  (R1),(R0));                                      17450000
A7FLUSH   GET  (R1),(R0)                                                17460000
         DS    0H                                                       17470000
*                          /*TEST IF A DELIMITER CARD WAS READ YA01453* 17480000
*         IF MESSAGE(1:4)=DELIM THEN GO TO A7A62;            /*YA01453* 17490000
         CLC   668(4,@5),344(@5)                                  0542  17500000
*               GO TO A7A61    /**BR NOT AT DELIM YET**/;               17510000
         BC    07,A7A61                                           0544  17520000
*                    /************************************************* 17530000
*                    /**  THIS SECTION WILL FREE TABLE SPACE.         * 17540000
*                    /************************************************* 17550000
*                                   /*IF 'CRTABPT' IS 0, THERE ARE NO * 17560000
*                                   /* TABLES TO FREE.                * 17570000
*  A7A62: IF CRTABPT = 0 THEN GO TO A7A9;                               17580000
A7A62    SR    @F,@F                                              0545  17590000
         C     @F,312(0,@5)                                       0545  17600000
         BC    08,A7A9                                            0546  17610000
*                                   /*INITIALIZE POINTERS TO 1ST */     17620000
*                                   /* CREATE ENTRY.             */     17630000
*            CURCRGM = CRTABPT;                                         17640000
         MVC   320(4,@5),312(@5)                                  0547  17650000
*            CURCRTE = CURCRGM + 4;                                     17660000
         LA    @F,4                                               0548  17670000
         A     @F,320(0,@5)                                       0548  17680000
         ST    @F,316(0,@5)                                       0548  17690000
*  A7A7:;                                                               17700000
*                                   /*BASE REG FOR CREATE ENTRY.*/      17710000
*            R4 = CURCRTE;                                              17720000
A7A7     L     @4,316(0,@5)                                       0550  17730000
*                              /*************************************** 17740000
*                              /**FREE PICTURE TABLE.                 * 17750000
*                              /*************************************** 17760000
*                                   /*TEST IF PICTURE POINTER IS 0.*/   17770000
*         IF PICPTR ¬= 0 THEN DO;                                       17780000
         SR    @F,@F                                              0551  17790000
         C     @F,16(0,@4)                                        0551  17800000
         BC    08,@9C3                                            0551  17810000
*                                   /*PUT ADR OF AREA TO FREE IN*/      17820000
*                                   /* FREEMAIN PARAMETER.       */     17830000
*            GCADDR = PICPTR;                                           17840000
         MVC   376(4,@5),16(@4)                                   0553  17850000
*                                   /*PUT LENGTH TO FREE IN REG 3.*/    17860000
*            R3 = PICPTR -> PICLGTH + 6;                                17870000
         LA    @F,6                                               0554  17880000
         L     @1,16(0,@4)                                        0554  17890000
         AH    @F,4(0,@1)                                         0554  17900000
         LR    @3,@F                                              0554  17910000
*                                   /*POINT TO ADDRESS PARAMETER.*/     17920000
*            R2 = ADDR(GCADDR);                                         17930000
         LA    @2,376(0,@5)                                       0555  17940000
*                                   /*POINT TO PARAMETER LIST.*/        17950000
*            R1 = ADDR(GETMLIST);                                       17960000
         LA    @1,364(0,@5)                                       0556  17970000
*                                   /*FREE SPACE FOR PICTURE.*/         17980000
*            GEN( FREEMAIN  E,LV=(R3),A=(R2),SP=0,MF=(E,(1)));          17990000
          FREEMAIN  E,LV=(R3),A=(R2),SP=0,MF=(E,(1))                    18000000
         DS    0H                                                       18010000
*         END;                                                          18020000
*                              /*************************************** 18030000
*                              /**FREE FD ADDRESS TABLES.             * 18040000
*                              /*************************************** 18050000
*                                   /*TEST IF ANY FD'S FOR THIS */      18060000
*                                   /* CREATE ENTRY.            */      18070000
*         IF FDADTAB = 0 THEN GO TO A7A75;                              18080000
@9C3     SR    @F,@F                                              0559  18090000
         C     @F,24(0,@4)                                        0559  18100000
         BC    08,A7A75                                           0560  18110000
*                                   /*POINT TO 1ST FD ADR. GM. */       18120000
*            R6 = FDADTAB;                                              18130000
         L     @6,24(0,@4)                                        0561  18140000
*                                   /*SAVE PTR TO NEXT FD ADR. GM. */   18150000
*  A7A73:    CURFDGM = R6 -> NXTFDGM;                                   18160000
A7A73    MVC   632(4,@5),0(@6)                                    0562  18170000
*                                   /*FREE 88 BYTE FD ADR. TABLE. */    18180000
*            R0 = 88;                                                   18190000
         LA    @0,88                                              0563  18200000
*                                   /*ISSUE FREEMAIN MACRO. */          18210000
*            GEN( FREEMAIN  R,LV=(0),A=(6));                            18220000
          FREEMAIN  R,LV=(0),A=(6)                                      18230000
         DS    0H                                                       18240000
*                                   /*PUT PTR TO NEXT GM IN R6. */      18250000
*            R6 = CURFDGM;                                              18260000
         L     @6,632(0,@5)                                       0565  18270000
*                                   /*TEST IF PTR TO NEXT GM IS 0. */   18280000
*         IF R6 ¬= 0 THEN GO TO A7A73;                                  18290000
         LTR   @6,@6                                              0566  18300000
         BC    07,A7A73                                           0567  18310000
*                                   /*TEST IF NEXT CREATE PTR IS 0.*/   18320000
*  A7A75: IF NXTCRTE ¬= 0 THEN DO;                                      18330000
A7A75    SR    @F,@F                                              0568  18340000
         C     @F,0(0,@4)                                         0568  18350000
         BC    08,@9C2                                            0568  18360000
*                                   /*POINT TO NEXT CREATE ENTRY.*/     18370000
*            CURCRTE = NXTCRTE;                                         18380000
         MVC   316(4,@5),0(@4)                                    0570  18390000
*                                   /*LOOP BACK TO PROCESS NEW CREATE * 18400000
*                                   /* ENTRY.                         * 18410000
*         GO TO A7A7;                                                   18420000
         BC    15,A7A7                                            0571  18430000
*         END;                                                          18440000
*                                   /*TEST IF NEXT CREATE GETMAIN */    18450000
*                                   /* POINTER IS 0.              */    18460000
*         IF CURCRGM -> NXTCRGM ¬= 0 THEN DO;                           18470000
@9C2     SR    @F,@F                                              0573  18480000
         L     @1,320(0,@5)                                       0573  18490000
         C     @F,0(0,@1)                                         0573  18500000
         BC    08,@9C1                                            0573  18510000
*                                   /*UPDATE CURRENT CREATE GM PTR.*/   18520000
*            CURCRGM = CURCRGM -> NXTCRGM;                              18530000
         MVC   320(4,@5),0(@1)                                    0575  18540000
*                                   /*UPDATE CURRENT CREATE ENTRY PTR.* 18550000
*            CURCRTE = CURCRGM + 4;                                     18560000
         LA    @F,4                                               0576  18570000
         A     @F,320(0,@5)                                       0576  18580000
         ST    @F,316(0,@5)                                       0576  18590000
*                                   /*LOOP BACK TO PROCESS NEW CREATE * 18600000
*                                   /* ENTRY.                         * 18610000
*         GO TO A7A7;                                                   18620000
         BC    15,A7A7                                            0577  18630000
*         END;                                                          18640000
*                              /*************************************** 18650000
*                              /**FREE CREATE TABLES.                 * 18660000
*                              /*************************************** 18670000
*                                   /*INITIALIZE CURRENT CREATE GM PTR. 18680000
*            CURCRGM = CRTABPT;                                         18690000
@9C1     MVC   320(4,@5),312(@5)                                  0579  18700000
*  A7A8:;                                                               18710000
*                                   /*PUT ADR OF CREATE TABLE IN */     18720000
*                                   /* FREEMAIN PARAMETER LIST.  */     18730000
*            GCADDR = CURCRGM;                                          18740000
A7A8     MVC   376(4,@5),320(@5)                                  0581  18750000
*                                   /*GET ADR OF NEXT CREATE GETMAIN.*/ 18760000
*            CURCRGM = CURCRGM -> NXTCRGM;                              18770000
         L     @1,320(0,@5)                                       0582  18780000
         MVC   320(4,@5),0(@1)                                    0582  18790000
*                                   /*POINT TO ADDRESS PARAMETER.*/     18800000
*            R2 = ADDR(GCADDR);                                         18810000
         LA    @2,376(0,@5)                                       0583  18820000
*                                   /*POINT TO PARAMETER LIST.*/        18830000
*            R1 = ADDR(GETMLIST);                                       18840000
         LA    @1,364(0,@5)                                       0584  18850000
*                                   /*FREE CREATE TABLE SPACE.*/        18860000
*            GEN( FREEMAIN  E,LV=512,A=(R2),SP=0,MF=(E,(1)));           18870000
          FREEMAIN  E,LV=512,A=(R2),SP=0,MF=(E,(1))                     18880000
         DS    0H                                                       18890000
*                                   /*TEST IF NEXT GM PTR IS 0. IF NOT* 18900000
*                                   /* LOOP BACK TO FREE NEXT GM.     * 18910000
*         IF CURCRGM ¬= 0 THEN GO TO A7A8;                              18920000
         SR    @F,@F                                              0586  18930000
         C     @F,320(0,@5)                                       0586  18940000
         BC    07,A7A8                                            0587  18950000
*                    /************************************************* 18960000
*                    /**  THIS SECTION INITIALIZES POINTERS AND SW-   * 18970000
*                    /**    ITCHES FOR INITIAL ENTRY TO MODULE        * 18980000
*                    /**    IEBCRANL.                                 * 18990000
*                    /************************************************* 19000000
*                                   /*CLEAR NAME CONTINUATION SW. */    19010000
*  A7A9:     NAMCSW = '0'X;                                             19020000
A7A9     MVI   561(@5),X'00'                                      0588  19030000
*                                   /*CLEAR PICTURE CONTINUATION SW. */ 19040000
*            PICCSW = '0'X;                                             19050000
         MVI   562(@5),X'00'                                      0589  19060000
*                                   /*CLEAR CREATE SW. */               19070000
*            CREATESW = '0'X;                                           19080000
         MVI   552(@5),X'00'                                      0590  19090000
*                                   /*CLEAR REPEAT SW. */               19100000
*            REPEATSW = '0'X;                                           19110000
         MVI   578(@5),X'00'                                      0591  19120000
*                                   /*SET 'CREATENO' TO 1. */           19130000
*            CREATENO = 1;                                              19140000
         LA    @F,1                                               0592  19150000
         STH   @F,18(0,@5)                                        0592  19160000
*                                   /*SET 'REPEATNO' TO 1. */           19170000
*            REPEATNO = 1;                                              19180000
         STH   @F,16(0,@5)                                        0593  19190000
*                                   /*SET POINTER TO 1ST CREATE TABLE * 19200000
*                                   /* TO 0.                          * 19210000
*            CRTABPT = 0;                                               19220000
         SR    @F,@F                                              0594  19230000
         ST    @F,312(0,@5)                                       0594  19240000
*                                   /*PUT ADR. OF SYSI DCB IN BASE PTR. 19250000
*            DCBPTR = ADDR(SYSI);                                       19260000
         LA    @F,116(0,@5)                                       0595  19270000
         ST    @F,300(0,@5)                                       0595  19280000
*                                   /*RESTORE SYSIN DCB SYNAD FOR IEBDG 19290000
*            SYNAD = PARM;                                              19300000
         L     @1,300(0,@5)                                       0596  19310000
         MVC   56(4,@1),12(@5)                                    0596  19320000
*                                   /*RESTORE SYSIN EODAD FOR  @ZA24201 19330000
*                                   /*READING CONTROL STMT'S   @ZA24201 19340000
*            EODAD = SAVEEOD;                                /*@ZA24201 19350000
         MVC   33(3,@1),SAVEEOD                                   0597  19360000
* /******************************************************************** 19370000
* /**    NORMAL RETURN.                                               * 19380000
* /**      CONTROL IS PASSED TO IEBCRANL WHICH RETURNS TO IEBDG TO    * 19390000
* /**       READ THE NEXT CONTROL CARD.                               * 19400000
* /******************************************************************** 19410000
*                                   /*GO TO IEBDG TO READ NEXT CONTROL* 19420000
*                                   /* STATEMENT.                     * 19430000
*         RETURN;                                                       19440000
         BC    15,@EL01                                           0598  19450000
* /******************************************************************** 19460000
* /**    ERROR RETURN.                                                * 19470000
* /**      CONTROL IS PASSED TO IEBCRANL WHICH RETURNS TO IEBDG TO    * 19480000
* /**       PRINT A MESSAGE, SET THE 'NOGO' SW., AND READ THE NEXT    * 19490000
* /**       CONTROL CARD.                                             * 19500000
* /******************************************************************** 19510000
*                                   /*SET CONDITION CODE TO 8. */       19520000
*  ERROR1:   CONCODE = 8;                                               19530000
ERROR1   LA    @F,8                                               0599  19540000
         STH   @F,306(0,@5)                                       0599  19550000
*                                   /*SET EPSW = 1 TO PRINT A MSG, SET* 19560000
*                                   /* NOGO, & READ NEXT CARD.          19570000
*  ERROR:    EPSW = 1;                                                  19580000
ERROR    MVI   568(@5),1                                          0600  19590000
*                                   /*GO TO CREATE CLEANUP. */          19600000
*         GO TO A7A6;                                                   19610000
         BC    15,A7A6                                            0601  19620000
* /******************************************************************** 19630000
* /** MOVEROUT - THIS SUBROUTINE WILL MOVE ONE AREA TO ANOTHER        * 19640000
* /**             REGARDLESS OF LENGTH.                               * 19650000
* /**      ENTRY - R14 IS LINKAGE REGISTER.                           * 19660000
* /**              R6 POINTS TO START OF FROM FIELD.                  * 19670000
* /**              R7 POINTS TO START OF TO FIELD.                    * 19680000
* /**              R8 CONTAINS NO. OF BYTES TO BE MOVED.              * 19690000
* /**      EXIT  - R6 POINTS TO START OF FROM FIELD ON LAST MOVE.     * 19700000
* /**              R7 POINTS TO START OF TO FIELD ON LAST MOVE.       * 19710000
* /**              R8 DESTROYED.                                      * 19720000
* /******************************************************************** 19730000
*  MOVEROUT:;                                                           19740000
*                                   /*SAVE REG 14 IN COMMON AREA. */    19750000
*            SAVE14 = R14;                                              19760000
MOVEROUT ST    @E,360(0,@5)                                       0603  19770000
*                                   /*TEST IF LENGTH IS 0 IN CASE */    19780000
*                                   /* NOTHING SHOULD BE MOVED.   */    19790000
*         IF R8 =< 0 THEN GO TO A7P2;                                   19800000
         LTR   @8,@8                                              0604  19810000
         BC    12,A7P2                                            0605  19820000
*                                   /*TEST IF LENGTH IS GT 256. IF YES, 19830000
*                                   /* PEFORM A MOVE OF 256 BYTES.      19840000
*  A7P1:  IF R8 > 256 THEN DO;                                          19850000
A7P1     CH    @8,@D10                                            0606  19860000
         BC    12,@9C0                                            0606  19870000
*                                   /*MOVE 256 BYTES.*/                 19880000
*            GEN( MVC  0(256,R7),0(R6));                                19890000
          MVC  0(256,R7),0(R6)                                          19900000
         DS    0H                                                       19910000
*                                   /*DECREMENT LENGTH 256.*/           19920000
*            R8 = R8 - 256;                                             19930000
         SH    @8,@D10                                            0609  19940000
*                                   /*INCREMENT FROM POINTER BY 256.*/  19950000
*            R6 = R6 + 256;                                             19960000
         AH    @6,@D10                                            0610  19970000
*                                   /*INCREMENT TO POINTER BY 256.*/    19980000
*            R7 = R7 + 256;                                             19990000
         AH    @7,@D10                                            0611  20000000
*                                   /*LOOP TO DO ANOTHER MOVE.*/        20010000
*         GO TO A7P1;                                                   20020000
         BC    15,A7P1                                            0612  20030000
*         END;                                                          20040000
*                                   /*DECREMENT LENGTH BY 1.*/          20050000
*            R8 = R8 - 1;                                               20060000
@9C0     BCTR  @8,0                                               0614  20070000
*                                   /*EXECUTE MOVE INSTRUCTION.*/       20080000
*            GEN( EX  R8,MOVE);                                         20090000
          EX  R8,MOVE                                                   20100000
         DS    0H                                                       20110000
*                                   /*RESTORE REG 14 FROM COMMON AREA.  20120000
*  A7P2:     R14 = SAVE14;                                              20130000
A7P2     L     @E,360(0,@5)                                       0616  20140000
*                                   /*RETURN TO CALLER.*/               20150000
*         GO TO R14;                                                    20160000
         BCR   15,@E                                              0617  20170000
*  MOVE:     GEN( MVC  0(1,R7),0(R6));                                  20180000
MOVE      MVC  0(1,R7),0(R6)                                            20190000
         DS    0H                                                       20200000
*  END IEBCREAT;                                                        20210000
@EL01    L     @D,4(0,@D)                                         0619  20220000
         LR    @1,@C                                              0619  20230000
         L     @0,@SIZ001                                         0619  20240000
         FREEMAIN R,LV=(0),A=(1)                                  0619  20250000
         L     @E,12(0,@D)                                        0619  20260000
         LM    @0,@8,20(@D)                                       0619  20270000
         LM    @A,@C,60(@D)                                       0619  20280000
         BCR   15,@E                                              0619  20290000
@DATA1   EQU   *                                                        20300000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           20310000
@1       EQU   01                                                       20320000
@2       EQU   02                                                       20330000
@3       EQU   03                                                       20340000
@4       EQU   04                                                       20350000
@5       EQU   05                                                       20360000
@6       EQU   06                                                       20370000
@7       EQU   07                                                       20380000
@8       EQU   08                                                       20390000
@9       EQU   09                                                       20400000
@A       EQU   10                                                       20410000
@B       EQU   11                                                       20420000
@C       EQU   12                                                       20430000
@D       EQU   13                                                       20440000
@E       EQU   14                                                       20450000
@F       EQU   15                                                       20460000
@D1      DC    F'0'                                                     20470000
@D8      DC    F'-1'                                                    20480000
@D9      DC    F'524293'                                                20490000
@D2      DC    H'-1'                                                    20500000
@D3      DC    H'4'                                                     20510000
@D4      DC    H'12'                                                    20520000
@D5      DC    H'16'                                                    20530000
@D6      DC    H'8'                                                     20540000
@D7      DC    H'1'                                                     20550000
@D10     DC    H'256'                                                   20560000
@MVC     MVC   0(1,@A),0(@E)                                            20570000
         DS    0F                                                       20580000
@SIZ001  DC    AL1(&SPN)                                                20590000
         DC    AL3(@DATEND-@DATD)                                       20600000
         DS    0F                                                       20610000
@C6      DC    C'    '                                                  20620000
@C8      DC    C' IEB729I PERMANENT I/O ERROR'                          20630000
@X12     DC    X'000002147483647C'                                      20640000
@X3      DC    X'0000'                                                  20650000
@C9      DC    C'RA'                                                    20660000
@C10     DC    C'ZD'                                                    20670000
@C11     DC    C'PD'                                                    20680000
@C13     DC    C'BI'                                                    20690000
         DS    0D                                                       20700000
@DATA    EQU   *                                                        20710000
R2       EQU   00000002            FULLWORD POINTER REGISTER            20720000
R3       EQU   00000003            FULLWORD POINTER REGISTER            20730000
R4       EQU   00000004            FULLWORD POINTER REGISTER            20740000
R5       EQU   00000005            FULLWORD POINTER REGISTER            20750000
R6       EQU   00000006            FULLWORD POINTER REGISTER            20760000
R7       EQU   00000007            FULLWORD POINTER REGISTER            20770000
R8       EQU   00000008            FULLWORD POINTER REGISTER            20780000
R9       EQU   00000009            FULLWORD POINTER REGISTER            20790000
R0       EQU   00000000            FULLWORD INTEGER REGISTER            20800000
R1       EQU   00000001            FULLWORD POINTER REGISTER            20810000
R14      EQU   00000014            FULLWORD POINTER REGISTER            20820000
R15      EQU   00000015            FULLWORD INTEGER REGISTER            20830000
COMMON   EQU   00000000            308 BYTE(S) ON DWORD                 20840000
PAGENO   EQU   COMMON+00000000     4 BYTE(S)                            20850000
LINECT   EQU   COMMON+00000004     FULLWORD INTEGER                     20860000
LINECTR  EQU   COMMON+00000008     FULLWORD INTEGER                     20870000
PARM     EQU   COMMON+00000012     FULLWORD POINTER                     20880000
REPEATNO EQU   COMMON+00000016     HALFWORD INTEGER                     20890000
CREATENO EQU   COMMON+00000018     HALFWORD INTEGER                     20900000
SYSP     EQU   COMMON+00000020     96 BYTE(S)                           20910000
SYSI     EQU   COMMON+00000116     96 BYTE(S)                           20920000
Q        EQU   COMMON+00000216     16 BYTE(S) ON DWORD                  20930000
QFILL    EQU   COMMON+00000216     7 BYTE(S)                            20940000
QSIGN    EQU   COMMON+00000223     8 BIT(S)                             20950000
QFILL1   EQU   COMMON+00000224     7 BYTE(S)                            20960000
QSIGN1   EQU   COMMON+00000231     8 BIT(S)                             20970000
COUNTER  EQU   COMMON+00000232     FULLWORD POINTER                     20980000
OPENLIST EQU   COMMON+00000236     8 BYTE(S)                            20990000
OPTBYTE1 EQU   COMMON+00000236     4 BYTE(S)                            21000000
OPTBYTE2 EQU   COMMON+00000240     4 BYTE(S)                            21010000
EXLST    EQU   COMMON+00000244     24 BYTE(S) ON WORD                   21020000
INHDR    EQU   COMMON+00000244     1 BYTE(S)                            21030000
INHDR1   EQU   COMMON+00000245     3  BYTE  POINTER ON WORD+1           21040000
OUTHDR   EQU   COMMON+00000248     1 BYTE(S)                            21050000
OUTHDR1  EQU   COMMON+00000249     3  BYTE  POINTER ON WORD+1           21060000
INTRL    EQU   COMMON+00000252     1 BYTE(S)                            21070000
INTRL1   EQU   COMMON+00000253     3  BYTE  POINTER ON WORD+1           21080000
OUTTRL   EQU   COMMON+00000256     1 BYTE(S)                            21090000
OUTTRL1  EQU   COMMON+00000257     3  BYTE  POINTER ON WORD+1           21100000
EXITDCB  EQU   COMMON+00000260     1 BYTE(S)                            21110000
EXITDCB1 EQU   COMMON+00000261     3  BYTE  POINTER ON WORD+1           21120000
TOTAL    EQU   COMMON+00000264     1 BYTE(S)                            21130000
TOTAL1   EQU   COMMON+00000265     3  BYTE  POINTER ON WORD+1           21140000
EXLST1   EQU   COMMON+00000268     4 BYTE(S) ON WORD                    21150000
EDCB1    EQU   COMMON+00000268     1 BYTE(S)                            21160000
EDCB2    EQU   COMMON+00000269     3  BYTE  POINTER ON WORD+1           21170000
EXLST2   EQU   COMMON+00000272     4 BYTE(S) ON WORD                    21180000
EDCB3    EQU   COMMON+00000272     1 BYTE(S)                            21190000
EDCB4    EQU   COMMON+00000273     3  BYTE  POINTER ON WORD+1           21200000
EXLST3   EQU   COMMON+00000276     4 BYTE(S) ON WORD                    21210000
EDCB5    EQU   COMMON+00000276     1 BYTE(S)                            21220000
EDCB6    EQU   COMMON+00000277     3  BYTE  POINTER ON WORD+1           21230000
DLRECL   EQU   COMMON+00000280     HALFWORD INTEGER                     21240000
DBLKSI   EQU   COMMON+00000282     HALFWORD INTEGER                     21250000
DRECFM   EQU   COMMON+00000284     8 BIT(S)                             21260000
LEFTOVER EQU   COMMON+00000288     FULLWORD INTEGER                     21270000
OFFSET   EQU   COMMON+00000292     FULLWORD POINTER                     21280000
LPTR     EQU   COMMON+00000296     FULLWORD POINTER                     21290000
DCBPTR   EQU   COMMON+00000300     FULLWORD POINTER                     21300000
DUMMY    EQU   COMMON+00000304     FULLWORD POINTER                     21310000
COMMON1  EQU   00000304            236 BYTE(S) ON WORD                  21320000
SAVEMS   EQU   COMMON1+00000000    HALFWORD INTEGER                     21330000
CONCODE  EQU   COMMON1+00000002    HALFWORD INTEGER                     21340000
OUTREC   EQU   COMMON1+00000004    FULLWORD POINTER                     21350000
CRTABPT  EQU   COMMON1+00000008    FULLWORD POINTER                     21360000
CURCRTE  EQU   COMMON1+00000012    FULLWORD POINTER                     21370000
CURCRGM  EQU   COMMON1+00000016    FULLWORD POINTER                     21380000
CURPIC   EQU   COMMON1+00000020    FULLWORD POINTER                     21390000
PICCTR   EQU   COMMON1+00000024    FULLWORD INTEGER                     21400000
EXITTAB  EQU   COMMON1+00000028    FULLWORD POINTER                     21410000
EXITGM   EQU   COMMON1+00000032    FULLWORD POINTER                     21420000
CUREXIT  EQU   COMMON1+00000036    FULLWORD POINTER                     21430000
DELIM    EQU   COMMON1+00000040    4 BYTE(S)                            21440000
RECREM   EQU   COMMON1+00000044    FULLWORD INTEGER                     21450000
CURFD    EQU   COMMON1+00000048    FULLWORD POINTER                     21460000
CUROUT   EQU   COMMON1+00000052    HALFWORD POINTER                     21470000
SAVE14   EQU   COMMON1+00000056    FULLWORD POINTER                     21480000
GETMLIST EQU   COMMON1+00000060    16 BYTE(S) ON WORD                   21490000
GLENGTH  EQU   COMMON1+00000060    FULLWORD INTEGER                     21500000
ADRLIST  EQU   COMMON1+00000064    FULLWORD POINTER                     21510000
IND      EQU   COMMON1+00000068    4 BYTE(S)                            21520000
GCODE    EQU   COMMON1+00000068    1 BYTE(S)                            21530000
SPOOL    EQU   COMMON1+00000069    1 BYTE(S)                            21540000
CCODE    EQU   COMMON1+00000070    2 BYTE(S)                            21550000
GCADDR   EQU   COMMON1+00000072    FULLWORD POINTER                     21560000
FIRSTGMO EQU   COMMON1+00000076    FULLWORD POINTER                     21570000
CURRGMO  EQU   COMMON1+00000080    FULLWORD POINTER                     21580000
LASTGMO  EQU   COMMON1+00000084    FULLWORD POINTER                     21590000
FIRSTGMI EQU   COMMON1+00000088    FULLWORD POINTER                     21600000
CURRGMI  EQU   COMMON1+00000092    FULLWORD POINTER                     21610000
LASTGMI  EQU   COMMON1+00000096    FULLWORD POINTER                     21620000
CONDCODE EQU   COMMON1+00000100    HALFWORD INTEGER                     21630000
MS       EQU   COMMON1+00000102    HALFWORD INTEGER                     21640000
INBUFA1  EQU   COMMON1+00000104    121 BYTE(S)                          21650000
INFILL   EQU   COMMON1+00000104    10 BYTE(S)                           21660000
INBUFA   EQU   COMMON1+00000114    111 BYTE(S)                          21670000
DDPTR    EQU   COMMON1+00000228    FULLWORD POINTER                     21680000
DUMMY1   EQU   COMMON1+00000232    FULLWORD POINTER                     21690000
COMMON2  EQU   00000536            76 BYTE(S) ON WORD                   21700000
SWITCH   EQU   COMMON2+00000000    52 BYTE(S)                           21710000
FDCSW    EQU   COMMON2+00000000    1 BYTE(S)                            21720000
FDNAMESW EQU   COMMON2+00000001    1 BYTE(S)                            21730000
FDPCSW   EQU   COMMON2+00000002    1 BYTE(S)                            21740000
FDFMTSW  EQU   COMMON2+00000003    1 BYTE(S)                            21750000
FDPLSW   EQU   COMMON2+00000004    1 BYTE(S)                            21760000
RANGESW  EQU   COMMON2+00000005    1 BYTE(S)                            21770000
FILLSW   EQU   COMMON2+00000006    1 BYTE(S)                            21780000
REPSW    EQU   COMMON2+00000007    1 BYTE(S)                            21790000
INDEXSW  EQU   COMMON2+00000008    1 BYTE(S)                            21800000
INDNMSW  EQU   COMMON2+00000009    1 BYTE(S)                            21810000
BQUOTESW EQU   COMMON2+00000010    1 BYTE(S)                            21820000
PQUOTESW EQU   COMMON2+00000011    1 BYTE(S)                            21830000
EQUOTESW EQU   COMMON2+00000012    1 BYTE(S)                            21840000
FDSW     EQU   COMMON2+00000013    1 BYTE(S)                            21850000
DSDSW    EQU   COMMON2+00000014    1 BYTE(S)                            21860000
NOGOSW   EQU   COMMON2+00000015    1 BYTE(S)                            21870000
CREATESW EQU   COMMON2+00000016    1 BYTE(S)                            21880000
DSDCSW   EQU   COMMON2+00000017    1 BYTE(S)                            21890000
CRCSW    EQU   COMMON2+00000018    1 BYTE(S)                            21900000
EXITSW   EQU   COMMON2+00000019    1 BYTE(S)                            21910000
EODSTOP  EQU   COMMON2+00000020    1 BYTE(S)                            21920000
DSDNULSW EQU   COMMON2+00000021    1 BYTE(S)                            21930000
DSDORGSW EQU   COMMON2+00000022    1 BYTE(S)                            21940000
DSDDDSW  EQU   COMMON2+00000023    1 BYTE(S)                            21950000
CRTBLK   EQU   COMMON2+00000024    1 BYTE(S)                            21960000
NAMCSW   EQU   COMMON2+00000025    8 BIT(S)                             21970000
PICCSW   EQU   COMMON2+00000026    8 BIT(S)                             21980000
BUFPSW   EQU   COMMON2+00000027    1 BYTE(S)                            21990000
ENDSW    EQU   COMMON2+00000028    1 BYTE(S)                            22000000
COMCSW   EQU   COMMON2+00000029    1 BYTE(S)                            22010000
FLAGSW   EQU   COMMON2+00000030    8 BIT(S)                             22020000
PAGESW   EQU   COMMON2+00000031    1 BYTE(S)                            22030000
EPSW     EQU   COMMON2+00000032    1  BYTE  POINTER                     22040000
SYSISW   EQU   COMMON2+00000033    1 BYTE(S)                            22050000
SYSPSW   EQU   COMMON2+00000034    1 BYTE(S)                            22060000
OLDNEWSW EQU   COMMON2+00000035    1 BYTE(S)                            22070000
FLUSHSW  EQU   COMMON2+00000036    1 BYTE(S)                            22080000
FLUSHSW1 EQU   COMMON2+00000037    1 BYTE(S)                            22090000
DSDOSW   EQU   COMMON2+00000038    1 BYTE(S)                            22100000
DSDISW   EQU   COMMON2+00000039    1 BYTE(S)                            22110000
QUANSW   EQU   COMMON2+00000040    1 BYTE(S)                            22120000
PARENSW  EQU   COMMON2+00000041    1 BYTE(S)                            22130000
REPEATSW EQU   COMMON2+00000042    1 BYTE(S)                            22140000
SYSINEOD EQU   COMMON2+00000043    1 BYTE(S)                            22150000
FDPLGTH  EQU   COMMON2+00000052    HALFWORD INTEGER                     22160000
SGCADDR  EQU   COMMON2+00000056    FULLWORD POINTER                     22170000
FDPTR    EQU   COMMON2+00000060    FULLWORD POINTER                     22180000
FDPTR1   EQU   COMMON2+00000064    FULLWORD POINTER                     22190000
FDPTR2   EQU   COMMON2+00000068    FULLWORD POINTER                     22200000
DUMMY2   EQU   COMMON2+00000072    FULLWORD POINTER                     22210000
COMMON3  EQU   00000608            188 BYTE(S) ON WORD                  22220000
FDCTR    EQU   COMMON3+00000000    HALFWORD POINTER                     22230000
LREMAIN  EQU   COMMON3+00000004    FULLWORD POINTER                     22240000
COMPCTR  EQU   COMMON3+00000008    FULLWORD POINTER                     22250000
LMOVED   EQU   COMMON3+00000012    HALFWORD POINTER                     22260000
U        EQU   COMMON3+00000016    FULLWORD POINTER                     22270000
PICEND   EQU   COMMON3+00000020    HALFWORD POINTER                     22280000
CURFDGM  EQU   COMMON3+00000024    FULLWORD POINTER                     22290000
SWTCH    EQU   COMMON3+00000028    4 BYTE(S) ON WORD                    22300000
SYSINSEL EQU   COMMON3+00000028    1 BYTE(S)                            22310000
FIRSTSW  EQU   COMMON3+00000029    1 BYTE(S)                            22320000
FRSTSW   EQU   COMMON3+00000030    1 BYTE(S)                            22330000
STOPSW   EQU   COMMON3+00000031    1 BYTE(S)                            22340000
COPYVAL  EQU   COMMON3+00000032    HALFWORD INTEGER                     22350000
COPYFD   EQU   COMMON3+00000036    FULLWORD POINTER                     22360000
COPYFDGM EQU   COMMON3+00000040    FULLWORD POINTER                     22370000
NAMCTR   EQU   COMMON3+00000044    HALFWORD INTEGER                     22380000
NAMCTR1  EQU   COMMON3+00000046    HALFWORD INTEGER                     22390000
INRECSZ  EQU   COMMON3+00000048    HALFWORD POINTER                     22400000
OUTRECSZ EQU   COMMON3+00000050    HALFWORD POINTER                     22410000
INRECFM  EQU   COMMON3+00000052    1 BYTE(S)                            22420000
RECOFFST EQU   COMMON3+00000053    1  BYTE  POINTER                     22430000
OUTRECFM EQU   COMMON3+00000054    1 BYTE(S)                            22440000
PICBASE  EQU   COMMON3+00000056    FULLWORD POINTER                     22450000
MESSAGE  EQU   COMMON3+00000060    121 BYTE(S)                          22460000
DUMMY3   EQU   COMMON3+00000184    FULLWORD POINTER                     22470000
DCBD     EQU   00000000            280 BYTE(S) ON DWORD                 22480000
FILL     EQU   DCBD+00000000       16 BYTE(S)                           22490000
KEYLEN   EQU   DCBD+00000016       1 BYTE(S)                            22500000
DEVT     EQU   DCBD+00000017       8 BIT(S)                             22510000
FILL1    EQU   DCBD+00000018       8 BYTE(S)                            22520000
DSORG1   EQU   DCBD+00000026       2 BYTE(S)                            22530000
DSORG    EQU   DCBD+00000026       8 BIT(S)                             22540000
FILLER   EQU   DCBD+00000028       8 BYTE(S)                            22550000
IOBAD    EQU   DCBD+00000028       4 BYTE(S)                            22560000
BFTEK    EQU   DCBD+00000032       8 BIT(S)                             22570000
EODAD    EQU   DCBD+00000033       3 BYTE(S)                            22580000
RECFM    EQU   DCBD+00000036       8 BIT(S)                             22590000
EXLIST   EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           22600000
DDNAME   EQU   DCBD+00000040       8 BYTE(S)                            22610000
DEBAD    EQU   DCBD+00000040       4 BYTE(S)                            22620000
IFLGS    EQU   DCBD+00000040       8 BIT(S)                             22630000
GETAD    EQU   DCBD+00000048       4 BYTE(S)                            22640000
OFLGS    EQU   DCBD+00000048       8 BIT(S)                             22650000
OFLGS1   EQU   DCBD+00000049       1 BYTE(S)                            22660000
MACRF    EQU   DCBD+00000050       2 BYTE(S)                            22670000
FILL2    EQU   DCBD+00000052       4 BYTE(S)                            22680000
SYNAD    EQU   DCBD+00000056       4 BYTE(S)                            22690000
CIND     EQU   DCBD+00000060       2 BYTE(S)                            22700000
BLKSI    EQU   DCBD+00000062       HALFWORD INTEGER                     22710000
FILL3    EQU   DCBD+00000064       18 BYTE(S)                           22720000
LRECL    EQU   DCBD+00000082       HALFWORD INTEGER                     22730000
FILL4    EQU   DCBD+00000084       172 BYTE(S)                          22740000
NEXTDCB  EQU   DCBD+00000256       FULLWORD POINTER                     22750000
DDNAME1  EQU   DCBD+00000260       8 BYTE(S)                            22760000
EODSW    EQU   DCBD+00000268       1 BYTE(S)                            22770000
DCBSW1   EQU   DCBD+00000269       1 BYTE(S)                            22780000
DCBSW2   EQU   DCBD+00000270       1 BYTE(S)                            22790000
DCBSW3   EQU   DCBD+00000271       8 BIT(S)                             22800000
INREC    EQU   DCBD+00000272       FULLWORD POINTER                     22810000
GMLGTH   EQU   DCBD+00000276       HALFWORD INTEGER                     22820000
FIELDSEL EQU   DCBD+00000278       1 BYTE(S)                            22830000
SPARE    EQU   DCBD+00000279       1 BYTE(S)                            22840000
CRPICT   EQU   00000000            7 BYTE(S) ON WORD                    22850000
PICSTLOC EQU   CRPICT+00000000     FULLWORD POINTER                     22860000
PICLGTH  EQU   CRPICT+00000004     HALFWORD INTEGER                     22870000
PICSTRNG EQU   CRPICT+00000006     1 BYTE(S)                            22880000
CRTAB    EQU   00000000            28 BYTE(S) ON WORD                   22890000
NXTCRTE  EQU   CRTAB+00000000      FULLWORD POINTER                     22900000
QUAN     EQU   CRTAB+00000004      4 BYTE(S)                            22910000
IDCBPTR  EQU   CRTAB+00000008      FULLWORD POINTER                     22920000
EXITADR  EQU   CRTAB+00000012      FULLWORD POINTER                     22930000
PICPTR   EQU   CRTAB+00000016      FULLWORD POINTER                     22940000
FILLCH   EQU   CRTAB+00000020      1  BYTE  POINTER                     22950000
EMP1     EQU   CRTAB+00000021      3 BYTE(S)                            22960000
FDADTAB  EQU   CRTAB+00000024      FULLWORD POINTER                     22970000
ENDFD    EQU   CRTAB+00000024      1 BYTE(S)                            22980000
FDTBL    EQU   00000000            520 BYTE(S) ON WORD                  22990000
FDNAME   EQU   FDTBL+00000000      8 BYTE(S)                            23000000
FDREPNM  EQU   FDTBL+00000008      8 BYTE(S)                            23010000
FDINDNM  EQU   FDTBL+00000016      8 BYTE(S) ON WORD                    23020000
FDUMMY   EQU   FDTBL+00000016      4 BYTE(S)                            23030000
FDINDNUM EQU   FDTBL+00000020      FULLWORD POINTER                     23040000
FDLGTH   EQU   FDTBL+00000024      HALFWORD POINTER                     23050000
FDCYCLE  EQU   FDTBL+00000026      HALFWORD POINTER                     23060000
FDACTION EQU   FDTBL+00000028      2 BYTE(S)                            23070000
FDFORMAT EQU   FDTBL+00000030      2 BYTE(S)                            23080000
FDSWITCH EQU   FDTBL+00000032      8 BIT(S)                             23090000
INDBYNAM EQU   FDTBL+00000032      1 BIT(S)                             23100000
PASS     EQU   FDTBL+00000032      1 BIT(S)                             23110000
FXACTION EQU   FDTBL+00000032      1 BIT(S)                             23120000
RPACTION EQU   FDTBL+00000032      1 BIT(S)                             23130000
ROACTION EQU   FDTBL+00000032      1 BIT(S)                             23140000
WVACTION EQU   FDTBL+00000032      1 BIT(S)                             23150000
STACTION EQU   FDTBL+00000032      1 BIT(S)                             23160000
NUACTION EQU   FDTBL+00000032      1 BIT(S)                             23170000
FDFILL   EQU   FDTBL+00000033      1 BYTE(S)                            23180000
FDSIGN   EQU   FDTBL+00000034      1 BYTE(S)                            23190000
FDCHAR   EQU   FDTBL+00000035      1 BYTE(S)                            23200000
FDRANGE  EQU   FDTBL+00000036      4 BYTE(S)                            23210000
FDRANC   EQU   FDTBL+00000036      4  BYTE  INTEGER                     23220000
FDOBUF   EQU   FDTBL+00000040      HALFWORD POINTER                     23230000
FDFRINC  EQU   FDTBL+00000042      HALFWORD POINTER                     23240000
FDFROMAD EQU   FDTBL+00000044      4 BYTE(S)                            23250000
FDMLGTH  EQU   FDTBL+00000048      HALFWORD POINTER                     23260000
FDTOINC  EQU   FDTBL+00000050      HALFWORD POINTER                     23270000
FDCYCCNT EQU   FDTBL+00000052      HALFWORD POINTER                     23280000
FDSLGTH  EQU   FDTBL+00000054      HALFWORD POINTER                     23290000
FDSLGTHR EQU   FDTBL+00000056      HALFWORD POINTER                     23300000
FDFRINCR EQU   FDTBL+00000058      1 BYTE(S)                            23310000
FDTOINCR EQU   FDTBL+00000059      1 BYTE(S)                            23320000
LTOFREE  EQU   FDTBL+00000060      HALFWORD POINTER                     23330000
FDSW1    EQU   FDTBL+00000062      8 BIT(S)                             23340000
STRTLOC1 EQU   FDTBL+00000062      1 BIT(S)                             23350000
NXTFDTAB EQU   00000516            FULLWORD POINTER                     23360000
INBUF    EQU   00000000            80 BYTE(S)                           23370000
PARAM    EQU   00000000            1 BYTE(S)                            23380000
AREA     EQU   00000000            512 BYTE(S)                          23390000
NXTCRGM  EQU   00000000            FULLWORD POINTER                     23400000
BINARYMX EQU   *                   FULLWORD INTEGER                     23410000
         DC    BL4'1111111111111111111111111111110'                     23420000
NXTFDGM  EQU   00000000            FULLWORD POINTER                     23430000
FDADR    EQU   00000000            FULLWORD POINTER                     23440000
LLFLD    EQU   00000000            HALFWORD INTEGER                     23450000
ONE      EQU   *                   FULLWORD INTEGER                     23460000
         DC    FL4'0'                                                   23470000
YES      EQU   *                   1 BYTE(S)                            23480000
         DC    X'FF'                                                    23490000
NO       EQU   *                   1 BYTE(S)                            23500000
         DC    X'00'                                                    23510000
ON       EQU   *                   1 BYTE(S)                            23520000
         DC    X'FF'                                                    23530000
OFF      EQU   *                   1 BYTE(S)                            23540000
         DC    X'00'                                                    23550000
         ORG   @DATA                                                    23560000
         DS    00000012C                                                23570000
@L       EQU   1                                                        23580000
@DATD    DSECT                                                          23590000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   23600000
SAVEEOD  EQU   @DATD+00000072      3 BYTE(S)                            23610000
         DS    00000084C                                                23620000
@TEMPS   DS    0F                                                       23630000
@TEMP4   DC    F'0'                                                     23640000
@DATEND  EQU   *                                                        23650000
IEBCREAT CSECT ,                                                        23660000
@9ED     EQU   GETIN                                                    23670000
@9E9     EQU   A7A18                                                    23680000
         END   IEBCREAT                                                 23690000
./  ADD  SSI=81910013,NAME=IEBDG
*********************************************************************** 00010000
*                                                                     * 00020000
*  TITLE 'IEBDG'-DATA GENERATOR                                       * 00030000
*                                                                     * 00040000
*  STATUS: CHANGE LEVEL 0                                             * 00050000
*                                                                     * 00060000
* FUNCTION- TO GENERATE DATA USING THE PS AND PO ACCESS METHODS.      * 00070000
*        RECORDS(FIELDS) MAY BE DEFINED USING SEVEN CHARACTER FORMATS * 00080000
*        UPON WHICH NINE ACTIONS MAY BE PERFORMED.A PICTURE CAN BE    * 00090000
*        SUPPLIED BY CONTROL CARD OR DYNAMICALLY FROM AN OLD DATA SET.* 00100000
*        A USER EXIT IS SUPPLIED SO THAT A RECORD CAN BE INSPECTED    * 00110000
*        BEFORE IT IS OUTPUT.                                         * 00120000
*                                                                     * 00130000
*  ENTRY POINT:  IEBDG , THE CSECT NAME OF THIS MODULE                * 00140000
*                                                                     * 00150000
*  INPUT:                                                             * 00160000
*              BY INVOCATION                                          * 00170000
*                                                                     * 00180000
*        REGISTER ONE(1) CONTAINS ADDRESS OF LIST                     * 00190000
*        NO OPTIONS OR PAGANATION ARE PROVIDED,ONLY ACTIVE ENTRY      * 00200000
*        SHOULD BE THE DDPTR.                                         * 00210000
*        FORMAT OF LIST SHOULD BE AS FOLLOWS:                         * 00220000
*        FIRST FOUR BYTES ZERO INDICATING NO OPTIONS                  * 00230000
*        NEXT BYTE HEX 80 INDICATING LAST ENTRY                       * 00240000
*        NEXT 3 BYTES CONTAIN ADDRESS OF LIST OF DDNAMES              * 00250000
*                                                                     * 00260000
*        FORMAT OF DDNAME LIST AS FOLLOWS:                            * 00270000
*        BYTE 0-1 CONTAIN LENGTH OF LIST                              * 00280000
*        BYTE 2-9   DD CARD NAME DESCRIBING OLD DATA SET FOR INPUT    * 00290000
*        BYTE 10-17      ZEROES-NOT ACTIVE                            * 00300000
*        BYTE 18-25      ZEROES-NOT ACTIVE                            * 00310000
*        BYTE 26-33      ZEROES-NOT ACTIVE                            * 00320000
*        BYTE 34-41 DD CARD NAME DESCRIBING DATA SET FOR SYSIN        * 00330000
*        BYTE 42-49 DD CARD NAME DESCRIBING DATA SET FOR SYSPRINT     * 00340000
*        BYTE 50-57      ZEROES-NOT ACTIVE                            * 00350000
*        BYTE 58-65 DD CARD NAME DESCRIBING DATA SET FOR OUTPUT RCDS  * 00360000
*        BYTE XX-XX ADDITIONAL ENTRIES AS ABOVE FOR OUTPUT RECORDS    * 00370000
*                                                                     * 00380000
*                                                                     * 00390000
*  INPUT:                                                             * 00400000
*              BY CONTROL CARDS                                       * 00410000
*        KEYWORDS ARE USED                                            * 00420000
*        THE NAME OF THE CONTROL CARD CANNOT START IN COL 1 WHICH IS  * 00430000
*        RESERVED FOR A NAME.                                         * 00440000
*        CONTROL CARDS ARE DSD    DATA SET DEFINITION                 * 00450000
*                          FD     FIELD DEFINITION                    * 00460000
*                          CREATE RECORD DEFINITION                   * 00470000
*                          REPEAT                                     * 00480000
*                          END                                        * 00490000
*        DSD KEYWORDS ALLOWED ARE INPUT AND OUTPUT                    * 00500000
*        FD KEYWORDS ALLOWED ARE:PICTURE=,FORMAT=,NAME=,LENGTH=,      * 00510000
*                                 ACTION=,CHARACTER=,SIGN=,CYCLE=,    * 00520000
*                                 INDEX=,REPLACE=,FILL=,RANGE=,       * 00530000
*        CREATE KEYWORDS ALLOWED ARE:QUANTITY=,NAME=,PICTURE=,FILL=,  * 00540000
*                                    LENGTH=,USER=,STARTLOC=          * 00550000
*                                    INPUT                            * 00560000
*                                                                     * 00570000
*  INPUT:                                                             * 00580000
*              BY SYSTEM                                              * 00590000
*        THIS PROGRAM DEPENDS UPON THE SYSTEM FOR INPUT TO THE EXTENT * 00600000
*        THAT THE CORRECT INFORMATION FROM LABELS AND DDCARDS MUST    * 00610000
*        BE CONVEYED TO THE DCBS.A DD CARD DESCRIBING EVERY DATA SET  * 00620000
*        MUST BE PRESENT.THIS PROGRAM WILL USE THE FOLLOWING NAMES    * 00630000
*        UNLESS REQUIRED TO CHANGE BY INVOCATION.                     * 00640000
*                                                                     * 00650000
*        SYSIN -DATA SET FOR INPUTTING CONTROL CARDS                  * 00660000
*                   CARDS MAY BE BLOCKED 80 CHAR FIXED FORMAT         * 00670000
*        SYSPRINT -DATA SET FOR OUTPUTTING MESSAGES                   * 00680000
*        ANY   DATA SET FOR OUTPUTING GENERATED RECORDS               * 00690000
*        ANY   DATA SET FOR INPUTING OLD RECORDS                      * 00700000
*                                                                     * 00710000
*  OUTPUT:                                                            * 00720000
*        REGISTER FIVE POINTING TO COMMON COMMUNICATION AREA          * 00730000
*                                                                     * 00740000
*        TO MESSAGE MODULE -                                          * 00750000
*              MS --INDICATES MESSAGE NUMBER                          * 00760000
*              FLAG SWITCH- INDICATES ERROR FLAG WANTED               * 00770000
*        TO FD ANALYSIS MODULE                                        * 00780000
*              REGISTER 9 POINTING AT OPERATION FIELD IN INBUF        * 00790000
*        TO CREATE ANALYSIS MODULE                                    * 00800000
*              REGISTER 9 POINTING AT OPERATION FIELD IN INBUF        * 00810000
*                                                                     * 00820000
*  EXTERNAL ROUTINES:                                                 * 00830000
*                                                                     * 00840000
*        IEBDGMSG                                                     * 00850000
*        IEBFDANL                                                     * 00860000
*        IEBCRANL                                                     * 00870000
*        IEBDGCUP                                                     * 00880000
*        GET MACRO                                                    * 00890000
*        GETMAIN MACRO                                                * 00900000
*        LINK MACRO                                                   * 00910000
*                                                                     * 00920000
*    EXITS--NORMAL                                                    * 00930000
*        TO IEBDGMSG BY USE OF LINK MACRO FOR MESSAGES                * 00940000
*        TO IEBFDANL BY USE  OF THE LINK MACRO FOR FD ANALYSIS        * 00950000
*        TO IEBCRANL BY USE OF THE LINK MACRO FOR CREATE ANALYSIS     * 00960000
*        TO IEBDGCUP BY USE OF THE LINK MACRO FOR CLEANUP             * 00970000
*                                                                     * 00980000
*  EXITS-NORMAL: FROM THIS ROUTINE                                    * 00990000
*                CONDITION CODE 0 GIVEN FOR NORMAL CONCLUSION         * 01000000
*                                                                     * 01010000
*  EXITS-ERROR                                                        * 01020000
*        CONTROL IS RETURNED TO THE USER WITH ONE OF THE FOLLOWING    * 01030000
*        CONDITION CODES                                              * 01040000
*                CONDITION CODE 4  TERMINATION AT USERS REQUEST       * 01050000
*                CONDITION CODE 8  ERROR PROCESSING CONTROL CARD      * 01060000
*                CONDITION CODE 12 TERMINATION-UNRECOVERABLE ERROR    * 01070000
*                                                                     * 01080000
*  TABLES/WORKAREAS:DCBS REFERENCED AT DCBOFLG                        * 01090000
*              FIELD DEFINITION TABLES                                * 01100000
*                                                                     * 01110000
*       BYTE 0 BYTE 1 BYTE 2 BYTE 3 BYTE 4 BYTE 5 BYTE 6 BYTE 7       * 01120000
*      *********************************************************      * 01130000
*      *                     NAME                              *      * 01140000
*      *********************************************************      * 01150000
*      *               REPLACE NAME                            *      * 01160000
*      *********************************************************      * 01170000
*      *               INDEX NAME                              *      * 01180000
*      *********************************************************      * 01190000
*      *   LENGTH    *   CYCLE     *   ACTION    *   FORMAT    *      * 01200000
*      *********************************************************      * 01210000
*      *SWITCH* FILL * SIGN * CHAR *        RANGE              *      * 01220000
*      *********************************************************      * 01230000
*      *   STARTLOC IN WORKAREA    *                           *      * 01240000
*      *********************************************************      * 01250000
*                                                                     * 01260000
*  ATTRIBUTES: REENTRANT,REUSEABLE                                    * 01270000
*                                                                     * 01280000
*                                                                     * 01290000
*********************************************************************** 01300000
*     NEW MODULE, RELEASE 17.                                      DGOH 01310000
*                                                                A28655 01320000
*A197600-197984,609600-611869,990000-990200                      A37883 01330000
*D567500-572500,873500-888700,891600-891700                      A37883 01340000
*C540500,542500,777500                                           A38710 01350000
*                                                                A41807 01360000
*C544100,545500                                                  A38766 01370000
*A545600-545900                                                  A38766 01380000
*A463520-463960                                                  A41807 01390000
*C153000,153100.A638800-639000                                   A45169 01400000
*C225600,225700                                                  A45200 01410000
*A690800-691000                                                  A48784 01420000
*C610296,611595.D610292,611454,611485,611528,611553.A611538      A50927 01430000
*C262000                                                        YA01692 01440000
*C261500-262000,265500                  @XA12917,@YA12894,(ORG)@ZA07373 01450000
*A994300-994700,996700-997100           @XA13603,(ORG)@YA12911,@ZA07394 01460000
*D994300,996700                         @XA13603.(ORG)@YA12911,@ZA07394 01470000
*A339600,339700                         (ORG)@XA16970,@YA18072,@ZA24201 01480000
*A940800-940900                                                @ZA24161 01490000
*A339550                                @XA21352,@YA18072,(ORG)@ZA28703 01500000
*A1                                              (ORG)@XA20990,@ZA33694 01510000
*C1                                     @XA22239,(ORG)@YA19824,@ZA33693 01520000
*D171000                                @XA22239,(ORG)@YA19824,@ZA33693 01530000
*A5/C2A1C3A6/C1A1/A3                    @XA22239,(ORG)@YA19824,@ZA33693 01540000
         LCLA  &T,&SPN                                            0003  01550000
.@001    ANOP                                                     0003  01560000
IEBDG    CSECT ,                                                  0003  01570000
         STM   @E,@C,12(@D)                                       0003  01580000
         BALR  @B,0                                               0003  01590000
@PSTART  DS    0H                                                 0003  01600000
         USING @PSTART+00000,@B                                   0003  01610000
         LA    @3,4095(0,@B)                                      0003  01620000
         USING @PSTART+04095,@3                                   0003  01630000
         L     @0,@SIZ001                                         0003  01640000
         GETMAIN  R,LV=(0)                                        0003  01650000
         LR    @C,@1                                              0003  01660000
         USING @DATD+00000,@C                                     0003  01670000
         LM    @0,@1,20(@D)                                       0003  01680000
         XC    @TEMPS(@L),@TEMPS                                  0003  01690000
         ST    @D,@SAV001+4                                       0003  01700000
         LA    @F,@SAV001                                         0003  01710000
         ST    @F,8(0,@D)                                         0003  01720000
         LR    @D,@F                                              0003  01730000
         B     MODULEVL                                    /*@ZA33693*/ 01740000
         DC    C'IEBDG   -OZ33693'                         /*@ZA33693*/ 01750000
MODULEVL DS    0H                                          /*@ZA33693*/ 01760000
         DS    0H                                                       01770000
*               Q(1) = '00'X;           /*SET FIRST BYTE TO 0*/         01780000
         MVI   COMMON+216,X'00'                                   0074  01790000
*               R5 = ADDR(Q)            /* SET UP FROM ADDR*/;          01800000
         LA    @5,COMMON+216                                      0075  01810000
*                                        /* PICK UP CONSTANT LGTH*/     01820000
*                   /* GET ADDRESS OF END OF COMMON */                  01830000
*         GEN ( LA R7,@DATEND);                                         01840000
          LA R7,@DATEND                                                 01850000
         DS    0H                                                       01860000
*               /* GET ADDRESS OF Q FOR CLEARING*/                      01870000
*               R7 = R7 - ADDR(Q);                                      01880000
         LR    @F,@7                                              0077  01890000
         LA    @0,COMMON+216                                      0077  01900000
         SR    @F,@0                                              0077  01910000
         LR    @7,@F                                              0077  01920000
*               R7 = R7 - 1;   /** TO CORRECT THE AMOUNT**/             01930000
         BCTR  @7,0                                               0078  01940000
*  A000:;                                                               01950000
*         IF R7 < 256 THEN GO TO A002   /*BR IF LESS THAN 256*/;        01960000
A000     CH    @7,@D1                                             0080  01970000
         BC    04,A002                                            0081  01980000
*         IF R7 = 0 THEN GO TO A003     /*BR IF NONE TO MOVE*/;         01990000
         LTR   @7,@7                                              0082  02000000
         BC    08,A003                                            0083  02010000
*                                       /* MOVES 256 BYTES */           02020000
*         GEN ( MVC 1(256,5),0(5));                                     02030000
          MVC 1(256,5),0(5)                                             02040000
         DS    0H                                                       02050000
*               R5 = R5 + 256           /* ADD 256 TO POSITION ADDR*/;  02060000
         AH    @5,@D1                                             0085  02070000
*               R7 = R7 - 256           /*SUBT 256 TO CORRECT LGTH*/;   02080000
         SH    @7,@D1                                             0086  02090000
*               GO TO A000              /* BR TO REPEAT SEQUENCE */;    02100000
         BC    15,A000                                            0087  02110000
*  A001:;                                                               02120000
*                         /* THIS INST MOVES LESS THAN 256*/            02130000
*         GEN ( MVC 1(1,5),0(5));                                       02140000
A001      MVC 1(1,5),0(5)                                               02150000
         DS    0H                                                       02160000
*  A002:;                                                               02170000
*               R7 = R7 - 1              /*TO CORRECT LENGTH.*/;        02180000
A002     BCTR  @7,0                                               0091  02190000
*                    /* THIS INST CAUSES MOVE OF < 256*/                02200000
*               GEN ( EX R7,A001);                                      02210000
          EX R7,A001                                                    02220000
         DS    0H                                                       02230000
*                    /* END OF CLEAR CORE INSTRUCTIONS */               02240000
*  A003:;                                                               02250000
*  /******************************************************************* 02260000
*  /**                                                                * 02270000
*  /**    THIS SECTION MOVES COPIES OF THE DATA GENERATOR INPUT AND   * 02280000
*  /** OUTPUT DCBS TO THE COMMON AREA FOR REENTRANTIBILITY.           * 02290000
*  /**                                                                * 02300000
*  /******************************************************************* 02310000
*        PARM = R1  /* SAVE PARAMETER POINTER */;                       02320000
A003     ST    @1,COMMON+12                                       0094  02330000
*               /** MOVE DCBS TO COMMON AREA FOR REENTRANCY **/         02340000
*  SYSI = MYDCB1A;                                                      02350000
         MVC   COMMON+116(96),MYDCB1A                             0095  02360000
*  SYSP=MYDCB2A;                                                        02370000
         MVC   COMMON+20(96),MYDCB2A                              0096  02380000
*  /******************************************************************* 02390000
*  /**                                                                * 02400000
*  /**    THIS SECTION ESTABLISHES THE COMMUNICATION REGISTER REG 5   * 02410000
*  /** AND INITILIZES DEFAULTS FOR LINE COUNT,PAGE NUMBER AND THE     * 02420000
*  /** INITIAL VALUE FOR THE RANDOM NUMBER GENERATOR.THE DCB EXIT LIST* 02430000
*  /** IS ALSO ESTABLISHED FOR DATA GENERATOR INPUT AND OUTPUT DCBS   * 02440000
*  /**                                                                * 02450000
*  /******************************************************************* 02460000
*  /* LOAD PARA REG FOR REENTRANT COMMUNICATION  */                     02470000
*         R5 = ADDR(COMMON);                                            02480000
         LA    @5,COMMON                                          0097  02490000
*               LINECT = 58 /* DEFAULT LINECT = 58 */;                  02500000
         LA    @F,58                                              0098  02510000
         ST    @F,COMMON+4                                        0098  02520000
*         GENERATE ;                                                    02530000
         TIME  BIN                     TAKE TIME VALUE FOR INIT  A45200 02540000
         ST    R0,624(0,R5)            RANDOM NUMBER             A45200 02550000
         DS    0H                                                       02560000
*               PAGENO = 'F0F0F0F1'X     /*DEFAULT PAGENO = 0001*/;     02570000
         MVC   COMMON(4),@X2                                      0100  02580000
*               DCBPTR = ADDR(SYSI) /* POINT AT SYSIDCB*/;              02590000
         LA    @F,COMMON+116                                      0101  02600000
         ST    @F,COMMON+300                                      0101  02610000
*         INBUFA1 = '40'X      /**BLANK TO FIRST BYTE OF INBUF **/;     02620000
         MVI   COMMON1+104,X'40'                                  0102  02630000
         MVI   COMMON1+105,C' '                                   0102  02640000
         MVC   COMMON1+106(119),COMMON1+105                       0102  02650000
*         INBUFA1(2:121) = INBUFA1(1:120) /** BLANKS TO INBUFA1 **/;    02660000
         MVC   COMMON1+105(120),COMMON1+104                       0103  02670000
*         EXLIST = ADDR(EXLST1) /* EXIT LIST ADDR TO SYSI DCB */;       02680000
         LA    @F,COMMON+268                                      0104  02690000
         L     @2,COMMON+300       COMMON                         0104  02700000
         ST    @F,@TEMP4                                          0104  02710000
         MVC   37(3,@2),@TEMP4+1                                  0104  02720000
*        EDCB1 = '85'X /* ACTIVATE DCB EXIT */;                         02730000
         MVI   COMMON+268,X'85'                                   0105  02740000
*        EDCB2 = ADDR(DCBROUT1) /* SYSI EXIT RT ADDR */;                02750000
         LA    @F,DCBROUT1                                        0106  02760000
         ST    @F,@TEMP4                                          0106  02770000
         MVC   COMMON+269(3),@TEMP4+1                             0106  02780000
*               DCBPTR = ADDR(SYSP) /* POINT AT SYSP DCB */;            02790000
         LA    @F,COMMON+20                                       0107  02800000
         ST    @F,COMMON+300                                      0107  02810000
*        EXLIST = ADDR(EXLST2) /* EXIT LIST ADDR TO SYSP DCB */;        02820000
         LA    @F,COMMON+272                                      0108  02830000
         L     @2,COMMON+300       COMMON                         0108  02840000
         ST    @F,@TEMP4                                          0108  02850000
         MVC   37(3,@2),@TEMP4+1                                  0108  02860000
*        EDCB3 = '85'X /* ACTIVATE DCB EXIT */;                         02870000
         MVI   COMMON+272,X'85'                                   0109  02880000
*        EDCB4 = ADDR(DCBROUT2) /* SYSP EXIT RT ADDR */;                02890000
         LA    @F,DCBROUT2                                        0110  02900000
         ST    @F,@TEMP4                                          0110  02910000
         MVC   COMMON+273(3),@TEMP4+1                             0110  02920000
*  GEN;                                                                 02930000
*********************************************************************** 02940000
*                                                                     * 02950000
*                   --------- INVOCATION ---------                    * 02960000
*                                                                     * 02970000
*        INVOCATION MUST BE TESTED UPON ENTRY FOR OS/360.REMOVE CODE  * 02980000
*        FOR DOS SUPPORT. REG 1 POINTS TO PARAMETER LIST UPON ENTRY.  * 02990000
*        LIST IS CONSTRUCTED AS FOLLOWS:                              * 03000000
*              FIRST WORD ADDRESS OF OPTIONS                          * 03010000
*              2ND WORD ADDRESS OF DDNAMES                            * 03020000
*              3RD WORD ADDRESS OF PAGE INFO                          * 03030000
*        AN '80' X IN BYTE ZERO OF ANY WORD INDICATES END OF LIST.    * 03040000
*        THIS WORD WILL CONTAIN AN ADDRESS.ANY LIST POINTED AT STARTS * 03050000
*        ON 1/2 WORD BOUNDRY.THAT 1/2 WORD CONTAINS LENGTH OF LIST    * 03060000
*        IF WE ARE INVOKED FOR DDNAMES THE ONLY ONES WE ACCEPT ARE    * 03070000
*        SYSIN AND SYSPRINT AT CHAR LOCATIONS 35 AND 43. IT IS THE    * 03080000
*        USERS RESPONSABILITY TO PLACE LENGTH IN EACH LIST.IF ZERO IS * 03090000
*        FOUND THAT LIST IS INACTIVE.USER MAY PLACE UP TO A 4 DIGIT   * 03100000
*        DECIMAL NUMBER IN PARM FIELD OF EXEC CARD FOR CONTROL OF     * 03110000
*        SYSPRINT LINE COUNT. IF HE WANTS TO PLACE 52 LINES PER PAGE  * 03120000
*        HE WILL CODE PARM='LINECNT=0052'                             * 03130000
*        AN INCORRECT KEYWORD IN THE PARM FIELD WILL CAUSE A MESSAGE  * 03140000
*        UPON SYSPRINT WHEN IT IS OPENED                              * 03150000
*                                                                     * 03160000
*********************************************************************** 03170000
         DS    0H                                                       03180000
*               OPTPTR = LIST(1:4)       /*INIT OPTION PTR*/;           03190000
         L     @4,COMMON+12        COMMON                         0112  03200000
         MVC   @TEMP4(4),0(@4)                                    0112  03210000
         L     @F,@TEMP4                                          0112  03220000
         ST    @F,OPTPTR                                          0112  03230000
*  /*IF LENGTH IN OPTION FIELD BR TO PROCESS LINT COUNT*/               03240000
*         IF OPTIONS(1:2) ¬= C00 THEN GO TO PLINECT;                    03250000
         LR    @2,@F                                              0113  03260000
         CLC   0(2,@2),C00                                        0113  03270000
         BC    07,PLINECT                                         0114  03280000
*  /*IF OPTIONS ONLY ARE PRESENT INVOCATION IS ENDED*/                  03290000
*  PLINECTR:;                                                           03300000
*         IF LIST(1) = '80'X THEN GO TO AFTER;                          03310000
PLINECTR L     @2,COMMON+12        COMMON                         0116  03320000
         CLI   0(@2),X'80'                                        0116  03330000
         BC    08,AFTER                                           0117  03340000
*  /* DDNAMES AND PAGEING ARE STILL LEFT TO PROCESS*/                   03350000
*               DDPTR = LIST(5:8)        /*INIT PTR TO DDNAME LIST*/;   03360000
         MVC   @TEMP4(4),4(@2)                                    0118  03370000
         L     @F,@TEMP4                                          0118  03380000
         ST    @F,COMMON1+228                                     0118  03390000
*  /*IF LENGTH IN DDNAMES BR TO PROCESS NAMES*/                         03400000
*         IF DDLST(1:2) ¬= C00 THEN GO TO PDDNAME;                      03410000
         LR    @4,@F               COMMON1                        0119  03420000
         CLC   0(2,@4),C00                                        0119  03430000
         BC    07,PDDNAME                                         0120  03440000
*  PDDNAMER:;                                                           03450000
*  /*IF BYTE 0 OF DDPTR IS '80'X NO MORE TO PROCESS*/                   03460000
*         IF LIST(5) = '80'X THEN GO TO AFTER;                          03470000
PDDNAMER L     @2,COMMON+12        COMMON                         0122  03480000
         CLI   4(@2),X'80'                                        0122  03490000
         BC    08,AFTER                                           0123  03500000
*  /*IF WE GET HERE ONLY PAGEING IS LEFT TO PROCESS*/                   03510000
*               PGPTR = LIST(9:12)       /*INIT PTR TO PAGE LIST*/;     03520000
         MVC   @TEMP4(4),8(@2)                                    0124  03530000
         L     @F,@TEMP4                                          0124  03540000
         ST    @F,PGPTR                                           0124  03550000
*  /*IF LGTH PRESENT WE HAVE SOMETHIMG TO PROCESS OTHERWISE WE DONE*/   03560000
*         IF PAGE(1:2) = C00 THEN GO TO AFTER /*BR IF NO LENGTH*/;      03570000
         LR    @4,@F                                              0125  03580000
         CLC   0(2,@4),C00                                        0125  03590000
         BC    08,AFTER                                           0126  03600000
*                                        /* PROCESS PAGEING HERE*/      03610000
*  /* NUMBER WILL BE PRESENT IN BINARY .PLACE NUMBER IN COMMON AREA*/   03620000
*  /* FOR MSGMOD*/                                                      03630000
*               PAGENO = PAGE(3:6)       /*NUMBER TO COMMON AREA*/;     03640000
         MVC   COMMON(4),2(@4)                                    0127  03650000
*               R6 = PAGENO              /*BINARY NUMBER TO REGISTER*/; 03660000
         L     @6,COMMON                                          0128  03670000
*  /* CONVERT TO PACKED DECIMAL*/                                       03680000
*         GEN ( CVD 6,Q);                                               03690000
          CVD 6,Q                                                       03700000
         DS    0H                                                       03710000
*               PAGENO(1:4) = Q(5:8)     /*PACKED NUMBER TO PAGENO*/;   03720000
         MVC   COMMON(4),COMMON+220                               0130  03730000
*                                        /* UNPACK PAGE NUMBER*/        03740000
*         GEN   ( UNPK Q(8),PAGENO(4));                                 03750000
          UNPK Q(8),PAGENO(4)                                           03760000
         DS    0H                                                       03770000
*               QSIGN = 'F0'X | QSIGN  /* OR TO SIGN BIT */;            03780000
         OI    COMMON+223,X'F0'                                   0132  03790000
*               PAGENO(1:4) = Q(5:8)     /*MAKE NUMBER READY FOR MSG*/; 03800000
         MVC   COMMON(4),COMMON+220                               0133  03810000
*         GO TO AFTER                    /*BR INVOCATION DONE*/;        03820000
         BC    15,AFTER                                           0134  03830000
*  /* LINECT IS PROCESSED HERE.NUMBER IS CONVERTED TO DECIMAL AND*/     03840000
*  /*PLACED AT LOCATION LINECT.THIS IS USED FOR COMPARISON BY MSG*/     03850000
*  PLINECT:;                                                            03860000
*                       /* IS LENGTH CORRECT IN OPTION FIELD*/          03870000
*         IF OPTIONS(1:2) ¬= '000C'X THEN GO TO PLINECT2;   /*@ZA07373* 03880000
PLINECT  L     @2,OPTPTR                                          0136  03890000
         CLC   0(2,@2),@X6                                        0136  03900000
         BC    07,PLINECT2                                        0137  03910000
*         IF OPTIONS(3:10) ='LINECNT=' THEN GO TO PLINECT1; /*@ZA07373* 03920000
         CLC   2(8,@2),@C7                                        0138  03930000
         BC    08,PLINECT1                                        0139  03940000
*  /* AT THIS POINT WILL INIT MESSAGE INDICATING INCORRECT KEYWORD AND* 03950000
*  /*DEFAULT LINE COUNT.IT WILL BE PRINTED AFTER SYSPRINT IS OPENED*/   03960000
*  PLINECT2:;                                                           03970000
*               MS = 26     /* INDICATE MESSAGE*/;                      03980000
PLINECT2 LA    @F,26                                              0141  03990000
         STH   @F,COMMON1+102                                     0141  04000000
*               GO TO PLINECTR /*BR TO CONTINUE PROCESSING*/;           04010000
         BC    15,PLINECTR                                        0142  04020000
*  PLINECT1:;                                                           04030000
*               COUNTER=OPTIONS(11:14); /* LINECNT TO COUNTER @ZA07373* 04040000
PLINECT1 L     @2,OPTPTR                                          0144  04050000
         MVC   @TEMP4(4),10(@2)                                   0144  04060000
         L     @F,@TEMP4                                          0144  04070000
         ST    @F,COMMON+232                                      0144  04080000
*                                        /* PACK NUMBER */              04090000
*               GEN ( PACK Q(8),COUNTER(4));                            04100000
          PACK Q(8),COUNTER(4)                                          04110000
         DS    0H                                                       04120000
*     /* CONVERT TO BINARY */                                           04130000
*                                        /*CONVERT TO BINARY LINECT*/   04140000
*         GEN   ( CVB  6,Q);                                            04150000
          CVB  6,Q                                                      04160000
         DS    0H                                                       04170000
*                   /* DO NOT ALLOW LINECT OF 1 USE DEFAULT OF 58 */    04180000
*         IF R6 = 1 THEN GO TO PLINECTR ;                               04190000
         CH    @6,@D2                                             0147  04200000
         BC    08,PLINECTR                                        0148  04210000
*               LINECT = R6              /*NUMBER TO COMMON AREA*/;     04220000
         ST    @6,COMMON+4                                        0149  04230000
*               LINECTR = 0              /*CLEAR COUNTER FOR MSGMOD*/;  04240000
         SR    @F,@F                                              0150  04250000
         ST    @F,COMMON+8                                        0150  04260000
*         GO TO PLINECTR                 /*BR TO CONTINUE INVOCATION*/; 04270000
         BC    15,PLINECTR                                        0151  04280000
*  /******************************************************************* 04290000
*  /**                                                                * 04300000
*  /**    ENTRY HERE INDICATES THAT A REPLACEMENT FOR SYSPRINT OR     * 04310000
*  /** SYSIN MAY BE INDICATED.THE FIRST TWO BYTES OF DDLST WILL       * 04320000
*  /** CONTAIN THE LENGTH.A LENGTH GT OR EQUAL TO 42 INDICATES THAT   * 04330000
*  /** SYSIN AND SYSPRINT BOTH MAY BE PRESENT.A LENGTH GT OR EQUAL TO * 04340000
*  /** 34 INDICATES THAT SYSIN ONLY MAY BE PRESENT.ZEROS AT SPECIFIC  * 04350000
*  /** LOCATION INDICATE PARAMETER NOT PRESENT.                       * 04360000
*  /**                                                                * 04370000
*  /******************************************************************* 04380000
*  PDDNAME:;                                                            04390000
*  /*FIRST TWO BYTES OF DDLIST CONTAINS LENGTH.IF LGTH=> 42 INDICATES*/ 04400000
*  /*SYSIN AND SYSPRINT BOTH MAY BE PRESENT.IF LGTH => 34 INDICATES*/   04410000
*  /*THAT SYSIN ONLY MAY BE PRESENT.ZEROES AT SPECIFIC LOCATION INDICA* 04420000
*  /*TES PARAMETER NOT PRESENT*/                                        04430000
*         IF DDLST(1:2) => '0030'X THEN DO /*ARE BOTH DD FIELDS HERE*/; 04440000
PDDNAME  L     @2,COMMON1+228      COMMON1                        0153  04450000
         CLC   0(2,@2),@X8                                        0153  04460000
         BC    04,@9FF                                            0153  04470000
*   /* Q- NAME FOR SYSPRINT */                                          04480000
*         IF DDLST(43:50) ¬= '0000000000000000'X THEN DO;               04490000
         CLC   42(8,@2),@X9                                       0155  04500000
         BC    08,@9FE                                            0155  04510000
*               DCBPTR = ADDR(SYSP)      /*PICK UP SYSP ADDR*/;         04520000
         LA    @F,COMMON+20                                       0157  04530000
         ST    @F,COMMON+300                                      0157  04540000
*               DDNAME(1:8) = DDLST(43:50) /* NEW NAME TO SYSP DCB*/;   04550000
         LR    @4,@F               COMMON                         0158  04560000
         MVC   40(8,@4),42(@2)                                    0158  04570000
*           END;                                                        04580000
*  /* NO SYSPRINT DDNAME AS FIELD CONTAINED 0 */                        04590000
*         END;                                                          04600000
@9FE     EQU   *                                                  0160  04610000
*         IF DDLST(1:2) => '0028'X THEN DO /*COULD SYSIN BE PRESENT*/;  04620000
@9FF     L     @2,COMMON1+228      COMMON1                        0161  04630000
         CLC   0(2,@2),@X10                                       0161  04640000
         BC    04,@9FD                                            0161  04650000
*         IF DDLST(35:42) ¬= '0000000000000000'X THEN DO;               04660000
         CLC   34(8,@2),@X9                                       0163  04670000
         BC    08,@9FC                                            0163  04680000
*               DCBPTR = ADDR(SYSI)      /*PICK UP SYSI ADDR*/;         04690000
         LA    @F,COMMON+116                                      0165  04700000
         ST    @F,COMMON+300                                      0165  04710000
*               DDNAME(1:8) = DDLST(35:42) /*NEW NAME TO SYSI DCB*/;    04720000
         LR    @4,@F               COMMON                         0166  04730000
         MVC   40(8,@4),34(@2)                                    0166  04740000
*           END;                                                        04750000
*  /* NO SYSIN DDNAME AS FIELD CONTAINED 0 */                           04760000
*         END;                                                          04770000
*               GO TO PDDNAMER           /*BR TO CONTINUE INVOCATION*/; 04780000
         BC    15,PDDNAMER                                        0169  04790000
*  /******************************************************************* 04800000
*  /**                                                                * 04810000
*  /**    SYSIN AND SYSPRINT ARE OPENED HERE.CONDITION CODE 12        * 04820000
*  /** RETURNED IF UNABLE TO OPEN SYSIN.THE OPEN LIST IS INITILIZED   * 04830000
*  /** AND THE E FORM OF THE OPEN MACRO USGD.                         * 04840000
*  /**                                                                * 04850000
*  /******************************************************************* 04860000
*  /* THIS SECTION INITILIZES OPEN LIST WHICH IS IN DYNAMIC AREA */     04870000
*  /* LIST MUST BE IN THIS AREA TO BECOME REENTRANT */                  04880000
*  /* INPUT DCB ADDRESS  */                                             04890000
*  AFTER:;                                                              04900000
*         OPTBYTE1 = ADDR(SYSI);                                        04910000
AFTER    LA    @F,COMMON+116                                      0171  04920000
         ST    @F,COMMON+236                                      0171  04930000
*  /* OUTPUT DCB ADDRESS   */                                           04940000
*         OPTBYTE2 = ADDR(SYSP);                                        04950000
         LA    @F,COMMON+20                                       0172  04960000
         ST    @F,COMMON+240                                      0172  04970000
*  /* FIRST ENTRY FOR LIST TAKE DISP FROM DD CARD  */                   04980000
*         OPTBYTE1(1) = '00'X ;                                         04990000
         MVI   COMMON+236,X'00'                                   0173  05000000
*  /* LAST ENTRY T AKE DISP FROM DD CARD  */                            05010000
*         OPTBYTE2(1) = '8F'X ;                                         05020000
         MVI   COMMON+240,X'8F'                                   0174  05030000
*         R1 = ADDR(OPENLIST)  /* LOAD REG FOR OPEN */;                 05040000
         LA    @1,COMMON+236                                      0175  05050000
*         GEN (OPEN MF=(E,(1)));                                        05060000
         OPEN MF=(E,(1))                                                05070000
         DS    0H                                                       05080000
*  /******************************************************************* 05090000
*  /**                                                                * 05100000
*  /**    SYSIN IS TESTED FOR BEING OPEN,IF OPEN A HEADER MESSAGE IS  * 05110000
*  /** INDICATED AND A BRANCH IS TAKEN TO GET THE HEADING PRINTED.    * 05120000
*  /** IN CASE ANOTHER MESSAGE IS ALREADY INDICATED ITS NUMBER IS     * 05130000
*  /** SAVED.THE OTHER MESSAGE WILL BE PRINTED AFTER THE HEADER MSG.  * 05140000
*  /** IF SYSIN IS NOT OPEN AN ERROR IS INDICATED,WE WILL PRINT THE   * 05150000
*  /** MSG,SET CONDITION CODE 12 AND RETURN TO THE SYSTEM.            * 05160000
*  /**                                                                * 05170000
*  /******************************************************************* 05180000
*  TEST1  :;                                                            05190000
*         DCBPTR = ADDR(SYSI) /**PICK UP SYSI ADDRESS **/;              05200000
TEST1    LA    @F,COMMON+116                                      0178  05210000
         ST    @F,COMMON+300                                      0178  05220000
*         /* IF SYSIN IS OPEN GO TO PROCESS CARD */                     05230000
*         IF OFLGS(4) = '1'B THEN DO ;                                  05240000
         LR    @2,@F               COMMON                         0179  05250000
         TM    48(@2),B'00010000'                                 0179  05260000
         BC    12,@9FB                                            0179  05270000
*         IF MS ¬= 0 THEN DO /*IS THERE A MESS TO PRINT AFTER HDR MSG*/ 05280000
         SR    @F,@F                                              0181  05290000
         CH    @F,COMMON1+102                                     0181  05300000
         BC    08,@9FA                                            0181  05310000
*               SAVEMS = MS              /*YES-SAVE MESSAGE*/;          05320000
         MVC   COMMON1(2),COMMON1+102                             0183  05330000
*               MS = 1                   /*INDICATE HDR MESSAGE*/;      05340000
         LA    @F,1                                               0184  05350000
         STH   @F,COMMON1+102                                     0184  05360000
*     /* LINK TO PRINT MESSAGE */                                       05370000
*         GEN ( LINK EP=IEBDGMSG);                                      05380000
          LINK EP=IEBDGMSG                                              05390000
         DS    0H                                                       05400000
*               MS = SAVEMS              /*RESTORE MESSAGE*/;           05410000
         MVC   COMMON1+102(2),COMMON1                             0186  05420000
*               GO TO A1B35              /*BR TO PRINT AND GET CARD*/;  05430000
         BC    15,A1B35                                           0187  05440000
*         END;                                                          05450000
*               MS  =  1 ; /* PRINT HEADING ON SYSPRINT */              05460000
@9FA     LA    @F,1                                               0189  05470000
         STH   @F,COMMON1+102                                     0189  05480000
*               GO TO A1B35;  /* TO PRINT HEAD */                       05490000
         BC    15,A1B35                                           0190  05500000
*         END;                                                          05510000
*               MS = 24 ;                 /* MESSAGE  24  */            05520000
@9FB     LA    @F,24                                              0192  05530000
         STH   @F,COMMON1+102                                     0192  05540000
*         GEN ( LINK EP=IEBDGMSG);                                      05550000
          LINK EP=IEBDGMSG                                              05560000
         DS    0H                                                       05570000
*               CONCODE = 12;  /**PLACE 12 IN CONCODE**/                05580000
         LA    @F,12                                              0194  05590000
         STH   @F,COMMON1+2                                       0194  05600000
*         GO TO A2J2           /**BR TO END JOB**/;                     05610000
         BC    15,A2J2                                            0195  05620000
*  GO TO A2B3;                                                          05630000
*  /******************************************************************* 05640000
*  /**                                                                * 05650000
*  /**    THIS SECTION WILL TURN ON FLAGSW(1) FIRST BIT TO INDICATE   * 05660000
*  /** THAT SPECIAL ERROR FLAGGING IS WANTED.                         * 05670000
*  /**                                                                * 05680000
*  /******************************************************************* 05690000
*  PRINTERR:;                                                           05700000
*               FLAGSW(1) = '1'B /**INDICATE FLAGGING WANTED WITH MSG** 05710000
PRINTERR OI    COMMON2+30,B'10000000'                             0198  05720000
*  /******************************************************************* 05730000
*  /**                                                                * 05740000
*  /**    THIS SECTION WILL TEST FOR FLUSHING OF REMAINDER OF CONTROL * 05750000
*  /** CARDS.IF SWITCH IS ON A BRANCH IS TAKEN TO PERFORM CLEANUP.    * 05760000
*  /** THIS SECTION ALSO SETS CONDITION CODE TO 8 AND TURNS ON THE    * 05770000
*  /** NOGO SWITCH FOR SYNTAX CHECKING ONLY.                          * 05780000
*  /**                                                                * 05790000
*  /******************************************************************* 05800000
*  PRINTMSG:;                                                           05810000
*  A1B3:;                                                               05820000
PRINTMSG EQU   *                                                  0200  05830000
*         IF CONCODE < 8 THEN DO; /** IS CONCODE LESS THAN EIGHT**/     05840000
A1B3     LA    @F,8                                               0201  05850000
         CH    @F,COMMON1+2                                       0201  05860000
         BC    12,@9F9                                            0201  05870000
*               CONCODE = 8    /**CONDITION CODE FOR USER**/;           05880000
         STH   @F,COMMON1+2                                       0203  05890000
*         END;                                                          05900000
*               EPSW = 0       /**TURN OFF MSG INDICATOR SWITCH**/;     05910000
@9F9     MVI   COMMON2+32,0                                       0205  05920000
*    /* TURN ON NOGO SWITCH SO THAT SYNTAX WILL BE CHECKED*/            05930000
*               NOGOSW = ON              /*TURN ON NOGO SWITCH*/;       05940000
         MVC   COMMON2+15(1),ON                                   0206  05950000
*  /******************************************************************* 05960000
*  /**                                                                * 05970000
*  /**    THIS SECTION PICKS UP THE DATA GENERATOR OUTPUT DATA SET    * 05980000
*  /** ADDRESS AND 'LINKS' TO THE MESSAGE MODULE TO PRINT A MESSAGE.  * 05990000
*  /** IF CONDITION CODE IS GT OR EQUAL TO 12,UPON RETURN FROM THE    * 06000000
*  /** MESSAGE MODULE,CONTROL RETURNS TO THE USER.                    * 06010000
*  /**                                                                * 06020000
*  /******************************************************************* 06030000
*  A1B35:;                                                              06040000
*         GEN ( LINK EP=IEBDGMSG);                                      06050000
A1B35     LINK EP=IEBDGMSG                                              06060000
         DS    0H                                                       06070000
*         IF FLUSHSW1 = ON THEN GO TO A2J2 /*BR TO CLEANUP USER STOP*/; 06080000
         CLC   COMMON2+37(1),ON                                   0209  06090000
         BC    08,A2J2                                            0210  06100000
*         IF CONCODE => 12 THEN DO /**IF CCODE EQ OR GT 12 DO BELOW*/;  06110000
         LA    @F,12                                              0211  06120000
         CH    @F,COMMON1+2                                       0211  06130000
*         GO TO A2J2           /**BR TO END JOB**/;                     06140000
         BC    13,A2J2                                            0213  06150000
*         END;                                                          06160000
*  GEN;                                                                 06170000
@9F8     EQU   *                                                  0215  06180000
*********************************************************************** 06190000
*        THIS SECTION WILL GET A CARD FROM SYSIN AND PUT IT ON SYSOUT * 06200000
*        COUNTER IS INITILIZED TO ADDRESS OF THE INPUT BUFFER + 72    * 06210000
*        FOR THE SCANNING OF CONTINUATIONS                            * 06220000
*********************************************************************** 06230000
         DS    0H                                                       06240000
*  A2B3:;                                                               06250000
*  R9 = ADDR(INBUFA) /*REG 9 POINTS AT INBUF */;                        06260000
A2B3     LA    @9,COMMON1+114                                     0217  06270000
*  /* INITILIZE COUNTER TO INBUF COL 72 */                              06280000
*               COUNTER = R9 + 70  /* INIT COUNTER TO CONT COLUMN */;   06290000
         LA    @F,70                                              0218  06300000
         AR    @F,@9                                              0218  06310000
         ST    @F,COMMON+232                                      0218  06320000
*  /******************************************************************* 06330000
*  /**                                                                * 06340000
*  /**                                                                * 06350000
*  /**    ***** *****  GET A CONTROL CARD  ***** *****                * 06360000
*  /**                                                                * 06370000
*  /**                                                                * 06380000
*  /******************************************************************* 06390000
*  A2B33:;                                                              06400000
*            DCBPTR = ADDR(SYSI); /*POINT TO SYSIN DCB         @ZA28703 06410000
A2B33    LA    @F,COMMON+116                                      0220  06420000
         ST    @F,COMMON+300                                      0220  06430000
*         IF DCBPTR -> EODSW = ON THEN GO TO CLEANUP; /*EOF ON @ZA24201 06440000
         LR    @2,@F               COMMON                         0221  06450000
         CLC   268(1,@2),ON                                       0221  06460000
         BC    08,CLEANUP                                         0222  06470000
*                          /*SYSIN ALREADY, THEN GO TO CLEANUP @ZA24201 06480000
*  GEN(GET SYSI,INBUFA);                                                06490000
         GET SYSI,INBUFA                                                06500000
         DS    0H                                                       06510000
*  /***************************************************************/    06520000
*  /**  FLUSH TO END OF DSD GROUP HERE ****************************/    06530000
*  /***************************************************************/    06540000
*         IF FLUSHSW = ON THEN DO        /*IF FLUSHSW ON DO BELOW*/;    06550000
         CLC   COMMON2+36(1),ON                                   0224  06560000
         BC    07,@9F7                                            0224  06570000
*  A2B34:;                                                              06580000
*  /******************************************************************* 06590000
*  /**                                                                * 06600000
*  /**    THIS SECTION WILL FLUSH CARDS ON INPUT UNTIL AN 'END'       * 06610000
*  /** CONTROL CARD IS FOUND.THEY ARE NOT PRINTED ON SYSPRINT.WHEN END* 06620000
*  /** IS FOUND THE END SWITCH IS TURNED ON AND A BRANCH IS TAKEN TO  * 06630000
*  /** CLEANUP.                                                       * 06640000
*  /**                                                                * 06650000
*  /******************************************************************* 06660000
*         IF INBUF(1) ¬= ' ' THEN GO TO A2B344 /**BR TO LOOK FOR END**/ 06670000
A2B34    CLI   0(@9),C' '                                         0227  06680000
         BC    07,A2B344                                          0228  06690000
*               R9 = R9 + 1    /**INCREMENT SCAN POINTER**/;            06700000
         AH    @9,@D2                                             0229  06710000
*         IF R9 = COUNTER THEN GO TO A2B33 /*BR AT END OF SCAN**/;      06720000
         C     @9,COMMON+232                                      0230  06730000
         BC    08,A2B33                                           0231  06740000
*               GO TO A2B34    /** LOOP ON SCAN**/;                     06750000
         BC    15,A2B34                                           0232  06760000
*  A2B344:;                                                             06770000
*         IF INBUF(1:3) ¬= 'END' THEN GO TO A2B33 /**BR TO GET CARD**/; 06780000
A2B344   CLC   0(3,@9),@C14                                       0234  06790000
         BC    07,A2B33                                           0235  06800000
*               ENDSW = ON     /**TURN ON END SWITCH**/;                06810000
         MVC   COMMON2+28(1),ON                                   0236  06820000
*               GO TO CLEANUP  /**BRANCH TO END THIS DSD GROUP**/;      06830000
         BC    15,CLEANUP                                         0237  06840000
*         END;                                                          06850000
*  /******************************************************************* 06860000
*  /**                                                                * 06870000
*  /**    THIS SECTION IS ENTERED WHEN NO FLUSHING IS REQUIRED.IT WILL* 06880000
*  /** CAUSE THE CARD IMAGE TO BE PLACED ON SYSPRINT.IF PRINTING OF   * 06890000
*  /** ALL FLUSHED CARDS IS REQUIRED THIS SECTION SHOULD BE MOVED     * 06900000
*  /** AHEAD OF PRIOR SECTION.                                        * 06910000
*  /**                                                                * 06920000
*  /******************************************************************* 06930000
*               MS  =  30                 /* PRINT CARD ON SYSPRINT */; 06940000
@9F7     LA    @F,30                                              0239  06950000
         STH   @F,COMMON1+102                                     0239  06960000
*                GEN ( LINK EP=IEBDGMSG);                               06970000
          LINK EP=IEBDGMSG                                              06980000
         DS    0H                                                       06990000
*  GEN;                                                                 07000000
*********************************************************************** 07010000
*        THIS SECTION WILL SCAN CONTROL CARDS AT LOCATION INBUF. R9   * 07020000
*        IS USED AS A POINTER WHICH IS UPDATED AS NEEDED BY THE SCAN  * 07030000
*        CONTROL CARD NAMES ARE SKIPPED BY IF PRESENT.A NAME IS       * 07040000
*        INDICATED TO THE SCAN BY A NON-BLANK IN COL ONE UPON FIRST   * 07050000
*        ENTRY WHEN INSPECTING THE CARD. A BLANK SHOULD FOLLOW THE    * 07060000
*        NAME.BLANK CARDS ARE FLUSHED. SEVERAL SWITCHES ARE TESTED    * 07070000
*        FOR CONTINUATION AND APPROPRIATE BRANCHES GIVEN.CONTINUATION * 07080000
*        FOR ALL CONTROL CARDS STARTS IN COL 4                        * 07090000
*********************************************************************** 07100000
         DS    0H                                                       07110000
*  /******************************************************************* 07120000
*  /**                                                                * 07130000
*  /**    ***** CONTROL CARD SCAN STARTS HERE *****                   * 07140000
*  /**                                                                * 07150000
*  /******************************************************************* 07160000
*  SCAN:;                                                               07170000
*  /******************************************************************* 07180000
*  /**                                                                * 07190000
*  /**    IF THE FD CONTINUATION SWITCH IS ON,'LINK' TO IEBFDANL.     * 07200000
*  /**                                                                * 07210000
*  /******************************************************************* 07220000
*            IF FDCSW = ON THEN DO /* IF FD CONT CARD DO FOLLOWING*/;   07230000
SCAN     CLC   COMMON2(1),ON                                      0243  07240000
         BC    07,@9F6                                            0243  07250000
*  LINKFD:;                                                             07260000
*         GEN ( LINK EP=IEBFDANL) ;                                     07270000
LINKFD    LINK EP=IEBFDANL                                              07280000
         DS    0H                                                       07290000
*                              /*************************************** 07300000
*                              /* UPON RETURN FROM THE FD ANALYSIS   ** 07310000
*                              /* MODULE WE MUST DETERMINE WHETHER A  * 07320000
*                              /* MESSAGE IS TO BE PRINTED OR ANOTHER * 07330000
*                              /* CONTROL CARD IS NEEDED.A MESSAGE IS * 07340000
*                              /* INDICATED BY EPSW BEING A 1.        * 07350000
*                              /*************************************** 07360000
*  LINKFD1:;                                                            07370000
*         IF EPSW ¬= 1 THEN GO TO A2B3 /**GET A CARD NO MSG REQD**/;    07380000
LINKFD1  CLI   COMMON2+32,1                                       0248  07390000
         BC    07,A2B3                                            0249  07400000
*               GO TO A1B3     /**BRANCH TO ISSUE MESSAGE**/;           07410000
         BC    15,A1B3                                            0250  07420000
*            END;                                                       07430000
*  /******************************************************************* 07440000
*  /**                                                                * 07450000
*  /**    IF THE CR CONTINUATION SWITCH IS ON,BRANCH TO ISSUE 'LINK'  * 07460000
*  /** TO IEBCRANL.                                                   * 07470000
*  /**                                                                * 07480000
*  /******************************************************************* 07490000
*                   /* IF CRCSW ON GO TO LINK TO CRANL*/                07500000
*         IF CRCSW = ON THEN GO TO A2G35;                               07510000
@9F6     EQU   *                                                  0252  07520000
         CLC   COMMON2+18(1),ON                                   0252  07530000
         BC    08,A2G35                                           0253  07540000
*  /******************************************************************* 07550000
*  /**                                                                * 07560000
*  /**    THIS SECTION WILL TEST FOR COMMENTS CONTINUATION FOR THIS   * 07570000
*  /** MODULE(IGBDG) AND (IGBFDANL).AS LONG AS A NON-BLANK IS FOUND   * 07580000
*  /** IN COLUMN 72 AND THE COMCSW IS ON A BRANCH WILL BE TAKEN TO    * 07590000
*  /** GET ANOTHER CARD.THE LAST COMMENT CARD,BLANK IN 72,CAUSES THE  * 07600000
*  /** COMCSW TO BE TURNED OFF AND A BRANCH TO GET ANOTHER CARD.      * 07610000
*  /**                                                                * 07620000
*  /******************************************************************* 07630000
*         IF COMCSW = ON THEN DO /*IF COM CONT SW ON DO FOLLOWING*/;    07640000
         CLC   COMMON2+29(1),ON                                   0254  07650000
         BC    07,@9F5                                            0254  07660000
*                   /* IF THIS CARD HAS COMM INDICATOR GET ANOTHER */   07670000
*         IF COUNTER -> INBUF(2) ¬= ' ' THEN GO TO A2B3;                07680000
         L     @2,COMMON+232       COMMON                         0256  07690000
         CLI   1(@2),C' '                                         0256  07700000
         BC    07,A2B3                                            0257  07710000
*               COMCSW = OFF /* TURN OFF COMMENT CONT SW */;            07720000
         MVC   COMMON2+29(1),OFF                                  0258  07730000
*               GO TO A2B3  /* BR TO GET ANOTHER CARD*/;                07740000
         BC    15,A2B3                                            0259  07750000
*         END;                                                          07760000
*  /******************************************************************* 07770000
*  /**    THIS SECTION TESTS FOR A DSD CONTINUATION.IF ON,THE SWITCH  * 07780000
*  /** IS TURNED OFF,SCAN POINTED AT COLUMN 4 AND BRANCH TO PROCESS.  * 07790000
*  /******************************************************************* 07800000
*        IF DSDCSW = ON THEN DO          /*IS DSD CONTINUATION SW ON*/; 07810000
@9F5     CLC   COMMON2+17(1),ON                                   0261  07820000
         BC    07,@9F4                                            0261  07830000
*              DSDCSW = OFF             /* YES TURN IT OFF*/;           07840000
         MVC   COMMON2+17(1),OFF                                  0263  07850000
*         R9 = R9 + 3          /**POINTER TO CONT COLUMN**/;            07860000
         AH    @9,@D3                                             0264  07870000
*               GO TO A3C4 /* BR TO CONTINUE SCANNING DSD */;           07880000
         BC    15,A3C4                                            0265  07890000
*                             END;                                      07900000
*  /******************************************************************* 07910000
*  /**                                                                * 07920000
*  /** IF THE FD PICTURE CONTINUE SWITCH IS ON A BRANCH IS TAKEN TO   * 07930000
*  /** 'LINK' TO IEBFDANL FOR FURTHER PROCESSING.                     * 07940000
*  /******************************************************************* 07950000
*         IF FDPCSW = ON THEN GO TO LINKFD /* BR TO LINK TO FD */;      07960000
@9F4     CLC   COMMON2+2(1),ON                                    0267  07970000
         BC    08,LINKFD                                          0268  07980000
*  /******************************************************************* 07990000
*  /**                                                                * 08000000
*  /** IF FIRST COLUMN OF CARD IS NOT BLANK BRANCH TO PROCESS         * 08010000
*  /** A CONTROL CARD NAME.                                           * 08020000
*         IF INBUF(1) ¬= ' ' THEN GO TO LABEL1 /**BR IF COL1 NOT BLANK* 08030000
         CLI   0(@9),C' '                                         0269  08040000
         BC    07,LABEL1                                          0270  08050000
*  SCAN1:;                                                              08060000
*  /******************************************************************* 08070000
*  /**                                                                * 08080000
*  /**    THIS SECTION WILL SCAN OUT BLANKS LOOKING FOR THE FIRST     * 08090000
*  /** NON-BLANK COLUMN IN THE CARD.A NON-BLANK CAUSES A BRANCH TO    * 08100000
*  /** PROCESS FOR THE CONTROL CARD NAME.                             * 08110000
*  /******************************************************************* 08120000
*         /* IF CHAR FOUND GO TO ANALYZE KEYWORD */                     08130000
*         IF INBUF(1) ¬= ' ' THEN GO TO A2D3 /*BR NON-BLANK TO PROCESS* 08140000
SCAN1    CLI   0(@9),C' '                                         0272  08150000
         BC    07,A2D3                                            0273  08160000
*                                       /* THIS WILL SCAN OUT BLANKS */ 08170000
*         IF R9 = COUNTER THEN GO TO A2B3 /*BR IF AT COLUMN 71        * 08180000
         C     @9,COMMON+232                                      0274  08190000
         BC    08,A2B3                                            0275  08200000
*               R9 = R9 + 1    /** ADD ONE TO SCAN POINTER */;          08210000
         AH    @9,@D2                                             0276  08220000
*  GO TO SCAN1;                                                         08230000
         BC    15,SCAN1                                           0277  08240000
*  GEN;                                                                 08250000
*********************************************************************** 08260000
*  THIS SECTION SCANS OUT ANY NAME PRESENT UPON A CONTROL CARD. A NAME* 08270000
*  IS RECOGNISED AS ANY NON-BLANK STARTING IN COL 1. IT MAY BE 8 CHAR * 08280000
*  LONG.THE NAME MUST BE FOLLOWED BY A BLANK.                         * 08290000
*********************************************************************** 08300000
         DS    0H                                                       08310000
*  LABEL1:;                                                             08320000
*      R9= R9 + ONE;                                                    08330000
LABEL1   AH    @9,ONE                                             0280  08340000
*  IF INBUF(1) ¬=' ' THEN DO;       /* TO SCAN OUT CONTROL CARD LABEL*/ 08350000
         CLI   0(@9),C' '                                         0281  08360000
         BC    08,@9F3                                            0281  08370000
*         IF R9 > ADDR(INBUFA) + 8 THEN DO /* IS NAME TO LONG */;       08380000
         LA    @F,8                                               0283  08390000
         LA    @0,COMMON1+114                                     0283  08400000
         AR    @F,@0                                              0283  08410000
         CR    @F,@9                                              0283  08420000
         BC    10,@9F2                                            0283  08430000
*               MS  =  12                 /* MESSAGE 12  */;            08440000
         LA    @F,12                                              0285  08450000
         STH   @F,COMMON1+102                                     0285  08460000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    08470000
         BC    15,PRINTERR                                        0286  08480000
*                               END;                                    08490000
*         GO TO LABEL1;                                                 08500000
*                         END;                                          08510000
*      GO TO SCAN1;                                                     08520000
*  GEN;                                                                 08530000
*********************************************************************** 08540000
*        THIS SECTION SCANS OUT DSD,FD,CREATE. A DSD CARD MUST BE     * 08550000
*        PRESENT FIRST OTHERWISE NOGO IS SET AND SYNTAX CHECKING      * 08560000
*        ONLY IS PERFORMED. MULTIPLE DSD CARDS NOT ALLOWED. THE LAST  * 08570000
*        ONE WILL BE EFFECTIVE. LABELS OF A3 OPERATE ON DSD.LABELS OF * 08580000
*        A4 OPERATE ON FD. LABELS OF A6 OPERATE ON CREATE             * 08590000
*********************************************************************** 08600000
         DS    0H                                                       08610000
*  A2D3:;                                                               08620000
*  /* LOOK FOR DSD BEING FIRST CARD */                                  08630000
*  /* IF WE HAVE A DSD GO TO LOOK FOR OTHER CONTROL CARDS */            08640000
*  IF INBUF(1:3)=DSD THEN GO TO A3B3;                                   08650000
A2D3     CLC   0(3,@9),DSD                                        0293  08660000
         BC    08,A3B3                                            0294  08670000
*         IF DSDSW = ON THEN GO TO A2G3  /* BR IF DSDSW ON*/;           08680000
         CLC   COMMON2+14(1),ON                                   0295  08690000
         BC    08,A2G3                                            0296  08700000
*         FLUSHSW = ON         /**FLUSH TO END OF DSD GROUP**/;         08710000
         MVC   COMMON2+36(1),ON                                   0297  08720000
*               MS = 18        /** MSG DSD CARD NOT FIRST **/;          08730000
         LA    @F,18                                              0298  08740000
         STH   @F,COMMON1+102                                     0298  08750000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    08760000
         BC    15,PRINTERR                                        0299  08770000
*  A2G3:;                                                               08780000
*  /******************************************************************* 08790000
*  /**                                                                * 08800000
*  /**    IF CONTROL CARD IS 'FD' THEN BRANCH TO LINK TO IEBFDANL     * 08810000
*  /******************************************************************* 08820000
*         IF INBUF(1:2) = 'FD' THEN GO TO LINKFD ;                      08830000
A2G3     CLC   0(2,@9),@C15                                       0301  08840000
         BC    08,LINKFD                                          0302  08850000
*  /******************************************************************* 08860000
*  /**                                                                * 08870000
*  /**    IF CONTROL CARD IS 'CREATE' THEN LINK TO IEBCREAT           * 08880000
*  /**                                                                * 08890000
*  /******************************************************************* 08900000
*         IF INBUF(1:6) = 'CREATE' THEN DO;                             08910000
         CLC   0(6,@9),@C16                                       0303  08920000
         BC    07,@9F1                                            0303  08930000
*  A2G35:;                                                              08940000
*         GEN( LINK  EP=IEBCRANL);                                      08950000
A2G35     LINK  EP=IEBCRANL                                             08960000
         DS    0H                                                       08970000
*  /******************************************************************* 08980000
*  /**                                                                * 08990000
*  /**    UPON RETURN FROM IEBCREAT WE TEST FOR NEED FOR MESSAGE      * 09000000
*  /** AND FLUSHING TO END OF JOB.FLUSHSW1 EQ END OF JOB.EPSW A ONE   * 09010000
*  /** EQ NEED FOR MESSAGE.IF NEITHER ONE IS INDICATED A BRANCH IS    * 09020000
*  /** TAKEN TO GET ANOTHER CONTROL CARD.                             * 09030000
*  /******************************************************************* 09040000
*         IF EPSW  =  1  THEN GO TO A1B3;                               09050000
         CLI   COMMON2+32,1                                       0307  09060000
         BC    08,A1B3                                            0308  09070000
*         IF FLUSHSW1 = ON THEN GO TO A2J2 /**BR TO CLEANUP USER STOP** 09080000
         CLC   COMMON2+37(1),ON                                   0309  09090000
         BC    08,A2J2                                            0310  09100000
*               GO TO A2B3;                                             09110000
         BC    15,A2B3                                            0311  09120000
*         END;                                                          09130000
*  /******************************************************************* 09140000
*  /**                                                                * 09150000
*  /**    THIS SECTION TESTS FOR 'REPEAT'.IF FOUND A BRANCH IS TAKEN  * 09160000
*  /** TO PROCESS THE REPEAT CONTROL CARD.                            * 09170000
*  /**                                                                * 09180000
*  /******************************************************************* 09190000
*                                        /* IF REPEAT CONTROL CARD */   09200000
*                                        /* GO TO PROCESS IT */         09210000
*         IF INBUF(1:6) = 'REPEAT' THEN GO TO A3C14;                    09220000
@9F1     CLC   0(6,@9),@C17                                       0313  09230000
         BC    08,A3C14                                           0314  09240000
*  /**                                                                * 09250000
*  /******************************************************************* 09260000
*  /**    THIS SECTION TESTS FOR END.IF FOUND THE END SWITCH IS       * 09270000
*  /** TURNED ON AND A BRANCH TAKEN TO CLEANUP.                       * 09280000
*  /**                                                                * 09290000
*  /******************************************************************* 09300000
*                                       /* IF END CONTROL CARD GO */    09310000
*                                        /* TO PROCESS IT */            09320000
*         IF INBUF(1:3) = 'END' THEN DO;                                09330000
         CLC   0(3,@9),@C14                                       0315  09340000
         BC    07,@9F0                                            0315  09350000
*               ENDSW = ON  /* TURN ON END SWITCH*/;                    09360000
         MVC   COMMON2+28(1),ON                                   0317  09370000
*         GO TO CLEANUP;                                                09380000
         BC    15,CLEANUP                                         0318  09390000
*          END;                                                         09400000
*  /******************************************************************* 09410000
*  /**                                                                * 09420000
*  /**    THIS SECTION TESTS FOR 'DUMP'.IF FOUND REGISTER 15 IS LOADED* 09430000
*  /** WITH ZERO AND A BRANCH TAKEN ON REG 15.THIS FACILITY ALLOWS THE* 09440000
*  /** FIELD ENGINEER TO CAUSE AN'ABEND' DUMP TO OCCUR.IT IS INTENDED * 09450000
*  /** THAT THIS FACILITY WILL BE EXPANDED SOME TIME IN THE FUTURE TO * 09460000
*  /** INCORPORATE MUCH MORE DIAGNOSTIC CAPABILITY.                   * 09470000
*  /**                                                                * 09480000
*  /******************************************************************* 09490000
*         IF INBUF(1:4) ¬= 'DUMP' THEN GO TO A2G36;                     09500000
@9F0     CLC   0(4,@9),@C18                                       0320  09510000
         BC    07,A2G36                                           0321  09520000
*               R15 = 0 ;                                               09530000
         SR    @F,@F                                              0322  09540000
*               GEN ( BR 15 );                                          09550000
          BR 15                                                         09560000
         DS    0H                                                       09570000
*  /******************************************************************* 09580000
*  /**                                                                * 09590000
*  /**    AT THIS POINT A CORRECT CONTROL CARD NAME HAS NOT BEEN FOUND* 09600000
*  /** A MESSAGE IS INDICATED AND A BRANCH TAKEN TO ISSUE THE MESSAGE.* 09610000
*  /**                                                                * 09620000
*  /******************************************************************* 09630000
*  A2G36:;                                                              09640000
*         IF INBUF(1:2) = '/*' THEN                                     09650000
A2G36    CLC   0(2,@9),@C19                                       0325  09660000
*         GO TO CLEANUP;                                                09670000
         BC    08,CLEANUP                                         0326  09680000
*               MS  =  2                 /* MESSAGE  2  */;             09690000
         LA    @F,2                                               0327  09700000
         STH   @F,COMMON1+102                                     0327  09710000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    09720000
         BC    15,PRINTERR                                        0328  09730000
*  GEN;                                                                 09740000
*********************************************************************** 09750000
*        THIS SECTION PERFORMS THE CLEANUP FUNCTION IT IS ENTERED FROM* 09760000
*        EODAD ON SYSIN WHEN A /* CARD IS FOUND IN THE INPUT STREAM.  * 09770000
* ENTRY IS ALSO FROM THE END CONTROL CARD*******                      * 09780000
*********************************************************************** 09790000
         DS    0H                                                       09800000
*  CLEANUP:;                                                            09810000
*  A2J2:;                                                               09820000
CLEANUP  EQU   *                                                  0331  09830000
*  /******************************************************************* 09840000
*  /**    A MESSAGE WILL BE INDICATED IF THE REPEATSW IS LEFT ON BY   * 09850000
*  /** THE CREATE MODULE.CREATE TURNS THIS OFF IF THE REPEAT FUNCTION * 09860000
*  /** HAS BEEN FULLY SATISFIED.                                      * 09870000
*  /******************************************************************* 09880000
*         IF REPEATSW = ON THEN DO  /*IS REPEAT QUANTITY SATISFIED*/;   09890000
A2J2     CLC   COMMON2+42(1),ON                                   0332  09900000
         BC    07,@9EF                                            0332  09910000
*               MS = 14     /* NO-SET MESSAGE NUMBER */;                09920000
         LA    @F,14                                              0334  09930000
         STH   @F,COMMON1+102                                     0334  09940000
*         GEN ( LINK EP=IEBDGMSG);                                      09950000
          LINK EP=IEBDGMSG                                              09960000
         DS    0H                                                       09970000
*                           /* REPEAT QUANTITY SATISFIED HERE */        09980000
*         END;                                                          09990000
* /******************************************************************** 10000000
* /*                                                                  * 10010000
* /* CHECK IF SPECIFIED PICTURE DOES EXCEED END OR /* ,IF SO GIVE MSG * 10020000
* /* AND SET CONDITION CODE .                                   A41807* 10030000
* /*                                                                  * 10040000
* /******************************************************************** 10050000
*         IF PICCSW(4) = '1'B           /* STILL PICTURE EXPECT A41807* 10060000
*              THEN DO ;            /* END OF CONTROL STATEMENT A41807* 10070000
@9EF     TM    COMMON2+26,B'00010000'                             0337  10080000
         BC    12,@9EE                                            0337  10090000
*                   MS = 16 ;       /* SET MESSAGE              A41807* 10100000
         LA    @F,16                                              0339  10110000
         STH   @F,COMMON1+102                                     0339  10120000
*               PICCSW(4) = '0'B ;      /* SET TO ZERO          A41807* 10130000
         NI    COMMON2+26,B'11101111'                             0340  10140000
*                   FLUSHSW1 = ON ;    /* SET SWITCH TO END JOB A41807* 10150000
         MVC   COMMON2+37(1),ON                                   0341  10160000
*                   GO TO PRINTERR ;   /* PRINT ERROR MESSAGE   A41807* 10170000
         BC    15,PRINTERR                                        0342  10180000
*          END ;                    /* END OF CHECK PICTURE LEN A41807* 10190000
* /*                                                                  * 10200000
*         IF ENDSW = ON THEN GO TO A2J5 /**BR AROUND COMP MSG,END ON ** 10210000
@9EE     CLC   COMMON2+28(1),ON                                   0344  10220000
         BC    08,A2J5                                            0345  10230000
*               MS = 29 /**INDICATE SUCCESSFUL COMPLETION MESSAGE**/;   10240000
         LA    @F,29                                              0346  10250000
         STH   @F,COMMON1+102                                     0346  10260000
*  A2J4:;                                                               10270000
*                              /** LINK TO MESSAGE MODULE **/           10280000
*         GEN ( LINK EP=IEBDGMSG);                                      10290000
A2J4      LINK EP=IEBDGMSG                                              10300000
         DS    0H                                                       10310000
*  /******************************************************************* 10320000
*  /**                                                                * 10330000
*  /** ******** CLEANUP MODULE ENTERED FROM HERE ********             * 10340000
*  /**                                                                * 10350000
*  /******************************************************************* 10360000
*  A2J5:;                                                               10370000
*         GEN ( LINK EP=IEBDGCUP);                                      10380000
A2J5      LINK EP=IEBDGCUP                                              10390000
         DS    0H                                                       10400000
*  A2J6:;                                                               10410000
*  /******************************************************************* 10420000
*  /**    UPON RETURN FROM CLEANUP THE END SWITCH BEING ON INDICATES  * 10430000
*  /** THAT THERE MAY BE ANOTHER GROUP OF CONTROL CARDS TO PROCESS.   * 10440000
*  /** THE SWITCHES ARE TURNED OFF AND A BRANCH TAKEN TO GET ANOTHER  * 10450000
*  /** CONTROL CARD.IF NO MORE CONTROL CARDS ARE PRESENT A SLASH      * 10460000
*  /** ASTERICK CARD SHOULD BE PRESENT.CLEANUP WOULD BE ENTERED AGAIN * 10470000
*  /** WITH THE END SWITCH OFF.THIS CAUSES DATA GENERATOR SYSIN AND   * 10480000
*  /** SYSPRINT DATA SETS TO BE CLOSED.UPON RETURN FROM CLEANUP A     * 10490000
*  /** RETURN IS TAKEN FROM THIS MODULE BACK TO THE SYSTEM.           * 10500000
*  /******************************************************************* 10510000
*         IF ENDSW = ON THEN DO /**DO BELOW IF ENDSW ON **/;            10520000
A2J6     CLC   COMMON2+28(1),ON                                   0352  10530000
         BC    07,@9ED                                            0352  10540000
*               SWITCH(1) = '00'X /**FIRST SW TO OFF **/;               10550000
         MVI   COMMON2,X'00'                                      0354  10560000
*         SWITCH(2:53) = SWITCH(1:52);                                  10570000
         MVC   COMMON2+1(52),COMMON2                              0355  10580000
*               SYSINSEL = OFF /** TURN OFF SYSIN SEL SWITCH**/;        10590000
         MVC   COMMON3+28(1),OFF                                  0356  10600000
*         GO TO A2B3;                                                   10610000
         BC    15,A2B3                                            0357  10620000
*         END;                                                          10630000
*         GO TO USER           /** RETURN TO USER **/;                  10640000
*  /******************************************************************* 10650000
*  /**                                                                * 10660000
*  /**    THIS SECTION WILL SCAN FOR KEYWORDS ON THE DSD CONTROL CARD.* 10670000
*  /** KEYWORDS ALLOWED ARE OUTPUT= AND INPUT=. AN EIGHT CHARACTER    * 10680000
*  /** DD NAME IS ALLOWED WITHIN THE PARANTHESIS.ANY NUMBER OF DDNAMES* 10690000
*  /** ARE ALLOWED WITHIN THE DELIMITERS,ALTHOUGH THE CURRENT         * 10700000
*  /** IMPLEMENTATION WITHIN THE CREATE MODULE CAN ONLY PROCESS ONE   * 10710000
*  /** OUTPUT DATA SET.THE SRL ONLY ALLOWS ONE OUTPUT DATA SET.ONE    * 10720000
*  /** INPUT DATA SET MAY BE PROCESSED PER CREATE CARD.               * 10730000
*  /**                                                                * 10740000
*  /******************************************************************* 10750000
* A3B3:;                                                                10760000
*  /******************************************************************* 10770000
*  /**                                                                * 10780000
*  /**    THIS SECTION TESTS AND ALLOWS ONLY ONE DSD CARD PER GROUP.  * 10790000
*  /** MESSAGE IS INDICATED IF MORE THAN ONE.                         * 10800000
*  /**                                                                * 10810000
*  /******************************************************************* 10820000
*         IF DSDSW = ON THEN DO /**IS A DSD ALREADY PRESENT**/;         10830000
A3B3     CLC   COMMON2+14(1),ON                                   0361  10840000
         BC    07,@9EC                                            0361  10850000
*               MS = 25        /**INDICATE MESSAGE**/;                  10860000
         LA    @F,25                                              0363  10870000
         STH   @F,COMMON1+102                                     0363  10880000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    10890000
         BC    15,PRINTERR                                        0364  10900000
*         END;                                                          10910000
*  /******************************************************************* 10920000
*  /**                                                                * 10930000
*  /**    THIS SECTION INITILIZES REPEATNO AND CREATEND TO ONE FOR THE* 10940000
*  /** CREATE MODULE IF THE NOGO SWITCH ISNT ON.                      * 10950000
*  /******************************************************************* 10960000
*         IF NOGOSW = ON THEN GO TO A3C3 /* BR IF NOGO SWITCH IS ON*/;  10970000
@9EC     CLC   COMMON2+15(1),ON                                   0366  10980000
         BC    08,A3C3                                            0367  10990000
*               DSDSW = ON               /* TURN ON DSD SWITCH*/;       11000000
         MVC   COMMON2+14(1),ON                                   0368  11010000
*               REPEATNO = 1       /* INIT REPEATNO FOR CRANL*/;        11020000
         LA    @F,1                                               0369  11030000
         STH   @F,COMMON+16                                       0369  11040000
*               CREATENO = 1      /*INIT CREATENO FOR CRANL */;         11050000
         STH   @F,COMMON+18                                       0370  11060000
*  /******************************************************************* 11070000
*  /**                                                                * 11080000
*  /**    TEST FOR A BLANK FOLLOWING 'DSD' AND ISSUE MSG IF NOT THERE.* 11090000
*  /******************************************************************* 11100000
* A3C3:;                                                                11110000
*         R9 = R9 + THREE /* ADVANCE POINTER TO BLANK */;               11120000
A3C3     AH    @9,THREE                                           0372  11130000
*         IF INBUF(1) = ' ' THEN GO TO A3C4;                            11140000
         CLI   0(@9),C' '                                         0373  11150000
         BC    08,A3C4                                            0374  11160000
*               MS  =  20                /* MESSAGE  20 */;             11170000
         LA    @F,20                                              0375  11180000
         STH   @F,COMMON1+102                                     0375  11190000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    11200000
         BC    15,PRINTERR                                        0376  11210000
* A3C4:;                                                                11220000
*  /** THIS SECTION TESTS FOR PROCESSING OF MULTIPLE DDNAMES WITHIN **/ 11230000
*  /** THE PARENS.IF DSDSW IS ON,IT IS TURNED OFF AND A BRANCH TAKEN**/ 11240000
*  /** TO A3C45 FOR FURTHER PROCESSING OF A NAME.SCANNING IS STARTED ** 11250000
*  /** AT COL FOUR **/                                                  11260000
*         IF DSDISW = ON THEN DO /** IS INPUT CONT IND **/;             11270000
A3C4     CLC   COMMON2+39(1),ON                                   0378  11280000
         BC    07,@9EB                                            0378  11290000
*               DSDISW = OFF   /** TURN OFF DSDISW**/;                  11300000
         MVC   COMMON2+39(1),OFF                                  0380  11310000
*               GO TO A3C45    /** BRANCH FOR FURTHER SCANNING**/;      11320000
         BC    15,A3C45                                           0381  11330000
*         END;                                                          11340000
*         IF REPEATSW = ON THEN DO /**DO BELOW IF REPEATSW ON**/;       11350000
@9EB     CLC   COMMON2+42(1),ON                                   0383  11360000
*               GO TO A3C143   /** BRANCH FOR REPEAT CONT**/;           11370000
         BC    08,A3C143                                          0385  11380000
*         END;                                                          11390000
*  /******************************************************************* 11400000
*  /**                                                                * 11410000
*  /**    THIS SECTION SCANS OUT ANY BLANK COLUMNS FOLLOWING 'DSD'    * 11420000
*  /******************************************************************* 11430000
*         IF INBUF(1) = ' ' THEN DO ;                                   11440000
@9EA     CLI   0(@9),C' '                                         0387  11450000
         BC    07,@9E9                                            0387  11460000
*               R9 = R9 + ONE ;          /* ADD ONE TO BUFFER PTR */    11470000
         AH    @9,ONE                                             0389  11480000
*                                        /* THIS SCANS OUT BLANKS */    11490000
*         IF R9 < COUNTER THEN GO TO A3C4;                              11500000
         C     @9,COMMON+232                                      0390  11510000
         BC    04,A3C4                                            0391  11520000
*         IF R9 => COUNTER THEN GO TO A3C441 /**BR IF WRONG COLUMN**/;  11530000
         C     @9,COMMON+232                                      0392  11540000
         BC    10,A3C441                                          0393  11550000
*         END;                                                          11560000
* /******************************************************************** 11570000
* /**                                                                ** 11580000
* /** THIS SECTION SCANS OUT THE KEYWORDS OUTPUT AND INPUT           ** 11590000
* /** IT WILL ISSUE A GETMAIN FOR 256 BYTES AS A DDNAME IS FOUND     ** 11600000
* /** A COPY OF  A DCB IS MOVED INTO THIS AREA AND THE DDNAME FOUND  ** 11610000
* /** PLACED IN THE DCB.THE DCB IS THEN OPENED.IF UNABLE TO OPEN THE ** 11620000
* /** DCB A MESSAGE IS ISSUED NOGOI SET AND INPUT STREAM FLUSHED THRU** 11630000
* /** THE END CARD.ADDRESSES OF MULTIPLE DCBS ARE KEPT AS FOLLOWS:   ** 11640000
*  /**    FIRSTGMI = FIRST INPUT DCB,FIRSTGMO = FIRST OUTPUT DCB      * 11650000
* /**     NEXTDCB = ADDRESS OF NEXT DCB,WORD 65 OF EACH DCB          ** 11660000
* /**     DDNAME1 = DDNAME FOR THIS DCB,WORD 66-67 OF EACH DCB       ** 11670000
* /**                                                                ** 11680000
* /******************************************************************** 11690000
*  A3C41:;                                                              11700000
@9E9     EQU   *                                                  0395  11710000
*  /******************************************************************* 11720000
*  /**                                                                * 11730000
*  /**    THIS SECTION TESTS FOR 'OUTPUT',IF FOUND,THE DSDDSW IS      * 11740000
*  /** TURNED ON,POINTER ADJUSTED TO DDNAME AND A BRANCH TAKEN TO     * 11750000
*  /** SCAN OUT THE OUTPUT DDNAME.                                    * 11760000
*  /******************************************************************* 11770000
*                                        /* LOOK FOR OUTPUT KEYWORD  */ 11780000
*         IF INBUF(1:8) = 'OUTPUT=(' THEN DO;                           11790000
A3C41    CLC   0(8,@9),@C21                                       0396  11800000
         BC    07,@9E8                                            0396  11810000
*               DSDOSW = ON              /* TURN ON DSDOSW */;          11820000
         MVC   COMMON2+38(1),ON                                   0398  11830000
*               R9 = R9 + 8              /* ADJUST POINTER */;          11840000
         AH    @9,@D4                                             0399  11850000
*               GO TO A3C44              /* BRANCH TO SCAN OUT NAME */; 11860000
         BC    15,A3C44                                           0400  11870000
*         END;                           /*LOOK FOR INPUT KEYWORD*/;    11880000
*  /******************************************************************* 11890000
*  /**                                                                * 11900000
*  /**    THIS SECTION TESTS FOR 'INPUT' AND BRANCHES TO SCAN OUT     * 11910000
*  /** INPUT DDNAME,OTHERWISE AN ERROR MESSAGE IS INDICATED           * 11920000
*  /******************************************************************* 11930000
*         IF INBUF(1:7) = 'INPUT=(' THEN GO TO A3C43;                   11940000
@9E8     CLC   0(7,@9),@C22                                       0403  11950000
         BC    08,A3C43                                           0404  11960000
*               MS = 5                   /*INVALID KEYWORD MESS */;     11970000
         LA    @F,5                                               0405  11980000
         STH   @F,COMMON1+102                                     0405  11990000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    12000000
         BC    15,PRINTERR                                        0406  12010000
*  A3C43:;                                                              12020000
*  /******************************************************************* 12030000
*  /**                                                                * 12040000
*  /**    ENTRY HERE FOR INPUT DDNAMES ONLY.THE DSDOSW IS TURNED OFF  * 12050000
*  /** AND THE SCAN POINTER ADJUSTED TO POINT TO INPUT DDNAME.        * 12060000
*  /******************************************************************* 12070000
*               DSDOSW = OFF   /** TURN OFF DSD OUTPUT SWITCH**/;       12080000
A3C43    MVC   COMMON2+38(1),OFF                                  0408  12090000
*               R9 = R9 + 7              /* ADJUST POINTER*/;           12100000
         AH    @9,@D5                                             0409  12110000
*  A3C44:;                                                              12120000
*  /******************************************************************* 12130000
*  /**                                                                * 12140000
*  /** IF DDNAME IS IN COL 72 INDICATE MSG AND BRANCH.                * 12150000
*  /******************************************************************* 12160000
*         IF R9 < COUNTER THEN GO TO A3C45 /* IS POINTER AT COL 72*/;   12170000
A3C44    C     @9,COMMON+232                                      0411  12180000
         BC    04,A3C45                                           0412  12190000
*  A3C441:;                                                             12200000
*               MS = 21                  /* COL 72 MESSAGE */;          12210000
A3C441   LA    @F,21                                              0414  12220000
         STH   @F,COMMON1+102                                     0414  12230000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    12240000
         BC    15,PRINTERR                                        0415  12250000
*  /******************************************************************* 12260000
*  /**                                                                * 12270000
*  /** SET UP FOR SCAN AND BRANCH TO SCAN OUT DDNAME.                 * 12280000
*  /******************************************************************* 12290000
*  A3C45:;                                                              12300000
*               R7 = R9                  /* COPY PTR FOR SCAN */;       12310000
A3C45    LR    @7,@9                                              0417  12320000
*               GO TO A3C50   /* BRANCH TO SCAN OUT NAME */;            12330000
         BC    15,A3C50                                           0418  12340000
*  /******************************************************************* 12350000
*  /**                                                                * 12360000
*  /** INCREMENT POINTER AND TEST TO SEE IF DDNAME EXTENDS INTO COLUMN* 12370000
* /* 72. BRANCH TO SET MESSAGE IF SO                           A38710 * 12380000
*  /******************************************************************* 12390000
*  A3C47:;                                                              12400000
*               R7 = R7 + 1              /* ADD 1 TO SCAN PTR*/;        12410000
A3C47    AH    @7,@D2                                             0420  12420000
*       IF R7 = COUNTER + 1 THEN GO TO A3C441 ; /*BRANCH TO MSGA38710 * 12430000
         LA    @F,1                                               0421  12440000
         A     @F,COMMON+232                                      0421  12450000
         CR    @F,@7                                              0421  12460000
         BC    08,A3C441                                          0422  12470000
*  /******************************************************************* 12480000
*  /*                                                                   12490000
*  /*    LOOK FOR COMMA OR PAREN FOLLOWING DDNAME                       12500000
*  /*    FOR OUTPUT ONLY ONE DDNAME IS PERMITTED                 A38766 12510000
*  /*                                                                   12520000
*  /******************************************************************* 12530000
*  A3C50:;                                                              12540000
*         IF R7 -> INBUF(1) = ',' THEN DO ;  /* CHECK FOR COMMA A38766* 12550000
A3C50    CLI   0(@7),C','                                         0424  12560000
         BC    07,@9E7                                            0424  12570000
*               IF DSDOSW ¬= ON THEN GO TO A3C60 ; /*INPUT:CONT A38766* 12580000
         CLC   COMMON2+38(1),ON                                   0426  12590000
         BC    07,A3C60                                           0427  12600000
*                    /* FOR OUTPUT MORE THEN ONE DDNAME SPECIF  A38766* 12610000
*                    MS = 3 ;           /* SET MSG INVALID OPER A38766* 12620000
         LA    @F,3                                               0428  12630000
         STH   @F,COMMON1+102                                     0428  12640000
*                    GO TO PRINTERR ;    /* PRINT ERROR MSG     A38766* 12650000
         BC    15,PRINTERR                                        0429  12660000
*               END ;                                        /* A38766* 12670000
*         IF R7 -> INBUF(1) ¬= ')' THEN GO TO A3C47 /*BR NOT FOUND*/;   12680000
@9E7     CLI   0(@7),C')'                                         0431  12690000
         BC    07,A3C47                                           0432  12700000
*               PARENSW = ON             /*TURN ON PAREN SW */;         12710000
         MVC   COMMON2+41(1),ON                                   0433  12720000
* /* END OF DDNAME PARA FOUND AT THIS POINT R9 POINTS AT START OF */    12730000
* /* NAME IN INBUF.WE WILL GET LENGTH IN R6,GETMAIN FOR DCB PLACE*/     12740000
* /* NAME IN DCB AND AT WORD 66-67 OF DCB */                            12750000
*  /******************************************************************* 12760000
*  /**                                                                * 12770000
*  /**    THIS SECTION DETERMINES IF A VALID DDNAME WAS FOUND.        * 12780000
*  /******************************************************************* 12790000
*  A3C60:;                                                              12800000
*               R6 = R7 - R9             /* CALCULATE DDNAME LENGTH*/;  12810000
A3C60    LCR   @6,@9                                              0435  12820000
         AR    @6,@7                                              0435  12830000
*         IF R6 = 0 THEN GO TO A3C65 /* BR TO SET MSG */;               12840000
         LTR   @6,@6                                              0436  12850000
         BC    08,A3C65                                           0437  12860000
*     IF R6 > EIGHT THEN DO;            /* NAME TO LONG */              12870000
         CH    @6,EIGHT                                           0438  12880000
         BC    12,@9E6                                            0438  12890000
*  A3C65:;                                                              12900000
*               MS = 3                   /*INDICATE MESSAGE 3 */;       12910000
A3C65    LA    @F,3                                               0441  12920000
         STH   @F,COMMON1+102                                     0441  12930000
*               GO TO PRINTMSG /** BRANCH TO PRINT MESSAGE**/;          12940000
         BC    15,PRINTMSG                                        0442  12950000
*                         END;                                          12960000
*  /******************************************************************* 12970000
*  /**                                                                * 12980000
*  /**    THIS SECTION GETS CORE FOR 280 BYTES FOR A DCB.16 BYTES ARE** 12990000
*  /** USED FOR SWITCHES AND DDNAME.4 BYTES FOR WORKAREA POINTER      * 13000000
*  /******************************************************************* 13010000
*         GEN ( GETMAIN EC,LV=280,A=GCADDR,SP=0,MF=(E,GETMLIST));       13020000
@9E6     EQU   *                                                  0444  13030000
          GETMAIN EC,LV=280,A=GCADDR,SP=0,MF=(E,GETMLIST)               13040000
         DS    0H                                                       13050000
*  /******************************************************************* 13060000
*  /**                                                                * 13070000
*  /**    IF GETMAIN IS SUCCESSFUL BRANCH TO CLEAR GOTTEN CORE,       * 13080000
* /* R15 CONTAINS CCODES UPON RETURN FROM GMAIN 0=OK,4=NOTOK  */        13090000
*  /** OTHERWISE INDICATE MSG,CONCODE AND BRANCH TO PRINT MESSAGE.    * 13100000
*  /******************************************************************* 13110000
*         IF R15 = 0 THEN GO TO A3C70 /* BRANCH IF GMAIN SUCESS */;     13120000
         LTR   @F,@F                                              0445  13130000
         BC    08,A3C70                                           0446  13140000
*               MS = 10                  /*NO SUCCESS GMAIN MESSAGE*/;  13150000
         LA    @F,10                                              0447  13160000
         STH   @F,COMMON1+102                                     0447  13170000
*               CONCODE = 12             /*CONDITION CODE FOR USER*/;   13180000
         LA    @F,12                                              0448  13190000
         STH   @F,COMMON1+2                                       0448  13200000
*               GO TO PRINTMSG /** BRANCH TO PRINT MESSAGE**/;          13210000
         BC    15,PRINTMSG                                        0449  13220000
*  /******************************************************************* 13230000
*  /**                                                                * 13240000
*  /** CLEAR CORE HERE AND PUT CORE ADDRESS IN DCB POINTER.MOVE COPY  * 13250000
*  /** OF DCB TO THIS AREA.                                           * 13260000
*  /******************************************************************* 13270000
* A3C70:;                                                               13280000
*               DCBPTR = GCADDR          /* INIT DCB PTR*/;             13290000
A3C70    MVC   COMMON+300(4),COMMON1+72                           0451  13300000
*         DCBD(1:256) = MYDCB3A          /* COPY 256 BYTE DCB*/;        13310000
         L     @2,COMMON+300       COMMON                         0452  13320000
         MVC   0(256,@2),MYDCB3A                                  0452  13330000
*        DCBD(257) = '00'X              /* CLEAR CORE*/;                13340000
         MVI   256(@2),X'00'                                      0453  13350000
*         DCBD(258:280) = DCBD(257:279) /** CLEAR CORE**/;              13360000
         MVC   257(23,@2),256(@2)                                 0454  13370000
*  /******************************************************************* 13380000
*  /**    THIS SECTION INITILIZES TABLES FOR GETMAIN ADDRESSES        * 13390000
*  /******************************************************************* 13400000
* /*                                                                 */ 13410000
* /* IF WE ARE PROCESSING OUTPUT DS USE THIS SECTION OTHERWISE GO TO */ 13420000
* /*                                                           NEXT  */ 13430000
*         IF DSDOSW = ON THEN DO         /* IS DSD OUTPUT SW ON */;     13440000
         CLC   COMMON2+38(1),ON                                   0455  13450000
         BC    07,@9E5                                            0455  13460000
*               IF FIRSTGMO = 0 THEN DO  /*IS ADDR INITILIZED*/;        13470000
         SR    @F,@F                                              0457  13480000
         C     @F,COMMON1+76                                      0457  13490000
         BC    07,@9E4                                            0457  13500000
*                  FIRSTGMO = GCADDR     /*IF NO,INITILIZE IT*/;        13510000
         MVC   COMMON1+76(4),COMMON1+72                           0459  13520000
*               LASTGMO = GCADDR         /* INIT LAST GM PTR*/;         13530000
         MVC   COMMON1+84(4),COMMON1+72                           0460  13540000
*         CURRGMO = GCADDR       /* INIT CURRENT GM ADDR*/;             13550000
         MVC   COMMON1+80(4),COMMON1+72                           0461  13560000
*               GO TO A3C75    /*BR TO OPEN OUTPUTDCB FIRST TIME*/;     13570000
         BC    15,A3C75                                           0462  13580000
*                  END;                                                 13590000
*               DCBPTR = LASTGMO         /*INIT DCBPTR TO PREV DCBAD*/; 13600000
@9E4     MVC   COMMON+300(4),COMMON1+84                           0464  13610000
*               NEXTDCB = GCADDR         /*INIT NEXTDCB PTR TO NEXT*/;  13620000
         L     @2,COMMON+300       COMMON                         0465  13630000
         MVC   256(4,@2),COMMON1+72                               0465  13640000
*         CURRGMO = GCADDR       /* INIT CURRENT GM ADDR*/;             13650000
         MVC   COMMON1+80(4),COMMON1+72                           0466  13660000
*               DCBPTR = GCADDR          /*INIT DCBPTR TO CURRENT*/;    13670000
         MVC   COMMON+300(4),COMMON1+72                           0467  13680000
*               LASTGMO = GCADDR         /*INIT LASTGM PTR*/;           13690000
         MVC   COMMON1+84(4),COMMON1+72                           0468  13700000
*               GO TO A3C75              /* BR TO OPEN DS */;           13710000
         BC    15,A3C75                                           0469  13720000
*         END;                                                          13730000
* /* THIS POINT IS ENTERED IF INPUT DDNAME IS FOUND LENGTH OF NAME*/    13740000
* /* IS IN R6  R9 POINTS AT START                                    */ 13750000
* /*                                                                 */ 13760000
*         IF FIRSTGMI = 0 THEN DO        /*Q-FIRST TIME ON INPUT */;    13770000
@9E5     SR    @F,@F                                              0471  13780000
         C     @F,COMMON1+88                                      0471  13790000
         BC    07,@9E3                                            0471  13800000
*               FIRSTGMI = GCADDR        /* INIT FIRST GM PTR*/;        13810000
         MVC   COMMON1+88(4),COMMON1+72                           0473  13820000
*               LASTGMI = GCADDR         /* INIT LAST GM PTR*/;         13830000
         MVC   COMMON1+96(4),COMMON1+72                           0474  13840000
*               CURRGMI = GCADDR         /* INIT CURRENT GM PTR*/;      13850000
         MVC   COMMON1+92(4),COMMON1+72                           0475  13860000
*               GO TO A3C73              /*BR THIS IS FOR FIRST TIME*/; 13870000
         BC    15,A3C73                                           0476  13880000
*         END;                                                          13890000
* /* COME HERE WHEN FIRST GM PTR HAS BEEN INITILIZED */                 13900000
*               DCBPTR = LASTGMI         /* INIT DCBPTR TO PREV DCBAD*/ 13910000
@9E3     MVC   COMMON+300(4),COMMON1+96                           0478  13920000
*               NEXTDCB = GCADDR         /* INIT NEXTDCB PTR TO NEXT*/; 13930000
         L     @2,COMMON+300       COMMON                         0479  13940000
         MVC   256(4,@2),COMMON1+72                               0479  13950000
*               CURRGMI = GCADDR         /* INIT CURRENT GM PTR*/;      13960000
         MVC   COMMON1+92(4),COMMON1+72                           0480  13970000
*               DCBPTR = GCADDR          /* INIT DCBPTR TO CURRENT*/;   13980000
         MVC   COMMON+300(4),COMMON1+72                           0481  13990000
*               LASTGMI = GCADDR         /* INIT LAST GM PTR*/;         14000000
         MVC   COMMON1+96(4),COMMON1+72                           0482  14010000
*  /******************************************************************* 14020000
*  /**                                                                * 14030000
*  /**    AT THIS POINT WE HAVE GOT SPACE FOR A DCB,CLEARED THIS SPACE* 14040000
*  /** AND INIT NEXTDCBPTR IN PREVIOUS DCB.WE WILL NOW PLACE THE      * 14050000
*  /** DDNAME INTO THE DCB AND AT END OF DCB FOR THE CREATE MODULE.   * 14060000
*  /**                                                                * 14070000
*  /******************************************************************* 14080000
*  A3C73:;                                                              14090000
*  A3C75:;                                                              14100000
A3C73    EQU   *                                                  0484  14110000
*         DDNAME1 = INBUF(1:R6)          /*MOVE DDNAME TO TABLE*/;      14120000
A3C75    LR    @2,@6                                              0485  14130000
         BCTR  @2,0                                               0485  14140000
         LR    @E,@9                                              0485  14150000
         L     @4,COMMON+300       COMMON                         0485  14160000
         LA    @A,260(0,@4)                                       0485  14170000
         MVI   0(@A),C' '                                         0485  14180000
         MVC   1(007,@A),0(@A)                                    0485  14190000
         EX    @2,@MVC                                            0485  14200000
*  A3C76:;                                                              14210000
*         DDNAME = INBUF(1:R6)           /*MOVE DDNAME TO DCB */;       14220000
A3C76    LR    @2,@6                                              0487  14230000
         BCTR  @2,0                                               0487  14240000
         LR    @E,@9                                              0487  14250000
         L     @4,COMMON+300       COMMON                         0487  14260000
         LA    @A,40(0,@4)                                        0487  14270000
         MVI   0(@A),C' '                                         0487  14280000
         MVC   1(007,@A),0(@A)                                    0487  14290000
         EX    @2,@MVC                                            0487  14300000
* /******************************************************************** 14310000
* /*                                                                  * 14320000
* /* TO TAKE CARE THAT THE RIGHT ACCESS METHOD IS USED THERE    A37883* 14330000
* /* IS DONE A GETMAIN TO GET STORAGE NECESSARY TO READ A JFCB  A37883* 14340000
* /* SO THAT BEFORE OPEN THE DSORG CAN BE CHECKED               A37883* 14350000
* /* TO SUPPORT PO MEMBERS THEIR DSORG WILL BE SET TO PS        A37883* 14360000
* /*                                                                  * 14370000
* /******************************************************************** 14380000
*         DSORG = '40'X ;               /* SET DEFAULT DSORG=PS A37883* 14390000
         MVI   26(@4),X'40'                                       0488  14400000
*        OPTBYTE1 = DCBPTR ;            /* GIVE ADDRESS OF DCB  A50927* 14410000
         MVC   COMMON+236(4),COMMON+300                           0489  14420000
*         GENERATE ;                    /* TO GET CORE FOR JFCB A37883* 14430000
*                                                                     * 14440000
*   DO GETMAIN FOR JFCB                                        A37883 * 14450000
*                                                                     * 14460000
         LA    R0,GETAREA              LOAD 176 FOR JFCB       A37883 * 14470000
         GETMAIN R,LV=(0)              GETMAIN FOR 176 BYTES   A37883   14480000
         DS    0H                                                       14490000
* /******************************************************************** 14500000
* /*                                                            A37883* 14510000
* /* IF GETMAIN SUCCESFUL CLEAR GOTTEN CORE, RETURN CODE=0,     A37883* 14520000
* /* OTHERWISE GIVE MESS,COND COD & PRINT MESS                  A37883* 14530000
* /*                                                            A37883* 14540000
* /******************************************************************** 14550000
*         IF R15 ¬= 0                   /* GETMAIN NOT SUCCESFULA37883* 14560000
*            THEN DO ;                  /* THEN                 A37883* 14570000
         LTR   @F,@F                                              0491  14580000
         BC    08,@9E2                                            0491  14590000
*                   MS = 10 ;           /* GIVE MESS            A37883* 14600000
         LA    @F,10                                              0493  14610000
         STH   @F,COMMON1+102                                     0493  14620000
*                   CONCODE = 12 ;      /* COND CODE FOR USER   A37883* 14630000
         LA    @F,12                                              0494  14640000
         STH   @F,COMMON1+2                                       0494  14650000
*                   GO TO PRINTMSG ;    /* PRINT MESSAGE        A37883* 14660000
         BC    15,PRINTMSG                                        0495  14670000
*         END ;                                                         14680000
* /*                                                                  * 14690000
* /*    BUILD SKELETON DCB FOR RDJFCB                           A37883* 14700000
* /*                                                                  * 14710000
*        JFCBPTR = R1 ;                 /* SAVE JFCB ADDRESS    A37883* 14720000
@9E2     ST    @1,JFCBPTR                                         0497  14730000
*        EXLIST = ADDR(EXITLIST) ;      /* PUT EXIT ADDR IN DCB A37883* 14740000
         LA    @F,EXITLIST                                        0498  14750000
         L     @2,COMMON+300       COMMON                         0498  14760000
         ST    @F,@TEMP4                                          0498  14770000
         MVC   37(3,@2),@TEMP4+1                                  0498  14780000
*        PTRJFCB = ADDR(JFCB) ;         /* POINT DCB EXIT TO JFCB37883* 14790000
         L     @4,JFCBPTR                                         0499  14800000
         ST    @4,@TEMP4                                          0499  14810000
         MVC   EXITLIST+1(3),@TEMP4+1                             0499  14820000
*        HEX87 = '87'X ;                /* FILL IN INDIC JFCB   A37883* 14830000
         MVI   EXITLIST,X'87'                                     0500  14840000
*              JFCB(1) = '00'X ;        /* CLEAR CORE           A37883* 14850000
         MVI   0(@4),X'00'                                        0501  14860000
*              JFCB(2:176) = JFCB(1:175) ; /* FOR USING JFCB    A38883* 14870000
         MVC   1(175,@4),0(@4)                                    0502  14880000
*         OPTBYTE1(1) = '80'X ;         /* INDICATE INPUT       A50927* 14890000
         MVI   COMMON+236,X'80'                                   0503  14900000
*         R1 = ADDR(OPENLIST) ;         /*GIVE PLACE IN SUBPOOL A50927* 14910000
         LA    @1,COMMON+236                                      0504  14920000
*        GEN( RDJFCB MF=(E,(1)))  ;     /*  READ JFCB           A50927* 14930000
          RDJFCB MF=(E,(1))                                             14940000
         DS    0H                                                       14950000
* /* TEST DSORG; IF IT IS INDEX SEQ. SET IT SO; ELSE DSORG=P.S  A37883* 14960000
*        IF DSORGJ(1) = '1'B            /* IS DSORG INDEX SEQ   A37883* 14970000
*            THEN DO ;                  /* YES, THEN            A37883* 14980000
         TM    98(@4),B'10000000'                                 0506  14990000
         BC    12,@9E1                                            0506  15000000
*                   DSORG = '80'X ;     /* RESET DSORG TO I.S.  A37883* 15010000
         MVI   26(@2),X'80'                                       0508  15020000
*        END ;                          /* END OF CHECKING DSORGA37883* 15030000
* /* RESET JFCB-EXIT AND GIVE STORAGE BACK;ALSO RELEASE REG 3.  A37883* 15040000
*        HEX87 = '07'X ;                /* RESET JFCBEXIT NOT L A37883* 15050000
@9E1     MVI   EXITLIST,X'07'                                     0510  15060000
*        R1 = JFCBPTR ;                 /* POINT R1 TO JFCBAREA A37883* 15070000
         L     @1,JFCBPTR                                         0511  15080000
*        GENERATE ;                     /* FREEMAIN MACRO       A37883* 15090000
         LA    R0,GETAREA              SIZE OF JFCBAREA         A37883  15100000
         FREEMAIN R,LV=(0),A=(1)       FREE UP JFCBAREA         A37883  15110000
         DS    0H                                                       15120000
* /*                                                                 */ 15130000
* /* WE ARE NOW READY TO OPEN THE DCB THE OPEN LIST MUST BE INIT.*/     15140000
* /* SEE CONTROL PROGRAM SERVICES FORM C28-6541-1 PAGE 123 FOR  */      15150000
* /* DESCRIPTION OF PARAMETER LIST */                                   15160000
* /*                                                                 */ 15170000
*               OPTBYTE1 = DCBPTR        /* DCB ADDRESS TO LIST*/;      15180000
         MVC   COMMON+236(4),COMMON+300                           0513  15190000
*         EXLIST  = ADDR(EXLST3) /* INITLZ DCB EXLIST ADDR */;          15200000
         LA    @F,COMMON+276                                      0514  15210000
         L     @2,COMMON+300       COMMON                         0514  15220000
         ST    @F,@TEMP4                                          0514  15230000
         MVC   37(3,@2),@TEMP4+1                                  0514  15240000
*         EDCB5  = '85'X  /* INITLZ EXIT LIST IND FIELD */;             15250000
         MVI   COMMON+276,X'85'                                   0515  15260000
*         EDCB6  = ADDR(DCBROUT3) /*INITLZ EXIT LIST ADDR FIELD */;     15270000
         LA    @F,DCBROUT3                                        0516  15280000
         ST    @F,@TEMP4                                          0516  15290000
         MVC   COMMON+277(3),@TEMP4+1                             0516  15300000
*         IF DSDOSW = ON THEN DO         /*IF OUTPUT SET BITS */;       15310000
         CLC   COMMON2+38(1),ON                                   0517  15320000
         BC    07,@9E0                                            0517  15330000
*               OPTBYTE1(1) = '8F'X /* INDICATE LAST,DISP,OUTPUT */;    15340000
         MVI   COMMON+236,X'8F'                                   0519  15350000
*               GO TO A3C77              /* BR TO OPEN DCB */;          15360000
         BC    15,A3C77                                           0520  15370000
*         END;                                                          15380000
*         OPTBYTE1(1) = '80'X  /* INDICATE OPEN FOR INPUT */;           15390000
@9E0     MVI   COMMON+236,X'80'                                   0522  15400000
*               MACRF = '5000'X          /*SET MACRF TO GET MOVE */;    15410000
         L     @2,COMMON+300       COMMON                         0523  15420000
         MVC   50(2,@2),@X27                                      0523  15430000
* /* READY TO OPEN DCB AS INDICATED IN LIST */                          15440000
*  A3C77:;                                                              15450000
*               R1 = ADDR(OPENLIST)      /*OPEN LIST ADDR FOR OPEN*/;   15460000
A3C77    LA    @1,COMMON+236                                      0525  15470000
*         GEN   (OPEN MF=(E,(1)));                                      15480000
         OPEN MF=(E,(1))                                                15490000
         DS    0H                                                       15500000
*         IF OFLGS(4) ¬='1' B THEN GO TO A3C79 /* BR DCB NOT OPEN*/;    15510000
         L     @2,COMMON+300       COMMON                         0527  15520000
         TM    48(@2),B'00010000'                                 0527  15530000
         BC    12,A3C79                                           0528  15540000
*         IF FLUSHSW = ON THEN DO /* FALL THROUGH-FLUSH REQUIRED */;    15550000
         CLC   COMMON2+36(1),ON                                   0529  15560000
         BC    07,@9DF                                            0529  15570000
*                                  /* IF FUSHING IS REQD ISSUE MESSAGE* 15580000
*               MS = 28            /* MESS FOR INCORRECT DCB PARA */;   15590000
         LA    @F,28                                              0531  15600000
         STH   @F,COMMON1+102                                     0531  15610000
*               GO TO PRINTMSG /** BRANCH TO PRINT MESSAGE**/;          15620000
         BC    15,PRINTMSG                                        0532  15630000
*         END;                                                          15640000
*  /******************************************************************* 15650000
*  /**                                                                * 15660000
*  /**    THIS SECTION GETS CORE FOR THE LRECL WORKAREA.ITS ADDRESS   * 15670000
*  /** IS STORED IN LOCATION OUTREC FOR USE BY THE CREATE MODULE.     * 15680000
*  /** BLOCKSIZE LENGTH IS GOTTEN IF RECORD FORMAT IS 'U'.            * 15690000
*  /**                                                                * 15700000
*  /******************************************************************* 15710000
*               R6 = LRECL      /* COPY RCD LGTH FOR GETMAIN */;        15720000
@9DF     L     @2,COMMON+300       COMMON                         0534  15730000
         LH    @6,82(0,@2)                                        0534  15740000
*         IF RECFM = 'C0'X THEN DO /**BRANCH IF NOT 'U' RCD **/;        15750000
         CLI   36(@2),X'C0'                                       0535  15760000
         BC    07,@9DE                                            0535  15770000
*               R6 = BLKSI     /** PICK UP BLOCKSIZE**/;                15780000
         LH    @6,62(0,@2)                                        0537  15790000
*         END;                                                          15800000
*         IF DSORG(1) = '1'B THEN DO ;   /* INDEX SEQUENTIAL    A45169* 15810000
@9DE     L     @2,COMMON+300       COMMON                         0539  15820000
         TM    26(@2),B'10000000'                                 0539  15830000
         BC    12,@9DD                                            0539  15840000
*            R6 = R6 + KEYLEN ;          /* ADD KEYLEN TO LRECL A45169* 15850000
         SR    @0,@0                                              0541  15860000
         IC    @0,16(0,@2)                                        0541  15870000
         AR    @6,@0                                              0541  15880000
*         END ;                          /* FOR GETTING CORR BUFA45169* 15890000
*               R8 = ADDR(GCADDR) /* GET GC ADDRESS */;                 15900000
@9DD     LA    @8,COMMON1+72                                      0543  15910000
*  GEN ( GETMAIN EC,LV=(R6),A=(R8),SP=0,MF=(E,GETMLIST));               15920000
          GETMAIN EC,LV=(R6),A=(R8),SP=0,MF=(E,GETMLIST)                15930000
         DS    0H                                                       15940000
*  /******************************************************************* 15950000
*  /**                                                                * 15960000
*  /** IF GETMAIN IS SUCCESSFUL INITILIZE INREC OR OUTREC AND BRANCH  * 15970000
*  /**                                                                * 15980000
*  /******************************************************************* 15990000
*         IF R15 = 0 THEN DO   /* IS GETMAIN SUCESSFUL */;              16000000
         LTR   @F,@F                                              0545  16010000
         BC    07,@9DC                                            0545  16020000
*               GMLGTH = R6    /** SAVE LENGTH FOR CUP**/;              16030000
         L     @2,COMMON+300       COMMON                         0547  16040000
         STH   @6,276(0,@2)                                       0547  16050000
*         IF DSDOSW = ON THEN DO    /**IF OUTPUT DO BELOW**/;           16060000
         CLC   COMMON2+38(1),ON                                   0548  16070000
         BC    07,@9DB                                            0548  16080000
*               OUTREC = GCADDR     /**INIT ADDR FOR OUTPUT WORKAREA**/ 16090000
         MVC   COMMON1+4(4),COMMON1+72                            0550  16100000
*               GO TO A3C80         /** BRANCH FOR PROCESSING**/;       16110000
         BC    15,A3C80                                           0551  16120000
*         END;                                                          16130000
*               INREC = GCADDR      /**INIT ADDR FOR INPUT WORKAREA**/; 16140000
@9DB     L     @2,COMMON+300       COMMON                         0553  16150000
         MVC   272(4,@2),COMMON1+72                               0553  16160000
*               GO TO A3C80         /**BRANCH FOR PROCESSING**/;        16170000
         BC    15,A3C80                                           0554  16180000
*         END ;                                                         16190000
*  /******************************************************************* 16200000
*  /**                                                                * 16210000
*  /** SET MESSAGE,INDICATE FLUSH TO END CARD AND BRANCH TO PRINT     * 16220000
*  /******************************************************************* 16230000
*               MS = 10        /* INDICATE MESSAGE*/;                   16240000
@9DC     LA    @F,10                                              0556  16250000
         STH   @F,COMMON1+102                                     0556  16260000
*               FLUSHSW = ON  /* TURN ON FLUSH AND ISSUE MESSAGE*/;     16270000
         MVC   COMMON2+36(1),ON                                   0557  16280000
*               GO TO PRINTMSG /** BRANCH TO PRINT MESSAGE**/;          16290000
         BC    15,PRINTMSG                                        0558  16300000
*  /******************************************************************* 16310000
*  /**                                                                * 16320000
*  /**    THIS SECTION INDICATES MSG,CONCODE FOR AN UNSUCCESSFUL      * 16330000
*  /** OPEN AND BRANCHES TO PRINT MESSAGE.                            * 16340000
*  /**                                                                * 16350000
*  /******************************************************************* 16360000
*  A3C79:;                                                              16370000
*               CONCODE = 12             /*CODE FOR USER */;            16380000
A3C79    LA    @F,12                                              0560  16390000
         STH   @F,COMMON1+2                                       0560  16400000
*               MS = 24  /* SET MSG CANNOT OPEN */;                     16410000
         LA    @F,24                                              0561  16420000
         STH   @F,COMMON1+102                                     0561  16430000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    16440000
         BC    15,PRINTERR                                        0562  16450000
*  /******************************************************************* 16460000
*  /**                                                                * 16470000
*  /**    CONTINUE HERE AFTER AN OPEN SUCCESS.                        * 16480000
*  /** THERE MAY BE MORE DCBS TO OPEN.R9 POINTS AT START OF DDNAME AS * 16490000
*  /** OF LAST OPEN.R6 = LENGTH OF NAME.R7 = COMMA OR PAREN AFTER NAME* 16500000
*  /** A BLANK AFTER PAREN INDICATES END OF CARD.COMMA INDICATES      * 16510000
*  /** MORE DDNAMES ARE PRESENT.THE POINTER WILL BE ADVANCED AND IF   * 16520000
*  /** COMMA IS PRESENT A BRANCH IS TAKEN TO SCAN OUT ANOTHER NAME.   * 16530000
*  /** IF BLANK A BRANCH IS TAKEN TO GET ANOTHER CARD.                * 16540000
*  /**                                                                * 16550000
*  /******************************************************************* 16560000
*  A3C80:;                                                              16570000
*  A3C81:;                                                              16580000
A3C80    EQU   *                                                  0564  16590000
*               R9 = R7 + 1              /*ADVANCE POINTER TO OPERAND*/ 16600000
A3C81    LA    @9,1                                               0565  16610000
         AR    @9,@7                                              0565  16620000
*         IF R7 -> INBUF(1) = ',' THEN DO /**IF COMMA PRESENT WE ARE    16630000
         CLI   0(@7),C','                                         0566  16640000
         BC    07,@9DA                                            0566  16650000
*                                            SCANNING INSIDE PARENS**/; 16660000
*         IF INBUF(1) = ' ' THEN GO TO A3C83 /**  IF A BLANK FOLLOWS    16670000
         CLI   0(@9),C' '                                         0568  16680000
*                                                 THE COMMA WE HAVE     16690000
*                                                 INPUT DDNAMES ON THE  16700000
*                                                 NEXT CARD**/;         16710000
         BC    08,A3C83                                           0569  16720000
*         IF R7 = COUNTER THEN DO /** IF COMMA IN COL 71 DO BELOW**/;   16730000
         C     @7,COMMON+232                                      0570  16740000
         BC    07,@9D9                                            0570  16750000
*  A3C83:;                                                              16760000
*               DSDCSW = ON    /** TURN ON DSD CONT SW**/;              16770000
A3C83    MVC   COMMON2+17(1),ON                                   0573  16780000
*             DSDISW = ON      /** GT 1 NAME WITHIN PARENS DSDISW ON**/ 16790000
         MVC   COMMON2+39(1),ON                                   0574  16800000
*               GO TO A2B3     /** BRANCH TO GET ANOTHER CARD**/;       16810000
         BC    15,A2B3                                            0575  16820000
*         END;                                                          16830000
*               GO TO A3C45    /** BRANCH NOT AT COL 71 YET**/;         16840000
*         END;                                                          16850000
*         IF INBUF(1) = ' ' THEN DO      /*TO CHECK FOR COMMENTS*/;     16860000
@9DA     CLI   0(@9),C' '                                         0579  16870000
         BC    07,@9D8                                            0579  16880000
*               IF COUNTER -> INBUF(2) ¬= ' ' THEN DO;                  16890000
         L     @2,COMMON+232       COMMON                         0581  16900000
         CLI   1(@2),C' '                                         0581  16910000
         BC    08,@9D7                                            0581  16920000
*               COMCSW = ON;             /*SET COMMENTS SW*/            16930000
         MVC   COMMON2+29(1),ON                                   0583  16940000
*         END;                                                          16950000
*               IF FIRSTGMO = 0 THEN DO;  /* NO OUTPUT SPECIFIEDA48784* 16960000
@9D7     SR    @F,@F                                              0585  16970000
         C     @F,COMMON1+76                                      0585  16980000
         BC    07,@9D6                                            0585  16990000
*                    MS = 24 ;            /* GIVE MESSAGE       A48784* 17000000
         LA    @F,24                                              0587  17010000
         STH   @F,COMMON1+102                                     0587  17020000
*                    GO TO PRINTERR ;     /*PRINT ERROR MSG     A48784* 17030000
         BC    15,PRINTERR                                        0588  17040000
*               END;                      /* END OF OUTPUT CHECKA48784* 17050000
*         GO TO A2B3                     /* NO COMMENTS-BRANCH*/;       17060000
*         END;                                                          17070000
*  /******************************************************************* 17080000
*  /**                                                                * 17090000
*  /** A COMMA AT THIS POINT INDICATES ANOTHER KEYWORD PRESENT,       * 17100000
*  /** OTHERWISE A MSG IS INDICATED.                                  * 17110000
*  /******************************************************************* 17120000
*         IF INBUF(1) = ',' THEN DO      /* IF COMMA DO BELOW*/;        17130000
@9D8     CLI   0(@9),C','                                         0592  17140000
         BC    07,@9D5                                            0592  17150000
*               R9 = R9 + 1              /*STEP PTR PAST COMMA*/;       17160000
         AH    @9,@D2                                             0594  17170000
*         IF INBUF(1) = ' ' THEN DO /**A BLANK INDICATES CONT **/;      17180000
         CLI   0(@9),C' '                                         0595  17190000
         BC    07,@9D4                                            0595  17200000
*               DSDCSW = ON    /**TURN ON DSD CONT SW**/;               17210000
         MVC   COMMON2+17(1),ON                                   0597  17220000
*               GO TO A2B3     /**BRANCH TO GET ANOTHER CARD**/;        17230000
         BC    15,A2B3                                            0598  17240000
*         END;                                                          17250000
*               GO TO A3C41              /*BR TO SCAN NEXT KEYWORD*/;   17260000
*         END;                                                          17270000
*               MS = 3                   /*SET MESSAGE INDICATION*/;    17280000
@9D5     LA    @F,3                                               0602  17290000
         STH   @F,COMMON1+102                                     0602  17300000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    17310000
         BC    15,PRINTERR                                        0603  17320000
*  /******************************************************************* 17330000
*  /**                                                                * 17340000
*  /**    ***** REPEAT CARD HERE *****                                * 17350000
*  /**                                                                * 17360000
*  /** ADVANCE POINTER PAST KEYWORD,MSG IF NO FOLLOWING BLANK         * 17370000
*  /**                                                                * 17380000
*  /******************************************************************* 17390000
*  A3C14:;                                                              17400000
*                                       /* POINT TO BLANK FOLLOWING*/   17410000
*                                        /* KEYWORD REPEAT */           17420000
*               R9 = R9 + SIX;                                          17430000
A3C14    AH    @9,SIX                                             0605  17440000
*         IF INBUF(1) = ' ' THEN GO TO A3C141;                          17450000
         CLI   0(@9),C' '                                         0606  17460000
         BC    08,A3C141                                          0607  17470000
*               MS  =  20                /* MESSAGE  20 */;             17480000
         LA    @F,20                                              0608  17490000
         STH   @F,COMMON1+102                                     0608  17500000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    17510000
         BC    15,PRINTERR                                        0609  17520000
*  /******************************************************************* 17530000
*  /**                                                                * 17540000
*  /** SCAN LOOKING FOR FIRST KEYWORD,IF NO KEY BY COL 71 CAUSE A     * 17550000
*  /** MESSAGE TO BE ISSUED.                                          * 17560000
*  /**                                                                * 17570000
*  /******************************************************************* 17580000
*  A3C141:;                                                             17590000
*         IF R9 > COUNTER THEN DO /**ARE WE AT COL 72 **/;              17600000
A3C141   C     @9,COMMON+232                                      0611  17610000
         BC    12,@9D3                                            0611  17620000
*  MS21:;                                                               17630000
*               MS = 21        /** INDICATE MESSAGE 21 **/;             17640000
MS21     LA    @F,21                                              0614  17650000
         STH   @F,COMMON1+102                                     0614  17660000
*               GO TO PRINTMSG /** BRANCH TO PRINT MESSAGE**/;          17670000
         BC    15,PRINTMSG                                        0615  17680000
*         END;                                                          17690000
*               R9 = R9 + ONE ; /* ADVANCE POINTER */                   17700000
@9D3     AH    @9,ONE                                             0617  17710000
*         IF INBUF(1) = ' ' THEN GO TO A3C141 /*BR IF COLUMN BLANK*/;   17720000
         CLI   0(@9),C' '                                         0618  17730000
         BC    08,A3C141                                          0619  17740000
*  A3C142:;                                                             17750000
*  /******************************************************************* 17760000
*  /**                                                                * 17770000
*  /** THIS SECTION TESTS FOR MORE THAN ONE REPEAT CARD PER DSD GROUP * 17780000
*  /******************************************************************* 17790000
*         IF REPEATSW = ON THEN DO /* CHECK FOR DUPLICATE REPEAT CARD*/ 17800000
A3C142   CLC   COMMON2+42(1),ON                                   0621  17810000
         BC    07,@9D2                                            0621  17820000
*               MS = 14                  /* SET MESSAGE 14 */;          17830000
         LA    @F,14                                              0623  17840000
         STH   @F,COMMON1+102                                     0623  17850000
*               FLUSHSW = ON             /* FLUSH ON */;                17860000
         MVC   COMMON2+36(1),ON                                   0624  17870000
*               GO TO PRINTMSG /** BRANCH TO PRINT MESSAGE**/;          17880000
         BC    15,PRINTMSG                                        0625  17890000
*         END;                                                          17900000
*  /******************************************************************* 17910000
*  /**                                                                * 17920000
*  /** THIS SECTION TURNS ON THE REPEAT SWITCH AND PROCESSES FOR THE  * 17930000
*  /** KEYWORD 'QUANTITY'.IF FOUND A BRANCH IS TAKEN TO CONVERT THE   * 17940000
*  /** DECIMAL NUMBER TO BINARY.                                      * 17950000
*  /******************************************************************* 17960000
*  A3C143:;                                                             17970000
@9D2     EQU   *                                                  0627  17980000
*               REPEATSW = ON    /* INDICATE A REPEAT CARD*/;           17990000
A3C143   MVC   COMMON2+42(1),ON                                   0628  18000000
*        IF INBUF(1:9) = 'QUANTITY=' THEN DO ;                          18010000
         CLC   0(9,@9),@C29                                       0629  18020000
         BC    07,@9D1                                            0629  18030000
*               R9 = R9 + NINE ;                                        18040000
         AH    @9,NINE                                            0631  18050000
*     IF R9 > COUNTER THEN GO TO MS21 /**PRINT MS21 IF AT COL 72**/;    18060000
         C     @9,COMMON+232                                      0632  18070000
         BC    02,MS21                                            0633  18080000
*               R7 = ADDR(REPEATNO);                                    18090000
         LA    @7,COMMON+16                                       0634  18100000
*               QUANSW = ON /* SET SWITCH INDICATING QUANTITY */;       18110000
         MVC   COMMON2+40(1),ON                                   0635  18120000
*               GO TO CONVERTB ;                                        18130000
         BC    15,CONVERTB                                        0636  18140000
*         END;                                                          18150000
*  /******************************************************************* 18160000
*  /**                                                                * 18170000
*  /** THIS SECTION PROCESSES THE CREATE KEYWORD OF THE REPEAT CARD   * 18180000
*  /** IF FOUND A BRANCH IS TAKEN TO CONVERT THE DECIMAL NUMBER.      * 18190000
*  /******************************************************************* 18200000
*        IF INBUF(1:7) = 'CREATE=' THEN DO ;                            18210000
@9D1     CLC   0(7,@9),@C30                                       0638  18220000
         BC    07,@9D0                                            0638  18230000
*               R9 = R9 + SEVEN;                                        18240000
         AH    @9,SEVEN                                           0640  18250000
*     IF R9 > COUNTER THEN GO TO MS21 /**PRINT MS21 IF AT COL 72**/;    18260000
         C     @9,COMMON+232                                      0641  18270000
         BC    02,MS21                                            0642  18280000
*              R7 = ADDR(CREATENO);                                     18290000
         LA    @7,COMMON+18                                       0643  18300000
*               GO TO CONVERTB;                                         18310000
         BC    15,CONVERTB                                        0644  18320000
*         END;                                                          18330000
*  /******************************************************************* 18340000
*  /**                                                                * 18350000
*  /** THIS SECTION INDICATES A MESSAGE WHEN THE KEY IS UNRECOGNIZABLE* 18360000
*  /******************************************************************* 18370000
*               MS  =  5                 /* MESSAGE  5 */;              18380000
@9D0     LA    @F,5                                               0646  18390000
         STH   @F,COMMON1+102                                     0646  18400000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    18410000
         BC    15,PRINTERR                                        0647  18420000
*   GEN;                                                                18430000
*********************************************************************** 18440000
* AT ENTRY TO THIS CONVERT DECIMAL TO BINARY SUBROUTINE R9 POINTS AT  * 18450000
* INBUFA JUST AFTER QUANTITY= OR CREATE=.  R7 CONTAINS ADDRESS OF     * 18460000
* REPEATNO OR CREATENO. UPON COMPLETION BINARY NUMBER >HOULD BE      *  18470000
* PRESENT IN CORRECT FIELD.R9 WILL BE INIT TO BLANK OR JUST PAST COMMA* 18480000
* FOLLOWING FIELD. BLANK INDICATES END OF CARD . CONTROL GOES TO READ * 18490000
* ANOTHER. COMMA INDICATES ANOTHER FIELD ,CONTROL TO A3C142 TO LOOK  *  18500000
* FOR CORRECT FIELD                                                   * 18510000
*********************************************************************** 18520000
         DS    0H                                                       18530000
*                                        /* COPY START ADDR OF FIELD*/  18540000
*  CONVERTB:;                                                           18550000
*                                        /* CLEAR WORK FIELD */         18560000
*               R8 = R9 ;                                               18570000
CONVERTB LR    @8,@9                                              0650  18580000
*  CONV1:;                                                              18590000
*                                        /* SEARCH FOR END OF FIELD */  18600000
*        IF R8 -> INBUF(1) = ' ' THEN GO TO CONV2;                      18610000
CONV1    CLI   0(@8),C' '                                         0652  18620000
         BC    08,CONV2                                           0653  18630000
*                                        /* SEARCH FOR END OF FIELD */  18640000
*        IF R8 -> INBUF(1) = ',' THEN GO TO CONV2;                      18650000
         CLI   0(@8),C','                                         0654  18660000
         BC    08,CONV2                                           0655  18670000
*               R8 = R8 + ONE; /* INC POINTER BY ONE */                 18680000
         AH    @8,ONE                                             0656  18690000
*       IF R8 ¬> COUNTER THEN GO TO CONV1 ; /* IF NOT PAST 72  A38710 * 18700000
         C     @8,COMMON+232                                      0657  18710000
         BC    12,CONV1                                           0658  18720000
*               MS = 21        /** INDICATE MESSAGE 21 **/;             18730000
         LA    @F,21                                              0659  18740000
         STH   @F,COMMON1+102                                     0659  18750000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    18760000
         BC    15,PRINTERR                                        0660  18770000
*  CONV2:;                                                              18780000
*               R8 = R8-R9 ; /* OBTAIN FIELD LENGTH */                  18790000
CONV2    SR    @8,@9                                              0662  18800000
*         IF R8 <= 0 THEN GO TO CONV4;                                  18810000
         LTR   @8,@8                                              0663  18820000
         BC    12,CONV4                                           0664  18830000
*               R8 = R8 -ONE; /* TO CORRECT NUMBER */                   18840000
         SH    @8,ONE                                             0665  18850000
*                                        /* PACK FIELD */               18860000
*        GEN (  EX R8,CONV5);                                           18870000
           EX R8,CONV5                                                  18880000
         DS    0H                                                       18890000
*                                        /* CONVERT TO BINARY*/         18900000
*         GEN ( CVB R6,Q);                                              18910000
          CVB R6,Q                                                      18920000
         DS    0H                                                       18930000
*         IF R6 = 0 THEN DO    /** DO BELOW IF ZERO**/;                 18940000
         LTR   @6,@6                                              0668  18950000
         BC    07,@9CF                                            0668  18960000
*               MS = 15        /** SET MESSAGE 15 **/;                  18970000
         LA    @F,15                                              0670  18980000
         STH   @F,COMMON1+102                                     0670  18990000
*               GO TO PRINTERR /** BRANCH TO PRINT MESSAGE**/;          19000000
         BC    15,PRINTERR                                        0671  19010000
*         END;                                                          19020000
*         IF R6 > 65535 THEN GO TO CONV4;                               19030000
@9CF     C     @6,@D6                                             0673  19040000
         BC    02,CONV4                                           0674  19050000
*         GEN ( STH R6,0(R7)); /* STORE NUMBER */                       19060000
          STH R6,0(R7)                                                  19070000
         DS    0H                                                       19080000
*  /******************************************************************* 19090000
*  /**                                                                * 19100000
*  /** AT THIS POINT WE ARE THROUGH CONVERTING THE DECIMAL NUMBER.    * 19110000
*  /** SCAN CONTINUES LOOKING FOR END OF CARD OR INDICATION OF        * 19120000
*  /** ANOTHER KEYWORD.                                               * 19130000
*  /**                                                                * 19140000
*  /******************************************************************* 19150000
*  CONV3:;                                                              19160000
*                                        /* POINTER TO COMMA OR */      19170000
*                                        /* BLANK FOLLOWING NUMBER*/    19180000
*               R9 = R9 + R8 + ONE;                                     19190000
CONV3    LH    @F,ONE                                             0677  19200000
         AR    @F,@8                                              0677  19210000
         AR    @9,@F                                              0677  19220000
*                                        /* IF AT END OF FIELD GO */    19230000
*                                        /* TO READ ANOTHER CARD */     19240000
*         IF INBUF(1) = ' ' THEN GO TO CONV6 /* BR IF COLUMN BLANK */;  19250000
         CLI   0(@9),C' '                                         0678  19260000
         BC    08,CONV6                                           0679  19270000
*  /** R9 IS NOW POINTING AT COMMA**/                                   19280000
*         IF R9 = COUNTER THEN GO TO CONV34 /** IS COMMA IN COL 71**/;  19290000
         C     @9,COMMON+232                                      0680  19300000
         BC    08,CONV34                                          0681  19310000
*         IF INBUF(2) = ' ' THEN DO /** IF BLANK DO BELOW**/;           19320000
         CLI   1(@9),C' '                                         0682  19330000
         BC    07,@9CE                                            0682  19340000
*  CONV34:;                                                             19350000
*               DSDCSW = ON /** TURN ON CONT SW**/;                     19360000
CONV34   MVC   COMMON2+17(1),ON                                   0685  19370000
*               GO TO A2B3     /** BR TO GET ANOTHER CARD**/;           19380000
         BC    15,A2B3                                            0686  19390000
*         END;                                                          19400000
*               R9 = R9 + ONE; /* ADVANCE PTR PAST COMMA */             19410000
@9CE     AH    @9,ONE                                             0688  19420000
*               GO TO A3C143    /* BR TO LOOK FOR ANOTHER KEYWORD*/;    19430000
         BC    15,A3C143                                          0689  19440000
*  CONV4:;                                                              19450000
*               MS = 14;       /** SET MSG TO 14 **/                    19460000
CONV4    LA    @F,14                                              0691  19470000
         STH   @F,COMMON1+102                                     0691  19480000
*               GO TO PRINTERR /** BRANCH TO PRINT MSG AND FLAG **/;    19490000
         BC    15,PRINTERR                                        0692  19500000
*   /* **** PACK FIELD *** THIS INST EXECUTED FROM ABOVE**********/     19510000
*  CONV5:;                                                              19520000
*         GEN ( PACK Q(8),0(1,R9));                                     19530000
CONV5     PACK Q(8),0(1,R9)                                             19540000
         DS    0H                                                       19550000
*  CONV6:;                                                              19560000
*                                   /* BRANCH IF COLUMN BLANK */        19570000
*         IF COUNTER -> INBUF(2) = ' ' THEN GO TO CONV7;                19580000
CONV6    L     @2,COMMON+232       COMMON                         0696  19590000
         CLI   1(@2),C' '                                         0696  19600000
         BC    08,CONV7                                           0697  19610000
*               COMCSW = ON /* TURN ON COMMENTS CONTINUE SWITCH*/;      19620000
         MVC   COMMON2+29(1),ON                                   0698  19630000
*  CONV7:;                                                              19640000
*         IF QUANSW = ON THEN GO TO A2B3 /*BR IF QUAN WAS FOUND */;     19650000
CONV7    CLC   COMMON2+40(1),ON                                   0700  19660000
         BC    08,A2B3                                            0701  19670000
*               MS = 15 /* INDICATE MESSAGE QUANTITY MISSING */;        19680000
         LA    @F,15                                              0702  19690000
         STH   @F,COMMON1+102                                     0702  19700000
*               GO TO PRINTMSG /** BRANCH TO PRINT MESSAGE**/;          19710000
         BC    15,PRINTMSG                                        0703  19720000
*  /******************************************************************* 19730000
*  /** THIS IS THE   DCB EXIT ROUTINE                                ** 19740000
*  /** IT WILL TEST FOR BLOCKSIZE AND LRECL BEING PRESENT.LRECL FOR  ** 19750000
*  /** F RECORDS MUST BE AN EVEN MULTIPLE OF BLOCKSIZE.              ** 19760000
*  /** FOR SYSIN THE DEFAULT IS:                                     ** 19770000
*  /**                          RECFM = FB                           ** 19780000
*  /**                          LRECL = 80                           ** 19790000
*  /**                          BLKSIZE = 80                         ** 19800000
*  /** FOR SYSPRINT THE DEFAULT IS:                                  ** 19810000
*  /**                          RECFM = FBA                          ** 19820000
*  /**                          LRECL = 121                          ** 19830000
*  /**                          BLKSIZE = 121                        ** 19840000
*  /** FOR INPUT OR OUTPUT THE DEFAULT IS:                           ** 19850000
*  /**                          RECFM = U                            ** 19860000
*  /**                          LRECL = 1                            ** 19870000
*  /**                          BLKSIZE = 1                          ** 19880000
*  /**                                                               ** 19890000
*  /** SWITCHES ARE SET UPON ENTRY TO INDICATE TYPE OF DATA SET      ** 19900000
*  /**          SYSISW = SYSIN                                       ** 19910000
*  /**          SYSPSW = SYSPRINT                                    ** 19920000
*  /**          OLDNEWSW = INPUT(OLD) OR OUTPUT(NEW)                 ** 19930000
*  /**                                                               ** 19940000
*  /** AT ENTRY FROM DCB SEPERATE ENTRY POINTS ARE ENTERED FOR EACH  ** 19950000
*  /** TYPE OF DATA SET SO THAT DEFAULT VALUS MAY BE ASSIGNED.       ** 19960000
*  /** IF BLKSIZE OR LRECL IS MISSING UPON ENTRY FROM INPUT OR OUTPUT** 19970000
*  /** DATA SET A SWITCH IS SET SO THAT CONTROL CARDS MAY BE FLUSHED ** 19980000
*  /** TO THE NEXT END OR SLASH ASTERICK CARD.A VALUE OF ONE IS      ** 19990000
*  /** ASSIGNED SO THAT THE DATA SET MAY BE OPENED WITHOUT ABENDING. ** 20000000
*  /**                                                               ** 20010000
*  /******************************************************************* 20020000
*  DCBROUT1:;                                                           20030000
*  /******************************************************************* 20040000
*  /**                                                                * 20050000
*  /** ENTRY FOR SYSIN DATA SET TO ASSIGN DEFAULTS                    * 20060000
*  /******************************************************************* 20070000
*         SAVE14 = R14  /* SAVE OPEN RETURN REG */;                     20080000
DCBROUT1 ST    @E,COMMON1+56                                      0705  20090000
*         DCBPTR = ADDR(SYSI);                                          20100000
         LA    @F,COMMON+116                                      0706  20110000
         ST    @F,COMMON+300                                      0706  20120000
*               DLRECL = 80 /* DEFAULT LRECL 80 */;                     20130000
         LA    @F,80                                              0707  20140000
         STH   @F,COMMON+280                                      0707  20150000
*               DBLKSI = 80 /* DEFAULT BLKSIZE 80 */;                   20160000
         STH   @F,COMMON+282                                      0708  20170000
*               DRECFM = '90'X /*DEFAULT RECFM IS FB */;                20180000
         MVI   COMMON+284,X'90'                                   0709  20190000
*               SYSISW = ON /*TURN ON SYSIN SW */;                      20200000
         MVC   COMMON2+33(1),ON                                   0710  20210000
*               GO TO DCBEXIT /* BRANCH TO CHECK PARAMETERS */;         20220000
         BC    15,DCBEXIT                                         0711  20230000
*                                        /* ENTRY FROM SYSPRINT DCB */  20240000
*  /******************************************************************* 20250000
*  /**                                                                * 20260000
*  /** ENTRY FOR SYSPRINT DATA SET TO ASSIGN DEFAULTS                 * 20270000
*  /**                                                                * 20280000
*  /******************************************************************* 20290000
*  DCBROUT2:;                                                           20300000
*         SAVE14 = R14  /* SAVE OPEN RETURN REG */;                     20310000
DCBROUT2 ST    @E,COMMON1+56                                      0713  20320000
*               DCBPTR = ADDR(SYSP) /* SYSP ADDR TO DCBPTR */;          20330000
         LA    @F,COMMON+20                                       0714  20340000
         ST    @F,COMMON+300                                      0714  20350000
*               DLRECL = 121 /* DEFAULT LRECL 121*/;                    20360000
         LA    @F,121                                             0715  20370000
         STH   @F,COMMON+280                                      0715  20380000
*               DBLKSI = 121 /*DEFAULT BLKSI 121*/;                     20390000
         STH   @F,COMMON+282                                      0716  20400000
*               DRECFM = '94'X           /* DEFAULT RECFM IS FB ASA */; 20410000
         MVI   COMMON+284,X'94'                                   0717  20420000
*               SYSPSW = ON /* TURN ON SYSPRINT SW */;                  20430000
         MVC   COMMON2+34(1),ON                                   0718  20440000
*               GO TO DCBEXIT /* BRANCH TO CHECK PARAMETERS */;         20450000
         BC    15,DCBEXIT                                         0719  20460000
*                                        /*ENTRY FROM OLDNEW DS */      20470000
*  /******************************************************************* 20480000
*  /**                                                                * 20490000
*  /** ENTRY FOR USER INPUT OR OUTPUT DATA SET TO ASSIGN DEFAULTS.    * 20500000
*  /**                                                                * 20510000
*  /******************************************************************* 20520000
*  DCBROUT3:;                                                           20530000
*         SAVE14 = R14  /* SAVE OPEN RETURN REG */;                     20540000
DCBROUT3 ST    @E,COMMON1+56                                      0721  20550000
*         IF DSDOSW = ON THEN DO  /*DROP THRU IF OUTPUT DCB*/;          20560000
         CLC   COMMON2+38(1),ON                                   0722  20570000
         BC    07,@9CD                                            0722  20580000
*               DCBPTR = CURRGMO  /* PICK UP OUTPUT DCB ADDRESS*/;      20590000
         MVC   COMMON+300(4),COMMON1+80                           0724  20600000
*               GO TO DCBROUT4 /* BR TO CONTINUE PROC */;               20610000
         BC    15,DCBROUT4                                        0725  20620000
*         END;                                                          20630000
*               DCBPTR = CURRGMI  /*PICK UP INPUT DCB ADDRESS*/;        20640000
@9CD     MVC   COMMON+300(4),COMMON1+92                           0727  20650000
*  DCBROUT4:;                                                           20660000
*               DLRECL = 1 /*DEFAULT LRECL IS ONE*/;                    20670000
DCBROUT4 LA    @F,1                                               0729  20680000
         STH   @F,COMMON+280                                      0729  20690000
*               DBLKSI = 1 /* DEFAULT BLKSIZE IS ONE */;                20700000
         STH   @F,COMMON+282                                      0730  20710000
*               DRECFM = 'C0'X /* DEFAULT RECFM IS U */;                20720000
         MVI   COMMON+284,X'C0'                                   0731  20730000
*               OLDNEWSW = ON /* TURN ON SWITCH */;                     20740000
         MVC   COMMON2+35(1),ON                                   0732  20750000
*  /******************************************************************* 20760000
*  /**                                                                * 20770000
*  /** LOOK FOR BLOCKSIZE AND SET DEFAULT IF MISSING.                 * 20780000
*  /******************************************************************* 20790000
*  DCBEXIT:;                                                            20800000
*               /* DCB POINTER WAS INITILIZED AT OPEN TIME */           20810000
*               /* IF BLOCKSIZE IS EQUAL TO ZERO ASSIGN DEFAULT*/       20820000
*         IF BLKSI ¬= 0 THEN GO TO DCBEXIT1;                            20830000
DCBEXIT  SR    @F,@F                                              0734  20840000
         L     @2,COMMON+300       COMMON                         0734  20850000
         CH    @F,62(0,@2)                                        0734  20860000
         BC    07,DCBEXIT1                                        0735  20870000
*               /* WHEN OLDNEW WE FLUSH IF DEFAULTED */                 20880000
*         IF OLDNEWSW = ON THEN DO;                                     20890000
         CLC   COMMON2+35(1),ON                                   0736  20900000
         BC    07,@9CC                                            0736  20910000
*               FLUSHSW = ON;                                           20920000
         MVC   COMMON2+36(1),ON                                   0738  20930000
*         END;                                                          20940000
*               /* ASSIGN DEFAULT */                                    20950000
*         BLKSI = DBLKSI;                                               20960000
@9CC     L     @2,COMMON+300       COMMON                         0740  20970000
         MVC   62(2,@2),COMMON+282                                0740  20980000
*  /******************************************************************* 20990000
*  /**                                                                * 21000000
*  /** LOOK FOR LRECL AND SET DEFAULT IF MISSING.                     * 21010000
*  /******************************************************************* 21020000
*  DCBEXIT1:;                                                           21030000
*               /** PASS RECFM 'U', 'F', 'FS', 'V' AND      /*@ZA33693* 21040000
*               /** 'VB' THROUGH THIS TEST AS LRECL         /*@ZA33693* 21050000
*               /** IS NOT REQUIRED BY DATA MANAGEMENT      /*@ZA33693* 21060000
*         IF RECFM(1)='1'B        /*IS RECFM 'U' OR 'F'     /*@ZA33693* 21070000
*         THEN IF RECFM(2)='1'B   /*YES, WHICH IS IT        /*@ZA33693* 21080000
DCBEXIT1 L     @2,COMMON+300       COMMON                         0742  21090000
         TM    36(@2),B'10000000'                                 0742  21100000
         BC    12,@9CB                                            0742  21110000
*              THEN GOTO DCBEXIT4;     /*'U'.               /*@ZA33693* 21120000
         TM    36(@2),B'01000000'                                 0743  21130000
         BC    01,DCBEXIT4                                        0744  21140000
*              ELSE IF RECFM(4)='0'B   /*'F', IS IT UNBLCKD /*@ZA33693* 21150000
*                   THEN GOTO DCBEXIT2;     /*YES.          /*@ZA33693* 21160000
         TM    36(@2),B'00010000'                                 0745  21170000
         BC    08,DCBEXIT2                                        0746  21180000
         BC    15,@9CA                                            0748  21190000
*                   ELSE;                                   /*@ZA33693* 21200000
*         ELSE IF RECFM(2)='1'B   /*NO,  IS IT 'V'          /*@ZA33693* 21210000
*              THEN IF RECFM(5)='0'B   /*YES, IS IT ¬SPANNED/*@ZA33693* 21220000
@9CB     L     @2,COMMON+300       COMMON                         0748  21230000
         TM    36(@2),B'01000000'                                 0748  21240000
         BC    12,@9C9                                            0748  21250000
*                   THEN GOTO DCBEXIT2;     /*YES.          /*@ZA33693* 21260000
         TM    36(@2),B'00001000'                                 0749  21270000
         BC    08,DCBEXIT2                                        0750  21280000
*                                                                       21290000
*               /* IF LRECL ZERO DEFAULT */                             21300000
*         IF LRECL ¬= 0 THEN GO TO DCBEXIT2;                            21310000
@9C9     EQU   *                                                  0751  21320000
@9CA     SR    @F,@F                                              0751  21330000
         L     @2,COMMON+300       COMMON                         0751  21340000
         CH    @F,82(0,@2)                                        0751  21350000
         BC    07,DCBEXIT2                                        0752  21360000
*         /* FLUSH WHEN OLDNEW */                                       21370000
*         IF OLDNEWSW = ON THEN DO;                                     21380000
         CLC   COMMON2+35(1),ON                                   0753  21390000
         BC    07,@9C8                                            0753  21400000
*               FLUSHSW = ON;                                           21410000
         MVC   COMMON2+36(1),ON                                   0755  21420000
*         END;                                                          21430000
*               /* ASSIGN DEFAULT */                                    21440000
*         LRECL = DLRECL;                                               21450000
@9C8     L     @2,COMMON+300       COMMON                         0757  21460000
         MVC   82(2,@2),COMMON+280                                0757  21470000
*  /******************************************************************* 21480000
*  /**                                                                * 21490000
*  /** THIS SECTION TESTS FOR 'F' RECORD.IF 'F' BLOCKSIZE MUST BE AN  * 21500000
*  /** EVEN MULTIPLE OF LRECL.IF NOT,FLUSHING TO END CARD IS INDICATED* 21510000
*  /** DEFAULTS ARE ASSIGNED SO THAT DATA SET WILL OPEN WITHOUT AN    * 21520000
*  /** ABEND.A BRANCH IS THEN TAKEN TO RETURN TO OPEN.                * 21530000
*  /******************************************************************* 21540000
*  DCBEXIT2:;                                                           21550000
*                                        /* TEST FOR V OR U RCD */      21560000
*         IF RECFM(1) = '0'B THEN GO TO DCBEXIT3;                       21570000
DCBEXIT2 L     @2,COMMON+300       COMMON                         0759  21580000
         TM    36(@2),B'10000000'                                 0759  21590000
         BC    08,DCBEXIT3                                        0760  21600000
*                                        /* TEST FOR F RCD */           21610000
*         IF RECFM(2) = '1'B THEN GO TO DCBEXIT3;                       21620000
         TM    36(@2),B'01000000'                                 0761  21630000
         BC    01,DCBEXIT3                                        0762  21640000
*                                                                       21650000
*         /* F TYPE AT THIS POINT. IF UNBLOCKED AND         /*@ZA33693* 21660000
*         /* LRECL=0, SKIP TEST TO AVOID DIVISION BY 0.     /*@ZA33693* 21670000
*                                                                       21680000
*         IF RECFM(4) ='0'B  /*IS IT UNBLOCKED              /*@ZA33693* 21690000
*         THEN IF LRECL=0    /*YES, IS LRECL ZERO           /*@ZA33693* 21700000
         TM    36(@2),B'00010000'                                 0763  21710000
         BC    05,@9C7                                            0763  21720000
*              THEN GOTO DCBEXIT3;/*YES, SKIP TEST          /*@ZA33693* 21730000
         SR    @F,@F                                              0764  21740000
         CH    @F,82(0,@2)                                        0764  21750000
         BC    08,DCBEXIT3                                        0765  21760000
*                                                                       21770000
*         /* BLOCKSIZE MUST BE AN EVEN MULTIPLE OF LRECL DIVIDE THE */  21780000
*         /* TWO THE REMAINDER IS PLACED IN LEFTOVER */                 21790000
*               LEFTOVER = BLKSI // LRECL;                              21800000
@9C7     L     @2,COMMON+300       COMMON                         0766  21810000
         LH    @E,62(0,@2)                                        0766  21820000
         SRDA  @E,32                                              0766  21830000
         LH    @0,82(0,@2)                                        0766  21840000
         DR    @E,@0                                              0766  21850000
         ST    @E,COMMON+288                                      0766  21860000
*                                        /* LOOK FOR REMAINDER */       21870000
*         IF LEFTOVER = 0 THEN GO TO DCBEXIT4;                          21880000
         SR    @F,@F                                              0767  21890000
         C     @F,COMMON+288                                      0767  21900000
         BC    08,DCBEXIT4                                        0768  21910000
*         /* THERE WAS A REMAINDER AT THIS POINT */                     21920000
*         /* TURN ON FLUSH SW PLACE DEFAULT VALUES IN DCB TO */         21930000
*         /* PREVENT OPEN ABEND */                                      21940000
*         /* ON RETURN FROM OPEN FLUSH WILL BE CHECKED */               21950000
*         FLUSHSW  =  ON  /* TURN ON FLUSH SW */;                       21960000
         MVC   COMMON2+36(1),ON                                   0769  21970000
*               BLKSI = DBLKSI /* DEFAULT BLOCKSIZE */;                 21980000
         MVC   62(2,@2),COMMON+282                                0770  21990000
*               LRECL = DLRECL /* DEFAULT LRECL */;                     22000000
         MVC   82(2,@2),COMMON+280                                0771  22010000
*               MS = 28  ;     /* PRINT MSG IEB728I            @ZA24161 22020000
         LA    @F,28                                              0772  22030000
         STH   @F,COMMON1+102                                     0772  22040000
*                       /* OZ24161 DID NOT CHANGE IEBDGMSG. /*@ZA33694* 22050000
*               CONCODE = 8 ;  /* SET RETURN CODE 8            @ZA24161 22060000
         LA    @F,8                                               0773  22070000
         STH   @F,COMMON1+2                                       0773  22080000
*         GO TO DCBEXIT4 /* BRANCH TO RETURN */;                        22090000
         BC    15,DCBEXIT4                                        0774  22100000
*  /******************************************************************* 22110000
*  /**                                                                * 22120000
*  /** LOOK FOR RECORD FORMAT AND SET DEFAULT IF MISSING.             * 22130000
*  /******************************************************************* 22140000
*  DCBEXIT3:;                                                           22150000
*                                        /* RECORD IS U OR V AT THIS*/  22160000
*                                        /* POINT BUT MUST FIND IF */   22170000
*                                        /* NO RECFM WAS SPECIFIED */   22180000
*         /* AT THIS POINT NO RECFM WAS SPECIFIED */                    22190000
*         IF RECFM(1) = '0'B THEN DO;                                   22200000
DCBEXIT3 L     @2,COMMON+300       COMMON                         0776  22210000
         TM    36(@2),B'10000000'                                 0776  22220000
         BC    05,@9C6                                            0776  22230000
*               IF RECFM(2) ¬= '0'B THEN GO TO DCBEXIT4;                22240000
         TM    36(@2),B'01000000'                                 0778  22250000
         BC    05,DCBEXIT4                                        0779  22260000
*         /* ASSIGN DEFAULT LRECL */                                    22270000
*         RECFM = DRECFM;                                               22280000
         MVC   36(1,@2),COMMON+284                                0780  22290000
*         /* MUST FLUSH IF OLDNEW DS */                                 22300000
*         /* WE CAN LIVE WITH SYSIN SYSPRINT DEFAULTS*/                 22310000
*         IF OLDNEWSW ¬= ON THEN GO TO DCBEXIT4;                        22320000
         CLC   COMMON2+35(1),ON                                   0781  22330000
         BC    07,DCBEXIT4                                        0782  22340000
*               FLUSHSW = ON /* TURN ON FLUSH */;                       22350000
         MVC   COMMON2+36(1),ON                                   0783  22360000
*         END;                                                          22370000
*  DCBEXIT4:;                                                           22380000
@9C6     EQU   *                                                  0785  22390000
*  /******************************************************************* 22400000
*  /**                                                                * 22410000
*  /** RETURN TO OPEN HERE                                            * 22420000
*  /******************************************************************* 22430000
*  RETDCB:;                                                             22440000
DCBEXIT4 EQU   *                                                  0786  22450000
*         /* DEACTIVATE DCB EXIT . IT IS NORMALLY ACTIVATED */          22460000
*         /* JUST PRIOR TO ISSUEING OPEN */                             22470000
*  /* SYSI AND SYSP DCB EXITS ARE LEFT ACTIVE */                        22480000
*  /* THIS IS FOR OLDNEW DATA SET */                                    22490000
*               EXITDCB = '00'X ;                                       22500000
RETDCB   MVI   COMMON+260,X'00'                                   0787  22510000
*         R14 = SAVE14 ; /* RESTORE RETURN REG */                       22520000
         L     @E,COMMON1+56                                      0788  22530000
*         GEN ( BR 14 ) ;                                               22540000
          BR 14                                                         22550000
         DS    0H                                                       22560000
*  /******************************************************************* 22570000
*  /**                                                                * 22580000
*  /** THIS SECTION PROCESSES FOR I/O ERRORS                          * 22590000
*  /******************************************************************* 22600000
*         /* THIS IS THE SYNAD ROUTINE AND USES SYNADAF  AND SYNADRLS*/ 22610000
*         /* MACROS. ERROR INFORMATION IS WRITTEN ON SYSPRINT */        22620000
*  ERRORS:;                                                             22630000
*               /* ISSUE SYNADAF MACRO*/                                22640000
*         GEN ( SYNADAF  ACSMETH=QSAM );                                22650000
ERRORS    SYNADAF  ACSMETH=QSAM                                         22660000
         DS    0H                                                       22670000
*         /* MOVE INFO TO INBUF */                                      22680000
*         INBUFA1 = ' IEB729I PERMANENT I/O ERROR'; /*SET MSG ID */     22690000
         MVC   COMMON1+104(28),@C33                               0792  22700000
         MVI   COMMON1+132,C' '                                   0792  22710000
         MVC   COMMON1+133(92),COMMON1+132                        0792  22720000
*  GEN ( MVC INBUFA1+28(79),49(1));                                     22730000
          MVC INBUFA1+28(79),49(1)                                      22740000
         DS    0H                                                       22750000
*         MS = 30 /* MESSAGE NUMBER FOR MSGMOD */;                      22760000
         LA    @F,30                                              0794  22770000
         STH   @F,COMMON1+102                                     0794  22780000
*         /* LINK TO MESSAGE MODULE */                                  22790000
*         GEN ( LINK EP=IEBDGMSG);                                      22800000
          LINK EP=IEBDGMSG                                              22810000
         DS    0H                                                       22820000
*         /* RELEASE BY MACRO */                                        22830000
*         GEN ( SYNADRLS);                                              22840000
          SYNADRLS                                                      22850000
         DS    0H                                                       22860000
*               GO TO A2J2;    /** BRANCH TO CLEANUP**/                 22870000
         BC    15,A2J2                                            0797  22880000
*  USER : ;                                                             22890000
*  /******************************************************************* 22900000
*  /** THIS SEQUENCE PLACES THE CONDITION CODE INTO THE SAVE AREA     * 22910000
*  /** AT THE SPOT THAT REG 15 WILL BE LOADED FROM BY THE RETURN      * 22920000
*  /** MECHANISM.THIS PASSES THE RETURN CODE BACK TO THE USER THROUGH * 22930000
*  /** REG 15 AS DEMANDED BY SYSTEM CONVENTIONS                       * 22940000
*  /******************************************************************* 22950000
*               R0 = CONCODE   /** PLACE CONDITION CODE IN REG 0 **/;   22960000
USER     LH    @0,COMMON1+2                                       0799  22970000
*         GEN ( L R1,4(13));                                            22980000
          L R1,4(13)                                                    22990000
         DS    0H                                                       23000000
*         GEN ( ST R0,16(R1));                                          23010000
          ST R0,16(R1)                                                  23020000
         DS    0H                                                       23030000
*                   RETURN;                                             23040000
         BC    15,@EL01                                           0802  23050000
*        GENERATE ;                                          /* A37883* 23060000
GETAREA  EQU   176                     AREA FOR JFCB           A38883   23070000
         DS    0H                                                       23080000
*  GEN;                                                                 23090000
MYDCB1 DCB DDNAME=SYSIN,DSORG=PS,MACRF=GM,                             *23100000
               EODAD=CLEANUP,                                          *23110000
               SYNAD=ERRORS,                                           *23120000
               EXLST=DCBROUT1,                                         *23130000
               EROPT=ACC,                                  /*@ZA07394*/C23140000
               LRECL=80,                                   /*@ZA07394*/C23150000
               RECFM=FB                                    /*@ZA07394*/ 23160000
MYDCB2 DCB DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                          *23170000
               EXLST=DCBROUT2,                                         *23180000
               EROPT=ACC,                                  /*@ZA07394*/C23190000
               LRECL=121,                                  /*@ZA07394*/C23200000
               RECFM=FBA                                   /*@ZA07394*/ 23210000
MYDCB3 DCB DDNAME=SYSUT1,DSORG=IS,MACRF=PM,EXLST=DCBROUT3               23220000
         DS    0H                                                       23230000
*  END IEBDG;                                                           23240000
@EL01    L     @D,4(0,@D)                                         0805  23250000
         LR    @1,@C                                              0805  23260000
         L     @0,@SIZ001                                         0805  23270000
         FREEMAIN R,LV=(0),A=(1)                                  0805  23280000
         LM    @E,@C,12(@D)                                       0805  23290000
         BCR   15,@E                                              0805  23300000
@DATA1   EQU   *                                                        23310000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           23320000
@1       EQU   01                                                       23330000
@2       EQU   02                                                       23340000
@3       EQU   03                                                       23350000
@4       EQU   04                                                       23360000
@5       EQU   05                                                       23370000
@6       EQU   06                                                       23380000
@7       EQU   07                                                       23390000
@8       EQU   08                                                       23400000
@9       EQU   09                                                       23410000
@A       EQU   10                                                       23420000
@B       EQU   11                                                       23430000
@C       EQU   12                                                       23440000
@D       EQU   13                                                       23450000
@E       EQU   14                                                       23460000
@F       EQU   15                                                       23470000
@D6      DC    F'65535'                                                 23480000
@D1      DC    H'256'                                                   23490000
@D2      DC    H'1'                                                     23500000
@D3      DC    H'3'                                                     23510000
@D4      DC    H'8'                                                     23520000
@D5      DC    H'7'                                                     23530000
@MVC     MVC   0(1,@A),0(@E)                                            23540000
         DS    0F                                                       23550000
@SIZ001  DC    AL1(&SPN)                                                23560000
         DC    AL3(@DATEND-@DATD)                                       23570000
         DS    0F                                                       23580000
@X2      DC    X'F0F0F0F1'                                              23590000
@C7      DC    C'LINECNT='                                              23600000
@X9      DC    X'0000000000000000'                                      23610000
@C18     DC    C'DUMP'                                                  23620000
@C21     DC    C'OUTPUT=('                                              23630000
@C33     DC    C' IEB729I PERMANENT I/O ERROR'                          23640000
@X6      DC    X'000C'                                                  23650000
@X8      DC    X'0030'                                                  23660000
@X10     DC    X'0028'                                                  23670000
@C15     DC    C'FD'                                                    23680000
@C16     DC    C'CREATE'                                                23690000
@C17     DC    C'REPEAT'                                                23700000
@C19     DC    C'/*'                                                    23710000
@X27     DC    X'5000'                                                  23720000
@C14     DC    C'END'                                                   23730000
@C22     DC    C'INPUT=('                                               23740000
@C29     DC    C'QUANTITY='                                             23750000
@C30     DC    C'CREATE='                                               23760000
         DS    0D                                                       23770000
@DATA    EQU   *                                                        23780000
DUMMY    EQU   00000000            FULLWORD INTEGER                     23790000
OPTIONS  EQU   00000000            256 BYTE(S)                          23800000
PAGE     EQU   00000000            256 BYTE(S)                          23810000
DDLST    EQU   00000000            256 BYTE(S)                          23820000
DCBD     EQU   00000000            280 BYTE(S) ON DWORD                 23830000
FILL     EQU   DCBD+00000000       16 BYTE(S)                           23840000
KEYLEN   EQU   DCBD+00000016       1 BYTE(S)                            23850000
DEVT     EQU   DCBD+00000017       8 BIT(S)                             23860000
FILL1    EQU   DCBD+00000018       8 BYTE(S)                            23870000
DSORG1   EQU   DCBD+00000026       2 BYTE(S)                            23880000
DSORG    EQU   DCBD+00000026       8 BIT(S)                             23890000
FILLER   EQU   DCBD+00000028       8 BYTE(S)                            23900000
IOBAD    EQU   DCBD+00000028       4 BYTE(S)                            23910000
BFTEK    EQU   DCBD+00000032       8 BIT(S)                             23920000
EODAD    EQU   DCBD+00000033       3 BYTE(S)                            23930000
RECFM    EQU   DCBD+00000036       8 BIT(S)                             23940000
EXLIST   EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           23950000
DDNAME   EQU   DCBD+00000040       8 BYTE(S)                            23960000
DEBAD    EQU   DCBD+00000040       4 BYTE(S)                            23970000
IFLGS    EQU   DCBD+00000040       8 BIT(S)                             23980000
GETAD    EQU   DCBD+00000048       4 BYTE(S)                            23990000
OFLGS    EQU   DCBD+00000048       8 BIT(S)                             24000000
OFLGS1   EQU   DCBD+00000049       1 BYTE(S)                            24010000
MACRF    EQU   DCBD+00000050       2 BYTE(S)                            24020000
FILL2    EQU   DCBD+00000052       4 BYTE(S)                            24030000
SYNAD    EQU   DCBD+00000056       4 BYTE(S)                            24040000
CIND     EQU   DCBD+00000060       2 BYTE(S)                            24050000
BLKSI    EQU   DCBD+00000062       HALFWORD INTEGER                     24060000
FILL3    EQU   DCBD+00000064       18 BYTE(S)                           24070000
LRECL    EQU   DCBD+00000082       HALFWORD INTEGER                     24080000
FILL4    EQU   DCBD+00000084       172 BYTE(S)                          24090000
NEXTDCB  EQU   DCBD+00000256       FULLWORD POINTER                     24100000
DDNAME1  EQU   DCBD+00000260       8 BYTE(S)                            24110000
EODSW    EQU   DCBD+00000268       1 BYTE(S)                            24120000
DCBSW1   EQU   DCBD+00000269       1 BYTE(S)                            24130000
DCBSW2   EQU   DCBD+00000270       1 BYTE(S)                            24140000
DCBSW3   EQU   DCBD+00000271       8 BIT(S)                             24150000
INREC    EQU   DCBD+00000272       FULLWORD POINTER                     24160000
GMLGTH   EQU   DCBD+00000276       HALFWORD INTEGER                     24170000
FIELDSEL EQU   DCBD+00000278       1 BYTE(S)                            24180000
SPARE    EQU   DCBD+00000279       1 BYTE(S)                            24190000
R2       EQU   00000002            FULLWORD INTEGER REGISTER            24200000
R4       EQU   00000004            FULLWORD POINTER REGISTER            24210000
R5       EQU   00000005            FULLWORD POINTER REGISTER            24220000
R6       EQU   00000006            FULLWORD POINTER REGISTER            24230000
R7       EQU   00000007            FULLWORD POINTER REGISTER            24240000
R8       EQU   00000008            FULLWORD POINTER REGISTER            24250000
R9       EQU   00000009            FULLWORD POINTER REGISTER            24260000
R1       EQU   00000001            FULLWORD INTEGER REGISTER            24270000
R14      EQU   00000014            FULLWORD INTEGER REGISTER            24280000
R15      EQU   00000015            FULLWORD INTEGER REGISTER            24290000
R0       EQU   00000000            FULLWORD INTEGER REGISTER            24300000
ONE      EQU   *                   HALFWORD INTEGER                     24310000
         DC    FL2'1'                                                   24320000
TWO      EQU   *                   HALFWORD INTEGER                     24330000
         DC    FL2'2'                                                   24340000
THREE    EQU   *                   HALFWORD INTEGER                     24350000
         DC    FL2'3'                                                   24360000
FOUR     EQU   *                   HALFWORD INTEGER                     24370000
         DC    FL2'4'                                                   24380000
FIVE     EQU   *                   HALFWORD INTEGER                     24390000
         DC    FL2'5'                                                   24400000
SIX      EQU   *                   HALFWORD INTEGER                     24410000
         DC    FL2'6'                                                   24420000
SEVEN    EQU   *                   HALFWORD INTEGER                     24430000
         DC    FL2'7'                                                   24440000
EIGHT    EQU   *                   HALFWORD INTEGER                     24450000
         DC    FL2'8'                                                   24460000
NINE     EQU   *                   HALFWORD INTEGER                     24470000
         DC    FL2'9'                                                   24480000
TEN      EQU   *                   HALFWORD INTEGER                     24490000
         DC    FL2'10'                                                  24500000
ELEVEN   EQU   *                   HALFWORD INTEGER                     24510000
         DC    FL2'11'                                                  24520000
DSD      EQU   *                   3 BYTE(S)                            24530000
         DC    C'DSD'                                                   24540000
CREATE   EQU   *                   6 BYTE(S)                            24550000
         DC    C'CREATE'                                                24560000
FD       EQU   *                   2 BYTE(S)                            24570000
         DC    C'FD'                                                    24580000
ON       EQU   *                   1 BYTE(S)                            24590000
         DC    X'FF'                                                    24600000
OFF      EQU   *                   1 BYTE(S)                            24610000
         DC    X'00'                                                    24620000
MYDCB1A  EQU   MYDCB1+00000000     96 BYTE(S)                           24630000
MYDCB2A  EQU   MYDCB2+00000000     96 BYTE(S)                           24640000
MYDCB3A  EQU   MYDCB3+00000000     256 BYTE(S)                          24650000
         ORG   @DATA+00000036                                           24660000
C00      EQU   *                   HALFWORD INTEGER                     24670000
         DC    FL2'0'                                                   24680000
C0       EQU   *                   24 BIT(S) ON BYTE                    24690000
         DC    X'000000'                                                24700000
         ORG   @DATA+00000042                                           24710000
C10      EQU   *                   HALFWORD INTEGER                     24720000
         DC    FL2'10'                                                  24730000
C42      EQU   *                   HALFWORD INTEGER                     24740000
         DC    FL2'42'                                                  24750000
C50      EQU   *                   HALFWORD INTEGER                     24760000
         DC    FL2'50'                                                  24770000
C66      EQU   *                   HALFWORD INTEGER                     24780000
         DC    FL2'66'                                                  24790000
INBUF    EQU   00000000            80 BYTE(S)                           24800000
LIST     EQU   00000000            12 BYTE(S)                           24810000
FDTBL    EQU   00000000            40 BYTE(S)                           24820000
BUFFER   EQU   00000000            32767 BYTE(S)                        24830000
AREA     EQU   00000000            512 BYTE(S)                          24840000
JFCB     EQU   00000000            176 BYTE(S) ON WORD                  24850000
JFILL    EQU   JFCB+00000000       98 BYTE(S)                           24860000
DSORGD   EQU   JFCB+00000098       2 BYTE(S)                            24870000
DSORGJ   EQU   JFCB+00000098       8 BIT(S)                             24880000
KFILL    EQU   JFCB+00000100       76 BYTE(S)                           24890000
         ORG   @DATA                                                    24900000
         DS    00000050C                                                24910000
@L       EQU   1                                                        24920000
@DATD    DSECT                                                          24930000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   24940000
COMMON   EQU   @DATD+00000072      304 BYTE(S) ON DWORD                 24950000
PAGENO   EQU   COMMON+00000000     4 BYTE(S)                            24960000
LINECT   EQU   COMMON+00000004     FULLWORD INTEGER                     24970000
LINECTR  EQU   COMMON+00000008     FULLWORD INTEGER                     24980000
PARM     EQU   COMMON+00000012     FULLWORD POINTER                     24990000
REPEATNO EQU   COMMON+00000016     HALFWORD INTEGER                     25000000
CREATENO EQU   COMMON+00000018     HALFWORD INTEGER                     25010000
SYSP     EQU   COMMON+00000020     96 BYTE(S)                           25020000
SYSI     EQU   COMMON+00000116     96 BYTE(S)                           25030000
Q        EQU   COMMON+00000216     16 BYTE(S) ON DWORD                  25040000
QFILL    EQU   COMMON+00000216     7 BYTE(S)                            25050000
QSIGN    EQU   COMMON+00000223     8 BIT(S)                             25060000
QFILL1   EQU   COMMON+00000224     7 BYTE(S)                            25070000
QSIGN1   EQU   COMMON+00000231     8 BIT(S)                             25080000
COUNTER  EQU   COMMON+00000232     FULLWORD POINTER                     25090000
OPENLIST EQU   COMMON+00000236     8 BYTE(S)                            25100000
OPTBYTE1 EQU   COMMON+00000236     4 BYTE(S)                            25110000
OPTBYTE2 EQU   COMMON+00000240     4 BYTE(S)                            25120000
EXLST    EQU   COMMON+00000244     24 BYTE(S) ON WORD                   25130000
INHDR    EQU   COMMON+00000244     1 BYTE(S)                            25140000
INHDR1   EQU   COMMON+00000245     3  BYTE  POINTER ON WORD+1           25150000
OUTHDR   EQU   COMMON+00000248     1 BYTE(S)                            25160000
OUTHDR1  EQU   COMMON+00000249     3  BYTE  POINTER ON WORD+1           25170000
INTRL    EQU   COMMON+00000252     1 BYTE(S)                            25180000
INTRL1   EQU   COMMON+00000253     3  BYTE  POINTER ON WORD+1           25190000
OUTTRL   EQU   COMMON+00000256     1 BYTE(S)                            25200000
OUTTRL1  EQU   COMMON+00000257     3  BYTE  POINTER ON WORD+1           25210000
EXITDCB  EQU   COMMON+00000260     1 BYTE(S)                            25220000
EXITDCB1 EQU   COMMON+00000261     3  BYTE  POINTER ON WORD+1           25230000
TOTAL    EQU   COMMON+00000264     1 BYTE(S)                            25240000
TOTAL1   EQU   COMMON+00000265     3  BYTE  POINTER ON WORD+1           25250000
EXLST1   EQU   COMMON+00000268     4 BYTE(S) ON WORD                    25260000
EDCB1    EQU   COMMON+00000268     1 BYTE(S)                            25270000
EDCB2    EQU   COMMON+00000269     3  BYTE  POINTER ON WORD+1           25280000
EXLST2   EQU   COMMON+00000272     4 BYTE(S) ON WORD                    25290000
EDCB3    EQU   COMMON+00000272     1 BYTE(S)                            25300000
EDCB4    EQU   COMMON+00000273     3  BYTE  POINTER ON WORD+1           25310000
EXLST3   EQU   COMMON+00000276     4 BYTE(S) ON WORD                    25320000
EDCB5    EQU   COMMON+00000276     1 BYTE(S)                            25330000
EDCB6    EQU   COMMON+00000277     3  BYTE  POINTER ON WORD+1           25340000
DLRECL   EQU   COMMON+00000280     HALFWORD INTEGER                     25350000
DBLKSI   EQU   COMMON+00000282     HALFWORD INTEGER                     25360000
DRECFM   EQU   COMMON+00000284     8 BIT(S)                             25370000
LEFTOVER EQU   COMMON+00000288     FULLWORD INTEGER                     25380000
OFFSET   EQU   COMMON+00000292     FULLWORD POINTER                     25390000
LPTR     EQU   COMMON+00000296     FULLWORD POINTER                     25400000
DCBPTR   EQU   COMMON+00000300     FULLWORD POINTER                     25410000
COMMON1  EQU   @DATD+00000376      232 BYTE(S) ON WORD                  25420000
SAVEMS   EQU   COMMON1+00000000    HALFWORD INTEGER                     25430000
CONCODE  EQU   COMMON1+00000002    HALFWORD INTEGER                     25440000
OUTREC   EQU   COMMON1+00000004    FULLWORD POINTER                     25450000
CRTABPT  EQU   COMMON1+00000008    FULLWORD POINTER                     25460000
CURCRTE  EQU   COMMON1+00000012    FULLWORD POINTER                     25470000
CURCRGM  EQU   COMMON1+00000016    FULLWORD POINTER                     25480000
CURPIC   EQU   COMMON1+00000020    FULLWORD POINTER                     25490000
PICCTR   EQU   COMMON1+00000024    FULLWORD INTEGER                     25500000
EXITTAB  EQU   COMMON1+00000028    FULLWORD POINTER                     25510000
EXITGM   EQU   COMMON1+00000032    FULLWORD POINTER                     25520000
CUREXIT  EQU   COMMON1+00000036    FULLWORD POINTER                     25530000
DELIM    EQU   COMMON1+00000040    4 BYTE(S)                            25540000
RECREM   EQU   COMMON1+00000044    FULLWORD INTEGER                     25550000
CURFD    EQU   COMMON1+00000048    FULLWORD POINTER                     25560000
CUROUT   EQU   COMMON1+00000052    FULLWORD POINTER                     25570000
SAVE14   EQU   COMMON1+00000056    FULLWORD POINTER                     25580000
GETMLIST EQU   COMMON1+00000060    16 BYTE(S) ON WORD                   25590000
GLENGTH  EQU   COMMON1+00000060    FULLWORD INTEGER                     25600000
ADRLIST  EQU   COMMON1+00000064    FULLWORD POINTER                     25610000
IND      EQU   COMMON1+00000068    4 BYTE(S)                            25620000
GCODE    EQU   COMMON1+00000068    1 BYTE(S)                            25630000
SPOOL    EQU   COMMON1+00000069    1 BYTE(S)                            25640000
CCODE    EQU   COMMON1+00000070    2 BYTE(S)                            25650000
GCADDR   EQU   COMMON1+00000072    FULLWORD POINTER                     25660000
FIRSTGMO EQU   COMMON1+00000076    FULLWORD POINTER                     25670000
CURRGMO  EQU   COMMON1+00000080    FULLWORD POINTER                     25680000
LASTGMO  EQU   COMMON1+00000084    FULLWORD POINTER                     25690000
FIRSTGMI EQU   COMMON1+00000088    FULLWORD POINTER                     25700000
CURRGMI  EQU   COMMON1+00000092    FULLWORD POINTER                     25710000
LASTGMI  EQU   COMMON1+00000096    FULLWORD POINTER                     25720000
CONDCODE EQU   COMMON1+00000100    HALFWORD INTEGER                     25730000
MS       EQU   COMMON1+00000102    HALFWORD INTEGER                     25740000
INBUFA1  EQU   COMMON1+00000104    121 BYTE(S)                          25750000
INFILL   EQU   COMMON1+00000104    10 BYTE(S)                           25760000
INBUFA   EQU   COMMON1+00000114    111 BYTE(S)                          25770000
DDPTR    EQU   COMMON1+00000228    FULLWORD POINTER                     25780000
COMMON2  EQU   @DATD+00000608      72 BYTE(S) ON WORD                   25790000
SWITCH   EQU   COMMON2+00000000    52 BYTE(S)                           25800000
FDCSW    EQU   COMMON2+00000000    1 BYTE(S)                            25810000
FDNAMESW EQU   COMMON2+00000001    1 BYTE(S)                            25820000
FDPCSW   EQU   COMMON2+00000002    1 BYTE(S)                            25830000
FDFMTSW  EQU   COMMON2+00000003    1 BYTE(S)                            25840000
FDPLSW   EQU   COMMON2+00000004    1 BYTE(S)                            25850000
RANGESW  EQU   COMMON2+00000005    1 BYTE(S)                            25860000
FILLSW   EQU   COMMON2+00000006    1 BYTE(S)                            25870000
REPSW    EQU   COMMON2+00000007    1 BYTE(S)                            25880000
INDEXSW  EQU   COMMON2+00000008    1 BYTE(S)                            25890000
INDNMSW  EQU   COMMON2+00000009    1 BYTE(S)                            25900000
BQUOTESW EQU   COMMON2+00000010    1 BYTE(S)                            25910000
PQUOTESW EQU   COMMON2+00000011    1 BYTE(S)                            25920000
EQUOTESW EQU   COMMON2+00000012    1 BYTE(S)                            25930000
FDSW     EQU   COMMON2+00000013    1 BYTE(S)                            25940000
DSDSW    EQU   COMMON2+00000014    1 BYTE(S)                            25950000
NOGOSW   EQU   COMMON2+00000015    1 BYTE(S)                            25960000
CREATESW EQU   COMMON2+00000016    1 BYTE(S)                            25970000
DSDCSW   EQU   COMMON2+00000017    1 BYTE(S)                            25980000
CRCSW    EQU   COMMON2+00000018    1 BYTE(S)                            25990000
EXITSW   EQU   COMMON2+00000019    1 BYTE(S)                            26000000
EODSTOP  EQU   COMMON2+00000020    1 BYTE(S)                            26010000
DSDNULSW EQU   COMMON2+00000021    1 BYTE(S)                            26020000
DSDORGSW EQU   COMMON2+00000022    1 BYTE(S)                            26030000
DSDDDSW  EQU   COMMON2+00000023    1 BYTE(S)                            26040000
CRTBLK   EQU   COMMON2+00000024    1 BYTE(S)                            26050000
NAMCSW   EQU   COMMON2+00000025    8 BIT(S)                             26060000
PICCSW   EQU   COMMON2+00000026    8 BIT(S)                             26070000
BUFPSW   EQU   COMMON2+00000027    1 BYTE(S)                            26080000
ENDSW    EQU   COMMON2+00000028    1 BYTE(S)                            26090000
COMCSW   EQU   COMMON2+00000029    1 BYTE(S)                            26100000
FLAGSW   EQU   COMMON2+00000030    8 BIT(S)                             26110000
PAGESW   EQU   COMMON2+00000031    1 BYTE(S)                            26120000
EPSW     EQU   COMMON2+00000032    1  BYTE  POINTER                     26130000
SYSISW   EQU   COMMON2+00000033    1 BYTE(S)                            26140000
SYSPSW   EQU   COMMON2+00000034    1 BYTE(S)                            26150000
OLDNEWSW EQU   COMMON2+00000035    1 BYTE(S)                            26160000
FLUSHSW  EQU   COMMON2+00000036    1 BYTE(S)                            26170000
FLUSHSW1 EQU   COMMON2+00000037    1 BYTE(S)                            26180000
DSDOSW   EQU   COMMON2+00000038    1 BYTE(S)                            26190000
DSDISW   EQU   COMMON2+00000039    1 BYTE(S)                            26200000
QUANSW   EQU   COMMON2+00000040    1 BYTE(S)                            26210000
PARENSW  EQU   COMMON2+00000041    1 BYTE(S)                            26220000
REPEATSW EQU   COMMON2+00000042    1 BYTE(S)                            26230000
FDPLGTH  EQU   COMMON2+00000052    HALFWORD INTEGER                     26240000
SGCADDR  EQU   COMMON2+00000056    FULLWORD POINTER                     26250000
FDPTR    EQU   COMMON2+00000060    FULLWORD POINTER                     26260000
FDPTR1   EQU   COMMON2+00000064    FULLWORD POINTER                     26270000
FDPTR2   EQU   COMMON2+00000068    FULLWORD POINTER                     26280000
COMMON3  EQU   @DATD+00000680      128 BYTE(S) ON WORD                  26290000
FDCTR    EQU   COMMON3+00000000    HALFWORD POINTER                     26300000
LREMAIN  EQU   COMMON3+00000004    FULLWORD POINTER                     26310000
COMPCTR  EQU   COMMON3+00000008    FULLWORD POINTER                     26320000
LMOVED   EQU   COMMON3+00000012    HALFWORD POINTER                     26330000
U        EQU   COMMON3+00000016    FULLWORD POINTER                     26340000
PICEND   EQU   COMMON3+00000020    HALFWORD POINTER                     26350000
CURFDGM  EQU   COMMON3+00000024    FULLWORD POINTER                     26360000
SWTCH    EQU   COMMON3+00000028    4 BYTE(S) ON WORD                    26370000
SYSINSEL EQU   COMMON3+00000028    1 BYTE(S)                            26380000
FIRSTSW  EQU   COMMON3+00000029    1 BYTE(S)                            26390000
FRSTSW   EQU   COMMON3+00000030    1 BYTE(S)                            26400000
STOPSW   EQU   COMMON3+00000031    1 BYTE(S)                            26410000
COPYVAL  EQU   COMMON3+00000032    HALFWORD INTEGER                     26420000
COPYFD   EQU   COMMON3+00000036    FULLWORD POINTER                     26430000
COPYFDGM EQU   COMMON3+00000040    FULLWORD POINTER                     26440000
NAMCTR   EQU   COMMON3+00000044    HALFWORD INTEGER                     26450000
NAMCTR1  EQU   COMMON3+00000046    HALFWORD INTEGER                     26460000
INRECSZ  EQU   COMMON3+00000048    HALFWORD POINTER                     26470000
OUTRECSZ EQU   COMMON3+00000050    HALFWORD POINTER                     26480000
INRECFM  EQU   COMMON3+00000052    1 BYTE(S)                            26490000
RECOFFST EQU   COMMON3+00000053    1  BYTE  POINTER                     26500000
OUTRECFM EQU   COMMON3+00000054    1 BYTE(S)                            26510000
PICBASE  EQU   COMMON3+00000056    FULLWORD POINTER                     26520000
MESSAGE  EQU   COMMON3+00000060    121 BYTE(S)                          26530000
DUMMY3   EQU   COMMON3+00000184    FULLWORD POINTER                     26540000
OPTPTR   EQU   @DATD+00000868      FULLWORD POINTER                     26550000
PGPTR    EQU   @DATD+00000872      FULLWORD POINTER                     26560000
BUFPTR   EQU   @DATD+00000876      FULLWORD POINTER                     26570000
JFCBPTR  EQU   @DATD+00000880      FULLWORD POINTER                     26580000
EXITLIST EQU   @DATD+00000884      4 BYTE(S) ON WORD                    26590000
HEX87    EQU   EXITLIST+00000000   8 BIT(S)                             26600000
PTRJFCB  EQU   EXITLIST+00000001   3  BYTE  POINTER ON WORD+1           26610000
         DS    00000888C                                                26620000
@TEMPS   DS    0F                                                       26630000
@TEMP4   DC    F'0'                                                     26640000
@DATEND  EQU   *                                                        26650000
IEBDG    CSECT ,                                                        26660000
@9FD     EQU   PDDNAMER                                                 26670000
@9FC     EQU   PDDNAMER                                                 26680000
@9F2     EQU   LABEL1                                                   26690000
@9F3     EQU   SCAN1                                                    26700000
@9ED     EQU   USER                                                     26710000
@9D9     EQU   A3C45                                                    26720000
@9D6     EQU   A2B3                                                     26730000
@9D4     EQU   A3C41                                                    26740000
         END   IEBDG                                                    26750000
./  ADD  SSI=62520084,NAME=IEBDGCUP
*    NEW MODULE, RELEASE 17.                                       DG0H 00010000
*                                                                A32655 00020000
*A474000                                                         A48747 00030000
*D474000,486000                                                  A48747 00040000
*C39300.D394000                                                  A48773 00050000
*A499200-499498                                                  A50950 00060000
*C292000                                                       @ZA04231 00070000
*A499400-499410                                                @ZA07345 00080000
*C292000                                                       @ZA07345 00090000
*D499400                                                       @ZA07345 00100000
         LCLA  &T,&SPN                                            0002  00110000
.@001    ANOP                                                     0002  00120000
IEBDGCUP CSECT ,                                                  0002  00130000
         ST    @E,12(0,@D)                                        0002  00140000
         STM   @0,@8,20(@D)                                       0002  00150000
         STM   @A,@C,60(@D)                                       0002  00160000
         BALR  @B,0                                               0002  00170000
@PSTART  DS    0H                                                 0002  00180000
         USING @PSTART+00000,@B                                   0002  00190000
         L     @0,@SIZ001                                         0002  00200000
         GETMAIN  R,LV=(0)                                        0002  00210000
         LR    @C,@1                                              0002  00220000
         USING @DATD+00000,@C                                     0002  00230000
         LM    @0,@1,20(@D)                                       0002  00240000
         XC    @TEMPS(@L),@TEMPS                                  0002  00250000
         ST    @D,@SAV001+4                                       0002  00260000
         LA    @F,@SAV001                                         0002  00270000
         ST    @F,8(0,@D)                                         0002  00280000
         LR    @D,@F                                              0002  00290000
*  GEN ( EJECT);                                                        00300000
          EJECT                                                         00310000
         DS    0H                                                       00320000
*  DCL  R14 REG(14);                                                    00330000
*  DCL  R15 REG(15);                                                    00340000
*  DCL R0 REG(0);                                                       00350000
*  DCL R1 REG(1);                                                       00360000
*  DCL R2 REG(2);                                                       00370000
*  DCL R3 REG(3);                                                       00380000
*  DCL R5 REG(5) PTR(31);                                               00390000
*         RESTRICT(5);                                                  00400000
*  DCL R6 REG(6) PTR(31);                                               00410000
*  RESTRICT(6);                                                         00420000
*  DCL R7 REG(7) PTR(31);                                               00430000
*  RESTRICT(7);                                                         00440000
*  DCL R8 REG(8) PTR(31);                                               00450000
*  RESTRICT (8);                                                        00460000
*  DCL R9 REG(9) PTR(31);                                               00470000
*   RESTRICT (9);                                                       00480000
*  DCL    1     COMMON BDY(DWORD) BASED(R5),                            00490000
*               2  PAGENO CHAR(4),                                      00500000
*                   2  LINECT FIXED(31),                                00510000
*                   2  LINECTR FIXED(31),                               00520000
*         2     PARM PTR(31),                                           00530000
*               2 REPEATNO FIXED(15),                                   00540000
*               2 CREATENO FIXED(15),                                   00550000
*         2     SYSP CHAR(96),                                          00560000
*         2     SYSI CHAR(96),                                          00570000
*               2  Q  CHAR(16) BDY(DWORD),                              00580000
*         3  QFILL CHAR(7),                                             00590000
*         3  QSIGN BIT(8),                                              00600000
*                    3 QFILL1 CHAR(7),                                  00610000
*                    3 QSIGN1 BIT(8),                                   00620000
*         2 COUNTER  PTR(31),                                           00630000
*         2 OPENLIST CHAR(8),                                           00640000
*                                   3 OPTBYTE1 CHAR(4),                 00650000
*                                   3 OPTBYTE2 CHAR(4),                 00660000
*               2  EXLST,                                               00670000
*                                        3  INHDR CHAR(1),              00680000
*                                        3 INHDR1 PTR(24),              00690000
*                                        3 OUTHDR CHAR(1),              00700000
*                                        3 OUTHDR1 PTR(24),             00710000
*                                        3 INTRL CHAR(1),               00720000
*                                        3 INTRL1 PTR(24),              00730000
*                                        3 OUTTRL CHAR(1),              00740000
*                                        3 OUTTRL1 PTR(24),             00750000
*                                        3 EXITDCB CHAR(1),             00760000
*                                        3 EXITDCB1 PTR(24),            00770000
*                                        3 TOTAL CHAR(1),               00780000
*                                        3 TOTAL1 PTR(24),              00790000
*               2 EXLST1,                                               00800000
*                                       3 EDCB1 CHAR(1),                00810000
*                                       3 EDCB2 PTR(24),                00820000
*              2 EXLST2,                                                00830000
*                                       3 EDCB3 CHAR(1),                00840000
*                                       3 EDCB4 PTR(24),                00850000
*         2  EXLST3,                                                    00860000
*               3  EDCB5 CHAR(1),                                       00870000
*               3 EDCB6  PTR(24),                                       00880000
*               2 DLRECL FIXED(15),                                     00890000
*               2 DBLKSI FIXED(15),                                     00900000
*               2 DRECFM BIT(8),                                        00910000
*               2 LEFTOVER FIXED(31),                                   00920000
*         2     OFFSET PTR(31),                                         00930000
*         2     LPTR PTR(31),                                           00940000
*         2     DCBPTR PTR(31),                                         00950000
*         2 DUMMY PTR(31);                                              00960000
*  DCL 1 COMMON1 BASED(ADDR(DUMMY)) BDY(WORD),                          00970000
*               2   SAVEMS  FIXED(15),                                  00980000
*               2   CONCODE FIXED(15),                                  00990000
*         2 OUTREC   PTR(31),                                           01000000
*         2 CRTABPT  PTR(31),                                           01010000
*         2 CURCRTE  PTR(31),                                           01020000
*         2 CURCRGM  PTR(31),                                           01030000
*         2 CURPIC PTR(31),                                             01040000
*         2 PICCTR FIXED(31),                                           01050000
*         2 EXITTAB PTR(31),                                            01060000
*         2 EXITGM PTR(31),                                             01070000
*         2 CUREXIT PTR(31),                                            01080000
*               2  DELIM  CHAR(4),                                      01090000
*         2 RECREM   FIXED(31),                                         01100000
*         2 CURFD    PTR(31),                                           01110000
*         2 CUROUT PTR(31),                                             01120000
*         2  SAVE14  PTR(31),                                           01130000
*         2 GETMLIST CHAR(16) BDY(WORD),                                01140000
*            3 GLENGTH FIXED(31),                                       01150000
*            3 ADRLIST PTR(31),                                         01160000
*            3 IND CHAR(4),                                             01170000
*               4 GCODE CHAR(1),                                        01180000
*               4 SPOOL CHAR(1),                                        01190000
*               4 CCODE CHAR(2),                                        01200000
*            3 GCADDR PTR(31),                                          01210000
*         2     FIRSTGMO  PTR(31),                                      01220000
*         2     CURRGMO   PTR(31),                                      01230000
*         2     LASTGMO   PTR(31),                                      01240000
*         2     FIRSTGMI  PTR(31),                                      01250000
*         2     CURRGMI   PTR(31),                                      01260000
*         2     LASTGMI   PTR(31),                                      01270000
*         2     CONDCODE FIXED(15),                                     01280000
*               2       MS     FIXED(15),                               01290000
*               2 INBUFA1 CHAR(121),                                    01300000
*                   3   INFILL CHAR(10),                                01310000
*                      3  INBUFA  CHAR(111),                            01320000
*         2     DDPTR PTR(31),                                          01330000
*               2   DUMMY1 PTR(31);                                     01340000
*  DCL 1 COMMON2 BASED (ADDR(DUMMY1)) BDY(WORD),                        01350000
*         2  SWITCH   CHAR(52),                                         01360000
*               3  FDCSW      CHAR(1),                                  01370000
*               3  FDNAMESW   CHAR(1),                                  01380000
*               3  FDPCSW     CHAR(1),                                  01390000
*               3  FDFMTSW    CHAR(1),                                  01400000
*               3  FDPLSW     CHAR(1),                                  01410000
*               3  RANGESW    CHAR(1),                                  01420000
*               3  FILLSW     CHAR(1),                                  01430000
*               3  REPSW      CHAR(1),                                  01440000
*               3  INDEXSW    CHAR(1),                                  01450000
*               3  INDNMSW    CHAR(1),                                  01460000
*               3  BQUOTESW   CHAR(1),                                  01470000
*               3  PQUOTESW   CHAR(1),                                  01480000
*               3  EQUOTESW   CHAR(1),                                  01490000
*               3  FDSW       CHAR(1),                                  01500000
*               3  DSDSW      CHAR(1),                                  01510000
*               3  NOGOSW     CHAR(1),                                  01520000
*               3  CREATESW   CHAR(1),                                  01530000
*               3  DSDCSW     CHAR(1),                                  01540000
*               3  CRCSW      CHAR(1),                                  01550000
*               3  EXITSW     CHAR(1),                                  01560000
*               3  EODSTOP    CHAR(1),                                  01570000
*               3  DSDNULSW   CHAR(1),                                  01580000
*               3  DSDORGSW   CHAR(1),                                  01590000
*               3  DSDDDSW    CHAR(1),                                  01600000
*               3  CRTBLK     CHAR(1),                                  01610000
*               3  NAMCSW     BIT(8),                                   01620000
*               3  PICCSW     BIT(8),                                   01630000
*               3  BUFPSW     CHAR(1),                                  01640000
*               3  ENDSW      CHAR(1),                                  01650000
*               3  COMCSW     CHAR(1),                                  01660000
*               3  FLAGSW     BIT(8),                                   01670000
*               3  PAGESW     CHAR(1),                                  01680000
*               3  EPSW       PTR(8),                                   01690000
*               3  SYSISW     CHAR(1),                                  01700000
*               3  SYSPSW     CHAR(1),                                  01710000
*               3  OLDNEWSW   CHAR(1),                                  01720000
*               3  FLUSHSW    CHAR(1),                                  01730000
*               3  FLUSHSW1   CHAR(1),                                  01740000
*               3  DSDOSW     CHAR(1),                                  01750000
*               3  DSDISW     CHAR(1),                                  01760000
*               3  QUANSW     CHAR(1),                                  01770000
*               3  PARENSW    CHAR(1),                                  01780000
*               3  REPEATSW   CHAR(1),                                  01790000
*         2 FDPLGTH FIXED(15),                                          01800000
*         2 SGCADDR PTR(31),                                            01810000
*         2 FDPTR   PTR(31),                                            01820000
*         2 FDPTR1  PTR(31),                                            01830000
*         2 FDPTR2  PTR(31),                                            01840000
*         2  DUMMY2  PTR(31);                                           01850000
*  DCL 1 COMMON3 BASED(ADDR(DUMMY2)) BDY(WORD),                         01860000
*               2    FDCTR     PTR(15),                                 01870000
*         2  LREMAIN PTR(31),                                           01880000
*               2     COMPCTR    PTR(31),                               01890000
*               2  LMOVED    PTR(15),                                   01900000
*               2    U    PTR(31),                                      01910000
*               2 PICEND  PTR(15),                                      01920000
*         2 CURFDGM  PTR(31),                                           01930000
*         2  SWTCH,                                                     01940000
*               3    SYSINSEL CHAR(1),                                  01950000
*               3  FIRSTSW     CHAR(1),                                 01960000
*               3  FRSTSW     CHAR(1),                                  01970000
*               3  STOPSW     CHAR(1),                                  01980000
*         2  COPYVAL      FIXED(15),                                    01990000
*         2  COPYFD       PTR(31),                                      02000000
*         2  COPYFDGM     PTR(31),                                      02010000
*         2  NAMCTR       FIXED(15),                                    02020000
*         2  NAMCTR1      FIXED(15),                                    02030000
*               2    INRECSZ   PTR(15),                                 02040000
*               2    OUTRECSZ  PTR(15),                                 02050000
*               2    INRECFM   CHAR(1),                                 02060000
*               2    RECOFFST  PTR(8),                                  02070000
*               2    OUTRECFM  CHAR(1),                                 02080000
*         2     PICBASE PTR(31),                                        02090000
*         2     MESSAGE CHAR(121),                                      02100000
*         2     DUMMY3  PTR(31);                                        02110000
*  DCL 1 DCBD BASED(DCBPTR) BDY(DWORD),                                 02120000
*               2  FILL CHAR(26),                                       02130000
*               2  DSORG1 CHAR(2),                                      02140000
*                                        3  DSORG  BIT(8),              02150000
*               2  FILLER CHAR(8),                                      02160000
*                   3  IOBAD CHAR(4),                                   02170000
*                   3  BFTEK BIT(8),                                    02180000
*                   3  EODAD CHAR(3),                                   02190000
*         2  RECFM  BIT(8),                                             02200000
*         2  EXLIST  PTR(24),                                           02210000
*         2 DDNAME CHAR(8),                                             02220000
*          3 DEBAD CHAR(4),                                             02230000
*              4 IFLGS BIT(8),                                          02240000
*         2     GETAD CHAR(4),                                          02250000
*                                   3 OFLGS BIT(8),                     02260000
*                    3  OFLGS1  CHAR(1),                                02270000
*                    3  MACRF    CHAR(2),                               02280000
*         2     FILL2 CHAR(10),                                         02290000
*         2     BLKSI FIXED(15),                                        02300000
*         2     FILL3 CHAR(18),                                         02310000
*         2     LRECL FIXED(15),                                        02320000
*         2 FILL4 CHAR(172),                                            02330000
*         2 NEXTDCB PTR(31),                                            02340000
*               2  DDNAME1 CHAR(8),                                     02350000
*               2  EODSW   CHAR(1),                                     02360000
*               2 DCBSW1   CHAR(1),                                     02370000
*               2 DCBSW2   CHAR(1),                                     02380000
*         2     DCBSW3 BIT(8),                                          02390000
*         2     INREC  PTR(31),                                         02400000
*         2     GMLGTH FIXED(15),                                       02410000
*         2     FIELDSEL CHAR(1),                                       02420000
*         2     SPARE    CHAR(1);                                       02430000
*  DCL 1 FDTBL CHAR(520) BASED(FDPTR) BDY(WORD),                        02440000
*               2    FDNAME    CHAR(8),                                 02450000
*               2    FDREPNM   CHAR(8),                                 02460000
*               2    FDINDNM   CHAR(8) BDY(WORD),                       02470000
*                   3    FDUMMY CHAR(4),                                02480000
*                    3    FDINDNUM  PTR(31),                            02490000
*               2    FDLGTH    PTR(15),                                 02500000
*               2    FDCYCLE   PTR(15),                                 02510000
*               2    FDACTION  CHAR(2),                                 02520000
*               2    FDFORMAT  CHAR(2),                                 02530000
*               2    FDSWITCH  BIT(8),                                  02540000
*                  3      INDBYNAM  BIT(1),                             02550000
*                   3  PASS     BIT(1),                                 02560000
*                   3  FXACTION BIT(1),                                 02570000
*                   3  RPACTION BIT(1),                                 02580000
*                   3  ROACTION BIT(1),                                 02590000
*                   3  WVACTION BIT(1),                                 02600000
*                   3  STACTION BIT(1),                                 02610000
*               3  NUACTION  BIT(1),                                    02620000
*               2    FDFILL    CHAR(1),                                 02630000
*               2    FDSIGN    CHAR(1),                                 02640000
*               2    FDCHAR    CHAR(1),                                 02650000
*               2    FDRANGE   CHAR(4),                                 02660000
*               2    FDOBUF    PTR(15),                                 02670000
*               2    FDFRINC   PTR(15),                                 02680000
*               2    FDFROMAD  CHAR(4),                                 02690000
*               2    FDMLGTH   PTR(15),                                 02700000
*               2    FDTOINC   PTR(15),                                 02710000
*               2    FDCYCCNT  PTR(15),                                 02720000
*               2    FDSLGTH   PTR(15),                                 02730000
*               2    FDSLGTHR  PTR(15),                                 02740000
*               2    FDFRINCR  CHAR(1),                                 02750000
*               2    FDTOINCR  CHAR(1),                                 02760000
*               2    LTOFREE  PTR(15),                      /*@ZA07345* 02770000
*               2    FDSW1  BIT(8),                                     02780000
*                   3    STRTLOC1  BIT(1);                              02790000
*  DCL FOXZEROS  CHAR(16) INIT('F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'X);    02800000
*   DCL BUFPTR      PTR(31);                                            02810000
*  DCL INBUF CHAR(80) BASED(R9);                                        02820000
*  DCL  BUFFER CHAR(32767) BASED(BUFPTR);                               02830000
*  DCL RCODE FIXED(31) BDY(WORD) ;                                      02840000
*         DCL ON CHAR(1) INIT('FF'X);                                   02850000
*         DCL OFF CHAR(1) INIT('00'X);                                  02860000
*  DCL WKADDR CHAR(32767) BASED(GCADDR);                                02870000
*  DCL COPAT CHAR(27) INIT(' ¢.<(+|&!$*);¬-/,%_>?:#@''="');             02880000
*  DCL ALPAT CHAR(36) INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');     02890000
*  DCL OPTPTR PTR(31);                                                  02900000
*  DCL PGPTR PTR(31);                                                   02910000
*  DCL OPTIONS CHAR(256) BASED(OPTPTR);                                 02920000
*  DCL PAGE CHAR(256) BASED(PGPTR);                                     02930000
*  DCL DDLST CHAR(256) BASED(DDPTR);                                    02940000
*  /******************************************************************* 02950000
*  /**                                                                * 02960000
*  /** THIS SECTION WILL CLOSE THE OUTPUT DCB DEFINED ON THE DSD CARD * 02970000
*  /** ITS ADDRESS IS CONTAINED IN FIRSTGMO.AFTER THE CLOSE THE BUFFER* 02980000
*  /** POOL IS FREED AND CORE IS FREED THAT HELD THE DCB.CODE IS      * 02990000
*  /** PRESENT FOR MORE THAN ONE OUTPUT DCB ALTHOUGH ONE OUTPUT       * 03000000
*  /** IS ALLOWED AT THE PRESENT TIME                                 * 03010000
*  /**                                                                * 03020000
*  /**    THIS SECTION CHECKS FOR MORE OUTPUT DCBS TO CLOSE.IF NONE A * 03030000
*  /** BRANCH IS TAKEN TO TEST FOR INPUT DCBS                         * 03040000
*  /**                                                                * 03050000
*  /******************************************************************* 03060000
*  A2J3:;                                                               03070000
*         IF FIRSTGMO = 0 THEN GO TO A2J4;                              03080000
A2J3     SR    @F,@F                                              0042  03090000
         C     @F,380(0,@5)                                       0042  03100000
         BC    08,A2J4                                            0043  03110000
*               DCBPTR = FIRSTGMO /**REINITILIZE DCB POINTER**/;        03120000
         MVC   300(4,@5),380(@5)                                  0044  03130000
*  /******************************************************************* 03140000
*  /**                                                                * 03150000
*  /**    THIS SECTION WILL INITILIZE THE DCB POINTER AND TEST FOR THE* 03160000
*  /** DCB BEING OPEN.IF NOT OPEN A BRANCH IS TAKEN AROUND THE CLOSE  * 03170000
*  /** AND FREEPOOL.IF OPEN THE LIST IS INITILIZED FOR CLOSE WITH     * 03180000
*  /** DISPOSITION FROM THE DD CARD AND THE CLOSE MACRO IS ISSUED.    * 03190000
*  /**                                                                * 03200000
*  /******************************************************************* 03210000
*         IF OFLGS(4) = '1'B THEN DO /** CLOSE DCB IF OPEN**/;          03220000
         L     @1,300(0,@5)                                       0045  03230000
         TM    48(@1),B'00010000'                                 0045  03240000
         BC    12,@9FF                                            0045  03250000
*               OPTBYTE1 = FIRSTGMO /* OUTPUT DCB ADDR TO CLOSE */;     03260000
         MVC   236(4,@5),380(@5)                                  0047  03270000
*         OPTBYTE1(1) = '8F'X;                                          03280000
         MVI   236(@5),X'8F'                                      0048  03290000
*  /** IF DCB IS OPEN OUTREC CONTAINS ADDRESS OF OUTPUT WORKAREA.    ** 03300000
*  /** ITS LENGTH IS IN GMLGTH FIELD OF DCB                           * 03310000
*               R7 = GMLGTH    /**PICK UP WORKAREA LENGTH**/;           03320000
         L     @1,300(0,@5)                                       0049  03330000
         LH    @7,276(0,@1)                                       0049  03340000
*         R6 = ADDR(OUTREC);                                            03350000
         LA    @6,308(0,@5)                                       0050  03360000
*         R1 = ADDR(GETMLIST)  /**  ADDRESS  THE GET MAIN LIST**/;      03370000
         LA    @1,364(0,@5)                                       0051  03380000
*     IF   OUTREC=0  THEN GO TO L1;                          /*A32655*/ 03390000
         SR    @F,@F                                              0052  03400000
         C     @F,308(0,@5)                                       0052  03410000
         BC    08,L1                                              0053  03420000
*                        /**   FREEMAIN FOR WORKAREA    **/;            03430000
*         GEN ( FREEMAIN E,LV=(R7),A=(R6),SP=0,MF=(E,(R1)));            03440000
          FREEMAIN E,LV=(R7),A=(R6),SP=0,MF=(E,(R1))                    03450000
         DS    0H                                                       03460000
*   L1:;                                                     /*A32655*/ 03470000
*         R1 = ADDR(OPENLIST);                                          03480000
L1       LA    @1,236(0,@5)                                       0057  03490000
*         GEN (CLOSE MF=(E,(1)));                                       03500000
         CLOSE MF=(E,(1))                                               03510000
         DS    0H                                                       03520000
*  GEN ( EJECT);                                                        03530000
          EJECT                                                         03540000
         DS    0H                                                       03550000
*  /******************************************************************* 03560000
*  /**                                                                * 03570000
*  /**    THIS SECTION ISSUES A FREEPOOL MACRO FOR THE DCB JUST CLOSED* 03580000
*  /** DATA MANAGENENT DOES NOT FREE ANY BUFFERS IT GETS FOR US.      * 03590000
*  /**                                                                * 03600000
*  /******************************************************************* 03610000
*               R1 = FIRSTGMO            /*OUTPUT DCBAD TO REGISTER*/;  03620000
         L     @1,380(0,@5)                                       0060  03630000
*                                        /* FREE THE BUFFER POOL*/      03640000
*         GEN ( FREEPOOL (R1));                                         03650000
          FREEPOOL (R1)                                                 03660000
         DS    0H                                                       03670000
*         END;                                                          03680000
*  /******************************************************************* 03690000
*  /**                                                                * 03700000
*  /**    THIS SECTION PLACES ADDRESS OF NEXTDCB IN FIRSTGMO POINTER  * 03710000
*  /** IF NO NEXTDCB BINARY ZEROS ARE PLACED IN FIRSTGMO AS  THE AREA * 03720000
*  /** FOR THE DCB WAS CLEARED TO BINARY ZEROS AFTER THE GETMAIN      * 03730000
*  /**                                                                * 03740000
*  /******************************************************************* 03750000
*               DCBPTR = FIRSTGMO        /* FILL DCBPTR WITH DCBADDR*/; 03760000
@9FF     MVC   300(4,@5),380(@5)                                  0063  03770000
*               FIRSTGMO = NEXTDCB       /*NEXT DCB ADDR TO FIRSTGMO*/; 03780000
         L     @1,300(0,@5)                                       0064  03790000
         MVC   380(4,@5),256(@1)                                  0064  03800000
*  /******************************************************************* 03810000
*  /**    THIS SECTION SETS UP REGISTERS AND ISSUES A FREEMAIN FOR 280* 03820000
*  /** BYTES.A FREEMAIN IS NEEDED EVEN IF A DCB WAS NOT OPEN.         * 03830000
*  /**                                                                * 03840000
*  /******************************************************************* 03850000
*               R6 = ADDR(DCBPTR)        /* CORE LIST ADDRESS*/;        03860000
         LA    @6,300(0,@5)                                       0065  03870000
*               R1 = ADDR(GETMLIST) /**ADDRESS THE GET MAIN LIST**/;    03880000
         LA    @1,364(0,@5)                                       0066  03890000
*                                        /*FREEMAIN FOR DCB*/           03900000
*         GEN ( FREEMAIN E,LV=280,A=(R6),SP=0,MF=(E,(R1)));             03910000
          FREEMAIN E,LV=280,A=(R6),SP=0,MF=(E,(R1))                     03920000
         DS    0H                                                       03930000
*  GEN ( EJECT);                                                        03940000
          EJECT                                                         03950000
         DS    0H                                                       03960000
*         IF FIRSTGMO ¬= 0 THEN GO TO A2J3 /* BR MORE TO FREE*/;        03970000
         SR    @F,@F                                              0069  03980000
         C     @F,380(0,@5)                                       0069  03990000
         BC    07,A2J3                                            0070  04000000
*  /******************************************************************* 04010000
*  /**                                                                * 04020000
*  /** THIS SECTION WILL CLOSE ALL INPUT DCBS OPENED FOR THIS DSD     * 04030000
*  /** GROUP.EACH BUFFER POOL IS FREED AND DYNAMIC CORE RETURNED TO   * 04040000
*  /** THE SYSTEM.LINKAGE IS THROUGH FIRSTGMI AND NEXTDCB.LAST DCB    * 04050000
*  /** WILL HAVE BINARY ZEROS PRESENT IN NEXTDCB FIELD.CONTROL IS     * 04060000
*  /** RETURNED TO THE BASE MODULE WHEN FIRSTGMI IS ZERO.             * 04070000
*  /**                                                                * 04080000
*  /******************************************************************* 04090000
*  A2J4:;                                                               04100000
*  /******************************************************************* 04110000
*  /**                                                                * 04120000
*  /**    THIS SECTION WILL BRANCH TO A2J6 TO TEST FOR END OF DSD     * 04130000
*  /** GROUP IF THERE ARE NO INPUT DCBS TO CLOSE.                     * 04140000
*  /**                                                                * 04150000
*  /******************************************************************* 04160000
*         IF FIRSTGMI = 0 THEN GO TO A2J6 /**BRANCH NO MORE INPUT DCB** 04170000
A2J4     SR    @F,@F                                              0072  04180000
         C     @F,392(0,@5)                                       0072  04190000
         BC    08,A2J6                                            0073  04200000
*  A2J5:           DCBPTR = FIRSTGMI; /*REINITILIZE DCBPTR COR  A48773* 04210000
A2J5     MVC   300(4,@5),392(@5)                                  0074  04220000
*  /******************************************************************* 04230000
*  /**                                                                * 04240000
*  /**    IF INPUT DCB IS NOT OPEN A BRANCH IS TAKEN TO FREEMAIN      * 04250000
*  /**                                                                * 04260000
*  /******************************************************************* 04270000
*         IF OFLGS(4) = '1'B THEN DO /** CLOSE DCB IF OPEN**/;          04280000
         L     @1,300(0,@5)                                       0075  04290000
         TM    48(@1),B'00010000'                                 0075  04300000
         BC    12,@9FE                                            0075  04310000
*  /******************************************************************* 04320000
*  /**                                                                * 04330000
*  /**    THIS SECTION INITILIZES THE LIST FOR CLOSEING OF THE INPUT  * 04340000
*  /** DCB.DISPOSITION IS TAKEN FROM THE DD CARD.                     * 04350000
*  /**                                                                * 04360000
*  /******************************************************************* 04370000
*               OPTBYTE1 = FIRSTGMI      /* INPUT DCBAD TO LIST*/;      04380000
         MVC   236(4,@5),392(@5)                                  0077  04390000
*                                        /*  DECLARE OPTION FOR CLOSE*/ 04400000
*                                        /* TAKE DISP FROM DD CARD*/    04410000
*               OPTBYTE1(1) = '80'X      /*  OPTION = LAST,DISP*/;      04420000
         MVI   236(@5),X'80'                                      0078  04430000
*  /** IF INPUT DCB IS OPEN INREC CONTAINS ADDRESS OF INPUT WORKAREA  * 04440000
*  /** LENGTH IS TAKEN FROM GMLGTH OF DCB FOR FREEING                 * 04450000
*               R7 = GMLGTH    /**PICK UP WORKAREA LENGTH**/;           04460000
         L     @1,300(0,@5)                                       0079  04470000
         LH    @7,276(0,@1)                                       0079  04480000
*         R6 = ADDR(INREC) /**GET INPUT WORKAREA PTR**/;                04490000
         LA    @6,272(0,@1)                                       0080  04500000
*         R1 = ADDR(GETMLIST)  /**  ADDRESS  THE GET MAIN LIST**/;      04510000
         LA    @1,364(0,@5)                                       0081  04520000
*                        /**   FREEMAIN FOR WORKAREA    **/;            04530000
*         GEN ( FREEMAIN E,LV=(R7),A=(R6),SP=0,MF=(E,(R1)));            04540000
          FREEMAIN E,LV=(R7),A=(R6),SP=0,MF=(E,(R1))                    04550000
         DS    0H                                                       04560000
*               R1 = ADDR(OPENLIST)      /*LIST ADDR FOR CLOSE*/;       04570000
         LA    @1,236(0,@5)                                       0084  04580000
*         GEN ( CLOSE MF=(E,(1)));                                      04590000
          CLOSE MF=(E,(1))                                              04600000
         DS    0H                                                       04610000
*                   /* DCB NOW CLOSED */                                04620000
*  GEN ( EJECT);                                                        04630000
          EJECT                                                         04640000
         DS    0H                                                       04650000
*  /******************************************************************* 04660000
*  /**    THIS SECTION FREES THE BUFFERS GOTTEN BY DATA MANAGEMENT.   * 04670000
*  /******************************************************************* 04680000
*               R1 = FIRSTGMI /*INPUT DCB TO REGISTER*/;                04690000
         L     @1,392(0,@5)                                       0087  04700000
*                                        /* FREE THE BUFFER POOL*/      04710000
*         GEN ( FREEPOOL (R1));                                         04720000
          FREEPOOL (R1)                                                 04730000
         DS    0H                                                       04740000
*         END;                                                          04750000
*  /******************************************************************* 04760000
*  /**    THIS SECTION INITILIZES THE POINTER TO THE NEXT DCB AND SETS* 04770000
*  /** UP REGISTERS FOR A FREEMAIN OF 280 BYTES USED FOR THE DCB.     * 04780000
*  /******************************************************************* 04790000
*               DCBPTR = FIRSTGMI        /* ADDRESS THE DCB */;         04800000
@9FE     MVC   300(4,@5),392(@5)                                  0090  04810000
*               FIRSTGMI = NEXTDCB       /*NEXT DCB ADDR TO FIRSTGMI*/; 04820000
         L     @1,300(0,@5)                                       0091  04830000
         MVC   392(4,@5),256(@1)                                  0091  04840000
*               R6 = ADDR(DCBPTR)        /* CORE LIST ADDRESS*/;        04850000
         LA    @6,300(0,@5)                                       0092  04860000
*               R1 = ADDR(GETMLIST) /**ADDRESS THE GET MAIN LIST**/;    04870000
         LA    @1,364(0,@5)                                       0093  04880000
*         GEN ( FREEMAIN E,LV=280,A=(R6),SP=0,MF=(E,(R1)));             04890000
          FREEMAIN E,LV=280,A=(R6),SP=0,MF=(E,(R1))                     04900000
         DS    0H                                                       04910000
*         IF FIRSTGMI ¬= 0 THEN GO TO A2J5 /*BR IF MORE TO FREE*/;      04920000
         SR    @F,@F                                              0095  04930000
         C     @F,392(0,@5)                                       0095  04940000
         BC    07,A2J5                                            0096  04950000
*  GEN ( EJECT);                                                        04960000
          EJECT                                                         04970000
         DS    0H                                                       04980000
*  /******************************************************************* 04990000
*  /**                                                                * 05000000
*  /**    THIS SECTION WILL TEST FOR ENTRY AS A RESULT OF FINDING AN  * 05010000
*  /** END CARD IN THE INPUT STREAM.IF END IS PRESENT WE DO NOT CLOSE * 05020000
*  /** THE DATA GENERATOR INPUT AND OUTPUT DCBS AS THEY MAY BE NEEDED * 05030000
*  /** FOR MORE DSD GROUPS.CONTROL RETURNS TO THE BASE MODULE IN THIS * 05040000
*  /** CASE.WHEN ENTRY IS A RESULT OF FINDING THE SYSIN DELIMITER CARD* 05050000
*  /** FIRSTGMO AND FIRSTGMI SHOULD BE ZERO.WE ARE  DEFINED IN THE SRL* 05060000
*  /** AS REQUIREING AN END CARD FOR EACH GROUP,HOWEVER IF ONE IS NOT * 05070000
*  /** PRESENT FOR THE LAST GROUP,THE USER DCBS GET CLOSED ANYWAY     * 05080000
*  /**                                                                * 05090000
*  /******************************************************************* 05100000
*  A2J6:;                                                               05110000
*  /** THIS SECTION WILL PLACE FOXES IN NAME FIELDS OF FDTBLS THAT    * 05120000
*  /** WERE USED FOR FIELD SELECTION.SELECTION IS INDICATED BY A NAME * 05130000
*  /** IN THE FDREPNM FIELD.THIS MUST BE DONE SO THAT THE USER MAY    * 05140000
*  /** NEVER ACCESS THE NAME IN ANOTHER DSD GROUP.THE FROMAD IS       * 05150000
*  /** DYNAMIC AS INREC WAS GOTTEN WHEN THE DCB WAS OPENED.THE RECORD * 05160000
*  /** IS READ INTO INREC BY THE 'GET' OF THE CREATE MODULE.INREC HAS * 05170000
*  /** BEEN FREED SO IT CAN BE SEEN THAT IF THE NAME WAS ACCESSED IN  * 05180000
*  /** ANOTHER DSD GROUP THAT INCORRECT INFORMATION WOULD BE OBTAINED * 05190000
*  /** THE DATA SETS MUST BE REDEFINED FOR EACH DSD GROUP AS THEY ARE * 05200000
*  /** FREED BY THIS MODULE.SYSIN DOESNT NEED REDEFINING BUT ANY      * 05210000
*  /** RECORD SELECTION ASSOCIATED WITH INPUT MUST BE REDEFINED       * 05220000
*  /**  FD NAMES THAT ARE BE BLANKED OUT MUST BE REDEFINED IF USED    * 05230000
*  /** AGAIN.                                                         * 05240000
*  /**                                                                * 05250000
*      IF FDPTR1 ¬= 0 THEN DO /* DO IF FDPTR IS NOT ZERO    A36081 */;  05260000
A2J6     SR    @F,@F                                              0099  05270000
         C     @F,600(0,@5)                                       0099  05280000
         BC    08,@9FD                                            0099  05290000
*               R7 = FDPTR1    /** PICK UP FIRST TABLE ADDRESS **/;     05300000
         L     @7,600(0,@5)                                       0101  05310000
*  A2J64:;                                                              05320000
*               R6 = R7        /** COPY TABLE ADDRESS **/;              05330000
A2J64    LR    @6,@7                                              0103  05340000
*  /**LMOVED IS USED AS COUNTER,IT IS INIT TO ZERO WHEN USED ELSEWHERE* 05350000
*               LMOVED = 0     /** INIT COUNTER FOR SCAN**/;            05360000
         SR    @F,@F                                              0104  05370000
         STH   @F,620(0,@5)                                       0104  05380000
*  A2J65:;                                                              05390000
*   /**  IF NAME IS PRESENT DO BELOW**/                                 05400000
*               LMOVED = LMOVED + 1 ; /* ADD ONE TO COUNTER A48747 */   05410000
A2J65    LA    @F,1                                               0106  05420000
         AH    @F,620(0,@5)                                       0106  05430000
         STH   @F,620(0,@5)                                       0106  05440000
*       IF R6 -> FDREPNM(1) ¬= '00'X THEN DO; /* IF INPUT DO BELOW */   05450000
         CLI   8(@6),X'00'                                        0107  05460000
         BC    08,@9FC                                            0107  05470000
*         R6 -> FDNAME = 'FFFFFFFFFFFFFFFF'X /** FOXES TO NAME FIELD**/ 05480000
         MVC   0(8,@6),@X5                                        0109  05490000
*         END;                                                          05500000
*         IF LMOVED ¬= 8 THEN DO /** BR IF NOT AT END OF TABLE**/;      05510000
@9FC     LA    @F,8                                               0111  05520000
         CH    @F,620(0,@5)                                       0111  05530000
         BC    08,@9FB                                            0111  05540000
*               R6 = R6 + 64   /** POINTER TO NEXT SECTION **/;         05550000
         AH    @6,@D1                                             0113  05560000
*               GO TO A2J65    /** BRANCH TO KEEP LOOKING**/;           05570000
         BC    15,A2J65                                           0114  05580000
*         END;                                                          05590000
*    /**  BRANCH IF DONE**/                                             05600000
*         IF R7 -> FDTBL(517:520) = '00000000'X THEN GO TO A2J66 ;      05610000
@9FB     CLC   516(4,@7),@X6                                      0116  05620000
         BC    08,A2J66                                           0117  05630000
*         R7 = R7 -> FDTBL(517:520) /**PICK UP NEXT TABLE ADDRESS**/;   05640000
         L     @7,516(0,@7)                                       0118  05650000
*               GO TO A2J64         /**BR TO START LOOKING AGAIN**/;    05660000
         BC    15,A2J64                                           0119  05670000
*       END;                                                            05680000
*  A2J66:;                                                              05690000
@9FD     EQU   *                                                  0121  05700000
*         IF ENDSW = ON THEN GO TO A2J7 /** BR NOT END OF JOB**/;       05710000
A2J66    CLC   564(1,@5),ON                                       0122  05720000
         BC    08,A2J7                                            0123  05730000
*  /******************************************************************* 05740000
*  /**    THIS SECTION FREES CORE OBTAINED FOR THE FD TABLES.AT ENTRY * 05750000
*  /** FDPTR1 CONTAINS ADDRESS OF FIRST FD TABLE.LINK ADDRESS TO THE  * 05760000
*  /** NEXT FD TABLE IS MAINTAINED AT BYTE LOCATION 517-520 OF CURRENT* 05770000
*  /** TABLE.THIS LOCATION WILL BE ZERO WHEN WE ARE ADDRESSING THE    * 05780000
*  /** LAST TABLE                                                     * 05790000
*  /******************************************************************* 05800000
*  A2J67:;                                                              05810000
*         IF FDPTR1 ¬= 0 THEN DO /** DO BELOW IF FDPTR NOT ZERO**/;     05820000
A2J67    SR    @F,@F                                              0125  05830000
         C     @F,600(0,@5)                                       0125  05840000
         BC    08,@9FA                                            0125  05850000
*         R6 = ADDR(FDPTR1) /** PICK UP FDPTR**/;                       05860000
         LA    @6,600(0,@5)                                       0127  05870000
*         FDPTR = FDPTR1  /** PICKUP ADDRESS NEXT FDTABEL**/ ;          05880000
         MVC   596(4,@5),600(@5)                                  0128  05890000
*  LMOVED = 0 ;                   /** SET COUNTER TO ZERO       A50950  05900000
         SR    @F,@F                                              0129  05910000
         STH   @F,620(0,@5)                                       0129  05920000
*  A2J67A:;                                                             05930000
*              IF FDACTION = 'RO' THEN DO;   /* ROLL ACTION     A50950* 05940000
A2J67A   L     @1,596(0,@5)                                       0131  05950000
         CLC   28(2,@1),@C7                                       0131  05960000
         BC    07,@9F9                                            0131  05970000
*                 FDFROMAD = FDFROMAD - FDLGTH ; /* RESET POINT A50950* 05980000
         LH    @F,24(0,@1)                                        0133  05990000
         LCR   @F,@F                                              0133  06000000
         AL    @F,44(0,@1)                                        0133  06010000
         ST    @F,44(0,@1)                                        0133  06020000
*              END;                        /*TO START OF FIELD  A50950* 06030000
*          R7 = ADDR(FDFROMAD) ;  /** R7 WITH THE FD FLD ADDR.  A50950  06040000
@9F9     L     @1,596(0,@5)                                       0135  06050000
         LA    @7,44(0,@1)                                        0135  06060000
* GENERATE(  SR  8,8);                  /* CLEAR REG 8        @ZA07345* 06070000
           SR  8,8                                                      06080000
         DS    0H                                                       06090000
* GENERATE(  ICM 8,3,60(1));       /* GET LENGTH OF FD FIELD  @ZA07345* 06100000
           ICM 8,3,60(1)                                                06110000
         DS    0H                                                       06120000
*             IF R8 ¬= 0 THEN DO ;   /** IS A FD FLD PRESENT ?  A50950  06130000
         LTR   @8,@8                                              0138  06140000
         BC    08,@9F8                                            0138  06150000
*                R1 = ADDR(GETMLIST) ;   /** THEN DO            A50950  06160000
         LA    @1,364(0,@5)                                       0140  06170000
*                GEN ( FREEMAIN E,LV=(R8),A=(R7),SP=0,MF=(E,(R1))) ;    06180000
          FREEMAIN E,LV=(R8),A=(R7),SP=0,MF=(E,(R1))                    06190000
         DS    0H                                                       06200000
*                                                            /* A50950  06210000
*             END ;                                          /* A50950  06220000
*             FDPTR = FDPTR+64 ;     /** GET NEXT FD FLD ADDR.  A50950  06230000
@9F8     LA    @F,64                                              0143  06240000
         A     @F,596(0,@5)                                       0143  06250000
         ST    @F,596(0,@5)                                       0143  06260000
*             LMOVED = LMOVED + 1 ;        /** UPDATE COUNTER   A50950  06270000
         LA    @F,1                                               0144  06280000
         AH    @F,620(0,@5)                                       0144  06290000
         STH   @F,620(0,@5)                                       0144  06300000
*                IF LMOVED ¬= 8 THEN DO ;  /** 8 FD FLDS HAD ?  A50950  06310000
         LA    @F,8                                               0145  06320000
         CH    @F,620(0,@5)                                       0145  06330000
*                   GO TO A2J67A ;   /** NO, FREEM. NEXT FD FLD A50950  06340000
         BC    07,A2J67A                                          0147  06350000
*                END ;               /** YES, CONTINUE          A50950  06360000
*         FDPTR = FDPTR1 ;   /** PICKUP ADDRESS NEXT FDTABEL    A50950  06370000
@9F7     MVC   596(4,@5),600(@5)                                  0149  06380000
*         FDPTR = FDTBL(517:520) ;                                      06390000
         L     @1,596(0,@5)                                       0150  06400000
         L     @F,516(0,@1)                                       0150  06410000
         ST    @F,596(0,@5)                                       0150  06420000
*        R1 = ADDR(GETMLIST)  /** ADDRESS THE GET MAIN LIST **/ ;       06430000
         LA    @1,364(0,@5)                                       0151  06440000
*         GEN ( FREEMAIN E,LV=520,A=(R6),SP=0,MF=(E,(R1)));             06450000
          FREEMAIN E,LV=520,A=(R6),SP=0,MF=(E,(R1))                     06460000
         DS    0H                                                       06470000
*         FDPTR1 = FDPTR ;                                              06480000
         MVC   600(4,@5),596(@5)                                  0153  06490000
*         GO TO A2J67 /** FREE NEXT FDTBL AREA **/ ;                    06500000
         BC    15,A2J67                                           0154  06510000
*         END ;                                                         06520000
*  /******************************************************************* 06530000
*  /**    THIS SECTION WILL CLOSE AND FREEPOOL THE SYSI DCB OF THE    * 06540000
*  /** DATA GENERATOR.                                                * 06550000
*  /******************************************************************* 06560000
*               DCBPTR = ADDR(SYSI) /**PICK UP SYSI DCB ADDRESS**/;     06570000
@9FA     LA    @F,116(0,@5)                                       0156  06580000
         ST    @F,300(0,@5)                                       0156  06590000
*         IF OFLGS(4) = '1'B THEN DO /**BRANCH IF DCB NOT OPENED**/;    06600000
         L     @1,300(0,@5)                                       0157  06610000
         TM    48(@1),B'00010000'                                 0157  06620000
         BC    12,@9F6                                            0157  06630000
*               OPTBYTE1 = DCBPTR /**DCB ADDRESS TO LIST**/;            06640000
         MVC   236(4,@5),300(@5)                                  0159  06650000
*               OPTBYTE1(1) = '80'X /** INITILIZE OPTIONS**/;           06660000
         MVI   236(@5),X'80'                                      0160  06670000
*               R1 = ADDR(OPENLIST) /**ADDRESS THE LIST**/;             06680000
         LA    @1,236(0,@5)                                       0161  06690000
*         GEN ( CLOSE MF=(E,(R1)));                                     06700000
          CLOSE MF=(E,(R1))                                             06710000
         DS    0H                                                       06720000
*               R1 = DCBPTR    /**PICK UP DCB ADDRESS**/;               06730000
         L     @1,300(0,@5)                                       0163  06740000
*         GEN ( FREEPOOL (R1));                                         06750000
          FREEPOOL (R1)                                                 06760000
         DS    0H                                                       06770000
*         END;                                                          06780000
*  GEN ( EJECT);                                                        06790000
@9F6     EQU   *                                                  0166  06800000
          EJECT                                                         06810000
         DS    0H                                                       06820000
*  /******************************************************************* 06830000
*  /**    THIS SECTION WILL CLOSE AND FREEPOOL THE SYSP DCB OF THE    * 06840000
*  /** DATA GENERATOR.                                                * 06850000
*  /******************************************************************* 06860000
*               DCBPTR = ADDR(SYSP) /**PICK UP SYSP DCB ADDRESS**/;     06870000
         LA    @F,20(0,@5)                                        0167  06880000
         ST    @F,300(0,@5)                                       0167  06890000
*         IF OFLGS(4) = '1'B THEN DO /**BRANCH IF DCB NOT OPEN**/;      06900000
         L     @1,300(0,@5)                                       0168  06910000
         TM    48(@1),B'00010000'                                 0168  06920000
         BC    12,@9F5                                            0168  06930000
*               OPTBYTE1 = DCBPTR /**DCB ADDRESS TO LIST**/;            06940000
         MVC   236(4,@5),300(@5)                                  0170  06950000
*               OPTBYTE1(1) = '8F'X /**INITILIZE OPTIONS**/;            06960000
         MVI   236(@5),X'8F'                                      0171  06970000
*               R1 = ADDR(OPENLIST) /**ADDRESS THE LIST**/;             06980000
         LA    @1,236(0,@5)                                       0172  06990000
*         GEN ( CLOSE MF=(E,(R1)));                                     07000000
          CLOSE MF=(E,(R1))                                             07010000
         DS    0H                                                       07020000
*               R1 = DCBPTR /**PICK UP DCB ADDRESS**/;                  07030000
         L     @1,300(0,@5)                                       0174  07040000
*         GEN (FREEPOOL (R1));                                          07050000
         FREEPOOL (R1)                                                  07060000
         DS    0H                                                       07070000
*         END;                                                          07080000
*  GEN ( EJECT);                                                        07090000
@9F5     EQU   *                                                  0177  07100000
          EJECT                                                         07110000
         DS    0H                                                       07120000
*  /******************************************************************* 07130000
*  /******************************************************************* 07140000
*  /** ***** NOTICE THERE IS NO FREEMAIN FOR THE SYSI AND SYSP DCBS.  * 07150000
*  /** ***** THEY EXIST IN THE COMMON AREA WHICH IS FREED WHEN A      * 07160000
*  /** ***** RETURN IS GIVEN FROM THE BASE MODULE.                    * 07170000
*  /******************************************************************* 07180000
*  /******************************************************************* 07190000
*  A2J7:;                                                               07200000
*         RETURN;                                                       07210000
*         END IEBDGCUP;                                                 07220000
@EL01    L     @D,4(0,@D)                                         0180  07230000
         LR    @1,@C                                              0180  07240000
         L     @0,@SIZ001                                         0180  07250000
         FREEMAIN R,LV=(0),A=(1)                                  0180  07260000
         L     @E,12(0,@D)                                        0180  07270000
         LM    @0,@8,20(@D)                                       0180  07280000
         LM    @A,@C,60(@D)                                       0180  07290000
         BCR   15,@E                                              0180  07300000
@DATA1   EQU   *                                                        07310000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           07320000
@1       EQU   01                                                       07330000
@2       EQU   02                                                       07340000
@3       EQU   03                                                       07350000
@4       EQU   04                                                       07360000
@5       EQU   05                                                       07370000
@6       EQU   06                                                       07380000
@7       EQU   07                                                       07390000
@8       EQU   08                                                       07400000
@9       EQU   09                                                       07410000
@A       EQU   10                                                       07420000
@B       EQU   11                                                       07430000
@C       EQU   12                                                       07440000
@D       EQU   13                                                       07450000
@E       EQU   14                                                       07460000
@F       EQU   15                                                       07470000
@D1      DC    H'64'                                                    07480000
         DS    0F                                                       07490000
@SIZ001  DC    AL1(&SPN)                                                07500000
         DC    AL3(@DATEND-@DATD)                                       07510000
         DS    0F                                                       07520000
@X5      DC    X'FFFFFFFFFFFFFFFF'                                      07530000
@X6      DC    X'00000000'                                              07540000
@C7      DC    C'RO'                                                    07550000
         DS    0D                                                       07560000
@DATA    EQU   *                                                        07570000
R14      EQU   00000014            FULLWORD INTEGER REGISTER            07580000
R15      EQU   00000015            FULLWORD INTEGER REGISTER            07590000
R0       EQU   00000000            FULLWORD INTEGER REGISTER            07600000
R1       EQU   00000001            FULLWORD INTEGER REGISTER            07610000
R2       EQU   00000002            FULLWORD INTEGER REGISTER            07620000
R3       EQU   00000003            FULLWORD INTEGER REGISTER            07630000
R5       EQU   00000005            FULLWORD POINTER REGISTER            07640000
R6       EQU   00000006            FULLWORD POINTER REGISTER            07650000
R7       EQU   00000007            FULLWORD POINTER REGISTER            07660000
R8       EQU   00000008            FULLWORD POINTER REGISTER            07670000
R9       EQU   00000009            FULLWORD POINTER REGISTER            07680000
COMMON   EQU   00000000            308 BYTE(S) ON DWORD                 07690000
PAGENO   EQU   COMMON+00000000     4 BYTE(S)                            07700000
LINECT   EQU   COMMON+00000004     FULLWORD INTEGER                     07710000
LINECTR  EQU   COMMON+00000008     FULLWORD INTEGER                     07720000
PARM     EQU   COMMON+00000012     FULLWORD POINTER                     07730000
REPEATNO EQU   COMMON+00000016     HALFWORD INTEGER                     07740000
CREATENO EQU   COMMON+00000018     HALFWORD INTEGER                     07750000
SYSP     EQU   COMMON+00000020     96 BYTE(S)                           07760000
SYSI     EQU   COMMON+00000116     96 BYTE(S)                           07770000
Q        EQU   COMMON+00000216     16 BYTE(S) ON DWORD                  07780000
QFILL    EQU   COMMON+00000216     7 BYTE(S)                            07790000
QSIGN    EQU   COMMON+00000223     8 BIT(S)                             07800000
QFILL1   EQU   COMMON+00000224     7 BYTE(S)                            07810000
QSIGN1   EQU   COMMON+00000231     8 BIT(S)                             07820000
COUNTER  EQU   COMMON+00000232     FULLWORD POINTER                     07830000
OPENLIST EQU   COMMON+00000236     8 BYTE(S)                            07840000
OPTBYTE1 EQU   COMMON+00000236     4 BYTE(S)                            07850000
OPTBYTE2 EQU   COMMON+00000240     4 BYTE(S)                            07860000
EXLST    EQU   COMMON+00000244     24 BYTE(S) ON WORD                   07870000
INHDR    EQU   COMMON+00000244     1 BYTE(S)                            07880000
INHDR1   EQU   COMMON+00000245     3  BYTE  POINTER ON WORD+1           07890000
OUTHDR   EQU   COMMON+00000248     1 BYTE(S)                            07900000
OUTHDR1  EQU   COMMON+00000249     3  BYTE  POINTER ON WORD+1           07910000
INTRL    EQU   COMMON+00000252     1 BYTE(S)                            07920000
INTRL1   EQU   COMMON+00000253     3  BYTE  POINTER ON WORD+1           07930000
OUTTRL   EQU   COMMON+00000256     1 BYTE(S)                            07940000
OUTTRL1  EQU   COMMON+00000257     3  BYTE  POINTER ON WORD+1           07950000
EXITDCB  EQU   COMMON+00000260     1 BYTE(S)                            07960000
EXITDCB1 EQU   COMMON+00000261     3  BYTE  POINTER ON WORD+1           07970000
TOTAL    EQU   COMMON+00000264     1 BYTE(S)                            07980000
TOTAL1   EQU   COMMON+00000265     3  BYTE  POINTER ON WORD+1           07990000
EXLST1   EQU   COMMON+00000268     4 BYTE(S) ON WORD                    08000000
EDCB1    EQU   COMMON+00000268     1 BYTE(S)                            08010000
EDCB2    EQU   COMMON+00000269     3  BYTE  POINTER ON WORD+1           08020000
EXLST2   EQU   COMMON+00000272     4 BYTE(S) ON WORD                    08030000
EDCB3    EQU   COMMON+00000272     1 BYTE(S)                            08040000
EDCB4    EQU   COMMON+00000273     3  BYTE  POINTER ON WORD+1           08050000
EXLST3   EQU   COMMON+00000276     4 BYTE(S) ON WORD                    08060000
EDCB5    EQU   COMMON+00000276     1 BYTE(S)                            08070000
EDCB6    EQU   COMMON+00000277     3  BYTE  POINTER ON WORD+1           08080000
DLRECL   EQU   COMMON+00000280     HALFWORD INTEGER                     08090000
DBLKSI   EQU   COMMON+00000282     HALFWORD INTEGER                     08100000
DRECFM   EQU   COMMON+00000284     8 BIT(S)                             08110000
LEFTOVER EQU   COMMON+00000288     FULLWORD INTEGER                     08120000
OFFSET   EQU   COMMON+00000292     FULLWORD POINTER                     08130000
LPTR     EQU   COMMON+00000296     FULLWORD POINTER                     08140000
DCBPTR   EQU   COMMON+00000300     FULLWORD POINTER                     08150000
DUMMY    EQU   COMMON+00000304     FULLWORD POINTER                     08160000
COMMON1  EQU   00000304            236 BYTE(S) ON WORD                  08170000
SAVEMS   EQU   COMMON1+00000000    HALFWORD INTEGER                     08180000
CONCODE  EQU   COMMON1+00000002    HALFWORD INTEGER                     08190000
OUTREC   EQU   COMMON1+00000004    FULLWORD POINTER                     08200000
CRTABPT  EQU   COMMON1+00000008    FULLWORD POINTER                     08210000
CURCRTE  EQU   COMMON1+00000012    FULLWORD POINTER                     08220000
CURCRGM  EQU   COMMON1+00000016    FULLWORD POINTER                     08230000
CURPIC   EQU   COMMON1+00000020    FULLWORD POINTER                     08240000
PICCTR   EQU   COMMON1+00000024    FULLWORD INTEGER                     08250000
EXITTAB  EQU   COMMON1+00000028    FULLWORD POINTER                     08260000
EXITGM   EQU   COMMON1+00000032    FULLWORD POINTER                     08270000
CUREXIT  EQU   COMMON1+00000036    FULLWORD POINTER                     08280000
DELIM    EQU   COMMON1+00000040    4 BYTE(S)                            08290000
RECREM   EQU   COMMON1+00000044    FULLWORD INTEGER                     08300000
CURFD    EQU   COMMON1+00000048    FULLWORD POINTER                     08310000
CUROUT   EQU   COMMON1+00000052    FULLWORD POINTER                     08320000
SAVE14   EQU   COMMON1+00000056    FULLWORD POINTER                     08330000
GETMLIST EQU   COMMON1+00000060    16 BYTE(S) ON WORD                   08340000
GLENGTH  EQU   COMMON1+00000060    FULLWORD INTEGER                     08350000
ADRLIST  EQU   COMMON1+00000064    FULLWORD POINTER                     08360000
IND      EQU   COMMON1+00000068    4 BYTE(S)                            08370000
GCODE    EQU   COMMON1+00000068    1 BYTE(S)                            08380000
SPOOL    EQU   COMMON1+00000069    1 BYTE(S)                            08390000
CCODE    EQU   COMMON1+00000070    2 BYTE(S)                            08400000
GCADDR   EQU   COMMON1+00000072    FULLWORD POINTER                     08410000
FIRSTGMO EQU   COMMON1+00000076    FULLWORD POINTER                     08420000
CURRGMO  EQU   COMMON1+00000080    FULLWORD POINTER                     08430000
LASTGMO  EQU   COMMON1+00000084    FULLWORD POINTER                     08440000
FIRSTGMI EQU   COMMON1+00000088    FULLWORD POINTER                     08450000
CURRGMI  EQU   COMMON1+00000092    FULLWORD POINTER                     08460000
LASTGMI  EQU   COMMON1+00000096    FULLWORD POINTER                     08470000
CONDCODE EQU   COMMON1+00000100    HALFWORD INTEGER                     08480000
MS       EQU   COMMON1+00000102    HALFWORD INTEGER                     08490000
INBUFA1  EQU   COMMON1+00000104    121 BYTE(S)                          08500000
INFILL   EQU   COMMON1+00000104    10 BYTE(S)                           08510000
INBUFA   EQU   COMMON1+00000114    111 BYTE(S)                          08520000
DDPTR    EQU   COMMON1+00000228    FULLWORD POINTER                     08530000
DUMMY1   EQU   COMMON1+00000232    FULLWORD POINTER                     08540000
COMMON2  EQU   00000536            76 BYTE(S) ON WORD                   08550000
SWITCH   EQU   COMMON2+00000000    52 BYTE(S)                           08560000
FDCSW    EQU   COMMON2+00000000    1 BYTE(S)                            08570000
FDNAMESW EQU   COMMON2+00000001    1 BYTE(S)                            08580000
FDPCSW   EQU   COMMON2+00000002    1 BYTE(S)                            08590000
FDFMTSW  EQU   COMMON2+00000003    1 BYTE(S)                            08600000
FDPLSW   EQU   COMMON2+00000004    1 BYTE(S)                            08610000
RANGESW  EQU   COMMON2+00000005    1 BYTE(S)                            08620000
FILLSW   EQU   COMMON2+00000006    1 BYTE(S)                            08630000
REPSW    EQU   COMMON2+00000007    1 BYTE(S)                            08640000
INDEXSW  EQU   COMMON2+00000008    1 BYTE(S)                            08650000
INDNMSW  EQU   COMMON2+00000009    1 BYTE(S)                            08660000
BQUOTESW EQU   COMMON2+00000010    1 BYTE(S)                            08670000
PQUOTESW EQU   COMMON2+00000011    1 BYTE(S)                            08680000
EQUOTESW EQU   COMMON2+00000012    1 BYTE(S)                            08690000
FDSW     EQU   COMMON2+00000013    1 BYTE(S)                            08700000
DSDSW    EQU   COMMON2+00000014    1 BYTE(S)                            08710000
NOGOSW   EQU   COMMON2+00000015    1 BYTE(S)                            08720000
CREATESW EQU   COMMON2+00000016    1 BYTE(S)                            08730000
DSDCSW   EQU   COMMON2+00000017    1 BYTE(S)                            08740000
CRCSW    EQU   COMMON2+00000018    1 BYTE(S)                            08750000
EXITSW   EQU   COMMON2+00000019    1 BYTE(S)                            08760000
EODSTOP  EQU   COMMON2+00000020    1 BYTE(S)                            08770000
DSDNULSW EQU   COMMON2+00000021    1 BYTE(S)                            08780000
DSDORGSW EQU   COMMON2+00000022    1 BYTE(S)                            08790000
DSDDDSW  EQU   COMMON2+00000023    1 BYTE(S)                            08800000
CRTBLK   EQU   COMMON2+00000024    1 BYTE(S)                            08810000
NAMCSW   EQU   COMMON2+00000025    8 BIT(S)                             08820000
PICCSW   EQU   COMMON2+00000026    8 BIT(S)                             08830000
BUFPSW   EQU   COMMON2+00000027    1 BYTE(S)                            08840000
ENDSW    EQU   COMMON2+00000028    1 BYTE(S)                            08850000
COMCSW   EQU   COMMON2+00000029    1 BYTE(S)                            08860000
FLAGSW   EQU   COMMON2+00000030    8 BIT(S)                             08870000
PAGESW   EQU   COMMON2+00000031    1 BYTE(S)                            08880000
EPSW     EQU   COMMON2+00000032    1  BYTE  POINTER                     08890000
SYSISW   EQU   COMMON2+00000033    1 BYTE(S)                            08900000
SYSPSW   EQU   COMMON2+00000034    1 BYTE(S)                            08910000
OLDNEWSW EQU   COMMON2+00000035    1 BYTE(S)                            08920000
FLUSHSW  EQU   COMMON2+00000036    1 BYTE(S)                            08930000
FLUSHSW1 EQU   COMMON2+00000037    1 BYTE(S)                            08940000
DSDOSW   EQU   COMMON2+00000038    1 BYTE(S)                            08950000
DSDISW   EQU   COMMON2+00000039    1 BYTE(S)                            08960000
QUANSW   EQU   COMMON2+00000040    1 BYTE(S)                            08970000
PARENSW  EQU   COMMON2+00000041    1 BYTE(S)                            08980000
REPEATSW EQU   COMMON2+00000042    1 BYTE(S)                            08990000
FDPLGTH  EQU   COMMON2+00000052    HALFWORD INTEGER                     09000000
SGCADDR  EQU   COMMON2+00000056    FULLWORD POINTER                     09010000
FDPTR    EQU   COMMON2+00000060    FULLWORD POINTER                     09020000
FDPTR1   EQU   COMMON2+00000064    FULLWORD POINTER                     09030000
FDPTR2   EQU   COMMON2+00000068    FULLWORD POINTER                     09040000
DUMMY2   EQU   COMMON2+00000072    FULLWORD POINTER                     09050000
COMMON3  EQU   00000608            188 BYTE(S) ON WORD                  09060000
FDCTR    EQU   COMMON3+00000000    HALFWORD POINTER                     09070000
LREMAIN  EQU   COMMON3+00000004    FULLWORD POINTER                     09080000
COMPCTR  EQU   COMMON3+00000008    FULLWORD POINTER                     09090000
LMOVED   EQU   COMMON3+00000012    HALFWORD POINTER                     09100000
U        EQU   COMMON3+00000016    FULLWORD POINTER                     09110000
PICEND   EQU   COMMON3+00000020    HALFWORD POINTER                     09120000
CURFDGM  EQU   COMMON3+00000024    FULLWORD POINTER                     09130000
SWTCH    EQU   COMMON3+00000028    4 BYTE(S) ON WORD                    09140000
SYSINSEL EQU   COMMON3+00000028    1 BYTE(S)                            09150000
FIRSTSW  EQU   COMMON3+00000029    1 BYTE(S)                            09160000
FRSTSW   EQU   COMMON3+00000030    1 BYTE(S)                            09170000
STOPSW   EQU   COMMON3+00000031    1 BYTE(S)                            09180000
COPYVAL  EQU   COMMON3+00000032    HALFWORD INTEGER                     09190000
COPYFD   EQU   COMMON3+00000036    FULLWORD POINTER                     09200000
COPYFDGM EQU   COMMON3+00000040    FULLWORD POINTER                     09210000
NAMCTR   EQU   COMMON3+00000044    HALFWORD INTEGER                     09220000
NAMCTR1  EQU   COMMON3+00000046    HALFWORD INTEGER                     09230000
INRECSZ  EQU   COMMON3+00000048    HALFWORD POINTER                     09240000
OUTRECSZ EQU   COMMON3+00000050    HALFWORD POINTER                     09250000
INRECFM  EQU   COMMON3+00000052    1 BYTE(S)                            09260000
RECOFFST EQU   COMMON3+00000053    1  BYTE  POINTER                     09270000
OUTRECFM EQU   COMMON3+00000054    1 BYTE(S)                            09280000
PICBASE  EQU   COMMON3+00000056    FULLWORD POINTER                     09290000
MESSAGE  EQU   COMMON3+00000060    121 BYTE(S)                          09300000
DUMMY3   EQU   COMMON3+00000184    FULLWORD POINTER                     09310000
DCBD     EQU   00000000            280 BYTE(S) ON DWORD                 09320000
FILL     EQU   DCBD+00000000       26 BYTE(S)                           09330000
DSORG1   EQU   DCBD+00000026       2 BYTE(S)                            09340000
DSORG    EQU   DCBD+00000026       8 BIT(S)                             09350000
FILLER   EQU   DCBD+00000028       8 BYTE(S)                            09360000
IOBAD    EQU   DCBD+00000028       4 BYTE(S)                            09370000
BFTEK    EQU   DCBD+00000032       8 BIT(S)                             09380000
EODAD    EQU   DCBD+00000033       3 BYTE(S)                            09390000
RECFM    EQU   DCBD+00000036       8 BIT(S)                             09400000
EXLIST   EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           09410000
DDNAME   EQU   DCBD+00000040       8 BYTE(S)                            09420000
DEBAD    EQU   DCBD+00000040       4 BYTE(S)                            09430000
IFLGS    EQU   DCBD+00000040       8 BIT(S)                             09440000
GETAD    EQU   DCBD+00000048       4 BYTE(S)                            09450000
OFLGS    EQU   DCBD+00000048       8 BIT(S)                             09460000
OFLGS1   EQU   DCBD+00000049       1 BYTE(S)                            09470000
MACRF    EQU   DCBD+00000050       2 BYTE(S)                            09480000
FILL2    EQU   DCBD+00000052       10 BYTE(S)                           09490000
BLKSI    EQU   DCBD+00000062       HALFWORD INTEGER                     09500000
FILL3    EQU   DCBD+00000064       18 BYTE(S)                           09510000
LRECL    EQU   DCBD+00000082       HALFWORD INTEGER                     09520000
FILL4    EQU   DCBD+00000084       172 BYTE(S)                          09530000
NEXTDCB  EQU   DCBD+00000256       FULLWORD POINTER                     09540000
DDNAME1  EQU   DCBD+00000260       8 BYTE(S)                            09550000
EODSW    EQU   DCBD+00000268       1 BYTE(S)                            09560000
DCBSW1   EQU   DCBD+00000269       1 BYTE(S)                            09570000
DCBSW2   EQU   DCBD+00000270       1 BYTE(S)                            09580000
DCBSW3   EQU   DCBD+00000271       8 BIT(S)                             09590000
INREC    EQU   DCBD+00000272       FULLWORD POINTER                     09600000
GMLGTH   EQU   DCBD+00000276       HALFWORD INTEGER                     09610000
FIELDSEL EQU   DCBD+00000278       1 BYTE(S)                            09620000
SPARE    EQU   DCBD+00000279       1 BYTE(S)                            09630000
FDTBL    EQU   00000000            520 BYTE(S) ON WORD                  09640000
FDNAME   EQU   FDTBL+00000000      8 BYTE(S)                            09650000
FDREPNM  EQU   FDTBL+00000008      8 BYTE(S)                            09660000
FDINDNM  EQU   FDTBL+00000016      8 BYTE(S) ON WORD                    09670000
FDUMMY   EQU   FDTBL+00000016      4 BYTE(S)                            09680000
FDINDNUM EQU   FDTBL+00000020      FULLWORD POINTER                     09690000
FDLGTH   EQU   FDTBL+00000024      HALFWORD POINTER                     09700000
FDCYCLE  EQU   FDTBL+00000026      HALFWORD POINTER                     09710000
FDACTION EQU   FDTBL+00000028      2 BYTE(S)                            09720000
FDFORMAT EQU   FDTBL+00000030      2 BYTE(S)                            09730000
FDSWITCH EQU   FDTBL+00000032      8 BIT(S)                             09740000
INDBYNAM EQU   FDTBL+00000032      1 BIT(S)                             09750000
PASS     EQU   FDTBL+00000032      1 BIT(S)                             09760000
FXACTION EQU   FDTBL+00000032      1 BIT(S)                             09770000
RPACTION EQU   FDTBL+00000032      1 BIT(S)                             09780000
ROACTION EQU   FDTBL+00000032      1 BIT(S)                             09790000
WVACTION EQU   FDTBL+00000032      1 BIT(S)                             09800000
STACTION EQU   FDTBL+00000032      1 BIT(S)                             09810000
NUACTION EQU   FDTBL+00000032      1 BIT(S)                             09820000
FDFILL   EQU   FDTBL+00000033      1 BYTE(S)                            09830000
FDSIGN   EQU   FDTBL+00000034      1 BYTE(S)                            09840000
FDCHAR   EQU   FDTBL+00000035      1 BYTE(S)                            09850000
FDRANGE  EQU   FDTBL+00000036      4 BYTE(S)                            09860000
FDOBUF   EQU   FDTBL+00000040      HALFWORD POINTER                     09870000
FDFRINC  EQU   FDTBL+00000042      HALFWORD POINTER                     09880000
FDFROMAD EQU   FDTBL+00000044      4 BYTE(S)                            09890000
FDMLGTH  EQU   FDTBL+00000048      HALFWORD POINTER                     09900000
FDTOINC  EQU   FDTBL+00000050      HALFWORD POINTER                     09910000
FDCYCCNT EQU   FDTBL+00000052      HALFWORD POINTER                     09920000
FDSLGTH  EQU   FDTBL+00000054      HALFWORD POINTER                     09930000
FDSLGTHR EQU   FDTBL+00000056      HALFWORD POINTER                     09940000
FDFRINCR EQU   FDTBL+00000058      1 BYTE(S)                            09950000
FDTOINCR EQU   FDTBL+00000059      1 BYTE(S)                            09960000
LTOFREE  EQU   FDTBL+00000060      HALFWORD POINTER                     09970000
FDSW1    EQU   FDTBL+00000062      8 BIT(S)                             09980000
STRTLOC1 EQU   FDTBL+00000062      1 BIT(S)                             09990000
FOXZEROS EQU   *                   16 BYTE(S)                           10000000
         DC    X'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'                      10010000
INBUF    EQU   00000000            80 BYTE(S)                           10020000
BUFFER   EQU   00000000            32767 BYTE(S)                        10030000
ON       EQU   *                   1 BYTE(S)                            10040000
         DC    X'FF'                                                    10050000
OFF      EQU   *                   1 BYTE(S)                            10060000
         DC    X'00'                                                    10070000
WKADDR   EQU   00000000            32767 BYTE(S)                        10080000
COPAT    EQU   *                   27 BYTE(S)                           10090000
         DC    C' ¢.<(+|&&!$*);¬-/,%_>?:#@''="'                         10100000
ALPAT    EQU   *                   36 BYTE(S)                           10110000
         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'                  10120000
OPTIONS  EQU   00000000            256 BYTE(S)                          10130000
PAGE     EQU   00000000            256 BYTE(S)                          10140000
DDLST    EQU   00000000            256 BYTE(S)                          10150000
         ORG   @DATA                                                    10160000
         DS    00000081C                                                10170000
@L       EQU   1                                                        10180000
@DATD    DSECT                                                          10190000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   10200000
BUFPTR   EQU   @DATD+00000072      FULLWORD POINTER                     10210000
RCODE    EQU   @DATD+00000076      FULLWORD INTEGER                     10220000
OPTPTR   EQU   @DATD+00000080      FULLWORD POINTER                     10230000
PGPTR    EQU   @DATD+00000084      FULLWORD POINTER                     10240000
         DS    00000088C                                                10250000
@TEMPS   DS    0F                                                       10260000
         DS    C                                                        10270000
@DATEND  EQU   *                                                        10280000
IEBDGCUP CSECT ,                                                        10290000
A2J7     EQU   @EL01                                                    10300000
         END   IEBDGCUP                                                 10310000
./  ADD  SSI=81910014,NAME=IEBDGMSG
*                                                                     * 00010000
*  TITLE 'IEBDGMSG'   DATA GENERATOR MESSAGE MODULE                   * 00020000
*                                                                     * 00030000
* STATUS CHANGE LEVEL  0                                              * 00040000
*                                                                     * 00050000
* FUNCTION: TO PRINT MESSAGES,CONTROL CARD IMAGES,FLAG MESSAGES WHILE * 00060000
*           KEEPING A CORRECT COUNT OF PAGES . LINECT FROM PARM INFO  * 00070000
*           HONORED.CHANNEL 12 IS TESTED FIRST AND A NEW HEADING      * 00080000
*           PRINTED WHEN NECESSARY.OPERATOR MUST HAVE CORRECT CARRIAGE* 00090000
*           CONTROL TAPE INSTALLED.                                   * 00100000
*                                                                     * 00110000
* ENTRY POINT IEBDGMSG THE CSECT NAME OF THIS MODULE .                * 00120000
* CONTROL RECEIVED AS A RESULT OF A LINK FROM IEBDG                   * 00130000
*                                                                     * 00140000
* INPUT:                                                              * 00150000
*        1. COMMON AREA ( A DYNAMIC AREA GOT BY THE IEBDG MODULE)     * 00160000
*        2. REG 5-REGISTER CONTAINING COMMON AREA ADDRESS             * 00170000
*        3. MS - A TWO BYTE AREA IN COMMON WHICH CONTAINS:            * 00180000
*              A- THE NUMBER INDICATING WHICH MESSAGE TO PRINT        * 00190000
*              B- THE NUMBER 30 INDICATES CONTROL CARD IMAGE WANTED   * 00200000
*                  WHICH IS ACCESSED AT LABEL-INBUFA1                 * 00210000
*        4. LINECT -A FOUR BYTE AREA IN COMMON WHICH CONTAINS THE     * 00220000
*                   BINARY LINE COUNT OF 58 AS A DEFAULT OR THE LINE  * 00230000
*                   COUNT WHICH COMES FROM PARM INFORMATION           * 00240000
*        5. PAGENO -A FOUR BYTE AREA IN COMMON WHICH CONTAINS THE     * 00250000
*                   EBCDIC PAGE NUMBER 1 AS A DEFAULT OR THE PAGE     * 00260000
*                   NUMBER FROM INVOCATION IF PRESENT.                * 00270000
*        6. SYSP  THE NAME BY WHICH THE OUTPUT DCB IS ACCESSED        * 00280000
*        7. OFLGS BIT 4 THE INDICATION OF THE DCB BEING OPEN          * 00290000
*        8. IFLGS BIT 3 CHANNEL NINE INDICATOR                        * 00300000
*        9. IFLGS BIT 4 CHANNEL TWELVE INDICATOR                      * 00310000
*        10.  FLAGSW BIT 1 FLAG INDICATOR                             * 00320000
*        11.  FLAGSW BIT 2 HEADING INDICATOR                          * 00330000
*                                                                     * 00340000
* EXITS- NORMAL RETURN TO THE CALLER (IEBDG)                          * 00350000
*                                                                     * 00360000
* TABLES-WORKAREAS                                                    * 00370000
*                                                                     * 00380000
*        MSGPTR -A TABLE OF 30 FOUR BYTE ENTRIES CONTAINING MESSAGE   * 00390000
*                ADDRESSES                                            * 00400000
*                                                                     * 00410000
*        MESSAGES-ALL 121 BYTES LONG CONTAINING STANDARD MESSAGE      * 00420000
*                 IDENTIFIERS-  AS  IEB701I                           * 00430000
*                                                                     * 00440000
*        Q - THE WORKAREA USED WHEN CONVERTING,PACKING,ETC WHICH IS   * 00450000
*           ACCESSED IN COMMON AREA                                   * 00460000
*                                                                    *  00470000
* ATTRIBUTES--REFRESHIBLE,REENTRANT,REUSEABLE                         * 00480000
*********************************************************************** 00490000
*    NEW MODULE, RELEASE 17.                                       DG0H 00500000
*CA1/A5                                          (ORG)@XA20990,@ZA33694 00510000
         LCLA  &T,&SPN                                            0003  00520000
.@001    ANOP                                                     0003  00530000
IEBDGMSG CSECT ,                                                  0003  00540000
         ST    @E,12(0,@D)                                        0003  00550000
         STM   @0,@8,20(@D)                                       0003  00560000
         STM   @A,@C,60(@D)                                       0003  00570000
         BALR  @B,0                                               0003  00580000
@PSTART  DS    0H                                                 0003  00590000
         USING @PSTART+00000,@B                                   0003  00600000
         L     @0,@SIZ001                                         0003  00610000
         GETMAIN  R,LV=(0)                                        0003  00620000
         LR    @C,@1                                              0003  00630000
         USING @DATD+00000,@C                                     0003  00640000
         LM    @0,@1,20(@D)                                       0003  00650000
         XC    @TEMPS(@L),@TEMPS                                  0003  00660000
         ST    @D,@SAV001+4                                       0003  00670000
         LA    @F,@SAV001                                         0003  00680000
         ST    @F,8(0,@D)                                         0003  00690000
         LR    @D,@F                                              0003  00700000
*  GEN ( EJECT);                                                        00710000
          EJECT                                                         00720000
         DS    0H                                                       00730000
*  /******************************************************************* 00740000
*  /**                                                                * 00750000
*  /**                  ENTRY IS AT THIS POINT                        * 00760000
*  /**                                                                * 00770000
*  /******************************************************************* 00780000
*  GEN;                                                     /*@ZA33694* 00790000
         B     MODULEVL                                    /*@ZA33694*/ 00800000
         DC    C'IEBDGMSG-OZ33694'                         /*@ZA33694*/ 00810000
MODULEVL DS    0H                                          /*@ZA33694*/ 00820000
         DS    0H                                                       00830000
*  /******************************************************************* 00840000
*  /**                                                                * 00850000
*  /**    IF THE DATA GENERATOR OUTPUT DCB IS NOT OPEN,CONTROL RETURNS* 00860000
*  /** TO THE BASE MODULE.                                            * 00870000
*  /**                                                                * 00880000
*  /******************************************************************* 00890000
*               DCBPTR = ADDR(SYSP) /** PICK UP SYSP ADDR **/;          00900000
         LA    @F,20(0,@5)                                        0067  00910000
         ST    @F,300(0,@5)                                       0067  00920000
*         IF OFLGS(4) = '1'B THEN GO TO MSG01 /**BR IF DCB OPEN **/;    00930000
         L     @1,300(0,@5)                                       0068  00940000
         TM    48(@1),B'00010000'                                 0068  00950000
         BC    01,MSG01                                           0069  00960000
*           RETURN        /* IF NOT RETURN*/;                           00970000
         BC    15,@EL01                                           0070  00980000
*  /******************************************************************* 00990000
*  /**                                                                * 01000000
*  /**    THE COMMUNICATION POINTER MS WILL CONTAIN THE NUMBER OF THE * 01010000
*  /** MESSAGE TO BE PRINTED.THE HEADING MSG IS INDICATED FROM TWO    * 01020000
*  /** PLACES 1. THE BASE MODULE WHEN IT IS FIRST ENTERED AS MS = 1   * 01030000
*  /**        2. THIS MODULE AFTER A PAGE IS FILLED AS INDICATED BY   * 01040000
*  /**           LINE COUNT OR CHANNEL 12.                            * 01050000
*  /** WHEN MS = 30 WE PRINT A CARD IMAGE FROM THE INPUT.             * 01060000
*  /** ANY OTHER NUMBER,THE MESSAGE IS TAKEN FROM THIS MODULE.MESSAGES* 01070000
*  /** ARE CARRIED AS CONSTANTS OF 121 BYTES LONG.                    * 01080000
*  /**    *****                                                       * 01090000
*  /**    *****                                                       * 01100000
*  /**          MESSAGE 27 MAY NEVER BE CHANGED.THIS IS USED FOR ERROR* 01110000
*  /**          FLAGGING.                                             * 01120000
*  /**    *****                                                       * 01130000
*  /**    *****                                                       * 01140000
*  /**                                                                * 01150000
*  /******************************************************************* 01160000
*  MSG01:;                                                              01170000
*  /******************************************************************* 01180000
*  /**                                                                * 01190000
*  /**    WHEN A HEADING MESSAGE IS INDICATED A BRANCH IS TAKEN TO    * 01200000
*  /** MSG03 TO PROCESS THE MESSAGE                                   * 01210000
*  /**                                                                * 01220000
*  /******************************************************************* 01230000
*         IF MS = 1 THEN GO TO MSG03 /*IF HDNG MSG BR TO SET PAGENO*/;  01240000
MSG01    LA    @F,1                                               0072  01250000
         CH    @F,406(0,@5)                                       0072  01260000
         BC    08,MSG03                                           0073  01270000
*         PARM = SYNAD;        /**SAVE DCBIOBL AND SYNAD IN PARM**/     01280000
         MVC   12(4,@5),SYNAD                                     0074  01290000
*         SYNAD = ADDR(ERRORS); /**PLACE MSG SYNAD ADDRESS IN DCB**/    01300000
         LA    @F,ERRORS                                          0075  01310000
         ST    @F,SYNAD                                           0075  01320000
*  /******************************************************************* 01330000
*  /**                                                                * 01340000
*  /**    THIS SECTION TESTS FOR AN INDICATION OF CHANNEL 12 BEING ON.* 01350000
*  /** A BRANCH IS TAKEN TO MSG03 FOR PRINTING OF A HEADER MSG IF ON. * 01360000
*  /**                                                                * 01370000
*  /******************************************************************* 01380000
*               IFLGS(3) = '0'B /*TURNS OFF CH 9 INDICATOR*/;           01390000
         L     @1,300(0,@5)                                       0076  01400000
         NI    44(@1),B'11011111'                                 0076  01410000
*  GEN ( EJECT);                                                        01420000
          EJECT                                                         01430000
         DS    0H                                                       01440000
*         IF IFLGS(4) = '1'B THEN DO /*IS CH 12 ON */;                  01450000
         L     @1,300(0,@5)                                       0078  01460000
         TM    44(@1),B'00010000'                                 0078  01470000
         BC    12,@9FF                                            0078  01480000
*               IFLGS(4) = '0'B /*IF SO TURN OFF CH 12*/;               01490000
         NI    44(@1),B'11101111'                                 0080  01500000
*               GO TO MSG03; /* BRANCH */                               01510000
         BC    15,MSG03                                           0081  01520000
*         END;                                                          01530000
*  /******************************************************************* 01540000
*  /**                                                                * 01550000
*  /**    IF PAGE IS FULL AS INDICATED BY LINECT AND LINECTR BEING    * 01560000
*  /** EQUAL A BRANCH IS TAKEN TO MSG03 TO PRINT A HEADER             * 01570000
*  /**                                                                * 01580000
*  /******************************************************************* 01590000
*         IF LINECT = LINECTR THEN GO TO MSG03 /* IS LINECTR AT MAX*/;  01600000
@9FF     L     @F,8(0,@5)                                         0083  01610000
         C     @F,4(0,@5)                                         0083  01620000
         BC    08,MSG03                                           0084  01630000
*  /******************************************************************* 01640000
*  /**                                                                * 01650000
*  /**    THIS SECTION BRANCHES TO MSG04 IF PRINTING OF A CONTROL     * 01660000
*  /** CARD IMAGE IS DESIRED.                                         * 01670000
*  /**                                                                * 01680000
*  /******************************************************************* 01690000
*  MSG02:;                                                              01700000
*         IF MS = 30 THEN GO TO MSG04 /*BR TO PICK UP ADDR IF CNTRL*/;  01710000
MSG02    LA    @F,30                                              0086  01720000
         CH    @F,406(0,@5)                                       0086  01730000
         BC    08,MSG04                                           0087  01740000
*  /******************************************************************* 01750000
*  /**                                                                * 01760000
*  /**    THIS SECTION BRANCHES TO MSG05 IF ERROR FLAGGING IS DESIRED * 01770000
*  /** IF ERROR FLAGGING IS NOT INDICATED BY FIRST BIT IN FLAG SWITCH * 01780000
*  /** A MESSAGE IS INDICATED.THE MESSAGE ADDRESS IS THEN PICKED UP   * 01790000
*  /** AND A BRANCH TAKEN TO MSG06 TO 'PUT'THE MESSAGE ON THE SYSP DCB* 01800000
*  /**                                                                * 01810000
*  /******************************************************************* 01820000
*         IF FLAGSW(1) = '1'B THEN GO TO MSG05 /*IS FLAGSW ON*/;        01830000
         TM    566(@5),B'10000000'                                0088  01840000
         BC    01,MSG05                                           0089  01850000
*               R0 = MSGPTR(MS) /* PICK UP MSG ADDRESS*/;               01860000
         LH    @1,406(0,@5)                                       0090  01870000
         SLA   @1,2                                               0090  01880000
         L     @0,MSGPTR-4(@1)                                    0090  01890000
*  /******************************************************************* 01900000
*  /** THIS SECTION WILL CHECK FOR COMPLETION CODES IF MESSAGE NUMBER * 01910000
*  /** 29 IS INDICATED. THE WORD SUCCESSFUL WILL BE BLANKED OUT FOR   * 01920000
*  /** CODES OTHER THAN ZERO AND THE PROPER CODE PLACED WITHIN THE    * 01930000
*  /** MESSAGE.CONTROL IS THEN TRANSFERRED TO LABEL MSG06 TO INITIATE * 01940000
*  /** PRINTING OF THE MESSAGE                                        * 01950000
*  /******************************************************************* 01960000
*         IF MS = 29 THEN DO   /** IF MSG 29 THEN DO BELOW**/;          01970000
         LA    @F,29                                              0091  01980000
         CH    @F,406(0,@5)                                       0091  01990000
         BC    07,@9FE                                            0091  02000000
*         IF CONCODE = '0000'X THEN GO TO MSG06 /** BRANCH IF 0 CODE ** 02010000
         L     @F,@X3                                             0093  02020000
         CH    @F,306(0,@5)                                       0093  02030000
         BC    08,MSG06                                           0094  02040000
*         R0 = ADDR(MESSAGE);                                           02050000
         LA    @0,668(0,@5)                                       0095  02060000
*         MESSAGE = M29;                                                02070000
         MVC   668(121,@5),M29                                    0096  02080000
*         MESSAGE(55:66) = ' ';                                         02090000
         MVI   722(@5),C' '                                       0097  02100000
         MVC   723(11,@5),722(@5)                                 0097  02110000
*         IF CONCODE = '000C'X THEN                                     02120000
         L     @F,@X5                                             0098  02130000
         CH    @F,306(0,@5)                                       0098  02140000
         BC    07,@9FD                                            0098  02150000
*         DO;                                                           02160000
*         MESSAGE(97:102) = 'TWELVE';                                   02170000
         MVC   764(6,@5),@C6                                      0100  02180000
*         GO TO MSG06          /** BRANCH TO PRINT MESSAGE**/;          02190000
         BC    15,MSG06                                           0101  02200000
*         END;                                                          02210000
*         IF CONCODE = '0004'X THEN DO /**DO BELOW IF FOUR**/;          02220000
@9FD     L     @F,@X7                                             0103  02230000
         CH    @F,306(0,@5)                                       0103  02240000
         BC    07,@9FC                                            0103  02250000
*         MESSAGE(97:100) = 'FOUR';                                     02260000
         MVC   764(4,@5),@C8                                      0105  02270000
*               GO TO MSG06    /** BRANCH TO PRINT MESSAGE **/;         02280000
         BC    15,MSG06                                           0106  02290000
*                                   END;                                02300000
*         IF CONCODE = '0008'X THEN DO /** IF 8 DO BELOW**/;            02310000
@9FC     L     @F,@X9                                             0108  02320000
         CH    @F,306(0,@5)                                       0108  02330000
         BC    07,@9FB                                            0108  02340000
*         MESSAGE(97:101) = 'EIGHT';                                    02350000
         MVC   764(5,@5),@C10                                     0110  02360000
*               GO TO MSG06    /** BRANCH TO PRINT MESSAGE**/;          02370000
         BC    15,MSG06                                           0111  02380000
*                                    END;                               02390000
*         IF CONCODE = '0010'X THEN DO /** IF 16 DO BELOW**/;           02400000
@9FB     L     @F,@X11                                            0113  02410000
         CH    @F,306(0,@5)                                       0113  02420000
         BC    07,@9FA                                            0113  02430000
*         MESSAGE(97:103) = 'SIXTEEN';                                  02440000
         MVC   764(7,@5),@C12                                     0115  02450000
*                                  END;                                 02460000
*                         END;                                          02470000
*               GO TO MSG06 /* BRANCH TO PICK UP DCB ADDRESS*/;         02480000
         BC    15,MSG06                                           0118  02490000
*  /******************************************************************* 02500000
*  /**    THIS SECTION IS ENTERED WHEN A HEADING IS DESIRED.THE       * 02510000
*  /** LINECTR IS RESTORED TO ZERO AND THE INTERNAL HEADING SWITCH,   * 02520000
*  /** SECOND BIT OF FLAG SWITCH,IS TURNED ON.THE HEADING MESSAGE IS  * 02530000
*  /** THEN MOVED INTO THE COMMUNICATION AREA(ADDRESSED BY REG5) FOR  * 02540000
*  /** PURPOSES OF REENTRANTCY.AFTER THE PAGENO IS MOVED INTO THE     * 02550000
*  /** MESSAGE,THE MSG ADDRESS IS PICKED UP AND A BRANCH TAKEN TO     * 02560000
*  /** MSG06 TO PUT THE MESSAGE.                                      * 02570000
*  /**                                                                * 02580000
*  /******************************************************************* 02590000
*  GEN ( EJECT);                                                        02600000
          EJECT                                                         02610000
         DS    0H                                                       02620000
*  MSG03:;                                                              02630000
*               LINECTR = 0     /* RESTORE COUNT TO ZERO */;            02640000
MSG03    SR    @F,@F                                              0121  02650000
         ST    @F,8(0,@5)                                         0121  02660000
*               FLAGSW(2) = '1'B /* SET HEADING SW */;                  02670000
         OI    566(@5),B'01000000'                                0122  02680000
*               R1 = ADDR(M1) /*PICK UP HDNG ADDRESS*/;                 02690000
         LA    @1,M1                                              0123  02700000
*               /** MOVE HEADING MESSAGE TO REENTRANT AREA**/           02710000
*         GEN ( MVC MESSAGE(121,R5),0(R1));                             02720000
          MVC MESSAGE(121,R5),0(R1)                                     02730000
         DS    0H                                                       02740000
*         R1 = ADDR(MESSAGE)   /** PICK UP HEADER LINE ADDRESS**/;      02750000
         LA    @1,668(0,@5)                                       0125  02760000
*            /* MOVE PAGE NO TO HEADING MESSAGE*/                       02770000
*         GEN ( MVC 112(4,R1),PAGENO(R5));                              02780000
          MVC 112(4,R1),PAGENO(R5)                                      02790000
         DS    0H                                                       02800000
*         R0 = ADDR(MESSAGE)   /** PICK UP HEADER LINE ADDRESS**/;      02810000
         LA    @0,668(0,@5)                                       0127  02820000
*               GO TO MSG06       /* BRANCH TO PICK UP DCB ADDRESS */;  02830000
         BC    15,MSG06                                           0128  02840000
*  /******************************************************************* 02850000
*  /**                                                                * 02860000
*  /**    THIS SECTION PICKS UP THE ADDRESS OF THE CONTROL CARD IMAGE * 02870000
*  /** FROM THE REENTRANT COMMUNICATION AREA AND BRANCHES TO MSG06 TO * 02880000
*  /** PUT THE CARD IMAGE UPON SYSP.                                  * 02890000
*  /**                                                                * 02900000
*  /******************************************************************* 02910000
*  MSG04:;                                                              02920000
*               R0 = ADDR(INBUFA1)  /*PICK UP CONTROL CARD ADDRESS*/;   02930000
MSG04    LA    @0,408(0,@5)                                       0130  02940000
*               GO TO MSG06        /* BR TO PICK UP DCB ADDRESS*/;      02950000
         BC    15,MSG06                                           0131  02960000
*  GEN ( EJECT);                                                        02970000
          EJECT                                                         02980000
         DS    0H                                                       02990000
*  /******************************************************************* 03000000
*  /**                                                                * 03010000
*  /**    THIS SECTION PICKS UP THE FLAG MESSAGE ADDRESS AND MOVES    * 03020000
*  /** THE MESSAGE TO THE COMMUNICATION AREA.AT THIS TIME REG 9 IS    * 03030000
*  /** POINTING AT A SPOT WITHIN THE CARD IMAGE.REG 9 HAS BEEN USED AS* 03040000
*  /** A SCAN POINTER BY SOME OTHER MODULE.THIS OTHER MODULE HAS      * 03050000
*  /** DETECTED AN ERROR OF SOME KIND AND HAS INDICATED A DESIRE FOR  * 03060000
*  /** ERROR FLAGGING BY TURNING ON THE FIRST BIT OF THE FLAG SWITCH. * 03070000
*  /** THE POSITION OF THE ERROR FLAG IS DETERMINED BY RESOLVING THE  * 03080000
*  /** POSITION OF REG 9 IN RELATION TO THE START OF THE CONTROL CARD * 03090000
*  /** IMAGE.ONCE DETERMINED THE WORD -- ERROR -- IS PLACED IN THE    * 03100000
*  /** MESSAGE AND BRANCH POINT MSG06 IS ENTERED FOR OUTPUTING THE    * 03110000
*  /** MESSAGE.THE 'E' OF THE WORD ERROR WILL LINE UP EXACTLY UNDER   * 03120000
*  /** THE ERROR IN THE CONTROL CARD AS THE CONTROL CARD IMAGE WAS    * 03130000
*  /** JUST PLACED UPON THE OUTPUT DATA SET.                          * 03140000
*  /**                                                                * 03150000
*  /******************************************************************* 03160000
*  MSG05:;                                                              03170000
*               R1 = MSGPTR(27)     /*PICK UP FLAG MSG ADDRESS*/;       03180000
MSG05    L     @1,MSGPTR+104                                      0134  03190000
*  GEN ( MVC MESSAGE(121,R5),0(R1));                                    03200000
          MVC MESSAGE(121,R5),0(R1)                                     03210000
         DS    0H                                                       03220000
*         R1 = ADDR(MESSAGE)   /** PICK UP HEADER LINE ADDRESS**/;      03230000
         LA    @1,668(0,@5)                                       0136  03240000
*               R8 = R9 - ADDR(INBUFA) /* RESOLVE OFFSET IN INBUF*/;    03250000
         LA    @F,418(0,@5)                                       0137  03260000
         LCR   @F,@F                                              0137  03270000
         AR    @F,@9                                              0137  03280000
         LR    @8,@F                                              0137  03290000
*               R1 = R1 + R8 + 10 /* RESOLVE ADDRESS IN MESSAGE*/;      03300000
         LA    @F,10                                              0138  03310000
         AR    @F,@8                                              0138  03320000
         AR    @1,@F                                              0138  03330000
*         R1 -> COMMON(1:5) = 'ERROR' /* PLACE FLAG IN MESSAGE*/;       03340000
         MVC   0(5,@1),@C13                                       0139  03350000
*         R0 = ADDR(MESSAGE)   /** PICK UP HEADER LINE ADDRESS**/;      03360000
         LA    @0,668(0,@5)                                       0140  03370000
*  GEN ( EJECT);                                                        03380000
          EJECT                                                         03390000
         DS    0H                                                       03400000
*  /******************************************************************* 03410000
*  /**                                                                * 03420000
*  /**    THIS SECTION WILL ISSUE THE DATA MANAGEMENT MACRO 'PUT'.    * 03430000
*  /** UPON ENTRY REG 0 CONTAINS THE ADDRESS OF THE WORKAREA. REG 1   * 03440000
*  /** WILL BE LOADED WITH THE ADDRESS OF THE SYSP DCB.               * 03450000
*  /**                                                                * 03460000
*  /******************************************************************* 03470000
*  MSG06:;                                                              03480000
*               R1 = ADDR(SYSP)    /* PICK UP DCB ADDRESS*/;            03490000
MSG06    LA    @1,20(0,@5)                                        0143  03500000
*         GEN ( PUT (1),(0));                                           03510000
          PUT (1),(0)                                                   03520000
         DS    0H                                                       03530000
*  /******************************************************************* 03540000
*  /**                                                                * 03550000
*  /**    THE LINECTR IS NOW INCREMENTED BY ONE.IF A HEADING WAS JUST * 03560000
*  /** 'PUT' A BRANCH IS TAKEN TO MSG07 FOR FURTHER PROCESSING.IF AN  * 03570000
*  /** ERROR FLAG WAS JUST 'PUT' A BRANCH IS TAKEN TO MSG08 FOR       * 03580000
*  /** FURTHER PROCESSING,OTHERWISE CONTROL RETURN TO THE BASE MODULE * 03590000
*  /**                                                                * 03600000
*  /******************************************************************* 03610000
*               LINECTR = LINECTR+ 1 /* ADD 1 TO LINE COUNTER*/;        03620000
         LA    @F,1                                               0145  03630000
         A     @F,8(0,@5)                                         0145  03640000
         ST    @F,8(0,@5)                                         0145  03650000
*         IF FLAGSW(2) = '1'B THEN GO TO MSG07 /*BR IF HDNG SW ON*/;    03660000
         TM    566(@5),B'01000000'                                0146  03670000
         BC    01,MSG07                                           0147  03680000
*         IF FLAGSW(1) = '1'B THEN GO TO MSG08 /*IF FLAG ON BRANCH*/;   03690000
         TM    566(@5),B'10000000'                                0148  03700000
         BC    01,MSG08                                           0149  03710000
*         SYNAD = PARM;        /**RESTORE DCBIOBL FOR CLOSE**/          03720000
         MVC   SYNAD(4),12(@5)                                    0150  03730000
*               RETURN;                                                 03740000
         BC    15,@EL01                                           0151  03750000
*  GEN ( EJECT);                                                        03760000
          EJECT                                                         03770000
         DS    0H                                                       03780000
*  /******************************************************************* 03790000
*  /**                                                                * 03800000
*  /**    THIS SECTION IS ENTERED AFTER A HEADING HAS JUST BEEN 'PUT'.* 03810000
*  /** THE PAGENO IN THE COMMUNICATION AREA MUST BE INCREMENTED BY ONE* 03820000
*  /** THIS IS DONE BY PACKING THE NUMBER,CONVERTING TO BINARY,ADDING * 03830000
*  /** ONE,CONVERTING TO DECIMAL,CHANGING THE SIGN TO A PRINTIBLE     * 03840000
*  /** CHARACTER AND UNPACKING THE NUMBER BACK TO 'PAGENO'.IF A       * 03850000
*  /** HEADING ONLY WAS PRINTED,ONLY CALLED ONCE AS MS = 1,CONTROL    * 03860000
*  /** RETURNS TO THE BASE MODULE,OTHERWISE A BRANCH IS TAKEN TO MSG02* 03870000
*  /** TO PRINT A CARD IMAGE OR ERROR FLAG.                           * 03880000
*  /**                                                                * 03890000
*  /******************************************************************* 03900000
*  MSG07:;                                                              03910000
*               FLAGSW(2) = '0'B    /* TURN OFF HDNG SW */;             03920000
MSG07    NI    566(@5),B'10111111'                                0154  03930000
*           /* THIS SECTION WILL INCREMENT PAGE NO BY ONE */            03940000
*         GEN ( PACK Q(8,R5),PAGENO(4,R5));                             03950000
          PACK Q(8,R5),PAGENO(4,R5)                                     03960000
         DS    0H                                                       03970000
*         GEN ( CVB 6,Q(0,R5));                                         03980000
          CVB 6,Q(0,R5)                                                 03990000
         DS    0H                                                       04000000
*         GEN ( LA 6,1(0,6));                                           04010000
          LA 6,1(0,6)                                                   04020000
         DS    0H                                                       04030000
*         GEN ( CVD 6,Q(0,R5));                                         04040000
          CVD 6,Q(0,R5)                                                 04050000
         DS    0H                                                       04060000
*               QSIGN = QSIGN | '0F'X /* CHANGE SIGN TO PRINTABLE CHAR* 04070000
         OI    223(@5),X'0F'                                      0159  04080000
*         GEN ( UNPK PAGENO(4,R5),Q(8,R5));                             04090000
          UNPK PAGENO(4,R5),Q(8,R5)                                     04100000
         DS    0H                                                       04110000
*         IF MS = 1 THEN DO /* IF HDNG MSG BRANCH TO RETURN */;         04120000
         LA    @F,1                                               0161  04130000
         CH    @F,406(0,@5)                                       0161  04140000
*         RETURN;                                                       04150000
         BC    08,@EL01                                           0163  04160000
*         END;                                                          04170000
*               GO TO MSG02 /* BRANCH TO CONTINUE*/;                    04180000
         BC    15,MSG02                                           0165  04190000
*  GEN ( EJECT);                                                        04200000
          EJECT                                                         04210000
         DS    0H                                                       04220000
*  /******************************************************************* 04230000
*  /**                                                                * 04240000
*  /**    THIS SECTION WILL TURN OFF THE ERROR FLAG INDICATOR,BIT ONE * 04250000
*  /** OF FLAG SWITCH,AND BRANCH TO MSG01 FOR FURTHER PROCESSING      * 04260000
*  /**                                                                * 04270000
*  /******************************************************************* 04280000
*  MSG08:;                                                              04290000
*               FLAGSW(1) = '0'B   /* TURN OFF FLAG SW*/;               04300000
MSG08    NI    566(@5),B'01111111'                                0168  04310000
*               GO TO MSG01     /* BR TO TEST FOR CHANNEL 12 */;        04320000
         BC    15,MSG01                                           0169  04330000
*  ERRORS:;                                                             04340000
*         FLUSHSW1 = ON; /**TURN ON FLUSH CAUSES BASE TO GO TO CLEANUP* 04350000
ERRORS   MVC   573(1,@5),ON                                       0171  04360000
*         SYNAD = PARM;        /**RESTORE DCBIOBL FOR CLOSE**/          04370000
         MVC   SYNAD(4),12(@5)                                    0172  04380000
*         RETURN;                                                       04390000
*  END IEBDGMSG;                                                        04400000
@EL01    L     @D,4(0,@D)                                         0174  04410000
         LR    @1,@C                                              0174  04420000
         L     @0,@SIZ001                                         0174  04430000
         FREEMAIN R,LV=(0),A=(1)                                  0174  04440000
         L     @E,12(0,@D)                                        0174  04450000
         LM    @0,@8,20(@D)                                       0174  04460000
         LM    @A,@C,60(@D)                                       0174  04470000
         BCR   15,@E                                              0174  04480000
@DATA1   EQU   *                                                        04490000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           04500000
@1       EQU   01                                                       04510000
@2       EQU   02                                                       04520000
@3       EQU   03                                                       04530000
@4       EQU   04                                                       04540000
@5       EQU   05                                                       04550000
@6       EQU   06                                                       04560000
@7       EQU   07                                                       04570000
@8       EQU   08                                                       04580000
@9       EQU   09                                                       04590000
@A       EQU   10                                                       04600000
@B       EQU   11                                                       04610000
@C       EQU   12                                                       04620000
@D       EQU   13                                                       04630000
@E       EQU   14                                                       04640000
@F       EQU   15                                                       04650000
         DS    0F                                                       04660000
@SIZ001  DC    AL1(&SPN)                                                04670000
         DC    AL3(@DATEND-@DATD)                                       04680000
         DS    0F                                                       04690000
@X3      DC    X'00000000'                                              04700000
@X5      DC    X'0000000C'                                              04710000
@X7      DC    X'00000004'                                              04720000
@C8      DC    C'FOUR'                                                  04730000
@X9      DC    X'00000008'                                              04740000
@X11     DC    X'00000010'                                              04750000
@C6      DC    C'TWELVE'                                                04760000
@C10     DC    C'EIGHT'                                                 04770000
@C12     DC    C'SIXTEEN'                                               04780000
@C13     DC    C'ERROR'                                                 04790000
         DS    0D                                                       04800000
@DATA    EQU   *                                                        04810000
R14      EQU   00000014            FULLWORD INTEGER REGISTER            04820000
R15      EQU   00000015            FULLWORD INTEGER REGISTER            04830000
R0       EQU   00000000            FULLWORD INTEGER REGISTER            04840000
R1       EQU   00000001            FULLWORD POINTER REGISTER            04850000
R2       EQU   00000002            FULLWORD INTEGER REGISTER            04860000
R3       EQU   00000003            FULLWORD INTEGER REGISTER            04870000
R4       EQU   00000004            FULLWORD INTEGER REGISTER            04880000
R5       EQU   00000005            FULLWORD POINTER REGISTER            04890000
R6       EQU   00000006            FULLWORD POINTER REGISTER            04900000
R7       EQU   00000007            FULLWORD POINTER REGISTER            04910000
R8       EQU   00000008            FULLWORD POINTER REGISTER            04920000
R9       EQU   00000009            FULLWORD POINTER REGISTER            04930000
COMMON   EQU   00000000            308 BYTE(S) ON DWORD                 04940000
PAGENO   EQU   COMMON+00000000     4 BYTE(S)                            04950000
LINECT   EQU   COMMON+00000004     FULLWORD INTEGER                     04960000
LINECTR  EQU   COMMON+00000008     FULLWORD INTEGER                     04970000
PARM     EQU   COMMON+00000012     FULLWORD POINTER                     04980000
REPEATNO EQU   COMMON+00000016     HALFWORD INTEGER                     04990000
CREATENO EQU   COMMON+00000018     HALFWORD INTEGER                     05000000
SYSP     EQU   COMMON+00000020     96 BYTE(S)                           05010000
SYSI     EQU   COMMON+00000116     96 BYTE(S)                           05020000
Q        EQU   COMMON+00000216     16 BYTE(S) ON DWORD                  05030000
QFILL    EQU   COMMON+00000216     7 BYTE(S)                            05040000
QSIGN    EQU   COMMON+00000223     8 BIT(S)                             05050000
QFILL1   EQU   COMMON+00000224     7 BYTE(S)                            05060000
QSIGN1   EQU   COMMON+00000231     8 BIT(S)                             05070000
COUNTER  EQU   COMMON+00000232     FULLWORD POINTER                     05080000
OPENLIST EQU   COMMON+00000236     8 BYTE(S)                            05090000
OPTBYTE1 EQU   COMMON+00000236     4 BYTE(S)                            05100000
OPTBYTE2 EQU   COMMON+00000240     4 BYTE(S)                            05110000
EXLST    EQU   COMMON+00000244     24 BYTE(S) ON WORD                   05120000
INHDR    EQU   COMMON+00000244     1 BYTE(S)                            05130000
INHDR1   EQU   COMMON+00000245     3  BYTE  POINTER ON WORD+1           05140000
OUTHDR   EQU   COMMON+00000248     1 BYTE(S)                            05150000
OUTHDR1  EQU   COMMON+00000249     3  BYTE  POINTER ON WORD+1           05160000
INTRL    EQU   COMMON+00000252     1 BYTE(S)                            05170000
INTRL1   EQU   COMMON+00000253     3  BYTE  POINTER ON WORD+1           05180000
OUTTRL   EQU   COMMON+00000256     1 BYTE(S)                            05190000
OUTTRL1  EQU   COMMON+00000257     3  BYTE  POINTER ON WORD+1           05200000
EXITDCB  EQU   COMMON+00000260     1 BYTE(S)                            05210000
EXITDCB1 EQU   COMMON+00000261     3  BYTE  POINTER ON WORD+1           05220000
TOTAL    EQU   COMMON+00000264     1 BYTE(S)                            05230000
TOTAL1   EQU   COMMON+00000265     3  BYTE  POINTER ON WORD+1           05240000
EXLST1   EQU   COMMON+00000268     4 BYTE(S) ON WORD                    05250000
EDCB1    EQU   COMMON+00000268     1 BYTE(S)                            05260000
EDCB2    EQU   COMMON+00000269     3  BYTE  POINTER ON WORD+1           05270000
EXLST2   EQU   COMMON+00000272     4 BYTE(S) ON WORD                    05280000
EDCB3    EQU   COMMON+00000272     1 BYTE(S)                            05290000
EDCB4    EQU   COMMON+00000273     3  BYTE  POINTER ON WORD+1           05300000
EXLST3   EQU   COMMON+00000276     4 BYTE(S) ON WORD                    05310000
EDCB5    EQU   COMMON+00000276     1 BYTE(S)                            05320000
EDCB6    EQU   COMMON+00000277     3  BYTE  POINTER ON WORD+1           05330000
DLRECL   EQU   COMMON+00000280     HALFWORD INTEGER                     05340000
DBLKSI   EQU   COMMON+00000282     HALFWORD INTEGER                     05350000
DRECFM   EQU   COMMON+00000284     8 BIT(S)                             05360000
LEFTOVER EQU   COMMON+00000288     FULLWORD INTEGER                     05370000
OFFSET   EQU   COMMON+00000292     FULLWORD POINTER                     05380000
LPTR     EQU   COMMON+00000296     FULLWORD POINTER                     05390000
DCBPTR   EQU   COMMON+00000300     FULLWORD POINTER                     05400000
DUMMY    EQU   COMMON+00000304     FULLWORD POINTER                     05410000
COMMON1  EQU   00000304            236 BYTE(S) ON WORD                  05420000
SAVEMS   EQU   COMMON1+00000000    HALFWORD INTEGER                     05430000
CONCODE  EQU   COMMON1+00000002    HALFWORD INTEGER                     05440000
OUTREC   EQU   COMMON1+00000004    FULLWORD POINTER                     05450000
CRTABPT  EQU   COMMON1+00000008    FULLWORD POINTER                     05460000
CURCRTE  EQU   COMMON1+00000012    FULLWORD POINTER                     05470000
CURCRGM  EQU   COMMON1+00000016    FULLWORD POINTER                     05480000
CURPIC   EQU   COMMON1+00000020    FULLWORD POINTER                     05490000
PICCTR   EQU   COMMON1+00000024    FULLWORD INTEGER                     05500000
EXITTAB  EQU   COMMON1+00000028    FULLWORD POINTER                     05510000
EXITGM   EQU   COMMON1+00000032    FULLWORD POINTER                     05520000
CUREXIT  EQU   COMMON1+00000036    FULLWORD POINTER                     05530000
DELIM    EQU   COMMON1+00000040    4 BYTE(S)                            05540000
RECREM   EQU   COMMON1+00000044    FULLWORD INTEGER                     05550000
CURFD    EQU   COMMON1+00000048    FULLWORD POINTER                     05560000
CUROUT   EQU   COMMON1+00000052    FULLWORD POINTER                     05570000
SAVE14   EQU   COMMON1+00000056    FULLWORD POINTER                     05580000
GETMLIST EQU   COMMON1+00000060    16 BYTE(S) ON WORD                   05590000
GLENGTH  EQU   COMMON1+00000060    FULLWORD INTEGER                     05600000
ADRLIST  EQU   COMMON1+00000064    FULLWORD POINTER                     05610000
IND      EQU   COMMON1+00000068    4 BYTE(S)                            05620000
GCODE    EQU   COMMON1+00000068    1 BYTE(S)                            05630000
SPOOL    EQU   COMMON1+00000069    1 BYTE(S)                            05640000
CCODE    EQU   COMMON1+00000070    2 BYTE(S)                            05650000
GCADDR   EQU   COMMON1+00000072    FULLWORD POINTER                     05660000
FIRSTGMO EQU   COMMON1+00000076    FULLWORD POINTER                     05670000
CURRGMO  EQU   COMMON1+00000080    FULLWORD POINTER                     05680000
LASTGMO  EQU   COMMON1+00000084    FULLWORD POINTER                     05690000
FIRSTGMI EQU   COMMON1+00000088    FULLWORD POINTER                     05700000
CURRGMI  EQU   COMMON1+00000092    FULLWORD POINTER                     05710000
LASTGMI  EQU   COMMON1+00000096    FULLWORD POINTER                     05720000
CONDCODE EQU   COMMON1+00000100    HALFWORD INTEGER                     05730000
MS       EQU   COMMON1+00000102    HALFWORD INTEGER                     05740000
INBUFA1  EQU   COMMON1+00000104    121 BYTE(S)                          05750000
INFILL   EQU   COMMON1+00000104    10 BYTE(S)                           05760000
INBUFA   EQU   COMMON1+00000114    111 BYTE(S)                          05770000
DDPTR    EQU   COMMON1+00000228    FULLWORD POINTER                     05780000
DUMMY1   EQU   COMMON1+00000232    FULLWORD POINTER                     05790000
COMMON2  EQU   00000536            76 BYTE(S) ON WORD                   05800000
SWITCH   EQU   COMMON2+00000000    52 BYTE(S)                           05810000
FDCSW    EQU   COMMON2+00000000    1 BYTE(S)                            05820000
FDNAMESW EQU   COMMON2+00000001    1 BYTE(S)                            05830000
FDPCSW   EQU   COMMON2+00000002    1 BYTE(S)                            05840000
FDFMTSW  EQU   COMMON2+00000003    1 BYTE(S)                            05850000
FDPLSW   EQU   COMMON2+00000004    1 BYTE(S)                            05860000
RANGESW  EQU   COMMON2+00000005    1 BYTE(S)                            05870000
FILLSW   EQU   COMMON2+00000006    1 BYTE(S)                            05880000
REPSW    EQU   COMMON2+00000007    1 BYTE(S)                            05890000
INDEXSW  EQU   COMMON2+00000008    1 BYTE(S)                            05900000
INDNMSW  EQU   COMMON2+00000009    1 BYTE(S)                            05910000
BQUOTESW EQU   COMMON2+00000010    1 BYTE(S)                            05920000
PQUOTESW EQU   COMMON2+00000011    1 BYTE(S)                            05930000
EQUOTESW EQU   COMMON2+00000012    1 BYTE(S)                            05940000
FDSW     EQU   COMMON2+00000013    1 BYTE(S)                            05950000
DSDSW    EQU   COMMON2+00000014    1 BYTE(S)                            05960000
NOGOSW   EQU   COMMON2+00000015    1 BYTE(S)                            05970000
CREATESW EQU   COMMON2+00000016    1 BYTE(S)                            05980000
DSDCSW   EQU   COMMON2+00000017    1 BYTE(S)                            05990000
CRCSW    EQU   COMMON2+00000018    1 BYTE(S)                            06000000
EXITSW   EQU   COMMON2+00000019    1 BYTE(S)                            06010000
EODSTOP  EQU   COMMON2+00000020    1 BYTE(S)                            06020000
DSDNULSW EQU   COMMON2+00000021    1 BYTE(S)                            06030000
DSDORGSW EQU   COMMON2+00000022    1 BYTE(S)                            06040000
DSDDDSW  EQU   COMMON2+00000023    1 BYTE(S)                            06050000
CRTBLK   EQU   COMMON2+00000024    1 BYTE(S)                            06060000
NAMCSW   EQU   COMMON2+00000025    8 BIT(S)                             06070000
PICCSW   EQU   COMMON2+00000026    8 BIT(S)                             06080000
BUFPSW   EQU   COMMON2+00000027    1 BYTE(S)                            06090000
ENDSW    EQU   COMMON2+00000028    1 BYTE(S)                            06100000
COMCSW   EQU   COMMON2+00000029    1 BYTE(S)                            06110000
FLAGSW   EQU   COMMON2+00000030    8 BIT(S)                             06120000
PAGESW   EQU   COMMON2+00000031    1 BYTE(S)                            06130000
EPSW     EQU   COMMON2+00000032    1  BYTE  POINTER                     06140000
SYSISW   EQU   COMMON2+00000033    1 BYTE(S)                            06150000
SYSPSW   EQU   COMMON2+00000034    1 BYTE(S)                            06160000
OLDNEWSW EQU   COMMON2+00000035    1 BYTE(S)                            06170000
FLUSHSW  EQU   COMMON2+00000036    1 BYTE(S)                            06180000
FLUSHSW1 EQU   COMMON2+00000037    1 BYTE(S)                            06190000
DSDOSW   EQU   COMMON2+00000038    1 BYTE(S)                            06200000
DSDISW   EQU   COMMON2+00000039    1 BYTE(S)                            06210000
QUANSW   EQU   COMMON2+00000040    1 BYTE(S)                            06220000
PARENSW  EQU   COMMON2+00000041    1 BYTE(S)                            06230000
REPEATSW EQU   COMMON2+00000042    1 BYTE(S)                            06240000
FDPLGTH  EQU   COMMON2+00000052    HALFWORD INTEGER                     06250000
SGCADDR  EQU   COMMON2+00000056    FULLWORD POINTER                     06260000
FDPTR    EQU   COMMON2+00000060    FULLWORD POINTER                     06270000
FDPTR1   EQU   COMMON2+00000064    FULLWORD POINTER                     06280000
FDPTR2   EQU   COMMON2+00000068    FULLWORD POINTER                     06290000
DUMMY2   EQU   COMMON2+00000072    FULLWORD POINTER                     06300000
COMMON3  EQU   00000608            188 BYTE(S) ON WORD                  06310000
FDCTR    EQU   COMMON3+00000000    HALFWORD POINTER                     06320000
LREMAIN  EQU   COMMON3+00000004    FULLWORD POINTER                     06330000
COMPCTR  EQU   COMMON3+00000008    FULLWORD POINTER                     06340000
LMOVED   EQU   COMMON3+00000012    HALFWORD POINTER                     06350000
U        EQU   COMMON3+00000016    FULLWORD POINTER                     06360000
PICEND   EQU   COMMON3+00000020    HALFWORD POINTER                     06370000
CURFDGM  EQU   COMMON3+00000024    FULLWORD POINTER                     06380000
SWTCH    EQU   COMMON3+00000028    4 BYTE(S) ON WORD                    06390000
SYSINSEL EQU   COMMON3+00000028    1 BYTE(S)                            06400000
FIRSTSW  EQU   COMMON3+00000029    1 BYTE(S)                            06410000
FRSTSW   EQU   COMMON3+00000030    1 BYTE(S)                            06420000
STOPSW   EQU   COMMON3+00000031    1 BYTE(S)                            06430000
COPYVAL  EQU   COMMON3+00000032    HALFWORD INTEGER                     06440000
COPYFD   EQU   COMMON3+00000036    FULLWORD POINTER                     06450000
COPYFDGM EQU   COMMON3+00000040    FULLWORD POINTER                     06460000
NAMCTR   EQU   COMMON3+00000044    HALFWORD INTEGER                     06470000
NAMCTR1  EQU   COMMON3+00000046    HALFWORD INTEGER                     06480000
INRECSZ  EQU   COMMON3+00000048    HALFWORD POINTER                     06490000
OUTRECSZ EQU   COMMON3+00000050    HALFWORD POINTER                     06500000
INRECFM  EQU   COMMON3+00000052    1 BYTE(S)                            06510000
RECOFFST EQU   COMMON3+00000053    1  BYTE  POINTER                     06520000
OUTRECFM EQU   COMMON3+00000054    1 BYTE(S)                            06530000
PICBASE  EQU   COMMON3+00000056    FULLWORD POINTER                     06540000
MESSAGE  EQU   COMMON3+00000060    121 BYTE(S)                          06550000
DUMMY3   EQU   COMMON3+00000184    FULLWORD POINTER                     06560000
OPTIONS  EQU   00000000            256 BYTE(S)                          06570000
PAGE     EQU   00000000            256 BYTE(S)                          06580000
DDLST    EQU   00000000            256 BYTE(S)                          06590000
DCBD     EQU   00000000            280 BYTE(S) ON DWORD                 06600000
FILL     EQU   DCBD+00000000       26 BYTE(S)                           06610000
DSORG1   EQU   DCBD+00000026       2 BYTE(S)                            06620000
DSORG    EQU   DCBD+00000026       8 BIT(S)                             06630000
FILLER   EQU   DCBD+00000028       8 BYTE(S)                            06640000
IOBAD    EQU   DCBD+00000028       4 BYTE(S)                            06650000
BFTEK    EQU   DCBD+00000032       8 BIT(S)                             06660000
EODAD    EQU   DCBD+00000033       3 BYTE(S)                            06670000
RECFM    EQU   DCBD+00000036       8 BIT(S)                             06680000
EXLIST   EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           06690000
DDNAME   EQU   DCBD+00000040       8 BYTE(S)                            06700000
FILL1    EQU   DCBD+00000040       2 BYTE(S)                            06710000
MACRF    EQU   DCBD+00000042       2 BYTE(S)                            06720000
DEBAD    EQU   DCBD+00000044       4 BYTE(S)                            06730000
IFLGS    EQU   DCBD+00000044       8 BIT(S)                             06740000
GETAD    EQU   DCBD+00000048       4 BYTE(S)                            06750000
OFLGS    EQU   DCBD+00000048       8 BIT(S)                             06760000
FILL2    EQU   DCBD+00000052       10 BYTE(S)                           06770000
BLKSI    EQU   DCBD+00000062       HALFWORD INTEGER                     06780000
FILL3    EQU   DCBD+00000064       18 BYTE(S)                           06790000
LRECL    EQU   DCBD+00000082       HALFWORD INTEGER                     06800000
FILL4    EQU   DCBD+00000084       172 BYTE(S)                          06810000
NEXTDCB  EQU   DCBD+00000256       FULLWORD POINTER                     06820000
DDNAME1  EQU   DCBD+00000260       8 BYTE(S)                            06830000
EODSW    EQU   DCBD+00000268       1 BYTE(S)                            06840000
DCBSW1   EQU   DCBD+00000269       1 BYTE(S)                            06850000
DCBSW2   EQU   DCBD+00000270       1 BYTE(S)                            06860000
DCBSW3   EQU   DCBD+00000271       8 BIT(S)                             06870000
INREC    EQU   DCBD+00000272       FULLWORD POINTER                     06880000
GMLGTH   EQU   DCBD+00000276       HALFWORD INTEGER                     06890000
FIELDSEL EQU   DCBD+00000278       1 BYTE(S)                            06900000
SPARE    EQU   DCBD+00000279       1 BYTE(S)                            06910000
ON       EQU   *                   1 BYTE(S)                            06920000
         DC    X'FF'                                                    06930000
OFF      EQU   *                   1 BYTE(S)                            06940000
         DC    X'00'                                                    06950000
INBUF    EQU   00000000            80 BYTE(S)                           06960000
         ORG   @DATA+00000004                                           06970000
MSGPTR   EQU   *                   30*FULLWORD POINTER                  06980000
         DC    AL4(M1)                                                  06990000
         DC    AL4(M2)                                                  07000000
         DC    AL4(M3)                                                  07010000
         DC    AL4(M4)                                                  07020000
         DC    AL4(M5)                                                  07030000
         DC    AL4(M6)                                                  07040000
         DC    AL4(M7)                                                  07050000
         DC    AL4(M8)                                                  07060000
         DC    AL4(M9)                                                  07070000
         DC    AL4(M10)                                                 07080000
         DC    AL4(M11)                                                 07090000
         DC    AL4(M12)                                                 07100000
         DC    AL4(M13)                                                 07110000
         DC    AL4(M14)                                                 07120000
         DC    AL4(M15)                                                 07130000
         DC    AL4(M16)                                                 07140000
         DC    AL4(M17)                                                 07150000
         DC    AL4(M18)                                                 07160000
         DC    AL4(M19)                                                 07170000
         DC    AL4(M20)                                                 07180000
         DC    AL4(M21)                                                 07190000
         DC    AL4(M22)                                                 07200000
         DC    AL4(M23)                                                 07210000
         DC    AL4(M24)                                                 07220000
         DC    AL4(M25)                                                 07230000
         DC    AL4(M26)                                                 07240000
         DC    AL4(M27)                                                 07250000
         DC    AL4(M28)                                                 07260000
         DC    AL4(M29)                                                 07270000
         DC    AL4(INBUFA)                                              07280000
M1       EQU   *                   121 BYTE(S)                          07290000
         DC    C'1                              DATA GENERA'            07300000
         DC    C'TOR OUTPUT FOR CONTROL CARDS AND MESSAGES '            07310000
         DC    C'                      PAGE          '                  07320000
         DC    00001C' '                                                07330000
M2       EQU   *                   121 BYTE(S)                          07340000
         DC    C' IEB702I OPERATION WAS NOT DSD,FD,CREATE,R'            07350000
         DC    C'EPEAT,OR END.CORRECT AND RERUN'                        07360000
         DC    00049C' '                                                07370000
M3       EQU   *                   121 BYTE(S)                          07380000
         DC    C' IEB703I INVALID KEYWORD VALUE.DELIMITER,D'            07390000
         DC    C'ESCRIPTOR OR TYPE IS IMPROPER, OR DUPLICAT'            07400000
         DC    C'ED'                                                    07410000
         DC    00035C' '                                                07420000
M4       EQU   *                   121 BYTE(S)                          07430000
         DC    C' IEB704I INPUT DDNAME ON CREATE OR FD CARD'            07440000
         DC    C' IS NOT SPECIFIED ON DSD CARD'                         07450000
         DC    00050C' '                                                07460000
M5       EQU   *                   121 BYTE(S)                          07470000
         DC    C' IEB705I INVALID KEYWORD,POSSIBLE IMBEDDED'            07480000
         DC    C' COMMA'                                                07490000
         DC    00073C' '                                                07500000
M6       EQU   *                   121 BYTE(S)                          07510000
         DC    C' IEB706I NUMBER SPECIFIED IS LARGER THAN 3'            07520000
         DC    C'2,767 OR EXCEEDS MACHINE CAPACITY (2,147,4'            07530000
         DC    C'83,647).'                                              07540000
         DC    00029C' '                                                07550000
M7       EQU   *                   121 BYTE(S)                          07560000
         DC    C' IEB707I FD NAME ON CREATE CARD IS NOT PRE'            07570000
         DC    C'VIOUSLY DEFINED BY AN FD CARD OR IS NOT AS'            07580000
         DC    C'SOCIATED WITH CORRECT DCB'                             07590000
         DC    00012C' '                                                07600000
M8       EQU   *                   121 BYTE(S)                          07610000
         DC    C' IEB708I PICTURE LENGTH TOO LARGE FOR CONV'            07620000
         DC    C'ERSION'                                                07630000
         DC    00073C' '                                                07640000
M9       EQU   *                   121 BYTE(S)                          07650000
         DC    C' IEB709I USER EXIT ROUTINE RETURNED AN INV'            07660000
         DC    C'ALID RETURN CODE.'                                     07670000
         DC    00062C' '                                                07680000
M10      EQU   *                   121 BYTE(S)                          07690000
         DC    C' IEB710I UNABLE TO GET ENOUGH SPACE TO PRO'            07700000
         DC    C'CESS REMAINING CONTROL CARDS'                          07710000
         DC    00051C' '                                                07720000
M11      EQU   *                   121 BYTE(S)                          07730000
         DC    C' IEB711I KEYWORD VALUE NOT FOLLOWED BY A B'            07740000
         DC    C'LANK OR COMMA.'                                        07750000
         DC    00065C' '                                                07760000
M12      EQU   *                   121 BYTE(S)                          07770000
         DC    C' IEB712I CONTROL CARD NAME OR KEYWORD VALU'            07780000
         DC    C'E EXCEEDS EIGHT CHARACTERS.'                           07790000
         DC    00052C' '                                                07800000
M13      EQU   *                   121 BYTE(S)                          07810000
         DC    C' IEB713I FLAGGED KEYWORD IS NOT COMPATIBLE'            07820000
         DC    C' WITH A PRECEDING KEYWORD.'                            07830000
         DC    00053C' '                                                07840000
M14      EQU   *                   121 BYTE(S)                          07850000
         DC    C' IEB714I REPEAT CARD ERROR OR REQUIRED NUM'            07860000
         DC    C'BER OF CREATE CARDS NOT PRESENT'                       07870000
         DC    00048C' '                                                07880000
M15      EQU   *                   121 BYTE(S)                          07890000
         DC    C' IEB715I NAME AND/OR LENGTH OR QUANTITY SP'            07900000
         DC    C'ECIFICATION(S) OMITTED FROM FD AND/OR REPE'            07910000
         DC    C'AT CARD.'                                              07920000
         DC    00029C' '                                                07930000
M16      EQU   *                   121 BYTE(S)                          07940000
         DC    C' IEB716I PICTURE STRING OR FD FIELD OVERFL'            07950000
         DC    C'OWS OUTPUT RECORD OR INPUT FIELD SELECTED '            07960000
         DC    C'OVERRUNS INPUT WORKAREA'                               07970000
         DC    00014C' '                                                07980000
M17      EQU   *                   121 BYTE(S)                          07990000
         DC    C' IEB717I INPUT RECORD SIZE EXCEEDS SPECIFI'            08000000
         DC    C'ED OUTPUT RECORD SIZE.'                                08010000
         DC    00057C' '                                                08020000
M18      EQU   *                   121 BYTE(S)                          08030000
         DC    C' IEB718I DSD CONTROL CARD MUST BE FIRST CA'            08040000
         DC    C'RD OF SET'                                             08050000
         DC    00070C' '                                                08060000
M19      EQU   *                   8 BYTE(S)                            08070000
         DC    C' IEB719I'                                              08080000
M20      EQU   *                   121 BYTE(S)                          08090000
         DC    C' IEB720I BLANK DOES NOT FOLLOW OPERATION O'            08100000
         DC    C'R CONTROL CARD NAME.'                                  08110000
         DC    00059C' '                                                08120000
M21      EQU   *                   121 BYTE(S)                          08130000
         DC    C' IEB721I KEYWORD,KEYWORD VALUE OR DELIMITE'            08140000
         DC    C'R,IS MISSING OR EXTENDS INTO COLUMN 72'                08150000
         DC    00041C' '                                                08160000
M22      EQU   *                   8 BYTE(S)                            08170000
         DC    C' IEB722I'                                              08180000
M23      EQU   *                   121 BYTE(S)                          08190000
         DC    C' IEB723I PICTURE PARAMETER IS NOT FOLLOWED'            08200000
         DC    C' BY A BLANK OR COMMA'                                  08210000
         DC    00059C' '                                                08220000
M24      EQU   *                   121 BYTE(S)                          08230000
         DC    C' IEB724I UNABLE TO OPEN DATA SET.LOOK FOR '            08240000
         DC    C'CONFLICTING VALUES OR MISSING DD CARD'                 08250000
         DC    00042C' '                                                08260000
M25      EQU   *                   121 BYTE(S)                          08270000
         DC    C' IEB725I  A DUPLICATE DSD CONTROL CARD HAS'            08280000
         DC    C' BEEN FOUND.CHECK FOR MISSING END CARD'                08290000
         DC    00041C' '                                                08300000
M26      EQU   *                   121 BYTE(S)                          08310000
         DC    C' IEB726I EXEC STATEMENT PARM PARAMETER IS '            08320000
         DC    C'CODED INCORRECTLY'                                     08330000
         DC    00062C' '                                                08340000
M27      EQU   *                   121 BYTE(S)                          08350000
         DC    C' IEB727I'                                              08360000
         DC    00113C' '                                                08370000
M28      EQU   *                   121 BYTE(S)                          08380000
         DC    C' IEB728I INPUT STREAM FLUSHED FROM THIS PO'            08390000
         DC    C'INT LRECL,BLKSIZE,OR RECFM INCORRECT IN SY'            08400000
         DC    C'SIN, SYSPRINT, OUTPUT OR INPUT DCB'                    08410000
         DC    00003C' '                                                08420000
M29      EQU   *                   121 BYTE(S)                          08430000
         DC    C'1IEB700I                     DATA GENERATI'            08440000
         DC    C'ON HAS BEEN SUCCESSFULLY COMPLETED COMPLET'            08450000
         DC    C'ION CODE IS ZERO'                                      08460000
         DC    00021C' '                                                08470000
         ORG   @DATA                                                    08480000
         DS    00003407C                                                08490000
@L       EQU   1                                                        08500000
@DATD    DSECT                                                          08510000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   08520000
OPTPTR   EQU   @DATD+00000072      FULLWORD POINTER                     08530000
PGPTR    EQU   @DATD+00000076      FULLWORD POINTER                     08540000
SYNAD    EQU   @DATD+00000080      FULLWORD INTEGER                     08550000
         DS    00000084C                                                08560000
@TEMPS   DS    0F                                                       08570000
         DS    C                                                        08580000
@DATEND  EQU   *                                                        08590000
IEBDGMSG CSECT ,                                                        08600000
@9FE     EQU   MSG06                                                    08610000
@9FA     EQU   MSG06                                                    08620000
@9F9     EQU   MSG02                                                    08630000
         END   IEBDGMSG                                                 08640000
./  ADD  SSI=80690132,NAME=IEBFDANL
*    NEW MODULE, RELEASE 17.                                       DG0H 00010000
*A547700-548000,714600                                           A35464 00020000
*C548100                                                         A35464 00030000
*D548600-549100                                                  A35464 00040000
*A285900-285984,291900,763600,764100                             A38710 00050000
*C308200,436100,444100                                           A38710 00060000
*A598700-598792                                                  A44355 00070000
*A412650-413100                                                 OY01164 00080000
*C162400                                                       @ZA04231 00090000
*C162400                                                       @ZA07345 00100000
*D184600                                                       @ZA24045 00110000
*A598730-598737,600100,603100,609700                           @ZA24045 00120000
         LCLA  &T,&SPN                                            0002  00130000
.@001    ANOP                                                     0002  00140000
IEBFDANL CSECT ,                                                  0002  00150000
         ST    @E,12(0,@D)                                        0002  00160000
         STM   @0,@8,20(@D)                                       0002  00170000
         STM   @A,@C,60(@D)                                       0002  00180000
         BALR  @B,0                                               0002  00190000
@PSTART  DS    0H                                                 0002  00200000
         USING @PSTART+00000,@B                                   0002  00210000
         LA    @3,4095(0,@B)                                      0002  00220000
         USING @PSTART+04095,@3                                   0002  00230000
         L     @0,@SIZ001                                         0002  00240000
         GETMAIN  R,LV=(0)                                        0002  00250000
         LR    @C,@1                                              0002  00260000
         USING @DATD+00000,@C                                     0002  00270000
         LM    @0,@1,20(@D)                                       0002  00280000
         XC    @TEMPS(@L),@TEMPS                                  0002  00290000
         ST    @D,@SAV001+4                                       0002  00300000
         LA    @F,@SAV001                                         0002  00310000
         ST    @F,8(0,@D)                                         0002  00320000
         LR    @D,@F                                              0002  00330000
*  F1A2:;                                                               00340000
*         IF FDPSW = ON THEN DO     /*DO WE CONTINUE AFTER PICT LGTH*/; 00350000
F1A2     CLC   549(1,@5),ON                                       0046  00360000
         BC    07,@9FF                                            0046  00370000
*               R9 = R9 + 2         /*YES ADVANCE PTR TO CONT COLUMN*/; 00380000
         AH    @9,@D1                                             0048  00390000
*         R6 = LREMAIN         /** REFRESH VALUE TO BE MOVED**/;        00400000
         L     @6,612(0,@5)                                       0049  00410000
*               GO TO F4B5          /*BRANCH TO PROCESS PICTURE */;     00420000
         BC    15,F4B5                                            0050  00430000
*         END;                                                          00440000
*  /******************************************************************* 00450000
*  /**                                                               ** 00460000
*  /** THIS SECTION TESTS FOR THE FDPCSW WHICH WAS SET WHEN THE       * 00470000
*  /** PICTURE PARAMETER WAS CONTINUED UPON ANOTHER CARD.IF THE SWITCH* 00480000
*  /** IS ON IT IS TURNED OFF,THE SCAN POINTER ADVANCED TO COLUMN     * 00490000
*  /** THREE(ONE MORE TO BE ADDED LATER),THE LENGTH REMAINING IN THE  * 00500000
*  /** PICTURE PLACED IN A REGISTER AND A BRANCH TAKEN TO SCAN OUT THE* 00510000
*  /** REST OF THE PICTURE.THE BASE MODULE PASSES CONTROL TO THIS     * 00520000
*  /** MODULE WHEN THE FDPCSW IS FOUND ON.                            * 00530000
*  /**                                                                * 00540000
*                              /**WE ARE NOW SCANNING OUT A PICTURE  ** 00550000
*                              /**THAT EXTENDS OVER MORE THAN ONE    ** 00560000
*                              /**INPUT CARD                         ** 00570000
*  /******************************************************************/ 00580000
*         IF FDPCSW = ON THEN DO   /* IF PICSW ON THEN DO FOLLOWING*/;  00590000
@9FF     CLC   538(1,@5),ON                                       0052  00600000
         BC    07,@9FE                                            0052  00610000
*               FDPCSW = OFF   /**TURN OFF PICTURE CONTINUE SWITCH**/;  00620000
         MVC   538(1,@5),OFF                                      0054  00630000
*               R9 = R9 + 2              /**ADD TWO TO BUF PTR **/;     00640000
         AH    @9,@D1                                             0055  00650000
*               R6 = LREMAIN        /** PICK UP REMAINING LENGTH**/;    00660000
         L     @6,612(0,@5)                                       0056  00670000
*               GO TO F4E3               /*BRANCH TO CONT PROCESS */;   00680000
         BC    15,F4E3                                            0057  00690000
*         END;                                                          00700000
*  /******************************************************************* 00710000
*  /**                                                                * 00720000
*  /** THIS SECTION TESTS FOR THE FDCSW (FD CONTINUATION SWITCH) BEING* 00730000
*  /** ON.IT WAS SET WHEN A FD CONTINUATION WAS DETERMINED.CONTROL IS * 00740000
*  /** PASSED TO THIS MODULE WHEN THE BASE MODULE FINDS THIS SWITCH ON* 00750000
*  /** WHEN ON,THE CONTINUATION SWITCH IS TURNED OFF,THE SCAN POINTER * 00760000
*  /**ADVANCED TO COLUMN THREE(ONE MORE TO BE ADDED LATER) AND A      * 00770000
*  /** BRANCH TAKEN FOR FURTHER PROCESSING.                           * 00780000
*                              /**THIS IS A NORMAL CONTINUATION      ** 00790000
*                              /**EXPECT A KEYWORD NEXT              ** 00800000
*  /**                                                                * 00810000
*  /******************************************************************* 00820000
*         IF FDCSW = ON THEN DO    /*IF FD CONTINUE ON DO FOLLOWING*/;  00830000
@9FE     CLC   536(1,@5),ON                                       0059  00840000
         BC    07,@9FD                                            0059  00850000
*               FDCSW = OFF    /**TURN OFF FD CONTINUE SWITCH**/;       00860000
         MVC   536(1,@5),OFF                                      0061  00870000
*               R9 = R9 + 2              /**ADD 2 TO BUF POINTER**/;    00880000
         AH    @9,@D1                                             0062  00890000
*               GO TO F1E2         /*BRANCH TO CONTINUE PROCESSING*/;   00900000
         BC    15,F1E2                                            0063  00910000
*         END;                                                          00920000
*  /******************************************************************/ 00930000
*  /**                                                                * 00940000
*  /** THE FDCTR IS USED TO DETERMINE THE NUMBER OF FD TABLES PRESENT * 00950000
*  /** PER GETMAIN OF 520 BYTES.FDCTR EQUAL TO ZERO OR EIGHT INDICATED* 00960000
*  /** THE NEED FOR A GETMAIN.IF THE COUNTER IS OTHER THAN ZERO OR    * 00970000
*  /** EIGHT A BRANCH IS TAKEN TO SCAN FOR KEYWORDS                   * 00980000
*  /**                                                               ** 00990000
*  /******************************************************************/ 01000000
*  F1C2:        R9 = R9 + 2  /*STEP POINTER TO COLUMN AFTER OPERATION*/ 01010000
@9FD     EQU   *                                                  0065  01020000
F1C2     AH    @9,@D1                                             0065  01030000
*         IF FDCTR = 0 THEN GO TO F1C3  /*IF FDCTR = 0 GO TO GETMAIN*/; 01040000
         SR    @F,@F                                              0066  01050000
         CH    @F,608(0,@5)                                       0066  01060000
         BC    08,F1C3                                            0067  01070000
*        IF FDCTR ¬= 8 THEN GO TO F1D2  /*BR IF WE HAVE MORE SPACE*/;   01080000
         LA    @F,8                                               0068  01090000
         CH    @F,608(0,@5)                                       0068  01100000
         BC    07,F1D2                                            0069  01110000
*  /******************************************************************* 01120000
*  /**                                                                * 01130000
*  /** THIS SECTION GETS MAIN FOR 520 BYTES TO BE USED FOR FD TABLES  * 01140000
*  /** A FD TABLE IS 64 BYTES LONG.THIS AREA WILL HOLD EIGHT FD TABLES* 01150000
*  /** THE EIGHT   BYTES LEFT OVER ARE USED FOR LINKAGE TO THE NEXT FD* 01160000
*  /** TABLE.THE LINK ADDRESS IS STORED IN THE LAST FOUR BYTES OF THIS* 01170000
*  /** AREA.AN UNSUCCESSFUL GETMAIN CAUSES CON CODE 12 AND A RETURN   * 01180000
*  /** CORE IS CLEARED TO BINARY ZEROES.WE STEP THROUGH THIS TABLE BY * 01190000
*  /** INCREMENTING THE FD POINTER BY 64.COUNT IS KEPT IN FDCTR       * 01200000
*  /**                                                                * 01210000
*  /******************************************************************* 01220000
*  F1C3:;                                                               01230000
*  /*NEXT SEQUENCE ISSUES A CONDITIONAL GETMAIN                       * 01240000
*               FDCTR = 0      /**REINITILIZE FD COUNTER**/;            01250000
F1C3     SR    @F,@F                                              0071  01260000
         STH   @F,608(0,@5)                                       0071  01270000
*               R6 = ADDR(GCADDR)        /*PICK UP ADDRESS FOR GMAIN*/; 01280000
         LA    @6,376(0,@5)                                       0072  01290000
*               R1 = ADDR(GETMLIST)      /*PICK UP LIST ADDR*/;         01300000
         LA    @1,364(0,@5)                                       0073  01310000
*                              /*ISSUE GET MAIN MACRO*/                 01320000
*  GEN ( GETMAIN EC,LV=520,A=(R6),SP=0,MF=(E,(R1)));                    01330000
          GETMAIN EC,LV=520,A=(R6),SP=0,MF=(E,(R1))                     01340000
         DS    0H                                                       01350000
*         IF R15 = 0 THEN GO TO F1B5  /*BR IF SUCCESSFUL GET MAIN*/;    01360000
         LTR   @F,@F                                              0075  01370000
         BC    08,F1B5                                            0076  01380000
*               MS = 10         /*INDICATE MESSAGE */;                  01390000
         LA    @F,10                                              0077  01400000
         STH   @F,406(0,@5)                                       0077  01410000
*  /******************************************************************/ 01420000
*  /**                                                               ** 01430000
*  /** THIS SECTION CONSISTING OF THREE LABELS WHICH ARE BRANCHED TO  * 01440000
*  /** FOR EXITING FROM THIS ROUTINE WHEN RETURN OF CONTROL IS NOT    * 01450000
*  /** REQUIRED.A BRANCH TO F1B41 CAUSES ALL FD SWITCHES TO BE TURNED** 01460000
*  /** OFF AND A NORMAL RETURN TO THE BASE MODULE.A BRANCH TO F1B411  * 01470000
*  /** CAUSES THE EPSW TO BE SET TO ONE(INDICATES NEED FOR MESSAGE)   * 01480000
*  /** SWITCHES OFF AND RETURN.A BRANCH TO F1B4 CAUSES FLAGSW(1) TO   * 01490000
*  /** BE SET INDICATING A NEED FOR ERROR FLAGGING A MESSAGE.EPSW IS  * 01500000
*  /** THEN SET,SWITCHES TURNED OFF AND A RETURN ISSUED.THUS F1B41    * 01510000
*  /** IS FOR A NORMAL RETURN.F1B411 INDICATES NEED FOR A MESSAGE AND * 01520000
*  /** RETURN.F1B4 INDICATES ERROR FLAGGING,MESSAGE AND RETURN.       * 01530000
*  /**                                                               ** 01540000
*  /******************************************************************/ 01550000
*  F1B4:;                                                               01560000
*               FLAGSW(1) = '1'B         /*INDICATE ERROR FLAG WANTED*/ 01570000
F1B4     OI    566(@5),B'10000000'                                0079  01580000
*  F1B411:;                                                             01590000
*               EPSW = 1        /*INDICATE NEED FOR MESSAGE */;         01600000
F1B411   MVI   568(@5),1                                          0081  01610000
*               FDNAME = 'BADFIELD' /**INDICATE BAD FIELD **/;          01620000
         L     @1,596(0,@5)                                       0082  01630000
         MVC   0(8,@1),@C2                                        0082  01640000
*  F1B41:;                                                              01650000
*               SWITCH(1) = OFF          /**TURN OFF FIRST FD SWITCH**/ 01660000
F1B41    MVC   536(1,@5),OFF                                      0084  01670000
*         SWITCH(2:14) = SWITCH(1:13) /** TURN OFF FD SWITCHES**/;      01680000
         MVC   537(13,@5),536(@5)                                 0085  01690000
*               RETURN;                                                 01700000
         BC    15,@EL01                                           0086  01710000
*  F1B5:;                                                               01720000
*  /**                                                                * 01730000
*  /**    THIS SECTION CLEARS CORE FOR THE 520 BYTE FD TABLE.         * 01740000
*  /** POINTERS ARE INITILIZED AS FOLLOWS                             * 01750000
*  /**    FDPTR1- INIT ONCE FOR FIRST TIME                            * 01760000
*  /**    FDPTR2- INIT TO CURRENT FD TABLE                            * 01770000
*  /**FDPTR - INIT TO CURRENT 64 BYTE ENTRY                           * 01780000
*  /** FOR FIRST TIME LOGIC 64 IS TAKEN AWAY FROM FDPTR AS WE ADD 64  * 01790000
*  /** TO STEP THROUGH THE TABLE                                      * 01800000
*  /**                                                                * 01810000
*  /******************************************************************* 01820000
*               FDPTR = GCADDR /** INIT PTR TO NEW ADDRESS           ** 01830000
F1B5     MVC   596(4,@5),376(@5)                                  0088  01840000
*               FDTBL(1) = '00'X  /*FIRST BYTE OF NEW TABLE TO ZERO*/;  01850000
         L     @1,596(0,@5)                                       0089  01860000
         MVI   0(@1),X'00'                                        0089  01870000
*               FDTBL(2:256) = FDTBL(1:255)     /* CLEAR TABLE*/;       01880000
         MVC   1(255,@1),0(@1)                                    0090  01890000
*               FDTBL(257:512) = FDTBL(255:511) /*CLEAR TABLE*/;        01900000
         MVC   256(256,@1),254(@1)                                0091  01910000
*         FDTBL(513:520) = FDTBL(512:519) /**CLEAR THRU 520 BYTES**/;   01920000
         MVC   512(8,@1),511(@1)                                  0092  01930000
*         IF FDPTR2 ¬= 0 THEN GO TO F1B6 /**BR NOT FIRST TIME IN TBL ** 01940000
         SR    @F,@F                                              0093  01950000
         C     @F,604(0,@5)                                       0093  01960000
         BC    07,F1B6                                            0094  01970000
*               FDPTR1 = GCADDR         /**INIT PTR TO FIRST TBL ADDR** 01980000
         MVC   600(4,@5),376(@5)                                  0095  01990000
*               GO TO F1B7            /**BR NO LINKAGE FOR FIRST TIME** 02000000
         BC    15,F1B7                                            0096  02010000
*  F1B6:;                                                               02020000
*         FDPTR2 -> FDTBL(517:520) = GCADDR /**LINK TABLE TO LAST**/;   02030000
F1B6     L     @1,604(0,@5)                                       0098  02040000
         MVC   516(4,@1),376(@5)                                  0098  02050000
*  F1B7:;                                                               02060000
*               FDPTR2 = GCADDR               /**INIT CURRENT PTR**/;   02070000
F1B7     MVC   604(4,@5),376(@5)                                  0100  02080000
*               FDPTR = FDPTR - 64 /**INIT PTR FOR FIRST TIME LOGIC**/; 02090000
         LH    @F,@D2                                             0101  02100000
         A     @F,596(0,@5)                                       0101  02110000
         ST    @F,596(0,@5)                                       0101  02120000
*  /* A BRANCH IS TAKEN TO THIS POINT IF THE FD TABLE ISNT USED UP */   02130000
*  /******************************************************************* 02140000
*  /**                                                                * 02150000
*  /**    THIS IS ENTERED WHEN WE HAVE ROOM FOR ANOTHER 64 BYTE ENTRY * 02160000
*  /** WITHIN THE FD TABLE.ONE IS ADDED TO THE FDCTR AND THE FDPTR IS * 02170000
*  /** INCREMENTED BY 64 TO POINT TO A FRESH SECTION OF THE FD TABLE. * 02180000
*  /** THE SCAN POINTER IS NOW POINTING AT THE COLUMN FOLLOWING THE   * 02190000
*  /** CONTROL CARD NAME(FD).A MESSAGE IS INDICATED IF A BLANK IS NOT * 02200000
*  /** IN THIS POSITION.CONTROL PASSES TO THE NEXT SECTION IF A BLANK * 02210000
*  /** IS PRESENT.                                                    * 02220000
*  /**                                                                * 02230000
*  /******************************************************************* 02240000
*  F1D2:;                                                               02250000
*               FDCTR = FDCTR + 1        /*ADD ONE TO FDCTR*/;          02260000
F1D2     LA    @F,1                                               0103  02270000
         AH    @F,608(0,@5)                                       0103  02280000
         STH   @F,608(0,@5)                                       0103  02290000
*               FDPTR = FDPTR + 64 /**POINT AT FRESH TABLE**/;          02300000
         LA    @F,64                                              0104  02310000
         A     @F,596(0,@5)                                       0104  02320000
         ST    @F,596(0,@5)                                       0104  02330000
*         IF INBUF(1) ¬=' ' THEN DO;/* IF NO BLANK AFTER KEY SET MSG*/  02340000
         CLI   0(@9),C' '                                         0105  02350000
         BC    08,@9FC                                            0105  02360000
*               MS = 11                  /*SET MESSAGE*/;               02370000
         LA    @F,11                                              0107  02380000
         STH   @F,406(0,@5)                                       0107  02390000
*               GO TO F1B4           /* BRANCH TO EXIT POINT */;        02400000
         BC    15,F1B4                                            0108  02410000
*         END;                                                          02420000
*  /******************************************************************* 02430000
*  /**                                                                * 02440000
*  /**    THIS SECTION WILL SCAN,LOOKING FOR A NON-BLANK.IF THE       * 02450000
*  /** POINTER IS AT COLUMN 71 AND COLUMN 72 IS NON-BLANK,A COMMENTS  * 02460000
*  /** CONTINUATION IS INDICATED.A BLANK IN COLUMN 71 INDICATES A     * 02470000
*  /** REGULAR CONTINUATION.BLANK CARDS WILL BE SCANNED AND IGNORED   * 02480000
*  /** WE ARE LOOKING FOR THE FIRST KEYWORD.                          * 02490000
*  /**                                                                * 02500000
*  /******************************************************************* 02510000
*  F1E2:        R9 = R9 + 1              /*STEP POINTER BY ONE */;      02520000
@9FC     EQU   *                                                  0110  02530000
F1E2     AH    @9,@D3                                             0110  02540000
*         IF R9 => COUNTER THEN DO       /*IS POINTER PAST COL 71 */;   02550000
         C     @9,232(0,@5)                                       0111  02560000
         BC    04,@9FB                                            0111  02570000
*               FDCSW = ON               /*TURN ON FD CONTINUE SWITCH*/ 02580000
         MVC   536(1,@5),ON                                       0113  02590000
*               RETURN                   /*RETURN TO IEBDG*/;           02600000
         BC    15,@EL01                                           0114  02610000
*         END;                                                          02620000
*         IF INBUF(1) = ' ' THEN GO TO F1E2 /*IF BLANK BRANCH TO F1E2*/ 02630000
@9FB     CLI   0(@9),C' '                                         0116  02640000
         BC    08,F1E2                                            0117  02650000
*               GO TO F2B11              /**BRANCH TO SCAN KEYWORDS**/; 02660000
         BC    15,F2B11                                           0118  02670000
*  /******************************************************************* 02680000
*  /**                                                                * 02690000
*  /**    THIS SECTION CHECKS FOR A COMMA OR BLANK FOLLOWING A KEYWORD* 02700000
*  /** PARAMETER.A BLANK INDICATES THE END OF KEYWORD PROCESSING.     * 02710000
*  /** A NON-BLANK IN COLUMN 72 INDICATES A COMMENTS CONTINUATION.THE * 02720000
*  /** NEXT CARD WILL BE TREATED AS A COMMENT CARD AS THE COMCSW WILL * 02730000
*  /** BE TURNED ON.THE BASE MODULE PROCESSES ALL COMMENT CONT. CARDS * 02740000
*  /** FOR THIS MODULE.IF A BLANK IS FOUND THE FIELD LENGTH IS PICKED * 02750000
*  /** UP IN A REGISTER AND A BRANCH IS TAKEN TO PROCESS THIS ENTRY IN* 02760000
*  /** THE FD TABLE.A COMMA WILL CAUSE A BRANCH INTO THE KEYWORD SCAN.* 02770000
*  /** AN IMPROPER VALUE WILL CAUSE A MSG INDICATION AND BRANCH       * 02780000
*  /**                                                                * 02790000
*  /******************************************************************* 02800000
*  F2A1:;                                                               02810000
*        IF R9 > COUNTER + 1 THEN GO TO F2A11 ; /* PAST COL 72 A38710 * 02820000
F2A1     LA    @F,1                                               0120  02830000
         A     @F,232(0,@5)                                       0120  02840000
         CR    @F,@9                                              0120  02850000
         BC    04,F2A11                                           0121  02860000
*        IF R9 = COUNTER + 1 THEN DO ;     /* AT COL 72        A38710 * 02870000
         LA    @F,1                                               0122  02880000
         A     @F,232(0,@5)                                       0122  02890000
         CR    @F,@9                                              0122  02900000
         BC    07,@9FA                                            0122  02910000
*              IF INBUF(1) = ' ' THEN   /* NO CONTINUATION     A38710 * 02920000
         CLI   0(@9),C' '                                         0124  02930000
*                   GO TO F2A11 ;                           /* A38710 * 02940000
         BC    08,F2A11                                           0125  02950000
*                   GO TO F2B12 ;        /* CONTINUATION       A38710 * 02960000
         BC    15,F2B12                                           0126  02970000
*              END ;                                        /* A38710 * 02980000
*   IF INBUF(1) = ' ' THEN DO;                                          02990000
@9FA     CLI   0(@9),C' '                                         0128  03000000
         BC    07,@9F9                                            0128  03010000
*  /*THE CONTINUATION SW WILL BE SET IF COL 72 IS NOT BLANK */          03020000
*               IF COUNTER -> INBUF(2) ¬=' ' THEN DO;                   03030000
         L     @1,232(0,@5)                                       0130  03040000
         CLI   1(@1),C' '                                         0130  03050000
         BC    08,@9F8                                            0130  03060000
*                    COMCSW = ON         /*TURN ON COMMENT SW*/;        03070000
         MVC   565(1,@5),ON                                       0132  03080000
*               END;                                                    03090000
* F2A11: R6 = FDLGTH ;                  /* RESTORE FIELD LENGTHA38710*/ 03100000
@9F8     EQU   *                                                  0134  03110000
F2A11    L     @1,596(0,@5)                                       0134  03120000
         LH    @6,24(0,@1)                                        0134  03130000
*               GO TO F5D2          /*BRANCH TO PROCESS WKAREA*/;       03140000
         BC    15,F5D2                                            0135  03150000
*  /*COLUMN AFTER PARA MUST ALWAYS BE A COMMA */                        03160000
*         END;                                                          03170000
*   IF INBUF(1) = ',' THEN GO TO F2B1 ;                                 03180000
@9F9     CLI   0(@9),C','                                         0137  03190000
         BC    08,F2B1                                            0138  03200000
*        IF R9 = COUNTER THEN GO TO F1E2 ; /* AT COL 71        A38710 * 03210000
         C     @9,232(0,@5)                                       0139  03220000
         BC    08,F1E2                                            0140  03230000
*  /******************************************************************* 03240000
*  /**                                                                * 03250000
*  /**    THIS SECTION IS THE KEYWORD SCAN.                           * 03260000
*  /** IF A BLANK FOLLOWS THE COMMA AFTER LAST PARAMETER SCANNED,THIS * 03270000
*  /** INDICATES A CONTINUATION OF THE FD CARD.THE FDCSW WILL BE      * 03280000
*  /** TURNED ON AND A BRANCH TAKEN TO RETURN TO THE BASE MODULE. IF  * 03290000
*  /** NOT A BLANK A BRANCH IS TAKEN TO SCAN FOR KEYWORDS.ILLEGIMATE. * 03300000
*  /** KEYWORDS WILL CAUSE A MSG INDICATION AND A BRANCH TO EXIT.     * 03310000
*  /** THERE IS NO CHECK FOR DUPLICATE KEYWORDS.A DUPLICATE WILL CAUSE* 03320000
*  /** THE LAST FOUND TO BE OVERLAID.THIS SCAN ALWAYS CONSIDERS THE   * 03330000
*  /** EQUAL SIGN FOLLOWING THE KEYWORD TO BE PART OF THE KEYWORD.WHEN* 03340000
*  /** A LEGITIMATE KEYWORD IS FOUND A BRANCH WILL BE TAKEN TO PROCESS* 03350000
*  /** IT.INDEX BY NAME IS NOT ALLOWED FOR FIRST RELEASE,ALTHOUGH CODE* 03360000
*  /** WILL BE FOUND WHICH PLACES THE NAME IN THE TABLE.THE SAME IS   * 03370000
*  /** TRUE FOR 'REPLACE'.THEREFORE A NAME IN PLACE OF A NUMBER FOR   * 03380000
*  /** THE KEYWORD INDEX= WILL CAUSE THE NAME TO BE PLACED IN THE FD  * 03390000
*  /** TABLE.THIS MAY CAUSE INCONSISTENT RESULTS WHEN INDEXING AS THE * 03400000
*  /** CREATE MODULE IS CODED FOR PROCESSING INDEX BY NUMBER ONLY     * 03410000
*  /**                                                                * 03420000
*  /******************************************************************* 03430000
*  F2A2:;                                                               03440000
*               MS = 11        /** INDICATE MESSABE NUMBER 11**/;       03450000
F2A2     LA    @F,11                                              0142  03460000
         STH   @F,406(0,@5)                                       0142  03470000
*               GO TO F1B4               /*BRANCH TO EXIT POINT*/;      03480000
         BC    15,F1B4                                            0143  03490000
*  F2B1:;                                                               03500000
*         IF INBUF(2) = ' ' THEN GO TO F2B12 /**BR CONTINUATION**/;     03510000
F2B1     CLI   1(@9),C' '                                         0145  03520000
         BC    08,F2B12                                           0146  03530000
*               R9 = R9 + 1              /**STEP POINTER PAST COMMA**/; 03540000
         AH    @9,@D3                                             0147  03550000
*  F2B11:;                                                              03560000
*        IF R9 = COUNTER + 1 THEN DO ; /* COMMA IN COL 72      A38710 * 03570000
F2B11    LA    @F,1                                               0149  03580000
         A     @F,232(0,@5)                                       0149  03590000
         CR    @F,@9                                              0149  03600000
         BC    07,@9F7                                            0149  03610000
*  F2B12:;                                                              03620000
*               FDCSW = ON     /**TURN ON FD CONTINUATION SWITCH**/;    03630000
F2B12    MVC   536(1,@5),ON                                       0152  03640000
*         RETURN               /** RETURN TO BASE MODULE**/;            03650000
         BC    15,@EL01                                           0153  03660000
*         END;                                                          03670000
*                                       /**IF NAME= BRANCH TO F2B2**/   03680000
*         IF INBUF(1:5) = 'NAME=' THEN GO TO F2B2;                      03690000
@9F7     CLC   0(5,@9),@C6                                        0155  03700000
         BC    08,F2B2                                            0156  03710000
*         IF INBUF(1:6) = 'INPUT=' THEN GO TO F3H1 /**BR ITS INPUT **/; 03720000
         CLC   0(6,@9),@C7                                        0157  03730000
         BC    08,F3H1                                            0158  03740000
*         IF INBUF(1:8) = 'FROMLOC=' THEN GO TO F3J1 /**BR TO F3J1 FOR  03750000
         CLC   0(8,@9),@C8                                        0159  03760000
*                                                       FROMLOC **/;    03770000
         BC    08,F3J1                                            0160  03780000
*                                        /*IF LENGTH= GO TO F2C2 */     03790000
*         IF INBUF(1:7) = 'LENGTH=' THEN GO TO F2C2 /*BR IF LENGTH*/;   03800000
         CLC   0(7,@9),@C9                                        0161  03810000
         BC    08,F2C2                                            0162  03820000
*                                        /*IF STARTLOC= GO TO F2D2*/    03830000
*         IF INBUF(1:9) = 'STARTLOC=' THEN GO TO F2D2;                  03840000
         CLC   0(9,@9),@C10                                       0163  03850000
         BC    08,F2D2                                            0164  03860000
*                                        /*IF PICTURE= GO TO F2E2*/     03870000
*         IF INBUF(1:8) = 'PICTURE=' THEN GO TO F2E2;                   03880000
         CLC   0(8,@9),@C11                                       0165  03890000
         BC    08,F2E2                                            0166  03900000
*                                        /*IF FORMAT= GO TO F2F2*/      03910000
*         IF INBUF(1:7) = 'FORMAT=' THEN GO TO F2F2;                    03920000
         CLC   0(7,@9),@C12                                       0167  03930000
         BC    08,F2F2                                            0168  03940000
*                                        /*IF ACTION= GO TO F2G2*/      03950000
*         IF INBUF(1:7) = 'ACTION=' THEN GO TO F2G2;                    03960000
         CLC   0(7,@9),@C13                                       0169  03970000
         BC    08,F2G2                                            0170  03980000
*                                        /*IF FILL= GO TO F2H2 */       03990000
*         IF INBUF(1:5) = 'FILL=' THEN GO TO F2H2;                      04000000
         CLC   0(5,@9),@C14                                       0171  04010000
         BC    08,F2H2                                            0172  04020000
*                                        /*IF CYCLE= GO TO F2J2*/       04030000
*         IF INBUF(1:6) = 'CYCLE=' THEN GO TO F2J2;                     04040000
         CLC   0(6,@9),@C15                                       0173  04050000
         BC    08,F2J2                                            0174  04060000
*         IF INBUF(1:6) = 'RANGE=' THEN GO TO F3A1 /*BR IF RANGE*/;     04070000
         CLC   0(6,@9),@C16                                       0175  04080000
         BC    08,F3A1                                            0176  04090000
*                                        /*IF CHARACTER= GO TO F3C2*/   04100000
*         IF INBUF(1:10) = 'CHARACTER=' THEN GO TO F3C2;                04110000
         CLC   0(10,@9),@C17                                      0177  04120000
         BC    08,F3C2                                            0178  04130000
*                                        /*IF SIGN= GO TO F3D2*/        04140000
*         IF INBUF(1:5) = 'SIGN=' THEN GO TO F3D2;                      04150000
         CLC   0(5,@9),@C18                                       0179  04160000
         BC    08,F3D2                                            0180  04170000
*                                        /*IF INDEX= GO TO F3E2*/       04180000
*         IF INBUF(1:6) = 'INDEX=' THEN GO TO F3E2;                     04190000
         CLC   0(6,@9),@C19                                       0181  04200000
         BC    08,F3E2                                            0182  04210000
*                                        /*IF REPLACE= GO TO F3G2*/     04220000
*         IF INBUF(1:8) = 'REPLACE=' THEN GO TO F3G2;                   04230000
         CLC   0(8,@9),@C20                                       0183  04240000
         BC    08,F3G2                                            0184  04250000
*  /*AT THIS POINT A LEGITIMATE KEYWORD WAS NOT FOUND.ISSUE MSG */      04260000
*               MS = 5                   /* INDICATE MSG */;            04270000
         LA    @F,5                                               0185  04280000
         STH   @F,406(0,@5)                                       0185  04290000
*               GO TO F1B4               /*BRANCH TO EXIT POINT */;     04300000
         BC    15,F1B4                                            0186  04310000
*  /******************************************************************/ 04320000
*  /* NAME IS PROCESSED HERE ****************************************/  04330000
*  /** THE SCAN POINTER IS INCREMENTED TO POINT AT THE NAME FOLLOWING * 04340000
*  /** THE EQUAL SIGN AND THE NAME IS SCANNED OUT.IF THE FIRST        * 04350000
*  /** CHARACTER IS VALID ALPHABETIC AND THE LENGTH IS PROPER THE NAME* 04360000
*  /** IS PLACED IN THE FD TABLE,OTHERWISE A MSG IS INDICATED AND A   * 04370000
*  /**BRANCH TAKEN TO EXIT.THE POINTER IS THEN STEPPED PAST THE       * 04380000
*  /** PARAMETER AND A BRANCH TAKEN TO TEST FOR LAST PARAMETER ON CARD* 04390000
*  F2B2:;                                                               04400000
*         R9 = R9 + 5                    /*POINT AT NAME PARAMETER*/;   04410000
F2B2     AH    @9,@D4                                             0188  04420000
*               CALL SCANOUT;            /*SCANS OUT PARAMETER*/        04430000
         BAL   @E,SCANOUT                                         0189  04440000
*  /** THE EQUAL SIGN AND THE NAME IS SCANNED OUT.THE SCANOUT ROUTINE * 04450000
*  /** TESTS FOR THE NAME BEING LONGER THAN 8 CHARS.THE FD TABLES ARE * 04460000
*  /** THEN SCANNED TO SEE IF THE NAME IS A DUPLICATE.THE SCAN IS     * 04470000
*  /** ENDED WHEN THE LAST NAME FIELD AND LINK FIELD CONTAIN ZERO     * 04480000
*         HOLDNAME = INBUF(1:R7);                                       04490000
         LR    @1,@7                                              0190  04500000
         BCTR  @1,0                                               0190  04510000
         LR    @E,@9                                              0190  04520000
         LA    @A,790(0,@5)                                       0190  04530000
         MVI   0(@A),C' '                                         0190  04540000
         MVC   1(007,@A),0(@A)                                    0190  04550000
         EX    @1,@MVC                                            0190  04560000
*               R4 = FDPTR1    /**PICK UP FIRST TABLE ADDRESS**/;       04570000
         L     @4,600(0,@5)                                       0191  04580000
*  F2B21:;                                                              04590000
*  /**LMOVED IS USED AS COUNTER,IT IS INIT TO ZERO WHEN USED ELSEWHERE* 04600000
*               LMOVED = 0    /**INIT COUNTER FOR SCAN**/;              04610000
F2B21    SR    @F,@F                                              0193  04620000
         STH   @F,620(0,@5)                                       0193  04630000
*               R6 = R4        /**  COPY ADDRESS**/;                    04640000
         LR    @6,@4                                              0194  04650000
*  F2B22:;                                                              04660000
*               LMOVED = LMOVED + 1 /** ADD ONE TO COUNTER**/;          04670000
F2B22    LA    @F,1                                               0196  04680000
         AH    @F,620(0,@5)                                       0196  04690000
         STH   @F,620(0,@5)                                       0196  04700000
*         IF R6 -> FDTBL(1) ¬= '00'X THEN DO /**DO BELOW IF NO NAME**/; 04710000
         CLI   0(@6),X'00'                                        0197  04720000
         BC    08,@9F6                                            0197  04730000
*         IF R6-> FDTBL(1:8) = HOLDNAME  THEN                           04740000
         CLC   0(8,@6),790(@5)                                    0199  04750000
         BC    07,@9F5                                            0199  04760000
*         DO;                                                           04770000
*        /**   FOUND DUPLICATE NAME   **/                               04780000
*               MS = 3         /** SET MESSAGE INDICATION **/;          04790000
         LA    @F,3                                               0201  04800000
         STH   @F,406(0,@5)                                       0201  04810000
*               GO TO F1B4     /**BR TO EXIT THIS ROUTINE**/;           04820000
         BC    15,F1B4                                            0202  04830000
*         END;                                                          04840000
*               R6 = R6 + 64   /**POINT AT NEXT FD ENTRY**/;            04850000
@9F5     AH    @6,@D5                                             0204  04860000
*         IF LMOVED ¬= 8 THEN DO /**BR IF AT END OF TABLE**/;           04870000
         LA    @F,8                                               0205  04880000
         CH    @F,620(0,@5)                                       0205  04890000
*               GO TO F2B22    /** BRANCH TO COMPARE**/;                04900000
         BC    07,F2B22                                           0207  04910000
*         END;                                                          04920000
*         R4 = R4 -> FDTBL(517:520) /** PICK UP NEXT TABLE ADDRESS**/;  04930000
@9F4     L     @4,516(0,@4)                                       0209  04940000
*               GO TO F2B21    /**BR TO START LOOKING AGAIN**/;         04950000
         BC    15,F2B21                                           0210  04960000
*         END;                                                          04970000
*  F2B23:;                                                              04980000
@9F6     EQU   *                                                  0212  04990000
*         FDNAME = INBUF(1:R7)           /*PLACE NAME IN FDTABLE*/;     05000000
F2B23    LR    @1,@7                                              0213  05010000
         BCTR  @1,0                                               0213  05020000
         LR    @E,@9                                              0213  05030000
         L     @2,596(0,@5)                                       0213  05040000
         LR    @A,@2                                              0213  05050000
         MVI   0(@A),C' '                                         0213  05060000
         MVC   1(007,@A),0(@A)                                    0213  05070000
         EX    @1,@MVC                                            0213  05080000
*  STEPPTR:     R9 = R8             /*STEP POINTER PAST PARAMETER*/;    05090000
STEPPTR  LR    @9,@8                                              0214  05100000
*               GO TO F2A1               /*BR TO TEST FOR LAST PARA */; 05110000
         BC    15,F2A1                                            0215  05120000
*  /******************************************************************/ 05130000
*  /* LENGTH IS PROCESSED HERE **************************************/  05140000
*  /******************************************************************/ 05150000
*  /**                                                                * 05160000
*  /**    THE SCAN POINTER IS STEPPED TO POINT AT THE LENGTH,AND THE  * 05170000
*  /** NUMBER IS SCANNED OUT,VALIDITY CHECKED,CONVERTED TO BINARY AND * 05180000
*  /** PLACED IN FDLGTH OF THE TABLE.A BRANCH IS THEN TAKEN TO STEP   * 05190000
*  /** POINTER PAST PARAMETER AND TEST FOR LAST PARAMETER             * 05200000
*  /**                                                                * 05210000
*  /******************************************************************* 05220000
*  F2C2:;                                                               05230000
*         R9 = R9 + 7                    /*POINT TO PARAMETER */;       05240000
F2C2     AH    @9,@D6                                             0217  05250000
*               CALL SCANOUT;            /*SCANS OUT PARAMETER*/        05260000
         BAL   @E,SCANOUT                                         0218  05270000
*               CALL VALCHECK            /**VALIDITY CHECK THE NUMBER** 05280000
         BAL   @E,VALCHECK                                        0219  05290000
*               CALL CONVB;              /*CONVERTS NUMBER TO BINARY*/  05300000
         BAL   @E,CONVB                                           0220  05310000
*         FDLGTH = R6                    /*BINARY LGTH TO TABLE*/;      05320000
         L     @1,596(0,@5)                                       0221  05330000
         STH   @6,24(0,@1)                                        0221  05340000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER*/;    05350000
         BC    15,STEPPTR                                         0222  05360000
*  /******************************************************************/ 05370000
*  /* STARTLOC IS PROCESSED HERE ************************************/  05380000
*  /**                                                                * 05390000
*  /**    THE SCAN POINTER IS STEPPED TO POINT AT PARAMETER.THE NUMBER* 05400000
*  /** IS SCANNED OUT,VALIDITY CHECKED,CONVERTED TO BINARY,ITS VALUE  * 05410000
*  /** MINUS ONE IS THEN PLACED AT FDOBUF IN THE TABLE.A VALE MINUS   * 05420000
*  /** ONE IS REQUIRED BY THE CREATE MODULE.A BRANCH IS THEN TAKEN TO * 05430000
*  /** STEP THE POINTER AND TEST FOR LAST PARAMETER.                  * 05440000
*  /** A LENGTH OF ZERO IS NOT ALLOWED.MESSAGE 3 ISSUED BY CONVB RT.  * 05450000
*  /**                                                                * 05460000
*  /******************************************************************/ 05470000
*  F2D2:;                                                               05480000
*         R9 = R9 + 9                    /*POINT TO PARAMETER*/;        05490000
F2D2     AH    @9,@D7                                             0224  05500000
*               CALL SCANOUT;            /*SCANS OUT PARAMETER */       05510000
         BAL   @E,SCANOUT                                         0225  05520000
*               CALL VALCHECK            /**VALIDITY CHECK THE NUMBER** 05530000
         BAL   @E,VALCHECK                                        0226  05540000
*               CALL CONVB;              /*CONVERTS NUMBER TO BINARY*/  05550000
         BAL   @E,CONVB                                           0227  05560000
*               STRTLOC1 = '1'B /** TURN ON STARTLOC SWITCH **/;        05570000
         L     @1,596(0,@5)                                       0228  05580000
         OI    62(@1),B'10000000'                                 0228  05590000
*                              /**STARTLOC MINUS ONE REQD BY CREATE**/  05600000
*               FDOBUF = R6 - 1 /**STARTLOC MINUS ONE TO TABLE**/;      05610000
         LR    @F,@6                                              0229  05620000
         BCTR  @F,0                                               0229  05630000
         STH   @F,40(0,@1)                                        0229  05640000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER */;   05650000
         BC    15,STEPPTR                                         0230  05660000
*  /******************************************************************/ 05670000
*  /* PICTURE IS PROCESSED HERE AND AT F4A1 *************************** 05680000
*  /******************************************************************/ 05690000
*  /**    THIS SECTION PROCESSES THE LENGTH SUB-PARAMETER OF PICTURE. * 05700000
*  /** PICTURE CANNOT BE PRESENT IF A FORMAT IS PRESENT.A FORMAT WILL * 05710000
*  /** HAVE SET THE FDFMTSW.IF THIS IS ON A MSG IS INDICATED AND A    * 05720000
*  /** BRANCH TAKEN TO EXIT ROUTINE.IF NO FORMAT IS PRESENT THE FDPLSW* 05730000
*  /** IS TURNED ON SO THAT FORMAT WILL BE EXCLUDED AND THE LENGTH    * 05740000
*  /** SCANNED OUT,VALIDITY CHECKED,CONVERTED TO BINARY AND THE VALUE * 05750000
*  /** PLACED AT FDPLGTH FOR FURTHER PROCESSING.A BRANCH IS THEN TAKEN* 05760000
*  /** TO SCAN OUT THE ACTUAL PICTURE.LENGTH MUST BE PRESENT FOR      * 05770000
*  /** PROPER SCAN OF PICTURE.AS WE MUST BE REENTRANT,THE LENGTH IS   * 05780000
*  /** REQUIRED BEFORE THE PICTURE AS IT MAY EXTEND OVER MANY CARDS.  * 05790000
*  /** WE SCAN THE PICTURE OUT DEPENDING UPON A LENGTH.THEREFORE EVERY* 05800000
*  /** CHARACTER BETWEEN THE DELIMITING QUOTES IS CONSIDERED PART OF  * 05810000
*  /** THE PICTURE.                                                   * 05820000
*  /**                                                                * 05830000
*  /******************************************************************* 05840000
*  F2E2:;                                                               05850000
*         R9 = R9 + 8                    /*POINT TO LENGTH SUBPARA */;  05860000
F2E2     AH    @9,@D8                                             0232  05870000
*                         /* PICTURE AND FORMAT ARE EXCLUSIVE IF BOTH*/ 05880000
*                         /* ARE PRESENT,INDICATED BY FDFMTSW AND */    05890000
*                         /* FDPLSW WE STOP WITH MESSAGE*/              05900000
*         IF FDFMTSW = ON THEN DO    /*IF FORMAT PRESENT DO FOLLOWING*/ 05910000
         CLC   539(1,@5),ON                                       0233  05920000
         BC    07,@9F3                                            0233  05930000
*  F2F4:;                                                               05940000
*               MS = 13              /*INDICATE MESSAGE */;             05950000
F2F4     LA    @F,13                                              0236  05960000
         STH   @F,406(0,@5)                                       0236  05970000
*               GO TO F1B4           /*BRANCH TO EXIT */;               05980000
         BC    15,F1B4                                            0237  05990000
*         END;                                                          06000000
*         FDPLSW = ON                    /*TURN ON PICT LGHT SWITCH */; 06010000
@9F3     MVC   540(1,@5),ON                                       0239  06020000
*               CALL SCANOUT;            /*SCAN OUT LENGTH OF PARA*/;   06030000
         BAL   @E,SCANOUT                                         0240  06040000
*               CALL VALCHECK            /**VALIDITY CHECK THE NUMBER** 06050000
         BAL   @E,VALCHECK                                        0242  06060000
*               CALL CONVB;              /*CONVERT LGTH */              06070000
         BAL   @E,CONVB                                           0243  06080000
*         FDPLGTH = R6                   /*SAVE LGTH FOR PICT SCAN */;  06090000
         STH   @6,588(0,@5)                                       0244  06100000
*               GO TO F4A1               /*BRANCH TO FINISH PICTURE*/;  06110000
         BC    15,F4A1                                            0245  06120000
*  /******************************************************************/ 06130000
*  /* FORMAT IS PROCESSED HERE *************************************/   06140000
*  /******************************************************************* 06150000
*  /**    THE SCAN POINTER IS STEPPED TO POINT AT THE PARAMETER AND   * 06160000
*  /** THE FDPLSW IS CHECKED TO SEE IF THIS PARAMETER IS EXCLUDED.IF  * 06170000
*  /** EXCLUDED A BRANCH IS TAKEN TO INDICATE A MSG AND EXIT.IF NOT   * 06180000
*  /** EXCLUDED THE FORMAT IS SCANNED OUT,CHECKED FOR TWO CHARACTERS  * 06190000
*  /** (MSG INDICATED IF NOT TWO) AND PLACED AT FDFORMAT IN FD TABLE. * 06200000
*  /** A BRANCH IS THE TAKEN TO STEP THE POINTER AND TEST FOR LAST    * 06210000
*  /** PARAMETER.                                                     * 06220000
*  /**                                                                * 06230000
*  /******************************************************************* 06240000
*  F2F2:;                                                               06250000
*         R9 = R9 + 7                    /*POINT TO PARAMETER*/;        06260000
F2F2     AH    @9,@D6                                             0247  06270000
*         IF FDPLSW = ON THEN GO TO F2F4 /*BRANCH IF EXCLUDED*/;        06280000
         CLC   540(1,@5),ON                                       0248  06290000
         BC    08,F2F4                                            0249  06300000
*               FDFMTSW = ON             /*TURN ON FORMAT SWITCH*/;     06310000
         MVC   539(1,@5),ON                                       0250  06320000
*               CALL SCANOUT             /*SCAN OUT PARAMETER*/;        06330000
         BAL   @E,SCANOUT                                         0251  06340000
*  /**IF RETURN IS TO THIS POINT PARA IS PRESENT.A VALUE OF 2 IN REG**/ 06350000
*  /** SEVEN INDICATES A CORRECT LENGTH**/                              06360000
*         IF R7 = 2 THEN GO TO F6F22 /**BRANCH IF CORRECT LENGTH**/;    06370000
         CH    @7,@D1                                             0252  06380000
         BC    08,F6F22                                           0253  06390000
*  F2F21:;                                                              06400000
*               MS =  3                  /**INDICATE MESSAGE**/;        06410000
F2F21    LA    @F,3                                               0255  06420000
         STH   @F,406(0,@5)                                       0255  06430000
*               GO TO F1B4           /* BRANCH TO EXIT POINT*/;         06440000
         BC    15,F1B4                                            0256  06450000
*  F6F22:;                                                              06460000
*         IF INBUF(1:2) = 'AN'         /* FORMAT VALUE VALID   OY01164* 06470000
*              THEN GO TO F6F24;        /* YES,PUT IN TABLE    OY01164* 06480000
F6F22    CLC   0(2,@9),@C21                                       0258  06490000
         BC    08,F6F24                                           0259  06500000
*         IF INBUF(1:2) = 'AL'         /* FORMAT VALUE VALID   OY01164* 06510000
*              THEN GO TO F6F24;        /* YES,PUT IN TABLE    OY01164* 06520000
         CLC   0(2,@9),@C22                                       0260  06530000
         BC    08,F6F24                                           0261  06540000
*         IF INBUF(1:2) = 'ZD'         /* FORMAT VALUE VALID   OY01164* 06550000
*              THEN GO TO F6F24;        /* YES,PUT IN TABLE    OY01164* 06560000
         CLC   0(2,@9),@C23                                       0262  06570000
         BC    08,F6F24                                           0263  06580000
*         IF INBUF(1:2) = 'PD'         /* FORMAT VALUE VALID   OY01164* 06590000
*              THEN GO TO F6F24;        /* YES,PUT IN TABLE    OY01164* 06600000
         CLC   0(2,@9),@C24                                       0264  06610000
         BC    08,F6F24                                           0265  06620000
*         IF INBUF(1:2) = 'CO'         /* FORMAT VALUE VALID   OY01164* 06630000
*              THEN GO TO F6F24;        /* YES,PUT IN TABLE    OY01164* 06640000
         CLC   0(2,@9),@C25                                       0266  06650000
         BC    08,F6F24                                           0267  06660000
*         IF INBUF(1:2) = 'BI'         /* FORMAT VALUE VALID   OY01164* 06670000
*              THEN GO TO F6F24;        /* YES,PUT IN TABLE    OY01164* 06680000
         CLC   0(2,@9),@C26                                       0268  06690000
         BC    08,F6F24                                           0269  06700000
*         IF INBUF(1:2) = 'RA'         /* FORMAT VALUE VALID   OY01164* 06710000
*              THEN GO TO F6F24;        /* YES,PUT IN TABLE    OY01164* 06720000
         CLC   0(2,@9),@C16                                       0270  06730000
         BC    08,F6F24                                           0271  06740000
*              ELSE MS = 3;             /* INVALID VALUE GIVE MOY01164* 06750000
         LA    @F,3                                               0272  06760000
         STH   @F,406(0,@5)                                       0272  06770000
*              GO TO F1B4;              /* PRINT ERROR MESSAGE OY01164* 06780000
         BC    15,F1B4                                            0273  06790000
* F6F24:;                               /* PUT VALUES IN TABLE OY01164* 06800000
*         FDFORMAT = INBUF(1:2)          /*PLACE FORMAT IN TABLE*/;     06810000
F6F24    L     @1,596(0,@5)                                       0275  06820000
         MVC   30(2,@1),0(@9)                                     0275  06830000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER*/;    06840000
         BC    15,STEPPTR                                         0276  06850000
*  /******************************************************************/ 06860000
*  /* ACTION IS PROCESSED HERE **************************************/  06870000
*  /******************************************************************/ 06880000
*  /**    THE SCAN POINTER IS STEPPED TO POINT TO THE PARAMETER AND   * 06890000
*  /** THE PARAMETER SCANNED OUT.IF THE PARAMETER LENGTH IS NOT TWO A * 06900000
*  /** BRANCH IS TAKEN TO INDICATE MSG.IF LENGTH IS CORRECT THE       * 06910000
*  /** PARAMETER IS PLACED AT FDACTION IN THE FD TABLE AND A BRANCH   * 06920000
*  /** TAKEN TO STEP THE POINTER PAST THE PARAMETER.                  * 06930000
*  /**                                                                * 06940000
*  /******************************************************************* 06950000
*  F2G2:;                                                               06960000
*               R9 = R9 + 7              /*POINT AT PARAMETER*/;        06970000
F2G2     AH    @9,@D6                                             0278  06980000
*               CALL SCANOUT             /*SCAN OUT PARAMETER */;       06990000
         BAL   @E,SCANOUT                                         0279  07000000
*  /**IF RETURN IS TO THIS POINT PARA IS PRESENT.A VALUE OF 2 IN REG**/ 07010000
*  /**SEVEN INDICATES A CORRECT LENGTH**/                               07020000
*         IF R7 ¬= 2 THEN GO TO F2F21 /**IF INCORRECT BR TO SEND MSG**/ 07030000
         CH    @7,@D1                                             0280  07040000
         BC    07,F2F21                                           0281  07050000
*               FDACTION = INBUF(1:2)    /*PLACE ACTION IN TABLE */;    07060000
         L     @1,596(0,@5)                                       0282  07070000
         MVC   28(2,@1),0(@9)                                     0282  07080000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER*/;    07090000
         BC    15,STEPPTR                                         0283  07100000
*  /******************************************************************/ 07110000
*  /* FILL IS PROCESSED HERE ****************************************/  07120000
*  /**                                                                * 07130000
*  /**    THE SCAN POINTER IS STEPPED TO POINT TO THE PARAMETER.      * 07140000
*  /** THE PARAMETER MAY BE PRESENT IN TWO FORMS.                     * 07150000
*  /**    1.---- EBCDIC CHARACTER--DELIMITED BY QUOTES FRONT AND REAR * 07160000
*  /**    2.---- TWO HEXADECIMAL DIGITS --DELIMITED BY X' AT FRONT    * 07170000
*  /**                                  --DELIMITED BY  ' AT REAR     * 07180000
*  /** IF THE ABOVE CONDITIONS ARE NOT MET A MSG IS INDICATED AND A   * 07190000
*  /** BRANCH TAKEN TO EXIT.IF THE CHARACTER IS EBCDIC IT IS PLACED   * 07200000
*  /** DIRECTLY INTO THE TABLE AT FDFILL.IF THE CHARACTER IS HEX      * 07210000
*  /** IT IS FIRST CONVERTED AND THEN PLACED IN THE TABLE.            * 07220000
*  /**    E.G.--- X'C1' INTERNALLY IS A3F1                            * 07230000
*  /**          THIS IS CONVERTED TO A C1 AND PLACED IN TABLE.        * 07240000
*  /**                                                                * 07250000
*  F2H2:;                                                               07260000
*         R9 = R9 + 5                    /* POINT AT P&RAMETER */;      07270000
F2H2     AH    @9,@D4                                             0285  07280000
*         IF INBUF(1) = 'X' THEN DO      /*ARE HEX DIGITS PRESENT */;   07290000
         CLI   0(@9),C'X'                                         0286  07300000
         BC    07,@9F2                                            0286  07310000
*         IF INBUF(2) ¬= '''' THEN GO TO F2H22 /**ERROR IF NO QUOTE**/; 07320000
         CLI   1(@9),C''''                                        0288  07330000
         BC    07,F2H22                                           0289  07340000
*        IF ADDR(INBUF(5)) > COUNTER THEN  /* PAST COL 72      A38710 * 07350000
         L     @F,232(0,@5)                                       0290  07360000
         LA    @0,4(0,@9)                                         0290  07370000
         SR    @F,@0                                              0290  07380000
         BC    10,@9F1                                            0290  07390000
*         DO;                                                           07400000
* F2H21:                                                                07410000
*         MS = 21;                                                      07420000
F2H21    LA    @F,21                                              0292  07430000
         STH   @F,406(0,@5)                                       0292  07440000
*         GOTO F1B4;                                                    07450000
         BC    15,F1B4                                            0293  07460000
*   END;                                                                07470000
*        IF INBUF(5) = '''' THEN GO TO F2H3    /**BR IF QUOTE **/;      07480000
@9F1     CLI   4(@9),C''''                                        0295  07490000
         BC    08,F2H3                                            0296  07500000
*  F2H22:;                                                              07510000
*  /* AT THIS POINT QUOTES WERE NO IN PROPER POSITION */                07520000
*               MS = 3                   /*INDICATE MESSAGE */;         07530000
F2H22    LA    @F,3                                               0298  07540000
         STH   @F,406(0,@5)                                       0298  07550000
*               GO TO F1B4               /*BRANCH TO EXIT */;           07560000
         BC    15,F1B4                                            0299  07570000
*         END;                                                          07580000
*  /*AT THIS POINT FILL CHARACTER IS EBCDIC NOT HEX IT MAY BE MOVED */  07590000
*  /*DIRECTLY INTO TABLE IF IT MEETS REQUIREMENTS FOR QUOTES  */        07600000
*        IF INBUF(1) ¬= '''' THEN GO TO F2H22 /**BR IF NOT QUOTE**/;    07610000
@9F2     CLI   0(@9),C''''                                        0301  07620000
         BC    07,F2H22                                           0302  07630000
*        IF INBUF(3) ¬= '''' THEN GO TO F2H22 /**BR IF NOT QUOTE**/;    07640000
         CLI   2(@9),C''''                                        0303  07650000
         BC    07,F2H22                                           0304  07660000
*        IF ADDR(INBUF(3)) > COUNTER THEN  /* PAST COL 72      A38710 * 07670000
         L     @F,232(0,@5)                                       0305  07680000
         LA    @0,2(0,@9)                                         0305  07690000
         SR    @F,@0                                              0305  07700000
*         GOTO F2H21;                                                   07710000
         BC    04,F2H21                                           0306  07720000
*               FDFILL = INBUF(2) /**FILL CHARACTER TO TABLE**/;        07730000
         L     @1,596(0,@5)                                       0307  07740000
         MVC   33(1,@1),1(@9)                                     0307  07750000
*               R9 = R9 + 3              /*POSITION POINTER */;         07760000
         AH    @9,@D9                                             0308  07770000
*               GO TO F2A1               /*BR TO CONTINUE PROCESSING */ 07780000
         BC    15,F2A1                                            0309  07790000
*  /* AT THIS POINT HEX FILL IS PRESENT MUST CONVERT IT */              07800000
*  /* INTERNALLY THE VALID CHARS ALLOWED ARE:           */              07810000
*  /*                     F0 THRU F9                    */              07820000
*  /*                     C1 THRU C6                    */              07830000
*  /*                                                   */              07840000
*  F2H3:;                                                               07850000
*               FILLSW = OFF             /*CLEAR FILL SWITCH*/;         07860000
F2H3     MVC   542(1,@5),OFF                                      0311  07870000
*  F2H4:;                                                               07880000
*               /* R9 POINTS AT THE X PRECEDING 'CHARS' */              07890000
*               R6 = 0                   /*CLEAR WORK REGISTER*/;       07900000
F2H4     SR    @6,@6                                              0313  07910000
*         IF INBUF(3) => 'F0'X THEN DO   /*IF REQMT NOT MET GO TO F2H7* 07920000
         CLI   2(@9),X'F0'                                        0314  07930000
         BC    04,@9F0                                            0314  07940000
*         IF INBUF(3) =< 'F9'X THEN DO   /*IF REQMT NOT MET GO TO F2H6* 07950000
         CLI   2(@9),X'F9'                                        0316  07960000
         BC    02,@9EF                                            0316  07970000
*               R6 = R6 | INBUF(3)       /* OR DIGIT TO REGISTER */;    07980000
         SR    @F,@F                                              0318  07990000
         IC    @F,2(0,@9)                                         0318  08000000
         OR    @6,@F                                              0318  08010000
*               R6 = R6 & '0F'X          /* AND OUT TOP 4 DIGITS */;    08020000
         LA    @F,X'0F'                                           0319  08030000
         NR    @6,@F                                              0319  08040000
*  F2H5:;                                                               08050000
*         IF FILLSW = ON THEN GO TO F2H8 /*BR TO PROCESS LAST DIGIT */; 08060000
F2H5     CLC   542(1,@5),ON                                       0321  08070000
         BC    08,F2H8                                            0322  08080000
*               R6 = R6 * 16             /* SHIFT DIGIT TO PROPER POS*/ 08090000
         SLA   @6,4                                               0323  08100000
*               FILLSW = ON              /* TURN ON FILL SWITCH */;     08110000
         MVC   542(1,@5),ON                                       0324  08120000
*               Q(1:4) = R6    /**STORE VALUE IN TEMPORARY AREA**/;     08130000
         ST    @6,@TEMP4                                          0325  08140000
         MVC   216(4,@5),@TEMP4                                   0325  08150000
*               FDFILL = Q(4)  /**PLACE FILL CHARACTER IN FD TABLE**/;  08160000
         L     @1,596(0,@5)                                       0326  08170000
         MVC   33(1,@1),219(@5)                                   0326  08180000
*               R9 = R9 + 1              /*INCREMENT POINTER */;        08190000
         AH    @9,@D3                                             0327  08200000
*               GO TO F2H4               /*BR TO PROCESS 2ND DIGIT*/;   08210000
         BC    15,F2H4                                            0328  08220000
*         END;                                                          08230000
*  /*AT THIS POINT INVALID CHARACTERS WERE FOUND */                     08240000
*  F2H6:;                                                               08250000
@9EF     EQU   *                                                  0330  08260000
*               MS = 3                   /* INDICATE MSG */;            08270000
F2H6     LA    @F,3                                               0331  08280000
         STH   @F,406(0,@5)                                       0331  08290000
*               GO TO F1B4               /* BRANCH TO EXIT */;          08300000
         BC    15,F1B4                                            0332  08310000
*         END;                                                          08320000
*  /*AT THIS POINT THE CHAR IS TESTED FOR C1 THRU C6 */                 08330000
*  F2H7:;                                                               08340000
@9F0     EQU   *                                                  0334  08350000
*         IF INBUF(3)  < 'C1'X THEN GO TO F2H6 /*BR IF INVALID */;      08360000
F2H7     CLI   2(@9),X'C1'                                        0335  08370000
         BC    04,F2H6                                            0336  08380000
*         IF INBUF(3)  > 'C6'X THEN GO TO F2H6 /*BR IF INVALID */;      08390000
         CLI   2(@9),X'C6'                                        0337  08400000
         BC    02,F2H6                                            0338  08410000
*  /* VALID DIGIT FOUND HERE */                                         08420000
*               R6 = R6 | INBUF(3:3)     /* OR DIGIT TO REGISTER */;    08430000
         SR    @F,@F                                              0339  08440000
         IC    @F,2(0,@9)                                         0339  08450000
         OR    @6,@F                                              0339  08460000
*               R6 = R6 & '0F'X          /*  & OUT TOP 4 DIGITS */;     08470000
         LA    @F,X'0F'                                           0340  08480000
         NR    @6,@F                                              0340  08490000
*               R6 = R6 + 9              /*CREATE PROPER DIGIT*/;       08500000
         AH    @6,@D7                                             0341  08510000
*               GO TO F2H5               /* BR TO TEST FOR FIRST DIGIT* 08520000
         BC    15,F2H5                                            0342  08530000
*  /* ENTER HERE FOR SECOND DIGIT OF FILL */                            08540000
*  F2H8:;                                                               08550000
*               R6 = R6 | FDFILL         /*CONSTRUCT FILL CHARACTER*/;  08560000
F2H8     L     @1,596(0,@5)                                       0344  08570000
         SR    @0,@0                                              0344  08580000
         IC    @0,33(0,@1)                                        0344  08590000
         OR    @6,@0                                              0344  08600000
*               Q(1:4) = R6    /**STORE VALUE IN TEMPORARY AREA**/;     08610000
         ST    @6,@TEMP4                                          0345  08620000
         MVC   216(4,@5),@TEMP4                                   0345  08630000
*               FDFILL = Q(4)  /**PLACE FILL CHARACTER IN FD TABLE**/;  08640000
         L     @1,596(0,@5)                                       0346  08650000
         MVC   33(1,@1),219(@5)                                   0346  08660000
*               R9 = R9 + 4              /* POSITION POINTER */;        08670000
         AH    @9,@D10                                            0347  08680000
*               GO TO F2A1               /*BR TO CONTINUE PROCESSING*/; 08690000
         BC    15,F2A1                                            0348  08700000
*  /******************************************************************/ 08710000
*  /* CYCLE IS PROCESSED HERE ************************************/     08720000
*  /******************************************************************/ 08730000
*  /******************************************************************/ 08740000
*  /**                                                              **/ 08750000
*  /**    CYCLE IS PROCESSED BY POSITIONING THE SCAN POINTER TO THE **/ 08760000
*  /** DECIMAL NUMBER UPON THE CONTROL CARD.THE SCANOUT SUBROUTINE  **/ 08770000
*  /** IS CALLED TO ESTABLISH POINTERS USED BY THE VALIDITY CHECK   **/ 08780000
*  /** SUBROUTINE.AFTER THE NUMBER IS VALIDITY CHECKED,CONVB IS     **/ 08790000
*  /** CALLED IN ORDER TO CONVERT THE NUMBER TO BINARY.THE BINARY   **/ 08800000
*  /** VALUE OF CYCLE,FOUND IN REG 6 IS THEN PLACED INTO THE CYCLE  **/ 08810000
*  /** LOCATION OF THE FD TABLE.A BRANCH IS THEN TAKEN TO STEPPTR   **/ 08820000
*  /** TO STEP THE LOCATION POINTER TO THE NEXT PARAMETER IF PRESENT**/ 08830000
*  /**                                                              **/ 08840000
*  /******************************************************************/ 08850000
*  F2J2:;                                                               08860000
*               R9 = R9 + 6              /*POSITION POINTER*/;          08870000
F2J2     AH    @9,@D11                                            0350  08880000
*               CALL SCANOUT             /*SCAN OUT PARAMETER*/;        08890000
         BAL   @E,SCANOUT                                         0351  08900000
*               CALL VALCHECK            /**VALIDITY CHECK THE NUMBER** 08910000
         BAL   @E,VALCHECK                                        0352  08920000
*               CALL CONVB               /* CONVERT NUMBER TO BINARY*/; 08930000
         BAL   @E,CONVB                                           0353  08940000
*               FDCYCLE = R6             /*NUMBER TO TABLE*/;           08950000
         L     @1,596(0,@5)                                       0354  08960000
         STH   @6,26(0,@1)                                        0354  08970000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER */;   08980000
         BC    15,STEPPTR                                         0355  08990000
*  /******************************************************************/ 09000000
*  /* RANGE IS PROCESSED HERE ************************************/     09010000
*  /******************************************************************/ 09020000
*  /**    POSITION THE SCAN POINTER TO NUMBER AS FOUND ON INPUT     **/ 09030000
*  /**CONTROL CARD.TURN ON THE RANGE SWITCH AND CALL THE SCANOUT    **/ 09040000
*  /**SUBROUTINE TO ESTABLISH POINTERS USED FOR VALIDITY CHECKING.  **/ 09050000
*  /**VALIDITY CHECK THE NUMBER FOR VALID DECIMAL DIGITS AND CONVERT**/ 09060000
*  /**THE NUMBER TO BINARY BY CALLING THE CONVB SUBROUTINE.PLACE THE**/ 09070000
*  /**BINARY VALUE OF THE DECIMAL NUMBER INTO THE RANGE LOCATION OF **/ 09080000
*  /**THE FD TABLE.BRANCH TO STEPPTR TO PROCESS NEXT PARAMETER.     **/ 09090000
*  /**                                                              **/ 09100000
*  /******************************************************************/ 09110000
*  F3A1:;                                                               09120000
*               R9 = R9 + 6              /* POSITION POINTER*/;         09130000
F3A1     AH    @9,@D11                                            0357  09140000
*               RANGESW = ON             /* TURN ON RANGE SWITCH*/;     09150000
         MVC   541(1,@5),ON                                       0358  09160000
*               CALL SCANOUT             /* SCAN OUT PARAMETER*/;       09170000
         BAL   @E,SCANOUT                                         0359  09180000
*               CALL VALCHECK            /**VALIDITY CHECK THE NUMBER** 09190000
         BAL   @E,VALCHECK                                        0360  09200000
*               CALL CONVB               /*CONVERT NUMBER TO BINARY*/;  09210000
         BAL   @E,CONVB                                           0361  09220000
*               FDRANGE = R6             /*RANGE TO TABLE*/;            09230000
         L     @1,596(0,@5)                                       0362  09240000
         ST    @6,36(0,@1)                                        0362  09250000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER*/;    09260000
         BC    15,STEPPTR                                         0363  09270000
*  /******************************************************************/ 09280000
*  /* CHARACTER IS PROCESSED HERE ********************************/     09290000
*  /******************************************************************/ 09300000
*  /**    THE SCAN POINTER IS STEPPED TO THE PARAMETER AND THE START  * 09310000
*  /** CHARACTER IS PLACED AT FDCHAR IN THE FDTABLE.THE POINTER IS    * 09320000
*  /** THEN POSITIONED AND A BRANCH TAKEN FOR FURTHER PROCESSING      * 09330000
*  /**                                                              **/ 09340000
*  /******************************************************************/ 09350000
*  F3C2:;                                                               09360000
*               R9 = R9 + 10             /* POSITION POINTER*/;         09370000
F3C2     AH    @9,@D12                                            0365  09380000
*               FDCHAR = INBUF(1) /**STARTING CHARACTER TO TABLE**/;    09390000
         L     @1,596(0,@5)                                       0366  09400000
         MVC   35(1,@1),0(@9)                                     0366  09410000
*               R9 = R9 + 1        /** POSITION POINTER**/;             09420000
         AH    @9,@D3                                             0367  09430000
*               GO TO F2A1               /*BR TO FURTHER PROCESSING*/;  09440000
         BC    15,F2A1                                            0368  09450000
*  F3D2:;                                                               09460000
*  /******************************************************************* 09470000
*  /* SIGN IS PROCESSED HERE *************************************/     09480000
*  /******************************************************************/ 09490000
*  /** SIGN IS PROCESSED BY TESTING THE VALUE AS FOUND IN THE CONTROL * 09500000
*  /** CARD FOR PLUS OR MINUS,AND IF FOUND CORRECT PLACING THE VALUE  * 09510000
*  /** FROM THE CARD IN THE FD SIGN FIELD OF THE FD TABLE             * 09520000
*  /** AN IMPROPER VALUE WILL CAUSE A MESSAGE TO BE ISSUED            * 09530000
*  /** THE SCAN POINTER IS THEN INCREMENTED TO POINT AT THE BLANK OR  * 09540000
*  /** COMMA FOLLOWING THE SIGN. A BRANCH IS THEN TAKEN TO TEST FOR   * 09550000
*  /** LAST PARAMETER ON THE CARD                                     * 09560000
*  /**                                                                * 09570000
*  /******************************************************************* 09580000
*         IF INBUF(6) = '+' THEN GO TO F3D3 /**BR OK TO PROCESS SIGN**/ 09590000
F3D2     CLI   5(@9),C'+'                                         0370  09600000
         BC    08,F3D3                                            0371  09610000
*         IF INBUF(6) = '-' THEN GO TO F3D3 /**BR OK TO PROCESS SIGN**/ 09620000
         CLI   5(@9),C'-'                                         0372  09630000
         BC    08,F3D3                                            0373  09640000
*               R9 = R9 + 5    /** POINT AT ERROR PARAMETER***/;        09650000
         AH    @9,@D4                                             0374  09660000
*               GO TO F2F21    /**BRANCH TO SET MESSAGE**/;             09670000
         BC    15,F2F21                                           0375  09680000
*  F3D3:;                                                               09690000
*         FDSIGN = INBUF(6) /** EBCDIC SIGN TO TABLE**/;                09700000
F3D3     L     @1,596(0,@5)                                       0377  09710000
         MVC   34(1,@1),5(@9)                                     0377  09720000
*               R9 = R9 + 6    /**POINT PAST PARAMETER**/;              09730000
         AH    @9,@D11                                            0378  09740000
*               GO TO F2A1               /*BRANCH TO CONTINUE */;       09750000
         BC    15,F2A1                                            0379  09760000
*  /******************************************************************/ 09770000
*  /* INDEX IS PROCESSED HERE ************************************/     09780000
*  /******************************************************************/ 09790000
*  /**    THE SCAN POINTER IS STEPPED TO THE PARAMETER. (REFER TO     * 09800000
*  /** EXPLANATION INDEX BY NAME AND REPLACE AT KEYWORD SCAN).INDEX   * 09810000
*  /** AND REPLACE ARE MUTUALLY EXCLUSIVE.SO ARE INDEX NAME AND NUMBER* 09820000
*  /** THE INDEX NUMBER IS SCANNED OUT,VALIDITY CHECKED,CONVERTED TO  * 09830000
*  /** BINARY AND PLACED AT FDINDNUM IN THE FD TABLE.A BRANCH IS THEN * 09840000
*  /** TAKEN TO STEP POINTER AND TEST FOR LAST PARAMETER.INDEX BY NAME* 09850000
*  /** WHEN FOUND WILL BE PLACED AT FDINDNM IN TABLE.                 * 09860000
*  /**                                                                * 09870000
*  /******************************************************************* 09880000
*  F3E2:;                                                               09890000
*               R9 = R9 + 6              /* ADJUST POINTER*/;           09900000
F3E2     AH    @9,@D11                                            0381  09910000
*         IF REPSW = ON THEN DO          /* IS INDEX EXCLUDED */;       09920000
         CLC   543(1,@5),ON                                       0382  09930000
         BC    07,@9EE                                            0382  09940000
*  F3F2:        MS = 13                  /* YES SET MESSAGE*/;          09950000
F3F2     LA    @F,13                                              0384  09960000
         STH   @F,406(0,@5)                                       0384  09970000
*               GO TO F1B4               /* BRANCH TO EXIT*/;           09980000
         BC    15,F1B4                                            0385  09990000
*         END;                                                          10000000
*  /* COME HERE IF INDEX NOT EXCLUDED */                                10010000
*               INDEXSW = ON             /* INDICATE INDEXING*/;        10020000
@9EE     MVC   544(1,@5),ON                                       0387  10030000
*  /** CHANGE FOLLOWING INSTRUCTION TO GO TO F3F4 WHEN INDEXING BY **/  10040000
*  /** NAME IS ALLOWED**/                                               10050000
*         IF INBUF(1) =< 'Z' THEN GO TO F2H22 /**BRANCH NOT NUMBER**/;  10060000
         CLI   0(@9),C'Z'                                         0388  10070000
         BC    12,F2H22                                           0389  10080000
*  /* PROCESS NUMBER HERE NAME PROCESSED A F3F4*/                       10090000
*               CALL SCANOUT             /*SCAN OUT PARAMETER*/;        10100000
         BAL   @E,SCANOUT                                         0390  10110000
*               CALL VALCHECK            /**VALIDITY CHECK THE NUMBER** 10120000
         BAL   @E,VALCHECK                                        0391  10130000
*               CALL CONVB               /*CONVERT NUMBER TO BINARY*/;  10140000
         BAL   @E,CONVB                                           0392  10150000
*               FDINDNUM = R6            /*NUMBER TO TABLE*/;           10160000
         L     @1,596(0,@5)                                       0393  10170000
         ST    @6,20(0,@1)                                        0393  10180000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER*/;    10190000
         BC    15,STEPPTR                                         0394  10200000
*  /* INDEX BY NAME PROCESSED HERE */                                   10210000
*  F3F4:;                                                               10220000
*               INDNMSW = ON   /**INDEX BY NAME SW ON**/;               10230000
F3F4     MVC   545(1,@5),ON                                       0396  10240000
*               INDBYNAM = '1'B /**FD INDEX BY NAME SWITCH ON**/;       10250000
         L     @1,596(0,@5)                                       0397  10260000
         OI    32(@1),B'10000000'                                 0397  10270000
*  F3G4:;                                                               10280000
*               CALL SCANOUT             /*SCAN OUT PARAMETER*/;        10290000
F3G4     BAL   @E,SCANOUT                                         0399  10300000
*         IF INDNMSW = ON THEN DO        /*INDEXING BY NAME */;         10310000
         CLC   545(1,@5),ON                                       0400  10320000
         BC    07,@9ED                                            0400  10330000
*               FDINDNM = INBUF(1:R7)    /**YES-NAME TO TABLE**/;       10340000
         LR    @1,@7                                              0402  10350000
         BCTR  @1,0                                               0402  10360000
         LR    @E,@9                                              0402  10370000
         L     @2,596(0,@5)                                       0402  10380000
         LA    @A,16(0,@2)                                        0402  10390000
         MVI   0(@A),C' '                                         0402  10400000
         MVC   1(007,@A),0(@A)                                    0402  10410000
         EX    @1,@MVC                                            0402  10420000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER*/;    10430000
         BC    15,STEPPTR                                         0403  10440000
*         END;                                                          10450000
*  /* REPLACING HERE */                                                 10460000
*               FDREPNM = INBUF(1:R7)    /**REPNAME TO TABLE**/;        10470000
@9ED     LR    @1,@7                                              0405  10480000
         BCTR  @1,0                                               0405  10490000
         LR    @E,@9                                              0405  10500000
         L     @2,596(0,@5)                                       0405  10510000
         LA    @A,8(0,@2)                                         0405  10520000
         MVI   0(@A),C' '                                         0405  10530000
         MVC   1(007,@A),0(@A)                                    0405  10540000
         EX    @1,@MVC                                            0405  10550000
*               GO TO STEPPTR            /*BRANCH TO STEP POINTER*/;    10560000
         BC    15,STEPPTR                                         0406  10570000
*  /******************************************************************/ 10580000
*  /* REPLACE IS PROCESSED HRRE **********************************/     10590000
*  /******************************************************************/ 10600000
*  F3G2:;                                                               10610000
*         IF INDEXSW = ON THEN GO TO F3F2 /*BR IF REPLACE EXCLUDED*/;   10620000
F3G2     CLC   544(1,@5),ON                                       0408  10630000
         BC    08,F3F2                                            0409  10640000
*               REPSW = ON               /*TURN ON REPLACE SWITCH*/;    10650000
         MVC   543(1,@5),ON                                       0410  10660000
*               R9 = R9 + 8              /**ADJUST POINTER**/;          10670000
         AH    @9,@D8                                             0411  10680000
*               GO TO F3G4               /*BR TO SCAN OUT NAME*/;       10690000
         BC    15,F3G4                                            0412  10700000
*  /******************************************************************* 10710000
*  /**  THIS SECTION PROCESSES THE INPUT KEYWORD FOR FIELD SELECTION  * 10720000
*  /** THE NAME IS PLACED IN FDTBL AT REPNAME AND THEN COMPARED TO SEE* 10730000
*  /** IF THE NAME WAS PRESENT UPON THE DSD CARD EXCEPT WHEN SYSIN    * 10740000
*  /** MESSAGE 4 ISSUED IF NO MATCH.                                  * 10750000
*  /******************************************************************* 10760000
*  F3H1:;                                                               10770000
*               R9 = R9 + 6    /** POINT AT INPUT DDNAME    **/;        10780000
F3H1     AH    @9,@D11                                            0414  10790000
*               CALL SCANOUT   /**SCAN OUT NAME AND CHECK LENGTH**/;    10800000
         BAL   @E,SCANOUT                                         0415  10810000
*                              /**REG 9 POINTS AT START OF NAME**/      10820000
*                              /**REG 8 COMMA OR BLANK AFTER NAME**/    10830000
*                              /** REG 7 CONTAINS LENGTH **/            10840000
*         FDREPNM = INBUF(1:R7) /** MOVE DDNAME TO FD TABLE**/;         10850000
         LR    @1,@7                                              0416  10860000
         BCTR  @1,0                                               0416  10870000
         LR    @E,@9                                              0416  10880000
         L     @2,596(0,@5)                                       0416  10890000
         LA    @A,8(0,@2)                                         0416  10900000
         MVI   0(@A),C' '                                         0416  10910000
         MVC   1(007,@A),0(@A)                                    0416  10920000
         EX    @1,@MVC                                            0416  10930000
*         INPUTSW = ON;                                                 10940000
         MVC   789(1,@5),ON                                       0417  10950000
*         IF INBUF(1:5) = 'SYSIN' THEN DO /** DO BELOW IF SYSIN**/;     10960000
         CLC   0(5,@9),@C36                                       0418  10970000
         BC    07,@9EC                                            0418  10980000
*               SYSINSEL = ON  /** TURN ON SYSIN SEL SWITCH**/;         10990000
         MVC   636(1,@5),ON                                       0420  11000000
*               DCBPTR = ADDR(SYSI) /** POINT AT SYSIN DCB**/;          11010000
         LA    @F,116(0,@5)                                       0421  11020000
         ST    @F,300(0,@5)                                       0421  11030000
*               GO TO STEPPTR  /** BR TO CONTINUE PROCESSING**/;        11040000
         BC    15,STEPPTR                                         0422  11050000
*         END;                                                          11060000
* F3H3:                                                                 11070000
*         IF FIRSTGMI = 0 THEN DO /** IF NO INPUT DCB DO BELOW**/;      11080000
@9EC     EQU   *                                                  0424  11090000
F3H3     SR    @F,@F                                              0424  11100000
         C     @F,392(0,@5)                                       0424  11110000
         BC    07,@9EB                                            0424  11120000
*  F3H2:;                                                               11130000
*               MS = 4         /** INDICATE MESSAGE 4 **/;              11140000
F3H2     LA    @F,4                                               0427  11150000
         STH   @F,406(0,@5)                                       0427  11160000
*               GO TO F1B4     /** BRANCH TO EXIT THIS ROUTINE**/;      11170000
         BC    15,F1B4                                            0428  11180000
*         END;                                                          11190000
*               DCBPTR = FIRSTGMI /** PICK UP FIRST DCB ADDRESS**/;     11200000
@9EB     MVC   300(4,@5),392(@5)                                  0430  11210000
*  F3H5:;                                                               11220000
*         IF DDNAME1 = FDREPNM THEN DO /**IF NAME MATCHES DO BELOW**/;  11230000
F3H5     L     @1,596(0,@5)                                       0432  11240000
         L     @2,300(0,@5)                                       0432  11250000
         CLC   260(8,@2),8(@1)                                    0432  11260000
         BC    07,@9EA                                            0432  11270000
*               FIELDSEL = ON  /**TURN ON FIELD SELECT SWITCH **/;      11280000
         MVC   278(1,@2),ON                                       0434  11290000
*        IF INPUTSW = ON THEN DO ;      /* TEST IF ENTRY IS FIRST35464* 11300000
         CLC   789(1,@5),ON                                       0435  11310000
         BC    07,@9E9                                            0435  11320000
*               FDFROMAD = INREC ;      /* SAVE INREC IN FDTBL A35464 * 11330000
         MVC   44(4,@1),272(@2)                                   0437  11340000
*               GO TO STEPPTR ;         /* END OF INPUT CHECK  A35464 * 11350000
         BC    15,STEPPTR                                         0438  11360000
*         END ;                                             /* A35464 * 11370000
*         GO TO F5F31 ;                 /* END OF FD CARD      A35464 * 11380000
*         END;                                                          11390000
*         IF NEXTDCB = 0 THEN GO TO F3H2 /** IF NO MORE INPUT DCBS      11400000
@9EA     SR    @F,@F                                              0442  11410000
         L     @1,300(0,@5)                                       0442  11420000
         C     @F,256(0,@1)                                       0442  11430000
*                                             PRESENT FOR COMPARE-BR ** 11440000
         BC    08,F3H2                                            0443  11450000
*               DCBPTR = NEXTDCB /**PICK UP NEXT DCB POINTER**/;        11460000
         MVC   300(4,@5),256(@1)                                  0444  11470000
*               GO TO F3H5     /**BR TO KEEP LOOKING FOR DCB MATCH**/;  11480000
         BC    15,F3H5                                            0445  11490000
*  /******************************************************************* 11500000
*  /** THIS SECTION PLACES THE FROM LOCATION IN THE FD TABLE AT **/     11510000
*  /**  FDMLGTH  **/                                                    11520000
*  /******************************************************************* 11530000
*  F3J1:;                                                               11540000
*               R9 = R9 + 8    /** POINT AT PARAMETER**/;               11550000
F3J1     AH    @9,@D8                                             0447  11560000
*               CALL SCANOUT   /** SCAN OUT PARAMETER**/;               11570000
         BAL   @E,SCANOUT                                         0448  11580000
*               CALL VALCHECK  /**VALIDITY CHECK THE NUMBER**/;         11590000
         BAL   @E,VALCHECK                                        0449  11600000
*               CALL CONVB     /** CONVERT TO BINARY**/;                11610000
         BAL   @E,CONVB                                           0450  11620000
*         FDMLGTH = R6 - 1 /**ADJ NO.AND PUT IN TEMP LOCATION**/;       11630000
         LR    @F,@6                                              0451  11640000
         BCTR  @F,0                                               0451  11650000
         L     @1,596(0,@5)                                       0451  11660000
         STH   @F,48(0,@1)                                        0451  11670000
*               GO TO STEPPTR  /** BRANCH TO STEP POINTER**/;           11680000
         BC    15,STEPPTR                                         0452  11690000
*  /******************************************************************/ 11700000
*  /* PICTURE IS PROCESSED HERE **********************************/     11710000
*  /******************************************************************/ 11720000
*  /**    THIS SECTION BETWEEN LABELS OF F4A1 AND F5D2 WILL SCAN A    * 11730000
*  /** PICTURE AS INPUT ON CONTROL CARDS AND PLACE IT INTO A TEMPORARY* 11740000
*  /** AREA OF STORAGE FOR FURTHER PROCESSING.A GETMAIN IS FIRST      * 11750000
*  /** ISSUED TO HOLD THE PICTURE.AFTER SETTING A SWITCH TO INDICATE  * 11760000
*  /** THE TYPE OF PICTURE(EBCDIC,BINARY OR PACKED DECIMAL) THE       * 11770000
*  /** PICTURE IS PLACED AT SGCADDR AS IT IS SCANNED.THE PICTURE MAY  * 11780000
*  /** EXTEND FROM COLUMN FOUR THROUGH COLUMN 71.WHEN CONTINUED IT IS * 11790000
*  /** PICKED UP FROM COLUMN FOUR OF THE NEXT CARD.                   * 11800000
*  /**                                                                * 11810000
*  /**                                                                * 11820000
*  /******************************************************************* 11830000
*  F4A1:;                                                               11840000
*               /* THIS GET MAIN IS ISSUED TO OBTAIN CORE FOR PICTURE*/ 11850000
*               R1 = ADDR(GETMLIST)      /** PICK UP LIST ADDRESS    ** 11860000
F4A1     LA    @1,364(0,@5)                                       0454  11870000
*                              /*ISSUE GET MAIN MACRO*/                 11880000
*               R7 = ADDR(GCADDR)        /** PICK UP GCADDR ADDRESS  ** 11890000
         LA    @7,376(0,@5)                                       0455  11900000
*         GEN ( GETMAIN EC,LV=(R6),A=(R7),SP=0,MF=(E,(R1)));            11910000
          GETMAIN EC,LV=(R6),A=(R7),SP=0,MF=(E,(R1))                    11920000
         DS    0H                                                       11930000
*         IF R15 = 0 THEN GO TO F4A2     /*BRANCH ON SUCCESSFUL GM */;  11940000
         LTR   @F,@F                                              0457  11950000
         BC    08,F4A2                                            0458  11960000
*               MS = 10                  /*INDICATE MESSAGE*/;          11970000
         LA    @F,10                                              0459  11980000
         STH   @F,406(0,@5)                                       0459  11990000
*               GO TO F1B4               /*BRANCH TO EXIT */;           12000000
         BC    15,F1B4                                            0460  12010000
*  /******************************************************************* 12020000
*  /**                                                                * 12030000
*  /**    THIS SECTION INITILIZES COUNTERS AND ADDRESSES AND POINTS AT* 12040000
*  /** COMMA FOLLOWING LENGTH.IF COMMA IS IN COLUMN 71 THE FDPSW IS   * 12050000
*  /** TURNED ON AND CONTROL RETURNED TO THE BASE MODULE.CONTROL WILL * 12060000
*  /** RETURN TO F4B5 TO TEST FOR TYPE OF PICTURE.IF COMMA HAPPENS TO * 12070000
*  /** BE PAST COLUMN 71 A MSG IS INDICATED AND A BRANCH TAKEN TO FREE* 12080000
*  /** CORE AND EXIT AS THIS IS AN ERROR                              * 12090000
*  /**                                                                * 12100000
*  /******************************************************************* 12110000
*  F4A2:;                                                               12120000
*               LMOVED = 0     /**INITILIZE COUNTER***/;                12130000
F4A2     SR    @F,@F                                              0462  12140000
         STH   @F,620(0,@5)                                       0462  12150000
*         LREMAIN = FDPLGTH    /**INIT LREMAIN TO PICTURE LENGTH**/;    12160000
         LH    @F,588(0,@5)                                       0463  12170000
         ST    @F,612(0,@5)                                       0463  12180000
*         SGCADDR = GCADDR     /*SUCESSFUL GETMAIN HERE SAVE ADDRESS*/; 12190000
         MVC   592(4,@5),376(@5)                                  0464  12200000
*               FDPCSW = ON              /*TURN ON PIC SW */;           12210000
         MVC   538(1,@5),ON                                       0465  12220000
*               R9 = R8               /** POINT AT COMMA AFTER LENGTH** 12230000
         LR    @9,@8                                              0466  12240000
*         IF INBUF(1) ¬= ',' THEN GO TO F2A2 /**BR TO SET MESSAGE**/;   12250000
         CLI   0(@9),C','                                         0467  12260000
         BC    07,F2A2                                            0468  12270000
*  /* IS PICTURE IS INTERRUPTED AFTER LENGTH PARA BECAUSE COMMA IS IN * 12280000
*  /* COLUMN 71 REST OF PARAMETERS MUST START IN COLUMN 4 */            12290000
*         IF R9 = COUNTER THEN DO        /*ARE WE AT COL 71*/;          12300000
         C     @9,232(0,@5)                                       0469  12310000
         BC    07,@9E8                                            0469  12320000
*               FDPSW = ON               /*YES-CONT PICT AFTER LGTH*/;  12330000
         MVC   549(1,@5),ON                                       0471  12340000
*               RETURN                   /*RETURN TO IEBDG*/;           12350000
         BC    15,@EL01                                           0472  12360000
*         END;                                                          12370000
*         IF R9 > COUNTER THEN DO        /*ARE WE PAST COL 71*/;        12380000
@9E8     C     @9,232(0,@5)                                       0474  12390000
         BC    12,@9E7                                            0474  12400000
*               MS = 21                  /*YES SET MSG*/;               12410000
         LA    @F,21                                              0476  12420000
         STH   @F,406(0,@5)                                       0476  12430000
*               GO TO F4E1          /**BRANCH TO FREEMAIN**/;           12440000
         BC    15,F4E1                                            0477  12450000
*         END;                                                          12460000
*  /******************************************************************* 12470000
*  /**                                                                * 12480000
*  /**    THIS SECTION STEPS THE POINTER PAST THE COMMA FOLLOWING     * 12490000
*  /** LENGTH OR IN CASE PICTURE WAS CONTINUED AFTER THE LENGTH SUB-  * 12500000
*  /** PARAMETER TO COLUMN FOUR.THE TYPE OF PICTURE IS INDICATED BY   * 12510000
*  /** SETTING  EQUOTESW,BQUOTESW OR PQUOTESW.THE POINTER IS THEN     * 12520000
*  /** ADVANCED TO THE QUOTE.IF QUOTE IS IN COLUMN 71 CONTROL IS      * 12530000
*  /** RETURNED TO GET ANOTHER CARD.CONTROL WILL RETURN TO F4E3 TO SET* 12540000
*  /** UP FOR SCANNING PICTURE,OTHERWISE WE GO TO F4E3.               * 12550000
*  /**                                                                * 12560000
*  /******************************************************************* 12570000
*  F4B5:;                                                               12580000
@9E7     EQU   *                                                  0479  12590000
*               R9 = R9 + 1              /*POINT PAST COMMA*/;          12600000
F4B5     AH    @9,@D3                                             0480  12610000
*        IF INBUF(1) = '''' THEN DO /**IF EBCDIC DO BELOW**/;           12620000
         CLI   0(@9),C''''                                        0481  12630000
         BC    07,@9E6                                            0481  12640000
*              EQUOTESW = ON        /**TURN ON EQUOTE SWITCH**/;        12650000
         MVC   548(1,@5),ON                                       0483  12660000
*               GO TO F4D3     /**BRANCH TO PROCESS EBCDIC PICTURE**/;  12670000
         BC    15,F4D3                                            0484  12680000
*        END ;                                                          12690000
*         IF INBUF(1:2) = 'B''' THEN GO TO F4C2 /* BR IF B'*/;          12700000
@9E6     CLC   0(2,@9),@C37                                       0486  12710000
         BC    08,F4C2                                            0487  12720000
*         IF INBUF(1:2) = 'P''' THEN GO TO F4C5 /**BR IF P QUOTE**/;    12730000
         CLC   0(2,@9),@C38                                       0488  12740000
         BC    08,F4C5                                            0489  12750000
*         IF INBUF(1) = ' '         /* BLANK AFTER LENGTH PARAM A44355* 12760000
*            THEN DO ;              /* CHECK IF CONTINUATION    A44355* 12770000
         CLI   0(@9),C' '                                         0490  12780000
         BC    07,@9E5                                            0490  12790000
*            IF FDPSW = ON THEN DO; /*IS THIS A CONTINUATION  @ZA24045* 12800000
         CLC   549(1,@5),ON                                       0492  12810000
         BC    07,@9E4                                            0492  12820000
*                    /*THEN LOOK FOR A NON-BLANK IN THIS CARD @ZA24045* 12830000
*               IF R9 => COUNTER THEN DO; /*IF PAST COL 71    @ZA24045* 12840000
         C     @9,232(0,@5)                                       0494  12850000
*                                   /*CONTINUE WITH NEXT CARD @ZA24045* 12860000
*                  RETURN ;         /*RETURN TO IEBDG         @ZA24045* 12870000
         BC    11,@EL01                                           0496  12880000
*               END ;                                       /*@ZA24045* 12890000
*               GO TO F4B5;         /*LOOK FOR A NON-BLANK    @ZA24045* 12900000
         BC    15,F4B5                                            0498  12910000
*            END ;                                          /*@ZA24045* 12920000
*               IF COUNTER -> INBUF(2) ¬= ' '               /*  A44355* 12930000
*                  THEN DO ;        /* CONTINUATION REQUIRED    A44355* 12940000
@9E4     L     @1,232(0,@5)                                       0500  12950000
         CLI   1(@1),C' '                                         0500  12960000
         BC    08,@9E2                                            0500  12970000
*                     FDPSW = ON ;  /* PICTURE CONT. SW ON      A44355* 12980000
         MVC   549(1,@5),ON                                       0502  12990000
*                     RETURN ;      /* RETURN TO IEBDG FOR NEXT A44355* 13000000
         BC    15,@EL01                                           0503  13010000
*               END ;               /* OTHERWISE THE BLANK IS   A44355* 13020000
*         END ;                     /* AN ERROR                 A44355* 13030000
@9E2     EQU   *                                                  0505  13040000
*               MS = 21                  /* NO PARA SET MSG*/;          13050000
@9E5     LA    @F,21                                              0506  13060000
         STH   @F,406(0,@5)                                       0506  13070000
*               GO TO F4E1               /*BR TO FREEMAIN */;           13080000
         BC    15,F4E1                                            0507  13090000
*  F4C2:;                                                               13100000
*               FDPSW = OFF;        /*TURN OFF FDPSW          @ZA24045* 13110000
F4C2     MVC   549(1,@5),OFF                                      0509  13120000
*               BQUOTESW = ON            /*TURN ON BQUOTE SW */;        13130000
         MVC   546(1,@5),ON                                       0510  13140000
*  F4C21:;                                                              13150000
*               R9 = R9 + 1              /*ADVANCE PTR TO QUOTE*/;      13160000
F4C21    AH    @9,@D3                                             0512  13170000
*               GO TO F4D3     /** BRANCH TO PROCESS NUMBER**/;         13180000
         BC    15,F4D3                                            0513  13190000
*  F4C5:;                                                               13200000
*               FDPSW = OFF;             /*TURN OFF FDPSW     @ZA24045* 13210000
F4C5     MVC   549(1,@5),OFF                                      0515  13220000
*               PQUOTESW = ON            /*TURN ON PQUOTE SW */;        13230000
         MVC   547(1,@5),ON                                       0516  13240000
*               GO TO F4C21              /*BR TO ADVANCE PTR*/;         13250000
         BC    15,F4C21                                           0517  13260000
*  /******************************************************************* 13270000
*  /**                                                                * 13280000
*  /**    AT THIS POINT R9 SHOULD BE POINTING AT THE LEADING QUOTE IN * 13290000
*  /**THE PICTURE STRING.IF THE QUOTE HAPPENS TO BE IN COL 71,WHICH  ** 13300000
*  /** IS INDICATED BY R9 AND COUNTER BEING EQUAL,THE FDPCSW WILL BE  * 13310000
*  /** SET ON AND A RETURN ISSUED TO GO BACK TO THE BASE MODULE.      * 13320000
*  /**                                                                * 13330000
*  /******************************************************************* 13340000
*  F4D3:;                                                               13350000
*               FDPSW = OFF;      /*TURN OFF FDPSW            @ZA24045* 13360000
F4D3     MVC   549(1,@5),OFF                                      0519  13370000
*         IF R9 = COUNTER THEN DO /**IF POINTER NOT AT COL 71 BRANCH**/ 13380000
         C     @9,232(0,@5)                                       0520  13390000
         BC    07,@9E1                                            0520  13400000
*               FDPCSW = ON    /**TURN ON FDPCSW**/;                    13410000
         MVC   538(1,@5),ON                                       0522  13420000
*                              /**BRANCH TO RETURN POINT**/             13430000
*               RETURN;                                                 13440000
         BC    15,@EL01                                           0523  13450000
*         END;                                                          13460000
*  F4E3:;                                                               13470000
@9E1     EQU   *                                                  0525  13480000
*               R7 = GCADDR + LMOVED /**PICTURE GOES INTO THIS AREA**/; 13490000
F4E3     LH    @7,620(0,@5)                                       0526  13500000
         A     @7,376(0,@5)                                       0526  13510000
*               FDPSW = OFF    /**TURN OFF FDPSW WE ARE PAST LENGTH**/; 13520000
         MVC   549(1,@5),OFF                                      0527  13530000
*               R9 = R9 + 1              /*POINT AT FIRST CHAR*/;       13540000
         AH    @9,@D3                                             0528  13550000
*               R8 = R9                  /*COPY POINTER*/;              13560000
         LR    @8,@9                                              0529  13570000
*  /******************************************************************* 13580000
*  /**                                                                * 13590000
*  /** THIS SECTION WILL TEST FOR ALL OF THE PICTURE BEING MOVED.THIS * 13600000
*  /** SECTION MAY BE ENTERED AS A RESULT OF THE FDPCSW BEING ON,WHICH* 13610000
*  /** ORDINARILY MEANS A NORMAL PICTURE CONTINUATION.THE ONE CASE NOT* 13620000
*  /** COVERED IS WHEN THE END OF THE PICTURE COINCIDES WITH COL 71.  * 13630000
*  /** IN THIS CASE COL 4 OF THE NEXT CARD SHOULD CONTAIN A QUOTE.AT  * 13640000
*  /** THIS TIME R6 SHOULD BE ZERO.IF ZERO,THE SCAN POINTER IS INC BY * 13650000
*  /** ONE AND A BRANCH IS TAKEN TO SCAN FOR MORE PARAMETERS.IF R6 IS * 13660000
*  /** ZERO AND NO QUOTE IS FOUND IN COL 4 A BRANCH IS TAKEN TO SET   * 13670000
*  /** MESSAGE NUMBER AND FREE CORE NO LONGER NEEDED FOR THE PICTURE  * 13680000
*  /**                                                                * 13690000
*  /******************************************************************* 13700000
*         IF R6 = 0 THEN DO    /**BRANCH IF R6 NOT ZERO**/;             13710000
         LTR   @6,@6                                              0530  13720000
         BC    07,@9E0                                            0530  13730000
*         IF INBUF(1) = '''' THEN DO /**IF QUOTE IN COL 4 DO BELOW**/;  13740000
         CLI   0(@9),C''''                                        0532  13750000
         BC    07,@9DF                                            0532  13760000
*               R9 = R9 + 1    /**INCREMENT SCAN POINTER BY ONE**/;     13770000
         AH    @9,@D3                                             0534  13780000
*               FDPCSW = OFF   /**TURN OFF FDPCSW**/;                   13790000
         MVC   538(1,@5),OFF                                      0535  13800000
*               FDPSW = OFF    /**TURN OFF FDPSW**/;                    13810000
         MVC   549(1,@5),OFF                                      0536  13820000
*               GO TO F2A1     /**BRANCH TO SCAN FOR MORE PARAMETERS**/ 13830000
         BC    15,F2A1                                            0537  13840000
*         END;                                                          13850000
*               GO TO F4G11    /**BRANCH TO SET MSG AND FREE CORE**/;   13860000
*         END;                                                          13870000
*                              /**COME HERE IF R6 NOT ZERO **/          13880000
*  /******************************************************************* 13890000
*  /**                                                                * 13900000
*  /**    THIS SECTION SCANS OUT THE ACTUAL PICTURE. REG6 IS USED TO  * 13910000
*  /** COUNT THE LENGTH. IT IS DECREMENTED BY ONE  IN THIS LOOP,IF IT * 13920000
*  /** BECOMES ZERO THIS INDICATES THE END OF THE PICTURE AND A BRANCH* 13930000
*  /** IS TAKEN TO F4G1 TO LOOK FOR THE QUOTE WHICH MUST FOLLOW THE   * 13940000
*  /** PICTURE. REG8 IS INCREMENTED BY ONE UNTIL COLUMN 71 IS REACHED.* 13950000
*  /**     IF COLUMN 71 IS ENCOUNTERED BEFORE THE COUNT BECOMES ZERO, * 13960000
*  /**  A BRANCH IS TAKEN TO MOVE THE CHARACTERS SCANNED.             * 13970000
*  /**                                                                * 13980000
*  /******************************************************************* 13990000
*  F4F3:;                                                               14000000
@9E0     EQU   *                                                  0541  14010000
*               R8 = R8 + 1              /*ADVANCE POINTER*/;           14020000
F4F3     AH    @8,@D3                                             0542  14030000
*               R6 = R6 - 1              /*SUBT ONE FROM LENGTH*/;      14040000
         BCTR  @6,0                                               0543  14050000
*         IF R6 = 0 THEN GO TO F4G1      /*BR TO F4G1 IF LGTH NOW ZERO* 14060000
         LTR   @6,@6                                              0544  14070000
         BC    08,F4G1                                            0545  14080000
*         IF R8 ¬= COUNTER THEN GO TO F4F3 /**BR NOT AT COL 71 **/;     14090000
         C     @8,232(0,@5)                                       0546  14100000
         BC    07,F4F3                                            0547  14110000
*               GO TO F4G4          /** BRANCH TO MOVE PICTURE**/;      14120000
         BC    15,F4G4                                            0548  14130000
*  F4G5:;                                                               14140000
*                                   /**MOVE PICTURE TO HOLD AREA**/     14150000
*         GEN ( MVC 0(1,R7),0(R9));                                     14160000
F4G5      MVC 0(1,R7),0(R9)                                             14170000
         DS    0H                                                       14180000
*  /******************************************************************* 14190000
*  /**                                                                * 14200000
*  /**    THIS SECTION OBTAINS THE LENGTH TO MOVE AND ADDS THE LENGTH * 14210000
*  /** TO BE MOVED TO LMOVED( ZEROED AR START). LREMAIN IS CALCULATED * 14220000
*  /** AND PICTURE IS MOVED TO THE TEMPORARY HOLD AREA(SGCADDR). THE  * 14230000
*  /** FDPCSW IS TURNED ON(INDICATES MORE TO SCAN) AND CONTROL IS     * 14240000
*  /** RETURNED TO THE BASE MODULE.                                   * 14250000
*  /**                                                                * 14260000
*  /******************************************************************* 14270000
*  F4G4:;                                                               14280000
*               R6 = R8 - R9 + 1 /**OBTAIN LENGTH TO MOVE **/;          14290000
F4G4     LA    @6,1                                               0552  14300000
         SR    @6,@9                                              0552  14310000
         AR    @6,@8                                              0552  14320000
*               LMOVED = LMOVED + R6 /**COUNT LENGTH MOVED**/;          14330000
         LR    @F,@6                                              0553  14340000
         AH    @F,620(0,@5)                                       0553  14350000
         STH   @F,620(0,@5)                                       0553  14360000
*         LREMAIN = LREMAIN - R6 /**DETERMINE LENGTH LEFT IN PICTURE**/ 14370000
         LCR   @F,@6                                              0554  14380000
         A     @F,612(0,@5)                                       0554  14390000
         ST    @F,612(0,@5)                                       0554  14400000
*               R6 = R6 -1          /** CORRECT THE LENGTH TO MOVE**/;  14410000
         BCTR  @6,0                                               0555  14420000
*  /* THIS MOVES CHARACTERS SCANNED TO PICTURE AREA*/                   14430000
*         GEN ( EX R6,F4G5);                                            14440000
          EX R6,F4G5                                                    14450000
         DS    0H                                                       14460000
*               FDPCSW = ON         /**TURN ON PICTURE CONT SWITCH**/;  14470000
         MVC   538(1,@5),ON                                       0557  14480000
*         RETURN;                                                       14490000
         BC    15,@EL01                                           0558  14500000
*  /******************************************************************* 14510000
*  /**                                                                * 14520000
*  /**    THIS SECTION TESTS FOR THE QUOTE FOLLOWING THE PICTURE AND  * 14530000
*  /** IF FOUND,A BRANCH IS TAKEN TO MOVE THE LAST OF THE PICTURE.    * 14540000
*  /** OTHERWISE, THE MESSAGE IS INDICATED, POINTER IS SET FOR        * 14550000
*  /** FLAGGING. CONTROL THEN GOES TO THE NEXT SECTION.               * 14560000
*  /**                                                                * 14570000
*  /******************************************************************* 14580000
*  F4G1:;                                                               14590000
*         IF R8 -> INBUF(1) = '''' THEN GO TO F4H1 /**BR TO MOVE REST** 14600000
F4G1     CLI   0(@8),C''''                                        0560  14610000
         BC    08,F4H1                                            0561  14620000
*  /**    IF R8 IS GT COUNTER ALL OF PICTURE IS SCANNED**/              14630000
*         IF R8 > COUNTER THEN GO TO F4H1; /**BR PICTURE IS SCANNED**/  14640000
         C     @8,232(0,@5)                                       0562  14650000
         BC    02,F4H1                                            0563  14660000
*  F4G11:;                                                              14670000
*               MS = 3                   /* INDICATE MESSAGE*/;         14680000
F4G11    LA    @F,3                                               0565  14690000
         STH   @F,406(0,@5)                                       0565  14700000
*               R9 = R8                  /*SET POINTER FOR FLAG*/;      14710000
         LR    @9,@8                                              0566  14720000
*  /******************************************************************* 14730000
*  /**                                                                * 14740000
*  /**    THIS SECTION FREES CORE OBTAINED FOR TEMPORARY STORAGE OF   * 14750000
*  /** THE PICTURE. A BRANCH IS THEN TO EXIT THIS ROUTINE.            * 14760000
*  /* THIS WILL FREE CORE OBTAINED TO HOLD PICTURE IT IS IN ERROR*/     14770000
*  /**                                                                * 14780000
*  /******************************************************************* 14790000
*  F4E1:;                                                               14800000
*               R6 = FDPLGTH             /*PICK UP AMOUNT TO FREE*/;    14810000
F4E1     LH    @6,588(0,@5)                                       0568  14820000
*               R7 = ADDR(GCADDR)   /**PICK UP ADDRESS**/;              14830000
         LA    @7,376(0,@5)                                       0569  14840000
*               R1 = ADDR(GETMLIST)      /*PICK UP LIST ADDR*/;         14850000
         LA    @1,364(0,@5)                                       0570  14860000
*  GEN ( FREEMAIN E,LV=(R6),A=(R7),SP=0,MF=(E,(1)));                    14870000
          FREEMAIN E,LV=(R6),A=(R7),SP=0,MF=(E,(1))                     14880000
         DS    0H                                                       14890000
*               GO TO F1B4               /*BRANCH TO EXIT */;           14900000
         BC    15,F1B4                                            0572  14910000
*  /******************************************************************* 14920000
*  /**                                                                * 14930000
*  /**    THIS SECTION MOVES REMAINING PART OF PICTURE OR ALL OF IT   * 14940000
*  /** IN CASE IT WAS CONTAINED ON  ONE CARD. THE PICTURE SWITCHES ARE* 14950000
*  /** THEN TURNED OFF,POINTER ADVANCED TO COLUMN PAST QUOTE  AND  A  * 14960000
*  /** BRANCH TAKEN TO CONTINUE PROCESSING.                           * 14970000
*  /**                                                                * 14980000
*  /******************************************************************* 14990000
*  F4H1:;                                                               15000000
*               R6 = R8 - R9             /*OBTAIN LGTH TO MOVE*/;       15010000
F4H1     LCR   @6,@9                                              0574  15020000
         AR    @6,@8                                              0574  15030000
*               R6 = R6 - 1    /**TO CORRECT THE LENGTH**/;             15040000
         BCTR  @6,0                                               0575  15050000
*                                        /*MOVE REMAINING CHARACTERS*/  15060000
*          GEN ( EX R6,F4G5);                                           15070000
          EX R6,F4G5                                                    15080000
         DS    0H                                                       15090000
*               FDPSW  = OFF   /**TURN OFF PICTURE SWITCH**/;           15100000
         MVC   549(1,@5),OFF                                      0577  15110000
*  /** IF HOWEVER LAST CHARACTER OF PICTURE WAS IN COLUMN 71 WE MUST  * 15120000
*  /** EXPECT QUOTE IN COLUMN 4 OF NEXT CARD**/                         15130000
*         IF R8 > COUNTER THEN DO; /**IS R8 PAST COLUMN 71**/           15140000
         C     @8,232(0,@5)                                       0578  15150000
         BC    12,@9DE                                            0578  15160000
*               LREMAIN = 0;   /** SET LENGTH REMAINING TO ZERO**/      15170000
         SR    @F,@F                                              0580  15180000
         ST    @F,612(0,@5)                                       0580  15190000
*               FDPCSW = ON;   /**TURN ON PICT CONT SWITCH**/           15200000
         MVC   538(1,@5),ON                                       0581  15210000
*               RETURN;        /** BRANCH TO RETURN TO BASE**/          15220000
         BC    15,@EL01                                           0582  15230000
*         END;                                                          15240000
*               FDPCSW = OFF   /**TURN OFF PICTURE SWITCH**/;           15250000
@9DE     MVC   538(1,@5),OFF                                      0584  15260000
*               R9 = R8 + 1    /*POINTER TO COLUMN PAST QUOTE*/;        15270000
         LA    @9,1                                               0585  15280000
         AR    @9,@8                                              0585  15290000
*               GO TO F2A1     /*BRANCH TO CONTINUE PROCESSING*/;       15300000
         BC    15,F2A1                                            0586  15310000
*  /******************************************************************* 15320000
*  /**                                                                * 15330000
*  /**    THIS SECTION STARTS THE PROCESSING OF THE FD TABLE AFTER    * 15340000
*  /** ALL PARAMETERS HAVE BEEN SCANNED FROM THE CARD. LENGTH AND NAME* 15350000
*  /** MUST BE PRESENT. IF EITHER ONE IS MISSING, A MESSAGE IS        * 15360000
*  /** INDICATED AND  A BRANCH TAKEN TO EXIT THE ROUTINE. A LINK      * 15370000
*  /** MACRO IS THEN ISSUED FOR IEBFDTBL TO COMPLETE THE PROCESSING   * 15380000
*  /** REQUIRED. UPON RETURN FROM THE TABLE PROCESSING ROUTINE,       * 15390000
*  /** CONTROL IS PASSED TO THE BASE MODULE.                          * 15400000
*  /**                                                                * 15410000
*  /******************************************************************* 15420000
*  F5D2:;                                                               15430000
*         IF FDLGTH = '0000'X THEN DO /*IF NO LGTH DO FOLLOWING*/;      15440000
F5D2     L     @F,@X39                                            0588  15450000
         L     @1,596(0,@5)                                       0588  15460000
         CH    @F,24(0,@1)                                        0588  15470000
         BC    07,@9DD                                            0588  15480000
*  F5D3:        MS = 15                  /* SET MESSAGE */;             15490000
F5D3     LA    @F,15                                              0590  15500000
         STH   @F,406(0,@5)                                       0590  15510000
*               GO TO F1B4               /* BRANCH TO EXIT*/;           15520000
         BC    15,F1B4                                            0591  15530000
*         END;                                                          15540000
*  F5E2:;                                                               15550000
@9DD     EQU   *                                                  0593  15560000
*                                        /*BRANCH IF NAME IS MISSING*/  15570000
*         IF FDNAME = '0000000000000000'X THEN GO TO F5D3 ;             15580000
F5E2     L     @1,596(0,@5)                                       0594  15590000
         CLC   0(8,@1),@X40                                       0594  15600000
         BC    08,F5D3                                            0595  15610000
*  /** THIS SECTION WILL TEST FOR THE INPUT DDNAME BEING PRESENT      * 15620000
*  /** WHICH WILL INDICATE FIELD SELECTION IS TO BE PERFORMAD.        * 15630000
*  /** THE DDNAME WAS PLACED AT FDREPNM IN THE TABLE.IF PRESENT THE   * 15640000
*  /** DCBPTR SHOULD STILL BE POINTING AT THE PROPER INPUT DCB.       * 15650000
*  /** ACTION WILL BE MADE FIXED.IF RECFM IS 'V', FOUR IS ADDED TO THE* 15660000
*  /** FROM LOCATION.FROM LOCATION IS ACCESSED AT ITS TEMPORARY       * 15670000
*  /** LOCATION FDMLGTH AND PLACED IN FDFROMAD                        * 15680000
*  F5F1:;                                                               15690000
*   IF FDREPNM(1) ¬= '00'X THEN DO ;                                    15700000
F5F1     L     @1,596(0,@5)                                       0597  15710000
         CLI   8(@1),X'00'                                        0597  15720000
         BC    08,@9DC                                            0597  15730000
*               FXACTION = '1'B /** TURN ON FIXED ACTION SW **/;        15740000
         OI    32(@1),B'00100000'                                 0599  15750000
*    FDFROMAD = FDMLGTH + FDFROMAD /* ADD FROMLOC TO INPUT REC A35464*/ 15760000
         L     @F,44(0,@1)                                        0600  15770000
         LH    @0,48(0,@1)                                        0600  15780000
         ALR   @F,@0                                              0600  15790000
         ST    @F,44(0,@1)                                        0600  15800000
*         IF FDREPNM(1:5) = 'SYSIN' THEN DO /**DO BELOW IF SYSIN**/;    15810000
         CLC   8(5,@1),@C36                                       0601  15820000
         BC    07,@9DB                                            0601  15830000
*         FDFROMAD = FDMLGTH + ADDR(INBUFA) /** INITILIZE FROM ADDRESS  15840000
*                                              FOR SYSIN ONLY**/;       15850000
         LA    @F,418(0,@5)                                       0603  15860000
         AH    @F,48(0,@1)                                        0603  15870000
         ST    @F,44(0,@1)                                        0603  15880000
*         IF FDLGTH + FDMLGTH > 80 THEN DO /**IS FIELD IN RECORD**/;    15890000
         LH    @F,48(0,@1)                                        0604  15900000
         AH    @F,24(0,@1)                                        0604  15910000
         CH    @F,@D13                                            0604  15920000
         BC    12,@9DA                                            0604  15930000
*  F5F3:;                                                               15940000
*               MS = 16        /** NO-INDICATE MESSAGE 16 **/;          15950000
F5F3     LA    @F,16                                              0607  15960000
         STH   @F,406(0,@5)                                       0607  15970000
*               GO TO F1B411   /** BRANCH TO EXIT THIS ROUTINE**/;      15980000
         BC    15,F1B411                                          0608  15990000
*         END;                                                          16000000
*               GO TO F5F4     /** BRANCH AROUND NEXT TEST**/;          16010000
*         END;                                                          16020000
*         INPUTSW = OFF;                                                16030000
@9DB     MVC   789(1,@5),OFF                                      0612  16040000
*         GO TO F3H3;                                                   16050000
         BC    15,F3H3                                            0613  16060000
* F5F31:                                                                16070000
*         IF FDLGTH + FDMLGTH > GMLGTH THEN GO TO F5F3 /**IS FIELD IN   16080000
F5F31    L     @1,596(0,@5)                                       0614  16090000
         LH    @F,48(0,@1)                                        0614  16100000
         AH    @F,24(0,@1)                                        0614  16110000
         L     @2,300(0,@5)                                       0614  16120000
         CH    @F,276(0,@2)                                       0614  16130000
*                                                         RECORD     ** 16140000
         BC    02,F5F3                                            0615  16150000
*  F5F4:;                                                               16160000
*         IF RECFM(1) = '1'B THEN GO TO F5F6 /**BR ITS NOT 'V' FMT**/;  16170000
F5F4     L     @1,300(0,@5)                                       0617  16180000
         TM    36(@1),B'10000000'                                 0617  16190000
         BC    01,F5F6                                            0618  16200000
*         IF RECFM(2) ¬= '1'B THEN GO TO F5F6 /**BR ITS NOT 'V' FMT**/; 16210000
         TM    36(@1),B'01000000'                                 0619  16220000
         BC    12,F5F6                                            0620  16230000
*         FDFROMAD = FDFROMAD + 4 /** ADJUST FR ADDRESS FOR 'V'**/;     16240000
         LA    @F,4                                               0621  16250000
         L     @2,596(0,@5)                                       0621  16260000
         AL    @F,44(0,@2)                                        0621  16270000
         ST    @F,44(0,@2)                                        0621  16280000
*  F5F6:;                                                               16290000
*               FDMLGTH = FDLGTH  /** INIT MLGTH FOR CREATE**/;         16300000
F5F6     L     @1,596(0,@5)                                       0623  16310000
         MVC   48(2,@1),24(@1)                                    0623  16320000
*        SWITCH(1:14) = SWITCH(1:14) && SWITCH(1:14); /* SW OFF A48971* 16330000
         XC    536(14,@5),536(@5)                                 0624  16340000
*         RETURN;                                                       16350000
         BC    15,@EL01                                           0625  16360000
*         END;                                                          16370000
*               FDMLGTH = FDLGTH /**INIT MOVE LENGTH FOR CREATE**/;     16380000
@9DC     L     @1,596(0,@5)                                       0627  16390000
         MVC   48(2,@1),24(@1)                                    0627  16400000
*         GEN ( LINK EP=IEBFDTBL);                                      16410000
          LINK EP=IEBFDTBL                                              16420000
         DS    0H                                                       16430000
*               RETURN;                                                 16440000
*  SCANOUT: PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                     16450000
@EL01    L     @D,4(0,@D)                                         0630  16460000
         LR    @1,@C                                              0630  16470000
         L     @0,@SIZ001                                         0630  16480000
         FREEMAIN R,LV=(0),A=(1)                                  0630  16490000
         L     @E,12(0,@D)                                        0630  16500000
         LM    @0,@8,20(@D)                                       0630  16510000
         LM    @A,@C,60(@D)                                       0630  16520000
         BCR   15,@E                                              0630  16530000
SCANOUT  EQU   *                                                  0630  16540000
*                              /*************************************** 16550000
*                              /** THIS PROCEDURE WILL FIND THE LGTH ** 16560000
*                              /** OF THE PARAMETER FOLLOWING THE    ** 16570000
*                              /** EQUAL SIGN.UPON ENTRY REG 9 SHOULD** 16580000
*                              /** BE POINTING AT START OF PARAMETER ** 16590000
*                              /** UPON EXIT REGISTERS ARE AS FOLLOWS** 16600000
*                              /**                                   ** 16610000
*                              /** REG  7  EQUALS LENGTH OF PARA     ** 16620000
*                              /** REG  8  COMMA OR BLANK AFTER PARA ** 16630000
*                              /** REG  9  START OF PARAMETER        ** 16640000
*                              /**                                   ** 16650000
*                              /*************************************** 16660000
*               R8 = R9                  /*COPY SCAN POINTER */;        16670000
         LR    @8,@9                                              0631  16680000
*       IF R8 -> INBUF(1) = ' ' THEN                                    16690000
         CLI   0(@8),C' '                                         0632  16700000
*         GO TO MESS3;                                                  16710000
         BC    08,MESS3                                           0633  16720000
*  SCANOUT1:;                                                           16730000
*         R8 = R8 + 1                    /*INC PTR BY ONE*/;            16740000
SCANOUT1 AH    @8,@D3                                             0635  16750000
*       IF R8 -> INBUF(1) = ' ' THEN GO TO SCANOUT2 /*BR IF BLANK*/;    16760000
         CLI   0(@8),C' '                                         0636  16770000
         BC    08,SCANOUT2                                        0637  16780000
*  /*                                                        */         16790000
* /* CHECK IF PAST COL 72                                      A38710 * 16800000
*        IF R8 > COUNTER +1 THEN  /*                           A38710 * 16810000
         LA    @F,1                                               0638  16820000
         A     @F,232(0,@5)                                       0638  16830000
         CR    @F,@8                                              0638  16840000
*         GO TO MESS21;                                                 16850000
         BC    04,MESS21                                          0639  16860000
*       IF R8 -> INBUF(1) = ',' THEN GO TO SCANOUT2 /*BR IF COMMA*/;    16870000
         CLI   0(@8),C','                                         0640  16880000
         BC    08,SCANOUT2                                        0641  16890000
*         GO TO SCANOUT1;                                               16900000
         BC    15,SCANOUT1                                        0642  16910000
* MESS21:                                                               16920000
*               MS  =  21                       /** INDICATE MESSAGE ** 16930000
MESS21   LA    @F,21                                              0643  16940000
         STH   @F,406(0,@5)                                       0643  16950000
*               GO TO F1B4                /** BRANCH TO EXIT ROUTINE ** 16960000
         BC    15,F1B4                                            0644  16970000
*  /*                                                        */         16980000
*  SCANOUT2:;                                                           16990000
*               /* R8 SHOULD BE POINTING AT BLANK OR COMMA*/            17000000
*               R7 = R8 - R9           /** CALCULATE PARAMETER LENGTH** 17010000
SCANOUT2 LCR   @7,@9                                              0646  17020000
         AR    @7,@8                                              0646  17030000
*         IF R7 = 0 THEN DO    /**BR WHEN LENGTH IS NOT EQUAL TO ZERO** 17040000
         LTR   @7,@7                                              0647  17050000
         BC    07,@9D9                                            0647  17060000
*   MESS3:                                                              17070000
*               MS = 3         /** INDICATE MESSAGE**/;                 17080000
MESS3    LA    @F,3                                               0649  17090000
         STH   @F,406(0,@5)                                       0649  17100000
*               GO TO F1B4               /*BRANCH TO EXIT IEBFDANL*/;   17110000
         BC    15,F1B4                                            0650  17120000
*         END;                                                          17130000
*                              /** LGTH GT EIGHT- NAME IS TOO LONG   ** 17140000
*         IF R7 > 8 THEN DO    /** BR IF LENGTH LT,EQ TO 8           ** 17150000
@9D9     CH    @7,@D8                                             0652  17160000
         BC    12,@9D8                                            0652  17170000
*               MS = 12        /** INDICATE MESSAGE NUMBER 12 **/;      17180000
         LA    @F,12                                              0654  17190000
         STH   @F,406(0,@5)                                       0654  17200000
*               GO TO F1B4               /** BRANCH TO EXIT ROUTINE  ** 17210000
         BC    15,F1B4                                            0655  17220000
*         END;                                                          17230000
*               RETURN    /* RETURN TO CALLER WITH REGISTERS SET*/;     17240000
*  END SCANOUT;                                                         17250000
@EL02    BCR   15,@E                                              0658  17260000
*  /*                                    */                             17270000
*  /******************************************************************* 17280000
*  /**                                                                * 17290000
*  /** THIS PROCEDURE WILL CONVERT AN EBCDIC NUMBER FROM THE INPUT    * 17300000
*  /** WORKAREA TO BINARY.THE NUMBER IS TESTED BEFORE CONVERSION FOR  * 17310000
*  /** 2147483647.THE LARGEST BINARY NUMBER A REGISTER CAN CONTAIN IS * 17320000
*  /** THIS NUMBER.THIS NUMBER MUST BE VALIDITY CHECKED BEFORE ENTRY  * 17330000
*  /** TO THIS ROUTINE OR THE CVB INSTRUCTION MAY FAIL.               * 17340000
*  /** UPON ENTRY REG 9 POINTS AT START OF EBCDIC NUMBER IN INBUF     * 17350000
*  /** UPON ENTRY REG 7 CONTAINS LENGTH OF NUMBER                     * 17360000
*  /** UPON EXIT REG9 AND REG7 ARE NOT CHANGED                        * 17370000
*  /** REG 6 CONTAINS THE BINARY EQUIVALENT OF NUMBER                 * 17380000
*  /** IF RANGESW IS NOT ON THE NUMBER IS TESTED FOR BEING LARGER THAN* 17390000
*  /** 32767 THE MAXIMUM VALUE ALLOWED FOR LRECL.                     * 17400000
*  /**                                                                * 17410000
*  /******************************************************************* 17420000
*  CONVB: PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                       17430000
*                                   /*SAVE REG 14 IN COMMON AREA. */    17440000
*            SAVE14 = R14;                                              17450000
CONVB    ST    @E,360(0,@5)                                       0660  17460000
*               R6 = R7 - 1    /**CORRECT THE VALUE IN THE REGISTER**/; 17470000
         LH    @6,@D14                                            0661  17480000
         AR    @6,@7                                              0661  17490000
*                              /**PACK THE NUMBER IN Q AREA **/         17500000
*         GEN ( EX R6,CONVBP);                                          17510000
          EX R6,CONVBP                                                  17520000
         DS    0H                                                       17530000
*                              /**TEST FOR NUMBER BEING LARGER THEN**/  17540000
*                              /**2147483647 AND BRANCH IF NOT SO **/   17550000
*         IF Q(1:8) > '000002147483647F'X THEN DO /*BR IF NUMBER OK*/;  17560000
         CLC   216(8,@5),@X41                                     0663  17570000
*               GO TO CONVB1             /*BRANCH TO SET MSG*/;         17580000
         BC    03,CONVB1                                          0665  17590000
*         END;                                                          17600000
*           GEN ( CVB R6,Q(0,R5));                                      17610000
@9D7     EQU   *                                                  0667  17620000
          CVB R6,Q(0,R5)                                                17630000
         DS    0H                                                       17640000
*         IF R6 = 0 THEN GO TO F2H6 /** IF ZERO BR TO ISSUE MSG**/;     17650000
         LTR   @6,@6                                              0668  17660000
         BC    08,F2H6                                            0669  17670000
*         IF RANGESW = ON THEN DO /** IF RANGESW ON DO BELOW**/;        17680000
         CLC   541(1,@5),ON                                       0670  17690000
         BC    07,@9D6                                            0670  17700000
*               RANGESW = OFF  /**TURN OFF RANGE SW**/;                 17710000
         MVC   541(1,@5),OFF                                      0672  17720000
*               RETURN;                                                 17730000
         BC    15,@EL03                                           0673  17740000
*         END;                                                          17750000
*         IF R6 <= 32767 THEN DO     /** BRANCH IF LARGER THAN 32767**/ 17760000
@9D6     CH    @6,@D15                                            0675  17770000
         BC    02,@9D5                                            0675  17780000
*                                   /*RESTORE REG 14 FROM COMMON AREA.  17790000
*            R14 = SAVE14;                                              17800000
         L     @E,360(0,@5)                                       0677  17810000
*               RETURN                   /*RETURN TO CALLER*/;          17820000
         BC    15,@EL03                                           0678  17830000
*         END;                                                          17840000
*  CONVB1:;                                                             17850000
@9D5     EQU   *                                                  0680  17860000
*               MS = 6                   /*INDICATE MSG*/;              17870000
CONVB1   LA    @F,6                                               0681  17880000
         STH   @F,406(0,@5)                                       0681  17890000
*               GO TO F1B411   /**BRANCH TO EXIT **/;                   17900000
         BC    15,F1B411                                          0682  17910000
*  CONVBP: GEN ( PACK Q(8,R5),0(1,R9));                                 17920000
CONVBP    PACK Q(8,R5),0(1,R9)                                          17930000
         DS    0H                                                       17940000
*  END CONVB;                                                           17950000
@EL03    BCR   15,@E                                              0684  17960000
*  /******************************************************************* 17970000
*  /**                                                                * 17980000
*  /** THIS PROCEDURE WILL MOVE ANY NUMBER OF CHARACTERS FOR THE      * 17990000
*  /** CALLER.EXPECTED CONTENTS OF REGISTERS UPON ENTRY ARE:          * 18000000
*  /** REG 9 = FROM ADDRESS                                           * 18010000
*  /** REG 8 = TO ADDRESS                                             * 18020000
*  /** REG 7 = LENGTH TO MOVE                                         * 18030000
*  /** REGISTER CONTENTS ARE DESTROYED UPON EXIT IF MOVE IS GT 256    * 18040000
*  /**                                                                * 18050000
*  /******************************************************************* 18060000
*  MOVEROUT: PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                    18070000
MOVEROUT EQU   *                                                  0685  18080000
*  MOVE1:;                                                              18090000
*         IF R7 = 0 THEN RETURN          /** RETURN IF ZERO LENGTH   ** 18100000
MOVE1    LTR   @7,@7                                              0687  18110000
         BC    08,@EL04                                           0688  18120000
*         IF R7 < 256 THEN GO TO MOVE5   /** BR IF LT 256 TO MOVE    ** 18130000
@9D4     CH    @7,@D16                                            0689  18140000
         BC    04,MOVE5                                           0690  18150000
*                                        /*MOVES 256 BYTES*/            18160000
*         GEN (MVC 0(256,R8),0(R9));                                    18170000
         MVC 0(256,R8),0(R9)                                            18180000
         DS    0H                                                       18190000
*               R9 = R9 + 256            /*ADD 256 TO POSITION ADDR*/;  18200000
         AH    @9,@D16                                            0692  18210000
*               R8 = R8 + 256            /*ADD 256 TO POSITION ADDR*/;  18220000
         AH    @8,@D16                                            0693  18230000
*               R7 = R7 - 256            /*SUBT 256 TO CORRECT LENGTH*/ 18240000
         SH    @7,@D16                                            0694  18250000
*          GO TO MOVE1                   /*BR TO CONTINUE PROCESSING*/; 18260000
         BC    15,MOVE1                                           0695  18270000
*  MOVE4 :;                                                             18280000
*                                        /*MOVE REMAINING BYTES*/       18290000
*         GEN ( MVC 0(1,R8),0(R9));                                     18300000
MOVE4     MVC 0(1,R8),0(R9)                                             18310000
         DS    0H                                                       18320000
*  MOVE5:;                                                              18330000
*               R7 = R7 - 1              /*CORRECT THE LENGTH*/;        18340000
MOVE5    BCTR  @7,0                                               0699  18350000
*         GEN ( EX R7,MOVE4);                                           18360000
          EX R7,MOVE4                                                   18370000
         DS    0H                                                       18380000
*               R7 = R7 + 1 /**RESTORE REG 7 FOR EXIT WHEN LT 256 **/;  18390000
         AH    @7,@D3                                             0701  18400000
*               RETURN                   /*RETURN TO CALLER */;         18410000
*  END MOVEROUT;                                                        18420000
@EL04    BCR   15,@E                                              0703  18430000
*  /******************************************************************* 18440000
*  /**                                                                * 18450000
*  /** THIS PROCEDURE WILL VALIDITY CHECK AN EBCDIC NUMBER AS IT IS   * 18460000
*  /** INPUT FROM THE CONTROL CARD.UPON ENTRY REG 9 SHOULD POINT AT   * 18470000
*  /** START OF NUMBER IN INBUF.REG 7 SHOULD CONTAIN LENGTH OF NUMBER** 18480000
*  /** A WORKAREA IS CLEARED TO BINARY ZERO AND ZONES FROM THE NUMBER * 18490000
*  /** ARE MOVED TO THE WORKAREA.A COMPARE IS THEN DONE AGAINST       * 18500000
*  /** FOXZEROEZ.IF ALL DIGITS DO NOT COMPARE THE NUMBER IS INVALID   * 18510000
*  /** AND A BRANCH IS TAKEN TO SET UP MESSAGE AND RETURN,OTHERWISE   * 18520000
*  /** RETURN IS TO THE CALLER.                                       * 18530000
*  /**                                                                * 18540000
*  /******************************************************************* 18550000
*  VALCHECK: PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                    18560000
*                                   /*SAVE REG 14 IN COMMON AREA. */    18570000
*            SAVE14 = R14;                                              18580000
VALCHECK ST    @E,360(0,@5)                                       0705  18590000
*               Q  =  Q && Q             /*CLEAR Q TO ZEROS */;         18600000
         XC    216(16,@5),216(@5)                                 0706  18610000
*                              /* MOVE ZONES FROM NUMBER TO Q */        18620000
*         GEN ( EX R7,MOVEZONE);                                        18630000
          EX R7,MOVEZONE                                                18640000
         DS    0H                                                       18650000
*  /**COMPARE FOXZEROS TO Q LOOKING FOR EQ.BR IF NO EQ COMPARE  **/     18660000
*         IF Q (1:R7) ¬= FOXZEROS(1:R7) THEN DO /*BRANCH OUT IF VALID** 18670000
         LA    @E,FOXZEROS                                        0708  18680000
         LR    @1,@7                                              0708  18690000
         BCTR  @1,0                                               0708  18700000
         LA    @A,216(0,@5)                                       0708  18710000
         EX    @1,@CLC                                            0708  18720000
         BC    08,@9D3                                            0708  18730000
*               MS = 3         /**INDICATE MESSAGE **/;                 18740000
         LA    @F,3                                               0710  18750000
         STH   @F,406(0,@5)                                       0710  18760000
*               GO TO F1B4     /**BRANCH TO LEAVE ROUTINE**/;           18770000
         BC    15,F1B4                                            0711  18780000
*         END;                                                          18790000
*                                   /*RESTORE REG 14 FROM COMMON AREA.  18800000
*            R14 = SAVE14;                                              18810000
@9D3     L     @E,360(0,@5)                                       0713  18820000
*                              /* RETURN TO CALLER*/                    18830000
*               RETURN;                                                 18840000
         BC    15,@EL05                                           0714  18850000
*  MOVEZONE:;                                                           18860000
*               /** MOVE ZONES TO Q FOR COMPARE **/                     18870000
*         GEN ( MVZ Q(1,R5),0(R9));                                     18880000
MOVEZONE  MVZ Q(1,R5),0(R9)                                             18890000
         DS    0H                                                       18900000
*    END VALCHECK;                                                      18910000
@EL05    BCR   15,@E                                              0717  18920000
*  END IEBFDANL;                                                        18930000
@DATA1   EQU   *                                                        18940000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           18950000
@1       EQU   01                                                       18960000
@2       EQU   02                                                       18970000
@3       EQU   03                                                       18980000
@4       EQU   04                                                       18990000
@5       EQU   05                                                       19000000
@6       EQU   06                                                       19010000
@7       EQU   07                                                       19020000
@8       EQU   08                                                       19030000
@9       EQU   09                                                       19040000
@A       EQU   10                                                       19050000
@B       EQU   11                                                       19060000
@C       EQU   12                                                       19070000
@D       EQU   13                                                       19080000
@E       EQU   14                                                       19090000
@F       EQU   15                                                       19100000
@D1      DC    H'2'                                                     19110000
@D2      DC    H'-64'                                                   19120000
@D3      DC    H'1'                                                     19130000
@D4      DC    H'5'                                                     19140000
@D5      DC    H'64'                                                    19150000
@D6      DC    H'7'                                                     19160000
@D7      DC    H'9'                                                     19170000
@D8      DC    H'8'                                                     19180000
@D9      DC    H'3'                                                     19190000
@D10     DC    H'4'                                                     19200000
@D11     DC    H'6'                                                     19210000
@D12     DC    H'10'                                                    19220000
@D13     DC    H'80'                                                    19230000
@D14     DC    H'-1'                                                    19240000
@D15     DC    H'32767'                                                 19250000
@D16     DC    H'256'                                                   19260000
@CLC     CLC   0(1,@A),0(@E)                                            19270000
@MVC     MVC   0(1,@A),0(@E)                                            19280000
         DS    0F                                                       19290000
@SIZ001  DC    AL1(&SPN)                                                19300000
         DC    AL3(@DATEND-@DATD)                                       19310000
         DS    0F                                                       19320000
@C2      DC    C'BADFIELD'                                              19330000
@C8      DC    C'FROMLOC='                                              19340000
@C11     DC    C'PICTURE='                                              19350000
@C20     DC    C'REPLACE='                                              19360000
@X39     DC    X'00000000'                                              19370000
@X40     DC    X'0000000000000000'                                      19380000
@X41     DC    X'000002147483647F'                                      19390000
@C7      DC    C'INPUT='                                                19400000
@C15     DC    C'CYCLE='                                                19410000
@C16     DC    C'RANGE='                                                19420000
@C17     DC    C'CHARACTER='                                            19430000
@C19     DC    C'INDEX='                                                19440000
@C21     DC    C'AN'                                                    19450000
@C22     DC    C'AL'                                                    19460000
@C23     DC    C'ZD'                                                    19470000
@C24     DC    C'PD'                                                    19480000
@C25     DC    C'CO'                                                    19490000
@C26     DC    C'BI'                                                    19500000
@C37     DC    C'B'''                                                   19510000
@C38     DC    C'P'''                                                   19520000
@C6      DC    C'NAME='                                                 19530000
@C9      DC    C'LENGTH='                                               19540000
@C10     DC    C'STARTLOC='                                             19550000
@C12     DC    C'FORMAT='                                               19560000
@C13     DC    C'ACTION='                                               19570000
@C14     DC    C'FILL='                                                 19580000
@C18     DC    C'SIGN='                                                 19590000
@C36     DC    C'SYSIN'                                                 19600000
         DS    0D                                                       19610000
@DATA    EQU   *                                                        19620000
R14      EQU   00000014            FULLWORD INTEGER REGISTER            19630000
R15      EQU   00000015            FULLWORD INTEGER REGISTER            19640000
R0       EQU   00000000            FULLWORD INTEGER REGISTER            19650000
R4       EQU   00000004            FULLWORD POINTER REGISTER            19660000
R3       EQU   00000003            FULLWORD INTEGER REGISTER            19670000
R1       EQU   00000001            FULLWORD INTEGER REGISTER            19680000
R2       EQU   00000002            FULLWORD INTEGER REGISTER            19690000
R5       EQU   00000005            FULLWORD POINTER REGISTER            19700000
R6       EQU   00000006            FULLWORD POINTER REGISTER            19710000
R7       EQU   00000007            FULLWORD POINTER REGISTER            19720000
R8       EQU   00000008            FULLWORD POINTER REGISTER            19730000
R9       EQU   00000009            FULLWORD POINTER REGISTER            19740000
COMMON   EQU   00000000            308 BYTE(S) ON DWORD                 19750000
PAGENO   EQU   COMMON+00000000     4 BYTE(S)                            19760000
LINECT   EQU   COMMON+00000004     FULLWORD INTEGER                     19770000
LINECTR  EQU   COMMON+00000008     FULLWORD INTEGER                     19780000
PARM     EQU   COMMON+00000012     FULLWORD POINTER                     19790000
REPEATNO EQU   COMMON+00000016     HALFWORD INTEGER                     19800000
CREATENO EQU   COMMON+00000018     HALFWORD INTEGER                     19810000
SYSP     EQU   COMMON+00000020     96 BYTE(S)                           19820000
SYSI     EQU   COMMON+00000116     96 BYTE(S)                           19830000
Q        EQU   COMMON+00000216     16 BYTE(S) ON DWORD                  19840000
QFILL    EQU   COMMON+00000216     7 BYTE(S)                            19850000
QSIGN    EQU   COMMON+00000223     8 BIT(S)                             19860000
QFILL1   EQU   COMMON+00000224     7 BYTE(S)                            19870000
QSIGN1   EQU   COMMON+00000231     8 BIT(S)                             19880000
COUNTER  EQU   COMMON+00000232     FULLWORD POINTER                     19890000
OPENLIST EQU   COMMON+00000236     8 BYTE(S)                            19900000
OPTBYTE1 EQU   COMMON+00000236     4 BYTE(S)                            19910000
OPTBYTE2 EQU   COMMON+00000240     4 BYTE(S)                            19920000
EXLST    EQU   COMMON+00000244     24 BYTE(S) ON WORD                   19930000
INHDR    EQU   COMMON+00000244     1 BYTE(S)                            19940000
INHDR1   EQU   COMMON+00000245     3  BYTE  POINTER ON WORD+1           19950000
OUTHDR   EQU   COMMON+00000248     1 BYTE(S)                            19960000
OUTHDR1  EQU   COMMON+00000249     3  BYTE  POINTER ON WORD+1           19970000
INTRL    EQU   COMMON+00000252     1 BYTE(S)                            19980000
INTRL1   EQU   COMMON+00000253     3  BYTE  POINTER ON WORD+1           19990000
OUTTRL   EQU   COMMON+00000256     1 BYTE(S)                            20000000
OUTTRL1  EQU   COMMON+00000257     3  BYTE  POINTER ON WORD+1           20010000
EXITDCB  EQU   COMMON+00000260     1 BYTE(S)                            20020000
EXITDCB1 EQU   COMMON+00000261     3  BYTE  POINTER ON WORD+1           20030000
TOTAL    EQU   COMMON+00000264     1 BYTE(S)                            20040000
TOTAL1   EQU   COMMON+00000265     3  BYTE  POINTER ON WORD+1           20050000
EXLST1   EQU   COMMON+00000268     4 BYTE(S) ON WORD                    20060000
EDCB1    EQU   COMMON+00000268     1 BYTE(S)                            20070000
EDCB2    EQU   COMMON+00000269     3  BYTE  POINTER ON WORD+1           20080000
EXLST2   EQU   COMMON+00000272     4 BYTE(S) ON WORD                    20090000
EDCB3    EQU   COMMON+00000272     1 BYTE(S)                            20100000
EDCB4    EQU   COMMON+00000273     3  BYTE  POINTER ON WORD+1           20110000
EXLST3   EQU   COMMON+00000276     4 BYTE(S) ON WORD                    20120000
EDCB5    EQU   COMMON+00000276     1 BYTE(S)                            20130000
EDCB6    EQU   COMMON+00000277     3  BYTE  POINTER ON WORD+1           20140000
DLRECL   EQU   COMMON+00000280     HALFWORD INTEGER                     20150000
DBLKSI   EQU   COMMON+00000282     HALFWORD INTEGER                     20160000
DRECFM   EQU   COMMON+00000284     8 BIT(S)                             20170000
LEFTOVER EQU   COMMON+00000288     FULLWORD INTEGER                     20180000
OFFSET   EQU   COMMON+00000292     FULLWORD POINTER                     20190000
LPTR     EQU   COMMON+00000296     FULLWORD POINTER                     20200000
DCBPTR   EQU   COMMON+00000300     FULLWORD POINTER                     20210000
DUMMY    EQU   COMMON+00000304     FULLWORD POINTER                     20220000
COMMON1  EQU   00000304            236 BYTE(S) ON WORD                  20230000
SAVEMS   EQU   COMMON1+00000000    HALFWORD INTEGER                     20240000
CONCODE  EQU   COMMON1+00000002    HALFWORD INTEGER                     20250000
OUTREC   EQU   COMMON1+00000004    FULLWORD POINTER                     20260000
CRTABPT  EQU   COMMON1+00000008    FULLWORD POINTER                     20270000
CURCRTE  EQU   COMMON1+00000012    FULLWORD POINTER                     20280000
CURCRGM  EQU   COMMON1+00000016    FULLWORD POINTER                     20290000
CURPIC   EQU   COMMON1+00000020    FULLWORD POINTER                     20300000
PICCTR   EQU   COMMON1+00000024    FULLWORD INTEGER                     20310000
EXITTAB  EQU   COMMON1+00000028    FULLWORD POINTER                     20320000
EXITGM   EQU   COMMON1+00000032    FULLWORD POINTER                     20330000
CUREXIT  EQU   COMMON1+00000036    FULLWORD POINTER                     20340000
DELIM    EQU   COMMON1+00000040    4 BYTE(S)                            20350000
RECREM   EQU   COMMON1+00000044    FULLWORD INTEGER                     20360000
CURFD    EQU   COMMON1+00000048    FULLWORD POINTER                     20370000
CUROUT   EQU   COMMON1+00000052    FULLWORD POINTER                     20380000
SAVE14   EQU   COMMON1+00000056    FULLWORD POINTER                     20390000
GETMLIST EQU   COMMON1+00000060    16 BYTE(S) ON WORD                   20400000
GLENGTH  EQU   COMMON1+00000060    FULLWORD INTEGER                     20410000
ADRLIST  EQU   COMMON1+00000064    FULLWORD POINTER                     20420000
IND      EQU   COMMON1+00000068    4 BYTE(S)                            20430000
GCODE    EQU   COMMON1+00000068    1 BYTE(S)                            20440000
SPOOL    EQU   COMMON1+00000069    1 BYTE(S)                            20450000
CCODE    EQU   COMMON1+00000070    2 BYTE(S)                            20460000
GCADDR   EQU   COMMON1+00000072    FULLWORD POINTER                     20470000
FIRSTGMO EQU   COMMON1+00000076    FULLWORD POINTER                     20480000
CURRGMO  EQU   COMMON1+00000080    FULLWORD POINTER                     20490000
LASTGMO  EQU   COMMON1+00000084    FULLWORD POINTER                     20500000
FIRSTGMI EQU   COMMON1+00000088    FULLWORD POINTER                     20510000
CURRGMI  EQU   COMMON1+00000092    FULLWORD POINTER                     20520000
LASTGMI  EQU   COMMON1+00000096    FULLWORD POINTER                     20530000
CONDCODE EQU   COMMON1+00000100    HALFWORD INTEGER                     20540000
MS       EQU   COMMON1+00000102    HALFWORD INTEGER                     20550000
INBUFA1  EQU   COMMON1+00000104    121 BYTE(S)                          20560000
INFILL   EQU   COMMON1+00000104    10 BYTE(S)                           20570000
INBUFA   EQU   COMMON1+00000114    111 BYTE(S)                          20580000
DDPTR    EQU   COMMON1+00000228    FULLWORD POINTER                     20590000
DUMMY1   EQU   COMMON1+00000232    FULLWORD POINTER                     20600000
COMMON2  EQU   00000536            76 BYTE(S) ON WORD                   20610000
SWITCH   EQU   COMMON2+00000000    52 BYTE(S)                           20620000
FDCSW    EQU   COMMON2+00000000    1 BYTE(S)                            20630000
FDNAMESW EQU   COMMON2+00000001    1 BYTE(S)                            20640000
FDPCSW   EQU   COMMON2+00000002    1 BYTE(S)                            20650000
FDFMTSW  EQU   COMMON2+00000003    1 BYTE(S)                            20660000
FDPLSW   EQU   COMMON2+00000004    1 BYTE(S)                            20670000
RANGESW  EQU   COMMON2+00000005    1 BYTE(S)                            20680000
FILLSW   EQU   COMMON2+00000006    1 BYTE(S)                            20690000
REPSW    EQU   COMMON2+00000007    1 BYTE(S)                            20700000
INDEXSW  EQU   COMMON2+00000008    1 BYTE(S)                            20710000
INDNMSW  EQU   COMMON2+00000009    1 BYTE(S)                            20720000
BQUOTESW EQU   COMMON2+00000010    1 BYTE(S)                            20730000
PQUOTESW EQU   COMMON2+00000011    1 BYTE(S)                            20740000
EQUOTESW EQU   COMMON2+00000012    1 BYTE(S)                            20750000
FDPSW    EQU   COMMON2+00000013    1 BYTE(S)                            20760000
DSDSW    EQU   COMMON2+00000014    1 BYTE(S)                            20770000
NOGOSW   EQU   COMMON2+00000015    1 BYTE(S)                            20780000
CREATESW EQU   COMMON2+00000016    1 BYTE(S)                            20790000
DSDCSW   EQU   COMMON2+00000017    1 BYTE(S)                            20800000
CRCSW    EQU   COMMON2+00000018    1 BYTE(S)                            20810000
EXITSW   EQU   COMMON2+00000019    1 BYTE(S)                            20820000
EODSTOP  EQU   COMMON2+00000020    1 BYTE(S)                            20830000
DSDNULSW EQU   COMMON2+00000021    1 BYTE(S)                            20840000
DSDORGSW EQU   COMMON2+00000022    1 BYTE(S)                            20850000
DSDDDSW  EQU   COMMON2+00000023    1 BYTE(S)                            20860000
CRTBLK   EQU   COMMON2+00000024    1 BYTE(S)                            20870000
NAMCSW   EQU   COMMON2+00000025    8 BIT(S)                             20880000
PICCSW   EQU   COMMON2+00000026    8 BIT(S)                             20890000
BUFPSW   EQU   COMMON2+00000027    1 BYTE(S)                            20900000
ENDSW    EQU   COMMON2+00000028    1 BYTE(S)                            20910000
COMCSW   EQU   COMMON2+00000029    1 BYTE(S)                            20920000
FLAGSW   EQU   COMMON2+00000030    8 BIT(S)                             20930000
PAGESW   EQU   COMMON2+00000031    1 BYTE(S)                            20940000
EPSW     EQU   COMMON2+00000032    1  BYTE  POINTER                     20950000
SYSISW   EQU   COMMON2+00000033    1 BYTE(S)                            20960000
SYSPSW   EQU   COMMON2+00000034    1 BYTE(S)                            20970000
OLDNEWSW EQU   COMMON2+00000035    1 BYTE(S)                            20980000
FLUSHSW  EQU   COMMON2+00000036    1 BYTE(S)                            20990000
FLUSHSW1 EQU   COMMON2+00000037    1 BYTE(S)                            21000000
DSDOSW   EQU   COMMON2+00000038    1 BYTE(S)                            21010000
DSDISW   EQU   COMMON2+00000039    1 BYTE(S)                            21020000
QUANSW   EQU   COMMON2+00000040    1 BYTE(S)                            21030000
PARENSW  EQU   COMMON2+00000041    1 BYTE(S)                            21040000
REPEATSW EQU   COMMON2+00000042    1 BYTE(S)                            21050000
FDPLGTH  EQU   COMMON2+00000052    HALFWORD INTEGER                     21060000
SGCADDR  EQU   COMMON2+00000056    FULLWORD POINTER                     21070000
FDPTR    EQU   COMMON2+00000060    FULLWORD POINTER                     21080000
FDPTR1   EQU   COMMON2+00000064    FULLWORD POINTER                     21090000
FDPTR2   EQU   COMMON2+00000068    FULLWORD POINTER                     21100000
DUMMY2   EQU   COMMON2+00000072    FULLWORD POINTER                     21110000
COMMON3  EQU   00000608            196 BYTE(S) ON WORD                  21120000
FDCTR    EQU   COMMON3+00000000    HALFWORD POINTER                     21130000
LREMAIN  EQU   COMMON3+00000004    FULLWORD POINTER                     21140000
COMPCTR  EQU   COMMON3+00000008    FULLWORD POINTER                     21150000
LMOVED   EQU   COMMON3+00000012    HALFWORD POINTER                     21160000
U        EQU   COMMON3+00000016    FULLWORD POINTER                     21170000
PICEND   EQU   COMMON3+00000020    HALFWORD POINTER                     21180000
CURFDGM  EQU   COMMON3+00000024    FULLWORD POINTER                     21190000
SWTCH    EQU   COMMON3+00000028    4 BYTE(S) ON WORD                    21200000
SYSINSEL EQU   COMMON3+00000028    1 BYTE(S)                            21210000
FIRSTSW  EQU   COMMON3+00000029    1 BYTE(S)                            21220000
FRSTSW   EQU   COMMON3+00000030    1 BYTE(S)                            21230000
STOPSW   EQU   COMMON3+00000031    1 BYTE(S)                            21240000
COPYVAL  EQU   COMMON3+00000032    HALFWORD INTEGER                     21250000
COPYFD   EQU   COMMON3+00000036    FULLWORD POINTER                     21260000
COPYFDGM EQU   COMMON3+00000040    FULLWORD POINTER                     21270000
NAMCTR   EQU   COMMON3+00000044    HALFWORD INTEGER                     21280000
NAMCTR1  EQU   COMMON3+00000046    HALFWORD INTEGER                     21290000
INRECSZ  EQU   COMMON3+00000048    HALFWORD POINTER                     21300000
OUTRECSZ EQU   COMMON3+00000050    HALFWORD POINTER                     21310000
INRECFM  EQU   COMMON3+00000052    1 BYTE(S)                            21320000
RECOFFST EQU   COMMON3+00000053    1  BYTE  POINTER                     21330000
OUTRECFM EQU   COMMON3+00000054    1 BYTE(S)                            21340000
PICBASE  EQU   COMMON3+00000056    FULLWORD POINTER                     21350000
MESSAGE  EQU   COMMON3+00000060    121 BYTE(S)                          21360000
INPUTSW  EQU   COMMON3+00000181    1 BYTE(S)                            21370000
HOLDNAME EQU   COMMON3+00000182    8 BYTE(S)                            21380000
DUMMY3   EQU   COMMON3+00000192    FULLWORD POINTER                     21390000
DCBD     EQU   00000000            280 BYTE(S) ON DWORD                 21400000
FILL     EQU   DCBD+00000000       26 BYTE(S)                           21410000
DSORG1   EQU   DCBD+00000026       2 BYTE(S)                            21420000
DSORG    EQU   DCBD+00000026       8 BIT(S)                             21430000
FILLER   EQU   DCBD+00000028       8 BYTE(S)                            21440000
IOBAD    EQU   DCBD+00000028       4 BYTE(S)                            21450000
BFTEK    EQU   DCBD+00000032       8 BIT(S)                             21460000
EODAD    EQU   DCBD+00000033       3 BYTE(S)                            21470000
RECFM    EQU   DCBD+00000036       8 BIT(S)                             21480000
EXLIST   EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           21490000
DDNAME   EQU   DCBD+00000040       8 BYTE(S)                            21500000
DEBAD    EQU   DCBD+00000040       4 BYTE(S)                            21510000
IFLGS    EQU   DCBD+00000040       8 BIT(S)                             21520000
GETAD    EQU   DCBD+00000048       4 BYTE(S)                            21530000
OFLGS    EQU   DCBD+00000048       8 BIT(S)                             21540000
OFLGS1   EQU   DCBD+00000049       1 BYTE(S)                            21550000
MACRF    EQU   DCBD+00000050       2 BYTE(S)                            21560000
FILL2    EQU   DCBD+00000052       10 BYTE(S)                           21570000
BLKSI    EQU   DCBD+00000062       HALFWORD INTEGER                     21580000
FILL3    EQU   DCBD+00000064       18 BYTE(S)                           21590000
LRECL    EQU   DCBD+00000082       HALFWORD INTEGER                     21600000
FILL4    EQU   DCBD+00000084       172 BYTE(S)                          21610000
NEXTDCB  EQU   DCBD+00000256       FULLWORD POINTER                     21620000
DDNAME1  EQU   DCBD+00000260       8 BYTE(S)                            21630000
EODSW    EQU   DCBD+00000268       1 BYTE(S)                            21640000
DCBSW1   EQU   DCBD+00000269       1 BYTE(S)                            21650000
DCBSW2   EQU   DCBD+00000270       1 BYTE(S)                            21660000
DCBSW3   EQU   DCBD+00000271       8 BIT(S)                             21670000
INREC    EQU   DCBD+00000272       FULLWORD POINTER                     21680000
GMLGTH   EQU   DCBD+00000276       HALFWORD INTEGER                     21690000
FIELDSEL EQU   DCBD+00000278       1 BYTE(S)                            21700000
SPARE    EQU   DCBD+00000279       1 BYTE(S)                            21710000
FDTBL    EQU   00000000            520 BYTE(S) ON WORD                  21720000
FDNAME   EQU   FDTBL+00000000      8 BYTE(S)                            21730000
FDREPNM  EQU   FDTBL+00000008      8 BYTE(S)                            21740000
FDINDNM  EQU   FDTBL+00000016      8 BYTE(S) ON WORD                    21750000
FDUMMY   EQU   FDTBL+00000016      4 BYTE(S)                            21760000
FDINDNUM EQU   FDTBL+00000020      FULLWORD POINTER                     21770000
FDLGTH   EQU   FDTBL+00000024      HALFWORD POINTER                     21780000
FDCYCLE  EQU   FDTBL+00000026      HALFWORD POINTER                     21790000
FDACTION EQU   FDTBL+00000028      2 BYTE(S)                            21800000
FDFORMAT EQU   FDTBL+00000030      2 BYTE(S)                            21810000
FDSWITCH EQU   FDTBL+00000032      8 BIT(S)                             21820000
INDBYNAM EQU   FDTBL+00000032      1 BIT(S)                             21830000
PASS     EQU   FDTBL+00000032      1 BIT(S)                             21840000
FXACTION EQU   FDTBL+00000032      1 BIT(S)                             21850000
RPACTION EQU   FDTBL+00000032      1 BIT(S)                             21860000
ROACTION EQU   FDTBL+00000032      1 BIT(S)                             21870000
WVACTION EQU   FDTBL+00000032      1 BIT(S)                             21880000
STACTION EQU   FDTBL+00000032      1 BIT(S)                             21890000
NUACTION EQU   FDTBL+00000032      1 BIT(S)                             21900000
FDFILL   EQU   FDTBL+00000033      1 BYTE(S)                            21910000
FDSIGN   EQU   FDTBL+00000034      1 BYTE(S)                            21920000
FDCHAR   EQU   FDTBL+00000035      1 BYTE(S)                            21930000
FDRANGE  EQU   FDTBL+00000036      4 BYTE(S)                            21940000
FDOBUF   EQU   FDTBL+00000040      HALFWORD POINTER                     21950000
FDFRINC  EQU   FDTBL+00000042      HALFWORD POINTER                     21960000
FDFROMAD EQU   FDTBL+00000044      4 BYTE(S)                            21970000
FDMLGTH  EQU   FDTBL+00000048      HALFWORD POINTER                     21980000
FDTOINC  EQU   FDTBL+00000050      HALFWORD POINTER                     21990000
FDCYCCNT EQU   FDTBL+00000052      HALFWORD POINTER                     22000000
FDSLGTH  EQU   FDTBL+00000054      HALFWORD POINTER                     22010000
FDSLGTHR EQU   FDTBL+00000056      HALFWORD POINTER                     22020000
FDFRINCR EQU   FDTBL+00000058      1 BYTE(S)                            22030000
FDTOINCR EQU   FDTBL+00000059      1 BYTE(S)                            22040000
LTOFREE  EQU   FDTBL+00000060      HALFWORD POINTER                     22050000
FDSW1    EQU   FDTBL+00000062      8 BIT(S)                             22060000
STRTLOC1 EQU   FDTBL+00000062      1 BIT(S)                             22070000
FOXZEROS EQU   *                   16 BYTE(S)                           22080000
         DC    X'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'                      22090000
INBUF    EQU   00000000            80 BYTE(S)                           22100000
BUFFER   EQU   00000000            32767 BYTE(S)                        22110000
ON       EQU   *                   1 BYTE(S)                            22120000
         DC    X'FF'                                                    22130000
OFF      EQU   *                   1 BYTE(S)                            22140000
         DC    X'00'                                                    22150000
WKADDR   EQU   00000000            32767 BYTE(S)                        22160000
COPAT    EQU   *                   27 BYTE(S)                           22170000
         DC    C' ¢.<(+|&&!$*);¬-/,%_>?:#@''="'                         22180000
ALPAT    EQU   *                   36 BYTE(S)                           22190000
         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'                  22200000
OPTIONS  EQU   00000000            256 BYTE(S)                          22210000
PAGE     EQU   00000000            256 BYTE(S)                          22220000
DDLST    EQU   00000000            256 BYTE(S)                          22230000
         ORG   @DATA                                                    22240000
         DS    00000081C                                                22250000
@L       EQU   1                                                        22260000
@DATD    DSECT                                                          22270000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   22280000
BUFPTR   EQU   @DATD+00000072      FULLWORD POINTER                     22290000
RCODE    EQU   @DATD+00000076      FULLWORD INTEGER                     22300000
OPTPTR   EQU   @DATD+00000080      FULLWORD POINTER                     22310000
PGPTR    EQU   @DATD+00000084      FULLWORD POINTER                     22320000
         DS    00000088C                                                22330000
@TEMPS   DS    0F                                                       22340000
@TEMP4   DC    F'0'                                                     22350000
@DATEND  EQU   *                                                        22360000
IEBFDANL CSECT ,                                                        22370000
@9E9     EQU   F5F31                                                    22380000
@9E3     EQU   F4B5                                                     22390000
@9DF     EQU   F4G11                                                    22400000
@9DA     EQU   F5F4                                                     22410000
@9D8     EQU   @EL02                                                    22420000
         END   IEBFDANL                                                 22430000
./  ADD  SSI=62520090,NAME=IEBFDTBL
*    NEW MODULE, RELEASE 17.                                       DG0H 00010000
*                                                                A27778 00020000
*                                                                A29841 00030000
*A445410-445630                                                @YA02530 00040000
*C219800                                                       @ZA04231 00050000
*C219800                                                       @ZA07345 00060000
         LCLA  &T,&SPN                                            0002  00070000
.@001    ANOP                                                     0002  00080000
IEBFDTBL CSECT ,                                                  0002  00090000
         ST    @E,12(0,@D)                                        0002  00100000
         STM   @0,@8,20(@D)                                       0002  00110000
         STM   @A,@C,60(@D)                                       0002  00120000
         BALR  @B,0                                               0002  00130000
@PSTART  DS    0H                                                 0002  00140000
         USING @PSTART+00000,@B                                   0002  00150000
         LA    @3,4095(0,@B)                                      0002  00160000
         USING @PSTART+04095,@3                                   0002  00170000
         L     @0,@SIZ001                                         0002  00180000
         GETMAIN  R,LV=(0)                                        0002  00190000
         LR    @C,@1                                              0002  00200000
         USING @DATD+00000,@C                                     0002  00210000
         LM    @0,@1,20(@D)                                       0002  00220000
         XC    @TEMPS(@L),@TEMPS                                  0002  00230000
         ST    @D,@SAV001+4                                       0002  00240000
         LA    @F,@SAV001                                         0002  00250000
         ST    @F,8(0,@D)                                         0002  00260000
         LR    @D,@F                                              0002  00270000
         CLC   546(1,@5),ON                                       0044  00280000
*         IF BQUOTESW = ON THEN GO TO F5G3 /*BR IF BINARY PICTURE*/;    00290000
         BC    08,F5G3                                            0045  00300000
*         IF PQUOTESW ¬= ON THEN GO TO F6A1 /*BR IF NOT PD PICTURE*/;   00310000
         CLC   547(1,@5),ON                                       0046  00320000
         BC    07,F6A1                                            0047  00330000
*  /******************************************************************* 00340000
*  /**                                                                * 00350000
*  /**    THIS SECTION PICKS UP THE PICTURE LENGTH AND TEMPORARY      * 00360000
*  /** STORAGE ADDRESS(SGCADDR) AND VALIDITY CHECKS THE  NUMBER FOR A * 00370000
*  /** VALID DECIMAL VALUE. ACTION IS SET TO FIXED AS A NUMBER MAY    * 00380000
*  /** ONLY BE INCREMENTED(INDEXED).A BRANCH IS THEN TAKEN TO         * 00390000
*  /** PROCESS A PACKED DECIMAL NUMBER IF INDICATED. A DECIMAL NUMBER * 00400000
*  /** IS REQUIRED BETWEEN THE DELIMITING QUOTES OF THE INITIAL       * 00410000
*  /** PICTURE                                                        * 00420000
*  /**                                                                * 00430000
*  /******************************************************************* 00440000
*  F5G3:;                                                               00450000
*               R7 = FDPLGTH             /**PICTURE LGTH FOR VALCHECK** 00460000
F5G3     LH    @7,588(0,@5)                                       0049  00470000
*                         /* VALIDITY CHECK B OR P PICTURE */           00480000
*               R9 = SGCADDR   /**PICK UP PICTURE ADDRESS**/;           00490000
         L     @9,592(0,@5)                                       0050  00500000
*               CALL VALCHECK;                                          00510000
         BAL   @E,VALCHECK                                        0051  00520000
*               FDACTION = 'FX' /**ACTION MUST BE FIXED**/;             00530000
         L     @1,596(0,@5)                                       0052  00540000
         MVC   28(2,@1),@C1                                       0052  00550000
*         IF PQUOTESW = ON THEN GO TO F5H4;                             00560000
         CLC   547(1,@5),ON                                       0053  00570000
         BC    08,F5H4                                            0054  00580000
*  /******************************************************************* 00590000
*  /**                                                                * 00600000
*  /**    THIS SECTION PROCESSES A BINARY PICTURE. THE RANGESW IS     * 00610000
*  /** TURNED ON SO THAT THE CONVB ROUTINE WHEN CALLED WILL ALLOW     * 00620000
*  /** THE MAXIMUM BINARY NUMBER THAT CAN BE HELD IN A REGISTER. ONCE * 00630000
*  /** CONVERTED, THE FIELD LENGTH IS PICKED UP AND A BRANCH TAKEN TO * 00640000
*  /** F6F4 TO GET CORE TO HOLD THE BINARY NUMBER.                    * 00650000
*  /**                                                                * 00660000
*  /******************************************************************* 00670000
*               RANGESW = ON             /*ALLOW MAX BINARY NUMBER*/;   00680000
         MVC   541(1,@5),ON                                       0055  00690000
*                         /* CONVERT PICTURE TO BINARY*/                00700000
*               CALL CONVB;                                             00710000
         BAL   @E,CONVB                                           0056  00720000
*               Q = R6         /**SAVE BINARY NO IN Q **/;              00730000
         ST    @6,@TEMP4                                          0057  00740000
         MVC   216(4,@5),@TEMP4                                   0057  00750000
         MVI   220(@5),C' '                                       0057  00760000
         MVC   221(11,@5),220(@5)                                 0057  00770000
*  /******************************************************************/ 00780000
*  F5H3:;                                                               00790000
*               R6 = FDLGTH    /**PICK UP FIELD LENGTH**/;              00800000
F5H3     L     @1,596(0,@5)                                       0059  00810000
         LH    @6,24(0,@1)                                        0059  00820000
*               GO TO F6F4     /** BR TO GET CORE**/;                   00830000
         BC    15,F6F4                                            0060  00840000
*  /******************************************************************* 00850000
*  /**                                                                * 00860000
*  /**    THIS SECTION WILL PROCESS A PACKED DECIMAL NUMBER. THE      * 00870000
*  /** MAXIMUM LENGTH WE CAN PACK IS 16 DIGITS. IF GREATER THAN 16,A  * 00880000
*  /** MESSAGE IS INDICATED AND A BRANCH IS TAKEN TO EXIT THE ROUTINE.* 00890000
*  /** OTHERWISE, THE TEMPORARY STORAGE IS PICKED UP, THE NUMBER IS   * 00900000
*  /** PACKED AND A BRANCH TAKEN TO PICK UP THE FIELD LENGTH AND GET  * 00910000
*  /** CORE AS FOR A BINARY NUMBER. BOTH PD AND BI NUMBERS WILL       * 00920000
*  /** EVENTUALLY BE MOVED INTO PERMANENT STORAGE AFTER GETTING CORE  * 00930000
*  /** TO HOLD THEM.                                                  * 00940000
*  /**                                                                * 00950000
*  /******************************************************************* 00960000
*  F5H4:;                                                               00970000
*                         /* TEST NUMBER FOR MAX LENGTH*/               00980000
*         IF FDPLGTH =< 16 THEN GO TO F5J4 /*BR WE CAN PACK THIS NO.*/; 00990000
F5H4     LA    @F,16                                              0062  01000000
         CH    @F,588(0,@5)                                       0062  01010000
         BC    10,F5J4                                            0063  01020000
*                         /* LENGTH TOO LARGE*/                         01030000
*               MS = 8                   /* SET MESSAGE INDICATION*/;   01040000
         LA    @F,8                                               0064  01050000
         STH   @F,406(0,@5)                                       0064  01060000
*               GO TO F1B411   /** BRANCH TO LEAVE ROUTINE**/;          01070000
         BC    15,F1B411                                          0065  01080000
*  F5F5:;                                                               01090000
*         GEN ( PACK Q(16,R5),0(1,R7));                                 01100000
F5F5      PACK Q(16,R5),0(1,R7)                                         01110000
         DS    0H                                                       01120000
*  F5J4:;                                                               01130000
*               R7 = SGCADDR             /*PICK UP NUMBER ADDRESS*/;    01140000
F5J4     L     @7,592(0,@5)                                       0069  01150000
*               R6 = FDPLGTH - 1 /**RESOLVE LENGTH TO PACK**/;          01160000
         LH    @6,@D1                                             0070  01170000
         AH    @6,588(0,@5)                                       0070  01180000
*                                        /*  PACK NUMBER*/              01190000
*         GEN ( EX R6,F5F5);                                            01200000
          EX R6,F5F5                                                    01210000
         DS    0H                                                       01220000
*               GO TO F5H3     /** BRANCH**/;                           01230000
         BC    15,F5H3                                            0072  01240000
*  /******************************************************************/ 01250000
*  /**                                                                * 01260000
*  /** THIS SECTION SCANS FOR ACTION AND BRANCHES TO PROCESS.UNKNOWN  * 01270000
*  /** ACTION CAUSES A MESSAGE INDICATION.IF A USER ACTION IS EVER    * 01280000
*  /** ALLOWED IT IS PLANNED THAT THE KEYWORD WILL BE'US' WHEREUPON   * 01290000
*  /** A SPECIFIC NAME OF A ROUTINE FROM THE LINKLIB WOULD BE LOADED, * 01300000
*  /** ITS ADDRESS SAVED SO THAT IEBCREAT WHEN IT ACCESSED THE        * 01310000
*  /** PARTICULAR FD TABLE FOR PROCESSING NAME WOULD BRANCH AND LINK  * 01320000
*  /** TO THIS ROUTINE.A PARAMETER LIST WOULD CONTAIN ADDRESS OF      * 01330000
*  /** RECORD SEGMENT TO BE ACTED UPON BY USER,DCB ADDRESS AND SEGMENT* 01340000
*  /** LENGTH.PARAMETER LIST ADDRESS TO BE CONTAINED IN REGISTER ONE  * 01350000
*  /**                                                                * 01360000
*  /******************************************************************* 01370000
*  F6A1:;                                                               01380000
*         IF FDFORMAT = 'RA' THEN GO TO F6F2 /** BR RANDOM FORMAT MUST  01390000
F6A1     L     @1,596(0,@5)                                       0074  01400000
         CLC   30(2,@1),@C2                                       0074  01410000
*                                                BE FIXED ACTION **/;   01420000
         BC    08,F6F2                                            0075  01430000
*         IF FDACTION = 'SL' THEN GO TO F6A2 /* IF SL BR TO SET INC*/;  01440000
         CLC   28(2,@1),@C3                                       0076  01450000
         BC    08,F6A2                                            0077  01460000
*         IF FDACTION = 'TL' THEN GO TO F6B2 /* IF TL BR TO SET INC*/;  01470000
         CLC   28(2,@1),@C4                                       0078  01480000
         BC    08,F6B2                                            0079  01490000
*         IF FDACTION = 'SR' THEN GO TO F6C2 /* IF SR BR TO SET INC*/;  01500000
         CLC   28(2,@1),@C5                                       0080  01510000
         BC    08,F6C2                                            0081  01520000
*         IF FDACTION = 'TR' THEN DO /**DO FOLLOWING IF TRUNC RIGHT**/; 01530000
         CLC   28(2,@1),@C6                                       0082  01540000
         BC    07,@9FF                                            0082  01550000
*               STACTION = '1'B          /**INDICATE SHIFT OR TRUNC**/; 01560000
         OI    32(@1),B'00000010'                                 0084  01570000
*               GO TO F8B4     /** BRANCH TO RESOLVE LENGTH**/;         01580000
         BC    15,F8B4                                            0085  01590000
*         END;                                                          01600000
*         IF FDACTION = 'FX' THEN DO /**DO FOLLOWING IF FX ACTION**/;   01610000
@9FF     L     @1,596(0,@5)                                       0087  01620000
         CLC   28(2,@1),@C1                                       0087  01630000
         BC    07,@9FE                                            0087  01640000
*               FXACTION = '1'B          /**INDICATE FIXED ACTION**/;   01650000
         OI    32(@1),B'00100000'                                 0089  01660000
*               GO TO F8B4     /** BRANCH TO RESOLVE LENGTH**/;         01670000
         BC    15,F8B4                                            0090  01680000
*         END;                                                          01690000
*         IF FDACTION = '0000'X THEN GO TO F6F2 /*BR TO ASSIGN DEFAULT* 01700000
@9FE     L     @1,596(0,@5)                                       0092  01710000
         CLC   28(2,@1),@X8                                       0092  01720000
         BC    08,F6F2                                            0093  01730000
*         IF FDACTION = 'RP' THEN DO /**DO FOLLOWING IF RIPPLE**/;      01740000
         CLC   28(2,@1),@C9                                       0094  01750000
         BC    07,@9FD                                            0094  01760000
*               RPACTION = '1'B          /**INDICATE RIPPLE ACTION**/;  01770000
         OI    32(@1),B'00010000'                                 0096  01780000
*               GO TO F6K2     /** BRANCH TO PROCESS**/;                01790000
         BC    15,F6K2                                            0097  01800000
*         END;                                                          01810000
*         IF EQUOTESW = ON THEN DO /**DO BELOW IF E PICT**/;            01820000
@9FD     CLC   548(1,@5),ON                                       0099  01830000
         BC    07,@9FC                                            0099  01840000
*         IF FDACTION = 'RO' THEN DO /**DO FOLLOWING IF ROLL**/;        01850000
         L     @1,596(0,@5)                                       0101  01860000
         CLC   28(2,@1),@C10                                      0101  01870000
         BC    07,@9FB                                            0101  01880000
*               ROACTION = '1'B          /**INDICATE ROLL ACTION**/;    01890000
         OI    32(@1),B'00001000'                                 0103  01900000
*               GO TO F6H3     /**BR TO PROCESS**/;                     01910000
         BC    15,F6H3                                            0104  01920000
*         END;                                                          01930000
*         IF FDACTION = 'WV' THEN DO /**DO FOLLOWING IF WAVE**/;        01940000
@9FB     L     @1,596(0,@5)                                       0106  01950000
         CLC   28(2,@1),@C11                                      0106  01960000
         BC    07,@9FA                                            0106  01970000
*               WVACTION = '1'B          /**INDICATE WAVE ACTION**/;    01980000
         OI    32(@1),B'00000100'                                 0108  01990000
*               GO TO F6K2     /**BRANCH TO PROCESS**/;                 02000000
         BC    15,F6K2                                            0109  02010000
*         END;                                                          02020000
*         END;                                                          02030000
@9FA     EQU   *                                                  0111  02040000
*                         /*ERROR-ACTION SPECIFIED NOT SUPPORTED*/      02050000
*         /*                                                          * 02060000
*         MS = 3                         /*SET MESSAGE 3 */;            02070000
@9FC     LA    @F,3                                               0112  02080000
         STH   @F,406(0,@5)                                       0112  02090000
*               GO TO F1B411   /**BRANCH TO EXIT ROUTINE**/;            02100000
         BC    15,F1B411                                          0113  02110000
*  F6A2:;                                                               02120000
*               STACTION = '1'B /**INDICATE SHIFT,TRUNC ACTION**/;      02130000
F6A2     L     @1,596(0,@5)                                       0115  02140000
         OI    32(@1),B'00000010'                                 0115  02150000
*               FDFRINCR = '01'X         /*SET FROM INC RESTORE TO ONE* 02160000
         MVI   58(@1),X'01'                                       0116  02170000
*               GO TO F8B4     /** BRANCH TO RESOLVE LENGTH**/;         02180000
         BC    15,F8B4                                            0117  02190000
*  F6B2:;                                                               02200000
*               FDFRINCR = '01'X         /*SET FROM INC RESTORE TO ONE* 02210000
F6B2     L     @1,596(0,@5)                                       0119  02220000
         MVI   58(@1),X'01'                                       0119  02230000
*  F6C2:;                                                               02240000
*               STACTION = '1'B /**INDICATE SHIFT,TRUNC ACTION**/;      02250000
F6C2     L     @1,596(0,@5)                                       0121  02260000
         OI    32(@1),B'00000010'                                 0121  02270000
*               FDTOINCR = '01'X         /*SET TO INC RESTORE TO ONE*/; 02280000
         MVI   59(@1),X'01'                                       0122  02290000
*               GO TO F8B4     /** BRANCH TO RESOLVE LENGTH**/;         02300000
         BC    15,F8B4                                            0123  02310000
*  F6F2:;                                                               02320000
*               FDACTION = 'FX'          /*DEFAULT ACTION TO FIXED*/;   02330000
F6F2     L     @1,596(0,@5)                                       0125  02340000
         MVC   28(2,@1),@C1                                       0125  02350000
*               FXACTION = '1'B          /**INDICATE FIXED ACTION**/;   02360000
         OI    32(@1),B'00100000'                                 0126  02370000
*               GO TO F8B4     /** BRANCH TO RESOLVE LENGTH**/;         02380000
         BC    15,F8B4                                            0127  02390000
*  F6K2:;                                                               02400000
*               FDFRINCR = '01'X         /*SET FROM INC RESTORE TO ONE* 02410000
F6K2     L     @1,596(0,@5)                                       0129  02420000
         MVI   58(@1),X'01'                                       0129  02430000
*               GO TO F8A1               /*BR TO CONTINUE PROCESSING*/; 02440000
         BC    15,F8A1                                            0130  02450000
*  /******************************************************************* 02460000
*  /**                                                                * 02470000
*  /**    THIS SECTION GETS CORE, LENGTH DEPENDING ON VALUE CONTAINED * 02480000
*  /** IN REG6. A MESSAGE IS INDICATED WHEN THE CONDITIONAL GETMAIN   * 02490000
*  /** WAS UNSUCCESSFUL. OTHERWISE, A BRANCH IS TAKEN TO SECTION F7A1.* 02500000
*  /** TO PROPAGATE THE FILL CHARACTER.                               * 02510000
*  /**                                                                * 02520000
*  /******************************************************************* 02530000
*  F6F4:;                                                               02540000
*                         /*GET MAIN TO HOLD PATTERN*/                  02550000
*               R1 = ADDR(GETMLIST)      /** PICK UP LIST ADDRESS    ** 02560000
F6F4     LA    @1,364(0,@5)                                       0132  02570000
*               R7 = ADDR(GCADDR)        /** PICK UP GCADDR ADDRESS  ** 02580000
         LA    @7,376(0,@5)                                       0133  02590000
*                              /*ISSUE GET MAIN MACRO*/                 02600000
*         GEN ( GETMAIN EC,LV=(R6),A=(R7),SP=0,MF=(E,(R1)));            02610000
          GETMAIN EC,LV=(R6),A=(R7),SP=0,MF=(E,(R1))                    02620000
         DS    0H                                                       02630000
*               IF R15 = 0 THEN GO TO F7A1 /*BR IF GM SUCCESSFUL*/;     02640000
         LTR   @F,@F                                              0135  02650000
         BC    08,F7A1                                            0136  02660000
*                    MS = 10             /*SET MESSAGE FOR BAD GETMAIN* 02670000
         LA    @F,10                                              0137  02680000
         STH   @F,406(0,@5)                                       0137  02690000
*               GO TO F1B411   /** BRANCH TO LEAVE ROUTINE**/;          02700000
         BC    15,F1B411                                          0138  02710000
*  /******************************************************************* 02720000
*  /**                                                                * 02730000
*  /**    THIS SECTION WILL TRIPLE THE FIELD LENGTH WHICH IS REQUIRED * 02740000
*  /** FOR THE ROLL PATTERN AND BRANCH TO GETMAIN BASED ON THE VALUE  * 02750000
*  /** OF REG6.                                                       * 02760000
*  /**                                                                * 02770000
*  /******************************************************************* 02780000
*  F6H3:;                                                               02790000
*               FDFRINCR = '01'X         /*SET FROM INC RESTORE TO ONE* 02800000
F6H3     L     @1,596(0,@5)                                       0140  02810000
         MVI   58(@1),X'01'                                       0140  02820000
*               R6 = FDLGTH              /*PICK UP FIELD LENGTH*/;      02830000
         LH    @6,24(0,@1)                                        0141  02840000
*               R6 = R6 * 3              /*TRIPLE THE LENGTH*/;         02850000
         MH    @6,@D2                                             0142  02860000
*               GO TO F6F4               /*BR TO GET MAIN*/;            02870000
         BC    15,F6F4                                            0143  02880000
*  /******************************************************************* 02890000
*  /**                                                                * 02900000
*  /**    THIS SECTION WILL INITIALIZE THE FDFROMAD TO THE ADDRESS    * 02910000
*  /** JUST OBTAINED AT F6F4. IT WILL THEN PROPAGATE THE FILL         * 02920000
*  /** CHARACTER THROUGHOUT THE FIELD.  IF A BI OF PD FORMAT IS       * 02930000
*  /** INDICATED, THE FIELD WILL BE FILLED WITH BINARY ZEROS.         * 02940000
*  /**                                                                * 02950000
*  /******************************************************************* 02960000
*  F7A1:;                                                               02970000
*               LTOFREE = R6             /*SAVE LENGTH FOR FREEING*/;   02980000
F7A1     L     @1,596(0,@5)                                       0145  02990000
         STH   @6,60(0,@1)                                        0145  03000000
*               R8 = GCADDR              /*WORK ADDRESS TO REG */;      03010000
         L     @8,376(0,@5)                                       0146  03020000
*               FDFROMAD = R8  /**INITILIZE FD FROM ADDRESS*/;          03030000
         ST    @8,44(0,@1)                                        0147  03040000
*         IF FDFORMAT = 'BI' THEN DO /**BR IF NOT BI TO TEST FOR PD **/ 03050000
         CLC   30(2,@1),@C13                                      0148  03060000
         BC    07,@9F9                                            0148  03070000
*              FDFILL = '00'X    /**INITILIZE FILL TO '00'X **/;        03080000
         MVI   33(@1),X'00'                                       0150  03090000
*        END;                                                           03100000
*         IF FDFORMAT = 'PD' THEN DO /**BR IF NOT PD TO FILL FIELD **/; 03110000
@9F9     L     @1,596(0,@5)                                       0152  03120000
         CLC   30(2,@1),@C14                                      0152  03130000
         BC    07,@9F8                                            0152  03140000
*               FDFILL = '00'X       /**INITILIZE FILL TO '00'X **/;    03150000
         MVI   33(@1),X'00'                                       0154  03160000
*        END;                                                           03170000
*         R8 -> INBUF(1) = FDFILL   /**FILL CHARACTER TO FIELD**/;      03180000
@9F8     L     @1,596(0,@5)                                       0156  03190000
         MVC   0(1,@8),33(@1)                                     0156  03200000
*         R6 = R6 - 1          /**CORRECT THE LENGTH**/;                03210000
         BCTR  @6,0                                               0157  03220000
*  F7A2:;                                                               03230000
*         IF R6 = 0 THEN GO TO F7A5 /**BR FIELD IS FILLED**/;           03240000
F7A2     LTR   @6,@6                                              0159  03250000
         BC    08,F7A5                                            0160  03260000
*         IF R6 <= 256 THEN GO TO F7A4 /**BR LT OR EQ TO 256 TO MOVE**/ 03270000
         CH    @6,@D3                                             0161  03280000
         BC    12,F7A4                                            0162  03290000
*                                   /**FILL 256 BYTES**/                03300000
*         GEN ( MVC 1(256,R8),0(R8));                                   03310000
          MVC 1(256,R8),0(R8)                                           03320000
         DS    0H                                                       03330000
*               R6 = R6 - 256      /**DECREMENT LENGTH BY 256**/;       03340000
         SH    @6,@D3                                             0164  03350000
*               R8 = R8 + 256      /**INCREMENT ADDRESS BY 256**/;      03360000
         AH    @8,@D3                                             0165  03370000
*               GO TO F7A2         /**BRANCH MORE TO MOVE**/;           03380000
         BC    15,F7A2                                            0166  03390000
*                                  /**FILL OUT REST OF AREA**/          03400000
*  F7A3:;                                                               03410000
*         GEN ( MVC 1(1,R8),0(R8));                                     03420000
F7A3      MVC 1(1,R8),0(R8)                                             03430000
         DS    0H                                                       03440000
*  F7A4:;                                                               03450000
*         R6 = R6 - 1          /**LENGTH FOR EXECUTE**/;                03460000
F7A4     BCTR  @6,0                                               0170  03470000
*         GEN ( EX R6,F7A3);                                            03480000
          EX R6,F7A3                                                    03490000
         DS    0H                                                       03500000
*  /******************************************************************* 03510000
*  /**                                                                * 03520000
*  /**    AT THIS POINT THE LENGTH REGISTER IS RESTORED AND IF A BI OR* 03530000
*  /** PD PICTURE IS PRESENT A BRANCH IS TAKEN FOR THEIR FINAL        * 03540000
*  /** INITIALIZATION.IF NOT AN EBCDIC PICTURE A BRANCH IS TAKEN TO   * 03550000
*  /** PROCESS IBM SUPPLIED NUMBER FORMATS.                           * 03560000
*  /**                                                                * 03570000
*  /******************************************************************* 03580000
*  F7A5:;                                                               03590000
*         R6 = LTOFREE             /**RESTORE LENGTH REGISTER**/;       03600000
F7A5     L     @1,596(0,@5)                                       0173  03610000
         LH    @6,60(0,@1)                                        0173  03620000
*         IF PQUOTESW = ON THEN GO TO F10A2 /**BR IF PD NO**/;          03630000
         CLC   547(1,@5),ON                                       0174  03640000
         BC    08,F10A2                                           0175  03650000
*         IF BQUOTESW = ON THEN GO TO F10A4 /**BR IF BINARY NO**/;      03660000
         CLC   546(1,@5),ON                                       0176  03670000
         BC    08,F10A4                                           0177  03680000
*         IF EQUOTESW ¬= ON THEN GO TO F8G1 /*BR NOT PICT-ITS IBM FMT*/ 03690000
         CLC   548(1,@5),ON                                       0178  03700000
         BC    07,F8G1                                            0179  03710000
*  /******************************************************************/ 03720000
*                         /*AT THIS POINT WE ARE PROCESSING A USER */   03730000
*                         /*DEFINED EBCDIC PICTURE WHICH WILL BE */     03740000
*                         /*ROLLED WAVED OR RIPPLED.THE PICTURE HAS*/   03750000
*                         /*BEEN SCANNED FROM THE FD CONTROL CARD AT*/  03760000
*                         /*WHICH TIME IT WAS PLACED AT SGCADDR*/       03770000
*                         /*ITS FINAL RESTING PLACE WILL BE GCADDR*/    03780000
*                         /*EQUALS FROM ADDR WHERE THE PICTURE WILL*/   03790000
*                         /*BE DOUBLED FOR WAVE AND RIPPLE-TRIPLED*/    03800000
*                         /*FOR ROLL.IT WILL BE MOVED BY SETTING UP*/   03810000
*                         /*TO AND FROM ADDRESSES AND CALLING MOVEROUT* 03820000
*                         /*THE REQUIRED NUMBER OF TIMES*/              03830000
*                         /*                                         */ 03840000
*  /******************************************************************/ 03850000
*                         /*                                         */ 03860000
*  /******************************************************************* 03870000
*  /**                                                                * 03880000
*  /**    THIS SECTION TESTS FOR PICTURE LENGTH BEING LONGER THAN FD  * 03890000
*  /** LENGTH.IF SO A MESSAGE IS INDICATED AND A BRANCH TAKEN TO EXIT.* 03900000
*  /**                                                                * 03910000
*  /******************************************************************* 03920000
*         IF FDLGTH >= FDPLGTH THEN GO TO F7A7 /**IF PLGTH OK BRANCH**/ 03930000
         LH    @F,588(0,@5)                                       0180  03940000
         CH    @F,24(0,@1)                                        0180  03950000
         BC    12,F7A7                                            0181  03960000
*               MS = 16        /**INDICATE MESSAGE**/;                  03970000
         LA    @F,16                                              0182  03980000
         STH   @F,406(0,@5)                                       0182  03990000
*               GO TO F1B411   /**BRANCH TO EXIT ROUTINE**/;            04000000
         BC    15,F1B411                                          0183  04010000
*  /******************************************************************* 04020000
*  /**                                                                * 04030000
*  /**    HERE THE FROM AND TOO ADDRESSES OF THE PICTURE AND LENGTH   * 04040000
*  /** ARE PICKED UP.IF ROLL ACTION A BRANCH IS TAKEN TO MOVE THE     * 04050000
*  /** PICTURE THREE TIMES.WAVE AND RIPPLE REQUIRE A DOUBLE PATTERN IN* 04060000
*  /** CORE.IF NOT ROLL,WAVE OR RIPPLE A BRANCH IS TAKEN TO MOVE      * 04070000
*  /** PICTURE ONCE.                                                  * 04080000
*  /**                                                                * 04090000
*  /******************************************************************* 04100000
*  F7A7:;                                                               04110000
*                         /*RESOLVE THE FROM ADDRESS = SGCADDR*/        04120000
*               R9 = SGCADDR             /*FROM ADDRESS RESOLVED*/;     04130000
F7A7     L     @9,592(0,@5)                                       0185  04140000
*                         /*LENGTH TO MOVE = FDLGTH*/                   04150000
*               R7 = FDPLGTH             /*PICK UP LGTH TO MOVE*/;      04160000
         LH    @7,588(0,@5)                                       0186  04170000
*                         /* TO ADDRESS = GCADDR*/                      04180000
*               R8 = GCADDR              /*TO ADDRESS RESOLVED*/;       04190000
         L     @8,376(0,@5)                                       0187  04200000
*                         /*IF PATTERN IS A ROLL THE FDFROMAD MUST*/    04210000
*                         /*EQUAL THE SECOND PATTERN ADDR FOR WAVE OR*/ 04220000
*                         /*RIPPLE IT EQUALS GCADDR*/                   04230000
*               R6 = R8                  /* SAVE ADDRESS*/;             04240000
         LR    @6,@8                                              0188  04250000
*         IF FDACTION = 'RO' THEN GO TO F7C3 /**BR FOR ROLLING ACTION** 04260000
         L     @1,596(0,@5)                                       0189  04270000
         CLC   28(2,@1),@C10                                      0189  04280000
         BC    08,F7C3                                            0190  04290000
*         IF FDACTION = 'WV' THEN GO TO F7E3 /**BRANCH IF WAVE**/;      04300000
         CLC   28(2,@1),@C11                                      0191  04310000
         BC    08,F7E3                                            0192  04320000
*         IF FDACTION = 'RP' THEN GO TO F7E3 /**BRANCH IF ROLL**/;      04330000
         CLC   28(2,@1),@C9                                       0193  04340000
         BC    08,F7E3                                            0194  04350000
*               FDFROMAD = GCADDR /**INIT FD FROM ADDRESS**/;           04360000
         MVC   44(4,@1),376(@5)                                   0195  04370000
*               GO TO F7E4     /**BRANCH TO MOVE PICTURE ONCE**/;       04380000
         BC    15,F7E4                                            0196  04390000
*  /******************************************************************/ 04400000
*                         /*RIPPLE AND WAVE HERE */                     04410000
*                         /*MOVE THE PICTURE TO FDFROMAD */             04420000
*                         /*FOR USE OF THE CREATE MODULE*/              04430000
*  /** ENTRY HERE MOVES PICTURE TWICE INTO GCADDR                     * 04440000
*  /**                                                                * 04450000
*  /******************************************************************* 04460000
*  F7E3:;                                                               04470000
*         CALL MOVEROUT;                                                04480000
F7E3     BAL   @E,MOVEROUT                                        0198  04490000
*                         /*ADDRESS WERE DESTROYED BY THE MOVE ROUTINE* 04500000
*               R9 = SGCADDR             /*FROM ADDRESS RESOLVED*/;     04510000
         L     @9,592(0,@5)                                       0199  04520000
*               R7 = FDPLGTH             /*LENGTH RESOLVED*/;           04530000
         LH    @7,588(0,@5)                                       0200  04540000
*         R8 = R6 + FDLGTH     /**RESOLVE TOO ADDRESS**/;               04550000
         L     @1,596(0,@5)                                       0201  04560000
         LH    @8,24(0,@1)                                        0201  04570000
         AR    @8,@6                                              0201  04580000
*  /******************************************************************* 04590000
*  /**                                                                * 04600000
*  /** ENTRY HERE MOVES PICTURE ONCE                                  * 04610000
*  /**                                                                * 04620000
*  /******************************************************************* 04630000
*  F7E4:;                                                               04640000
*                         /* MOVE FOR THE LAST TIME*/                   04650000
*         CALL MOVEROUT;                                                04660000
F7E4     BAL   @E,MOVEROUT                                        0203  04670000
*                         /*CORE MAY NOW BE FREED THAT HELD THE */      04680000
*                         /* ORIGINAL PICTURE*/                         04690000
*  /******************************************************************* 04700000
*  /**                                                                * 04710000
*  /**    THIS SECTION FREES CORE OBTAINED FOR TEMPORARY STORAGE.     * 04720000
*  /**    THIS SECTION IS ONE OF THE EXIT POINTS FROM THIS ROUTINE.IT * 04730000
*  /** WILL CLEAR ALL FD SWITCHES SET DURING THIS EXECUTION AND RETURN* 04740000
*  /** TO IEBFDANL                                                    * 04750000
*  /**                                                                * 04760000
*  /******************************************************************* 04770000
*  F7G3:;                                                               04780000
*               R6 = FDPLGTH             /*PICK UP LENGTH TO FREE*/;    04790000
F7G3     LH    @6,588(0,@5)                                       0205  04800000
*               R7 = ADDR(SGCADDR) /**ADDRESS OF ADDRESS TO FREE**/;    04810000
         LA    @7,592(0,@5)                                       0206  04820000
*               R1 = ADDR(GETMLIST)      /*PICK UP LIST ADDR FOR MACRO* 04830000
         LA    @1,364(0,@5)                                       0207  04840000
*         GEN ( FREEMAIN E,LV=(R6),A=(R7),SP=0,MF=(E,(1)));             04850000
          FREEMAIN E,LV=(R6),A=(R7),SP=0,MF=(E,(1))                     04860000
         DS    0H                                                       04870000
*  F7H3:;                                                               04880000
*                              /* CLEAR SWITCHES*/                      04890000
*         SWITCH(1:14) = SWITCH(1:14) && SWITCH(1:14) /*FD SWIT OFF*/;  04900000
F7H3     XC    536(14,@5),536(@5)                                 0210  04910000
*                              /*RETURN TO BASE MODULE ONE ENTRY DONE*/ 04920000
*               RETURN;                                                 04930000
         BC    15,@EL01                                           0211  04940000
*  /******************************************************************* 04950000
*  /** ENTRY HERE CAUSES THE PICTURE TO BE MOVED THREE TIMES.         * 04960000
*  /******************************************************************* 04970000
*  F7C3:;                                                               04980000
*                              /*MOVE FIRST PATTERN TO WKAREA*/         04990000
*                              /* ADDRESSES ARE RESOLVED*/              05000000
*               CALL MOVEROUT;                                          05010000
F7C3     BAL   @E,MOVEROUT                                        0213  05020000
*                              /*RESOLVE ADDRESSES AND LENGTH BEFORE*/  05030000
*                              /*BRANCH TO MOVE 2ND TIME*/              05040000
*               R9 = SGCADDR             /*FROM ADDRESS RESOLVED*/;     05050000
         L     @9,592(0,@5)                                       0214  05060000
*               R7 = FDPLGTH             /*LENGTH RESOLVED*/;           05070000
         LH    @7,588(0,@5)                                       0215  05080000
*         R8 = R6 + FDLGTH     /**RESOLVE TOO ADDRESS**/;               05090000
         L     @1,596(0,@5)                                       0216  05100000
         LH    @8,24(0,@1)                                        0216  05110000
         AR    @8,@6                                              0216  05120000
*               FDFROMAD = R8  /**INITILIZE CORRECT FROM ADDRESS**/;    05130000
         ST    @8,44(0,@1)                                        0217  05140000
*               R6 = R8                  /*SAVE ADDRESS*/;              05150000
         LR    @6,@8                                              0218  05160000
*               GO TO F7E3               /*BR TO MOVE 2ND TIME*/;       05170000
         BC    15,F7E3                                            0219  05180000
*  /******************************************************************* 05190000
*  /**                                                                * 05200000
*  /**    ENTRY IS TO THIS POINT WHEN AL,AN,CO OR USER PICTURE WANTED * 05210000
*  /**                                                                * 05220000
*  /**    THIS SECTION WILL TEST FOR FORMAT AND IF FOUND WILL BRANCH  * 05230000
*  /** TO SET UP SEQUENCE LENGTH AND SEQUENCE LENGTH RESTORES FOR THE * 05240000
*  /** CREATE MODULE.THE LENGTH THAT THE PATTERN NEEDS WILL ALSO BE   * 05250000
*  /** DETERMINED.IF NO FORMAT,A PICTURE IS PRESENT,A BRANCH WILL BE  * 05260000
*  /** TAKEN TO DOUBLE THE FIELD LENGTH.                              * 05270000
*  /**                                                                * 05280000
*  /******************************************************************* 05290000
*  F8A1:;                                                               05300000
*         IF FDFORMAT = 'AL' THEN GO TO F8A4 /*BR IF AL FORMAT*/;       05310000
F8A1     L     @1,596(0,@5)                                       0221  05320000
         CLC   30(2,@1),@C15                                      0221  05330000
         BC    08,F8A4                                            0222  05340000
*         IF FDFORMAT = 'AN' THEN GO TO F8B3 /*BR IF AN FORMAT*/;       05350000
         CLC   30(2,@1),@C16                                      0223  05360000
         BC    08,F8B3                                            0224  05370000
*         IF FDFORMAT = 'CO' THEN GO TO F8D2 /*BR IF CO FORMAT*/;       05380000
         CLC   30(2,@1),@C17                                      0225  05390000
         BC    08,F8D2                                            0226  05400000
*                              /*USER PICTURE BR TO DOUBLE FIELD*/      05410000
*               GO TO F8B4               /*BRANCH TO DOUBLE FIELD*/;    05420000
         BC    15,F8B4                                            0227  05430000
*  /******************************************************************* 05440000
*  /**                                                                * 05450000
*  /**    THIS SECTION IS ENTERED FOR AN ALPHABETIC SEQUENCE.IF THE   * 05460000
*  /** FIELD LENGTH IS GREATER THAN THE SEQUENCE LENGTH OF 26 A BRANCH* 05470000
*  /** IS TAKEN TO TEST FOR RIPPLE OR WAVE ACTION.                    * 05480000
*  /******************************************************************* 05490000
*  F8A4:;                                                               05500000
*         IF FDLGTH > '001A'X THEN GO TO F8B4 /*BR WHEN OVER 26 LONG*/; 05510000
F8A4     L     @F,@X18                                            0229  05520000
         L     @1,596(0,@5)                                       0229  05530000
         CH    @F,24(0,@1)                                        0229  05540000
         BC    04,F8B4                                            0230  05550000
*               FDSLGTHR = '001A'X       /*SEQ LGTH RESTORE TO 26*/;    05560000
         MVC   56(2,@1),@X18+2                                    0231  05570000
*               FDSLGTH = FDSLGTHR /**INIT SEQ LGTH FOR RIPPLE**/;      05580000
         MVC   54(2,@1),56(@1)                                    0232  05590000
*               R6 = FDLGTH + 26         /*LGTH FOR GMAIN FOR PATTERN*/ 05600000
         LA    @6,26                                              0233  05610000
         AH    @6,24(0,@1)                                        0233  05620000
*               GO TO F6F4               /*BR TO GET MAIN*/;            05630000
         BC    15,F6F4                                            0234  05640000
*  /******************************************************************* 05650000
*  /**                                                                * 05660000
*  /**    THIS SECTION IS ENTERED FOR AN ALPHANUMERIC SEQUENCE.       * 05670000
*  /******************************************************************* 05680000
*  F8B3:;                                                               05690000
*         IF FDLGTH < '0024'X THEN GO TO F8C3 /**BRANCH LT 36 **/;      05700000
F8B3     L     @F,@X19                                            0236  05710000
         L     @1,596(0,@5)                                       0236  05720000
         CH    @F,24(0,@1)                                        0236  05730000
         BC    02,F8C3                                            0237  05740000
*  /******************************************************************* 05750000
*  /**                                                                * 05760000
*  /**    THIS SECTION WILL DOUBLE THE FIELD LENGTH FOR WAVE OR RIPPLE* 05770000
*  /** ACTION.A BRANCH IS TAKEN TO F6F4 TO GETMAIN TO HOLD THE PATTERN* 05780000
*  /** IF NOT RP OR WV.                                               * 05790000
*  /******************************************************************* 05800000
*  F8B4:;                                                               05810000
*               FDSLGTHR = FDLGTH        /*SEQ RESTORE TO FIELD LGTH*/; 05820000
F8B4     L     @1,596(0,@5)                                       0239  05830000
         MVC   56(2,@1),24(@1)                                    0239  05840000
*         IF FDACTION = 'RP' THEN DO /**IF RIPPLE DO FOLLOWING**/;      05850000
         CLC   28(2,@1),@C9                                       0240  05860000
         BC    07,@9F7                                            0240  05870000
*               FDSLGTH = FDSLGTHR /**INIT SEQ LGTH FOR RIPPLE ONLY**/; 05880000
         MVC   54(2,@1),56(@1)                                    0242  05890000
*               GO TO F8B5     /**BRANCH TO DOUBLE FIELD LGTH**/;       05900000
         BC    15,F8B5                                            0243  05910000
*         END;                                                          05920000
*         IF FDACTION ¬= 'WV' THEN GO TO F6F4 /**BR NOT WAVE**/;        05930000
@9F7     L     @1,596(0,@5)                                       0245  05940000
         CLC   28(2,@1),@C11                                      0245  05950000
         BC    07,F6F4                                            0246  05960000
*  F8B5:;                                                               05970000
*               R6 = FDLGTH * 2          /*DOUBLE THE FIELD LENGTH*/;   05980000
F8B5     LA    @E,2                                               0248  05990000
         L     @1,596(0,@5)                                       0248  06000000
         MH    @E,24(0,@1)                                        0248  06010000
         LR    @6,@E                                              0248  06020000
*               GO TO F6F4               /*BR TO GET MAIN*/;            06030000
         BC    15,F6F4                                            0249  06040000
*  /******************************************************************* 06050000
*  /**                                                                * 06060000
*  /**    THIS SECTION IS ENTERED FOR AN ALPHANUMERIC SEQUENCE.IT WILL* 06070000
*  /** SET THE SEQUENCE LENGTH RESTORES AND DETERMINE THE LENGTH FOR  * 06080000
*  /** THE GETMAIN AT F6F4.                                           * 06090000
*  /******************************************************************* 06100000
*  F8C3:;                                                               06110000
*               FDSLGTHR = '0024'X       /*SEQ LGTH RESTORE TO 36 */;   06120000
F8C3     L     @1,596(0,@5)                                       0251  06130000
         MVC   56(2,@1),@X19+2                                    0251  06140000
*               FDSLGTH = FDSLGTHR /**INIT SEQ LGTH FOR RIPPLE**/;      06150000
         MVC   54(2,@1),56(@1)                                    0252  06160000
*               R6 = FDLGTH + 36         /*LGTH FOR GM FOR PATTERN*/;   06170000
         LA    @6,36                                              0253  06180000
         AH    @6,24(0,@1)                                        0253  06190000
*               GO TO F6F4               /*BR TO GET MAIN*/;            06200000
         BC    15,F6F4                                            0254  06210000
*  /******************************************************************* 06220000
*  /**                                                                * 06230000
*  /**    THIS SECTION IS ENTERED FOR A COLLATTING SEQUENCE.IT WILL   * 06240000
*  /** SET THE SEQUENCE LENGTH RESTORES AND DETERMINE THE LENGTH FOR  * 06250000
*  /** THE GETMAIN AT F6F4.                                           * 06260000
*  /******************************************************************* 06270000
*  F8D2:;                                                               06280000
*         IF FDLGTH > '003F'X THEN GO TO F8B4 /*BRANCH GT 63 */;        06290000
F8D2     L     @F,@X20                                            0256  06300000
         L     @1,596(0,@5)                                       0256  06310000
         CH    @F,24(0,@1)                                        0256  06320000
         BC    04,F8B4                                            0257  06330000
*               FDSLGTHR = '003F'X       /*SEQ LGTH RESTORE TO 63 */;   06340000
         MVC   56(2,@1),@X20+2                                    0258  06350000
*               FDSLGTH = FDSLGTHR /**INIT SEQ LGTH FOR RIPPLE**/;      06360000
         MVC   54(2,@1),56(@1)                                    0259  06370000
*               R6 = FDLGTH + 63         /*LGTH FOR GM FOR PATTERN*/;   06380000
         LA    @6,63                                              0260  06390000
         AH    @6,24(0,@1)                                        0260  06400000
*               GO TO F6F4               /*BR TO GET MAIN*/;            06410000
         BC    15,F6F4                                            0261  06420000
*  /******************************************************************* 06430000
*  /**                                                                * 06440000
*  /**    THIS SECTION WILL TEST FOR RANDOM FORMAT WHICH AT THIS TIME * 06450000
*  /** NEEDS NO FURTHER PROCESSING IN THIS MODULE.IF RANDOM A NUMBER  * 06460000
*  /** IS INDICATED AND A BRANCH IS TAKEN TO F7H3 TO EXIT THIS MODULE.* 06470000
*  /******************************************************************* 06480000
*  F8G1:;                                                               06490000
*         IF FDFORMAT = 'RA' THEN DO /** DO BELOW IF RANDOM**/;         06500000
F8G1     L     @1,596(0,@5)                                       0263  06510000
         CLC   30(2,@1),@C2                                       0263  06520000
         BC    07,@9F6                                            0263  06530000
*         R6 = U ;                     /* PICK UP LAST RANDOM @YA02530* 06540000
         L     @6,624(0,@5)                                       0265  06550000
*         GENERATE ;                                                    06560000
         LA    R7,1                    SET ALL FF IN R7        @YA02530 06570000
         LCR   R7,R7                   FOR SUBTRACTING         @YA02530 06580000
         SRDL  R6,8                    SHIFT TO RETAIN         @YA02530 06590000
         SLL   R6,8                    CLEAN NUMBER            @YA02530 06600000
         SLR   R7,R6                   SUBTRACT TO NUMBER      @YA02530 06610000
         SRL   R6,8                    SHIFT TO GET BYTE       @YA02530 06620000
         SLDL  R6,8                    PLACE IN                @YA02530 06630000
         DS    0H                                                       06640000
*         R7 = 524293 ;                /* INIT MULTIPLIER     @YA02530* 06650000
         L     @7,@D4                                             0267  06660000
*         GENERATE ;                                                    06670000
         MR    R6,R6                   MULTIPLY FOR NEW RANDOM @YA02530 06680000
         LA    R6,3201                 LOAD NUMBER FOR ADD     @YA02530 06690000
         ALR   R7,R6                   ADD VALUE RANDOMIZING   @YA02530 06700000
         LR    R6,R7                   SAVE NEW VALUE          @YA02530 06710000
         SLL   R7,24                   SHIFT TO ADD RANDOM #   @YA02530 06720000
         ALR   R7,R6                   ADD TO NEW # TO AVOID   @YA02530 06730000
         SRL   R6,8                    PAIR/UNPAIR SEQUENCE    @YA02530 06740000
         SLDL  R6,8                    RESULT RANDOM           @YA02530 06750000
         DS    0H                                              @YA02530 06760000
         DS    0H                                                       06770000
*         U = R6 ;                     /* NEW RANDOM #        @YA02530* 06780000
         ST    @6,624(0,@5)                                       0269  06790000
*         FDMLGTH = FDLGTH     /**INITILIZE MOVE LENGTH**/;             06800000
         L     @1,596(0,@5)                                       0270  06810000
         MVC   48(2,@1),24(@1)                                    0270  06820000
*         IF FDLGTH > 4 THEN R6 = 4  /**IF LGTH GT 4 THEN MAKE MOVE REG 06830000
         LA    @F,4                                               0271  06840000
         CH    @F,24(0,@1)                                        0271  06850000
         BC    10,@9F5                                            0271  06860000
*                                       4 **/;                          06870000
         LR    @6,@F                                              0272  06880000
         BC    15,@9F4                                            0273  06890000
*         ELSE R6 = FDLGTH     /** LGTH LT 4 REG EQ LGTH**/;            06900000
@9F5     LH    @6,24(0,@1)                                        0273  06910000
*         R9 = FDFROMAD + FDLGTH - R6 /**DERIVE ADDRESS FOR RANDOM NUMB 06920000
*                                        R**/;                          06930000
@9F4     LCR   @9,@6                                              0274  06940000
         LH    @0,24(0,@1)                                        0274  06950000
         ALR   @9,@0                                              0274  06960000
         AL    @9,44(0,@1)                                        0274  06970000
*         R7 = ADDR(U)         /**PICK UP RANDOM NUMBER ADDRESS**/;     06980000
         LA    @7,624(0,@5)                                       0275  06990000
*         R7 = R7 - R6 + 4     /** ADDRESS PROPER PART OF U **/;        07000000
         LA    @F,4                                               0276  07010000
         SR    @F,@6                                              0276  07020000
         AR    @7,@F                                              0276  07030000
*         INBUF(1:R6) = R7 -> INBUF(1:R6) /**INIT RANDOM NUMBER**/;     07040000
         LR    @E,@7                                              0277  07050000
         LR    @2,@6                                              0277  07060000
         BCTR  @2,0                                               0277  07070000
         LR    @A,@9                                              0277  07080000
         EX    @2,@MVC                                            0277  07090000
*  F8G2:;                                                               07100000
*         FDSWITCH = 'C0'X & FDSWITCH /**TURN OFF ACTION IND FOR CR**/; 07110000
F8G2     L     @1,596(0,@5)                                       0279  07120000
         NI    32(@1),X'C0'                                       0279  07130000
*               NUACTION = '1'B /**TURN ON NUMBER ACTION SWITCH**/;     07140000
         OI    32(@1),B'00000001'                                 0280  07150000
*               GO TO F7H3     /** BR TO EXIT ROUTINE**/;               07160000
         BC    15,F7H3                                            0281  07170000
*         END;                                                          07180000
*  /******************************************************************* 07190000
*  /**                                                                * 07200000
*  /**    THIS SECTION TESTS FOR REST OF FORMATS.IF NO FORMAT WAS     * 07210000
*  /** SPECIFIED,ACTION IS DEFAULTED TO FIXED.FORMAT DEFAULT IS THE   * 07220000
*  /** FILL CHARACTER,ALREADY PROPOGATED THROUGH THE FIELD.IF NO FILL * 07230000
*  /** THERE IS A DEFAULT OF BINARY ZERO.WHEN A FORMAT IS FOUND A     * 07240000
*  /** BRANCH IS TAKEN FOR FURTHER PROCESSING.                        * 07250000
*  /******************************************************************* 07260000
*         IF FDFORMAT = 'BI' THEN GO TO F8H2 /*BR ITS BI FORMAT*/;      07270000
@9F6     L     @1,596(0,@5)                                       0283  07280000
         CLC   30(2,@1),@C13                                      0283  07290000
         BC    08,F8H2                                            0284  07300000
*         IF FDFORMAT = 'PD' THEN GO TO F8J4 /*BR ITS PD FORMAT*/;      07310000
         CLC   30(2,@1),@C14                                      0285  07320000
         BC    08,F8J4                                            0286  07330000
*         IF FDFORMAT = 'ZD' THEN GO TO F8K2 /*BRANCH IF ZD FORMAT*/;   07340000
         CLC   30(2,@1),@C22                                      0287  07350000
         BC    08,F8K2                                            0288  07360000
*  /** IF FORMAT IS SPECIFIED BRANCH  **/                               07370000
*         IF FDFORMAT ¬= '0000'X THEN GO TO F9A1 /** BR A FORMAT**/;    07380000
         CLC   30(2,@1),@X8                                       0289  07390000
         BC    07,F9A1                                            0290  07400000
*  /** AT THIS POINT NO FORMAT WAS ASSIGNED - FILL CHAR HAS BEEN **/    07410000
*  /** MOVED THROUGH FIELD  SEE F7A1. A BRANCH WILL BE TAKEN TO **/     07420000
*               FXACTION = '1'B /** TURN ON FX ACTION SWITCH**/;        07430000
         OI    32(@1),B'00100000'                                 0291  07440000
*               GO TO F7H3     /**BRANCH TO FINISH UP**/;               07450000
         BC    15,F7H3                                            0292  07460000
*  /******************************************************************* 07470000
*  /**                                                                * 07480000
*  /**               BINARY FORMAT IS PROCESSED HERE                  * 07490000
*  /**                                                                * 07500000
*  /** IF THE SIGN WAS SPECIFIED AS NEGATIVE A BRANCH IS TAKEN TO NEXT* 07510000
*  /** SECTION.A POSITIVE BINARY FIELD IS INITILIZED BY LOCATING THE  * 07520000
*  /** RIGHTMOST BYTE IN THE FIELD AND PLACING A '01'X IN IT.A BRANCH * 07530000
*  /** IS THEN TAKEN TO TURN ON NUMBER ACTION SWITCH AND EXIT.        * 07540000
*  /******************************************************************* 07550000
*  F8H2:;                                                               07560000
*         IF FDSIGN = '-' THEN GO TO F8H3 /*BR BI SIGN NEG*/;           07570000
F8H2     L     @1,596(0,@5)                                       0294  07580000
         CLI   34(@1),C'-'                                        0294  07590000
         BC    08,F8H3                                            0295  07600000
*                              /*POS BI SIGN HERE*/                     07610000
*         R9 = FDFROMAD + FDLGTH - 1 /**POINT AT RIGHTMOST BYTE**/;     07620000
         L     @9,@D5                                             0296  07630000
         LH    @0,24(0,@1)                                        0296  07640000
         ALR   @9,@0                                              0296  07650000
         AL    @9,44(0,@1)                                        0296  07660000
*         R9 -> WKADDR(1) = '01'X        /*INIT FIELD TO POS ONE*/;     07670000
         MVI   0(@9),X'01'                                        0297  07680000
*               GO TO F8G2 /** BR TO TURN ON NU ACTION SWITCH**/;       07690000
         BC    15,F8G2                                            0298  07700000
*  /******************************************************************* 07710000
*  /**                                                                * 07720000
*  /**               NEGATIVE BINARY NUMBER HERE                      * 07730000
*  /** THE FIELD ADDRESS IS PICKED UP AND A 'FF'X IS PLACED IN THE    * 07740000
*  /** FIRST BYTE.IF THE FIELD LENGTH IS ONE A BRANCH IS TAKEN TO TURN* 07750000
*  /** ON NUMBER ACTION SWITCH AND EXIT.FOR A LENGTH GT ONE,ONE BITS  * 07760000
*  /** ARE PROPOGATED THROUGH THE FIELD.                              * 07770000
*  /******************************************************************* 07780000
*  F8H3:;                                                               07790000
*               R9 = FDFROMAD            /*POINT AT START OF FIELD*/;   07800000
F8H3     L     @1,596(0,@5)                                       0300  07810000
         L     @9,44(0,@1)                                        0300  07820000
*                                        /*INITILIZE FIELD TO NEG ONE*/ 07830000
*               INBUF(1) = 'FF'X         /*FIRST BYTE TO ONE BITS*/;    07840000
         MVI   0(@9),X'FF'                                        0301  07850000
*         IF FDLGTH = 1 THEN GO TO F8G2 /**BRANCH IF LENGTH IS ONE**/;  07860000
         LA    @F,1                                               0302  07870000
         CH    @F,24(0,@1)                                        0302  07880000
         BC    08,F8G2                                            0303  07890000
*               R6 = FDLGTH - 2 /**INITILIZE REG FOR EXECUTE INST**/;   07900000
         LH    @6,@D6                                             0304  07910000
         AH    @6,24(0,@1)                                        0304  07920000
*                                        /*FILL OUT REST OF FIELD*/     07930000
*         GEN ( EX R6,F8H4);                                            07940000
          EX R6,F8H4                                                    07950000
         DS    0H                                                       07960000
*               GO TO F8G2 /** BR TO TURN ON NU ACTION SWITCH**/;       07970000
         BC    15,F8G2                                            0306  07980000
*  F8H4:;                                                               07990000
*               /*  MOVE CHARACTERS  */                                 08000000
*   GEN ( MVC 1(1,R9),0(R9));                                           08010000
F8H4      MVC 1(1,R9),0(R9)                                             08020000
         DS    0H                                                       08030000
*  /******************************************************************* 08040000
*  /**                                                                * 08050000
*  /**                    PACKED DECIMAL FIELD HERE                   * 08060000
*  /**                                                                * 08070000
*  /** THE ADDRESS OF LAST BYTE OF THE FIELD IS PICKED UP.IF POSITIVE * 08080000
*  /** A '1C'X IS PLACED IN THIS POSITION.NEGATIVE REQUIRES A '1D'X.  * 08090000
*  /** A BRANCH IS THEN TAKEN TO TURN ON THE NUMBER ACTION SWITCH AND * 08100000
*  /** EXIT THIS ROUTINE.                                             * 08110000
*  /******************************************************************* 08120000
*  F8J4:;                                                               08130000
*         R9 = FDFROMAD + FDLGTH - 1 /**ADDRESS LAST BYTE OF FIELD**/;  08140000
F8J4     L     @9,@D5                                             0310  08150000
         L     @1,596(0,@5)                                       0310  08160000
         LH    @0,24(0,@1)                                        0310  08170000
         ALR   @9,@0                                              0310  08180000
         AL    @9,44(0,@1)                                        0310  08190000
*         IF FDSIGN = '-' THEN GO TO F8J5 /*BR PD AND NEG*/;            08200000
         CLI   34(@1),C'-'                                        0311  08210000
         BC    08,F8J5                                            0312  08220000
*                              /*POS PD FIELD HERE*/                    08230000
*         R9 -> WKADDR(1) = '1C'X        /*INIT TO POS ONE*/;           08240000
         MVI   0(@9),X'1C'                                        0313  08250000
*               GO TO F8G2 /** BR TO TURN ON NU ACTION SWITCH**/;       08260000
         BC    15,F8G2                                            0314  08270000
*  F8J5:;                                                               08280000
*         R9 -> WKADDR(1) = '1D'X        /*INIT TO NEG ONE*/;           08290000
F8J5     MVI   0(@9),X'1D'                                        0316  08300000
*               GO TO F8G2 /** BR TO TURN ON NU ACTION SWITCH**/;       08310000
         BC    15,F8G2                                            0317  08320000
*  F8K2:;                                                               08330000
*  /******************************************************************* 08340000
*  /**                                                                * 08350000
*  /**                    ZONED DECIMAL HERE                          * 08360000
*  /**                                                                * 08370000
*  /** THE FIELD IS INITILIZED BY FILLING THE FIRST BYTE WITH 'F0'X   * 08380000
*  /** AND PROPOGATING THIS CHARACTER THROUGH THE FIELD.THE LAST BYTE * 08390000
*  /** IS THEN MADE A 'F1'X,A ZONED DECIMAL CNE.                      * 08400000
*  /******************************************************************* 08410000
*               R9 = FDFROMAD            /*ADDRESS START OF FIELD*/;    08420000
F8K2     L     @1,596(0,@5)                                       0319  08430000
         L     @9,44(0,@1)                                        0319  08440000
*               INBUF(1) = 'F0'X         /*ZD ZERO TO FIRST BYTE*/;     08450000
         MVI   0(@9),X'F0'                                        0320  08460000
*         IF FDLGTH = 1 THEN DO /**IF LENGTH NOT ONE BR TO INIT LNG**/; 08470000
         LA    @F,1                                               0321  08480000
         CH    @F,24(0,@1)                                        0321  08490000
         BC    07,@9F3                                            0321  08500000
*               INBUF(1) = 'F1'X /**ONE CHARACTER FIELD TO ZD ONE**/;   08510000
         MVI   0(@9),X'F1'                                        0323  08520000
*               GO TO F8G2     /**BR TO TURN ON NUACTION SWITCH**/;     08530000
         BC    15,F8G2                                            0324  08540000
*         END;                                                          08550000
*              R6 = FDLGTH - 2 /**INITILIZE REG FOR EXECUTE INST**/;    08560000
@9F3     LH    @6,@D6                                             0326  08570000
         L     @1,596(0,@5)                                       0326  08580000
         AH    @6,24(0,@1)                                        0326  08590000
*                             /*PROPOGATE ZEROES IN FIELD*/             08600000
*  F8K3:;                                                               08610000
*         IF R6 = 0 THEN GO TO F8K5    /**NO MORE TO MOVE**/;           08620000
F8K3     LTR   @6,@6                                              0328  08630000
         BC    08,F8K5                                            0329  08640000
*         IF R6 < 256 THEN GO TO F8K4  /**BR LGTH LESS THAN 256**/;     08650000
         CH    @6,@D3                                             0330  08660000
         BC    04,F8K4                                            0331  08670000
*   GEN(  MVC 1(256,R9),0(R9));        /**MOVE 256 CHARACTERS**/        08680000
           MVC 1(256,R9),0(R9)                                          08690000
         DS    0H                                                       08700000
*         R6 = R6 - 256                /**REDUCE COUNT BY 256**/;       08710000
         SH    @6,@D3                                             0333  08720000
*         R9 = R9 + 256                /**ADD 256 TO ADDRESS**/;        08730000
         AH    @9,@D3                                             0334  08740000
*         GO TO F8K3                   /**BR TO KEEP MOVING**/;         08750000
         BC    15,F8K3                                            0335  08760000
*  F8K4:;                                                               08770000
*   GEN ( EX R6,F8H4);                                                  08780000
F8K4      EX R6,F8H4                                                    08790000
         DS    0H                                                       08800000
*  F8K5:;                                                               08810000
*         R9 = FDFROMAD + FDLGTH - 1   /**ADDRESS LAST BYTE OF FIELD**/ 08820000
F8K5     L     @9,@D5                                             0339  08830000
         L     @1,596(0,@5)                                       0339  08840000
         LH    @0,24(0,@1)                                        0339  08850000
         ALR   @9,@0                                              0339  08860000
         AL    @9,44(0,@1)                                        0339  08870000
*         R9 -> WKADDR(1) = 'F1'X        /*INIT FIELD TO ONE*/;         08880000
         MVI   0(@9),X'F1'                                        0340  08890000
*               GO TO F8G2 /** BR TO TURN ON NU ACTION SWITCH**/;       08900000
         BC    15,F8G2                                            0341  08910000
*  /******************************************************************/ 08920000
*  /**                                                                * 08930000
*  /**    THIS SECTION WILL SET UP AL,AN AND CO FORMATS FOR STARTING  * 08940000
*  /** CHARACTER.NO START CHARACTER DEFAULTS TO'A' FOR AL AND AN.     * 08950000
*  /** CO STARTING CHARACTER DEFAULT IS A BLANK- '40'X.IF CHARACTER   * 08960000
*  /** SPECIFIED IS NOT IN SEQUENCE A MSG IS ISSUED. E.G. A SEMI-COLON* 08970000
*  /** IS NOT PART OF AL FORMAT.WHEN CHARACTER IS RESOLVED,A LOOP IS  * 08980000
*  /** STARTED TO FILL FIELD WITH THE PATTERN.WE CAN ONLY MOVE IN     * 08990000
*  /** INCREMENTS OF 26 FOR AL,36 FOR AN,AND 63 FOR CO.A 63 DIGIT     * 09000000
*  /** PATTERN IS USED AT LABEL COPAT AND ALPAT.                      * 09010000
*  /**                                                                * 09020000
*  /**                                                                * 09030000
*  /** R9 WILL BE USED TO HOLD THE PATTERN ADDRESS-EQUALS FROM ADDRESS* 09040000
*  /** R8 WILL BE USED TO HOLD THE TOO ADDRESS-EQUALS FD FIELD ADDRESS* 09050000
*  /** R7 WILL BE USED TO HOLD THE LENGTH TO MOVE                     * 09060000
*  /**                                                                * 09070000
*  /******************************************************************/ 09080000
*  F9A1:;                                                               09090000
*  /******************************************************************* 09100000
*  /**                                                                * 09110000
*  /**    THIS SECTION PICKS UP START OF AL PATTERN,CLEARS CTR1 AND   * 09120000
*  /** BRANCHES TO RESOLVE PATTERN.                                   * 09130000
*  /******************************************************************* 09140000
*                              /*PICK UP START OF AL AND AN FIELDS*/    09150000
*               R9 = ADDR(ALPAT)         /*PICKS UP START OF AL,AN*/;   09160000
F9A1     LA    @9,ALPAT                                           0343  09170000
*               R6 = 0                   /* CTR1 TO ZERO*/;             09180000
         SR    @6,@6                                              0344  09190000
*         IF FDFORMAT = 'AL' THEN GO TO F9A2 /* IF AL FORMAT-BRANCH*/;  09200000
         L     @1,596(0,@5)                                       0345  09210000
         CLC   30(2,@1),@C15                                      0345  09220000
         BC    08,F9A2                                            0346  09230000
*         IF FDFORMAT = 'CO' THEN GO TO F9F1 /**IF CO FORMAT BRANCH**/; 09240000
         CLC   30(2,@1),@C17                                      0347  09250000
         BC    08,F9F1                                            0348  09260000
*  /******************************************************************* 09270000
*  /**                                                                * 09280000
*  /**               ALPHANUMERIC PATTERN HERE                        * 09290000
*  /** THE SEQUENCE LENGTH OF 36 IS PICKED UP AND A BRANCH TAKEN IF   * 09300000
*  /** A START CHARACTER IS TO BE RESOLVED.IF NO START CHARACTER AND  * 09310000
*  /** LENGTH IS LESS THAN 36 A BRANCH IS TAKEN TO RESOLVE POINTERS   * 09320000
*  /** FOR FILLING FIELD WITH PATTERN,OTHERWISE A BRANCH IS TAKEN TO  * 09330000
*  /** FILL FIELD FROM PATTERN IN INCREMENTS OF 36.                   * 09340000
*  /******************************************************************* 09350000
*               COMPCTR = 36   /**COMPARE CTR TO SEQUENCE LENGTH**/;    09360000
         LA    @F,36                                              0349  09370000
         ST    @F,616(0,@5)                                       0349  09380000
*         IF FDCHAR ¬= '00'X THEN GO TO F9A3 /*BR TO RESOLVE START*/;   09390000
         L     @1,596(0,@5)                                       0350  09400000
         CLI   35(@1),X'00'                                       0350  09410000
         BC    07,F9A3                                            0351  09420000
*         IF LTOFREE > '0024'X THEN GO TO F9C3 /*BR NO START CHARACTER* 09430000
         L     @F,@X19                                            0352  09440000
         CH    @F,60(0,@1)                                        0352  09450000
         BC    04,F9C3                                            0353  09460000
*               GO TO F9J2               /*BR TO RESOLVE PARA FOR MOVE* 09470000
         BC    15,F9J2                                            0354  09480000
*  /******************************************************************* 09490000
*  /**                                                                * 09500000
*  /**               COLLATTING SEQUENCE HERE                         * 09510000
*  /** THE SEQUENCE LENGTH OF 63 IS PICKED UP AND A BRANCH TAKEN IF   * 09520000
*  /** A START CHARACTER IS TO BE RESOLVED.IF NO START CHARACTER AND  * 09530000
*  /** LENGTH IS LESS THAN 63 THE NEXT SECTION IS ENTERED.IF LENGTH IS* 09540000
*  /** GREATER THAN 63 A BRANCH IS TAKEN TO MOVE PATTERN IN INCREMENTS* 09550000
*  /** OF 63.                                                         * 09560000
*  /******************************************************************* 09570000
*  F9F1:;                                                               09580000
*               R9 = ADDR(COPAT)         /*PICK UP START OF CO FIELD*/; 09590000
F9F1     LA    @9,COPAT                                           0356  09600000
*               COMPCTR = 63   /**COMPARE CTR TO SEQUENCE LENGTH**/;    09610000
         LA    @F,63                                              0357  09620000
         ST    @F,616(0,@5)                                       0357  09630000
*         IF FDCHAR ¬= '00'X THEN GO TO F9A3 /**BR TO RESOLVE START**/; 09640000
         L     @1,596(0,@5)                                       0358  09650000
         CLI   35(@1),X'00'                                       0358  09660000
         BC    07,F9A3                                            0359  09670000
*         IF LTOFREE > '003F'X THEN GO TO F9C3 /*BR NO START CHARACTER* 09680000
         L     @F,@X20                                            0360  09690000
         CH    @F,60(0,@1)                                        0360  09700000
         BC    04,F9C3                                            0361  09710000
*  /******************************************************************* 09720000
*  /**    THIS SECTION PICKS UP THE LENGTH AND ADDRESS OF FIELD TO BE * 09730000
*  /** FILLED AND BRANCHES TO MOVE THE PATTERN                        * 09740000
*  /******************************************************************* 09750000
*  F9J2:;                                                               09760000
*               R8 = GCADDR              /* PICK UP WORK ADDRESS*/;     09770000
F9J2     L     @8,376(0,@5)                                       0363  09780000
*               R7 = LTOFREE             /**NO.OF BYTES TO MOVE**/;     09790000
         L     @1,596(0,@5)                                       0364  09800000
         LH    @7,60(0,@1)                                        0364  09810000
*               GO TO F9G5               /*BR TO MOVE PATTERN*/;        09820000
         BC    15,F9G5                                            0365  09830000
*  /******************************************************************* 09840000
*  /**                                                                * 09850000
*  /**               ALPHABETIC PATTERN HERE                          * 09860000
*  /** THE SEQUENCE LENGTH IS PICKED UP AND A BRANCH TAKEN IF A START * 09870000
*  /** CHARACTER IS TO BE RESOLVED.IF NO START CHAR AND LENGTH IS GT  * 09880000
*  /** 26 A BRANCH IS TAKEN TO FILL FIELD IN INCREMENTS OF 26,        * 09890000
*  /** OTHERWISE A BRANCH IS TAKEN TO FILL ALL OF FIELD.              * 09900000
*  /******************************************************************* 09910000
*  F9A2:;                                                               09920000
*               COMPCTR = 26   /**COMPARE CTR TO SEQUENCE LENGTH**/;    09930000
F9A2     LA    @F,26                                              0367  09940000
         ST    @F,616(0,@5)                                       0367  09950000
*         IF FDCHAR ¬= '00'X THEN GO TO F9A3 /*BR TO RESOLVE STARTAD*/; 09960000
         L     @1,596(0,@5)                                       0368  09970000
         CLI   35(@1),X'00'                                       0368  09980000
         BC    07,F9A3                                            0369  09990000
*         IF LTOFREE > '001A'X THEN GO TO F9C3 /*BR NO START CHARACTER* 10000000
         L     @F,@X18                                            0370  10010000
         CH    @F,60(0,@1)                                        0370  10020000
         BC    04,F9C3                                            0371  10030000
*               GO TO F9J2               /*BR TO READY FOR MOVE*/;      10040000
         BC    15,F9J2                                            0372  10050000
*                              /*TEST HERE FOR START CHARACTER*/        10060000
*  /******************************************************************* 10070000
*  /**               RESOLVE START CHARACTER HERE                     * 10080000
*  /** THIS SECTION CONSISTING OF TWO LABELS WILL PASS CHARACTER BY   * 10090000
*  /** CHARACTER THROUGH A SEQUENCE LOOKING FOR A MATCH ON FDCHAR.    * 10100000
*  /** THE COMPCTR CONTAINS THE LENGTH OF THE SEQUENCE.REG 6 IS USED  * 10110000
*  /** TO COUNT WHERE WE ARE IN THE SEQUENCE.REG 9 IS THE POINTER TO  * 10120000
*  /** THE SEQUENCE.IF A MATCH IS FOUND THE NEXT SECTION IS ENTERED.  * 10130000
*  /** NO MATCH CAUSES A MESSAGE INDICATION.                          * 10140000
*  /******************************************************************* 10150000
*  F9A3:;                                                               10160000
*         IF INBUF(1) = FDCHAR THEN GO TO F9C3 /*BRANCH A MATCH*/;      10170000
F9A3     L     @1,596(0,@5)                                       0374  10180000
         CLC   0(1,@9),35(@1)                                     0374  10190000
         BC    08,F9C3                                            0375  10200000
*                              /*HAVE WE PASSED THROUGH ALL OF SEQ*/    10210000
*         IF R6 = COMPCTR THEN GO TO F9B5 /**BRANCH CHARACTER NO GOOD** 10220000
         C     @6,616(0,@5)                                       0376  10230000
         BC    08,F9B5                                            0377  10240000
*               R6 =R6 + 1               /*ADD 1 TO SEQ COUNT*/;        10250000
         AH    @6,@D7                                             0378  10260000
*               R9 =R9 + 1               /* INC COMPARE ADDR BY ONE*/;  10270000
         AH    @9,@D7                                             0379  10280000
*               GO TO F9A3               /*BR TO COMPARE AGAIN*/;       10290000
         BC    15,F9A3                                            0380  10300000
*  F9B5:;                                                               10310000
*               MS = 3                   /*SET MESSAGE 3 */;            10320000
F9B5     LA    @F,3                                               0382  10330000
         STH   @F,406(0,@5)                                       0382  10340000
*               GO TO F1B411   /** BRANCH TO EXIT ROUTINE**/;           10350000
         BC    15,F1B411                                          0383  10360000
*                             /*AT THIS POINT THE STARTING ADDRESS */   10370000
*                              /*IN THE PATTERN HAS BEEN RESOLVED*/     10380000
*                              /*EITHER BY LOOP AT F9A3 OR DEFAULT*/    10390000
*  F9C3:;                                                               10400000
*               R8 = GCADDR              /*PICK UP WORK ADDRESS*/;      10410000
F9C3     L     @8,376(0,@5)                                       0385  10420000
*  /******************************************************************* 10430000
*  /**    THIS SECTION PICKS UP LENGTH TO MOVE AND DETERMINES IF THE  * 10440000
*  /** FIELD CAN BE FILLED IN ONE MOVE OF IF MORE MOVES ARE NEEDED.   * 10450000
*  /******************************************************************* 10460000
*  F9C4:;                                                               10470000
*         R7 = COMPCTR - R6    /**R7 EQUALS LENGTH TO MOVE**/;          10480000
F9C4     LCR   @7,@6                                              0387  10490000
         A     @7,616(0,@5)                                       0387  10500000
*         COMPCTR = LTOFREE    /** PICK UP TOTAL LENGTH TO MOVE**/;     10510000
         L     @1,596(0,@5)                                       0388  10520000
         LH    @F,60(0,@1)                                        0388  10530000
         ST    @F,616(0,@5)                                       0388  10540000
*  /*IF LENGTH TO MOVE IS EQ OR LESS THAN R7 THE FIELD CAN BE*/         10550000
*  /*FILLED DIRECTLY FROM THE SEQUENCE*/                                10560000
*         IF COMPCTR =< R7 THEN DO /*CAN WHOLE FIELD BE INIT FROM SEQ** 10570000
         C     @7,616(0,@5)                                       0389  10580000
         BC    04,@9F2                                            0389  10590000
*                              /**YES REINIT CTR IN CASE FIELD LENGTH** 10600000
*                              /**IS LT LENGTH REMAINING IN SEQUENCE**/ 10610000
*               R7 = LTOFREE   /**REINITILIZE COUNTER**/;               10620000
         L     @1,596(0,@5)                                       0391  10630000
         LH    @7,60(0,@1)                                        0391  10640000
*               GO TO F9G5     /**BRANCH TO FILL WHOLE FIELD**/;        10650000
         BC    15,F9G5                                            0392  10660000
*         END;                                                          10670000
*               GO TO F9E5     /**BR TO MOVE PART OF SEQUENCE**/;       10680000
*  /******************************************************************* 10690000
*  /** THIS SECTION MOVES PART OF SEQUENCE AND RESOLVES NEW ADDRESSES * 10700000
*  /** AND LENGTH.A BRANCH IS THEN TAKEN TO PICK UP SEQUENCE LENGTH IF* 10710000
*  /** AL,AN AND CO.                                                  * 10720000
*  /******************************************************************* 10730000
*  F9E4:;                                                               10740000
*         R7 = R6;                                                      10750000
F9E4     LR    @7,@6                                              0396  10760000
*  F9E5:;                                                               10770000
*         CALL MOVEROUT;                                                10780000
F9E5     BAL   @E,MOVEROUT                                        0398  10790000
*         R8 = R8 + R7      /**RESOLVE NEW ADDRESS**/;                  10800000
         AR    @8,@7                                              0399  10810000
*        COMPCTR = COMPCTR - R7 /**COMPUTE AMOUNT REMAINING TO MOVE**/; 10820000
         LCR   @F,@7                                              0400  10830000
         A     @F,616(0,@5)                                       0400  10840000
         ST    @F,616(0,@5)                                       0400  10850000
*         IF FDFORMAT = 'AL' THEN GO TO F9F4 /*BR IF AL FORMAT*/;       10860000
         L     @1,596(0,@5)                                       0401  10870000
         CLC   30(2,@1),@C15                                      0401  10880000
         BC    08,F9F4                                            0402  10890000
*         IF FDFORMAT = 'AN' THEN GO TO F9G4 /*BR IF AN FORMAT*/;       10900000
         CLC   30(2,@1),@C16                                      0403  10910000
         BC    08,F9G4                                            0404  10920000
*  /******************************************************************* 10930000
*  /** PICK UP COLLATTING SEQUENCE ADDRESS AND LENGTH                 * 10940000
*  /******************************************************************* 10950000
*         R9 = ADDR(COPAT)               /*PICK UP CO ADDRESS*/;        10960000
         LA    @9,COPAT                                           0405  10970000
*         R6 = 63                        /*RENEW CTR1*/;                10980000
         LA    @6,63                                              0406  10990000
*  F9F5:;                                                               11000000
*  /******************************************************************* 11010000
*  /** IF LENGTH REMAING IS GT SEQUENCE LENGTH BRANCH                 * 11020000
*  /******************************************************************* 11030000
*                                        /*TEST LENGTH LEFT*/           11040000
*         IF COMPCTR > R6 THEN GO TO F9E4 /**BRANCH TO MOVE MORE**/;    11050000
F9F5     C     @6,616(0,@5)                                       0408  11060000
         BC    04,F9E4                                            0409  11070000
*                              /* THIS IS LAST MOVE TO COMPLETE FIELD*/ 11080000
*         R7 = COMPCTR         /**RESOLVE LENGTH FOR LAST MOVE**/;      11090000
         L     @7,616(0,@5)                                       0410  11100000
*  /******************************************************************* 11110000
*  /**                                                                * 11120000
*  /** THIS SECTION IS LAST MOVE TO FILL FIELD                        * 11130000
*  /**                                                                * 11140000
*  /******************************************************************* 11150000
*  F9G5:;                                                               11160000
*         CALL MOVEROUT                  /*MOVE BYTES REMAINING*/;      11170000
F9G5     BAL   @E,MOVEROUT                                        0412  11180000
*               GO TO F7H3               /*BR NOT RIPPLE*/;             11190000
         BC    15,F7H3                                            0413  11200000
*  /******************************************************************* 11210000
*  /** PICK UP ALPHABETIC SEQUENCE ADDRESS AND LENGTH AND BRANCH TO   * 11220000
*  /** TEST LENGTH REMAINING TO MOVE.                                 * 11230000
*  /******************************************************************* 11240000
*  F9F4:;                                                               11250000
*         R9 = ADDR(ALPAT)               /*PICK UP AL ADDRESS*/;        11260000
F9F4     LA    @9,ALPAT                                           0415  11270000
*         R6 = 26                        /*RENEW CTR1*/;                11280000
         LA    @6,26                                              0416  11290000
*               GO TO F9F5               /*BR TO TEST LGTH LEFT*/;      11300000
         BC    15,F9F5                                            0417  11310000
*  /******************************************************************* 11320000
*  /** PICK UP ALPHANUMERIC SEQUENCE ADDRESS AND LENGTH AND BRANCH TO * 11330000
*  /** TEST LENGTH REMAINING TO MOVE.                                 * 11340000
*  /******************************************************************* 11350000
*  F9G4:;                                                               11360000
*         R9 = ADDR(ALPAT)               /*PICK UP AL ADDRESS*/;        11370000
F9G4     LA    @9,ALPAT                                           0419  11380000
*         R6 = 36                        /*RENEW CTR1*/;                11390000
         LA    @6,36                                              0420  11400000
*               GO TO F9F5               /*BR TO TEST LGTH LEFT*/;      11410000
         BC    15,F9F5                                            0421  11420000
*  F10A0:;                                                              11430000
*                         /* THIS INST MOVES PICTURE*/                  11440000
*  F10A1:;                                                              11450000
F10A0    EQU   *                                                  0423  11460000
*         GEN ( MVC 0(1,R7),0(R8));                                     11470000
F10A1     MVC 0(1,R7),0(R8)                                             11480000
         DS    0H                                                       11490000
*  /******************************************************************* 11500000
*  /**                                                                * 11510000
*  /**    THIS SECTION WILL PLACE THE PACKED DECIMAL PICTURE INTO THE * 11520000
*  /** FIELD.IF THE PACKED LENGTH IS GREATER THAN THE FIELD LENGTH    * 11530000
*  /** IT IS SHORTENED UNTIL IT WILL FIT IN THE FIELD.SIGN IS HONORED.* 11540000
*  /** THE FORMAT IS MADE 'PD',NUMBER ACTION SWITCH TURNED ON AND THE * 11550000
*  /** LENGTH OF THE PACKED NUMBER IS RESOLVED.                       * 11560000
*  /**                                                                * 11570000
*  /******************************************************************* 11580000
*  F10A2:;                                                              11590000
*               FDFORMAT = 'PD' /**FORMAT MUST BE PD**/;                11600000
F10A2    L     @1,596(0,@5)                                       0426  11610000
         MVC   30(2,@1),@C14                                      0426  11620000
*               NUACTION = '1'B    /**TURN ON NUMBER ACTION SWITCH**/;  11630000
         OI    32(@1),B'00000001'                                 0427  11640000
*               R6 = FDPLGTH / 2 + 1     /*PACKED LGTH= LGTH/2 PLUS 1 * 11650000
         LH    @E,588(0,@5)                                       0428  11660000
         SRDA  @E,32                                              0428  11670000
         LA    @0,2                                               0428  11680000
         DR    @E,@0                                              0428  11690000
         AH    @F,@D7                                             0428  11700000
         LR    @6,@F                                              0428  11710000
*  /******************************************************************* 11720000
*  /**AT THIS POINT LOCATION OF PACKED NUMBER IN Q MUST BE RESOLVED *** 11730000
*  /**RECEIVING ADDRESS MUST ALSO BE RESOLVED  ************************ 11740000
*  /******************************************************************* 11750000
*                         /*FROM ADDR = ADDR Q + 16 - PACKED LGTH*/     11760000
*  F10A3:;                                                              11770000
*               R8 = ADDR(Q)             /*PICK UP Q ADDR*/;            11780000
F10A3    LA    @8,216(0,@5)                                       0430  11790000
*               R8 = R8 -R6 + 16         /*RESOLVE FROM ADDRESS*/;      11800000
         LA    @F,16                                              0431  11810000
         SR    @F,@6                                              0431  11820000
         AR    @8,@F                                              0431  11830000
*               /*TO ADDR = WKADDR PLUS FLD LGTH-PLGTH*/                11840000
*         IF R6 <= FDLGTH THEN DO /**WILL NUMBER FIT IN FIELD**/;       11850000
         L     @1,596(0,@5)                                       0432  11860000
         CH    @6,24(0,@1)                                        0432  11870000
         BC    02,@9F1                                            0432  11880000
*                                 /**YES-RESOLVE FIELD ADDRESS**/       11890000
*         R7 = GCADDR - R6 + FDLGTH /** OBTAIN WORK ADDRESS**/;         11900000
         LH    @7,24(0,@1)                                        0434  11910000
         SR    @7,@6                                              0434  11920000
         A     @7,376(0,@5)                                       0434  11930000
*               R6 = R6 - 1   /** CORRECT THE LENGTH**/;                11940000
         BCTR  @6,0                                               0435  11950000
*               GO TO F10A5    /**BRANCH TO PROCESS**/;                 11960000
         BC    15,F10A5                                           0436  11970000
*         END;                                                          11980000
*               R6 = R6 - 1    /** DECREMENT LENGTH BY ONE**/;          11990000
@9F1     BCTR  @6,0                                               0438  12000000
*               GO TO F10A3    /**BRANCH TO TRY AGAIN**/;               12010000
         BC    15,F10A3                                           0439  12020000
*  /******************************************************************* 12030000
*  /**    IF SIGN IS NEGATIVE BRANCH TO MAKE SIGN DIGIT A 'FD'.       * 12040000
*  /******************************************************************* 12050000
*  F10A5:;                                                              12060000
*         IF FDSIGN = '-' THEN GO TO F10E3 /*BR IF NEG SIGN */;         12070000
F10A5    L     @1,596(0,@5)                                       0441  12080000
         CLI   34(@1),C'-'                                        0441  12090000
         BC    08,F10E3                                           0442  12100000
*               GO TO F10F1    /**BR SIGN NOT NEG TO INIT TO POSITIVE** 12110000
         BC    15,F10F1                                           0443  12120000
*  /******************************************************************* 12130000
*  /**    THIS SECTION MOVES NUMBER TO FD FIELD,INITILIZES THE FIELD  * 12140000
*  /** ADDRESS IN THE FD TABLE AND BRANCHES TO FREEMAIN CORE USED TO  * 12150000
*  /** HOLD PICTURE WHEN IT WAS FIRST SCANNED FROM THE CONTROL CARD.  * 12160000
*  /******************************************************************* 12170000
*  F10H2:;                                                              12180000
*                         /* MOVE PACKED NO TO FIELD ADDR RES ABOVE*/   12190000
*         GEN ( EX R6,F10A1);                                           12200000
F10H2     EX R6,F10A1                                                   12210000
         DS    0H                                                       12220000
*               FDFROMAD = GCADDR /** INIT FD FROM ADDRESS**/;          12230000
         L     @1,596(0,@5)                                       0446  12240000
         MVC   44(4,@1),376(@5)                                   0446  12250000
*               GO TO F7G3     /** BR TO FREEMAIN AND EXIT**/;          12260000
         BC    15,F7G3                                            0447  12270000
*  /******************************************************************* 12280000
*  /**    INITILIZE SIGN DIGIT TO 'FC' AND BRANCH TO MOVE NUMBER.     * 12290000
*  /******************************************************************* 12300000
*  F10E3:;                                                              12310000
*         QSIGN1 = 'FD'X & QSIGN1 /**CHANGE SIGN TO NEG**/;             12320000
F10E3    NI    231(@5),X'FD'                                      0449  12330000
*               GO TO F10H2              /* BR TO MOVE NUMBER*/;        12340000
         BC    15,F10H2                                           0450  12350000
*  F10F1:;                                                              12360000
*         QSIGN1 = 'FC'X & QSIGN1 /**CHANGE SIGN TO POS**/;             12370000
F10F1    NI    231(@5),X'FC'                                      0452  12380000
*               GO TO F10H2              /*BR TO MOVE NUMBER*/;         12390000
         BC    15,F10H2                                           0453  12400000
*  /******************************************************************* 12410000
*  /**                                                                * 12420000
*  /**    THIS SECTION WILL PLACE THE REQUIRED BINARY PICTURE IN THE  * 12430000
*  /** FIELD.AS FOR A PACKED DECIMAL NUMBER THE NUMBER IS RIGHT       * 12440000
*  /** ADJUSTED IN THE FIELD.                                         * 12450000
*  /**                                                                * 12460000
*  /**    THE FORMAT IS MADE 'BI',NUMBER ACTION SWITCH TURNED ON,LGTH * 12470000
*  /** AND ADDRESSES ARE THEN PICKED UP.IF SIGN IS TO BE POSITIVE A   * 12480000
*  /** BRANCH IS TAKEN OTHER WISE THE NUMBER IS CHANGED TO NEGATIVE.  * 12490000
*  /**                                                                * 12500000
*  /******************************************************************* 12510000
*  F10A4:;                                                              12520000
*               FDFORMAT = 'BI'  /**FORMAT MIST BE BINARY**/;           12530000
F10A4    L     @1,596(0,@5)                                       0455  12540000
         MVC   30(2,@1),@C13                                      0455  12550000
*               NUACTION = '1'B    /**TURN ON NUMBER ACTION SWITCH**/;  12560000
         OI    32(@1),B'00000001'                                 0456  12570000
*               R7 = FDPLGTH             /* PICK UP NUMBER LENGTH*/;    12580000
         LH    @7,588(0,@5)                                       0457  12590000
*               R6 = Q(1:4)    /** PICK UP BINARY NUMBER**/;            12600000
         L     @6,216(0,@5)                                       0458  12610000
*         IF FDSIGN ¬= '-' THEN GO TO F10B4 /*BR TO STORE NO.NOT NEG*/; 12620000
         CLI   34(@1),C'-'                                        0459  12630000
         BC    07,F10B4                                           0460  12640000
*                         /*CHANGE SIGN TO NEG AS REQD*/                12650000
*         GEN ( LCR R6,R6);                                             12660000
          LCR R6,R6                                                     12670000
         DS    0H                                                       12680000
*  /******************************************************************* 12690000
*  /**    IF FD LENGTH IS GT 4 WE WILL RIGHT ADJUST THE NUMBER IN THE * 12700000
*  /** FIELD.                                                         * 12710000
*  /******************************************************************* 12720000
*  F10B4:;                                                              12730000
*               Q = R6                   /* STORE BINARY NUMBER*/;      12740000
F10B4    ST    @6,@TEMP4                                          0463  12750000
         MVC   216(4,@5),@TEMP4                                   0463  12760000
         MVI   220(@5),C' '                                       0463  12770000
         MVC   221(11,@5),220(@5)                                 0463  12780000
*                         /*IF FD FIELD LENGTH IS GREATER THAN 4 WE */  12790000
*                         /*MUST RIGHT ADJUST THE NUMBER IN THE FIELD.* 12800000
*                         /*ANYTHING LESS THAN THIS WE CAN MOVE */      12810000
*                         /*DIRECTLY INTO FIELD BUT MUST TEST FO FIELF* 12820000
*                         /* LENGTH*/                                   12830000
*         IF FDLGTH => '0004'X THEN GO TO F10C5 /*BR EQ OR GT FDLGTH*/; 12840000
         L     @F,@X31                                            0464  12850000
         L     @1,596(0,@5)                                       0464  12860000
         CH    @F,24(0,@1)                                        0464  12870000
         BC    12,F10C5                                           0465  12880000
*         IF FDLGTH = '0003'X THEN GO TO F10E5 /*BR LENGTH EQUALS 3 */; 12890000
         L     @F,@X32                                            0466  12900000
         CH    @F,24(0,@1)                                        0466  12910000
         BC    08,F10E5                                           0467  12920000
*         IF FDLGTH = '0002'X THEN GO TO F10G5 /*BR LENGTH EQUALS 2 */; 12930000
         L     @F,@X33                                            0468  12940000
         CH    @F,24(0,@1)                                        0468  12950000
         BC    08,F10G5                                           0469  12960000
*  /******************************************************************* 12970000
*  /**    HERE LENGTH EQUALS ONE,THE FROM AND TOO ADDRESSES ARE       * 12980000
*  /** RESOLVED AND A BRANCH TAKEN TO MOVE THE NUMBER.                * 12990000
*  /******************************************************************* 13000000
*               R6 = 0         /** LENGTH TO MOVE EQUALS ONE**/;        13010000
         SR    @6,@6                                              0470  13020000
*               R8 = ADDR(Q) + 3         /*RESOLVE FROM ADDRESS*/;      13030000
         LA    @8,219(0,@5)                                       0471  13040000
*         R7 = GCADDR + FDLGTH - 1 /** RESOLVE TOO ADDRESS**/;          13050000
         LH    @7,@D1                                             0472  13060000
         AH    @7,24(0,@1)                                        0472  13070000
         A     @7,376(0,@5)                                       0472  13080000
*               GO TO F10H2              /*BR TO MOVE NUMBER*/;         13090000
         BC    15,F10H2                                           0473  13100000
*  /******************************************************************* 13110000
*  /**    HERE THE LENGTH IS FOUR OR GREATER,ADDRESSES AND LENGTH IS  * 13120000
*  /** RESOLVED AND A BRANCH IS TAKEN TO MOVE THE NUMBER.             * 13130000
*  /******************************************************************* 13140000
*  F10C5:;                                                              13150000
*                         /*RESOLVE ADDRESS LGTH EQ OR GR THAN 4*/      13160000
*         R7 = GCADDR + FDLGTH - 4 /** RESOLVE TOO ADDRESS**/;          13170000
F10C5    LH    @7,@D8                                             0475  13180000
         L     @1,596(0,@5)                                       0475  13190000
         AH    @7,24(0,@1)                                        0475  13200000
         A     @7,376(0,@5)                                       0475  13210000
*                                        /*FIELD LENGTH MINUS 4 */      13220000
*                         /* FROM ADDRESS = ADDRESS Q*/                 13230000
*               R8 = ADDR(Q)   /** RESOLVE FROM ADDRESS**/;             13240000
         LA    @8,216(0,@5)                                       0476  13250000
*               R6 = 3         /** LENGTH TO MOVE EQUALS FOUR**/;       13260000
         LA    @6,3                                               0477  13270000
*               GO TO F10H2              /*BR TO MOVE LENGTH*/;         13280000
         BC    15,F10H2                                           0478  13290000
*  /******************************************************************* 13300000
*  /**    HERE LENGTH EQUALS THREE,ADDRESSES ARE RESOLVED AND A BRANCH* 13310000
*  /** TAKEN TO MOVE THE NUMBER.                                      * 13320000
*  /******************************************************************* 13330000
*  F10E5:;                                                              13340000
*                         /*FROM ADDRESS = Q ADDRESS+ 1 */              13350000
*               R8 = ADDR(Q) + 1         /* RESOLVE FROM ADDRESS*/;     13360000
F10E5    LA    @8,217(0,@5)                                       0480  13370000
*                             /*         */                             13380000
*         R7 = GCADDR + FDLGTH - 3 /** RESOLVE TOO ADDRESS**/;          13390000
         LH    @7,@D9                                             0481  13400000
         L     @1,596(0,@5)                                       0481  13410000
         AH    @7,24(0,@1)                                        0481  13420000
         A     @7,376(0,@5)                                       0481  13430000
*               R6 = 2         /** LENGTH TO MOVE EQUALS THREE**/;      13440000
         LA    @6,2                                               0482  13450000
*               GO TO F10H2              /*BR TO MOVE LENGTH*/;         13460000
         BC    15,F10H2                                           0483  13470000
*  /******************************************************************* 13480000
*  /**    HERE LENGTH EQUALS TWO,ADDRESSES ARE RESOLVED AND A BRANCH  * 13490000
*  /** TAKEN TO MOVE THE NUMBER.                                      * 13500000
*  /******************************************************************* 13510000
*  F10G5:;                                                              13520000
*                         /*FROM ADDRESS = Q ADDRESS + 2 */             13530000
*               R8 = ADDR(Q) + 2         /*RESOLVE FROM ADDRESS*/;      13540000
F10G5    LA    @8,218(0,@5)                                       0485  13550000
*         R7 = GCADDR + FDLGTH - 2 /** RESOLVE TOO ADDRESS**/;          13560000
         LH    @7,@D6                                             0486  13570000
         L     @1,596(0,@5)                                       0486  13580000
         AH    @7,24(0,@1)                                        0486  13590000
         A     @7,376(0,@5)                                       0486  13600000
*               R6 = 1         /** LENGTH TO MOVE EQUALS TWO**/;        13610000
         LA    @6,1                                               0487  13620000
*               GO TO F10H2              /*BR TO MOVE NUMBER*/;         13630000
         BC    15,F10H2                                           0488  13640000
*  /******************************************************************/ 13650000
*  /**                                                               ** 13660000
*  /** THIS SECTION CONSISTING OF THREE LABELS WHICH ARE BRANCHED TO  * 13670000
*  /** FOR EXITING FROM THIS ROUTINE WHEN RETURN OF CONTROL IS NOT    * 13680000
*  /** REQUIRED.A BRANCH TO F1B41 CAUSES ALL FD SWITCHES TO BE TURNED** 13690000
*  /** OFF AND A NORMAL RETURN TO THE BASE MODULE.A BRANCH TO F1B411  * 13700000
*  /** CAUSES THE EPSW TO BE SET TO ONE(INDICATES NEED FOR MESSAGE)   * 13710000
*  /** SWITCHES OFF AND RETURN.A BRANCH TO F1B4 CAUSES FLAGSW(1) TO   * 13720000
*  /** BE SET INDICATING A NEED FOR ERROR FLAGGING A MESSAGE.EPSW IS  * 13730000
*  /** THEN SET,SWITCHES TURNED OFF AND A RETURN ISSUED.THUS F1B41    * 13740000
*  /** IS FOR A NORMAL RETURN.F1B411 INDICATES NEED FOR A MESSAGE AND * 13750000
*  /** RETURN.F1B4 INDICATES ERROR FLAGGING,MESSAGE AND RETURN.       * 13760000
*  /**                                                               ** 13770000
*  /******************************************************************/ 13780000
*  F1B4:;                                                               13790000
*               FLAGSW(1) = '1'B         /*INDICATE ERROR FLAG WANTED*/ 13800000
F1B4     OI    566(@5),B'10000000'                                0490  13810000
*  F1B411:;                                                             13820000
*               EPSW = 1        /*INDICATE NEED FOR MESSAGE */;         13830000
F1B411   MVI   568(@5),1                                          0492  13840000
*  F1B41:;                                                              13850000
*               SWITCH(1) = OFF          /**TURN OFF FIRST FD SWITCH**/ 13860000
F1B41    MVC   536(1,@5),OFF                                      0494  13870000
*         SWITCH(2:14) = SWITCH(1:13) /** TURN OFF FD SWITCHES**/;      13880000
         MVC   537(13,@5),536(@5)                                 0495  13890000
*               RETURN;                                                 13900000
*  SCANOUT: PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                     13910000
@EL01    L     @D,4(0,@D)                                         0497  13920000
         LR    @1,@C                                              0497  13930000
         L     @0,@SIZ001                                         0497  13940000
         FREEMAIN R,LV=(0),A=(1)                                  0497  13950000
         L     @E,12(0,@D)                                        0497  13960000
         LM    @0,@8,20(@D)                                       0497  13970000
         LM    @A,@C,60(@D)                                       0497  13980000
         BCR   15,@E                                              0497  13990000
SCANOUT  EQU   *                                                  0497  14000000
*                              /*************************************** 14010000
*                              /** THIS PROCEDURE WILL FIND THE LGTH ** 14020000
*                              /** OF THE PARAMETER FOLLOWING THE    ** 14030000
*                              /** EQUAL SIGN.UPON ENTRY REG 9 SHOULD** 14040000
*                              /** BE POINTING AT START OF PARAMETER ** 14050000
*                              /** UPON EXIT REGISTERS ARE AS FOLLOWS** 14060000
*                              /**                                   ** 14070000
*                              /** REG  7  EQUALS LENGTH OF PARA     ** 14080000
*                              /** REG  8  COMMA OR BLANK AFTER PARA ** 14090000
*                              /** REG  9  START OF PARAMETER        ** 14100000
*                              /**                                   ** 14110000
*                              /*************************************** 14120000
*               R8 = R9                  /*COPY SCAN POINTER */;        14130000
         LR    @8,@9                                              0498  14140000
*  SCANOUT1:;                                                           14150000
*  /*                                                        */         14160000
*       IF R8 -> INBUF(1) = ',' THEN GO TO SCANOUT2 /*BR IF COMMA*/;    14170000
SCANOUT1 CLI   0(@8),C','                                         0500  14180000
         BC    08,SCANOUT2                                        0501  14190000
*       IF R8 -> INBUF(1) = ' ' THEN GO TO SCANOUT2 /*BR IF BLANK*/;    14200000
         CLI   0(@8),C' '                                         0502  14210000
         BC    08,SCANOUT2                                        0503  14220000
*         R8 = R8 + 1                    /*INC PTR BY ONE*/;            14230000
         AH    @8,@D7                                             0504  14240000
*         IF R8 < COUNTER THEN GO TO SCANOUT1 /**BR NOT IN COL 72    ** 14250000
         C     @8,232(0,@5)                                       0505  14260000
         BC    04,SCANOUT1                                        0506  14270000
*               MS  =  21                       /** INDICATE MESSAGE ** 14280000
         LA    @F,21                                              0507  14290000
         STH   @F,406(0,@5)                                       0507  14300000
*               GO TO F1B411   /** BRANCH TO LEAVE ROUTINE**/;          14310000
         BC    15,F1B411                                          0508  14320000
*  /*                                                        */         14330000
*  SCANOUT2:;                                                           14340000
*               /* R8 SHOULD BE POINTING AT BLANK OR COMMA*/            14350000
*               R7 = R8 - R9           /** CALCULATE PARAMETER LENGTH** 14360000
SCANOUT2 LCR   @7,@9                                              0510  14370000
         AR    @7,@8                                              0510  14380000
*         IF R7 = 0 THEN DO    /**BR WHEN LENGTH IS NOT EQUAL TO ZERO** 14390000
         LTR   @7,@7                                              0511  14400000
         BC    07,@9F0                                            0511  14410000
*               MS = 3         /** INDICATE MESSAGE**/;                 14420000
         LA    @F,3                                               0513  14430000
         STH   @F,406(0,@5)                                       0513  14440000
*               GO TO F1B411   /** BRANCH TO LEAVE ROUTINE**/;          14450000
         BC    15,F1B411                                          0514  14460000
*         END;                                                          14470000
*                              /** LGTH GT EIGHT- NAME IS TOO LONG   ** 14480000
*         IF R7 > 8 THEN DO    /** BR IF LENGTH LT,EQ TO 8           ** 14490000
@9F0     CH    @7,@D10                                            0516  14500000
         BC    12,@9EF                                            0516  14510000
*               MS  =  3                 /** INDICATE MESSAGE        ** 14520000
         LA    @F,3                                               0518  14530000
         STH   @F,406(0,@5)                                       0518  14540000
*               GO TO F1B411   /** BRANCH TO LEAVE ROUTINE**/;          14550000
         BC    15,F1B411                                          0519  14560000
*         END;                                                          14570000
*               RETURN    /* RETURN TO CALLER WITH REGISTERS SET*/;     14580000
*  END SCANOUT;                                                         14590000
@EL02    BCR   15,@E                                              0522  14600000
*  /*                                    */                             14610000
*  /******************************************************************* 14620000
*  /**                                                                * 14630000
*  /** THIS PROCEDURE WILL CONVERT AN EBCDIC NUMBER FROM THE INPUT    * 14640000
*  /** WORKAREA TO BINARY.THE NUMBER IS TESTED BEFORE CONVERSION FOR  * 14650000
*  /** 2147483647.THE LARGEST BINARY NUMBER A REGISTER CAN CONTAIN IS * 14660000
*  /** THIS NUMBER.THIS NUMBER MUST BE VALIDITY CHECKED BEFORE ENTRY  * 14670000
*  /** TO THIS ROUTINE OR THE CVB INSTRUCTION MAY FAIL.               * 14680000
*  /** UPON ENTRY REG 9 POINTS AT START OF EBCDIC NUMBER IN INBUF     * 14690000
*  /** UPON ENTRY REG 7 CONTAINS LENGTH OF NUMBER                     * 14700000
*  /** UPON EXIT REG9 AND REG7 ARE NOT CHANGED                        * 14710000
*  /** REG 6 CONTAINS THE BINARY EQUIVALENT OF NUMBER                 * 14720000
*  /** IF RANGESW IS NOT ON THE NUMBER IS TESTED FOR BEING LARGER THAN* 14730000
*  /** 32767 THE MAXIMUM VALUE ALLOWED FOR LRECL.                     * 14740000
*  /**                                                                * 14750000
*  /******************************************************************* 14760000
*  CONVB: PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                       14770000
*                                   /*SAVE REG 14 IN COMMON AREA. */    14780000
*            SAVE14 = R14;                                              14790000
CONVB    ST    @E,360(0,@5)                                       0524  14800000
*               R6 = R7 - 1    /**CORRECT THE VALUE IN THE REGISTER**/; 14810000
         LH    @6,@D1                                             0525  14820000
         AR    @6,@7                                              0525  14830000
*                              /**PACK THE NUMBER IN Q AREA **/         14840000
*         GEN ( EX R6,CONVBP);                                          14850000
          EX R6,CONVBP                                                  14860000
         DS    0H                                                       14870000
*                              /**TEST FOR NUMBER BEING LARGER THEN**/  14880000
*                              /**2147483647 AND BRANCH IF NOT SO **/   14890000
*         IF Q(1:8) > '000002147483647F'X THEN DO /*BR IF NUMBER OK*/;  14900000
         CLC   216(8,@5),@X36                                     0527  14910000
*               GO TO CONVB1             /*BRANCH TO SET MSG*/;         14920000
         BC    03,CONVB1                                          0529  14930000
*         END;                                                          14940000
*           GEN ( CVB R6,Q(0,R5));                                      14950000
@9EE     EQU   *                                                  0531  14960000
          CVB R6,Q(0,R5)                                                14970000
         DS    0H                                                       14980000
*         IF RANGESW = ON THEN DO /** IF RANGESW ON DO BELOW**/;        14990000
         CLC   541(1,@5),ON                                       0532  15000000
         BC    07,@9ED                                            0532  15010000
*               RANGESW = OFF  /**TURN OFF RANGE SW**/;                 15020000
         MVC   541(1,@5),OFF                                      0534  15030000
*               RETURN;                                                 15040000
         BC    15,@EL03                                           0535  15050000
*         END;                                                          15060000
*         IF R6 <= 32767 THEN DO     /** BRANCH IF LARGER THAN 32767**/ 15070000
@9ED     CH    @6,@D11                                            0537  15080000
         BC    02,@9EC                                            0537  15090000
*                                   /*RESTORE REG 14 FROM COMMON AREA.  15100000
*            R14 = SAVE14;                                              15110000
         L     @E,360(0,@5)                                       0539  15120000
*               RETURN                   /*RETURN TO CALLER*/;          15130000
         BC    15,@EL03                                           0540  15140000
*         END;                                                          15150000
*  CONVB1:;                                                             15160000
@9EC     EQU   *                                                  0542  15170000
*               MS = 6                   /*INDICATE MSG*/;              15180000
CONVB1   LA    @F,6                                               0543  15190000
         STH   @F,406(0,@5)                                       0543  15200000
*               GO TO F1B411   /** BRANCH TO LEAVE ROUTINE**/;          15210000
         BC    15,F1B411                                          0544  15220000
*  CONVBP: GEN ( PACK Q(8,R5),0(1,R9));                                 15230000
CONVBP    PACK Q(8,R5),0(1,R9)                                          15240000
         DS    0H                                                       15250000
*  END CONVB;                                                           15260000
@EL03    BCR   15,@E                                              0546  15270000
*  /******************************************************************* 15280000
*  /**                                                                * 15290000
*  /** THIS PROCEDURE WILL MOVE ANY NUMBER OF CHARACTERS FOR THE      * 15300000
*  /** CALLER.EXPECTED CONTENTS OF REGISTERS UPON ENTRY ARE:          * 15310000
*  /** REG 9 = FROM ADDRESS                                           * 15320000
*  /** REG 8 = TO ADDRESS                                             * 15330000
*  /** REG 7 = LENGTH TO MOVE                                         * 15340000
*  /** REGISTER CONTENTS ARE DESTROYED UPON EXIT IF MOVE IS GT 256    * 15350000
*  /**                                                                * 15360000
*  /******************************************************************* 15370000
*  MOVEROUT: PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                    15380000
MOVEROUT EQU   *                                                  0547  15390000
*  MOVE1:;                                                              15400000
*         IF R7 = 0 THEN RETURN          /** RETURN IF ZERO LENGTH   ** 15410000
MOVE1    LTR   @7,@7                                              0549  15420000
         BC    08,@EL04                                           0550  15430000
*         IF R7 < 256 THEN GO TO MOVE5   /** BR IF LT 256 TO MOVE    ** 15440000
@9EB     CH    @7,@D3                                             0551  15450000
         BC    04,MOVE5                                           0552  15460000
*                                        /*MOVES 256 BYTES*/            15470000
*         GEN (MVC 0(256,R8),0(R9));                                    15480000
         MVC 0(256,R8),0(R9)                                            15490000
         DS    0H                                                       15500000
*               R9 = R9 + 256            /*ADD 256 TO POSITION ADDR*/;  15510000
         AH    @9,@D3                                             0554  15520000
*               R8 = R8 + 256            /*ADD 256 TO POSITION ADDR*/;  15530000
         AH    @8,@D3                                             0555  15540000
*               R7 = R7 - 256            /*SUBT 256 TO CORRECT LENGTH*/ 15550000
         SH    @7,@D3                                             0556  15560000
*          GO TO MOVE1                   /*BR TO CONTINUE PROCESSING*/; 15570000
         BC    15,MOVE1                                           0557  15580000
*  MOVE4 :;                                                             15590000
*                                        /*MOVE REMAINING BYTES*/       15600000
*         GEN ( MVC 0(1,R8),0(R9));                                     15610000
MOVE4     MVC 0(1,R8),0(R9)                                             15620000
         DS    0H                                                       15630000
*  MOVE5:;                                                              15640000
*               R7 = R7 - 1              /*CORRECT THE LENGTH*/;        15650000
MOVE5    BCTR  @7,0                                               0561  15660000
*         GEN ( EX R7,MOVE4);                                           15670000
          EX R7,MOVE4                                                   15680000
         DS    0H                                                       15690000
*               R7 = R7 + 1 /**RESTORE REG 7 FOR EXIT WHEN LT 256 **/;  15700000
         AH    @7,@D7                                             0563  15710000
*               RETURN                   /*RETURN TO CALLER */;         15720000
*  END MOVEROUT;                                                        15730000
@EL04    BCR   15,@E                                              0565  15740000
*  /******************************************************************* 15750000
*  /**                                                                * 15760000
*  /** THIS PROCEDURE WILL VALIDITY CHECK AN EBCDIC NUMBER AS IT IS   * 15770000
*  /** INPUT FROM THE CONTROL CARD.UPON ENTRY REG 9 SHOULD POINT AT   * 15780000
*  /** START OF NUMBER IN INBUF.REG 7 SHOULD CONTAIN LENGTH OF NUMBER** 15790000
*  /** A WORKAREA IS CLEARED TO BINARY ZERO AND ZONES FROM THE NUMBER * 15800000
*  /** ARE MOVED TO THE WORKAREA.A COMPARE IS THEN DONE AGAINST       * 15810000
*  /** FOXZEROEZ.IF ALL DIGITS DO NOT COMPARE THE NUMBER IS INVALID   * 15820000
*  /** AND A BRANCH IS TAKEN TO SET UP MESSAGE AND RETURN,OTHERWISE   * 15830000
*  /** RETURN IS TO THE CALLER.                                       * 15840000
*  /**                                                                * 15850000
*  /******************************************************************* 15860000
*  VALCHECK: PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                    15870000
*                                   /*SAVE REG 14 IN COMMON AREA. */    15880000
*            SAVE14 = R14;                                              15890000
VALCHECK ST    @E,360(0,@5)                                       0567  15900000
*         R8 = R9 + R7 - 1              /**POINT AT END OF NUMBER**/;   15910000
         LH    @8,@D1                                             0568  15920000
         AR    @8,@7                                              0568  15930000
         AR    @8,@9                                              0568  15940000
*  VALCK1:;                             /** TEST ZONE FOR 'F' **/       15950000
*   GEN ( TM 0(R8),X'F0');                                              15960000
VALCK1    TM 0(R8),X'F0'                                                15970000
         DS    0H                                                       15980000
*                                       /**BRANCH TO ISSUE MESSAGE 3    15990000
*                                          IF ZONE NOT 'F'       **/    16000000
*   GEN ( BC    14,MS3 );                                               16010000
          BC    14,MS3                                                  16020000
         DS    0H                                                       16030000
*         IF R8 ¬= R9 THEN DO           /**DO BELOW IF R8 NOT EQ R9**/; 16040000
         CR    @8,@9                                              0572  16050000
         BC    08,@9EA                                            0572  16060000
*               R8 = R8 - 1             /**SUBT ONE FROM R8 **/;        16070000
         BCTR  @8,0                                               0574  16080000
*         GO TO VALCK1                  /** BR TO TEST NEXT ZONE**/;    16090000
         BC    15,VALCK1                                          0575  16100000
*  MS3:;                                                                16110000
*         MS = 3                        /**INDICATE MESSAGE 3 **/;      16120000
MS3      LA    @F,3                                               0577  16130000
         STH   @F,406(0,@5)                                       0577  16140000
*         GO TO F1B411                  /** BR TO LEAVE ROUTINE**/;     16150000
         BC    15,F1B411                                          0578  16160000
*         END;                                                          16170000
*                                   /*RESTORE REG 14 FROM COMMON AREA.  16180000
*            R14 = SAVE14;                                              16190000
@9EA     L     @E,360(0,@5)                                       0580  16200000
*                              /* RETURN TO CALLER*/                    16210000
*               RETURN;                                                 16220000
*    END VALCHECK;                                                      16230000
@EL05    BCR   15,@E                                              0582  16240000
*         END IEBFDTBL;                                                 16250000
@DATA1   EQU   *                                                        16260000
@0       EQU   00                  EQUATES FOR REGISTERS 0-15           16270000
@1       EQU   01                                                       16280000
@2       EQU   02                                                       16290000
@3       EQU   03                                                       16300000
@4       EQU   04                                                       16310000
@5       EQU   05                                                       16320000
@6       EQU   06                                                       16330000
@7       EQU   07                                                       16340000
@8       EQU   08                                                       16350000
@9       EQU   09                                                       16360000
@A       EQU   10                                                       16370000
@B       EQU   11                                                       16380000
@C       EQU   12                                                       16390000
@D       EQU   13                                                       16400000
@E       EQU   14                                                       16410000
@F       EQU   15                                                       16420000
@D4      DC    F'524293'                                                16430000
@D5      DC    F'-1'                                                    16440000
@D1      DC    H'-1'                                                    16450000
@D2      DC    H'3'                                                     16460000
@D3      DC    H'256'                                                   16470000
@D6      DC    H'-2'                                                    16480000
@D7      DC    H'1'                                                     16490000
@D8      DC    H'-4'                                                    16500000
@D9      DC    H'-3'                                                    16510000
@D10     DC    H'8'                                                     16520000
@D11     DC    H'32767'                                                 16530000
@MVC     MVC   0(1,@A),0(@E)                                            16540000
         DS    0F                                                       16550000
@SIZ001  DC    AL1(&SPN)                                                16560000
         DC    AL3(@DATEND-@DATD)                                       16570000
         DS    0F                                                       16580000
@X18     DC    X'0000001A'                                              16590000
@X19     DC    X'00000024'                                              16600000
@X20     DC    X'0000003F'                                              16610000
@X31     DC    X'00000004'                                              16620000
@X32     DC    X'00000003'                                              16630000
@X33     DC    X'00000002'                                              16640000
@X36     DC    X'000002147483647F'                                      16650000
@C1      DC    C'FX'                                                    16660000
@C2      DC    C'RA'                                                    16670000
@C3      DC    C'SL'                                                    16680000
@C4      DC    C'TL'                                                    16690000
@C5      DC    C'SR'                                                    16700000
@C6      DC    C'TR'                                                    16710000
@X8      DC    X'0000'                                                  16720000
@C9      DC    C'RP'                                                    16730000
@C10     DC    C'RO'                                                    16740000
@C11     DC    C'WV'                                                    16750000
@C13     DC    C'BI'                                                    16760000
@C14     DC    C'PD'                                                    16770000
@C15     DC    C'AL'                                                    16780000
@C16     DC    C'AN'                                                    16790000
@C17     DC    C'CO'                                                    16800000
@C22     DC    C'ZD'                                                    16810000
         DS    0D                                                       16820000
@DATA    EQU   *                                                        16830000
R14      EQU   00000014            FULLWORD INTEGER REGISTER            16840000
R15      EQU   00000015            FULLWORD INTEGER REGISTER            16850000
R0       EQU   00000000            FULLWORD INTEGER REGISTER            16860000
R1       EQU   00000001            FULLWORD INTEGER REGISTER            16870000
R2       EQU   00000002            FULLWORD INTEGER REGISTER            16880000
R3       EQU   00000003            FULLWORD INTEGER REGISTER            16890000
R5       EQU   00000005            FULLWORD POINTER REGISTER            16900000
R6       EQU   00000006            FULLWORD POINTER REGISTER            16910000
R7       EQU   00000007            FULLWORD POINTER REGISTER            16920000
R8       EQU   00000008            FULLWORD POINTER REGISTER            16930000
R9       EQU   00000009            FULLWORD POINTER REGISTER            16940000
COMMON   EQU   00000000            308 BYTE(S) ON DWORD                 16950000
PAGENO   EQU   COMMON+00000000     4 BYTE(S)                            16960000
LINECT   EQU   COMMON+00000004     FULLWORD INTEGER                     16970000
LINECTR  EQU   COMMON+00000008     FULLWORD INTEGER                     16980000
PARM     EQU   COMMON+00000012     FULLWORD POINTER                     16990000
REPEATNO EQU   COMMON+00000016     HALFWORD INTEGER                     17000000
CREATENO EQU   COMMON+00000018     HALFWORD INTEGER                     17010000
SYSP     EQU   COMMON+00000020     96 BYTE(S)                           17020000
SYSI     EQU   COMMON+00000116     96 BYTE(S)                           17030000
Q        EQU   COMMON+00000216     16 BYTE(S) ON DWORD                  17040000
QFILL    EQU   COMMON+00000216     7 BYTE(S)                            17050000
QSIGN    EQU   COMMON+00000223     8 BIT(S)                             17060000
QFILL1   EQU   COMMON+00000224     7 BYTE(S)                            17070000
QSIGN1   EQU   COMMON+00000231     8 BIT(S)                             17080000
COUNTER  EQU   COMMON+00000232     FULLWORD POINTER                     17090000
OPENLIST EQU   COMMON+00000236     8 BYTE(S)                            17100000
OPTBYTE1 EQU   COMMON+00000236     4 BYTE(S)                            17110000
OPTBYTE2 EQU   COMMON+00000240     4 BYTE(S)                            17120000
EXLST    EQU   COMMON+00000244     24 BYTE(S) ON WORD                   17130000
INHDR    EQU   COMMON+00000244     1 BYTE(S)                            17140000
INHDR1   EQU   COMMON+00000245     3  BYTE  POINTER ON WORD+1           17150000
OUTHDR   EQU   COMMON+00000248     1 BYTE(S)                            17160000
OUTHDR1  EQU   COMMON+00000249     3  BYTE  POINTER ON WORD+1           17170000
INTRL    EQU   COMMON+00000252     1 BYTE(S)                            17180000
INTRL1   EQU   COMMON+00000253     3  BYTE  POINTER ON WORD+1           17190000
OUTTRL   EQU   COMMON+00000256     1 BYTE(S)                            17200000
OUTTRL1  EQU   COMMON+00000257     3  BYTE  POINTER ON WORD+1           17210000
EXITDCB  EQU   COMMON+00000260     1 BYTE(S)                            17220000
EXITDCB1 EQU   COMMON+00000261     3  BYTE  POINTER ON WORD+1           17230000
TOTAL    EQU   COMMON+00000264     1 BYTE(S)                            17240000
TOTAL1   EQU   COMMON+00000265     3  BYTE  POINTER ON WORD+1           17250000
EXLST1   EQU   COMMON+00000268     4 BYTE(S) ON WORD                    17260000
EDCB1    EQU   COMMON+00000268     1 BYTE(S)                            17270000
EDCB2    EQU   COMMON+00000269     3  BYTE  POINTER ON WORD+1           17280000
EXLST2   EQU   COMMON+00000272     4 BYTE(S) ON WORD                    17290000
EDCB3    EQU   COMMON+00000272     1 BYTE(S)                            17300000
EDCB4    EQU   COMMON+00000273     3  BYTE  POINTER ON WORD+1           17310000
EXLST3   EQU   COMMON+00000276     4 BYTE(S) ON WORD                    17320000
EDCB5    EQU   COMMON+00000276     1 BYTE(S)                            17330000
EDCB6    EQU   COMMON+00000277     3  BYTE  POINTER ON WORD+1           17340000
DLRECL   EQU   COMMON+00000280     HALFWORD INTEGER                     17350000
DBLKSI   EQU   COMMON+00000282     HALFWORD INTEGER                     17360000
DRECFM   EQU   COMMON+00000284     8 BIT(S)                             17370000
LEFTOVER EQU   COMMON+00000288     FULLWORD INTEGER                     17380000
OFFSET   EQU   COMMON+00000292     FULLWORD POINTER                     17390000
LPTR     EQU   COMMON+00000296     FULLWORD POINTER                     17400000
DCBPTR   EQU   COMMON+00000300     FULLWORD POINTER                     17410000
DUMMY    EQU   COMMON+00000304     FULLWORD POINTER                     17420000
COMMON1  EQU   00000304            236 BYTE(S) ON WORD                  17430000
SAVEMS   EQU   COMMON1+00000000    HALFWORD INTEGER                     17440000
CONCODE  EQU   COMMON1+00000002    HALFWORD INTEGER                     17450000
OUTREC   EQU   COMMON1+00000004    FULLWORD POINTER                     17460000
CRTABPT  EQU   COMMON1+00000008    FULLWORD POINTER                     17470000
CURCRTE  EQU   COMMON1+00000012    FULLWORD POINTER                     17480000
CURCRGM  EQU   COMMON1+00000016    FULLWORD POINTER                     17490000
CURPIC   EQU   COMMON1+00000020    FULLWORD POINTER                     17500000
PICCTR   EQU   COMMON1+00000024    FULLWORD INTEGER                     17510000
EXITTAB  EQU   COMMON1+00000028    FULLWORD POINTER                     17520000
EXITGM   EQU   COMMON1+00000032    FULLWORD POINTER                     17530000
CUREXIT  EQU   COMMON1+00000036    FULLWORD POINTER                     17540000
DELIM    EQU   COMMON1+00000040    4 BYTE(S)                            17550000
RECREM   EQU   COMMON1+00000044    FULLWORD INTEGER                     17560000
CURFD    EQU   COMMON1+00000048    FULLWORD POINTER                     17570000
CUROUT   EQU   COMMON1+00000052    FULLWORD POINTER                     17580000
SAVE14   EQU   COMMON1+00000056    FULLWORD POINTER                     17590000
GETMLIST EQU   COMMON1+00000060    16 BYTE(S) ON WORD                   17600000
GLENGTH  EQU   COMMON1+00000060    FULLWORD INTEGER                     17610000
ADRLIST  EQU   COMMON1+00000064    FULLWORD POINTER                     17620000
IND      EQU   COMMON1+00000068    4 BYTE(S)                            17630000
GCODE    EQU   COMMON1+00000068    1 BYTE(S)                            17640000
SPOOL    EQU   COMMON1+00000069    1 BYTE(S)                            17650000
CCODE    EQU   COMMON1+00000070    2 BYTE(S)                            17660000
GCADDR   EQU   COMMON1+00000072    FULLWORD POINTER                     17670000
FIRSTGMO EQU   COMMON1+00000076    FULLWORD POINTER                     17680000
CURRGMO  EQU   COMMON1+00000080    FULLWORD POINTER                     17690000
LASTGMO  EQU   COMMON1+00000084    FULLWORD POINTER                     17700000
FIRSTGMI EQU   COMMON1+00000088    FULLWORD POINTER                     17710000
CURRGMI  EQU   COMMON1+00000092    FULLWORD POINTER                     17720000
LASTGMI  EQU   COMMON1+00000096    FULLWORD POINTER                     17730000
CONDCODE EQU   COMMON1+00000100    HALFWORD INTEGER                     17740000
MS       EQU   COMMON1+00000102    HALFWORD INTEGER                     17750000
INBUFA1  EQU   COMMON1+00000104    121 BYTE(S)                          17760000
INFILL   EQU   COMMON1+00000104    10 BYTE(S)                           17770000
INBUFA   EQU   COMMON1+00000114    111 BYTE(S)                          17780000
DDPTR    EQU   COMMON1+00000228    FULLWORD POINTER                     17790000
DUMMY1   EQU   COMMON1+00000232    FULLWORD POINTER                     17800000
COMMON2  EQU   00000536            76 BYTE(S) ON WORD                   17810000
SWITCH   EQU   COMMON2+00000000    52 BYTE(S)                           17820000
FDCSW    EQU   COMMON2+00000000    1 BYTE(S)                            17830000
FDNAMESW EQU   COMMON2+00000001    1 BYTE(S)                            17840000
FDPCSW   EQU   COMMON2+00000002    1 BYTE(S)                            17850000
FDFMTSW  EQU   COMMON2+00000003    1 BYTE(S)                            17860000
FDPLSW   EQU   COMMON2+00000004    1 BYTE(S)                            17870000
RANGESW  EQU   COMMON2+00000005    1 BYTE(S)                            17880000
FILLSW   EQU   COMMON2+00000006    1 BYTE(S)                            17890000
REPSW    EQU   COMMON2+00000007    1 BYTE(S)                            17900000
INDEXSW  EQU   COMMON2+00000008    1 BYTE(S)                            17910000
INDNMSW  EQU   COMMON2+00000009    1 BYTE(S)                            17920000
BQUOTESW EQU   COMMON2+00000010    1 BYTE(S)                            17930000
PQUOTESW EQU   COMMON2+00000011    1 BYTE(S)                            17940000
EQUOTESW EQU   COMMON2+00000012    1 BYTE(S)                            17950000
FDSW     EQU   COMMON2+00000013    1 BYTE(S)                            17960000
DSDSW    EQU   COMMON2+00000014    1 BYTE(S)                            17970000
NOGOSW   EQU   COMMON2+00000015    1 BYTE(S)                            17980000
CREATESW EQU   COMMON2+00000016    1 BYTE(S)                            17990000
DSDCSW   EQU   COMMON2+00000017    1 BYTE(S)                            18000000
CRCSW    EQU   COMMON2+00000018    1 BYTE(S)                            18010000
EXITSW   EQU   COMMON2+00000019    1 BYTE(S)                            18020000
EODSTOP  EQU   COMMON2+00000020    1 BYTE(S)                            18030000
DSDNULSW EQU   COMMON2+00000021    1 BYTE(S)                            18040000
DSDORGSW EQU   COMMON2+00000022    1 BYTE(S)                            18050000
DSDDDSW  EQU   COMMON2+00000023    1 BYTE(S)                            18060000
CRTBLK   EQU   COMMON2+00000024    1 BYTE(S)                            18070000
NAMCSW   EQU   COMMON2+00000025    8 BIT(S)                             18080000
PICCSW   EQU   COMMON2+00000026    8 BIT(S)                             18090000
BUFPSW   EQU   COMMON2+00000027    1 BYTE(S)                            18100000
ENDSW    EQU   COMMON2+00000028    1 BYTE(S)                            18110000
COMCSW   EQU   COMMON2+00000029    1 BYTE(S)                            18120000
FLAGSW   EQU   COMMON2+00000030    8 BIT(S)                             18130000
PAGESW   EQU   COMMON2+00000031    1 BYTE(S)                            18140000
EPSW     EQU   COMMON2+00000032    1  BYTE  POINTER                     18150000
SYSISW   EQU   COMMON2+00000033    1 BYTE(S)                            18160000
SYSPSW   EQU   COMMON2+00000034    1 BYTE(S)                            18170000
OLDNEWSW EQU   COMMON2+00000035    1 BYTE(S)                            18180000
FLUSHSW  EQU   COMMON2+00000036    1 BYTE(S)                            18190000
FLUSHSW1 EQU   COMMON2+00000037    1 BYTE(S)                            18200000
DSDOSW   EQU   COMMON2+00000038    1 BYTE(S)                            18210000
DSDISW   EQU   COMMON2+00000039    1 BYTE(S)                            18220000
QUANSW   EQU   COMMON2+00000040    1 BYTE(S)                            18230000
PARENSW  EQU   COMMON2+00000041    1 BYTE(S)                            18240000
REPEATSW EQU   COMMON2+00000042    1 BYTE(S)                            18250000
FDPLGTH  EQU   COMMON2+00000052    HALFWORD INTEGER                     18260000
SGCADDR  EQU   COMMON2+00000056    FULLWORD POINTER                     18270000
FDPTR    EQU   COMMON2+00000060    FULLWORD POINTER                     18280000
FDPTR1   EQU   COMMON2+00000064    FULLWORD POINTER                     18290000
FDPTR2   EQU   COMMON2+00000068    FULLWORD POINTER                     18300000
DUMMY2   EQU   COMMON2+00000072    FULLWORD POINTER                     18310000
COMMON3  EQU   00000608            188 BYTE(S) ON WORD                  18320000
FDCTR    EQU   COMMON3+00000000    HALFWORD POINTER                     18330000
LREMAIN  EQU   COMMON3+00000004    FULLWORD POINTER                     18340000
COMPCTR  EQU   COMMON3+00000008    FULLWORD POINTER                     18350000
LMOVED   EQU   COMMON3+00000012    HALFWORD POINTER                     18360000
U        EQU   COMMON3+00000016    FULLWORD POINTER                     18370000
PICEND   EQU   COMMON3+00000020    HALFWORD POINTER                     18380000
CURFDGM  EQU   COMMON3+00000024    FULLWORD POINTER                     18390000
SWTCH    EQU   COMMON3+00000028    4 BYTE(S) ON WORD                    18400000
SYSINSEL EQU   COMMON3+00000028    1 BYTE(S)                            18410000
FIRSTSW  EQU   COMMON3+00000029    1 BYTE(S)                            18420000
FRSTSW   EQU   COMMON3+00000030    1 BYTE(S)                            18430000
STOPSW   EQU   COMMON3+00000031    1 BYTE(S)                            18440000
COPYVAL  EQU   COMMON3+00000032    HALFWORD INTEGER                     18450000
COPYFD   EQU   COMMON3+00000036    FULLWORD POINTER                     18460000
COPYFDGM EQU   COMMON3+00000040    FULLWORD POINTER                     18470000
NAMCTR   EQU   COMMON3+00000044    HALFWORD INTEGER                     18480000
NAMCTR1  EQU   COMMON3+00000046    HALFWORD INTEGER                     18490000
INRECSZ  EQU   COMMON3+00000048    HALFWORD POINTER                     18500000
OUTRECSZ EQU   COMMON3+00000050    HALFWORD POINTER                     18510000
INRECFM  EQU   COMMON3+00000052    1 BYTE(S)                            18520000
RECOFFST EQU   COMMON3+00000053    1  BYTE  POINTER                     18530000
OUTRECFM EQU   COMMON3+00000054    1 BYTE(S)                            18540000
PICBASE  EQU   COMMON3+00000056    FULLWORD POINTER                     18550000
MESSAGE  EQU   COMMON3+00000060    121 BYTE(S)                          18560000
DUMMY3   EQU   COMMON3+00000184    FULLWORD POINTER                     18570000
DCBD     EQU   00000000            280 BYTE(S) ON DWORD                 18580000
FILL     EQU   DCBD+00000000       26 BYTE(S)                           18590000
DSORG1   EQU   DCBD+00000026       2 BYTE(S)                            18600000
DSORG    EQU   DCBD+00000026       8 BIT(S)                             18610000
FILLER   EQU   DCBD+00000028       8 BYTE(S)                            18620000
IOBAD    EQU   DCBD+00000028       4 BYTE(S)                            18630000
BFTEK    EQU   DCBD+00000032       8 BIT(S)                             18640000
EODAD    EQU   DCBD+00000033       3 BYTE(S)                            18650000
RECFM    EQU   DCBD+00000036       8 BIT(S)                             18660000
EXLIST   EQU   DCBD+00000037       3  BYTE  POINTER ON WORD+1           18670000
DDNAME   EQU   DCBD+00000040       8 BYTE(S)                            18680000
DEBAD    EQU   DCBD+00000040       4 BYTE(S)                            18690000
IFLGS    EQU   DCBD+00000040       8 BIT(S)                             18700000
GETAD    EQU   DCBD+00000048       4 BYTE(S)                            18710000
OFLGS    EQU   DCBD+00000048       8 BIT(S)                             18720000
OFLGS1   EQU   DCBD+00000049       1 BYTE(S)                            18730000
MACRF    EQU   DCBD+00000050       2 BYTE(S)                            18740000
FILL2    EQU   DCBD+00000052       10 BYTE(S)                           18750000
BLKSI    EQU   DCBD+00000062       HALFWORD INTEGER                     18760000
FILL3    EQU   DCBD+00000064       18 BYTE(S)                           18770000
LRECL    EQU   DCBD+00000082       HALFWORD INTEGER                     18780000
FILL4    EQU   DCBD+00000084       172 BYTE(S)                          18790000
NEXTDCB  EQU   DCBD+00000256       FULLWORD POINTER                     18800000
DDNAME1  EQU   DCBD+00000260       8 BYTE(S)                            18810000
EODSW    EQU   DCBD+00000268       1 BYTE(S)                            18820000
DCBSW1   EQU   DCBD+00000269       1 BYTE(S)                            18830000
DCBSW2   EQU   DCBD+00000270       1 BYTE(S)                            18840000
DCBSW3   EQU   DCBD+00000271       8 BIT(S)                             18850000
INREC    EQU   DCBD+00000272       FULLWORD POINTER                     18860000
GMLGTH   EQU   DCBD+00000276       HALFWORD INTEGER                     18870000
FIELDSEL EQU   DCBD+00000278       1 BYTE(S)                            18880000
SPARE    EQU   DCBD+00000279       1 BYTE(S)                            18890000
FDTBL    EQU   00000000            520 BYTE(S) ON WORD                  18900000
FDNAME   EQU   FDTBL+00000000      8 BYTE(S)                            18910000
FDREPNM  EQU   FDTBL+00000008      8 BYTE(S)                            18920000
FDINDNM  EQU   FDTBL+00000016      8 BYTE(S) ON WORD                    18930000
FDUMMY   EQU   FDTBL+00000016      4 BYTE(S)                            18940000
FDINDNUM EQU   FDTBL+00000020      FULLWORD POINTER                     18950000
FDLGTH   EQU   FDTBL+00000024      HALFWORD POINTER                     18960000
FDCYCLE  EQU   FDTBL+00000026      HALFWORD POINTER                     18970000
FDACTION EQU   FDTBL+00000028      2 BYTE(S)                            18980000
FDFORMAT EQU   FDTBL+00000030      2 BYTE(S)                            18990000
FDSWITCH EQU   FDTBL+00000032      8 BIT(S)                             19000000
INDBYNAM EQU   FDTBL+00000032      1 BIT(S)                             19010000
PASS     EQU   FDTBL+00000032      1 BIT(S)                             19020000
FXACTION EQU   FDTBL+00000032      1 BIT(S)                             19030000
RPACTION EQU   FDTBL+00000032      1 BIT(S)                             19040000
ROACTION EQU   FDTBL+00000032      1 BIT(S)                             19050000
WVACTION EQU   FDTBL+00000032      1 BIT(S)                             19060000
STACTION EQU   FDTBL+00000032      1 BIT(S)                             19070000
NUACTION EQU   FDTBL+00000032      1 BIT(S)                             19080000
FDFILL   EQU   FDTBL+00000033      1 BYTE(S)                            19090000
FDSIGN   EQU   FDTBL+00000034      1 BYTE(S)                            19100000
FDCHAR   EQU   FDTBL+00000035      1 BYTE(S)                            19110000
FDRANGE  EQU   FDTBL+00000036      4 BYTE(S)                            19120000
FDOBUF   EQU   FDTBL+00000040      HALFWORD POINTER                     19130000
FDFRINC  EQU   FDTBL+00000042      HALFWORD POINTER                     19140000
FDFROMAD EQU   FDTBL+00000044      4 BYTE(S)                            19150000
FDMLGTH  EQU   FDTBL+00000048      HALFWORD POINTER                     19160000
FDTOINC  EQU   FDTBL+00000050      HALFWORD POINTER                     19170000
FDCYCCNT EQU   FDTBL+00000052      HALFWORD POINTER                     19180000
FDSLGTH  EQU   FDTBL+00000054      HALFWORD POINTER                     19190000
FDSLGTHR EQU   FDTBL+00000056      HALFWORD POINTER                     19200000
FDFRINCR EQU   FDTBL+00000058      1 BYTE(S)                            19210000
FDTOINCR EQU   FDTBL+00000059      1 BYTE(S)                            19220000
LTOFREE  EQU   FDTBL+00000060      HALFWORD POINTER                     19230000
FDSW1    EQU   FDTBL+00000062      8 BIT(S)                             19240000
STRTLOC1 EQU   FDTBL+00000062      1 BIT(S)                             19250000
FOXZEROS EQU   *                   16 BYTE(S)                           19260000
         DC    X'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'                      19270000
INBUF    EQU   00000000            80 BYTE(S)                           19280000
BUFFER   EQU   00000000            32767 BYTE(S)                        19290000
ON       EQU   *                   1 BYTE(S)                            19300000
         DC    X'FF'                                                    19310000
OFF      EQU   *                   1 BYTE(S)                            19320000
         DC    X'00'                                                    19330000
WKADDR   EQU   00000000            32767 BYTE(S)                        19340000
COPAT    EQU   *                   27 BYTE(S)                           19350000
         DC    C' ¢.<(+|&&!$*);¬-/,%_>?:#@''="'                         19360000
ALPAT    EQU   *                   36 BYTE(S)                           19370000
         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'                  19380000
OPTIONS  EQU   00000000            256 BYTE(S)                          19390000
PAGE     EQU   00000000            256 BYTE(S)                          19400000
DDLST    EQU   00000000            256 BYTE(S)                          19410000
         ORG   @DATA                                                    19420000
         DS    00000081C                                                19430000
@L       EQU   1                                                        19440000
@DATD    DSECT                                                          19450000
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD                   19460000
BUFPTR   EQU   @DATD+00000072      FULLWORD POINTER                     19470000
RCODE    EQU   @DATD+00000076      FULLWORD INTEGER                     19480000
OPTPTR   EQU   @DATD+00000080      FULLWORD POINTER                     19490000
PGPTR    EQU   @DATD+00000084      FULLWORD POINTER                     19500000
         DS    00000088C                                                19510000
@TEMPS   DS    0F                                                       19520000
@TEMP4   DC    F'0'                                                     19530000
@DATEND  EQU   *                                                        19540000
IEBFDTBL CSECT ,                                                        19550000
@9F2     EQU   F9E5                                                     19560000
@9EF     EQU   @EL02                                                    19570000
         END   IEBFDTBL                                                 19580000
