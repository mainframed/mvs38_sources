SSSM     TITLE 'HASP SUBSYSTEM SUPPORT MODULE PROLOG'                   30000500
*********************************************************************** 30001000
*                                                                     * 30001500
* MODULE NAME = HASPSSSM                                              * 30002000
*                                                                     * 30002500
* DESCRIPTIVE NAME = HASP SUBSYSTEM SUPPORT MODULE FOR JES2           * 30003000
*                                                                     * 30003500
* COPYRIGHT = NONE                                                    * 30004100
*                                                                     * 30004700
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       * 30005000
*                                                                     * 30005500
* FUNCTION = HASPSSSM INTERFACES DIRECTLY WITH THE OPERATING SYSTEM   * 30006000
*            TO PROVIDE JOB SCHEDULING, DATA MANAGEMENT (SYSIN AND    * 30006100
*            SYSOUT), AND OPERATOR COMMUNICATIONS. HASPSSSM CONTAINS  * 30007000
*            FUNCTION ROUTINES WHICH ARE INVOKED THROUGH THE USE      * 30007500
*            OF VECTORS IN THE SUBSYSTEM VECTOR TABLE (SSVT). THE     * 30008000
*            VECTORS ARE USED BY THE OPERATING SYSTEM TO INVOKE       * 30008500
*            FUNCTIONS WHICH ARE DEFINED BY THE IEFJSSOB MACRO        * 30009000
*            EXPANSION. ADDITIONAL SSVT VECTORS ARE USED BY THE       * 30009500
*            HASJES20 MODULE TO PROVIDE SERVICES TO THE REST OF THE   * 30010000
*            JES2 SYSTEM. DURING EXECUTION OF FUNCTIONS REPRESENTED   * 30010500
*            BY THE SSVT VECTORS, ADDITIONAL VECTORS ARE SET INTO     * 30011000
*            DEBS AND ACBS FOR DATA MANAGEMENT SUPPORT. HASPSSSM      * 30011500
*            MAKES REQUESTS FOR SERVICES TO THE HASJES20 MODULE       * 30012000
*            RUNNING UNDER THE JES2 TCB AS WELL AS TO THE OPERATING   * 30012500
*            SYSTEM IN THE PERFORMANCE OF ITS FUNCTIONS.              * 30013000
*                                                                     * 30013500
* NOTES = SEE BELOW                                                   * 30014000
*                                                                     * 30014500
*    DEPENDENCIES = EXCP ACCESS METHOD, SUBSYSTEM INTERFACE,          * 30015000
*                   BRANCH ENTRIES TO GETMAIN/FREE MAIN AND           * 30015500
*                   POST, CMS AND LOCAL LOCK, SWA CREATE INTERFACE,   * 30016000
*                   ENQ,DEQ, AND GET/PUT RPL INTERFACE                * 30016500
*                                                                     * 30017000
*    RESTRICTIONS = NONE                                              * 30017500
*                                                                     * 30018000
*    REGISTER CONVENTIONS = SEE ENTRY POINT DOCUMENTATION             * 30018500
*                                                                     * 30019000
*    PATCH LABEL = SSMPATCH                                           * 30019500
*                                                                     * 30020000
* MODULE TYPE = PROCEDURE                                             * 30020500
*                                                                     * 30021000
*    PROCESSOR = ASSEMBLER F                                          * 30021500
*                                                                     * 30022000
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY * 30022500
*                                                                     * 30023500
* ATTRIBUTES = REENTRANT                                              * 30024000
*                                                                     * 30024500
* ENTRY POINT = SSVT OPERATING SYSTEM DEFINED FUNCTIONS               * 30025000
*                                                                     * 30025500
*               HOSSOUT  - PROCESS SYSOUT                             * 30026000
*               HOSCANC  - TSO CANCEL                                 * 30026500
*               HOSSTAT  - TSO STATUS                                 * 30027000
*               HOSEOT   - END OF TASK                                * 30027500
*               HOSJBSL  - JOB SELECTION                              * 30028000
*               HOSALLOC - ALLOCATION                                 * 30028500
*               HOSUNAL  - UNALLOCATION                               * 30029000
*               HOSEOM   - END OF MEMORY                              * 30029500
*               HOSWTO   - WTO                                        * 30030000
*               HOSCMND  - COMMAND PROCESSING                         * 30030500
*               HOSUSER  - USER VALIDITY CHECK                        * 30031000
*               HOSTERM  - JOB DELETION (TERMINATE EXECUTION)         * 30031500
*               HOSRENQ  - RE-ENQUEUE JOB                             * 30032000
*               HOSOPEN  - OPEN                                       * 30032500
*               HOSCLOS  - CLOSE                                      * 30033000
*               HOSCKPT  - CHECKPOINT                                 * 30033500
*               HOSREST  - RESTART                                    * 30034000
*               HOSREQID - REQUEST JOB ID                             * 30034500
*               HOSRETID - RETURN JOB ID                              * 30035000
*                                                                     * 30035500
*               SSVT JES2 SERVICE FUNCTIONS                           * 30036000
*                                                                     * 30036500
*               $$POST   - POST JES2 MAIN TASK                        * 30037000
*               USERDEST - VERIFY DESTINATION AND CONVERT TO ROUTE    * 30037500
*               SSVOPNC  - CONVERTER FAKE OPEN                        * 30038000
*               SSVCLSC  - CONVERTER FAKE CLOSE                       * 30038500
*               TSGCELL  - GET STORAGE CELL                           * 30039500
*               TSGCPOL  - GET CELL POOL (EXPAND CELLS)               * 30040000
*               TSFCELL  - FREE CELL BY STORAGE ADDRESS               * 30040500
*               TSFCELA  - FREE CELL BY SJB/TCB ADDRESS               * 30041000
*               TSGCMNS  - GET MAIN FOR CELLS                         * 30041500
*               $$VFL    - SIMULATE VFL INSTRUCTION                   * 30041600
*                                                                     * 30042000
*               ACCESS METHOD FUNCTIONS                               * 30042500
*                                                                     * 30043000
*               HASPAM   - GET/PUT/CHECK/POINT/ENDREQ/ERASE           * 30043500
*                          SUPPORT ROUTINE FOR SYSIN/SYSOUT           * 30044000
*                          REQUESTS VIA ACB VECTORS                   * 30044500
*               SVCHAM   - END OF BLOCK ROUTINE ENTERED BY HASPAM     * 30045000
*                          VIA SVC 111                                * 30045500
*               HAMCEA   - CHANNEL END APPENDAGE FOR SVCHAM I/O       * 30046000
*               HAMCEX   - ABNORMAL CHANNEL END APPENDAGE FOR         * 30046500
*                          SVCHAM I/O                                 * 30047000
*                                                                     * 30047500
*    PURPOSE = SEE ENTRY POINT DOCUMENTATION                          * 30048000
*                                                                     * 30048500
*    LINKAGE = SEE ENTRY POINT DOCUMENTATION                          * 30049000
*                                                                     * 30049500
* INPUT = SEE ENTRY POINT DOCUMENTATION                               * 30050000
*                                                                     * 30050500
* OUTPUT = SEE ENTRY POINT DOCUMENTATION                              * 30051000
*                                                                     * 30051500
* EXIT-NORMAL = SEE ENTRY POINT DOCUMENTATION                         * 30052000
*                                                                     * 30052500
* EXIT-ERROR = SEE ENTRY POINT DOCUMENTATION                          * 30053000
*                                                                     * 30053500
* EXTERNAL REFERENCES = SEE BELOW                                     * 30054000
*                                                                     * 30054500
*    ROUTINES = SVC 0, SVC 1, SVC 2, SVC 3, SVC 6, SVC 8, SVC 10,     * 30055000
*               SVC 11, SVC 13, SVC 34, SVC 35, SVC 48, SVC 56,       * 30055500
*               SVC 111, SVC 120, SETLOCK, GETMAIN/FREE MAIN,         * 30056000
*               IEFIB600                                              * 30056500
*                                                                     * 30057000
*    DATA AREAS = SEE $HASPCB MACRO EXPANSION                         * 30057500
*                                                                     * 30058000
*    CONTROL BLOCKS = SEE $HASPCB MACRO EXPANSION                     * 30058500
*                                                                     * 30059000
* TABLES = NONE                                                       * 30059500
*                                                                     * 30060000
* MACROS = EXCP, WAIT, POST, GETMAIN, FREEMAIN, LINK, LOAD, TIME,     * 30060500
*          ABEND, WTO, DEQ, ENQ, CALL, PUT, MODESET, RETURN, SETLOCK  * 30061000
*                                                                     * 30061100
* CHANGE ACTIVITY                                                     * 30061200
*                                                                     * 30061300
*     RELEASE 4.0 = OZ00553,OZ00559,OZ00790,OZ02445,OZ02448,OZ02568,  * 30061500
*                   OZ03317,OZ03324,OZ03344,OZ04303,OZ04307,OZ04312,  * 30061600
*                   OZ04329,OZ04992,OZ05795,OZ05957,OZ06658,OZ06720,  * 30061700
*                   OZ07418,OZ07419,OZ07425,OZ07433,OZ07435,OZ08188,  * 30061800
*                   OZ08194,OZ08205,OZ08213,OZ08214,OZ08220,OZ08236,  * 30061900
*                   OZ09075,OZ09076,OZ09490,OZ10289,OZ10293,OZ10297,  * 30062000
*                   OZ10315                                           * 30062100
*                                                                     * 30062200
*     RELEASE 4.1 = OZ07751,OZ09101,OZ09106,OZ09107,OZ10298,OZ10335,  * 30062300
*                   OZ10345,OZ10368,OZ11323,OZ11406,OZ11741,OZ11742,  * 30062400
*                   OZ11779,OZ11783,OZ11801,OZ12288,OZ12300,OZ13219,  * 30062500
*                   OZ13224,OZ13237,OZ13241,OZ13257,OZ14409,OZ14426,  * 30062600
*                   OZ14427,OZ14448,OZ14449,OZ14893,OZ14902,OZ14909,  * 30062700
*                   OZ15289,OZ15815,OZ15825,OZ18213                   * 30062800
*                                                                     * 30063400
*********************************************************************** 30063500
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE MACRO DEFINITIONS'        30063600
*                                                                       30064000
***** $HASPCB *****           GENERATE HASP CONTROL BLOCKS              30064500
*                                                                       30065000
*                                                                       30065500
         MACRO                                                          30066000
         $HASPCB &DOC=YES,&LIST=YES                                     30066500
         GBLC  &PRINT,&GEN,&DATA                                        30067000
         PUSH  PRINT                                                    30067500
         PRINT &PRINT                                                   30068000
         $PSA  LIST=&LIST          GENERATE OS PSA DSECT                30068500
         $CVT  LIST=&LIST          GENERATE OS CVT DSECT                30069000
         $SSCT LIST=&LIST          GENERATE OS SSCT DSECT               30069500
         $SSIB LIST=&LIST          GENERATE OS SSIB DSECT               30070000
         $SSOB (SO,CS,JS,AL,EN,ET,WT,CM,US,JT,RQ,DM,VS,DA,RR),         C30070500
               LIST=&LIST          GENERATE OS SSOB DSECT               30071000
         $ASCB LIST=&LIST          GENERATE OS ASCB DSECT               30071500
         $ASVT LIST=&LIST          GENERATE OS ASVT DSECT               30072000
         $SRB  LIST=&LIST          GENERATE OS SRB DSECT                30072500
         $TCB  LIST=&LIST          GENERATE OS TCB DSECT                30073000
         $RB   LIST=&LIST          GENERATE OS RB DSECT                 30073500
         $JSCB LIST=&LIST          GENERATE OS JSCB DSECT               30074000
         $PSCB LIST=&LIST          GENERATE OS PSCB DSECT               30074500
         $TCT  LIST=&LIST          GENERATE OS TCT DSECT                30075000
         $TIOT LIST=&LIST          GENERATE OS TIOT DSECT               30075500
         $SIOT LIST=&LIST          GENERATE OS SIOT DSECT               30076000
         $JFCB LIST=&LIST          GENERATE OS JFCB DSECT               30076500
JFCB     DSECT                                                          30077000
         ORG   JFCBDSNM                                                 30077500
         SPACE 1                                                        30078000
*                                                                       30078500
*              JOB ENTRY SUBSYSTEM DSNAME CONVENTIONS                   30079000
*                                                                       30079500
         SPACE 1                                                        30080000
DSNSSNM  DC    CL4'HASP',C'.'      SUBSYSTEM NAME                       30080500
DSNJBID  DC    0CL8'JOB12345',C'JOB'  JOB IDENTIFIER                    30081000
DSNJBNR  DC    ZL5'12345',C'.'     JOB NUMBER                           30081500
DSNDSID  DC    0CL6'SO1234'        DATASET IDENTIFIER                   30082000
DSNDSTYP DC    CL2'SO'             DATASET FUNCTIONAL TYPE              30082500
DSNDSNR  DC    ZL4'1234',C'.'      UNIQUE DATA SET NUMBER               30083000
DSNDDNM  DC    CL8'STCINRDR'       DATASET DEFINITION NAME              30083500
DSNBLANK EQU   DSNDSNR+L'DSNDSNR,1 PAD WITH BLANKS FROM HERE.           30084000
DSNBLNK1 EQU   DSNBLANK+1,L'JFCBDSNM-(DSNBLANK+1-JFCBDSNM)              30084500
&SYSECT  CSECT                     RETURN TO MAIN CSECT                 30085000
         $DCB  LIST=&LIST          GENERATE OS DCB DSECT                30085500
         $RPL  LIST=&LIST          GENERATE OS RPL DSECT                30086000
         $RMR  LIST=&LIST          GENERATE OS RPL RETURN CODES         30086500
         $ACB  LIST=&LIST          GENERATE OS ACB DSECT                30087000
ACBINR   EQU   X'04'               DEBIRBAD POINTS TO INTRDR            30087500
         $ACBXL LIST=&LIST         GENERATE OS ACBXL DSECT              30088000
         $DEB  LIST=&LIST          GENERATE OS DEB DSECT                30088500
         $IOSB LIST=&LIST          GENERATE OS IOSB DSECT               30088600
         $UCB  LIST=&LIST          GENERATE OS UCB DSECT                30088700
         $NEL  LIST=&LIST          GENERATE OS NEL DSECT                30089000
         $LCT  LIST=&LIST          GENERATE OS LCT DSECT                30089500
         $CSCB LIST=&LIST          GENERATE OS CSCB DSECT               30090000
         $UCM  LIST=&LIST          GENERATE OS UCM DSECT                30090500
         $WQE  LIST=&LIST          GENERATE OS WQE DSECT                30091000
         $ORE  LIST=&LIST          GENERATE OS ORE DSECT                30091500
         $IOCM LIST=&LIST          GENERATE OS IOCM DSECT               30091800
         $SMCA LIST=&LIST          GENERATE OS SMCA DSECT            R4 30091900
         $TED  DOC=&DOC            GENERATE HASP TED DSECT              30092000
         $TGB  DOC=&DOC            GENERATE HASP TGB DSECT              30092300
         $TGM  DOC=&DOC            GENERATE HASP TGM DSECT              30092500
         $TAB  DOC=&DOC            GENERATE HASP TAB DSECT           R4 30092600
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT             30093000
         $SJB  DOC=&DOC            GENERATE HASP SJB DSECT              30093500
         $SDB  DOC=&DOC            GENERATE HASP SDB DSECT              30094000
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT              30094500
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT              30095000
         $LRC  DOC=&DOC            GENERATE HASP LRC DSECT              30095500
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT           30096000
         $CMB  DOC=&DOC            GENERATE HASP CMB DSECT              30096500
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT              30097000
         $PDDB DOC=&DOC            GENERATE HASP PDDB DSECT             30097500
         $IOT  DOC=&DOC            GENERATE HASP IOT DSECT              30098000
         $CAT  DOC=&DOC            GENERATE HASP CAT DSECT              30098500
         $OCR  DOC=&DOC            GENERATE HASP OCR DSECT              30099000
         $OCT  DOC=&DOC            GENERATE HASP OCT DSECT              30099500
         $SCAT DOC=&DOC            GENERATE HASP SCAT DSECT             30100000
         $RAT  DOC=&DOC            GENERATE HASP RAT DSECT              30100500
         $RDT  DOC=&DOC            GENERATE HASP RDT DSECT           R4 30100600
         $DCT  DOC=&DOC            GENERATE HASP DCT DSECT              30101000
         $CCE  DOC=&DOC            GENERATE HASP CCE DSECT              30101500
         $HQR  DOC=&DOC            GENERATE HASP HQR DSECT              30101600
         $PSO  DOC=&DOC            GENERATE HASP PSO DSECT              30102000
         $CSA  DOC=&DOC            GENERATE HASP CSA DSECT           R4 30102100
         $CNVWORK DOC=&DOC         GENERATE HASP CNVWORK DSECT          30102500
         $BF   DOC=&DOC            GENERATE HASP BF DSECT               30103000
         SPACE 3                                                        30103500
         POP   PRINT                                                    30104000
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS           30104500
         MEND                                                           30105000
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE LOCAL MACRO DEFINITIONS'  30105500
         MACRO                                                          30106000
         $BF   &DOC=NO                                                  30106500
         GBLA  &BUFSIZE                                                 30107000
         TITLE 'GENERALIZED SUBSYSTEM DATASET BUFFER'                   30107500
*                                                                       30108000
*                                                                       30108500
*              GENERALIZED SUBSYSTEM DATASET BUFFER DSECT               30109000
*                                                                       30109500
*                                                                       30110000
BFDSECT  DSECT                                                          30110500
BFD      EQU   BFDSECT                                                  30111000
         SPACE 3                                                        30111500
BFID     DS    CL4                 ID - PBF, UBF, OR HBF                30112000
BFLENG   DS    AL2(4096)           LENGTH                            R4 30112500
BFFL1    DS    B                   FLAG BYTE 1                          30113000
BFFL2    DS    B                   FLAG BYTE 2                          30113500
BFBF     DS    A                   CHAIN POINTER                        30114000
BFTRK    DS    F                   TRACK ADDRESS OF BUFFER              30114500
BFTCB    DS    A                   TCB ADDRESS FOR FREEMAIN             30115000
BFASCB   DS    A                   ASCB ADDRESS FOR FREEMAIN            30115500
BFLOC    DS    A                   CURRENT LOCATION IN BUFFER           30116000
BFLEN    DS    0F                  OUTPUT - LENGTH REMAINING            30116500
BFECB    DS    F                   INPUT - ECB ON WHICH TO WAIT         30117000
BFRBA    DS    D                   RELATIVE BLOCK ADDRESS               30117500
BFRCT    DS    F                   RECORD COUNTER                       30118000
*                                                                       30118500
*              ONLY THE FOLLOWING DATA IS WRITTEN TO DISK               30119000
*                                                                       30119500
BFIO     EQU   *                   START OF AUXILIARY STORAGE DATA   R4 30120000
BFNXT    DS    F                   CHAINING TRACK                       30120500
BFKEY    DS    0CL6                UNIQUE DATA SET KEY ---              30121000
BFJBK    DS    CL4                 4-BYTE JOB KEY BASED ON TOD CLOCK    30121500
BFDSK    DS    CL2                 2-BYTE SEQUENTIAL DATA SET KEY       30122000
BFDAT    EQU   *                   USER DATA AREA                    R4 30122500
         EJECT                                                          30124500
*                                                                       30125000
*              FLAG DEFINITIONS                                         30125500
*                                                                       30126000
         SPACE 3                                                        30126500
*              FLAGS 1 ---                                              30127000
         SPACE 1                                                        30127500
BF1EOB   EQU   B'10000000'         END-OF-BUFFER INDICATOR           R4 30128000
BF1RSV1  EQU   B'01000000'         RESERVED                             30128500
BF1RSV2  EQU   B'00100000'         RESERVED                             30129000
BF1RSV3  EQU   B'00010000'         RESERVED                             30129500
BF1GSG   EQU   B'00001000'         HGMOVE SPAN ENTRY FLAG               30130000
BF1IOC   EQU   B'00000100'         PBF I/O IS COMPLETE                  30130500
BF1PMV   EQU   B'00000010'         HPMOVE ENTRY FLAG                    30131000
BF1PSG   EQU   B'00000001'         HPMOVE SPAN ENTRY FLAG               30131500
         SPACE 3                                                        30132000
*              FLAGS 2 ---                                              30132500
         SPACE 1                                                        30133000
BF2IOC   EQU   B'10000000'         UBF NOT PRIMED BY HCEGET    @OZ30886 30133500
BF2RSV1  EQU   B'01000000'         RESERVED                             30134000
BF2RSV2  EQU   B'00100000'         RESERVED                             30134500
BF2RSV3  EQU   B'00010000'         RESERVED                             30135000
BF2RSV4  EQU   B'00001000'         RESERVED                             30135500
BF2RSV5  EQU   B'00000100'         RESERVED                             30136000
BF2RSV6  EQU   B'00000010'         RESERVED                             30136500
BF2RSV7  EQU   B'00000001'         RESERVED                             30137000
         SPACE 6                                                        30156000
&SYSECT  CSECT                                                          30156500
         MEND                                                           30157000
         SPACE 3                                                     R4 30157300
         MACRO                                                          30157500
&LABEL   CALL  &ARG                                                     30158000
&LABEL   L     R15,=A(&ARG)                                             30158500
         BALR  R14,R15                                                  30159000
         MEND                                                           30159500
         SPACE 3                                                        30160000
         MACRO                                                          30160500
&L       $PROLOG &FUNC,&LENG,&LOCK=NO,&KEY=0                            30161000
         GBLB  &B(8)                                                    30161500
&B(1)    SETB  ('&LOCK' EQ 'YES')                                       30162000
&B(2)    SETB  ('&LOCK' EQ 'REQ')                                       30162500
&B(3)    SETB  ('&LOCK' EQ 'SDB')                                       30163000
&B(1)    SETB  (&B(1) OR &B(2) OR &B(3))                                30163500
&L      $ENTRY BASE=R15,ENTRY=NO   PROVIDE ENTRY FOR ROUTINE            30164000
         L     R15,=A($PROLOG)                                          30164500
         BALR  R15,R15                                                  30165000
         DC    B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'              30165500
         DC    AL1(&FUNC)                                               30166000
         DC    AL2(&LENG)                                               30166500
         DROP  R15                                                      30167000
         USING *,R12                                                    30167500
         MEND                                                           30168000
         MACRO                                                          30168500
&L       $EPILOG &KEY=                                                  30169000
&L       L     R14,=A($EPILOG)                                          30169500
         BR    R14                                                      30170000
         MEND                                                           30170500
         MACRO                                                          30171000
&L       $ALGN &OP,&R1,&S2                                              30171500
&L       &OP   &R1,0                                                    30172000
         ORG   *-2                                                      30172500
         DC    S(&S2)                                                   30173000
         MEND                                                           30173500
         SPACE 3                                                        30174000
         MACRO                                                          30174500
&L       $GETMAIN &TYPE,&A=,&LV=,&SP=,&KEY=                             30175000
&L       $MAIN 0,&TYPE,0,&LV,&SP,&KEY                                   30175500
         MEND                                                           30176000
         SPACE 3                                                        30176500
         MACRO                                                          30177000
&L       $FREMAIN &TYPE,&A=,&LV=,&SP=,&KEY=,&TCB=NO                     30177500
&L       $MAIN 1,&TYPE,&A,&LV,&SP,&KEY,&TCB                             30178000
         MEND                                                           30178500
         SPACE 3                                                        30179000
         MACRO                                                          30179500
&L       $GETBUF &TYPE=PROT,&A=                                         30180000
         AIF   ('&TYPE' EQ 'PROT').PROT                                 30180500
&L       $MAIN 0,BC,0,4096,229,15  UNPROTECTED                       R4 30181000
         MEXIT                                                          30181500
.PROT    ANOP                                                           30182000
&L       $MAIN 0,BC,0,4096,229,5   PROTECTED                         R4 30182500
         MEND                                                           30183000
         SPACE 3                                                        30183500
         MACRO                                                          30184000
&L       $FREEBUF &TYPE=PROT,&A=                                        30184500
         AIF   ('&TYPE' EQ 'PROT').PROT                                 30185000
&L       $MAIN 1,BU,&A,4096,229,15 UNPROTECTED                       R4 30185500
         MEXIT                                                          30186000
.PROT    ANOP                                                           30186500
&L       $MAIN 1,BU,&A,4096,229,5  PROTECTED                         R4 30187000
         MEND                                                           30187500
         SPACE 3                                                        30188000
         MACRO                                                          30188500
&L       $MAIN &T,&TYPE,&A,&LV,&SP,&KEY,&TCB                            30189000
         LCLA  &TYPA,&TYP,&I                                            30189500
         LCLB  &B                                                       30190000
         LCLC  &C                                                       30190500
* REGISTERS DESTROYED -- R0,R1,R2,R3,R4,R7,R14,R15                      30191000
.*                                                                      30191500
.*             TEST REGULAR OR BUFFER TYPE                              30192000
.*                                                                      30192500
         AIF   ('&TYPE'(1,1) NE 'B').NOTB  GO IF NOT BUFFER-TYPE.       30193000
&TYPA    SETA  &TYPA+64            SHOW BUFFER-TYPE                     30193500
.NOTB    ANOP                                                           30194000
.*                                                                      30194500
.*             SET &TYPA BIT 2 IF GETMAIN, BIT 3 IF FREEMAIN            30195000
.*                                                                      30195500
&TYPA    SETA  &TYPA+32            ASSUME GETMAIN                       30196000
         AIF   (NOT &T).NOTFREE    GO IF ASSUMPTION CORRECT.            30196500
&TYPA    SETA  &TYPA+16-32         SET FREEMAIN                         30197000
.NOTFREE ANOP                                                           30197500
.*                                                                      30198000
.*             SET &TYPA BIT 4 IF TCB=YES                               30198500
.*                                                                      30199000
         AIF   ('&TCB' NE 'YES').NOTCB   SKIP IF TCB NOT YES.           30199500
&TYPA    SETA  &TYPA+8             FLAG TCB=YES.                        30200000
.NOTCB   ANOP                      CONTINUE.                            30200500
.*                                                                      30201000
.*             TEST CONDITIONALITY AND GET/FREE                         30201500
.*                                                                      30202000
&B       SETB  ('&TYPE'(2,1) EQ 'U')                                    30202500
&TYP     SETA  &T+2*&B                                                  30203000
.*                                                                      30203500
.*             SET INDEX TO DESCRIBE ARGUMENTS                          30204000
.*                                                                      30204500
         AIF   ('&LV' EQ '(R0)').T3  IF LR IS REQUIRED FOR LV=,         30205000
&I       SETA  &I+1                ADD 1 TO INDEX                       30205500
         AIF   ('&LV'(1,1) EQ '(').T3  IF ADCON REQUIRED FOR LV=,       30206000
&I       SETA  &I+1                ADD 1 TO INDEX.                      30206500
.T3      AIF   ('&A' EQ '(R1)').T6  IF SLR OR LR REQUIRED FOR A=,       30207000
&I       SETA  &I+3                ADD 3 TO INDEX.                      30207500
         AIF   (NOT &T OR '&A'(1,1) EQ '(').T6  IF L REQUIRED FOR A=,   30208000
&I       SETA  &I+3                ADD 3 TO INDEX.                      30208500
.T6      ANOP                                                           30209000
.*                                                                      30209500
.*             SET CONDITIONAL NO-OPERATION                             30210000
.*                                                                      30210500
         AIF   (&I-&I/2*2 EQ 0).CNOP2  IF INDEX IS ODD,                 30211000
         CNOP  0,4                                                      30211500
         AGO   .LABEL              START ON WD BDRY, ELSE HALFWORD.     30212000
.CNOP2   CNOP  2,4                                                      30212500
.LABEL   ANOP                                                           30213000
.*                                                                      30213500
.*             SET UP LABEL IF PROVIDED                                 30214000
.*                                                                      30214500
         AIF   ('&L' EQ '').NOLABEL  GO IF BLANK LABEL                  30215000
&L       DS    0H                                                       30215500
.NOLABEL ANOP                                                           30216000
.*                                                                      30216500
.*             SET UP LENGTH VALUE ARGUMENT LV=                         30217000
.*                                                                      30217500
&C       SETC  '012012012'(&I+1,1)  EXTRACT LV= FROM INDEX.             30218000
         AIF   (&C EQ 2).A         IF LENGTH TO BE PASSED IN R0,        30218500
&TYPA    SETA  &TYPA+128           SHOW SO BY FLAG.                     30219000
         AIF   (&C EQ 0).A         IF LV=(R0),LENGTH ALREADY LKAY.      30219500
&C       SETC  '&LV'(2,K'&LV-2)    ELSE REMOVE PARENTHESES.             30220000
         LR    R0,&C                                                    30220500
.A       ANOP                                                           30221000
.*                                                                      30221500
.*             SET UP ADDRESS VALUE &A=                                 30222000
.*                                                                      30222500
&C       SETC  '000111222'(&I+1,1)  EXTRACT A= FROM INDEX.              30223000
         AIF   (&T).A0             IF GETMAIN, ZERO ADDRESS REGISTER.   30223500
         SLR   R1,R1                                                    30224000
         AGO   .A3                                                      30224500
.A0      AIF   (&C EQ 0).A3        IF R1 ALREADY SET UP, BRANCH.        30225000
         AIF   (&C NE 1).A2        IF LR IS REQUIRED,                   30225500
&C       SETC  '&A'(2,K'&A-2)      REMOVE PARENTHESES AND LR.           30226000
         LR    R1,&C                                                    30226500
         AGO   .A3                                                      30227000
.A2      L     R1,&A                                                    30227500
.A3      ANOP                                                           30228000
.*                                                                      30228500
.*             CALL HGFMAIN                                             30229000
.*                                                                      30229500
         L     R15,=A(HGFMAIN)                                          30230000
         BALR  R4,R15                                                   30230500
.*                                                                      30231000
.*                                                                      30231500
.*             DESCRIPTION OF FOLLOWING FULLWORD ---                    30232000
.*                                                                      30232500
.*       BYTE 0 ---                                                     30233000
.*             BIT 0 IS ON IF LV= OPERAND IS IN R0, OFF IF LV=          30233500
.*                 OPERAND IS IN THE FULLWORD FOLLOWING THIS.           30234000
.*             BIT 1 IS ON IF $GETBUF/$FREEBUF, OFF IF $GETMAIN/        30234500
.*                 $FREMAIN.                                            30235000
.*             BIT 2 IS ON IF $GETMAIN/$GETBUF.                         30235500
.*             BIT 3 IS ON IF $FREMAIN/$FREEBUF.                        30236000
.*             BIT 4 IS ON IF TCB SUPPLIED FOR $FREMAIN.                30236500
.*             BITS 5-7 ARE RESERVED FOR FUTURE USE.                    30237000
.*                                                                      30237500
.*       BYTE 1 ---                                                     30238000
.*             BITS 0-3 CONTAIN STORAGE PROTECTION KEY, OR X'F'.        30238500
.*                 THE LATTER IS AN INDICATION TO HGFMAIN TO USE        30239000
.*                 THE PROTECT KEY FROM TCBPKF.                         30239500
.*             BITS 4-7 MUST BE ZERO.                                   30240000
.*                                                                      30240500
.*       BYTE 2 ---                                                     30241000
.*             BITS 0-7 CONTAIN SUBPOOL NUMBER.                         30241500
.*                                                                      30242000
.*       BYTE 3 ---                                                     30242500
.*             BITS 0-7 CONTAIN A CODE USED BY VIRTUAL STORAGE          30243000
.*                 SUPERVISOR --                                        30243500
.*                 0 - CONDITIONAL GETMAIN                              30244000
.*                 1 - CONDITIONAL FREEMAIN                             30244500
.*                 2 - UNCONDITIONAL GETMAIN                            30245000
.*                 3 - UNCONDITIONAL FREEMAIN                           30245500
.*                                                                      30246000
.*                                                                      30246500
         DC    AL1(&TYPA,&KEY*16,&SP,&TYP)                              30247000
.*                                                                      30247500
.*             ADD LENGTH ADCON IF NOT IN R0                            30248000
.*                                                                      30248500
         AIF   (&TYPA GE 128).NOLAD  GO IF LENGTH ALREADY IN REG.       30249000
         DC    A(&LV)                                                   30249500
.NOLAD   ANOP                                                           30250000
         MEND                                                           30250500
HASPSSSM START 0                   HASP SUBSYSTEM SUPPORT MODULE        30263500
         COPY  $HASPGEN                                                 30264000
         TITLE 'OS/HASP CONTROL BLOCKS'                                 30264500
         SPACE 5                                                        30265000
HASPSSSM $ENTRY BASE=,CSECT=YES, PROVIDE PROCESSOR ID AND           R41C30265500
               POINTER=(SENTL,SENTRIES) POINTER TO ADCON VECTOR     R41 30265600
         SPACE 5                                                        30266000
*                                                                       30266500
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY   30267000
*                                                                       30267500
         SPACE 3                                                        30268000
        $SYSPARM (OFF,GEN,NODATA,NO,NO)                                 30268500
         EJECT                                                       R4 30269000
*                                                                       30269500
*                             GENERATE OS/HASP CONTROL BLOCKS           30270000
*                                                                       30270500
         SPACE 3                                                        30271000
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS       30271500
         TITLE 'HASP EXIT ROUTINE WORK AREA DSECTS'                     30272000
*********************************************************************** 30272500
*                                                                     * 30273000
*        USER SAVE AREA DSECT                                         * 30273500
*                                                                     * 30274000
*********************************************************************** 30274500
USAVE    DSECT                                                          30275000
         DS    F                                                        30275500
UCALLER  DS    F                   CALLER'S CALLER SAVE                 30276000
UOURSAV  DS    F                   OUR SAVE                             30276500
USAVER   DS    15F                 REGISTERS 14,15,0-12                 30277000
         SPACE 3                                                        30277500
         ORG   UOURSAV             REDEFINE FOR SVC 35 WORK AREA        30278000
USAVFL   DS    C                   FLAGS BYTE                           30278500
USAVFLM  EQU   X'80'               MULTIPLE LINE WTO (MLWTO)            30279000
USAVFLMI EQU   X'40'               CURRENT WQE IS A MINOR WQE           30279500
*********************************************************************** 30293000
*                                                                     * 30293500
*        SVC 35 WORK AREA                                             * 30294000
*                                                                     * 30294500
*********************************************************************** 30295000
S35DSECT DSECT                                                          30295500
S35DSTRT DS    0D                                              @OZ33722 30295600
S35DID   DC    CL4'S35D'           DSECT IDENTIFIER            @OZ33722 30295700
         DS    F                   FILLER TO MATCH S34DSECT    @OZ33722 30295800
S35DNEXT DS    F                   POINTER TO NEXT BUFFER      @OZ33722 30295900
S35DWK   DS    0D                  WORK AREA                            30296000
S35DSAV  DS    F                   STANDARD SAVE AREA                   30296500
S35DSAVH DS    F                   POINTER TO CALLERS SAVE              30297000
         DS    F                                                        30297500
         DS    15F                 REGISTERS                            30298000
S35DMSGL DS    H                   LENGTH OF TEXT IN LOG BUFFER         30298500
S35DMSG  DS    0CL146              MESSAGE AREA                         30299000
S35DTIME DS    CL8                 HH.MM.SS                             30299500
         DS    C                   -                                    30300000
S35DJOB  DS    CL8                 JOB NNNN                             30300500
         DS    C                                                        30301000
S35DACTF DS    C                   *                                    30301500
S35HIDL  EQU   9                   SIZE OF HASP ID PORTION OF TEXT   R4 30302000
S35DHID  DS    CL(S35HIDL)         HASPXXX-                             30302500
S35DJOBN DS    CL8                 JOBNAMES                             30303000
         DS    C                   -                                    30303500
S35DTXTL EQU   (S35DMSG+L'S35DMSG-*)                                    30304000
S35DTXT  DS    CL(S35DTXTL)        HASPSSSM TEXT                        30304500
S35DMAX  EQU   132                 MAXIMUM LOG LRECL SIZE               30305000
         ORG   S35DMSG+S35DMAX                                          30305500
S35DENQ  ENQ   (*-*,*-*,E,3,STEP),RET=USE,MF=L                 @OZ33722 30306000
S35DRN   DS    CL3                 R NAME TO SERIALIZE LOGGING          30306500
         DS    0D                                                       30307000
S35DL    EQU   *-S35DSECT          LENGTH OF WORK AREA                  30307500
S35WQEID EQU   WQETXT+1,1          LOCATION OF HASP $                   30308000
S35WQEHT EQU   WQETXT+S35HIDL+1    LOCATION OF HASPSSSM WTO TEXT        30309000
*********************************************************************** 30310000
*                                                                     * 30310500
*        COMMAND INPUT BUFFER (CBF) DSECT                             * 30311000
*                                                                     * 30311500
*********************************************************************** 30312000
CBF      DSECT                                                          30312500
CBFCNT   DS    H                   LENGTH OF ENTIRE BUFFER (136)        30313000
         DS    H                                                        30313500
CBFTEXT  DS    CL140               TEXT AREA                            30314000
CBFL     EQU   *-CBF                                                    30314500
HASPSSSM CSECT                                                          30315000
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE - SUPPORT ROUTINES '      30315500
         USING SSVT,R11            ESTABLISH BASE                       30316000
         USING USAVE,R13                                                30316500
*********************************************************************** 30317000
*                                                                     * 30317500
*        SUPPORT ROUTINE ENTRY POINTS, MOVED TO SSVT BY HASPINIT      * 30318000
*                                                                     * 30318500
*********************************************************************** 30319000
SENTRIES DS    0F                                                       30319500
         DC    A(HOSSOUT)          PROCESS SYSOUT                       30320000
         DC    A(HOSCANC)          TSO CANCEL                           30320500
         DC    A(HOSSTAT)          TSO STATUS                           30321000
         DC    A(HOSEOT)           END OF TASK                          30321500
         DC    A(HOSJBSL)          JOB SELECTION                        30322000
         DC    A(HOSALLOC)         ALLOCATION                           30322500
         DC    A(HOSUNAL)          UNALLOCATION                         30323000
         DC    A(HOSEOM)           END OF MEMORY                        30323500
         DC    A(HOSWTO)           WTO                                  30324000
         DC    A(HOSCMND)          COMMAND PROCESSING                   30324500
         DC    A(HOSUSER)          USERID VALIDITY CHECK                30325000
         DC    A(HOSTERM)          JOB DELETION                         30325500
         DC    A(HOSRENQ)          RE-ENQUEUE JOB                       30326000
         DC    A(HOSOPEN)          OPEN                                 30326500
         DC    A(HOSCLOS)          CLOSE                                30327000
         DC    A(HOSCKPT)          CHECKPOINT                           30327500
         DC    A(HOSREST)          RESTART                              30328000
         DC    A(HOSREQID)         REQUEST JOB ID                       30328500
         DC    A(HOSRETID)         RETURN JOB ID                        30329000
*********************************************************************** 30329500
*                                                                     * 30330000
*        SUBROUTINE ENTRY POINTS MOVED TO SSVT                        * 30330500
*                                                                     * 30331000
*********************************************************************** 30331500
         DC    A($$POST)           POST HASP TASK                       30332000
         DC    A(USERDEST)         VERIFY DESTINATION                   30332500
         DC    A(SSVOPNC)          CONVERTER FAKE OPEN                  30333000
         DC    A(SSVCLSC)          CONVERTER FAKE CLOSE                 30333500
         DC    A(TSGCELL)          GET STORAGE CELL                     30334500
         DC    A(TSGCPOL)          GET CELL POOL                        30335000
         DC    A(TSFCELL)          FREE CELL BY STORAGE ADDRESS         30335500
         DC    A(TSFCELA)          FREE CELL BY SJB/TCB ADDRESS         30336000
         DC    A(TSGCMNS)          GET MAIN FOR CELLS                   30336500
         DC    A($$VFL)            SIMULATE VFL INSTRUCTION          R4 30336600
         DC    A(SSMPATCH)         SSSM PATCH SPACE POINTER             30337000
SENTL    EQU   *-SENTRIES          SHOULD BE EQUAL TO $SVENTL           30337500
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE - SVC 34 EXIT'            30338000
*********************************************************************** 30338500
*                                                                     * 30339000
*        SVC 34 EXIT - SUBSYSTEM FUNCTION SSOBCMND                    * 30339500
*                                                                     * 30340000
* FUNCTION                                                            * 30340500
*                                                                     * 30341000
*    RECEIVE CONTROL FROM THE OPERATING SYSTEM SVC 34 PROCESSING      * 30341500
*    ROUTINES FOR THE PURPOSE OF EDITING THE COMMAND BUFFER TEXT,     * 30342000
*    COPYING HASP COMMANDS TO CMBS FOR HASP ACTION, AND COPYING       * 30342500
*    EDITED REPLY COMMANDS AND QUEUING THEM FOR OUTPUT BY THE SVC     * 30343000
*    35 EXIT ROUTINE. THE DESCRIPTION OF OPERATIONS FOLLOW.           * 30343500
*                                                                     * 30344000
*    (1) BACKSPACE EDIT THE COMMAND TEXT LOCATING THE BEGINNING       * 30344500
*        AND CALCULATING THE LENGTH OF SOLID TEXT.                    * 30345000
*                                                                     * 30345500
*    (2) IF THE COMMAND IS A REPLY COMMAND, PERFORM THE FOLLOWING     * 30346000
*                                                                     * 30346500
*              GET A STORAGE CELL, FILL IT OUT WITH THE OS FORMAT     * 30347000
*              (R NN,TEXT), PROVIDE THE INPUT AREA WITH A COPY        * 30347500
*              (TRUNCATED IF NECESSARY), AND TIME STAMP THE CELL.     * 30348000
*              IF AN ERROR IS ENCOUNTERED, FREE THE CELL AND GIVE     * 30348500
*              THE COMMAND TO OS.                                     * 30349000
*                                                                     * 30349500
*              GET THE CMS LOCK, LOOK FOR AN ORE WITH MATCHING        * 30350000
*              NUMBERS, LOCATE THE CORRESPONDING SJB, QUEUE           * 30350500
*              THE CELL TO THE SJB WITH CELL OWNER SET TO THE SJB,    * 30351000
*              FREE THE LOCK, AND RETURN GIVING THE COMMAND TO        * 30351500
*              OS. IF NO ORE OR SJB FREE THE CELL INSTEAD OF QUEUING  * 30352000
*              IT TO THE SJB.                                         * 30352500
*                                                                     * 30353000
*    (3) IF THE COMMAND STARTS WITH THE HASP COMMAND IDENTIFIER       * 30353500
*        AND THE HIGH ORDER 3 BYTES OF SSCMSCID (SVC 34 R0 VALUE)     * 30354000
*        ARE ZERO, GET A CMB, REDUCE THE $SVCOMCT COUNT, PLACE THE    * 30354500
*        COMMAND AND RESTRICTIONS INTO THE CMB, QUEUE THE CMB TO      * 30355000
*        THE $SVCOMMQ QUEUE, AND POST THE HASP TASK. IF THE COMMAND   * 30355500
*        IS TOO LONG TO FIT INTO A CMB, THERE ARE NO CMBS IN THE      * 30356000
*        $SVCMBFQ OR $SVCMBRQ QUEUES, OR THE $SVCOMCT GOES TO ZERO,   * 30356500
*        PROCESSING IS NEGATED AND CONTROL IS RETURNED TO OS WITH     * 30357000
*        AN ERROR INDICATION. IF HASP IS NOT UP ON ENTRY PROCESSING   * 30357500
*        IS ABORTED AND CONTROL IS RETURNED TO OS WITH R15 INDICATING * 30358000
*        HASP NOT UP.                                                 * 30358500
*                                                                     * 30359000
*    (4) IF THE COMMAND IS NOT NUMERIC OR FOR HASP, IT IS GIVEN       * 30359500
*        TO OS.                                                       * 30360000
*                                                                     * 30360500
* INPUT REGISTERS                                                     * 30361000
*                                                                     * 30361500
*        R0    = ADDRESS OF SSCVT                                     * 30362000
*        R1    = ADDRESS OF SSOB                                      * 30362500
*        R13   = SAVE AREA                                            * 30363000
*        R14   = RETURN                                               * 30363500
*        R15   = ENTRY BASE                                           * 30364000
*                                                                     * 30364500
*********************************************************************** 30365000
         EJECT                                                          30365500
*********************************************************************** 30366000
*                                                                     * 30366500
* OUTPUT REGISTERS                                                    * 30367000
*                                                                     * 30367500
*        R0-R14= UNCHANGED                                            * 30368000
*        R15   = RETURN CODE                                          * 30368500
*                                                                     * 30369000
* NOTES                                                               * 30369500
*                                                                     * 30370000
*    THE HASP SVC 34 EXIT CONVERTS REPLIES TO STANDARD FORMAT. THE    * 30370500
*    FORMATS ARE DESCRIBBED BELOW USING THE FOLLOWING CONVENTIONS.    * 30371000
*                                                                     * 30371500
*        /XXX/ = XXX IS OPTIONAL                                      * 30372000
*        (XXX) = XXX IS REQUIRED                                      * 30372500
*        X...  = X IS REPEATED A NUMBER OF TIMES                      * 30373000
*        TEXT  = CHARACTER STRING INCLUDING BLANKS GIVEN TO USER      * 30373500
*        COMMENT CHARACTER STRING INCLUDING BLANKS IGNORED            * 30374000
*                                                                     * 30374500
*        INPUT = (REPLY)/ .../(N) /,/TEXT//                           * 30375000
*                (R )         (NN)/,'TEXT'/ COMMENT//                 * 30375500
*                                 / COMMENT/                          * 30376000
*                                                                     * 30376500
*        OUTPUT= (R NN)/,/TEXT//                                      * 30377000
*                      /,'TEXT'/ COMMENT//                            * 30377500
*                      / COMMENT/                                     * 30378000
*                                                                     * 30378500
*        INPUT = (N) /,// ...//TEXT/                                  * 30379000
*                (NN)/ /      /'TEXT'/ COMMENT//                      * 30379500
*                                                                     * 30380000
*        OUTPUT= (R NN,)/TEXT/                                        * 30380500
*                       /'TEXT'/ COMMENT//                            * 30381000
*                                                                     * 30381500
*********************************************************************** 30382000
         EJECT                                                          30382500
*********************************************************************** 30383000
*                                                                     * 30383500
*        ENTRY TO SVC 34 EXIT - PICK UP PARAMETERS                    * 30384000
*                                                                     * 30384500
*********************************************************************** 30385000
HOSCMND  $ENTRY BASE=R15,ENTRY=NO  PROVIDE ENTRY FOR ROUTINE            30385500
S34      EQU   HOSCMND                                                  30386000
         STM   R14,R12,USAVER      SAVE CALLER'S REGISTERS              30386500
         LR    R12,R15             ESTABLISH BASE                       30387000
         USING S34,R12                                                  30387500
         DROP  R15                                                      30388000
         LR    R8,R0               POINT TO SSCVT                       30388500
         USING SSCT,R8                                                  30389000
         L     R11,SSCTSSVT        POINT TO SSVT                        30389500
         LR    R10,R1              POINT TO SSOB                        30390000
         USING SSOB,R10                                                 30390500
         L     R9,SSOBINDV         POINT TO FUNCTION AREA               30391000
         L     R2,SSCMBUFF-SSCMBGN(0,R9)   POINT TO COMMAND BUFFER      30391500
         EJECT                                                          30392000
*********************************************************************** 30392500
*                                                                     * 30393000
*        LOCATE AND BACKSPACE EDIT THE COMMAND                        * 30393500
*                                                                     * 30394000
*********************************************************************** 30394500
         USING CBF,R2                                                   30395000
         LH    R5,CBFCNT           PICK UP LENGTH OF CIB                30395500
         CH    R5,=Y(CBFL)         IS IT STANDARD LENGTH                30396000
         BH    S34OEXIT            EXIT IF HIGH                         30396500
         CLI   CBFTEXT,C' '        TEST FOR VERB AT START OF TEXT       30397000
         BE    S34OEXIT            EXIT IF NOT                          30397500
         AR    R5,R2               END + 1                              30398000
         BCTR  R5,0                END                                  30398500
S34EBT   CLI   0(R5),C' '          IS IT BLANK                          30399000
         BNE   S34ENB              IF END NOT BLANK EXIT                30399500
         BCT   R5,S34EBT           LOOP                                 30400000
S34ENB   LA    R4,CBFTEXT-1        POINT TO TEXT - 1                    30400500
         LR    R6,R4               LOAD BSPACE SCANNER                  30401000
S34BSL   LR    R7,R5               SET LENGTH COUNTER                   30401500
         SR    R7,R6               GET LENGTH OF REMAINING              30402000
         BNP   S34BEND             GIVE BACK TO OS IF NO TEXT           30402500
         CLC   $SVBAKSP,1(R6)      CHECK FOR BACKSPACE               R4 30403000
         BE    S34BS               BR IF YES                            30403500
         LA    R6,1(0,R6)          POINT TO NEXT CHARACTER              30404000
         B     S34BSL              LOOP                                 30404500
S34BS    BCT   R7,S34BSB           IF COUNT GT 1 BR                     30405000
         CR    R6,R4               IS THIS FIRST CHARACTER              30405500
         BNE   S34BCNF             BR IF NOT                            30406000
         B     S34BONE             BLANK ONE CHARACTER IF YES           30406500
S34BSB   BCTR  R7,0                REDUCE TO MACHINE COUNT              30407000
         CR    R6,R4               IS THIS FIRST CHARACTER              30407500
         BNE   S34BMC              IF NOT MOVE CHARACTERS               30408000
         EX    R7,S34BMVF          MOVE INTO FIRST CHARACTER            30408500
         B     S34BONE             BLANK ONE CHARACTER                  30409000
S34BMC   EX    R7,S34BMVC          MOVE INTO CURRENT CHARACTER          30409500
S34BCNF  MVI   0(R5),C' '          SET BLANK                            30410000
         BCTR  R5,0                ADJUST COMMAND SIZE                  30410500
         BCTR  R6,0                BACK UP CURRENT CHARACTER SCAN       30411000
S34BONE  MVI   0(R5),C' '          SET BLANK                            30411500
         BCTR  R5,0                ADJUST COMMAND SIZE                  30412000
         CLI   1(R4),C' '          IS FIRST CHARACTER BLANK             30412500
         BNE   S34BSL              LOOP IF NOT                          30413000
         MVC   1(1,R4),$SVBAKSP    FORCE ANOTHER BACKSPACE           R4 30413500
         B     S34BSL              LOOP                                 30414000
S34BEND  SR    R5,R4               GET NEW LENGTH OF COMMAND            30414500
         BNP   S34HEXIT            IF NULL CAUSE THROW AWAY             30415000
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE - SVC 34 EXIT - REPLIES'  30415500
*********************************************************************** 30416000
*                                                                     * 30416500
*        TEST FOR AND HANDLE ALL NUMERIC REPLY FORMATS                * 30417000
*                                                                     * 30417500
*********************************************************************** 30418000
         CLI   1(R4),C'0'          TEST FOR NUMERIC COMMAND             30418500
         BL    S34NN               BR IF NOT NUMERIC                    30419000
S34REPLY LR    R8,R2               SAVE CBF POINTER                     30419500
         LR    R6,R4               SAVE POINTER                         30420000
         LA    R0,2                SET CLAIM ID                         30420500
         LR    R1,R0               IN BOTH REGISTERS                    30421000
         LA    R4,S34DL            SET LENGTH                           30421500
         L     R15,$SVGCELL        POINT TO GET CELL ROUTINE            30422000
         BALR  R14,R15             ENTER IT                             30422500
         B     S34NCELL            NO CELL EXIT             +0          30423000
S34GCELL LR    R2,R8               RESTORE CBF POINTER      +4          30423500
         LR    R8,R1               POINT TO AREA                        30424000
         USING S34DSECT,R8                                              30424500
*********************************************************************** 30425000
*                                                                     * 30425500
*        FILL OUT SKELETON OF WORK AREA                               * 30426000
*                                                                     * 30426500
*********************************************************************** 30427000
         MVC   S34DTIME-1(S34TL),S34TIME INSERT EDIT PATTERNS           30427500
         LR    R7,R6               POINT TO COMMAND-1                   30428000
         LR    R6,R5               GET LENGTH OF TEXT                   30428500
         MVC   S34DIGIT+1(1),1(R7) MOVE IN DIGIT                        30429000
         LA    R7,1(0,R7)          UP ONE                               30429500
         BCT   R6,*+8              DOWN ONE                             30430000
         B     S34MINR             SKIP MOVE OUT IF NULL                30430500
         CLI   1(R7),C'0'          TEST FOR TWO DIGITS                  30431000
         BL    S34N1D              BR IF ONE                            30431500
         MVC   S34DIGIT(2),0(R7)   MOVE IN DIGITS                       30432000
         LA    R7,1(0,R7)          UP ONE                               30432500
         BCT   R6,S34N1D           REDUCE TEXT COUNT                    30433000
         B     S34MINR             SKIP MOVE OUT IF NULL TEXT           30433500
S34N1D   LTR   R2,R2               IS THIS OS FORMAT                    30434000
         BM    S34NMOR             MOVE ALL FOLLOWING THE NUMERIC       30434500
         CLI   1(R7),C','          IS FIRST CHARACTER A COMMA           30435000
         BE    S34NSCMA            PRETEND BLANK IF SO                  30435500
S34NNBS  CLI   1(R7),C' '          IS CHARACTER A BLANK                 30436000
         BNE   S34NREPY            MOVE SOLID TEXT                      30436500
S34NSCMA LA    R7,1(0,R7)          UP ONE                               30437000
         BCT   R6,S34NNBS          COUNT AND LOOP                       30437500
         B     S34MINR             SKIP MOVE IF NULL                    30438000
         EJECT                                                          30438500
*********************************************************************** 30439000
*                                                                     * 30439500
*        MOVE TEXT INTO WORK AREA IF NOT TOO LONG, THEN BACK          * 30440000
*                                                                     * 30440500
*********************************************************************** 30441000
S34NMOR  BCTR  R6,0                REDUCE COUNT                         30441500
         CH    R6,=Y(S34DTL)       TEST FOR MAXIMUM REPLY LENGTH        30442000
         BH    S34OEXIA            EXIT IF TOO LONG                     30442500
         EX    R6,S34NMVCA         MOVE OS FORMAT TEXT                  30443000
         BCTR  R6,0                REDUCE ONE MORE (COULD GO MINUS)     30443500
         B     S34MINR             SKIP NORMAL MOVE                     30444000
S34NREPY CH    R6,=Y(S34DTL)       TEST FOR MAXIMUM REPLY LENGTH        30444500
         BH    S34OEXIA            EXIT IF TOO LONG                     30445000
         BCTR  R6,0                GET MACHINE COUNT                    30445500
         EX    R6,S34NMVCO         MOVE REPLY OUT                       30446000
S34MINR  LH    R5,CBFCNT           PICK UP COUNT                        30446500
         SH    R5,=H'5'            GET TEXT MACHINE LENGTH              30447000
         EX    R5,S34NMVCI         MOVE TEXT BACK IN                    30447500
         OC    S34DTXT,S34DTXTC    UPPER CASE TEXT PART                 30448000
         LA    R6,S34DTXT-S34DTIME+1(0,R6) GET FULL LENGTH              30448500
         LA    R5,L'S34DTEXT       SET MAXIMUM LENGTH                   30449000
         CR    R6,R5               CHECK FOR NOT TOO LONG               30449500
         BNL   S34RWOK             IF TOO LONG ALLOW TRUNCATE           30450000
         LR    R5,R6               SET REAL LENGTH IN R5                30450500
S34RWOK  TIME  DEC                 GET TIME OF DAY                      30451000
         ST    R0,S34DWK           PUT TIME IN WORK                     30451500
         ED    S34DTIME-1(L'S34DTIME+1),S34DWK EDIT                     30452000
         EJECT                                                       R4 30452100
*********************************************************************** 30452500
*                                                                     * 30453000
*        FIND CONTROLLING SJB                                         * 30453500
*                                                                     * 30454000
*********************************************************************** 30454500
         L     R3,CVTPTR           POINT TO CVT                         30455000
         USING CVT,R3                                                   30455500
         L     R6,CVTCUCB          POINT TO UCM                         30456000
         USING UCM,R6                                                   30456500
         STM   R11,R14,S34DSAV     SAVE REGISTERS AROUND LOCK           30457000
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(ORE,*-*,*-*)    30457500
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=(ORE,*-*,*-*)      30458000
         LM    R11,R14,S34DSAV     RESTORE REGISTERS                    30458500
         LA    R6,UCMRPYQ-(ORELKP-OREF) POINT TO HEAD OF REPLY QUEUE    30459000
         USING OREF,R6                                                  30459500
S34ORES  ICM   R6,15,ORELKP        PICK UP NEXT ORE                     30460000
         BZ    S34LABRT            EXIT TO LOCKED ABORT                 30460500
         CLC   OREID,S34DIGIT      CHECK MATCHING DIGITS                30461000
         BNE   S34ORES             LOOP                                 30461500
         LH    R1,OREASID          PICK UP ASID                         30462000
         BAL   R14,SFNDSJB         FIND SJB VIA HAVT                    30462500
         B     S34LABRT            EXIT NOT FOUND           +0          30463000
         B     S34LABRT            EXIT IF $WTO TASK        +4          30463500
         LR    R7,R1               POINT TO SJB             +8          30464000
         USING SJBDSECT,R7                                              30464500
         L     R1,OREWQE           POINT TO WQE                         30465000
         TM    WQEROUT2-WQE(R1),WQEROUTI IS SECURITY BIT ON             30465500
         BZ    S34SJBF             SKIP SUPPRESSION IF NOT              30466000
         MVC   S34DTXT(10),=C'SUPPRESSED'                               30466500
         LA    R5,S34DTXT-S34DTIME+10 GET LENGTH                        30467000
S34SJBF  MVC   S34DJOB,SJBJOBID    COPY JOBID                           30467500
         LA    R1,S34DJOB+3        POINT TO JOB NUMBER                  30468000
         BAL   R14,SBLKJOB         BLANK HIGH ORDER DIGITS              30468500
S34SKBKL STH   R5,S34DMSGL         SET LENGTH OF TEXT                   30469000
         LA    R5,S34DL            SET                                  30469500
         STH   R5,S34DLN            LENGTH OF ELEMENT                   30470000
         L     R1,S34DCCEW         POINT TO CCE                         30470500
         ST    R7,CCESJB-CCEDSECT(,R1) SET OWNER OF CELL                30471000
         EJECT                                                       R4 30471100
*********************************************************************** 30471500
*                                                                     * 30472000
*        QUEUE ELEMENT TO SJB                                         * 30472500
*                                                                     * 30473000
*********************************************************************** 30473500
         L     R5,SJBLOGQ          PICK UP LOG QUEUE HEAD               30474000
S34RPQS  ST    R5,S34DNEXT         COPY TO OUR ELEMENT                  30474500
         CS    R5,R8,SJBLOGQ       QUEUE IT                             30475000
         BNE   S34RPQS             LOOP IF NOT QUEUED                   30475500
         LR    R5,R13              SAVE CALLERS SAVE                    30476000
         LR    R6,R12              SAVE OUR BASE                        30476500
         SETLOCK RELEASE,TYPE=CMS,RELATED=(ORE+SJB,*-*,*-*)             30477000
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(ORE+SJB,*-*,*-*)           30477500
         LR    R13,R5              RESTORE SAVE                         30478000
         LR    R12,R6              RESTORE OUR BASE                     30478500
         B     S34OEXIT            EXIT                                 30479000
*********************************************************************** 30479500
*                                                                     * 30480000
*        LOCKED ABORT OF REPLY ID SEARCHING EXIT                      * 30480500
*                                                                     * 30481000
*********************************************************************** 30481500
S34LABRT DS    0H                                                       30482000
*        STM   R11,R14,S34DSAV     SAVE REGISTERS AROUND LOCK           30482500
         SETLOCK RELEASE,TYPE=CMS,RELATED=(ORE,*-*,*-*)                 30483000
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(ORE,*-*,*-*)               30483500
         LM    R11,R14,S34DSAV     RESTORE REGISTERS                    30484000
         EJECT                                                          30484500
*********************************************************************** 30485000
*                                                                     * 30485500
*        EXIT WITH OS MESSAGE                                         * 30486000
*                                                                     * 30486500
*********************************************************************** 30487000
S34OEXIA LR    R1,R8               POINT TO AREA                        30487500
         L     R15,$SVFCELL        POINT TO FREE CELL ROUTINE           30488000
         BALR  R14,R15             ENTER IT                             30488500
S34OEXIT LA    R15,SSCMSCMD        SET RETURN CODE                      30489000
S34EXIT  ST    R15,SSOBRETN        SET RETURN CODE FOR CALLER           30489500
         LM    R14,R12,USAVER      PICK UP CALLER REGISTERS             30490000
         LA    R15,SSRTOK          SET NORMAL RETURN                    30490500
         BR    R14                 EXIT                                 30491000
*********************************************************************** 30491500
*                                                                     * 30492000
*        NO CELL - GET MORE STORAGE                                   * 30492500
*                                                                     * 30493000
*********************************************************************** 30493500
S34NCELL L     R15,$SVGCMNS        POINT TO CELL GET MAIN STORAGE       30494000
         MODESET EXTKEY=HASP       GET KEY 1                            30494500
         BALR  R14,R15             ENTER IT                             30495000
         MODESET EXTKEY=ZERO       GET KEY 0                            30495500
         LTR   R1,R1               TEST FOR GOTTEN                      30496000
         BNE   S34GCELL            IF SO CONTINUE                       30496500
         B     S34OEXIT            EXIT                                 30497000
         SPACE 1                                                     R4 30497100
S34NMVCO MVC   S34DTXT(*-*),1(R7)     *** EXECUTE ONLY ***           R4 30497200
S34NMVCA MVC   S34DTXT-1(*-*),1(R7)   *** EXECUTE ONLY ***           R4 30497300
S34NMVCI MVC   CBFTEXT(*-*),S34DTEXT  *** EXECUTE ONLY ***           R4 30497400
         EJECT                                                          30499000
*********************************************************************** 30499500
*                                                                     * 30500000
*        NOT NUMERIC FORM OF REPLY TRY 'R ' OR 'REPLY '               * 30500500
*                                                                     * 30501000
*********************************************************************** 30501500
S34NN    CLI   1(R4),C'R'          COULD THIS BE A REPLY                30502000
         BNE   S34NRPLY            EXIT IF NOT                          30502500
         LA    R4,1(0,R4)          POINT TO THE R                       30503000
         ICM   R2,8,*              SET HIGH ORDER BIT ON                30503500
         CLC   1(4,R4),=C'EPLY'    TEST FOR 'REPLY'                     30504000
         BNE   S34NRSK             SKIP REPLY COUNTING                  30504500
         LA    R0,4                SET COUNT                            30505000
         AR    R4,R0               UP 4 TO POINT TO THE Y               30505500
         SR    R5,R0               DOWN 4                               30506000
S34NRSK  BCTR  R5,0                REDUCE COUNT                         30506500
         LTR   R5,R5               INSURE WE HAVE SOME TEXT             30507000
         BNP   S34OEXIT            GIVE COMMAND TO OS IF NO MORE        30507500
         CLI   1(R4),C' '          IS NEXT CHARACTER BLANK              30508000
         BNE   S34OEXIT            GIVE COMMAND TO OS IF NOT            30508500
S34NRSBK LA    R4,1(0,R4)          UP 1                                 30509000
         BCT   R5,S34NRTB          TEST FOR MORE BLANKS                 30509500
         B     S34OEXIT            GIVE COMMAND TO OS IS NO MORE        30510000
S34NRTB  CLI   1(R4),C' '          ARE THERE ANY MORE OPTIONAL BLANKS   30510500
         BE    S34NRSBK            CONTINUE SCAN IF YES                 30511000
         CLI   1(R4),C'0'          IS IT NUMERIC                        30511500
         BNL   S34REPLY            HANDLE NUMERIC PART IF YES           30512000
         B     S34OEXIT            GIVE TO OS                           30512500
S34NRPLY DS    0H                                                       30513000
         DROP  R8                                                       30513500
         DROP  R7                                                       30514000
         DROP  R6                                                       30514500
         DROP  R3                                                       30515000
         DROP  R2                                                       30515500
 TITLE 'HASP SUBSYSTEM SUPPORT MODULE - SVC 34 EXIT - HASP COMMANDS'    30516000
*********************************************************************** 30516500
*                                                                     * 30517000
*        TEST FOR HASP COMMAND AND HANDLE ALL HASP COMMANDS           * 30517500
*                                                                     * 30518000
*********************************************************************** 30518500
         CLC   1(1,R4),$SVCOMCH    IS THIS A HASP COMMAND               30519000
         BNE   S34NH               BR IF NOT HASP                       30519500
         CH    R5,=Y(L'CMBMSG)     CHECK FOR COMMAND TOO LONG           30520000
         BH    S34HER              EXIT IF TOO LONG                     30520500
         CLC   SSCMSCID-SSCMBGN(3,R9),=XL8'0' CHECK FOR ZEROS           30521000
         BNE   S34NH               IF NOT CAN'T BE A UCMID              30521500
         L     R1,$SVCMBAC         PICK UP ACTIVITY COUNT               30522000
         LA    R0,1(0,R1)          UP THE ACTIVITY                      30522500
         CS    R1,R0,$SVCMBAC      STORE ACTIVITY                       30523000
         BNZ   *-8                 LOOP IF NOT SET                      30523500
         ICM   R1,15,$SVHASP       PICK UP HASP STATUS                  30524000
         BNZ   S34HNUP             EXIT IF HASP NOT UP                  30524500
         L     R6,$SVCOMCT         PICK UP CMB COUNT                    30525000
S34HCTR  LR    R1,R6               PUT INTO WORK                        30525500
         BCT   R1,S34HMOR          COUNT THE COMMAND                    30526000
         B     S34HERA             SET RETURN CODE AND EXIT             30526500
*********************************************************************** 30527000
*                                                                     * 30527500
*        EXIT WITH UNABLE TO ACCEPT COMMAND                           * 30528000
*                                                                     * 30528500
*********************************************************************** 30529000
S34HERR  L     R6,$SVCOMCT         PICK UP COUNT                        30529500
S34HERRL LA    R1,1(0,R6)          UP THE COUNT                         30530000
         CS    R6,R1,$SVCOMCT      STORE NEW VALUE                      30530500
         BNZ   S34HERRL            LOOP UNTIL TAKEN                     30531000
S34HERA  $$POST TYPE=CMB           POST HASP CMB                        30531500
S34HNUP  L     R1,$SVCMBAC         PICK UP ACTIVITY COUNT               30532000
         LR    R0,R1               COPY                                 30532500
         BCTR  R0,0                REDUCE                               30533000
         CS    R1,R0,$SVCMBAC      STORE                                30533500
         BNZ   *-8                 LOOP IF NOT SET                      30534000
S34HER   LA    R15,SSCMIMSG        SET RETURN CODE                      30534500
         B     S34EXIT             RETURN                               30535000
         EJECT                                                       R4 30535100
*********************************************************************** 30535500
*                                                                     * 30536000
*        GET A CMB                                                    * 30536500
*                                                                     * 30537000
*********************************************************************** 30537500
S34HMOR  CS    R6,R1,$SVCOMCT      SET NEW VALUE                        30538000
         BNE   S34HCTR             IF NO TAKE DO OVER                   30538500
         LM    R2,R3,$SVCMBFQ      PICK UP CMB Q HEAD                   30539000
         USING CMBDSECT,R2                                              30539500
S34HQE   LTR   R2,R2               TEST FOR QUEUE EMPTY                 30540000
         BZ    S34HCBNF            TRY RESERVE BUFFER                   30540500
         L     R0,CMBCMB           POINT TO NEXT CMB                 R4 30541000
         LR    R1,R3               COPY SECURITY WORD                   30541500
         CDS   R2,R0,$SVCMBFQ      DECHAIN                              30542000
         BNE   S34HQE              TRY AGAIN IF MISSED                  30542500
         B     S34HCMBF            GO TO FOUND ROUTINE                  30543000
S34HCBNF ICM   R2,15,$SVCMBRQ      PICK UP CMB Q HEAD                   30543500
         BZ    S34HERR             EXIT IF EMPTY                        30544000
         L     R0,CMBCMB           POINT TO NEXT CMB                 R4 30544500
         CS    R2,R0,$SVCMBRQ      REMOVE CMB FROM RESERVE              30545000
         BNE   S34HCBNF            LOOP (THIS SHOULD NOT HAPPEN)        30545500
S34HCMBF DS    0H                                                       30546000
         MVC   CMBFLAG(14),S34HCMBH SET BASIC HEADER FOR CMB         R4 30546400
         MVC   CMBFM,$SVTO         SET THIS SYSTEM AS SOURCE         R4 30546500
         MVC   CMBUCM,SSCMSCID+3-SSCMBGN(R9) MOVE UCMID INTO CMB     R4 30546600
*********************************************************************** 30547000
*                                                                     * 30547500
*        FIND MATCHING UCMID FOR AUTHORITY EXTRACTION                 * 30548000
*                                                                     * 30548500
*********************************************************************** 30549000
         L     R6,CVTPTR           POINT TO CVT                         30549500
         USING CVT,R6                                                   30550000
         L     R6,CVTCUCB          POINT TO UCM                         30550500
         USING UCM,R6                                                   30551000
         LM    R7,R9,UCMVEA        PICK UP SEARCH PARMS                 30551500
         DROP  R6                                                       30552000
         USING UCMLIST,R7                                               30552500
S34HUTST CLC   CMBUCM,UCMID        LOOK FOR MATCHING UCMID           R4 30553000
         BE    S34HUFND            EXIT IF FOUND                        30553500
         BXLE  R7,R8,S34HUTST      LOOP                                 30554000
         MVC   CMBDESC,S34HCMBH+(CMBDESC-CMBFLAG) SET DESCRIPTOR CODER4 30555000
         B     S34NUCM             SKIP UCM AUTH SETTINGS               30555500
*********************************************************************** 30556000
*                                                                     * 30556500
*        SET UCM AUTHORITY - HASP RESTRICTIONS                        * 30557000
*                                                                     * 30557500
*********************************************************************** 30558000
S34HUFND SR    R8,R8               ZERO WORK                            30558500
         IC    R8,UCMAUTH          PICK UP AUTHORIZATION BITS           30559000
         SRL   R8,5                ALIGN TO HASP BITS                   30559500
         STC   R8,CMBFLAG          SET FLAGS                         R4 30560000
         XI    CMBFLAG,S34F7+CMBFLAGC+CMBFLAGU RESTRICTIONS AND FLAGSR4 30560500
S34NUCM  DS    0H                                                       30561000
         EJECT                                                       R4 30561100
*********************************************************************** 30561500
*                                                                     * 30562000
*        COPY COMMAND INTO CMB                                        * 30562500
*                                                                     * 30563000
*********************************************************************** 30563500
         MVI   CMBMSG,C' '         BLANK OUT MESSAGE AREA               30564000
         MVC   CMBMSG+1(L'CMBMSG-1),CMBMSG DO REST                      30564500
         STC   R5,CMBML            STORE MESSAGE LENGTH              R4 30565000
         BCTR  R5,0                GET MACHINE LENGTH                   30565500
         EX    R5,S34HMC           MOVE HASP COMMAND                    30566000
*********************************************************************** 30566500
*                                                                     * 30567000
*        QUEUE TO COMMAND PROCESSOR                                   * 30567500
*                                                                     * 30568000
*********************************************************************** 30568500
         L     R0,$SVCOMMQ         PICK UP QUEUE HEAD                   30569000
S34HQUE  ST    R0,CMBCMB           SET CHAIN                         R4 30569500
         CS    R0,R2,$SVCOMMQ      QUEUE TO COMMAND PROCESSOR           30570000
         BNE   S34HQUE             TRY AGAIN IF NOT QUEUED              30570500
*********************************************************************** 30571000
*                                                                     * 30571500
*        TELL HASP ABOUT THE COMMAND                                  * 30572000
*                                                                     * 30572500
*********************************************************************** 30573000
         $$POST ELMT=$SVCOMM       $$POST COMMAND PROCESSOR             30573500
         L     R1,$SVCMBAC         PICK UP ACTIVITY COUNT               30574000
         LR    R0,R1               COPY                                 30574500
         BCTR  R0,0                REDUCE                               30575000
         CS    R1,R0,$SVCMBAC      STORE                                30575500
         BNZ   *-8                 LOOP IF NOT SET                      30576000
S34HEXIT LA    R15,SSCMSUBC        SET RETURN CODE                      30576500
         B     S34EXIT             EXIT                                 30577000
         SPACE 1                                                     R4 30577100
S34HMC   MVC   CMBMSG(*-*),1(R4)   *** EXECUTE ONLY ***              R4 30577200
S34BMVC  MVC   0(*-*,R6),2(R6)     *** EXECUTE ONLY ***              R4 30577300
S34BMVF  MVC   1(*-*,R6),2(R6)     *** EXECUTE ONLY ***              R4 30577400
S34HCMBH $WTO  MF=LX,JOB=NO,TYPE=SVC34,ROUTE=B'1000000000000000',    R4C30578600
               CLASS=$ALWAYS,PRI=$HI                                 R4 30578700
         DROP  R2                                                       30579000
         DROP  R7                                                       30579500
         DROP  R10                                                      30580000
         DROP  R12                                                      30580500
S34NH    EQU   S34OEXIT            EXIT IF NOT HASP COMMAND             30581000
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE - SVC 35 EXIT'            30581500
*********************************************************************** 30582000
*                                                                     * 30582500
*        SVC 35 EXIT - SUBSYSTEM FUNCTION SSOBWTO                     * 30583000
*                                                                     * 30583500
* FUNCTION                                                            * 30584000
*                                                                     * 30584500
*    RECEIVE CONTROL FROM THE OPERATING SYSTEM SVC 35 PROCESSING      * 30585000
*    ROUTINES AFTER THE WTO MESSAGE HAS BEEN COPIED TO A WQE FOR      * 30585500
*    THE PURPOSE OF EDITING THE FIELDS OF THE WQE AND COPYING JOB     * 30586000
*    ASSOCIATED MESSAGES TO THE USERS JOB LOG DATA SET ALONG WITH     * 30586500
*    MESSAGES QUEUED TO THE JOB'S SJB BY THE SVC 34 EXIT ROUTINE.     * 30587000
*    THE DESCRIPTION OF OPERATIONS FOLLOW.                            * 30587500
*                                                                     * 30588000
*    (1) DETERMINE THE TYPE OF WQE AND LOCATE THE LENGTH BTYE AND     * 30588500
*        TIME STAMP FIELDS FOR THE CURRENT MESSAGE, IF THE MESSAGE    * 30589000
*        CONTAINS NO DATA (MLWTO LINE TYPE X'80', X'40', AND X'20'    * 30589500
*        FLAGS OFF) NO FURTHER PROCESSING IS PERFORMED. SINCE MINOR   * 30590000
*        WQES DO NOT HAVE PRE TEXT FIELDS THE ADDRESS IS PROJECTED    * 30590500
*        BASED UPON THE TEXT FIELD OF THE CURRENT MINOR TEXT LINE.    * 30591000
*                                                                     * 30591500
*    (2) THE USERS ASID IS PICKED UP FROM THE CURRENT ASCB AND        * 30592000
*        IS USED TO DETERMINE IF THE WQE REPRESENTS A MESSAGE FROM    * 30592500
*        THE HASP COMMUNICATIONS TASK (HASPCON CSECT), THE HASP       * 30593000
*        CONVERSION TASK (HASPXEQ CSECT), A USER TASK RUNNING IN      * 30593500
*        A MEMORY CONTROLLED BY HASP (THE HAVT HAS SJBS FOR THE       * 30594000
*        USER).                                                       * 30594500
*                                                                     * 30595000
*    (3) IF THE MESSAGE IS FROM THE HASP COMMUNICATIONS TASK, THE     * 30595500
*        WQE IS NOT MLWTO, AND THE SVC 35 REQUESTOR IS RUNNING        * 30596000
*        OFF THE LAST RB, THEN THE JOB ID FIELD IS MOVED INTO THE JOB * 30596500
*        IDENTIFICATION FIELD.                                        * 30597000
*                                                                     * 30598000
*    (4) IF THE MESSAGE IS FROM THE CONVERSION TASK OR HASP           * 30598500
*        CONTROLLED USER TASK, A WORK AREA IS GOTTEN AND THE          * 30599000
*        TIME STAMP AND JOB ID FIELDS ARE PRIMMED WITH BLANKS. IF     * 30599500
*        THE WQE IS NOT A MINOR, THE USER JOBID IS INSERTED INTO      * 30600000
*        THE WQE AND TIME STAMP AND JOB ID ARE COPIED INTO THE        * 30600500
*        WORK AREA, IF THE USER TEXT STARTS WITH '$', THE FLAG BYTE   * 30601000
*        IS NOT '@', AND THE WQE IS NOT MLWTO, THE WORK AREA TEXT     * 30601500
*        IS FILLED WITH THE FLAG BYTE ('*' OR ' '), MESSAGE ID        * 30602000
*        ('$ ' OR '$HASPXXX '), JOBNAME (FROM SJB), AND REST OF TEXT. * 30602500
*        THE   COMBINED MESSAGE IS COPIED BACK INTO THE WQE AND THE   * 30603000
*        LENGTH IS ADJUSTED, IF THE USER TEXT DOES NOT START WITH     * 30603500
*        '$' ETC., THE MESSAGE TEXT IS COPIED TO THE WORK AREA.       * 30604000
*        IF THE EDITED MESSAGE IS 'IEA960I', ADDITIONAL PROCESSING    * 30604500
*        IS SKIPPED. OTHERWISE, A STEP ORIENTED ENQ (Q NAME IN THE    * 30605000
*        $SVQNAM FIELD AND R NAME 'WTO') IS ISSUED TO SERIALIZE ON    * 30605500
*        THE SJB LOG QUEUE REMOVAL AND USE OF THE SJB LOG DATA SET.   * 30606000
*                                                                     * 30606500
*********************************************************************** 30607000
         EJECT                                                          30607500
*********************************************************************** 30608000
*                                                                     * 30608500
*        THE 'USE' OPTION IS USED TO CAUSE MESSAGES ISSUED     @OZ33722 30609000
*        BECAUSE OF ASYNCHRONOUS PROCESSING TO REMAIN CHAINED  @OZ33722 30609250
*        ON SJBLOGQ. IF THE ENQ IS OBTAINED, THE LOGS MSGS     @OZ33722 30609500
*        ARE COPIED TO THE LOG DATA SET (FREEING THE QUEUE            * 30610000
*        ELEMENTS). THE MESSAGE WITHIN THE WORK AREA IS COPIED,       * 30610500
*        DEQ ISSUED, AND THE WORK AREA FREED.                         * 30611000
*                                                                     * 30611500
*    (5) CONTROL IS RETURNED TO OS SVC 35 PROCESSING ALLOWING THE     * 30612000
*        DISPLAY OF THE MESSAGE.                                      * 30612500
*                                                                     * 30613000
* INPUT REGISTERS                                                     * 30613500
*        R0    = ADDRESS OF SSCVT                                     * 30614000
*        R1    = ADDRESS OF SSOB                                      * 30614500
*        R13   = SAVE AREA                                            * 30615000
*        R14   = RETURN                                               * 30615500
*        R15   = ENTRY BASE                                           * 30616000
*                                                                     * 30616500
* OUTPUT REGISTERS                                                    * 30617000
*                                                                     * 30617500
*        R0-R14= UNCHANGED                                            * 30618000
*        R15   = RETURN CODE                                          * 30618500
*                                                                     * 30619000
* NOTES                                                               * 30619500
*                                                                     * 30620000
*    (1) NULL LINE PROCESSING FOR MLWTO IS NOT USED IN THIS VERSION.  * 30620500
*                                                                     * 30621000
*    (2) WTO DELETION CAPABILITY IS NOT USED IN THIS VERSION.         * 30621500
*                                                                     * 30622000
*********************************************************************** 30622500
         EJECT                                                          30623000
*********************************************************************** 30623500
*                                                                     * 30624000
*        ENTRY TO SVC 35 EXIT - PICK UP PARAMETERS                    * 30624500
*                                                                     * 30625000
*********************************************************************** 30625500
HOSWTO   $ENTRY BASE=R15,ENTRY=NO  PROVIDE ENTRY FOR ROUTINE            30626000
S35      EQU   HOSWTO                                                   30626500
         STM   R14,R12,USAVER      SAVE CALLER'S REGISTERS              30627000
         LR    R12,R15             ESTABLISH BASE                       30627500
         USING S35,R12                                                  30628000
         DROP  R15                                                      30628500
         LR    R8,R0               POINT TO SSCVT                       30629000
         USING SSCT,R8                                                  30629500
         L     R11,SSCTSSVT        POINT TO SSVT                        30630000
         LR    R10,R1              POINT TO SSOB                        30630500
         USING SSOB,R10                                                 30631000
         L     R5,SSOBINDV         POINT TO PARMS                       30631500
         USING SSWTBGN,R5                                               30632000
         LM    R5,R7,SSWTWQE       PICK UP PARMS                        30632500
*                                  R5 = WQE, NORMAL OR MAJOR            30633000
*                                  R6 = MINOR WQE OR ZERO               30633500
*                                  R7 = ORE OR ZERO                     30634000
         USING WQE,R5                                                   30634500
         MVI   USAVFL,0            ZERO TEMPORARY FLAGS                 30635000
         EJECT                                                          30635500
*********************************************************************** 30636000
*                                                                     * 30636500
*        SETUP FOR NORMAL WQE                                         * 30637000
*                                                                     * 30637500
*********************************************************************** 30638000
         LA    R3,WQETS            POINT TO TIME STAMP                  30638500
         LA    R4,WQENBR+3         POINT TO LENGTH                      30639000
         TM    WQENBR,WMJMMLWB     IS THIS MAJOR WQE                    30639500
         BZ    S35NORML            IF NOT MUST BE NORMAL                30640000
*********************************************************************** 30640500
*                                                                     * 30641000
*        SETUP FOR MAJOR WQE                                          * 30641500
*                                                                     * 30642000
*********************************************************************** 30642500
         MVI   USAVFL,USAVFLM      SET MLWTO FLAG                       30643000
         LA    R3,WMJMTS           POINT TO TIME STAMP                  30643500
         LA    R4,WMJMTXTL+1       POINT TO LENGTH                      30644000
         TM    WMJMLTYP,X'E0'      DOES THE WQE CONTAIN A MESSAGE       30644500
         BZ    S35EXIT             EXIT IF NO                           30645000
         LTR   R5,R6               TEST FOR CURRENT LINE IN MINOR       30645500
         BZ    S35NORML            CONTINUE IF NOT MINOR                30646000
*********************************************************************** 30646500
*                                                                     * 30647000
*        SETUP FOR MINOR WQE                                          * 30647500
*                                                                     * 30648000
*********************************************************************** 30648500
         MVI   USAVFL,USAVFLM+USAVFLMI SET MINOR FLAG                   30649000
         LA    R2,WMNMLT1          POINT TO LINE TYPE, LINE 1           30649500
         LA    R3,WMNMTXT1         POINT TO TEXT, LINE 1                30650000
         LA    R0,WQETXT-WQETS     GET OFFSET FOR MINOR                 30650500
         SLR   R3,R0               POINT TO TIME STAMP, LINE 1          30651000
         LA    R4,WMNMTL1          POINT TO LENGTH, LINE 1              30651500
         TM    WMNMML2,WMNMML2H    TEST FOR LINE 2 AVAILABLE            30652000
         BO    S35MINOR            SKIP NEXT IF YES                     30652500
         LA    R2,WMNMLT2          POINT TO LINE TYPE, LINE 2           30653000
         LA    R3,WMNMTXT2-(WQETXT-WQETS) POINT TO TS, LINE 2           30653500
         LA    R4,WMNMTL2          POINT TO LINE LENGTH, LINE 2         30654000
S35MINOR TM    0(R2),X'E0'         IS THERE DATA IN LINE                30654500
         BZ    S35EXIT             EXIT IF NO                           30655000
         EJECT                                                          30655500
*********************************************************************** 30656000
*                                                                     * 30656500
*        PREPARE TO EDIT WQES                                         * 30657000
*                                                                     * 30657500
*********************************************************************** 30658000
S35NORML SLR   R2,R2               ZERO MOVE COUNT                      30658500
         IC    R2,0(0,R4)          PICK UP LENGTH OF TEXT               30659000
         USING WQETS,R3                                                 30659500
         L     R1,PSAAOLD-PSA      POINT TO ASCB                        30660000
         LH    R1,ASCBASID-ASCB(,R1) PICK UP ASID                       30660500
         BAL   R14,SFNDSJB         FIND SJB VIA HAVT                    30661000
         B     S35EXIT             IGNORE MESSAGE           +0          30661500
         B     S35SHIFT            SHIFT HASP MESSAGE       +4          30662000
         LR    R6,R1               POINT TO SJB             +8          30662500
         USING SJBDSECT,R6                                              30663000
         B     S35GWK              GET WORK AREA                        30663500
S35SHIFT L     R1,PSATOLD-PSA      POINT TO TCB                      R4 30665000
         L     R14,TCBRBP-TCB(,R1) POINT TO OUR RB                      30665500
         L     R15,RBGRS1-RBBASIC(,R14) POINT TO POSSIBLE CSA        R4 30665600
         L     R14,RBLINK-RBBASIC(,R14) POINT TO WHAT SHOULD BE PRB     30666000
         CLM   R1,7,RBLINKB-RBBASIC(R14) DOES IT POINT TO TCB           30666500
         BNE   S35EXIT             SKIP EDIT IF NOT                     30667000
         TM    USAVFL,USAVFLMI     MLWTO MINOR LINE                  R4 30667500
         BO    S35EXIT             SKIP EDIT IF YES                  R4 30668000
         CLC   $SVTO,CSANFM-CSADSECT(R15) THIS FROM OUR SYSTEM       R4 30668100
         BE    S35WQEE             EDIT WQE IF YES                   R4 30668200
         MVC   WQETS,CSATS-CSADSECT(R15) CLOBBER OS TIME STAMP       R4 30668300
         B     S35SJID             SKIP EDIT                         R4 30668400
S35WQEE  BAL   R14,S35HIDS         EDIT WQE                          R4 30668500
S35SJID  MVC   WQEJOBNM,CSAJOBID-CSADSECT(R15) SET JOB ID            R4 30669000
         B     S35EXIT             EXIT                                 30672500
S35HIDS  MVC   S35WQEID,$SVCOMCH   SET MESSAGE ID SAME AS COMMAND    R4 30672600
         CLI   0(R4),S35HIDL       CHECK LENGTH GT MSG ID      @OZ19488 30672635
         BNH   S35EXIT4            IF ONLY MSG ID, DELETE WQE  @OZ19488 30672670
         TM    $SVSTUS,$SVSTIDS    REQUIRE HASP IDS                  R4 30672700
         BOR   R14                 RETURN IF YES                     R4 30672800
         LA    R0,S35HIDL+1        SET ADJUSTMENT                    R4 30672900
         SLR   R2,R0               SET MACHINE COUNT OF REMAINING TEXT  30673000
         EX    R2,S35HIDSM         CLOBBER OUR MESSAGE ID            R4 30673100
         LA    R2,3(,R2)           UP TO TRUE MESSAGE LENGTH         R4 30673200
         STC   R2,0(,R4)           SET LENGTH                        R4 30673300
         LA    R1,WQETXT(R2)       POINT TO RESIDUE                  R4 30673400
         MVC   0(S35HIDL-2,R1),=CL(S35HIDL-2)' ' BLANK IT            R4 30673500
         BR    R14                 RETURN                            R4 30673600
         EJECT                                                       R4 30673700
*********************************************************************** 30673800
*                                                                     * 30673900
*        GET WORK AREA                                                * 30674000
*                                                                     * 30674500
*********************************************************************** 30675000
S35GWK   LA    R0,S35DL            GET DATA LENGTH                      30675500
         GETMAIN RC,LV=(0),SP=URASP GET STORE PROTECTED WORK AREA       30676000
         LTR   R15,R15             TEST FOR GOTTEN                      30676500
         BNZ   S35EXIT             IF NOT GOTTEN FORGET IT              30677000
         LR    R8,R1               POINT TO AREA                        30677500
         USING S35DSECT,R8                                              30678000
         MVC   S35DTIME(S35DACTF-S35DTIME),=CL(S35DACTF-S35DTIME)' '    30678500
         TM    USAVFL,USAVFLMI     TEST FOR MINOR                       30679000
         BO    S35NJBTS            SKIP JOB NUMBERING AND TIME STAMPING 30679500
         MVC   WQEJOBNM,SJBJOBID   MOVE JOB ID                          30680000
         LA    R1,WQEJOBNM+3       POINT TO NUMERIC PART                30680500
         BAL   R14,SBLKJOB         BLANK HIGH DIGITS                    30681000
         MVC   S35DTIME(S35DACTF-S35DTIME),WQETS INSERT TIME AND JOB ID 30681500
S35NJBTS CLI   S35WQEID,C'$'       IS THIS OF HASP ORIGIN               30682000
         BE    *+14                BR IF YES                   @OZ30033 30682100
         CLC   S35WQEID,$SVCOMCH   MSG EDITED BY $$WTO...      @OZ30033 30682200
         BNE   S35NHASP            IF NOT SKIP SPECIAL EDIT             30682500
         CLC   PSAAOLD-PSA,$SVPOSTE+4 CHECK FOR HASP ASID            R4 30682600
         BE    S35HASP             SKIP NEXT IF HASP ASID      @OZ30033 30682700
         L     R1,PSATOLD-PSA      POINT TO TCB                      R4 30682800
         L     R14,TCBRBP-TCB(,R1) POINT TO OUR RB                   R4 30682900
         L     R14,RBLINK-RBBASIC(,R14) POINT TO CALLING RB          R4 30683000
         CLC   RBOPSW+5-RBBASIC(3,R14),=AL3(SENTRIES)  CHECK RANGE   R4 30683100
         BL    S35NHASP            SKIP HASPSSSM EDIT IF LOW         R4 30683200
         CLC   RBOPSW+5-RBBASIC(3,R14),=AL3(SSMPATCH)  CHECK RANGE   R4 30683300
         BH    S35NHASP            SKIP HASPSSSM EDIT IF HIGH        R4 30683400
         CLI   WQETXT,C'@'         IS THIS PROBLEM PROGRAM ACTION       30683500
         BE    S35NHASP            SKIP SPECIAL EDIT IF YES             30683600
         TM    USAVFL,USAVFLM      IS THIS MLWTO                        30684000
         BO    S35NHASP            HASPSSSM DOES NOT ISSUE MLWTOS       30684500
S35HASP  CLI   S35WQEID+1,C' '     HASP ID PRESENT...          @OZ30033 30684510
         BNE   S35NSSSM            BR IF YES                   @OZ30033 30684520
         CH    R2,=Y(L'S35DACTF+L'S35DHID-7)  COUNT VALID...   @OZ30033 30684530
         BNP   S35FREE             BR IF NO TO SKIP EDIT       @OZ30033 30684540
         MVC   S35DTXT,S35WQEID+1          SHIFT TEXT RIGHT TO @OZ30033 30684550
         MVC   S35WQEHT-1(S35DTXTL),S35DTXT ALLOW FOR MSG ID   @OZ30033 30684560
         LA    R2,S35HIDL-2(,R2)   UPDATE LENGTH               @OZ30033 30684570
         EJECT                                                       R4 30684600
S35NSSSM MVC   S35DACTF(L'S35DACTF+L'S35DHID),WQETXT  MOVE HEADER    R4 30684700
         MVC   S35DJOBN,SJBJOBNM   MOVE JOB NAME                        30686000
         LA    R0,L'S35DACTF+L'S35DHID GET ADJUSTMENT                   30686500
         SR    R2,R0               ADJUST COUNT                         30687000
         BNP   S35FREE             FORGET EDIT                          30687500
         LA    R0,S35DTXTL         GET MAXIMUM COUNT                    30688000
         CR    R2,R0               TEST MAXIMUM EXCEEDED                30688500
         BNH   *+6                 SKIP TRUNCATION IF OK                30689000
         LR    R2,R0               TRUNCATE                             30689500
         EX    R2,S35MVO           MOVE TEXT OUT                        30690000
         LA    R2,S35DTXT-S35DACTF(,R2) GET TOTAL LENGTH OF TEXT        30690500
         STC   R2,0(,R4)           SET NEW LENGTH.                      30691000
         BCTR  R2,0                REDUCE COUNT                         30691500
         EX    R2,S35MVI           MOVE TEXT IN                         30692000
         LR    R15,R2              SAVE MACHINE LENGTH OF TEXT       R4 30692100
         LA    R2,1(,R2)           GET TRUE LENGTH                   R4 30692200
         BAL   R14,S35HIDS         EDIT WQE                          R4 30692300
         TM    $SVSTUS,$SVSTIDS    REQUIRE HASP IDS...         @OZ30033 30692320
         BO    S35RLEN             BR IF YES                   @OZ30033 30692340
         SH    R2,=H'3'            GET MACHINE LENGTH OF TEXT  @OZ30033 30692360
         EX    R2,S35HIDRM         OVERLAY MSG ID              @OZ30033 30692380
         LA    R1,S35DACTF+3(R2)   POINT TO RESIDUE            @OZ30033 30692400
         MVC   0(S35HIDL-2,R1),=CL(S35HIDL-2)' '  BLANK IT     @OZ30033 30692420
S35RLEN  LR    R2,R15              RESTORE MSG LENGTH          @OZ30033 30692440
         B     S35GL               SKIP WHOLE TEXT MOVE OUT             30692500
S35NHASP BCTR  R2,0                REDUCE COUNT                         30693000
         EX    R2,S35MVW           MOVE WHOLE TEXT                      30693500
S35GL    LA    R2,S35DACTF-S35DMSG+1(,R2) GET ENTIRE MESSAGE LENGTH     30694000
         LA    R0,S35DMAX          SET MAXIMUM SIZE                     30694500
         CR    R2,R0               TEST FOR TOO LONG                    30695000
         BNH   *+6                 IF SAFE SKIP NSI                     30695500
         LR    R2,R0               TRUNCATE                             30696000
         STH   R2,S35DMSGL         SET NEW LENGTH                       30696500
         MVC   S35DID,S35ID        SET BUFFER ID               @OZ33722 30696510
         SPACE 2                                               @OZ33722 30696520
*************************************************************  @OZ33722 30696530
*        QUEUE WTO MESSAGE TO SJBLOGQ FOR POSSIBLE             @OZ33722 30696540
*        LATER PROCESSING                                      @OZ33722 30696550
*************************************************************  @OZ33722 30696560
         L     R5,SJBLOGQ          PICK UP LOG QUEUE HEAD      @OZ33722 30696600
S35QLOOP ST    R5,S35DNEXT         COPY TO OUR ELEMENT         @OZ33722 30696700
         CS    R5,R8,SJBLOGQ       QUEUE IT                    @OZ33722 30696800
         BNE   S35QLOOP            LOOP IF NOT QUEUED          @OZ33722 30696900
         EJECT                                                 @OZ33722 30696950
*********************************************************************** 30697000
*                                                                     * 30697500
*        CLEAN OUT SJB LOG QUEUE                                      * 30698000
*                                                                     * 30698500
*********************************************************************** 30699000
         CLC   WQETXT+1(7),=C'IEA960I' IS THIS ENQ DISASTER MESSAGE     30699500
         BE    S35EXIT             SKIP LOG IF SO              @OZ33722 30700000
         ST    R8,UOURSAV          POINT CALLER SAVE TO OURS            30700500
         ST    R13,S35DSAVH        POINT TO CALLER SAVE                 30701000
         MVC   S35DENQ(S35PATL),S35PATRN MOVE PATTERN ENQ               30701500
         ENQ   ($SVQNAM,S35DRN),MF=(E,S35DENQ) ENQ ON SINGLE SJB        30702000
         LTR   R15,R15             DO WE HAVE CONTROL                   30702500
         BNZ   S35EXIT             IF NOT, FORGET IT           @OZ33722 30703000
         LA    R13,S35DSAV         USE OUR SAVE AREA           @OZ33722 30703500
S35CLNPT ICM   R5,15,SJBLOGQ       POINT TO QUEUED MESSAGES             30704000
         USING S34DSECT,R5                                              30704500
         BZ    S35DEQ              IF EMPTY,PREPARE TO EXIT    @OZ33722 30705000
         LA    R4,SJBLOGQ-(S34DNEXT-S34DSECT)                           30705500
S35QSRLL ICM   R1,15,S34DNEXT      POINT TO NEXT                        30706000
         BZ    S35QEND             IF END, BR                           30706500
         LR    R4,R5               BRING UP REAR                        30707000
         LR    R5,R1               POINT TO NEXT                        30707500
         B     S35QSRLL            LOOP                                 30708000
S35QEND  CS    R5,R1,S34DNEXT-S34DSECT(R4) REMOVE FROM END              30708500
         BNE   S35QSRLL            TRY AGAIN IF NO GO                   30709000
         CLC   S35ID,S35DID-S35DSECT(R5) SVC35 BUFFER...       @OZ33722 30709100
         BE    S35PMSG             YES, GO PUT IT              @OZ33722 30709200
*        PUT SVC 34 MESSAGE                                    @OZ33722 30709300
         LH    R0,S34DMSGL         PICK UP LENGTH                       30709500
         USING RPLDSECT,R1                                              30710000
         LA    R1,SJBLRPL          POINT TO RPL                         30710500
         ST    R0,RPLRLEN          SET LENGTH                           30711000
         LA    R0,S34DTIME         POINT TO TEXT                        30711500
         ST    R0,RPLAREA          SET AREA                             30712000
         TM    SJBFLG2,SJB2INIT    INITIATOR SJB...                 R41 30712300
         BO    S35INIT1            SKIP PUT IF YES                  R41 30712400
         PUT   RPL=(1)             LOG DATA                             30712500
         DROP  R1                                                       30713000
S35INIT1 DS    0H                                                   R41 30713300
         LR    R1,R5               POINT TO AREA                        30713500
         L     R15,$SVFCELL        POINT TO FREE CELL ROUTINE           30714000
         BALR  R14,R15             ENTER IT                             30714500
         B     S35CLNPT            CLEAN OUT SJB QUEUE                  30715000
         EJECT                                                          30715500
*********************************************************************** 30716000
*                                                                     * 30716500
*        PUT SVC 35 MESSAGE ON LOG DATA SET                           * 30717000
*                                                                     * 30717500
*********************************************************************** 30718000
         DROP  R8                                              @OZ33722 30718200
         USING S35DSECT,R5                                     @OZ33722 30718300
S35PMSG  LH    R0,S35DMSGL         PICK UP LENGTH                       30718500
         USING RPLDSECT,R1                                              30719000
         LA    R1,SJBLRPL          POINT TO RPL                         30719500
         ST    R0,RPLRLEN          SET LENGTH                           30720000
         LA    R0,S35DTIME         POINT TO DATA                        30720500
         ST    R0,RPLAREA          SET AREA                             30721000
         TM    SJBFLG2,SJB2INIT    INITIATOR SJB...                 R41 30721300
         BO    S35INIT2            SKIP PUT IF YES                  R41 30721400
         PUT   RPL=(1)             LOG DATA                             30721500
         DROP  R1                                                       30722000
S35INIT2 DS    0H                                                   R41 30722300
         CR    R5,R8               IS THIS CURRENT WTO/R...    @OZ33722 30722400
         BE    S35CLNPT            YES, DON'T FREE IT YET      @OZ33722 30722500
         LA    R0,S35DL            GET LENGTH OF AREA          @OZ33722 30722600
         ICM   R0,8,=AL1(URASP)    SET SUBPOOL NUMBER          @OZ33722 30722700
         LR    R1,R5               POINT TO AREA               @OZ33722 30722800
         FREEMAIN R,LV=(0),A=(1)   FREE AREA                   @OZ33722 30722900
         B     S35CLNPT            CLEAN OUT SJB QUEUE         @OZ33722 30723000
         SPACE 2                                               @OZ33722 30723100
         USING S35DSECT,R8         ACCESS CURRENT WTO/R        @OZ33722 30723200
S35DEQ   L     R13,S35DSAVH        POINT TO CALLER SAVE        @OZ33722 30723300
         DEQ   RET=NONE,MF=(E,S35DENQ) RELEASE SJB             @OZ33722 30723400
S35FREE  LA    R0,S35DL            GET LENGTH OF AREA                   30723500
         ICM   R0,8,=AL1(URASP)    SET SUB POOL NUMBER                  30724000
         LR    R1,R8               POINT TO AREA                        30724500
         FREEMAIN R,LV=(0),A=(1)   FREE AREA                            30725000
S35EXIT  LA    R15,SSWTRTOK        SET RETURN CODE                      30725500
S35EXITA ST    R15,SSOBRETN        PUT INTO FEED BACK                   30726000
         LM    R14,R12,USAVER      RESTORE CALLER REGISTERS             30726500
         LA    R15,SSRTOK          SET NORMAL RETURN                    30727000
         BR    R14                 EXIT                                 30727500
         SPACE 1                                                     R4 30727600
S35EXIT4 LA    R15,SSWTNDSP        TELL IEAVVWTO TO            @OZ19488 30727625
         B     S35EXITA              DELETE MSG                @OZ19488 30727650
         SPACE 2                                               @OZ19488 30727675
S35HIDSM MVC   S35WQEID+1(*-*),S35WQEID+S35HIDL-1  *** EXEC ONLY *** R4 30727700
S35HIDRM MVC   S35DHID+1(*-*),S35DJOBN-1  ***  EXEC ONLY  ***  @OZ30033 30727750
S35MVW   MVC   S35DACTF(*-*),WQETXT       *** EXECUTE ONLY ***       R4 30727800
S35MVI   MVC   WQETXT(*-*),S35DACTF       *** EXECUTE ONLY ***       R4 30727900
S35MVO   MVC   S35DTXT-1(*-*),S35WQEHT-1  *** EXECUTE ONLY ***       R4 30728000
URASP    EQU   255                 EXPLICITLY ASSIGNED LSQA    @OZ33722 30730000
         DROP  R3                                                       30730500
         DROP  R5                                                       30731000
         DROP  R6                                                       30731500
         DROP  R8                                                       30732000
         DROP  R10                                                      30732500
         DROP  R12                                                      30733000
         EJECT                                                          30733500
*********************************************************************** 30734000
*                                                                     * 30734500
*        MISCELLANEOUS                                                * 30735000
*                                                                     * 30735500
*********************************************************************** 30736000
S34F7    EQU   CMBFLAGJ+CMBFLAGD+CMBFLAGS                            R4 30736500
CSAFP    EQU   231                 COMMON SERVICE AREA PROTECTED POOL   30737000
         EJECT                                                          30737500
*********************************************************************** 30738000
*                                                                     * 30738500
*        ITEMS MOVED INTO SVC 34 OR 35 QUEUE WORK AREA                * 30739000
*                                                                     * 30739500
*********************************************************************** 30740000
S35PATRN ENQ   (*-*,*-*,E,3,STEP),RET=USE,MF=L                 @OZ33722 30740500
         DC    C'WTO'              R NAME FOR WTO LOGGING               30741000
S35PATL  EQU   *-S35PATRN                                               30741500
S35ID    DC    CL4'S35D'           IDENTIFIER FOR SVC35 BUFF.  @OZ33722 30741600
S34TIME  DC    X'F021204B20204B202040'                         @OZ33128 30742000
         DC    CL10'JOB'           JOB NNNN--                           30742500
         DC    C'R 00,'                                                 30743000
S34DTXTC DC    CL(L'S34DTXT)' '                                         30743500
S34TL    EQU   *-S34TIME                                                30744000
*********************************************************************** 30744500
*                                                                     * 30745000
*        SUBROUTINE TO BLANK HIGH ORDER ZEROS OF JOB NUMBER           * 30745500
*                                                                     * 30746000
*********************************************************************** 30746500
SBLKJOB  LA    R0,4                SUPPRESS UP TO 4 DIGITS              30747000
         BALR  R15,0               ESTABLISH BASE                       30747500
S34BKL   CLI   0(R1),C'0'          IS THIS ZERO                         30748000
         BCR   NE,R14              SKIP BLANKING                        30748500
         MVI   0(R1),C' '          BLANK                                30749000
         LA    R1,1(0,R1)          UP TO NEXT                           30749500
         BCTR  R0,R15              LOOP                                 30750000
         BR    R14                 RETURN                               30750500
         EJECT                                                          30751000
*********************************************************************** 30751500
*                                                                     * 30752000
*        SUBROUTINE TO LOCATE SJB FOR SVC 34 AND 35 SUPPORT           * 30752500
*                                                                     * 30753000
*********************************************************************** 30753500
SFNDSJB  LR    R0,R1               COPY ASID                            30754000
         BCTR  R0,0                REDUCE BY ONE                        30754500
         LTR   R0,R0               INSURE ASID GREATER THAN ONE         30755000
         BNPR  R14                 EXIT TO IGNORE ROUTINE               30755500
         BALR  R15,0               ESTABLISH BASE                       30756000
         USING *,R15                                                    30756500
         CLC   PSAAOLD-PSA,$SVPOSTE+4 CHECK FOR HASP ASCB               30757000
         BNE   SFNDSJBA            DO NORMAL PICK UP IF NOT             30757500
         ICM   R0,15,$SVHASP       HASP STILL UP                        30758000
         BNER  R14                 EXIT TO IGNORE IF NOT                30758500
         LR    R0,R1               SAVE ASID                            30759000
         L     R1,$SVHCT           POINT TO HCT                         30759500
         CLC   PSATOLD-PSA,$WTOTCBA-HCTDSECT(R1) IS THIS $WTO           30760000
         BE    4(0,R14)            RETURN TO $WTO ROUTINE HANDLER       30760500
         CLC   PSATOLD-PSA,$CNVTCBA-HCTDSECT(R1) IS THIS CONVERTER      30761000
         BNER  R14                 EXIT TO IGNORE ROUTINE               30761500
         LR    R1,R0               RESTORE ASID                         30762000
SFNDSJBA SLL   R1,2                GET ASID * 4 ( WORD/ASID )           30762500
         AL    R1,$SVHAVT          POINT TO VECTOR TABLE ENTRY          30763000
         L     R0,0(0,R1)          POINT TO SJB                         30763500
SFNDSJBB LTR   R1,R0               COPY POINTER                         30764000
         BZR   R14                 RETURN TO IGNORE IF NO SJB           30764500
         L     R0,SJBSJB-SJBDSECT(,R1) POINT TO NEXT LOWER              30765000
         LTR   R0,R0               TEST FOR END                         30765500
         BNZ   SFNDSJBB            LOOP IF NOT                          30766000
         B     8(0,R14)            RETURN TO CONTINUE ROUTINE           30766500
         DROP  R15                                                      30767000
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE - PROCESS SYSOUT'         30767500
*********************************************************************** 30768000
*                                                                     * 30768500
*        PROCESS SYSOUT - SUBSYSTEM FUNCTION SSOBSOUT                 * 30769000
*                                                                     * 30769500
* FUNCTION                                                            * 30770000
*                                                                     * 30770500
*    RECEIVE CONTROL FROM THE OPERATING SYSTEM OUTPUT COMMAND         * 30771000
*    PROCESSOR OR THE EXTERNAL WRITER FOR THE PURPOSE OF INTERFACING  * 30771500
*    WITH THE PROCESS SYSOUT SUPPORT ROUTINES IN HASPXEQ TO RETRIEVE  * 30772000
*    DATA SETS QUEUED TO THE HELD DATA SET QUEUE OR READY FOR         * 30772500
*    NORMAL OUTPUT AS APPROPRIATE AND DISPOSING OF THOSE DATA SETS    * 30773000
*    EITHER BY USE OF DATA MANAGEMENT FACILITIES TO RETRIEVE THE      * 30773500
*    DATA OR BY USE OF THIS INTERFACE TO RELEASE OR DELETE THE        * 30774000
*    DATA SETS.  THE FUNCTIONAL OPERATIONS ARE DESCRIBED BELOW.       * 30774500
*                                                                     * 30775000
*    (1) A $PROLOG MACRO INSTRUCTION IS EXECUTED TO GET CONTROL       * 30775500
*        OF THE USERS SJB (REQUESTOR MUST BE ONE OF OUR JOBS).        * 30776000
*                                                                     * 30776500
*    (2) IF THE SJB DOES NOT HAVE A PROCESS SYSOUT (PSO) WORK AREA,   * 30777000
*        THE REQUEST IS IGNORED (CONSIDERED A NOP), IF THE SSSOCTRL   * 30777500
*        FLAG IS ON AND THE SSSOUFLG BYTE IS ZERO. IF REQUEST NOT     * 30778000
*        IGNORED A PSO WORK AREA IS CREATED AND QUEUED TO THE SJB     * 30778500
*        USING AN SJB OWNED STORAGE CELL.                             * 30779000
*                                                                     * 30779500
*    (3) DESTINATION IS CONVERTED TO ROUTE CODE AND JOB ID IS         * 30780000
*        CONVERTED TO JOB NUMBER AS REQUESTED.                        * 30780500
*                                                                     * 30781000
*    (4) THE SJB IS QUEUED TO THE $SVPSOP QUEUE, HASP IS POSTED,      * 30781500
*        AND THE USER TASK IS MADE TO WAIT FOR HASP TO RESPOND.       * 30782000
*                                                                     * 30782500
*    (5) THE RESPONSE IS COPIED TO THE USER PARAMETER AREA, THE       * 30783000
*        PSO IS FREED IF THE SSSOCTRL FLAG IS ON OR AN ERROR IS       * 30783500
*        INDICATED IN THE RESPONSE WITHOUT HASP SETTING THE HIGH      * 30784000
*        ORDER BIT OF THE SJB PSO POINTER ON. CONTROL IS THEN         * 30784500
*        RETURNED TO THE USER VIA THE $EPILOG MACRO INSTRUCTION       * 30785000
*        WHICH FREES THE SJB FOR OTHERS.                              * 30785500
*                                                                     * 30786000
*    (6) IF DURING ANY PHASE OF PROCESSING IT IS DETERMINED THAT      * 30786500
*        HASP IS NOT UP, THE ROUTINE UNDOES ITS PROCESSING. IF        * 30787000
*        THE SJB HAS ALREADY BEEN PLACED ON THE QUEUE AND THE         * 30787500
*        OS WAIT MACRO HAS NOT BEEN ISSUED, THE CMS LOCK IS           * 30788000
*        OBTAINED AND THE SJB IS REMOVED FROM THE QUEUE (IF STILL     * 30788500
*        ON). THE PSO IS FREED AND THE HASP NOT UP DIAGNOSTIC IS      * 30789000
*        RETURNED TO THE USER.                                        * 30789500
*                                                                     * 30790000
*    (7) IF THIS ROUTINE IS PREEMPTED, A RECOVERY ROUTINE IS ENTERED  * 30790500
*        TO REMOVE THE SJB FROM THE $SVPSOQ EITHER BY WAITNIG IN      * 30791000
*        PLACE OF THE ORIGINAL TCB/RB OR BY DIRECT REMOVAL IF HASP    * 30791500
*        ABENDS. THIS ROUTINE MAY BE ENTERED AT ENTRY PSOQUEUE ((4)   * 30792000
*        ABOVE) AS A SUBROUTINE OF THE RECOVERY ROUTINE SO HASP CAN   * 30792500
*        DISPOSE OF THE DATA SET REPRESENTED BY THE LAST OR CURRENT   * 30793000
*        REQUEST. RETURN IS DIRECT TO THE RECOVERY ROUTINE.           * 30793500
*                                                                     * 30794000
*********************************************************************** 30794500
         EJECT                                                          30795000
*********************************************************************** 30795500
*                                                                     * 30796000
* INPUT REGISTERS -                                                   * 30796500
*                                                                     * 30797000
*        R0    = ADDRESS OF SSCVT                                     * 30797500
*        R1    = ADDRESS OF SSOB                                      * 30798000
*        R13   = ADDRESS OF SAVE AREA                                 * 30798500
*        R14   = RETURN                                               * 30799000
*        R15   = ENTRY BASE                                           * 30799500
*                                                                     * 30800000
* OUTPUT REGISTERS -                                                  * 30800500
*                                                                     * 30801000
*        R0-R14= UNCHANGED                                            * 30801500
*        R1    = ECB ADDRESS FOR WRITER TO WAIT ON DATA SETS          * 30802000
*        R15   = RETURN CODE                                          * 30802500
*                                                                     * 30803000
* NOTES                                                               * 30803500
*                                                                     * 30804000
*        THERE IS ONE AND ONLY ONE PROCESS SYSOUT (PSO) FOR EACH      * 30804500
*        SJB. UNPREDICTABLE RESULTS WILL OCCUR IF MULTIBLE TASKS      * 30805000
*        USE THIS INTERFACE ON AN UNCONTROLLED BASIS.                 * 30805500
*                                                                     * 30806000
*********************************************************************** 30806500
         EJECT                                                          30807000
*********************************************************************** 30807500
*                                                                     * 30808000
*        ENTRY TO PROCESS SYSOUT - PICK UP PARAMETERS                 * 30808500
*                                                                     * 30809000
*********************************************************************** 30809500
HOSSOUT  $PROLOG SSOBSOUT,SSSOSIZE,LOCK=REQ  LOCATE AND LOCK SJB        30810000
PSOBASE  LA    R8,PSEPILOG         POINT EXIT TO CALL EPILOG            30810500
         USING SJBDSECT,R13        SET SJB ADDRESSABILITY               30811000
         USING SSSOBGN,R10         SET SSOB ADDRESSABILITY              30811500
         NI    SJBTFFG,255-SJBTFFGP RESET ANY REQUEST TO PURGE PSO      30812000
         L     R6,SJBPSOP          PICK UP POSSIBLE PSO ADDRESS         30812500
         L     R1,$SVHASP          TEST FOR                             30813000
         LTR   R1,R1               HASP UP                              30813500
         BZ    PSHASPUP            SKIP NEXT IF UP                      30814000
PSNOHASP LA    R5,SSRTNTUP         SET NOT UP RETURN                    30814500
         LTR   R6,R6               CHECK FOR PSO PRESENT                30815000
         BZ    PSXIT               EXIT IF NO PSO                       30815500
         B     PSFREE              FREE PSO                             30816000
         EJECT                                                          30816500
*********************************************************************** 30817000
*                                                                     * 30817500
*        CHECK FOR FIRST ENTRY OF SEQUENCE                            * 30818000
*                                                                     * 30818500
*********************************************************************** 30819000
         USING PSODSECT,R6                                              30819500
PSHASPUP LTR   R6,R6                                                    30820000
         BNE   PSMVCIN             MOVE PARAMETERS                      30820500
         TM    SSSOFLG2,SSSOCTRL   IS THIS FIRST AND LAST               30821000
         BZ    PSGPSO              IF NOT GET PSO                       30821500
         LA    R15,SSSORTOK        SET OK RETURN                        30822000
         CLI   SSSOUFLG,0          IS THIS A GROUP REQUEST              30822500
         BZ    PSEPILOG            IF NOT CONSIDER THIS A NOP           30823000
*********************************************************************** 30823500
*                                                                     * 30824000
*        GET WORK AREA FOR NEW SEQUENCE                               * 30824500
*                                                                     * 30825000
*********************************************************************** 30825500
PSGPSO   OI    SJBTFFG,SJBTFFGG    SET PSO GOTTEN THIS ENTRY            30826000
         LA    R4,PSOLNGTH         GET LENGTH OF PSO                    30826500
         L     R15,$SVGCELL        POINT TO GET CELL                    30827000
         BALR  R14,R15             ENTER IT                             30827500
         B     PSNCELL             EXIT IF NO CELL          +0          30828000
         LR    R6,R1               POINT TO CELL            +4          30828500
PSCELLG  LA    R5,PSOLNGTH-4       GET LENGTH OF PSO-4                  30829000
         LA    R4,4(0,R6)          POINT TO OUR PORTION                 30829500
         SLR   R0,R0               ZERO                                 30830000
         SLR   R1,R1               SOURCE ADDRESS AND LENGTH            30830500
         MVCL  R4,R0               ZERO WORK AREA                       30831000
         ST    R6,SJBPSOP          SET POINTER TO PSO                   30831500
PSMVCIN  MVC   PSOUFLG(PSOPARML),SSSOUFLG MOVE ALL PARAMETERS           30832000
         MVC   PSOTCB,SJBTCB       COPY TCB FOR NON LOCKED ABENDS       30832500
         TIME  BIN                 GET CURRENT DATE/TIME            R41 30832600
         ST    R1,PSOCRDT          STORE DATE IN PSO                R41 30832700
*********************************************************************** 30833000
*                                                                     * 30833500
*        CONVERT DESTINATION TO ROUTE - JOB ID TO NUMBER              * 30834000
*                                                                     * 30834500
*********************************************************************** 30835000
         TM    PSOUFLG,SSSOROUT    DOES USER WANT TO ROUTE TO DEST      30835500
         BO    PSODST              CONVERT IF YES                       30836000
         TM    PSOFLG1,SSSODST     DID USER SPECIFY USE DESTINATION     30836500
         BZ    PSNODST             SKIP CONVERT IF NO                   30837000
PSODST   DS    0H                                                       30837500
         LA    R1,PSODEST          POINT TO DESTINATION FIELD           30838000
         SLR   R2,R2               PRESET REG 2 TO                   R4 30838100
         IC    R2,$SVTOSYS           FIRST BYTE OF ROUTE CODE        R4 30838300
         L     R15,$SVDEST         POINT TO VERIFY DESTINATION AND      30838700
         BALR  R14,R15             CONVERT ROUTINE - ENTER IT           30839000
         B     PSDEXIT             FREE THE PSO AND EXIT    +0          30839500
         STH   R2,PSOROUTE         SET ROUTE CODE           +4          30840000
PSNODST  DS    0H                                                       30840500
         TM    PSOFLG1,SSSOSJBI    DID USER SPECIFY USE JOB ID          30841000
         BZ    PSNOSJBI            SKIP CONVERT IF NO                   30841500
         LA    R1,PSOJOBI          POINT TO JOB ID FIELD                30842000
         L     R15,=A(TSCNVJB)     POINT TO CONVERT ROUTINE             30842500
         BALR  R14,R15             CONVERT                              30843000
         LTR   R0,R0               TEST FOR OK                          30843500
         BZ    PSJEXIT             FREE THE PSO AND EXIT                30844000
         STH   R0,PSOJOBNO         SET JOB NUMBER                       30844500
PSNOSJBI DS    0H                                                       30845000
         EJECT                                                          30845500
*********************************************************************** 30846000
*                                                                     * 30846500
*        QUEUE REQUEST TO HASP - POST AND WAIT                        * 30847000
*                                                                     * 30847500
* NOTE - THIS ROUTINE IS USED AS A SUBROUTINE BY EOT, EPILOG, EOJ     * 30848000
*                                                                     * 30848500
*********************************************************************** 30849000
PSOQUEUE DS    0H                                                       30849500
         LA    R4,$SVPSOQ          POINT TO PROCESS SYSOUT QUEUE        30850000
         L     R15,=A(TSQUEUE)     POINT TO QUEUING ROUTINE             30850500
         BALR  R14,R15             ENTER IT                             30851000
         $$POST ELMT=$SVPSO        POST HASP                            30851500
         BNZ   PSHABDQ             IF HASP ABENDED DEQUEUE              30852000
PSWAIT   WAIT  1,ECB=SJBECB        WAIT                                 30852500
         L     R1,$SVHASP          TEST FOR                             30853000
         LTR   R1,R1               HASP UP                              30853500
         BNZ   PSNOHASP            EXIT IF NOT                          30854000
*********************************************************************** 30854500
*                                                                     * 30855000
*        MOVE THE RESPONSE BACK TO HASP                               * 30855500
*                                                                     * 30856000
*********************************************************************** 30856500
         L     R1,PSORETN          PICK UP RETURN CODE                  30857000
         LCR   R5,R1               SET RETURN IN NEGATIVE FORM          30857500
         TM    SJBTFFG,SJBTFFGP    TEST FOR PSO PURGE ON            R41 30857600
         BO    *+10                BR IF YES                        R41 30857700
         MVC   SSSOUFLG(PSOPARML),PSOUFLG MOVE ALL PARAMETERS           30858000
         CH    R1,=Y(SSSORTOK)     CHECK RETURN CODE                    30858500
         BNE   PSBADRET            TRY TO FREE AREA AND EXIT            30859000
         TM    PSOFLG2,SSSOCTRL    IS THIS LAST OF A SERIES             30859500
         BZ    PSXIT               SKIP AREA FREE IF NOT                30860000
PSFREE   XC    SJBPSOP,SJBPSOP     ZERO SJB POINTER TO AREA             30860500
         LR    R1,R6               POINT TO CELL                        30861000
         L     R15,$SVFCELL        POINT TO FREE CELL                   30861500
         BALR  R14,R15             FREE CELL                            30862000
PSXIT    LCR   R15,R5              COMPLIMENT RETURN CODE               30862500
         BR    R8                  RETURN                               30863000
PSDENOQE LA    R15,SSSOIDST        SET INVALID DESTINATION              30863500
         B     PSEPILOG            EXIT                                 30864000
PSJENOQE LA    R15,SSSOINVA        SET INVALID SEARCH ARGUMENTS         30864500
         B     PSEPILOG            EXIT                                 30865000
PSLENOQE LA    R5,SSRTLERR         SET LOGIC ERROR                      30865500
         LCR   R15,R5              TELL EPILOG R15 IS TO BE SET         30866000
         EJECT                                                       R4 30866100
PSEPILOG $EPILOG ,                 EXIT THROUGH EPILOG                  30866500
PSBADRET CLI   SJBPSOP,X'7F'       CHECK FOR X'80' (HASP WANTS PSO)     30867000
         BNH   PSFREE              IF NOT WANTED FREE IT                30867500
         B     PSXIT               EXIT                                 30868000
         EJECT                                                          30868500
*********************************************************************** 30869000
*                                                                     * 30869500
*        HASP DETERMINED NOT UP AFTER SJB ALREADY ON QUEUE            * 30870000
*                                                                     * 30870500
*********************************************************************** 30871000
PSHABDQ  LR    R5,R11              SAVE                                 30871500
         LR    R6,R12              SOME                                 30872000
         LR    R7,R13              REGISTERS                            30872500
         L     R15,=A(TSETLOCK)    SET CMS                              30873000
         BALR  R2,R15              LOCK                                 30873500
         LR    R11,R5              RESTORE                              30874000
         LR    R12,R6              THOSE                                30874500
         LR    R13,R7              REGISTERS                            30875000
         L     R15,=A(TSHABDQ)     POINT TO ABNORMAL DEQ ROUTINE     JN 30875500
         BALR  R14,R15             ENTER IT                             30876000
         L     R15,=A(TSFRELOK)    FREE CMS                             30876500
         BALR  R2,R15              LOCK                                 30877000
         LR    R11,R5              RESTORE                              30877500
         LR    R12,R6              THE                                  30878000
         LR    R13,R7              REGISTERS                            30878500
         LTR   R2,R2               TEST FOR DEQUEUED                    30879000
         BZ    PSWAIT              WAIT, HASP GOT TO IT FIRST           30879500
         B     PSNOHASP            EXIT                                 30880000
*********************************************************************** 30880500
*                                                                     * 30881000
*        TEXT IN JOB ID OR DESTINATION FIELDS INVALID                 * 30881500
*                                                                     * 30882000
*********************************************************************** 30882500
PSDEXIT  LA    R8,PSDENOQE         SET EXIT LOCATION FOR BAD DEST       30883000
         B     *+8                 SKIP NEXT INSTRUCTION                30883500
PSJEXIT  LA    R8,PSJENOQE         SET EXIT LOCATION FOR JOB ID ERROR   30884000
         TM    SJBTFFG,SJBTFFGG    TEST FOR PSO JUST GOTTEN             30884500
         BO    PSFREE              IF SO HASP HAS NOTHING TO DO HERE    30885000
         OI    PSOFLG2,SSSOCTRL    SET LAST OF SERIES                   30885500
         B     PSOQUEUE            ENTER QUEUE ROUTINE AS SUBROUTINE    30886000
*********************************************************************** 30886500
*                                                                     * 30887000
*        CELL NOT IMMEDIATELY AVAILABLE - ASK HASP TO EXPAND          * 30887500
*                                                                     * 30888000
*********************************************************************** 30888500
PSNCELL  ENQ   MF=(E,$SVCENQ)      ENQ                                  30889000
PSNCELLL LA    R4,PSOLNGTH         SET LENGTH AGAIN                     30889500
         L     R15,$SVGCELL        POINT TO GET CELL                    30890000
         BALR  R14,R15             TRY GET CELL AGAIN                   30890500
         B     PSNCELLA            IF NO CELL, BRANCH       +0          30891000
         LR    R6,R1               POINT TO CELL            +4          30891500
         DEQ   MF=(E,$SVCENQ)      DEQ                                  30892000
         B     PSCELLG             ENTER NORMAL PROCESSING              30892500
PSNCELLA ICM   R1,15,$SVHASP       HASP UP                              30893000
         BNZ   PSDEQNH             EXIT IF NOT                          30893500
         LA    R0,SJBECB           POINT TO ECB TO POST                 30894000
         MVI   SJBECB,0            ZERO ECB                             30894500
         L     R15,$SVGCPOL        POINT TO HASP NOTIFY ROUTINE         30895000
         BALR  R14,R15             ENTER IT                             30895500
         CLI   SJBECB+3,0          TEST ECB FOR ZERO                    30896000
         BZ    PSNCELLL            LOOP IF OK                           30896500
         DEQ   MF=(E,$SVCENQ)      DEQ                                  30897000
         B     PSLENOQE            EXIT WITH LOGIC ERROR                30897500
PSDEQNH  DEQ   MF=(E,$SVCENQ)      DEQ                                  30898000
         B     PSNOHASP            EXIT TO RETURN ERROR                 30898500
         DROP  R6,R10,R12,R13                                           30899000
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE - CANCEL/STATUS'          30899500
*********************************************************************** 30900000
*                                                                     * 30900500
*        CANCEL/STATUS - SUBSYSTEM FUNCTIONS SSOBCANC/SSOBSTAT        * 30901000
*                                                                     * 30901500
* FUNCTION                                                            * 30902000
*                                                                     * 30902500
*    RECEIVE CONTROL FROM THE OPERATING SYSTEM CANCEL AND STATUS      * 30903000
*    PROCESSORS FOR THE PURPOSE OF INTERFACING WITH THE HASPXEQ       * 30903500
*    CANCEL/STATUS SERVICE ROUTINE FOR CANCELLING A UNIQUELY          * 30904000
*    IDENTIFIED JOB OR PROVIDE SELECTED STATUS INFORMATION ON         * 30904500
*    JOBS BY UNIQUE IDENTIFICATION, JOB NAME (ALL WITH SAME NAME),    * 30905000
*    OR USER IDENTIFICATION (ALL JOBS WITH NAME MATCHING THE USER     * 30905500
*    ID WITH ONE ADDITIONAL TRAILLING CHARACTER). THE FUNCTIONAL      * 30906000
*    OPERATIONS ARE DESCRIBBED BELOW.                                 * 30906500
*                                                                     * 30907000
*    (1) A $PROLOG MACRO INSTRUCTION IS EXECUTED TO GET CONTROL       * 30907500
*        OF THE USER SJB (REQUESTOR MUST BE ONE OF OUR JOBS).         * 30908000
*                                                                     * 30908500
*    (2) JOB ID IS CONVERTED TO JOB NUMBER AS REQUESTED.              * 30909000
*                                                                     * 30909500
*    (3) THE SJB IS QUEUED TO THE $SVTSCS QUEUE, HASP IS POSTED       * 30910000
*        AND THE USER TASK IS MADE TO WAIT FOR HASP TO RESPOND.       * 30910500
*                                                                     * 30911000
*    (4) THE RESPONSE IS COPIED TO THE USER PARAMETER AREA, THE       * 30911500
*        STATUS AREA (IF GOTTEN BY HASP) IS FREED, AND CONTROL IS     * 30912000
*        RETURNED TO THE USER VIA THE $EPILOG MACRO INSTRUCTION.      * 30912500
*                                                                     * 30913000
*    (5) IF DURING ANY PHASE OF PROCESSING IT IS DETERMINED THAT      * 30913500
*        HASP IS NOT UP, THE ROUTINE UNDOES ITS PROCESSING. IF THE    * 30914000
*        SJB HAS ALREADY BEEN PLACED ON THE QUEUE AND THE OS WAIT     * 30914500
*        HAS NOT BEEN ISSUED, THE CMS LOCK IS OBTAINED AND THE SJB    * 30915000
*        IS REMOVED FROM THE QUEUE (IF STILL ON). THE HASP NOT UP     * 30915500
*        DIAGNOSTIC IS RETURNED TO THE USER.                          * 30916000
*                                                                     * 30916500
*    (6) IF THIS ROUTINE IS PREEMPTED, A RECOVERY ROUTINE IS ENTERED  * 30917000
*        TO REMOVE THE SJB FROM THE $SVTSCS QUEUE EITHER BY WAITING   * 30917500
*        IN PLACE OF THE ORIGINAL TCB/RB OR DIRECT REMOVAL IF HASP    * 30918000
*        ABENDS.                                                      * 30918500
*                                                                     * 30919000
* INPUT REGISTERS                                                     * 30919500
*                                                                     * 30920000
*        R0    = ADDRESS OF SSCVT                                     * 30920500
*        R1    = ADDRESS OF SSOB                                      * 30921000
*        R13   = SAVE AREA                                            * 30921500
*        R14   = RETURN                                               * 30922000
*        R15   = ENTRY BASE                                           * 30922500
*                                                                     * 30923000
* OUTPUT REGISTERS                                                    * 30923500
*                                                                     * 30924000
*        R0-R14= UNCHANGED                                            * 30924500
*        R15   = RETURN CODE                                          * 30925000
*                                                                     * 30925500
         EJECT                                                       R4 30925600
*********************************************************************** 30926000
         EJECT                                                          30926500
*********************************************************************** 30927000
*                                                                     * 30927500
*        ENTRY TO CANCEL/STATUS - PICK UP PARAMETERS                  * 30928000
*                                                                     * 30928500
*********************************************************************** 30929000
HOSSTAT  $PROLOG SSOBSTAT,0,LOCK=REQ  LOCATE AND LOCK USER'S SJB        30929500
TSSTAT   AL    R12,=A(TSCAN-TSSTAT) POINT TO TSCAN                      30930000
         BR    R12                 ENTER COMMON CODE                    30930500
HOSCANC  $PROLOG SSOBCANC,0,LOCK=REQ  LOCATE AND LOCK USER'S SJB        30931000
TSCAN    LR    R8,R1               POINT TO SSOB (SSIB NOT REQUIRED)    30931500
         USING SSOB,R8                                                  30932000
         USING SJBDSECT,R13        BASES ARE                            30932500
         USING SSCSBGN,R10         ESTABLISHED                          30933000
         USING SSVT,R11            BY PROLOG                            30933500
         LA    R5,SSRTNTUP         SET HASP NOT UP                      30934000
         ICM   R1,15,$SVHASP       IS HASP UP                           30934500
         BNZ   TSRELSE             EXIT IF NOT                          30935000
         LA    R5,SSRTLERR         SET ABORT RETURN FOR LOGIC ERROR     30935500
         EJECT                                                          30936000
*********************************************************************** 30936500
*                                                                     * 30937000
*        FILL IN REQUEST PARAMETERS                                   * 30937500
*                                                                     * 30938000
*********************************************************************** 30938500
         MVC   SJBTULEN,SSCSULEN   COPY USER ID LENGTH                  30939000
         MVC   SJBTFUNC,SSOBFUNC   COPY FUNCTION                        30939500
         MVC   SJBTFLGS,SSCSFLGS                                        30940000
         MVC   SJBTJOBN,SSCSJOBN   COPY JOB NAME                        30940500
         MVC   SJBTDIMP,SSCSDIMP   COPY ARRAY SIZE                      30941000
         STH   R5,SJBTRETR         SET DEFAULT RETURN                   30941500
         SLR   R0,R0               ZERO JOB ID                          30942000
         ST    R0,SJBTAREA         ZERO AREA POINTER                    30942500
         STH   R0,SJBTDIMR         ZERO RESPONSE SIZE                   30943000
         CLI   SSCSJOBI,C' '       DID REQUEST INDICATE JOB ID          30943500
         BE    TSNJOBID            IF NOT SKIP CONVERT                  30944000
         LA    R1,SSCSJOBI         POINT TO JOB ID FIELD                30944500
         L     R15,=A(TSCNVJB)     POINT TO CONVERT ROUTINE             30945000
         BALR  R14,R15             CONVERT                              30945500
         LA    R15,SSCSYNTX        SET SYNTAX ERROR RETURN              30946000
         LTR   R0,R0               CHECK FOR ERROR                      30946500
         BZ    TSRELSEA            REJECT REQUEST IF ERROR              30947000
TSNJOBID ST    R0,SJBTJOBI         SET JOB ID IN BINARY FORM            30947500
*********************************************************************** 30948000
*                                                                     * 30948500
*        FUNCTION ORIENTED SETTINGS                                   * 30949000
*                                                                     * 30949500
*********************************************************************** 30950000
         CLC   SSOBFUNC,=Y(SSOBCANC) IS THIS CANCEL                     30950500
         BE    TSCANC              IF YES, NO MORE TO FILL OUT          30951000
         LH    R0,SJBTDIMP         PICK UP AREA SIZE                    30951500
         CH    R0,=Y(SSCSELSZ)     CHECK FOR AT LEAST ONE ELEMENT       30952000
         BL    TSRELSE             ERROR IF NOT                         30952500
*********************************************************************** 30953000
*                                                                     * 30953500
*        QUEUE REQUEST TO HASP                                        * 30954000
*                                                                     * 30954500
*********************************************************************** 30955000
TSCANC   LA    R4,$SVTSCS          POINT TO CANCEL/STATUS QUEUE         30955500
         L     R15,=A(TSQUEUE)     POINT TO QUEUING ROUTINE             30956000
         BALR  R14,R15             ENTER IT                             30956500
         $$POST ELMT=$SVJOB        POST HASP                            30957000
         BZ    TSWAIT              WAIT FOR HASP IF STILL UP            30957500
         LR    R5,R11              SAVE                                 30958000
         LR    R6,R12              SOME                                 30958500
         LR    R7,R13              REGISTERS                            30959000
         L     R15,=A(TSETLOCK)    SET CMS                              30959500
         BALR  R2,R15              LOCK                                 30960000
         LR    R11,R5              RESTORE SSVT BASE                    30960500
         LR    R12,R6              PUT BASE BACK                        30961000
         LR    R13,R7              RESTORE SJB BASE                     30961500
         L     R15,=A(TSHABDQE)    POINT TO ABNORMAL DEQUEUE ROUTINE    30962000
         BALR  R14,R15             ENTER IT                             30962500
         L     R15,=A(TSFRELOK)    FREE CMS                             30963000
         BALR  R2,R15              LOCK                                 30963500
         LR    R11,R5              RESTORE                              30964000
         LR    R12,R6              THE                                  30964500
         LR    R13,R7              REGISTERS                            30965000
         LTR   R2,R2               TEST FOR DEQUEUED                    30965500
         BZ    TSWAIT              WAIT. HASP GOT TO IT FIRST           30966000
         LA    R5,SSRTNTUP         SET HASP NOT UP                      30966500
         B     TSFREEA             FREE AREA IF PRESENT AND EXIT        30967000
         EJECT                                                          30967500
*********************************************************************** 30968000
*                                                                     * 30968500
*        WAIT AND FILL IN RESPONSE                                    * 30969000
*                                                                     * 30969500
*********************************************************************** 30970000
TSWAIT   WAIT  1,ECB=SJBECB        WAIT                                 30970500
         LA    R5,SSRTNTUP         SET HASP NOT UP                      30971000
         ICM   R1,15,$SVHASP       TEST ECB FOR HASP UP                 30971500
         BNZ   TSFREEA             FREE AREA, IF PRESENT AND EXIT       30972000
         LH    R5,SJBTRETR         PICK UP R15 RETURN                   30972500
         CH    R5,=Y(SSRTOK)       CHECK FOR OK RETURN                  30973000
         BNE   TSFREEA             FREE AREA                            30973500
         LH    R6,SJBTRETB         PICK UP SSOBRETN CODE                30974000
         LCR   R5,R6               SET COMPLIMENT FOR RECOMPLIMENT      30974500
         CLI   SJBTFUNC+1,SSOBCANC IS THIS CANCEL                       30975000
         BE    TSCKSVC             IF YES, TEST FOR SVC 34 REQUIRED     30975500
         MVC   SSCSDIMR,SJBTDIMR   SET SIZE OF AREA                     30976000
         CH    R6,=Y(SSCSMALL)     CHECK FOR AREA TOO SMALL             30976500
         BE    TSFREEA             FREE AREA                            30977000
         L     R0,SJBTAREA         POINT TO WORK AREA                   30977500
         LH    R1,SJBTDIMR         PICK UP AMOUNT TO MOVE               30978000
         LTR   R1,R1               CHECK FOR MOVE                       30978500
         BZ    TSFREEA             SKIP MOVE IF ZERO                    30979000
         LA    R2,SSCSARBG         POINT TO START OF ARRAY              30979500
         LR    R3,R1               COPY LENGTH                          30980000
         MVCL  R2,R0               MOVE RESPONSE ARRAY                  30980500
         EJECT                                                          30981000
*********************************************************************** 30981500
*                                                                     * 30982000
*        FREE WORK AREA                                               * 30982500
*                                                                     * 30983000
*********************************************************************** 30983500
TSFREEA  L     R1,SJBTAREA         POINT TO AREA                        30984000
         LTR   R1,R1               CHECK FOR ZERO                       30984500
         BZ    TSRELSE             RELEASE SJB IF NO AREA               30985000
         MVC   0(4,R1),SJBTCCE     PUT CCE POINTER INTO CELL            30985500
         L     R15,$SVFCELL        POINT TO FREE CELL ROUTINE           30986000
         BALR  R14,R15             FREE CELL                            30986500
TSRELSE  LCR   R15,R5              SET RETURN FOR EPILOG                30987000
TSRELSEA $EPILOG ,                 EXIT THROUGH EPILOG                  30987500
TSCKSVC  EQU   TSRELSE             NO ACTION REQUIRED FOR CANCEL        30988000
         DROP  R8                                                       30988500
         DROP  R10                                                      30989000
         DROP  R12                                                      30989500
         EJECT                                                          30990000
*********************************************************************** 30990500
*                                                                     * 30991000
*        SUBROUTINE TO CONVERT EXTERNAL JOB ID TO JOB NUMBER          * 30991500
*                                                                     * 30992000
* REGISTERS                                                           * 30992500
*                                                                     * 30993000
*        R0    = ANSWER OR ZERO                                       * 30993500
*        R1    = INPUT TEXT                                           * 30994000
*        R2    = WORK                                                 * 30994500
*        R3    = WORK                                                 * 30995000
*        R4    = WORK                                                 * 30995500
*        R14   = RETURN                                               * 30996000
*        R15   = ENTRY BASE                                           * 30996500
*                                                                     * 30997000
*********************************************************************** 30997500
TSCNVJB  DS    0H                                                       30998000
         USING *,R15                                                    30998500
         LA    R2,L'SSCSJOBI-1     SET NUMERIC DIGIT LIMIT              30999000
TSCNVJBO SLR   R0,R0               ZERO THE ACCUMULATOR                 30999500
         SLR   R4,R4               ZERO BASE                            31000000
         CLI   0(R1),C'J'          IS THIS 'JOB'                        31000500
         BE    TSCNVJBL            SKIP TO NUMERIC IF YES               31001000
         LH    R4,=H'10000'        SET BASE RANGE FOR 'STC'             31001500
         CLI   0(R1),C'S'          CHECK FOR 'STC'                      31002000
         BE    TSCNVJBL            SKIP TO NUMERIC IF YES               31002500
         AH    R4,=H'10000'        SET BASE RANGE FOR 'TSU'             31003000
         CLI   0(R1),C'T'          CHECK FOR 'TSU'                      31003500
         BNER  R14                 EXIT WITH ERROR                      31004000
TSCNVJBL LA    R1,1(0,R1)          UP 1                                 31004500
         CLI   0(R1),C'0'          CHECK FOR NUMERIC                    31005000
         BNL   TSCNVJBA            IF NOT LOW ASSUME NUMERIC            31005500
         BCT   R2,TSCNVJBL         LOOP TO END                          31006000
         BR    R14                 EXIT WITH ZERO                       31006500
TSCNVJBN CLI   0(R1),C'0'          CHECK FOR BELOW NUMERIC              31007000
         BL    TSCNVCBL            CHECK FOR BLANK OR END               31007500
TSCNVJBA IC    R3,0(0,R1)          PICK UP DIGIT                        31008000
         N     R3,=X'0000000F'     CUT OFF HIGH PART                    31008500
         MH    R0,=H'10'           MULTIPLY BY 10                       31009000
         AR    R0,R3               ADD                                  31009500
         CH    R0,=H'9999'         MAKE SURE NOT ABOVE MAX              31010000
         BH    TSCNVJBO            RESET JOB NUMBER AND RETURN          31010500
TSCNVJCT LA    R1,1(0,R1)          UP TO NEXT DIGIT                     31011000
         BCT   R2,TSCNVJBN         LOOP                                 31011500
         B     TSCNVEND            EXIT WITH VALUE                      31012000
TSCNVCBL CLI   0(R1),C' '          IS IT BLANK                          31012500
         BE    TSCNVJCT            IGNORE IF BLANK                      31013000
TSCNVEND LTR   R0,R0               CHECK FOR ZERO                       31013500
         BZR   R14                 EXIT WITH ZERO                       31014000
         AR    R0,R4               ADD BASE                             31014500
         BR    R14                 RETURN WITH ANSWER                   31015000
         DROP  R15                                                      31015500
         EJECT                                                          31016000
*********************************************************************** 31016500
*                                                                     * 31017000
*        SUBROUTINE TO QUEUE THE SJB TO ALTERNATE HASP WORK QUEUE     * 31017500
*                                                                     * 31018000
* REGISTERS -                                                         * 31018500
*                                                                     * 31019000
*        R0    = WORK (ON RETURN CONTAINS PREVIOUS QUEUE VALUE)       * 31019500
*        R1    = WORK                                                 * 31020000
*        R2    = WORK                                                 * 31020500
*        R3    = WORK                                                 * 31021000
*        R4    = ADDRESS OF QUEUE HEAD                                * 31021500
*        R13   = ADDRESS OF SJB                                       * 31022000
*        R14   = RETURN                                               * 31022500
*        R15   = ENTRY BASE                                           * 31023000
*                                                                     * 31023500
*********************************************************************** 31024000
         USING *,R15                                                    31024500
TSQUEUE  DS    0H                                                       31025000
         SLR   R0,R0               ZERO                                 31025500
         ST    R0,SJBECB           THE ECB                              31026000
         OI    SJBTFFG,SJBTFFGM    SET ECB STATUS MEANGINGFULL          31026500
         LR    R2,R13              POINT TO SJB                         31027000
         LM    R0,R1,0(R4)         PICK UP CURRENT QUEUE HEADER         31027500
TSQUL    LR    R3,R1               COPY COUNTER                         31028000
         ST    R0,SJBTCHN          PUT OLD ELEMENTS BEHIND              31028500
         BCTR  R3,0                REDUCE                               31029000
         CDS   R0,R2,0(R4)         QUEUE SJB                            31029500
         BNZ   TSQUL               LOOP IF NOT QUEUED                   31030000
         LTR   R0,R0               DO WE TELL HASP                      31030500
         BR    R14                 RETURN                               31031000
         DROP  R15                                                      31031500
         EJECT                                                          31032000
*********************************************************************** 31032500
*                                                                     * 31033000
*        SUBROUTINE TO SCAN FOR TSO QUEUED SJB ON USER ABEND          * 31033500
*                                                                     * 31034000
* REGISTERS -                                                         * 31034500
*                                                                     * 31035000
*        R0    = WORK                                                 * 31035500
*        R1    = WORK - ZERO ON SJB NOT FOUND RETURN (CC SET)         * 31036000
*        R4    = ADDRESS OF QUEUE HEAD                                * 31036500
*        R13   = ADDRESS OF SJB                                       * 31037000
*        R14   = RETURN                                               * 31037500
*        R15   = ENTRY BASE                                           * 31038000
*                                                                     * 31038500
* NOTES -                                                             * 31039000
*                                                                     * 31039500
*        THIS ROUTINE IS ENTERED FROM THE END OF TASK ROUTINE         * 31040000
*        WITH CMS LOCK ON.                                            * 31040500
*                                                                     * 31041000
*********************************************************************** 31041500
TSUABQS  DS    0H                                                       31042000
         USING *,R15                                                    31042500
         MVI   $SVTSLOK,X'FF'      TELL HASP TO SET LOCK                31043000
         L     R0,0(0,R4)          PICK UP FIRST SJB                    31043500
TSUABQSL LTR   R1,R0               COPY AND SET CC                      31044000
         BZR   R14                 EXIT IF NOT ON THE QUEUE (CC=0)      31044500
         L     R0,SJBTCHN-SJBDSECT(,R1) POINT TO NEXT SJB               31045000
         CR    R1,R13              IS THIS OUR SJB                      31045500
         BNE   TSUABQSL            LOOP IF NOT                          31046000
         MVI   SJBTFLOW,X'FF'      FAKE HASP HAS SEEN                   31046500
         LTR   R1,R1               SET CC                               31047000
         BR    R14                 EXIT WITH R1 AND CC NON-ZERO.        31047500
         DROP  R15                                                      31048000
         EJECT                                                          31048500
*********************************************************************** 31049000
*                                                                     * 31049500
*        SUBROUTINE TO RETRIEVE TSO QUEUED SJB WHEN HASP ABENDS       * 31050000
*                                                                     * 31050500
* REGISTERS -                                                         * 31051000
*                                                                     * 31051500
*        R0    = WORK                                                 * 31052000
*        R1    = WORK                                                 * 31052500
*        R2    = WORK - ZERO ON RETURN IF SJB NOT DEQUEUED (CC SET)   * 31053000
*        R3    = WORK                                                 * 31053500
*        R4    = QUEUE POINTER                                        * 31054000
*        R13   = ADDRESS OF SJB                                       * 31054500
*        R14   = RETURN                                               * 31055000
*        R15   = ENTRY BASE                                           * 31055500
*                                                                     * 31056000
* NOTES -                                                             * 31056500
*                                                                     * 31057000
*        CMS LOCK IS HELD ON ENTRY. HASP IS EXPECTED TO HOLD CMS      * 31057500
*        LOCK WHEN DEQUEUING AND WHEN RESETTING THE HASP NOT UP       * 31058000
*        INDICATOR.                                                   * 31058500
*                                                                     * 31059000
*********************************************************************** 31059500
TSHABDQ  DS    0H                                                       31060000
         USING *,R15                                                    31060500
         ICM   R2,15,$SVHASP       INSURE HASP NOT UP                   31061000
         BZR   R14                 ERROR EXIT                           31061500
         LM    R2,R3,0(R4)         PICK UP CHAIN INFO                   31062000
TSHABDQX LTR   R2,R2               TEST END                             31062500
         BZR   R14                 ERROR EXIT                           31063000
         CR    R2,R13              IS IT OUR SJB                        31063500
         BNE   TSHABDQN            TRY NEXT                             31064000
         L     R0,SJBTCHN-SJBDSECT(,R2) POINT TO NEXT                   31064500
         LR    R1,R3               COPY SECURITY COUNT                  31065000
         CDS   R2,R0,0(R4)         TRY TO TAKE SJB OFF                  31065500
         BNZ   TSHABDQX            LOOP IF NOT OFF                      31066000
TSHABDQE LTR   R2,R2               SET CC                               31066500
         BR    R14                 EXIT                                 31067000
TSHABDQN LR    R3,R2               COPY CURRENT POINTER                 31067500
         ICM   R2,15,SJBTCHN-SJBDSECT(R2) POINT TO NEXT                 31068000
         BZR   R14                 EXIT IF ERROR                        31068500
         CR    R2,R13              IS THIS OUR SJB                      31069000
         BNE   TSHABDQN            LOOP IF NOT                          31069500
         MVC   SJBTCHN-SJBDSECT(,R3),SJBTCHN-SJBDSECT(R2) DEQUEUE       31070000
         B     TSHABDQE            EXIT                                 31070500
         DROP  R15                                                      31071000
         EJECT                                                          31071500
*********************************************************************** 31072000
*                                                                     * 31072500
*        SUBROUTINE TO SET LOCK                                       * 31073000
*                                                                     * 31073500
* REGISTERS -                                                         * 31074000
*                                                                     * 31074500
*        R2    = RETURN                                               * 31075000
*        R11   = WORK                                                 * 31075500
*        R12   = WORK                                                 * 31076000
*        R13   = WORK                                                 * 31076500
*        R14   = WORK                                                 * 31077000
*        R15   = ENTRY BASE - WORK                                    * 31077500
*                                                                     * 31078000
*********************************************************************** 31078500
TSETLOCK DS    0H                                                       31079000
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(QUEUES,*-*,TSFRC31079500
               ELOK)               ENQ ON TS QUEUES TO HASP             31080000
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=(QUEUES,*-*,TSFRELC31080500
               OK)                 ENQ ON HASP TS QUEUES                31081000
         BR    R2                  RETURN                               31081500
         SPACE 1                                                        31082000
*********************************************************************** 31082500
*                                                                     * 31083000
*        SUBROUTINE TO FREE LOCK                                      * 31083500
*                                                                     * 31084000
* REGISTERS -                                                         * 31084500
*        R2    = RETURN                                               * 31085000
*        R11   = WORK                                                 * 31085500
*        R12   = WORK                                                 * 31086000
*        R13   = WORK                                                 * 31086500
*        R14   = WORK                                                 * 31087000
*        R15   = ENTRY BASE - WORK                                    * 31087500
*                                                                     * 31088000
*********************************************************************** 31088500
TSFRELOK DS    0H                                                       31089000
         SETLOCK RELEASE,TYPE=CMS,RELATED=(QUEUES,*-*,TSETLOCK)         31089500
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(QUEUES,*-*,TSETLOCK)       31090000
         BR    R2                  RETURN                               31090500
         DROP  R13                                                      31091000
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE - VERIFY USER ID'         31091500
*********************************************************************** 31092000
*                                                                     * 31092500
*        SUBSYSTEM FUNCTION SSOBUSER                                  * 31093000
*                                                                     * 31093500
* FUNCTION                                                            * 31094000
*                                                                     * 31094500
*    RECEIVE CONTROL FROM OS ROUTINES TO PROVIDE ACCEPTANCE OR        * 31095000
*    REJECTION OF DESTINATION PARAMETERS SUCH AS DEFAULT DESTINATION  * 31095500
*    FOR TIME SHARING USERS. THE USERVERF SUBROUTINE IS CALLED AND    * 31096000
*    YES OR NO ANSWER IS RETURNED TO THE CALLER.                      * 31096500
*                                                                     * 31097000
* INPUT REGISTERS                                                     * 31097500
*                                                                     * 31098000
*        R0    = ADDRESS OF SSCVT                                     * 31098500
*        R1    = ADDRESS OF SSOB                                      * 31099000
*        R13   = SAVE AREA                                            * 31099500
*        R14   = RETURN                                               * 31100000
*        R15   = ENTRY BASE                                           * 31100500
*                                                                     * 31101000
* OUTPUT REGISTERS                                                    * 31101500
*                                                                     * 31102000
*        R0-R14= UNCHANGED                                            * 31102500
*        R15   = RETURN CODE                                          * 31103000
*                                                                     * 31103500
* WORK AREAS                                                          * 31104000
*                                                                     * 31104500
*        SSVT EXTENSION - CONTAINS HASP ROUTE CODE INFORMATION        * 31105000
*                                                                     * 31105500
*********************************************************************** 31106000
HOSUSER  $ENTRY BASE=R15,ENTRY=NO  PROVIDE ENTRY FOR ROUTINE            31106500
USER     EQU   HOSUSER                                                  31107000
         USING USAVE,R13                                                31107500
         STM   R14,R12,USAVER      SAVE CALLER'S REGISTERS              31108000
         LR    R12,R15             ESTABLISH BASE                       31108500
         USING USER,R12                                                 31109000
         DROP  R15                                                      31109500
         LR    R8,R0               POINT TO SSCVT                       31110000
         USING SSCT,R8                                                  31110500
         ICM   R11,15,SSCTSSVT     POINT TO SSVT                        31111000
         BZ    HOSERROR            EXIT WITH ERROR                      31111500
         LR    R10,R1              POINT TO SSOB                        31112000
         USING SSOB,R10                                                 31112500
         L     R1,SSOBINDV         POINT TO FUNCTION AREA               31113000
         LA    R4,SSUSRTOK         GET OK RETURN CODE                   31113500
         LA    R1,SSUSUSER-SSUSBGN(0,R1) POINT TO DESTINATION           31114000
         SLR   R2,R2               ZERO REGISTER                     R4 31114100
         IC    R2,$SVTOSYS         SET DEFAULT FOR BYTE 1            R4 31114300
         BAL   R14,USERVERF        ENTER VERIFICATION                   31114700
         LA    R4,SSUSNOUS         SET INVALID RETURN  (R14)+0          31115000
         ST    R4,SSOBRETN         SET RETURN          (R14)+4          31115500
         LM    R14,R12,USAVER      PICK UP REGISTERS                    31116000
         LA    R15,SSRTOK          SET OK COMPLETION                    31116500
         BR    R14                 RETURN                               31117000
HOSERROR LM    R14,R12,USAVER      PICK UP REGISTERS                 R4 31117100
         LA    R15,SSRTNTUP        SIGNAL HASP NOT UP                R4 31117200
         BR    R14                 RETURN                            R4 31117300
         DROP  R8                                                       31117500
         DROP  R10                                                      31118000
         DROP  R12                                                      31118500
         EJECT                                                          31119000
*********************************************************************** 31119500
*                                                                     * 31120000
*        SUBROUTINE TO CONVERT 'RXXX    '                             * 31120200
*        'UXXX    ','LOCAL   ','XXXXXXXX' (USER SPECIFIED) TO         * 31121000
*        BINARY ROUTE CODE AND PROVIDE VALIDITY CHECK. 'LOCAL   '     * 31121400
*        RESULTS IN 'XX00' ROUTE CODE (XX = SUPPLIED BY CALLER).      * 31121500
*        BLANK AND BINARY ZEROS RESULT IN X'0000' ROUTE CODE.         * 31122000
*                                                                     * 31122500
* REGISTERS -                                                         * 31123000
*                                                                     * 31123500
*        R0    = WORK                                                 * 31124000
*        R1    = INPUT - ADDRESS OF 8 BYTE DESTINATION                * 31124500
*                OUTPUT- UNPREDICTABLE                                * 31125000
*        R2    = INPUT - DEFAULT FIRST BYTE OF ROUTE                  * 31125200
*              = OUTPUT- X'XXRR' OR '00UU' ROUTE CODE                 * 31125300
*        R3    = WORK                                                 * 31126000
*        R11   = ADDRESS OF SSVT - SET BY CALLER                      * 31126500
*        R14   = RETURN- 0+(R14) - ERROR RETURN                       * 31127000
*                        4+(R14) - OK RETURN - ( R2 VALID )           * 31127500
*        R15   = BASE  - SET BY CALLER IF ENTRY 'USERDEST'            * 31128000
*                                                                     * 31128500
*********************************************************************** 31129000
USERVERF BALR  R15,0               ESTABLISH BASE FOR SUBROUTINE        31129500
         USING *,R15                                                    31130000
USERDEST DS    0H                                                       31130500
         SLL   R2,32-8             ALIGN DEFAULT HIGH BYTE           R4 31130600
         LA    R15,0(,R15)         PURIFY BASE                       R4 31131100
         OR    R15,R2              COMBINE                           R4 31131200
         LA    R14,0(,R14)         PURIFY ADDRESS                    R4 31131300
         OR    R14,R2              COMBINE IN CASE NOT NATIVE        R4 31131400
         SLR   R2,R2               ZERO                              R4 31131500
         CLC   0(8,R1),=CL8' '     BLANKS                            R4 31131600
         BE    4(0,R14)            RETURN WITH INDIRECT ROUTE CODE   R4 31131700
         CLC   0(8,R1),=XL8'0'     ZERO                              R4 31131800
         BZ    4(0,R14)            RETURN WITH INDIRECT ROUTE CODE   R4 31131900
         CLC   0(3,R1),=C'RMT'     THIS 'RMT'                        R4 31132000
         BNE   USNNA               SKIP IF NOT                       R4 31132100
         LA    R1,2(,R1)           SET TO SCAN                       R4 31132200
         LA    R0,6                'RMTNNNNN'                        R4 31132300
         B     USLR                ENTER COMMON CODE                 R4 31132400
USNNA    CLC   0(2,R1),=C'RM'      THIS 'RM'                         R4 31132500
         BNE   USNNB               SKIP IF NOT                       R4 31132600
         LA    R1,1(,R1)           SET TO SCAN                       R4 31132700
         LA    R0,7                'RMNNNNNN'                        R4 31132800
         B     USLR                ENTER COMMON CODE                 R4 31132900
USNNB    DS    0H                                                    R4 31133000
         LA    R0,8                SET COUNTER                       R4 31133100
USNN     CLI   0(R1),C'R'          THIS REMOTE                       R4 31136100
         BE    USLR                CONVERT REMOTE IF YES             R4 31136200
         CLI   0(R1),C'U'          THIS UNIT                         R4 31136300
         BNE   USS                 SCAN DESTINATION TABLE IF NOT     R4 31136400
         LA    R15,0(,R15)         CLEAR FIRST BYTE                  R4 31136500
USLR     LA    R1,1(,R1)           POINT TO NEXT CHARACTER           R4 31136600
         BCT   R0,USBR             CHECK FOR BLANK                   R4 31136700
         CLM   R15,8,=XL8'0'       UXXX                              R4 31136800
         BZ    USUR                TEST FOR VALID RANGE              R4 31136900
         CH    R2,$SVROUT          WITHIN REMOTE RANGE               R4 31137400
         BH    USS                 TRY DESTINATION TABLE             R4 31137500
         IC    R2,$SVROUTM(R2)     PICK UP REMOTE ROUTING            R4 31137600
USCR     SRDL  R2,8                PUT REMOTE/UNIT INTO R3           R4 31137700
         LR    R2,R15              FIRST BYTE INTO R2                R4 31137800
         SRL   R2,32-8             NEXT TO REMOTE                    R4 31137900
         SLDL  R2,8                COMBINE THE TWO BYTES             R4 31138000
         B     4(0,R14)            RETURN                            R4 31138100
USUR     CH    R2,$SVNOUNT         WITHIN UNIT RANGE                 R4 31138200
         BH    USS                 TRY DESTINATION TABLE             R4 31138300
         LTR   R2,R2               RESULT ZERO                       R4 31138400
         BZR   R14                 ERROR EXIT                        R4 31138500
         B     4(0,R14)            RETURN                            R4 31138600
USBR     CLI   0(R1),C' '          BLANK                             R4 31138700
         BE    USLR                LOOP                              R4 31138800
         CLI   0(R1),C'0'          ZERO OR ABOVE                     R4 31138900
         BL    USS                 TRY DESTINATION TABLE             R4 31139000
         IC    R3,0(,R1)           PICK UP NUMERIC                   R4 31139100
         N     R3,=A(X'F')         PURIFY NUMBER                     R4 31139200
         MH    R2,=H'10'           MULTIPLY BY 10                    R4 31139300
         ALR   R2,R3               COMBINE DIGITS                    R4 31139400
         CH    R2,=H'255'          THIS TOO HIGH                     R4 31139500
         BNH   USLR                LOOP                              R4 31139600
         EJECT                                                       R4 31139700
*********************************************************************** 31139800
*                                                                     * 31139900
*        SCAN REMOTE DESTINATION TABLE FOR MATCH                      * 31140000
*                                                                     * 31140100
*********************************************************************** 31140200
USS      ALR   R1,R0               POINT TO END + 1                  R4 31140300
         SH    R1,=H'8'            THEN FIRST                        R4 31140400
         LM    R2,R3,$SVRDT        POINT TO FIRST AND LAST OF TABLE  R4 31140500
         USING RDTDSECT,R2                                           R4 31140600
USLT     CR    R2,R3               ABOVE END                         R4 31140700
         BHR   R14                 ERROR EXIT                        R4 31140800
         CLC   RDTNAME,0(R1)       SAME NAME                         R4 31140900
         BE    USFT                EXIT IF FOUND                     R4 31141000
         LA    R2,RDTSIZ(,R2)      POINT TO NEXT                     R4 31141100
         B     USLT                LOOP                              R4 31141200
USFT     LR    R0,R14              COPY DEFAULT FIRST BYTE           R4 31141300
         SRL   R0,32-8             SHIFT OUT UNDESIRABLE BITS        R4 31141400
         SLL   R0,8                ALIGN                             R4 31141500
         TM    RDTFLAG,RDTFLAGU+RDTFLAGR UXXX OR RXXX                R4 31141600
         BZ    USNT                SKIP IF NEITHER                   R4 31141700
         IC    R0,RDTRMTNO         SET REMOTE OR UNIT NUMBER         R4 31141800
         TM    RDTFLAG,RDTFLAGU    WAS THIS UNIT                     R4 31141900
         BO    USUT                SET UNIT                          R4 31142000
USNT     TM    RDTFLAG,RDTFLAGN    FIRST BYTE DESIRED                R4 31142200
         BZ    USOT                SKIP NEXT IF NOT                  R4 31142300
         ICM   R0,2,RDTSYS         SET FIRST BYTE                    R4 31142400
USOT     LR    R2,R0               COPY ANSWER                       R4 31142500
         ICM   R2,2,=XL8'0'        ZERO FIRST BYTE                   R4 31142600
         IC    R0,$SVROUTM(R2)     PICK UP REMOTE ROUTING            R4 31143600
         LR    R2,R0               SET ANSWER                        R4 31143700
         B     4(0,R14)            RETURN                            R4 31143800
USUT     ICM   R0,2,=XL8'0'        ZERO FIRST BYTE                   R4 31143900
         LR    R2,R0               SET ANSWER                        R4 31144000
         B     4(0,R14)            RETURN                            R4 31144100
         DROP  R2                                                    R4 31144200
         DROP  R15                                                      31150000
         TITLE 'HASP $$POST SUBROUTINE'                                 31150500
*********************************************************************** 31151000
*                                                                     * 31151500
*        $$POST - SUBROUTINE TO TELL HASP TO $POST A PCE AND          * 31152000
*        POST THE HASP TASK ( CROSS MEMORY ).                         * 31152500
*                                                                     * 31153000
* REGISTERS -                                                         * 31153500
*        R0    = MASK TO AND WITH $SVECF FIELD IF R1 = 0 - ALTERED    * 31154000
*        R1    = ADDRESS OF $$POST ELEMENT - ALTERED                  * 31154500
*        R2    = RETURN                                               * 31155000
*        R11   = ADDRESS OF SSVT - SET BY CALLER                      * 31155500
*        R14   = WORK, UNPREDICTABLE ON EXIT                          * 31155600
*        R15   = BASE - SET BY CALLER - ALTERED                       * 31156500
*                                                                     * 31157000
* NOTES -                                                             * 31157500
*                                                                     * 31158000
*        CALLER MUST QUEUE WORK REQUEST FOR PCE BEFORE $$POSTING.     * 31158500
*                                                                     * 31159000
*        THIS ROUTINE EXPECTS THAT THE HASP DISPATCHER WILL           * 31159500
*        TEST $SVPOSTW TO DETERMINE IF ANY PCE'S ARE TO BE            * 31160000
*        $POSTED ( RESETTING THE FLAG ). IF $POSTS ARE REQUIRED,      * 31160500
*        EACH PCE IS $POSTED AS REQUIRED. THE $SVECF FIELD FLAGS      * 31161000
*        ARE SET ON AT TESTING, BUT SPECIFIC PCE REQUESTS             * 31161500
*        MUST BE RESET BY THE $POSTED PROCESSOR BEFORE FINAL          * 31162000
*        TESTS FOR WORK ARE MADE.                                     * 31162500
*                                                                     * 31163000
*********************************************************************** 31163500
$$POST   DS    0H                                                       31164000
         USING *,R15                                                    31164500
         LTR   R1,R1               IS R1 ZERO                           31165000
         BNZ   SNPECF              IF NOT DO PCE POST                   31165500
         L     R1,$SVECF           PICK UP OLD ECF                      31166000
SNPECFL  OR    R0,R1               COMBINE REQUESTS                     31166500
         CS    R1,R0,$SVECF        TRY TO POST BIT                      31167000
         BNE   SNPECFL             LOOP IF NO POST                      31167500
         B     SP                  POST HASP MAIN TASK                  31168000
         SPACE 1                                                     R4 31168500
SNPECF   MVI   0(R1),X'FF'         SET ECF AS PENDING                R4 31168600
*                                  SET PENDING AT THIS POINT            31169000
SP       L     R14,$SVHECBA        ADDR OF ECB AND $$POST WORK FLAG  R4 31169500
         MVI   $SVPOSTW(R14),X'FF' SHOW POST REQUIRED                R4 31169600
         L     R0,=X'40000000'     PICK UP POST WORD                    31170000
         L     R1,0(,R14)          GET CONTENTS OF HASP ECB          R4 31170200
SPTEST   LTR   R1,R1               TEST FOR WAITING                     31171000
         BM    SPLONG              LONG POST IF WAITING                 31171500
         CS    R1,R0,0(R14)        TRY QUICK POST                    R4 31171600
         BNZ   SPTEST              TEST AGAIN IF NO GO                  31172500
         B     SNTHASP             SKIP LONG POST                       31173000
SPLONG   CLC   PSAAOLD-PSA,$SVPOSTE+4  ARE WE IN HASP MEMORY...      R4 31174000
         BNE   SPLONGXM            DO CROSS MEMORY POST IF NOT          31174500
         LR    R1,R14              POST MAIN                         R4 31174600
         POST  (1)                  TASK                             R4 31174700
         L     R15,$SVHASP         GET HASP STATUS                      31175500
         LTR   R15,R15             SET CONDITION CODE                   31176000
         BR    R2                  RETURN                               31176500
SPLONGXM POST  MF=(E,$SVPOSTE)     POST HASP                         R4 31177500
SNTHASP  L     R15,$SVHASP         SET HASP CONDITION                   31178000
         LTR   R15,R15             SET CONDITION CODE                   31178500
         BR    R2                  RETURN TO CALLER                     31179000
         SPACE 1                                                     R4 31180200
         DROP  R13,R15                                               R4 31180300
         SPACE 1                                                     R4 31180400
         LTORG                                                       R4 31180500
         TITLE 'HASP VFL INSTRUCTION SIMULATION ROUTINE'             R4 31180600
*********************************************************************** 31180700
*                                                                     * 31180800
*        $VFL  - VFL INSTRUCTION SIMULATION ROUTINE                   * 31180900
*                                                                     * 31181000
*        R0    - LENGTH OF FIELDS, UNPREDICTABLE ON EXIT              * 31181100
*        R1    - ADDRESS OF 'TO' FIELD, UNPREDICTABLE ON EXIT         * 31181200
*        R13   - SAVE AREA ADDRESS                                    * 31181300
*        R14   - RETURN ADDRESS                                       * 31181400
*        R15   - ADDRESS OF 'FROM' FIELD, UNPREDICTABLE ON EXIT       * 31181500
*                                                                     * 31181600
*********************************************************************** 31181700
         SPACE 1                                                     R4 31181800
         CNOP  0,8                                                   R4 31181900
$$VFL    STM   R2,R4,28(R13)       SAVE WORK REGISTERS               R4 31182100
         SPACE 1                                                     R4 31182200
         BALR  R4,0                PROVIDE LOCAL                     R4 31182300
         USING *,R4                 ADDRESSABILITY                   R4 31182400
         SPACE 1                                                     R4 31182500
         LR    R3,R1               RELOAD 'TO' ADDRESS               R4 31183500
         SRL   R1,24               EXTRACT INSTRUCTION INDEX         R4 31183600
         LA    R2,256              PROVIDE CONSTANT FOR LOOP         R4 31183700
         SPACE 1                                                     R4 31183800
VFLCOMPR CLR   R0,R2               IF REMAINING LENGTH LE 256,       R4 31183900
         BNH   VFLLAST              BR FOR FINAL OPERATION           R4 31184000
         EX    R0,VFLINST1(R1)     OPERATE ON NEXT 256-BYTE SEGMENT  R4 31184100
         ALR   R3,R2               POINT TO NEXT                     R4 31184200
         ALR   R15,R2               'TO' AND 'FROM' SEGMENTS         R4 31184300
         SLR   R0,R2               REDUCE REMAINING FIELD LENGTH     R4 31184400
         B     VFLCOMPR             AND BR TO CONTINUE OPERATION     R4 31184500
         SPACE 1                                                     R4 31184600
         CNOP  0,8                                                   R4 31184700
VFLLAST  LR    R2,R0               RELOAD AND DECREMENT              R4 31184800
         BCTR  R2,R0                FOR FINAL EXECUTE                R4 31184900
         EX    R2,VFLINST2(R1)     OPERATE ON REMAINING BYTES        R4 31185000
         LM    R2,R4,28(R13)       RESTORE WORK REGISTERS            R4 31185200
         BR    R14                  AND RETURN                       R4 31185600
         SPACE 1                                                     R4 31185700
         DROP  R4                  KILL LOCAL ADDRESSABILITY         R4 31185900
         SPACE 1                                                     R4 31186100
VFLINST1 NC    0(256,R3),0(R15)    *** EXECUTE ONLY ***              R4 31186200
         OC    0(256,R3),0(R15)    *** EXECUTE ONLY ***              R4 31186300
         XC    0(256,R3),0(R15)    *** EXECUTE ONLY ***              R4 31186400
         SPACE 1                                                     R4 31186500
VFLINST2 NC    0(*-*,R3),0(R15)    *** EXECUTE ONLY ***              R4 31186600
         OC    0(*-*,R3),0(R15)    *** EXECUTE ONLY ***              R4 31186700
         XC    0(*-*,R3),0(R15)    *** EXECUTE ONLY ***              R4 31186800
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE - CELL CONTROL'        R4 31191500
*********************************************************************** 31191600
*                                                                     * 31191700
*        $SVGCELL - SUBROUTINE TO GET A FREE CELL                     * 31191800
*                                                                     * 31191900
* REGISTERS -                                                         * 31192000
*                                                                     * 31192100
*        R0    = ADDRESS OF SJB                                       * 31192200
*        R1    = ADDRESS OF TCB                                       * 31192300
*        R2    = WORK                                                 * 31192400
*        R3    = WORK                                                 * 31192500
*        R4    = LENGTH - ALTERED TO (LENGTH-1)/256                   * 31192600
*        R7    = WORK                                                 * 31192700
*        R11   = SSVT                                                 * 31192800
*        R14   = RETURN - (R14+0=ERROR, R14+4=OK)                     * 31192900
*        R15   = ENTRY BASE                                           * 31193000
*                                                                     * 31193100
*********************************************************************** 31193200
         USING CCEDSECT,R7                                              31193300
TSGCELL  DS    0H                                                       31193400
         USING *,R15                                                    31193500
         BCTR  R4,0                CALCULATE                            31193600
         SRA   R4,8                (B-1)/256= NUM 256 BYTE BLKS -1      31193700
         LA    R7,$SVCELLS-(CCECCE-CCEDSECT) POINT TO CELL 0            31194000
TSGCL    L     R7,CCECCE           POINT TO NEXT CELL CONTROL           31194500
         LTR   R7,R7               END                                  31195000
         BZR   R14                 EXIT WITH NOT FOUND                  31195500
         CLM   R4,1,CCECSIZ        CHECK FOR SIZE OK                    31196000
         BH    TSGCL               GET NEXT CELL IF REQUEST HIGH        31196500
         BLR   R14                 EXIT WITH NOT FOUND IF LOW           31197000
* TEST CELL FOR AVAILABLE                                               31197500
         LM    R2,R3,CCESJB+CCETCB-CCETCB PICK UP ALLOCATION WORDS      31198000
TSGCE    LTR   R2,R2               IS CELL AVAILABLE                    31198500
         BNZ   TSGCL               LOOP IF NOT                          31199000
         CDS   R2,R0,CCESJB        CLAIM                                31199500
         BNZ   TSGCE               LOOP IF NOT CLAIMED                  31200000
* CELL CLAIMED                                                          31200500
         L     R1,CCECLOC-1        POINT TO LOCATION                    31201000
         LA    R1,0(0,R1)          PURIFY                               31201500
         ST    R7,0(0,R1)          SET LOCATION FOR FREEING             31202000
         B     4(0,R14)            RETURN                               31202500
         EJECT                                                          31203000
*********************************************************************** 31203500
*                                                                     * 31204000
*        $SVGCPOL - SUBROUTINE TO TELL HASP MORE CELLS ARE NEEDED     * 31204500
*                                                                     * 31205000
* REGISTERS -                                                         * 31205500
*                                                                     * 31206000
*        R0    = ADDRESS OF USER ECB                                  * 31206500
*        R1    = WORK                                                 * 31207000
*        R2    = WORK                                                 * 31207500
*        R3    = WORK                                                 * 31208000
*        R4    = (LENGTH-1)/256                                       * 31208500
*        R7    = WORK                                                 * 31209000
*        R11   = ADDRESS OF SSVT                                      * 31209500
*        R14   = RETURN                                               * 31210000
*        R15   = ENTRY BASE                                           * 31210500
*                                                                     * 31211000
* NOTES -                                                             * 31211500
*                                                                     * 31212000
*        AN ENQ USING $SVCENQ LIST MUST BE HELD BEFORE ENTRY.         * 31212500
*                                                                     * 31213000
*********************************************************************** 31213500
TSGCPOL  DS    0H                                                       31214000
         USING *,R15                                                    31214500
         LR    R1,R0               POINT TO ECB                         31215000
         MVI   0(R1),0             INSURE ZERO                          31215500
         LR    R1,R11              SAVE SSVT BASE                       31216000
         LR    R2,R12              SAVE USER BASE                       31216500
         LR    R3,R13              SAVE SJB OR SAVE AREA BASE           31217000
         LR    R7,R14              SAVE RETURN                          31217500
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=($SVCPOST,*-*,*-C31218000
               *)                                                       31218500
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=($SVCPOST,*-*,*-*) 31219000
         LR    R11,R1              PUT SSVT BASE BACK                   31219500
         L     R1,PSAAOLD-PSA      PICK UP ASCB ADDRESS                 31220000
         ST    R4,$SVCTREQ         SET CELL TYPE                        31220500
         STM   R0,R1,$SVCPOST      SET ECB AND ASCB ADDRESSES           31221000
         LR    R1,R11              RESAVE SSVT BASE                     31221500
         SETLOCK RELEASE,TYPE=CMS,RELATED=($SVCPOST,*-*,*-*)            31222000
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=($SVCPOST,*-*,*-*)          31222500
         LR    R11,R1              RESTORE                              31223000
         LR    R12,R2              SAVED                                31223500
         LR    R13,R3              REGISTERS                            31224000
         LR    R3,R0               COPY ECB POINTER                     31224500
         $$POST ELMT=$SVASYNC      TELL HASP                            31225000
         LTR   R15,R15             IS HASP STILL UP                     31225500
         BALR  R15,0               REESTABLISH BASE                     31226000
         USING *,R15                                                    31226500
         BNZ   TSGCPOLA            SKIP WAIT IF NOT                     31227000
         WAIT  ECB=(R3)            WAIT FOR HASP                        31227500
TSGCPOLA LR    R14,R7              RESTORE RETURN                       31228000
         BR    R14                 EXIT                                 31228500
         EJECT                                                          31229000
*********************************************************************** 31229500
*                                                                     * 31230000
*        $SVFCELL - SUBROUTINE TO FREE A CELL BY ADDRESS              * 31230500
*                                                                     * 31231000
* REGISTERS -                                                         * 31231500
*                                                                     * 31232000
*        R0    = WORK                                                 * 31232500
*        R1    = ADDRESS OF CELL STORAGE                              * 31233000
*        R2    = WORK                                                 * 31233500
*        R3    = WORK                                                 * 31234000
*        R7    = WORK                                                 * 31234500
*        R11   = SSVT                                                 * 31235000
*        R14   = RETURN                                               * 31235500
*        R15   = ENTRY BASE                                           * 31236000
*                                                                     * 31236500
*********************************************************************** 31237000
TSFCELL  DS    0H                                                       31237500
         USING *,R15                                                    31238000
         L     R7,0(0,R1)          POINT TO CELL CONTROL                31238500
         SLR   R0,R0               ZERO FOR SJB                         31239000
         ST    R0,CCESJB           FREE THE CELL                        31239500
         CLI   CCECSIZ,(512-1)/256 CHECK FOR LARGE CELL                 31240000
         BNHR  R14                 EXIT                                 31240500
         MVI   $SVVARF,X'FF'       TELL HASP TO FREE ASAP               31241000
         BR    R14                 RETURN                               31241500
* HASP WILL FREE ON NEXT ASYNC FUNCTION                                 31242000
         EJECT                                                          31242500
*********************************************************************** 31243000
*                                                                     * 31243500
*        $SVFCELA - SUBROUTINE TO FREE STORAGE BY SJB/TCB ADDRESS     * 31244000
*                                                                     * 31244500
* REGISTERS -                                                         * 31245000
*                                                                     * 31245500
*        R0    = ADDRESS OF SJB                                       * 31246000
*        R1    = ADDRESS OF TCB OR ZERO                               * 31246500
*        R2    = WORK                                                 * 31247000
*        R3    = WORK                                                 * 31247500
*        R7    = WORK                                                 * 31248000
*        R11   = ADDRESS OF SSVT                                      * 31248500
*        R14   = RETURN                                               * 31249000
*        R15   = ENTRY BASE (HIGH BYTE ZERO ON ENTRY)                 * 31249500
*                                                                     * 31250000
*********************************************************************** 31250500
TSFCELA  DS    0H                                                       31251000
         USING *,R15                                                    31251500
         LTR   R1,R1               TEST FOR TCB GIVEN                   31252000
         BZ    *+8                 SKIP NSI IF NOT                      31252500
         ICM   R15,8,=X'80'        TURN ON TCB REQUIRED FLAG            31253000
         SLR   R2,R2               SET UNALLOCATED INDICATOR            31253500
         LA    R7,$SVCELLS-(CCECCE-CCEDSECT) POINT TO HEADER            31254000
TSFCELAL L     R7,CCECCE           POINT TO NEXT CCE                    31254500
         LTR   R7,R7               TEST FOR END                         31255000
         BZR   R14                 EXIT IF END                          31255500
         C     R0,CCESJB           DOES SJB MATCH                       31256000
         BNE   TSFCELAL            LOOP IF NOT                          31256500
         LTR   R15,R15             TEST FOR TCB MATCH REQUIRED          31257000
         BP    TSFCELLN            FREE CELL NOW IF NOT                 31257500
         C     R1,CCETCB           TEST FOR TCB MATCH                   31258000
         BNE   TSFCELAL            LOOP IF NOT                          31258500
TSFCELLN ST    R2,CCESJB           UNALLOCATE CELL                      31259000
         CLI   CCECSIZ,(512-1)/256 CHECK FOR LARGE CELL                 31259500
         BNH   TSFCELAL            LOOP IF NOT                          31260000
         MVI   $SVVARF,X'FF'       TELL HASP TO FREE ASAP               31260500
         B     TSFCELAL            LOOP                                 31261000
         EJECT                                                          31261500
*********************************************************************** 31262000
*                                                                     * 31262500
*        $SVGCMNS - SUBROUTINE TO GET CELLS AND CELL ELEMENTS         * 31263000
*                                                                     * 31263500
* REGISTERS -                                                         * 31264000
*                                                                     * 31264500
*        R0    = CLAIM CODE - WORK                                    * 31265000
*        R1    = WORK - ON EXIT CONTAINS ADDRESS OF STORAGE OR ZERO   * 31265500
*        R2    = WORK                                                 * 31266000
*        R3    = WORK                                                 * 31266500
*        R4    = (B-1)/256 = NUMBER OF 256 BYTE BLOCKS REQUIRED       * 31267000
*        R7    = WORK - ON EXIT CONTAINS ADDRESS OF CCE OR ZERO       * 31267500
*        R11   = ADDRESS OF SSVT                                      * 31268000
*        R14   = RETURN                                               * 31268500
*        R15   = ENTRY BASE                                           * 31269000
*                                                                     * 31269500
* NOTES -                                                             * 31270000
*                                                                     * 31270500
*        THIS ROUTINE IS ENTERED IN KEY 1 BY 'SAFE TASKS' WHEN A      * 31271000
*        CELL MUST BE GOTTEN WITHOUT WAITING FOR HASP.                * 31271500
*                                                                     * 31272000
*********************************************************************** 31272500
TSGCMNS  DS    0H                                                       31273000
         USING *,R15                                                    31273500
         L     R2,=X'FF000000'     PICK UP FREE STORAGE INDICATION      31274000
         LA    R7,$SVCELLS-(CCECCE-CCEDSECT) POINT TO CELL HEAD         31274500
TSGCMNSL LR    R1,R7               SAVE PREVIOUS ELEMENT                31275000
         L     R7,CCECCE           POINT TO NEXT CCE                    31275500
         LTR   R7,R7               CHECK FOR END                        31276000
         BZ    TSGCMNSB            EXIT IF END                          31276500
         CLM   R4,1,CCECSIZ        TEST CELL SIZE                       31277000
         BH    TSGCMNSL            LOOP                                 31277500
         BL    TSGCMNSB            BUILD CCE IF BEYOND                  31278000
         C     R2,CCESJB           TEST FOR FREE                        31278500
         BNE   TSGCMNSL            LOOP                                 31279000
         L     R3,CCETCB           PICK UP SECOND WORD                  31279500
         CDS   R2,R0,CCESJB        CLAIM                                31280000
         BNE   TSGCMNS             LOOP IF NOT CLAIMED                  31280500
TSGCMNSG LA    R0,1(0,R4)          (B-1)/256+1 = NUMBER 256 BYTE BLOCKS 31281000
         SLA   R0,8                STORAGE SIZE                         31281500
         LR    R3,R14              COPY RETURN REGISTER                 31282000
         GETMAIN RC,LV=(0),SP=231  GET STORAGE                          31282500
         LTR   R15,R15             SET CONDITION CODES                  31283000
         L     R15,$SVGCMNS        ESTABLISH BASE                       31283500
         LR    R14,R3              ESTABLISH RETURN                     31284000
         BNZ   TSGCMNSE            ERROR                                31284500
         ST    R7,0(0,R1)          SET CCE LOCATION                     31285000
         STCM  R1,7,CCECLOC        SET LOCATION                         31285500
         BR    R14                 EXIT WITH R7 POINTING TO ELEMENT     31286000
TSGCMNSE ST    R2,CCESJB           FREE THE CCE                         31286500
TSGCMNSX SLR   R7,R7               ZERO R7                              31287000
         SLR   R1,R1               ZERO R1                              31287500
         BR    R14                 EXIT                                 31288000
TSGCMNSB LR    R7,R1               BACK UP TO LAST CCE                  31288500
TSGCMNSQ L     R1,$SVCELLF         POINT TO FIRST FREE QUEUE CCE        31289000
TSGCMNST LTR   R1,R1               TEST FOR PRESENT                     31289500
         BZ    TSGCMNSC            EXIT IF MORE ARE REQUIRED            31290000
         L     R3,CCECCE-CCEDSECT(,R1) PICK UP CHAIN FIELD              31290500
         CS    R1,R3,$SVCELLF      REMOVE                               31291000
         BNZ   TSGCMNST            LOOP IF NOT REMOVED                  31291500
         STC   R4,CCECSIZ-CCEDSECT(,R1) SET SIZE INDICATION             31292000
         ST    R0,CCESJB-CCEDSECT(,R1) SET ID                           31292500
TSGCMNSR L     R3,CCECCE           POINT TO NEXT                        31293000
         ST    R3,CCECCE-CCEDSECT(,R1) SET INTO CURRENT                 31293500
         CS    R3,R1,CCECCE        CHAIN CCE                            31294000
         BNZ   TSGCMNSR            RETRY                                31294500
         LR    R7,R1               POINT TO CURRENT                     31295000
         B     TSGCMNSG            GET MAIN FOR ELEMENT                 31295500
TSGCMNSC LR    R3,R14              SAVE RETURN                          31296000
         LR    R2,R0               SAVE OWNER ID                        31296500
         GETMAIN RC,LV=CCEL*64,SP=231 GET ROOM FOR 64 CCES              31297000
         LR    R0,R2               RESTORE OWNERSHIP ID                 31297500
         LR    R14,R3              RESTORE RETURN                       31298000
         LTR   R15,R15             SET CONDITION CODES                  31298500
         L     R15,$SVGCMNS        PICK UP BASE                         31299000
         BNZ   TSGCMNSX            ERROR EXIT                           31299500
         LA    R3,64               SET NUMBER OF CCES IN BLOCK          31300000
TSGCMNSF L     R2,$SVCELLF         POINT TO OLD FREE QUEUE              31300500
         ST    R2,CCECCE-CCEDSECT(,R1) PUT OLD BEHIND                   31301000
         CS    R2,R1,$SVCELLF      PUT NEW ON FRONT                     31301500
         BNZ   *-8                 LOOP IF NO GO                        31302000
         LA    R1,CCEL(,R1)        UP 1 CCE                             31302500
         BCT   R3,TSGCMNSF         LOOP FOR ALL CCES                    31303000
         L     R2,=X'FF000000'     RESTORE FREE ID                      31303500
         B     TSGCMNSQ            LOOP                                 31304000
         DROP  R7                                                       31304500
         DROP  R15                                                      31305000
         LTORG                                                          31305500
         TITLE '$PROLOG -- SUBSYSTEM FUNCTION ENTRY ROUTINE'            31306000
RSOX     EQU   R10                 DEFINE SSOB EXT BASE REG.            31306500
RSVT     EQU   R11                 DEFINE SSVT BASE REGISTER.           31307000
RSIB     EQU   R8                  DEFINE SSIB BASE REGISTER.           31307500
RSJB     EQU   R13                 DEFINE SJB BASE REGISTER.            31308000
$PROLOG  DS    0H                                                       31308500
*                                                                       31309000
*              SAVE REGISTERS AND SET ADDRESSABILITY                    31309500
*                                                                       31310000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      31310500
         BALR  R12,0               ESTABLISH BASE REGISTER.             31311000
SSPLBASE DS    0H                                                       31311500
         USING *,R12               SET LOCAL ADDRESSABILITY.            31312000
*                                                                       31312500
*              SAVE ENTRY KEY AND SET KEY ZERO                          31313000
*                                                                       31313500
         MODESET EXTKEY=ZERO,SAVEKEY=16(,R13),WORKREG=2  SET KEY.       31314000
*                                                                       31314500
*              SET UP REGISTERS ---                                     31315000
*              RSIB (R8)  POINTS TO SSIB                                31315500
*              RSOX (R10) POINTS TO SSOB EXTENSION                      31316000
*              RSVT (R11) POINTS TO SSVT                                31316500
*                                                                       31317000
         USING SSOBEGIN,R1         SET MAIN SSOB ADDRESSABILITY.        31317500
         L     RSIB,SSOBSSIB       POINT R8 TO SSIB.                    31318000
         USING SSIBEGIN,RSIB       SET ADDRESSABILITY FOR SSIB.         31318500
         L     RSOX,SSOBINDV       POINT R10 TO SSOB EXTENSION.         31319000
         LR    RSVT,R0             LET SSCVT BE ADDRESSED.              31319500
         L     RSVT,SSCTSSVT-SSCT(,RSVT)  POINT R11 TO SSVT.            31320000
         USING SSOBGN,RSOX         SET SSOB EXTENSION ADDRESSAB.        31320500
*                                                                       31321000
*              IF SJB LOCK NOT WANTED, SKIP LOCK LOGIC                  31321500
*                                                                       31322000
         TM    0(R15),X'80'        IF NO LOCK WANTED,                   31322500
         BZ    SSPLRET             GO ENTER SUBSYSTEM FUNCTION.         31323000
         CLI   1(R15),SSOBEOT      END-OF-TASK...                   R41 31323100
         BNE   SSPLNEOT            BR IF NO (OK)                    R41 31323200
         L     R6,PSATOLD-PSA      POINT TO CURRENT TCB             R41 31323300
         USING TCB,R6              PROVIDE TCB ADDRESSABILITY       R41 31323400
         L     R6,TCBJSCB          POINT TO JSCB                    R41 31323500
         USING JSCB,R6             PROVIDE JSCB ADDRESSABILITY      R41 31323600
         L     R6,JSCBACT          POINT TO ACTIVE JSCB             R41 31323700
         L     R6,JSCBSSIB         POINT TO SSIB                    R41 31323800
         ICM   R6,15,SSIBSUSE-SSIBEGIN(R6)  DOES SJB EXIST...       R41 31323900
         BZ    SSPLRET1            BR IF NO                         R41 31324000
         USING SJBDSECT,R6         PROVIDE SJB ADDRESSABILITY       R41 31324100
         CLI   SJBXQFN1+1,SSOBJBSL JOB IN JOB SELECT...             R41 31324200
         BE    SSPLRET1            BR IF YES                        R41 31324300
         TM    SJBFLG1,SJB1XBMC    XBM CONTINUATION...              R41 31324400
         BZ    SSPSJBCK            BR IF NO (OK)                    R41 31324500
         SPACE 1                                                    R41 31324600
SSPLRET1 MODESET KEYADDR=16(,R13),WORKREG=2 SET CALLER'S KEY        R41 31324700
         RETURN (14,12),RC=0       RETURN TO CALLER                 R41 31324800
*                                                                       31324900
*              POINT TO SJB FROM EITHER CURRENT SSIB OR,                31325000
*              IF USER REQUIRES, FROM JSCB'S SSIB.                      31325100
*                                                                       31325200
SSPLNEOT DS    0H                                                   R41 31325300
         L     R6,SSIBSUSE         GET SJB POINTER FROM SSIB.           31325500
         LTR   R6,R6               IF NON-ZERO POINTER,                 31326000
         BNZ   SSPSJBCK            GO CHECK IT.                         31326500
         TM    0(R15),X'60'        IF LOCK NOT =SDB OR =REQ,            31327000
         BZ    SSPNSDB             BRANCH.                              31327500
         L     R6,PSATOLD-PSA      POINT TO CURRENT TCB.                31328000
         USING TCB,R6              GET ADDRESSABILITY.                  31328500
         L     R6,TCBJSCB          POINT TO JSCB FROM TCB.              31329000
         USING JSCB,R6             GET ADDRESSABILITY.                  31329500
         L     R6,JSCBACT          POINT TO ACTIVE JSCB             R41 31329600
         L     R6,JSCBSSIB         POINT TO SSIB FROM JSCB.             31330000
         DROP  RSIB                DROP OLD SSIB BASE.                  31330500
         USING SSIBEGIN,R6         GET ADDRESSABILITY.                  31331000
         L     R6,SSIBSUSE         POINT TO SJB FROM SSIB.              31331500
         USING SJBDSECT,R6         SET SJB ADDRESSABILITY.              31332000
         USING SSIBEGIN,RSIB       RESTORE SSIB ADDRESSABILITY.         31332500
SSPSJBCK DS    0H                                                       31333000
         CLC   SJBSSNM,$SVSSNM     DONT LOCK IF THIS SJB       @OZ15844 31333100
         BNE   SSPNSDB              DOES NOT BELONG TO US      @OZ15844 31333200
         CLC   SJBID,=CL4'SJB'     IF SJB ID IS OKAY,                   31333500
         BE    SSPACQL             GO GET THE LOCK.                     31334000
*                                                                       31334500
*              IF SJB REQUIRED BUT NOT FOUND, ERROR                     31335000
*                                                                       31335500
SSPNSDB  TM    0(R15),X'40'        IS LOCK=REQ...                       31336000
         BZ    SSPLRET             IF NOT, ENTER SUBSYS FUNCTION.       31336500
         MODESET KEYADDR=16(,R13),WORKREG=2  ELSE SET CALLER KEY        31337000
         RETURN (14,12),RC=SSRTNSUP  AND GIVE CODE TO CALLER.           31337500
         DROP  R1                  DROP SSOB BASE.                      31338000
         EJECT                                                          31338500
*                                                                       31339000
*        FORMAT OF LOCK HEADER (SJBLOCKH) ---                           31339500
*              +0 - TCB UNDER WHICH SJB IS LOCKED.  VALID ONLY          31340000
*                   IF +4 IS NONZERO.                                   31340500
*              +4 - ZERO MEANS SJB IS UNLOCKED.                         31341000
*                 - MINUS MEANS SJB LOCKED, NO WAITERS.                 31341500
*                 - PLUS - POINTS TO MOST-RECENT LOCK ELEMENT.          31342000
*                                                                       31342500
*        FORMAT OF LOCK ELEMENT ---                                     31343000
*              +0 - EVENT CONTROL BLOCK                                 31343500
*              +4 - ZERO IS INVALID                                     31344000
*                 - MINUS MEANS NO MORE WAITERS (ELEMENTS).             31344500
*                 - PLUS - POINTS TO NEXT WAITER.                       31345000
*              +8 - ADDRESS OF WAITING CALLER'S TCB                     31345500
*                                                                       31346000
SSPACQL  DS    0H                                                       31346500
*                                                                       31347000
*              TRY GETTING LOCK BEFORE GETTING LOCK ELEMENT             31347500
*                                                                       31348000
         SLR   R0,R0               ZERO OUT                             31348500
         LR    R1,R0               R0 AND R1.                           31349000
         L     R2,PSATOLD-PSA      POINT R2 TO CURRENT TCB              31349500
         LNR   R3,R2               AND MAKE R3 MINUS.                   31350000
         CDS   R0,R2,SJBLOCKH      IF SJB IS UNLOCKED,                  31350500
         BE    SSPLK3              GRAB LOCK AND GO TO SERVICE.         31351000
*                                                                       31351500
*              SJB IS ALREADY LOCKED.  SEE IF PURGE REQUIRED.           31352000
*                                                                       31352500
         LR    R3,R1               SET LOCK CHAINWORD IN R3.            31353000
         LR    R1,R0               SET R1=OWNING TCB.                   31353500
         USING TCB,R1              SET TCB ADDRESSABILITY.              31354000
         CLR   R1,R2               IF LOCK HOLDER IS CURRENT TCB,       31354500
         BE    SSPLK10             PURGE LOCK HOLDER.                   31355000
         LRA   R1,0(,R1)           IS ADDRESS VALID...              R41 31355100
         BC    7,SSPLK10           BR IF NO TO PURGE LOCK           R41 31355200
         LR    R1,R0               REFRESH TCB POINTER              R41 31355300
         CLC   TCBTCBID,=C'TCB '   IS THIS A TCB...                 R41 31355400
         BNE   SSPLK10             BR IF NO TO PURGE LOCK           R41 31355500
         TM    TCBFLGS5,TCBFC+TCBABWF  UNLESS HE'S DYING,           R41 31355600
         BZ    SSPLK20             CONTINUE.                            31356000
         DROP  R1                  DROP TCB ADDRESSABILITY.             31356500
*                                                                       31357000
*              PURGE REQUIRED.  CALL SUBROUTINE TO PURGE.               31357500
*                                                                       31358000
SSPLK10  DS    0H                                                       31358500
         LR    R2,R0               SET LOCK OWNER'S TCB IN R2.          31359000
         BAL   R4,$TESTLLK         GO PURGE THE LOCK HOLDER.            31359500
         BC    8+4,SSPACQL         UNLESS NEW HOLDER, TRY AGAIN.        31360000
*                                                                       31360500
*              $TESTLLK FOUND AND POSTED A GOOD WAITER.                 31361000
*              THEREFORE WE MUST GET A LOCK ELEMENT.                    31361500
*                                                                       31362000
SSPLK20  DS    0H                                                       31362500
         $GETMAIN RU,SP=241,LV=16,KEY=0  GET LOCK ELEMENT.              31363000
         LR    R5,R1               POINT R5 TO NEW ELEMENT.             31363500
         SPACE 2                                               @OZ19265 31363550
         CLI   SJBXQFN1+1,SSOBTERM IF NOT IN TERMINATION       @OZ19265 31363600
         BNE   SSPLK21             ...CONTINUE                 @OZ19265 31363650
         LA    R8,X'45'            ELSE SET ABORT INDICATOR    @OZ19265 31363700
         B     SSPLK2              AND ESCAPE                  @OZ19265 31363750
         SPACE 2                                               @OZ19265 31363800
SSPLK21  DS    0H                                              @OZ19265 31363850
*                                                                       31364000
*              NOW WE HAVE AN ELEMENT.  TRY AGAIN FOR LOCK.             31364500
*                                                                       31365000
         SLR   R0,R0               ZERO REGISTER 0.                     31365500
         ST    R0,0(,R5)           ZERO OUT ECB.                        31366000
SSPLK1   LR    R1,R0               ZERO REGISTER 1.                     31366500
         L     R2,PSATOLD-PSA      POINT R2 TO CURRENT TCB.             31367000
         LNR   R3,R2               MAKE R3 MINUS.                       31367500
         CDS   R0,R2,SJBLOCKH      IF SJB IS NOW UNLOCKED,              31368000
         LA    R8,0                SET GOOD POST CODE          @OZ19265 31368250
         BE    SSPLK2              GET LOCK AND FREE ELEMENT.           31368500
         STM   R1,R2,4(R5)         SET CHAIN, TCB IN ELEMENT.           31369000
         LR    R2,R0               SET UP CDS SO HDR+0 IS UNCHGD,       31369500
         LR    R3,R5               HDR+4 POINTS TO NEW ELEMENT.         31370000
         CDS   R0,R2,SJBLOCKH      TRY TO GET ON WAITING CHAIN.         31370500
$PLWAIT1 DS    0H                  SYMBOL USED BY $TESTLLK.             31371000
         LA    R0,0                ZERO R0 BUT DON'T TOUCH CC.          31371500
         BNE   SSPLK1              IF CDS FAILED, REPEAT.               31372000
*                                                                       31372500
*              WE'RE NOW ON WAITING CHAIN.  ISSUE WAIT.                 31373000
*                                                                       31373500
         WAIT  1,ECB=(R5)          WAIT FOR SJB LOCK.                   31374000
$PLWAIT2 DS    0H                  SYMBOL USED BY $TESTLLK.             31374500
         L     R8,0(,R5)           GET POST CODE               @OZ19265 31374660
         LA    R8,0(,R8)           ZERO HIGH ORDER BYTE        @OZ19265 31374820
*                                                                       31375000
*              AFTER WAIT, FREE THE LOCKING ELEMENT.                    31375500
*                                                                       31376000
SSPLK2   DS    0H                                                       31376500
         $FREMAIN RU,A=(R5),SP=241,LV=16,KEY=0  FREE ELEMENT.           31377000
         LTR   R8,R8               IF POSTED BY TERMINATION    @OZ19265 31377160
         BNZ   SSPLRET1            ...WAVE GOODBYE             @OZ19265 31377320
SSPLK3   DS    0H                                                       31377500
*                                                                       31378000
*              WE HAVE SJB LOCK. ABORT INTERRUPTED FUNCTIONS            31378500
*                                                                       31379000
         SLR   R15,R15             ZERO USER BASE                       31379500
         CH    R15,SJBXQFN1        DID WE INTERRUPT A FUNCTION          31380000
         BZ    SSPLNFUN            SKIP ABORT ROUTINES IF NO            31380500
         CLC   SJBXQFN1,=Y(SSOBRTRN) IS IT TOO BIG                      31381000
         BH    SSPLNFUN            SKIP ABORT ROUTINES IF YES           31381500
         LR    R8,R6               COPY SJB POINTER                     31382000
         LH    R15,SJBXQFN1        PICK UP FUNCTION                     31382500
         ALR   R15,R15             DOUBLE                               31383000
         L     R12,SSPLEOTB        POINT TO ABORT ROUTINE BASE          31383500
         LH    R15,HETTAB-HOSEOTB(R15,R12) PICK UP ENTRY                31384000
         BAL   R14,0(R15,R12)      ENTER ABORT ROUTINE                  31384500
         USING *,R14                                                    31385000
         L     R12,=A(SSPLBASE)    PICK UP OUR BASE                     31385500
         DROP  R14                                                      31386000
         LR    R6,R8               RETURN SJB POINTER                   31386500
SSPLNFUN DS    0H                                                       31387000
*                                                                       31387500
*              WE NOW OWN SJB LOCK.  CHAIN SAVE AREAS.                  31388000
*                                                                       31388500
         LM    R15,R1,16(R13)      RESTORE REGS 15 THROUGH 1.           31389000
         USING SSOBEGIN,R1         SET SSOB ADDRESSABILITY.             31389500
         L     RSIB,SSOBSSIB       POINT TO SSIB                        31390000
         LA    R15,0(,R15)         ZERO REGISTER 15 BYTE 0.             31390500
         ST    R6,8(,R13)          BACK-CHAIN SAVE AREA.                31391000
         ST    R13,4(,R6)          FORWARD-CHAIN SAVE AREA.             31391500
         LR    RSJB,R6             POINT R13 TO SJB SAVE AREA.          31392000
         DROP  R6                  DROP OLD SJB BASE.                   31392500
         USING SJBDSECT,RSJB       USE NEW SJB BASE.                    31393000
         O     R15,=X'80000000'    SHOW SJB LOCK HELD.                  31393500
         MVC   SJBXQFN1,SSOBFUNC   SHOW FUNCTION IN PROCESS.            31394000
*                                                                       31394500
*              ENTER SUBSYSTEM FUNCTION HERE                            31395000
*                                                                       31395500
SSPLRET  DS    0H                                                       31396000
         LA    R12,4               GET CONSTANT FOUR.                   31396500
         ALR   R12,R15             SET SUBSYS FUNC ADDRESSABILITY.      31397000
         BR    R12                 ENTER FUNCTION.                      31397500
SSPLEOTB DC    0F'0',X'80',AL3(HOSEOTB) END OF TASK BASE                31398000
         TITLE '$EPILOG -- SUBSYSTEM FUNCTION EXIT ROUTINE'             31398500
$EPILOG  DS    0H                                                       31399000
         USING *,R14               SET LOCAL ADDRESSABILITY.            31399500
*                                                                       31400000
*              SAVE RETURN CODE IN R0 SAVE AREA SLOT                    31400500
*                                                                       31401000
         ST    R15,20(,R13)        SAVE RETURN CODE.                    31401500
*                                                                       31402000
*              IF NO SJB LOCK, JUST RETURN TO CALLER.                   31402500
*                                                                       31403000
         LTR   R12,R12             IF SJB LOCK, R12 IS NEGATIVE.        31403500
         BNM   SSENOLK             BRANCH IF NO LOCK HELD.              31404000
*                                                                       31404500
*              SJB LOCK.  SHOW NO FUNCTION ACTIVE.                      31405000
*                                                                       31405500
         SLR   R0,R0               ZERO R0 AND MAKE                     31406000
         STH   R0,SJBXQFN1         SJBXQFN1 ZERO.                       31406500
*                                                                       31407000
*              SJB LOCK.  DECHAIN SJB SAVE AREA.  RE-SAVE               31407500
*              RETURN CODE.                                             31408000
*                                                                       31408500
         LR    R4,R13              USE R4 AS SJB POINTER.               31409000
         L     R13,4(,R13)         POINT TO ORIGINAL SAVE AREA.         31409500
         ST    R15,20(,R13)        RE-SAVE RETURN CODE AT R0.           31410000
         DROP  RSJB                SWITCH SJB ADDRESSABILITY            31410500
         USING SJBDSECT,R4         TO R4.                               31411000
         L     R1,SJBFLOW          PICK UP OLD FLOW FLAGS.              31411500
SSELKA   TM    SJBTFFG,SJBTFFGP    TEST FOR PURGE ON.                   31412000
         BO    SSELKB              GO TO PURGE IF YES.                  31412500
         CS    R1,R0,SJBFLOW       ZERO FLAGS.                          31413000
         BNZ   SSELKA              LOOP IF NOT SET.                     31413500
         B     SSELKC              CONTINUE UNLOCK.                     31414000
*                                                                       31414500
*              PURGE PSO FROM THE SJB                                   31415000
*                                                                       31415500
SSELKB   NI    SJBTFFG,255-SJBTFFGM RESET ECB MEANINGFULL.              31416000
         MVI   SJBTFLOW,X'0'       RESET QUEUE STATUS.                  31416500
         ICM   R6,15,SJBPSOP       PICK UP PSO POINTER.                 31417000
         BZ    SSELKC              EXIT IF EMPTY.                       31417500
         LR    R13,R4              PUT SJB POINTER BACK IN R13.         31418000
         OI    PSOFLG2-PSODSECT(R6),SSSOCTRL SET TERMINATE PSO.         31418500
         LA    R8,SSOBSOUT         SET FUNCTION ID                  R41 31419000
         STH   R8,SJBXQFN1          IN CASE OF ABEND                R41 31419500
         ICM   R12,7,=AL3(PSOBASE) POINT TO PSO QUEUE ROUTINE BASE.     31420000
         BAL   R8,PSOQUEUE-PSOBASE(R12) CALL PSO QUEUEING ROUTINE.      31420500
         USING *,R8                                                     31421000
         L     R14,=A($EPILOG)     GET BASE BACK.                       31421500
         DROP  R8                                                       31422000
         SLR   R0,R0               ZERO R0.                             31422500
         LR    R4,R13              RESET R4 POINTER TO SJB.             31423000
         L     R13,4(,R13)         RESET R13 POINTER TO USER SAVE.      31423500
         STH   R0,SJBXQFN1         RESET FUNCTION INDICATOR.            31424000
SSELKC   ST    R0,SJBFLOW          RESET FLOW FLAGS.                    31424500
*                                                                       31425000
*              USE SUBROUTINE $TESTLLK TO RELEASE LOCK                  31425500
*                                                                       31426000
         LR    R6,R4               POINT R6 TO SJB.                     31426500
         LM    R2,R3,SJBLOCKH      SET R2, R3 EQUAL TO HEADER.          31427000
         BAL   R4,$TESTLLK         CALL $TESTLLK TO RELEASE LOCK.       31427500
         BC    4,$TESTLLK          IF CDS FAILED, TRY AGAIN.            31428000
*                                                                       31428500
*              RESTORE CALLER KEY AND REGISTERS                         31429000
*                                                                       31429500
SSENOLK  DS    0H                                                       31430000
         MODESET KEYADDR=16(,R13),WORKREG=2  RESTORE CALLER KEY.        31430500
         LM    R14,R12,12(R13)     RESTORE CALLER REGISTERS.            31431000
*                                                                       31431500
*              IF NEGATIVE RETURN CODE, RETURN IT POSITIVE IN R15.      31432000
*              ELSE STORE IT IN SSOBRETN AND RETURN R15=0.              31432500
*                                                                       31433000
         LCR   R15,R0              IF NEGATIVE RETURN CODE,             31433500
         BPR   R14                 RETURN POSITIVE IN R15.              31434000
         ST    R0,SSOBRETN         ELSE RETURN IT IN SSOBRETN,          31434500
         SLR   R15,R15             ZERO REGISTER 15,                    31435000
         BR    R14                 AND RETURN TO USER.                  31435500
         DROP  ,                   DROP ALL ADDRESSABILITY.             31436000
         TITLE '$TESTLLK - PURGE HASP LOCAL LOCK'                       31436500
*                                                                       31437000
*                                                                       31437500
*              PURGE SUBROUTINE FOR HASP LOCAL (SJB) LOCK               31438000
*                                                                       31438500
*                                                                       31439000
$TESTLLK DS    0H                                                       31439500
         BALR  R15,0               SET LOCAL BASE.                      31440000
         USING *,R15               SET LOCAL ADDRESSABILITY.            31440500
         USING SJBDSECT,R6         SET SJB ADDRESSABILITY.              31441000
* TEST LOCK HEADER CHAIN WORD TO DETERMINE ACTION                       31441500
TLL10    DS    0H                                                       31442000
         LTR   R3,R3               FIND SIGN OF CHAIN WORD.             31442500
* IF MINUS, NO WAITERS EXIST - CLEAR LOCK HEADER                        31443000
         BM    TLL20               IF MINUS NO WAITERS EXIST.           31443500
* IF PLUS, GIVE THE LOCK TO THE FIRST LOCK ELEMENT                      31444000
         BP    TLL30               IF PLUS R3 POINTS TO LOCK ELM.       31444500
* IF ZERO, NOBODY HOLDS THE LOCK                                        31445000
         BZR   R4                  LOCK AVAILABLE - RETURN CC=0.        31445500
         SPACE 3                                                        31446000
* LOCK HEADER CHAIN WORD IS MINUS                                       31446500
TLL20    DS    0H                                                       31447000
         SLR   R0,R0               ZERO R0                              31447500
         LR    R1,R0               AND R1.                              31448000
         CDS   R2,R0,SJBLOCKH      TRY TO RELEASE LOCK.                 31448500
         BR    R4                  IF LOCK RELEASED RETURN CC=0,        31449000
*                                  ELSE RETURN CC=1.                    31449500
         SPACE 3                                                        31450000
* LOCK HEADER CHAIN WORD IS PLUS                                        31450500
TLL30    DS    0H                                                       31451000
         L     R0,8(,R3)           POINT R0 TO WAITER'S TCB.            31451500
         L     R1,4(,R3)           GET NEW CHAIN WORD IN R1.            31452000
         CDS   R2,R0,SJBLOCKH      PASS LOCK TO THE WAITER.             31452500
         BNER  R4                  IF FAILURE RETURN CC=1.              31453000
* THE FOLLOWING TESTS DETERMINE WHETHER A POST WILL GIVE CONTROL        31453500
* TO THE WAITING FUNCTION.  THE WAITING FUNCTION WILL NOT               31454000
* RECEIVE CONTROL IF ITS TCB IS THE SAME AS THE CURRENT TCB OR IF       31454500
* ITS TCBABWF NON-DISPATCHABILITY FLAG IS ON.                           31455000
         LR    R2,R0               POINT R2 TO THE NEW TCB.             31455500
         USING TCB,R2              SET TCB ADDRESSABILITY.              31456000
         CL    R2,PSATOLD-PSA      IS NEW TCB SAME AS CURRENT...        31456500
         BE    TLL40               IF SO, PURGE.                        31457000
         TM    TCBFLGS5,TCBABWF    IS NEW TCB IN ABNORMAL WAIT...       31457500
         BO    TLL40               IF SO, PURGE.                        31458000
         L     R5,TCBRBP           POINT TO CURRENT RB.                 31458500
         USING RBBASIC,R5          SET RB ADDRESSABILITY.               31459000
TLL33    DS    0H                                                       31459500
         TM    RBSTAB1,RBFTSVRB    IF PRB OR SVRB,                      31460000
         BNM   TLL36               GO CHECK ITS PSW.                    31460500
         TM    RBSTAB1,RBFTIRB     IF NOT IRB OR TIRB,                  31461000
         BZ    TLL36               GO CHECK ITS PSW.                    31461500
         TM    RBSTAB2,RBTCBNXT    IF TCB IS NEXT SET CC=3.             31462000
         L     R5,RBLINK           POINT TO NEXT RB OR TCB.             31462500
         BZ    TLL33               BRANCH TO CHECK RB.                  31463000
         B     TLL40               BUT IF TCB, GO PURGE.                31463500
TLL36    DS    0H                                                       31464000
         L     R5,RBOPSW+4         GET RESUME INSTRUCTION ADR.          31464500
         DROP  R5                  THERE GOES RB ADDRESSABILITY.        31465000
         CL    R5,=A($PLWAIT1)     IF CURRENT NON-INTERRUPT             31465500
         BL    TLL40               REQUEST BLOCK IS WAITING             31466000
         CL    R5,=A($PLWAIT2)     OR ABOUT TO WAIT,                    31466500
         BNH   TLL50               GO POST HIS WAIT ELEMENT.            31467000
         SPACE 1                                                        31467500
* THE WAITING FUNCTION WILL NOT RECEIVE CONTROL.                        31468000
* FREE THE STORAGE AND DO NEXT ITEM ON THE CHAIN.                       31468500
TLL40    DS    0H                                                       31469000
         LR    R0,R1               SET UP REGISTERS SO THAT             31469500
         LR    R1,R3               R2, R3 SAME AS SJBLOCKH              31470000
         LR    R3,R0               AND R1 IS LOCK ELEMENT TO FREE.      31470500
         FREEMAIN R,A=(1),SP=241,LV=16  FREE LOCK ELEMENT.              31471000
* RE-ESTABLISH R15 ADDRESSABILITY                                       31471500
         BALR  R15,0               SET TEMPORARY LOCAL BASE             31472000
         USING *,R15               AND ADDRESSABILITY.                  31472500
         L     R15,=A(TLL10)       SET LOCAL BASE.                      31473000
         USING TLL10,R15           SET LOCAL ADDRESSABILITY.            31473500
* GO TO THE TOP AGAIN TO GET RID OF ANY OTHER BAD GUYS                  31474000
         B     TLL10               GO PROCESS NEXT WAITER.              31474500
         SPACE 1                                                        31475000
* LOOKS LIKE WAITING FUNCTION WILL RECEIVE CONTROL.                     31475500
* POST NEW LOCK OWNER AND RETURN CC=2 TO CALLER.                        31476000
TLL50    DS    0H                                                       31476500
         POST  0(,R3)              POST NEW LOCK OWNER.                 31477000
         SLR   R0,R0               SET CONDITION CODE TO 2.             31477500
         BR    R4                  RETURN TO CALLER.                    31478000
         DROP  R2,R6,R15           DROP TCB, SJB, LOCAL BASES.          31478500
         TITLE '$SDBINIT -- ROUTINE TO INITIALIZE AN SDB'               31479000
*                                                                       31479500
*        $SDBINIT - ROUTINE TO INITIALIZE AN SDB                        31480000
*                                                                       31480500
*        INPUT ---                                                      31481000
*              RSDB POINTS TO SDB TO INITIALIZE                         31481500
*              RSJB POINTS TO SJB TO WHICH SDB BELONGS                  31482000
*              RSVT POINTS TO HASP SSVT                                 31482500
*                                                                       31483000
*        OPERATION ---                                                  31483500
*              1. THE SDB IS MADE ZERO UP TO SDBCCW1                    31484000
*              2. SDBID AND SDBLENG ARE SET                             31484500
*              3. SDBSJB AND SDBSDB ARE SET                             31485000
*              4. SDBJKEY IS SET                                        31485500
*              4A. SDBOUTLM IS SET TO -1.                               31486000
*              5. SDBPBFLM IS SET                                       31486500
*              6. THE IOB IS INITIALIZED ---                            31487000
*                 A. FLG1 IS SET TO X'42'                               31487500
*                 B. ECB IS POINTED TO SDBECB                           31488000
*                 C. ST IS POINTED TO SDBCCW1                           31488500
*                 D  DCB IS POINTED TO SJBDCB                           31489000
*              7. THE CHANNEL PROGRAM IS INITIALIZED AS SHOWN           31489500
*                 IN THE DSECT.                                         31490000
*                                                                       31490500
*        FIELDS LEFT TO BE INITIALIZED ---                              31491000
*              FLAGS - SDBFLG1, SDBFLG2                                 31491500
*              SDBPIOT,SDBPDDB,SDBDKEY,SDBAIOT                          31492000
*              SDBDEB                                                   31492500
*              SDBTRKF,SDBTRK, SDBTRKL                                  31493000
*              SDBPBF,SDBUBF                                            31493500
         EJECT                                                          31494000
SSDBINIT DS    0H                                                       31494500
$SDBINIT EQU   SSDBINIT                                                 31495000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      31495500
         LR    R12,R15             ESTABLISH                            31496000
         USING $SDBINIT,R12        ADDRESSABILITY.                      31496500
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.          R4 31496800
         $GETMAIN RC,LV=SDBLNG,SP=230,KEY=5  GET MAIN FOR SDB.          31497000
         ST    R1,60(,R13)         SET R10 IN SAVE AREA.                31497500
         BNZ   SDIFAIL             BRANCH IF STORAGE NOT GOT.           31498000
         LR    RSDB,R1             ELSE SET SDB BASE REGISTER.          31498500
         USING SJBDSECT,RSJB                                            31499000
         USING SDBDSECT,RSDB                                            31499500
* CLEAR THE SDB UP TO SDBCCW1                                           31500000
         L     R4,0(,R1)           SAVE TCB ACROSS CLEAR.               31500500
         LR    R0,RSDB             POINT TO AREA                        31501000
         LA    R1,SDBCCW1-SDBDSECT AND LENGTH TO CLEAR.                 31501500
         SR    R3,R3               CLEAR TO ZEROES.                     31502000
         MVCL  R0,R2               CLEAR THE SDB.                       31502500
* SET SDB IDENTIFIER AND LENGTH                                         31503000
         MVC   SDBID(6),SDIID      SET ID AND LENGTH                    31503500
* SAVE TCB POINTER TO BE USED FOR FREEMAIN OF SDB                       31504000
         ST    R4,SDBTCBM          SAVE FREEMAIN TCB POINTER.           31504500
* SET SDBSJB AND SDBSDB                                                 31505000
         ST    RSJB,SDBSJB         SET SDBSJB.                          31505500
         MVC   SDBSDB,SJBSDB       CHAIN NEW SDB LIFO ONTO              31506000
         ST    RSDB,SJBSDB         THE SJB CHAIN OF SDBS.               31506500
         ST    R11,SDBSVT          SET POINTER TO HASP SSVT.            31507000
         OI    SDBTAB+(TABFLAG-TABDSECT),TABMINOR SETUP AS MINOR TAB R4 31507100
* SET SDBJKEY                                                           31507500
         MVC   SDBJKEY,SJBJKEY     SET JOB KEY FROM SJB.                31508000
* SET SDBOUTLM TO -1                                                    31508500
         L     R0,=F'-1'           SET OUTPUT LIMIT                     31509000
         ST    R0,SDBOUTLM         TO -1.                               31509500
* SET SDBPBFLM                                                          31510000
         MVI   SDBPBFLM+1,20       SET PROT BUF LIM TO 20.              31510500
* INITIALIZE IOB                                                        31511000
         MVI   SDBIFLG1,X'42'      SET IOBFLAG1,TO X'42'.               31511500
         LA    R15,SDBECB          POINT IOBECB                         31512000
         ST    R15,SDBIECB         TO SDBECB AND                        31512500
         MVI   0(R15),X'40'        SET ECB POSTED.                      31513000
         LA    R0,SDBCCW1          POINT IOBSTART                       31513500
         ST    R0,SDBIST           TO SDBCCW1.                          31514000
         LA    R0,SJBDCB           POINT IOBDCBPT                       31514500
         ST    R0,SDBIDCB          TO SJBDCB.                           31515000
* INITIALIZE THE CHANNEL PROGRAM                                        31515500
         MVC   SDBCCW1(32),SDICCW1 SET SKELETON CHANNEL PROGRAM.        31516000
         LA    R0,SDBCCW1+5        POINT SDBCCW1                        31516500
         STCM  R0,7,SDBCCW1+1      TO SECTOR NUMBER.                    31517000
         LA    R0,SDBIFDAD+3       POINT SDBCCW2                        31517500
         STCM  R0,7,SDBCCW2+1      TO SEARCH ARGUMENT.                  31518000
         MVC   SDBCCW4+6(2),$SVBFSIZ  SET DATA LENGTH                R4 31518300
         LA    R0,SDBCCW2          POINT SDBCCW3                        31518500
         STCM  R0,7,SDBCCW3+1      TO TIC TARGET ADDRESS.               31519000
* RETURN TO CALLER                                                      31519500
         SR    R15,R15             SHOW $SDBINIT COMPLETED OKAY.        31520000
SDIFAIL  DS    0H                                                       31520500
         ST    R15,16(,R13)        SET R15 IN SAVE AREA.                31521000
         LTR   R15,R15             TEST RETURN CODE.                    31521500
         BZ    SDIEXIT             BRANCH IF SUCCESSFUL.                31522000
         $MID  357                 ELSE WRITE AN ERROR MESSAGE.         31522500
         WTO   '&MID.STORAGE UNAVAILABLE FOR SDB',ROUTCDE=10,          C31523000
               DESC=6                                                   31523500
SDIEXIT  DS    0H                                                       31524000
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   31524500
         LTR   R15,R15             SET CC ACCORDING TO R15.             31525000
         BR    R14                 RETURN TO CALLER.                    31525500
         DROP  ,                   DROP ALL BASES.                      31526000
*                                                                       31526500
*              DATA AREAS                                               31527000
*                                                                       31527500
SDIID    DC    0CL6' ',CL4'SDB',AL2(SDBLNG)  SDB IDENTIFIER             31528000
SDICCW1  CCW   X'03',0,X'60',1     SKELETON NO-OP/SET-SECTOR            31528500
         CCW   X'31',0,X'60',5     SKELETON SEARCH-ID-EQUAL             31529000
         DC    FS24'8,0'           SKELETON TIC                         31529500
         CCW   X'06',0,0,*-*       SKELETON READ                     R4 31530000
         TITLE '$SJBINIT -- ROUTINE TO INITIALIZE AN SJB'               31530500
*                                                                       31531000
*        $SJBINIT - ROUTINE TO INITIALIZE AN SJB                        31531500
*                                                                       31532000
*        INPUT ---                                                      31532500
*              RSJB POINTS TO SJB TO INITIALIZE                         31533000
*                                                                       31533500
*        OPERATION ---                                                  31534000
*              1. THE SJB IS MADE ZERO UP TO SJBCCW1                    31534500
*              2. SJBID AND SJBLENG ARE SET                             31535000
*              3. SJBECBP, SJBASCBP, AND SJBERRET ARE SET               31535500
*              4. SJBLOCKH IS MADE ZERO, AND ECBP, ASCBP, AND ERRET     31536000
*                 ARE SET UP FOR CROSS-MEMORY POSTING.                  31536500
*              5. THE IOB IS INITIALIZED                                31537000
*                 A. FLG1 IS SET TO X'42'                               31537500
*                 B. ECB IS POINTED TO SJBECB                           31538000
*                 C. ST IS POINTED TO SJBCCW1                           31538500
*                 D. DCB IS POINTED TO SJBDCB                           31539000
*              6. THE CHANNEL PROGRAM IS INITIALIZED AS SHOWN           31539500
*                 IN THE DSECT                                          31540000
*              7. THE ACBS, DEBS, AND RPL ARE INITIALIZED               31540500
*                 AS SHOWN IN THE DSECT                                 31541000
*              8. THE HASP DCB AND DEB ARE MOVED TO SJBDCB AND SJBDEB   31541500
*                 AND ADCONS IN THEM ARE SET CORRECTLY.  DEBAVT IS      31542000
*                 POINTED TO HAMAVT.                                    31542500
*                                                                       31543000
*        FIELDS LEFT TO BE INITIALIZED ---                              31543500
*              SJBJCT                                                   31544000
*              SJBJCTTR                                                 31544500
*              SJBIOT                                                   31545000
*              SJBPIT, SJBPATID, SJBCLAS, SJBJQE                        31545500
*              SJBXBSDB, SJBXBJNM                                       31546000
*              SJBJOBID                                                 31546500
*              SJBJOBNM                                                 31547000
         EJECT                                                          31547500
SSJBINIT DS    0H                                                       31548000
$SJBINIT EQU   SSJBINIT                                                 31548500
         BALR  R12,0               ESTABLISH                            31549000
         USING *,R12               ADDRESSABILITY.                      31549500
         LR    R6,R14              SAVE RETURN ADDRESS.                 31550000
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             31550500
         SLR   R1,R1                           COMPUTE               R4 31550600
         IC    R1,$SVNUMDA                      STORAGE              R4 31550700
         SLL   R1,4                              REQUIRED FOR        R4 31550800
         LA    R0,SJBDEB-SJBDSECT+4*(8+4*1)(,R1)  SJB                R4 31550900
        $GETMAIN RC,LV=(R0),SP=241,KEY=1  GET MAIN FOR SJB           R4 31551000
         BNZ   SJIERR              BRANCH IF GETMAIN FAILED.            31551500
         LR    RSJB,R1             SET THE SJB BASE REGISTER.           31552000
         USING SJBDSECT,RSJB                                            31552500
* CLEAR SJB FROM SJBFLG1 TO SJBCCW1                                  R4 31553000
         LA    R0,SJBFLG1          SET STARTING ADDRESS              R4 31553500
         LA    R1,SJBCCW1-SJBFLG1   AND LENGTH FOR CLEAR             R4 31554000
         MVCL  R0,R14              R15 MUST BE 0.  CLEAR SJB.           31554500
* SET SJB IDENTIFIER AND SJB LENGTH                                 R41 31555000
         MVC   SJBID,=CL4'SJB'     SET SJB ID                        R4 31555500
         MVC   SJBLENG,4(RSJB)     MOVE LENGTH SET BY HGFMAIN       R41 31556000
         MVC   SJBSSNM,$SVSSNM     SET OWNING SUBSYSTEM NAME   @OZ15844 31556500
* SET SJBECBP, SJBASCBP, AND SJBERRET                                   31557500
         LA    R0,SJBECB           POINT ECB POINTER                    31558000
         ST    R0,SJBECBP          TO ECB.                              31558500
         L     R1,CVTPTR           POINT TO CVT.                        31559000
         LA    R0,CVTBRET-CVT(,R1) POINT ERRET TO                       31559500
         ST    R0,SJBERRET         'BR 14'.                             31560000
         L     R1,PSAAOLD-PSA      GET CURRENT ASCB POINTER.            31560500
         ST    R1,SJBASCBP         STORE IT IN THE SJB.                 31561000
         LH    R1,ASCBASID-ASCB(,R1)  GET CURRENT ASID.                 31561500
         STH   R1,SJBASID          STORE IT IN THE SJB.                 31562000
* ADD SJB TO THE HASP ADDRESS SPACE VECTOR TABLE (HAVT)                 31562500
         ALR   R1,R1               MULTIPLY ASID                        31563000
         ALR   R1,R1               BY FOUR.                             31563500
         AL    R1,$SVHAVT          POINT TO ENTRY IN HAVT.              31564000
         SL    R1,=A(SJBSJB-SJBDSECT)  PREPARE TO RUN CHAIN.            31564500
         DROP  RSJB                DROP RSJB AS SJB BASE.               31565000
         USING SJBDSECT,R1         SET SJB BASE TO R1.                  31565500
SJI10    DS    0H                                                       31566000
         LR    R2,R1               SAVE PREVIOUS SJB POINTER.           31566500
         L     R1,SJBSJB           POINT TO NEXT SJB.                   31567000
         LTR   R1,R1               ARE WE AT CHAIN END...               31567500
         BNZ   SJI10               IF NOT, LOOP TILL WE ARE.            31568000
         USING SJBDSECT,R2         SET SJB BASE TO R2 (PREV).           31568500
         ST    RSJB,SJBSJB         CHAIN SJB ON HAVT SLOT FIFO.         31569000
         DROP  R1,R2               DROP TWO SJB BASES.                  31569500
         USING SJBDSECT,RSJB       SET SJB BASE TO RSJB.                31570000
* INITIALIZE THE IOB                                                    31570500
         MVI   SJBIFLG1,X'42'      SET IOBFLAG1 TO X'42'.               31571000
         LA    R0,SJBECB           POINT IOBECB                         31571500
         ST    R0,SJBIECB          TO SJBECB.                           31572000
         LA    R0,SJBCCW1          POINT IOBSTART                       31572500
         ST    R0,SJBIST           TO SJBCCW1.                          31573000
         LA    R0,SJBDCB           POINT IOBDCBPT                       31573500
         ST    R0,SJBIDCB          TO SJBDCB.                           31574000
* INITIALIZE THE CHANNEL PROGRAM                                        31574500
         MVC   SJBCCW1(32),SJICCW1 SET SKELETON CHANNEL PROGRAM.        31575000
         LA    R0,SJBCCW1+5        POINT SJBCCW1                        31575500
         STCM  R0,7,SJBCCW1+1      TO SECTOR NUMBER.                    31576000
         LA    R0,SJBIFDAD+3       POINT SJBCCW2                        31576500
         STCM  R0,7,SJBCCW2+1      TO SEARCH ARGUMENT.                  31577000
         MVC   SJBCCW4+6(2),$SVBFSIZ  SET DATA LENGTH                R4 31577300
         LA    R0,SJBCCW2          POINT SJBCCW3                        31577500
         STCM  R0,7,SJBCCW3+1      TO TIC TARGET ADDRESS.               31578000
* INITIALIZE ACBS, DEBS, RPL                                            31578500
         MVC   SJBLACB(SJBIACB-SJBLACB),SJILACB  SET LOG SKELETONS.     31579000
         USING IFGACB,R1           USE THE ACB DSECT.                   31579500
         USING DEBBASIC,R2         USE THE DEB DSECT.                   31580000
         LA    R1,SJBLACB          GET ADDRESS OF LOG ACB.              31580500
         LA    R2,SJBLDEB          GET ADDRESS OF LOG DEB.              31581000
         ST    R1,DEBDCBAD         POINT DEB TO ACB.                    31581500
         MVI   DEBDEBID,X'0F'      SET DEB ID FIELD.                    31582000
         ST    R2,ACBDEB-1         POINT ACB TO DEB.                    31582500
         LA    R2,SJBLRPL          POINT HASP JOB LOG RPL               31583000
         ST    R1,RPLDACB-IFGRPL(,R2)  TO ACB.                          31583500
         MVC   ACBINRTN,=A(HAMNULL)  ALLOW EARLY LOG USE.               31584000
         MVC   SJBIACB(SJBMACB-SJBIACB),SJIIACB  SET INT TXT SKELETON.  31584500
         LA    R1,SJBIACB          GET ADDRESS OF INTTXT ACB.           31585000
         LA    R2,SJBIDEB          GET ADDRESS OF INTTXT DEB.           31585500
         ST    R1,DEBDCBAD         POINT DEB TO ACB.                    31586000
         MVI   DEBDEBID,X'0F'      SET DEB ID FIELD.                    31586500
         ST    R2,ACBDEB-1         POINT ACB TO DEB.                    31587000
         MVC   SJBMACB(SJBJACB-SJBMACB),SJIMACB  SET MSGS SKELETON.     31587500
         LA    R1,SJBMACB          GET ADDRESS OF MESSAGE ACB.          31588000
         LA    R2,SJBMDEB          GET ADDRESS OF MESSAGE DEB.          31588500
         ST    R1,DEBDCBAD         POINT DEB TO ACB.                    31589000
         MVI   DEBDEBID,X'0F'      SET DEB ID FIELD.                    31589500
         ST    R2,ACBDEB-1         POINT ACB TO DEB.                    31590000
         MVC   SJBJACB(SJBDCB+40-SJBJACB),SJIJACB  SET JOURNAL SKEL.    31590500
         LA    R1,SJBJACB          GET ADDRESS OF JOURNAL ACB.          31591000
         LA    R2,SJBJDEB          GET ADDRESS OF JOURNAL DEB.          31591500
         ST    R1,DEBDCBAD         POINT DEB TO ACB.                    31592000
         MVI   DEBDEBID,X'0F'      SET DEB ID FIELD.                    31592500
         ST    R2,ACBDEB-1         POINT ACB TO DEB.                    31593000
* INITIALIZE SPOOL DCB AND DEB                                          31593500
         MVC   SJBDCB+40(12),$SVDCB+40  SET SKELETON DCB IN SJB      R4 31593600
         SLR   R1,R1               SET                               R4 31593700
         IC    R1,$SVNUMDA          SKELETON                         R4 31593800
         SLL   R1,4                  DIRECT                          R4 31593900
         LA    R1,32+16(,R1)          ACCESS                         R4 31594000
         L     R14,$SVDEB              DEB                           R4 31594100
         LA    R0,SJBDEB                IN                           R4 31594200
         LR    R15,R1                    NEW                         R4 31594300
         MVCL  R0,R14                     SJB                        R4 31594400
         LA    R1,SJBDEB           GET ADR OF HASP DEB.                 31594500
         LA    R2,SJBDCB           GET ADR OF HASP DCB.                 31595000
         USING DEBBASIC,R1         USE DEB DSECT.                       31595500
         USING DCBDSECT,R2         USE DCB DSECT.                       31596000
         L     R0,=A(HAMAVT)       SET APPENDAGE VECTOR                 31596500
         STCM  R0,7,DEBAPPAD+1     TABLE ADDRESS IN DEB.                31597000
         ST    R1,DCBDEBAD         SET ADR OF DEB IN DCB.               31597500
         ST    R2,DEBDCBAD         SET ADR OF DCB IN DEB.               31598000
         MVI   DEBDEBID,X'0F'      SET DEB IDENTIFIER.                  31598500
* RETURN TO CALLER.                                                     31599000
         SR    R15,R15             SHOW NORMAL COMPLETION.              31599500
         BR    R6                  RETURN TO CALLER.                    31600000
*                                                                       31600500
*                                                                       31601000
*              ERROR - STORAGE UNAVAILABLE FOR SJB                      31601500
*                                                                       31602000
*                                                                       31602500
SJIERR   DS    0H                                                       31603000
         $MID  362                 SET HASP ID FOR MESSAGE.             31603500
         WTO   '&MID.STORAGE UNAVAILABLE FOR SJB',ROUTCDE=10,          C31604000
               DESC=6                                                   31604500
         LA    R15,4               SET R15 NONZERO.                     31605000
         LTR   R15,R15             SET CONDITION CODE NONZERO.          31605500
         BR    R6                  RETURN TO CALLER.                    31606000
         DROP  R1,R2,R12,RSJB      DROP BASES.                          31606500
*                                                                       31607000
*              DATA AREAS                                               31607500
*                                                                       31608000
SJICCW1  CCW   X'03',0,X'60',1     SKELETON NO-OP/SET-SECTOR            31609000
         CCW   X'31',0,X'60',5     SKELETON SEARCH-ID-EQUAL             31609500
         CCW   X'08',0,0,1         SKELETON TIC.                        31610000
         CCW   X'06',0,0,*-*       SKELETON READ                     R4 31610500
SJILACB  ACB   MACRF=(ADR,SEQ,OUT)                                      31611000
         DC    8A(0)               DEB FOR LOG                          31611500
         RPL   ACB=0                                                    31612000
SJIIACB  ACB   MACRF=(ADR,SEQ,IN)                                       31612500
         DC    8A(0)                                                    31613000
SJIMACB  ACB   MACRF=(ADR,SEQ,OUT)                                      31613500
         DC    8A(0)                                                    31614000
SJIJACB  ACB   MACRF=(ADR,SEQ,DIR,IN,OUT)                               31614500
         DC    8A(0)                                                    31615000
         TITLE '$SVJLOK - ACQUIRE JOB COMMUNICATION QUEUES LOCK'        31615500
*                                                                       31616000
*                                                                       31616500
*                       $ S V J L O K                                   31617000
*                                                                       31617500
*                                                                       31618000
*        ACQUIRE THE JOB COMMUNICATION QUEUES LOCK.  THIS LOCK          31618500
*        MUST BE OBTAINED BY ANYBODY MANIPULATING THE $SVJ QUEUES       31619000
*        - $SVJPCLS, $SVJPNUM, $SVJXCLS, $SVJXNUM, $SVJTERM,            31619500
*        $SVJRENQ.  THIS LOCK MUST BE PROCURED BEFORE REMOVING          31620000
*        AN SJB FROM A QUEUE AND MUST NOT BE RELEASED UNTIL THE         31620500
*        SJB HAS BEEN RETURNED TO A QUEUE IF APPROPRIATE (FOR           31621000
*        REMOVAL FROM $SVJTERM OR $SVJRENQ ONLY, AN SJB MAY BE          31621500
*        LEFT OFF ALL QUEUES).                                          31622000
*                                                                       31622500
*        THE LOCK HEADER IS $SVJLOCK.  ITS FORMAT IS --                 31623000
*        +0 - ASCB UNDER WHICH RESOURCE IS HELD.  VALID ONLY IF         31623500
*              +4 IS NONZERO - OTHERWISE THIS FULLWORD MUST BE          31624000
*              ZERO.                                                    31624500
*        +4 - ZERO MEANS RESOURCE IS UNLOCKED.                          31625000
*              MINUS MEANS RESOURCE IS HELD BUT NO WAITERS EXIST.       31625500
*              PLUS - POINTS TO MOST-RECENT WAIT ELEMENT                31626000
*                                                                       31626500
*        THE WAIT ELEMENT IS A 32-BYTE CHUNK OF SP241 OR A PRE-         31627000
*        ASSEMBLED AREA IN HASPXEQ, FORMATTED AS FOLLOWS ---            31627500
*        +0  - IF IN HASPXEQ, CHARACTERS 'HASP'                         31628000
*              OTHERWISE USED AS ECB                                    31628500
*        +4  - CHAIN WORD AS ABOVE IN $SVJLOCK                          31629000
*        +8  - ASCB POINTER AS ABOVE                                    31629500
*        +12 - ECB POINTER FOR XMPOST                                   31630000
*        +16 - ASCB POINTER FOR XMPOST                                  31630500
*        +20 - ERROR RETURN ADDRESS FOR XMPOST                          31631000
*        NOTE - +16 AND +20 ARE SET BY UNLOCK ROUTINE                   31631500
*        +24 - IF IN HASPXEQ, UNUSED                                    31632000
*              OTHERWISE SJB POINTER                                    31632500
*                                                                       31633000
*                                                                       31633500
*                                                                       31634000
*              ATTEMPT TO LOCK WITHOUT GETMAIN                          31634500
*                                                                       31635000
*                                                                       31635500
$SVJLOK  DS    0H                                                       31636000
         SLR   R0,R0               ASSUME LOCKING DOUBLEWORD            31636500
         LR    R1,R0               IS ZERO.                             31637000
         L     R2,PSAAOLD-PSA      WE'LL CHANGE IT TO                   31637500
         LNR   R3,R2               ASCB PTR AND MINUS NUMBER.           31638000
         CDS   R0,R2,$SVJLOCK      ACQUIRE THE LOCK.                    31638500
         BER   R14                 RETURN IF SUCCESS.                   31639000
*                                                                       31639500
*                                                                       31640000
*              GET MAIN STORAGE FOR A LOCK ELEMENT                      31640500
*                                                                       31641000
*                                                                       31641500
         STM   R14,R12,12(R13)     SAVE REGISTERS IN SJB.               31642000
         BALR  R12,0               ESTABLISH ADDRESSABILITY             31642500
         USING *,R12               AND TELL THE ASSEMBLER.              31643000
         $GETMAIN RU,SP=241,LV=32,KEY=1  GET A LOCK ELEMENT.            31643500
         LR    R4,R1               SAVE STORAGE ADDRESS IN R4.          31644000
         MVI   0(R1),0             CLEAR THE ECB (+0).                  31644500
         ST    R1,12(,R1)          SET ECB POINTER (+12).               31645000
         ST    RSJB,24(,R1)        SET SJB POINTER (+24).               31645500
*                                                                       31646000
*                                                                       31646500
*              NOW WE HAVE AN ELEMENT.  TRY AGAIN FOR LOCK              31647000
*                                                                       31647500
*                                                                       31648000
SVJL10   DS    0H                                                       31648500
         SLR   R0,R0               ASSUME AS ABOVE THAT                 31649000
         LR    R1,R0               LOCK IS NOT HELD.                    31649500
         L     R2,PSAAOLD-PSA      POINT R2 TO ASCB.                    31650000
         LNR   R3,R2               MAKE R3 NEGATIVE.                    31650500
         CDS   R0,R2,$SVJLOCK      TRY AGAIN TO GET LOCK.               31651000
         BE    SVJL20              IF SUCCESS, FREE WAIT ELEMENT.       31651500
*                                                                       31652000
*              CAN'T GET LOCK NOW - QUEUE WAIT ELEMENT                  31652500
*                                                                       31653000
         STM   R1,R2,4(R4)         SET CHAIN (+4), CUR ASCB (+8).       31653500
         LR    R2,R0               USE OWNING ASCB POINTER.             31654000
         LR    R3,R4               SET TENTATIVE CHAIN POINTER.         31654500
         CDS   R0,R2,$SVJLOCK      TRY TO QUEUE WAIT ELEMENT.           31655000
         BNE   SVJL10              BRANCH IF UNSUCCESSFUL.              31655500
*                                                                       31656000
*              WAIT ELEMENT IS QUEUED - WAIT FOR RESOURCE               31656500
*                                                                       31657000
         WAIT  1,ECB=(R4)          WAIT FOR POST.                       31657500
*                                                                       31658000
*                                                                       31658500
*              UPON BEING POSTED, FREE THE WAIT ELEMENT                 31659000
*                                                                       31659500
*                                                                       31660000
SVJL20   DS    0H                                                       31660500
         $FREMAIN RU,A=(R4),SP=241,LV=32,KEY=1  FREE LOCK ELEMENT.      31661000
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   31661500
*                                                                       31662000
*                                                                       31662500
*              WE HOLD THE RESOURCE.  RETURN TO ITS USER.               31663000
*                                                                       31663500
*                                                                       31664000
         DROP  R12                 DROP LOCAL ADDRESSABILITY.           31664500
         BR    R14                 RETURN TO RESOURCE USER.             31665000
         TITLE '$SVJUNLK - RELEASE JOB COMMUNICATION QUEUES LOCK'       31665500
*                                                                       31666000
*                                                                       31666500
*                       $ S V J U N L K                                 31667000
*                                                                       31667500
*                                                                       31668000
* SEE ABOVE FOR DESCRIPTION OF HEADER AND WAIT ELEMENT FORMATS          31668500
*                                                                       31669000
*                                                                       31669500
*              INSPECT THE LOCK'S CURRENT STATE                         31670000
*                                                                       31670500
*                                                                       31671000
$SVJUNLK DS    0H                                                       31671500
         USING *,R15               SET LOCAL ADDRESSABILITY.            31672000
         LM    R2,R3,$SVJLOCK      GET LOCK HEADER CONTENTS.            31672500
SVJU10   DS    0H                                                       31673000
         LTR   R3,R3               TEST CURRENT LOCK STATE.             31673500
         BP    SVJU20              BRANCH IF SOMEONE WAITING.           31674000
* IF ZERO CHAIN WORD, LOCK RECOVERY - MAKE THE LOCK ZERO.               31674500
*                                                                       31675000
*                                                                       31675500
*              NO WAITERS EXIST.  RELEASE LOCK AND RETURN.              31676000
*                                                                       31676500
*                                                                       31677000
         SLR   R0,R0               PREPARE TO ZERO OUT                  31677500
         LR    R1,R0               THE LOCK HEADER.                     31678000
         CDS   R2,R0,$SVJLOCK      IF STILL NO WAITERS, UNLOCK.         31678500
         BER   R14                 RETURN IF SUCCESSFUL.                31679000
         B     SVJU10              ELSE TEST LOCK STATE AGAIN.          31679500
*                                                                       31680000
*                                                                       31680500
*              SOMEBODY'S WAITING ON THE LOCK.  GIVE HIM THE            31681000
*              LOCK AND POST HIM.                                       31681500
*                                                                       31682000
*                                                                       31682500
SVJU20   DS    0H                                                       31683000
         L     R0,8(,R3)           R0 = NEW OWNER'S ASCB.               31683500
         L     R1,4(,R3)           R1 = NEW CHAIN WORD.                 31684000
         CDS   R2,R0,$SVJLOCK      SWITCH LOCK TO NEW OWNER.            31684500
         BNE   SVJU10              IF FAILURE, TEST STATE AGAIN.        31685000
         CLC   $SVSSNM,0(R3)       IS LOCK ELEMENT HASP'S...            31685500
         BE    SVJU30              BRANCH IF SO                         31686000
* POST NON-HASP LOCK ELEMENT OWNER                                      31686500
         ST    R0,16(,R3)          ELSE COMPLETE POST ARG LIST          31687000
         L     R4,CVTPTR           BY SETTING ASCB POINTER              31687500
         LA    R4,CVTBRET-CVT(,R4) AND ERROR RETURN                     31688000
         ST    R4,20(,R3)          (POINT TO X'07FE' IN CVT).           31688500
         POST  MF=(E,12(,R3))      POST THE NEW LOCK OWNER.             31689000
         BR    R14                 RETURN TO CALLER.                    31689500
* POST HASP LOCK ELEMENT OWNER                                          31690000
SVJU30   DS    0H                                                       31690500
         LR    R4,R14              SAVE RETURN ADDRESS               R4 31690600
         $$POST ELMT=$SVJOB        POST HASP FOR JOB.                   31691000
         LR    R14,R4              RESTORE RETURN ADDRESS            R4 31691100
         BR    R14                 RETURN TO CALLER.                    31691500
         TITLE '$SJBRQ - MOVE SJB TO A DIFFERENT $SVJ QUEUE'            31692000
*                                                                       31692500
*                                                                       31693000
*                       $ S J B R Q                                     31693500
*                                                                       31694000
*                                                                       31694500
*        REQUIREMENTS -                                                 31695000
*        JOB COMMUNICATION QUEUES LOCK MUST BE HELD                     31695500
*        SJBQUEUE MUST POINT TO HEADER OF QUEUE CURRENTLY CON-          31696000
*              TAINING SJB.  ZERO MEANS SJB IS NOT ON ANY QUEUE.        31696500
*        R1 MUST POINT TO HEADER OF QUEUE NEWLY TO CONTAIN SJB.         31697000
*              IF ZERO, SJB WILL NOT BE RE-ENQUEUED.                    31697500
*        RSJB MUST POINT TO AN SJB.                                     31698000
*                                                                       31698500
*                                                                       31699000
*              REMOVE SJB FROM ITS CURRENT QUEUE                        31699500
*                                                                       31700000
*                                                                       31700500
$SJBRQ   DS    0H                                                       31701000
         USING *,R15               SET LOCAL ADDRESSABILITY.            31701500
         USING SJBDSECT,RSJB       SET SJB BASE TO RSJB.                31702000
         L     R2,SJBQUEUE         GET QUEUE HDR POINTER INTO R2.       31702500
         LTR   R2,R2               TEST IT.                             31703000
         BZ    SJBR20              IF ZERO, SKIP DEQUEUE.               31703500
         SL    R2,=A(SJBXQCHN-SJBDSECT)  ELSE PREPARE TO CHAIN.         31704000
         DROP  RSJB                DROP RSJB AS SJB BASE.               31704500
         USING SJBDSECT,R2         SET SJB BASE TO R2.                  31705000
SJBR10   DS    0H                                                       31705500
         LTR   R3,R2               SAVE AND TEST PREV SJB PTR.          31706000
         BZ    SJBR20              IF ZERO, SJB WASN'T ON QUEUE.        31706500
         L     R2,SJBXQCHN         POINT R2 TO NEXT SJB.                31707000
         CLR   R2,RSJB             IS THIS THE ONE TO DEQUEUE...        31707500
         BNE   SJBR10              IF NOT, LOOP ONWARDS.                31708000
         L     R0,SJBXQCHN         PICK UP NEXT PTR FROM THIS.          31708500
         USING SJBDSECT,R3         SET SJB BASE TO R3 (PREV).           31709000
         ST    R0,SJBXQCHN         SET NEXT PTR IN PREV.                31709500
         DROP  R2,R3               DROP TWO SJB BASES.                  31710000
*                                                                       31710500
*                                                                       31711000
*              ADD SJB LIFO TO THE NEW QUEUE                            31711500
*                                                                       31712000
*                                                                       31712500
SJBR20   DS    0H                                                       31713000
         USING SJBDSECT,RSJB       SET SJB BASE TO RSJB.                31713500
         ST    R1,SJBQUEUE         SET QUEUE HEADER PTR IN SJB.         31714000
         LTR   R1,R1               IF NO QUEUE HEADER,                  31714500
         BZR   R14                 RETURN.                              31715000
         L     R0,0(,R1)           GET CUR Q HEADER VALUE.              31715500
         ST    R0,SJBXQCHN         STORE IT IN SJB CHAIN WORD.          31716000
         ST    RSJB,0(,R1)         STORE SJB ADR IN Q HEADER.           31716500
         BR    R14                 RETURN.                              31717000
         DROP  RSJB                DROP SJB BASE.                       31717500
         TITLE '$SJBFREE - RELEASE SJB STORAGE'                         31718000
*                                                                       31718500
*                                                                       31719000
*                       $ S J B F R E E                                 31719500
*                                                                       31720000
*                                                                       31720500
*        REQUIREMENTS -                                                 31721000
*        SJB LOCK MUST BE HELD (HEADER SJBLOCKH)                        31721500
*        SVJ LOCK MUST NOT BE HELD (HEADER $SVJLOCK)                    31722000
*                                                                       31722500
*                                                                       31723000
*                                                                       31723500
*              REMOVE SJB FROM $SVHAVT                                  31724000
*                                                                       31724500
*                                                                       31725000
$SJBFREE DS    0H                                                       31725500
         USING *,R15               SET LOCAL ADDRESSABILITY.            31726000
         USING SJBDSECT,RSJB       SET SJB BASE TO RSJB.                31726500
         LR    R5,R15              SAVE BASE ACROSS SVC        @OZ19265 31726520
         LR    R4,R14              SAVE RETURN ACROSS SVC      @OZ19265 31726540
         SPACE 1                                               @OZ19265 31726560
*        POST ANYONE ON THE SJBLOCKH CHAIN WITH X'45'          @OZ19265 31726580
         SPACE 1                                               @OZ19265 31726600
SJBF01   DS    0H                                              @OZ19265 31726620
         L     R1,SJBLOCKH+4       GET FIRST WAITER            @OZ19265 31726640
         LTR   R1,R1               ANY WAITER...               @OZ19265 31726660
         BNP   SJBF09              ...NO, CONTINUE             @OZ19265 31726680
         L     R3,4(,R1)           REMOVE WAITER               @OZ19265 31726700
         CS    R1,R3,SJBLOCKH+4         FROM THE               @OZ19265 31726720
         BNE   SJBF01                        CHAIN             @OZ19265 31726740
         LA    R0,X'45'            GET COMPLETION CODE         @OZ19265 31726760
         POST  (1),(0)             POST WAITER                 @OZ19265 31726780
         LR    R15,R5              RESTORE BASE REG            @OZ19265 31726800
         B     SJBF01              GO LOOK FOR ANOTHER         @OZ19265 31726820
SJBF09   DS    0H                                              @OZ19265 31726840
         LR    R14,R4              RESTORE RETURN REG          @OZ19265 31726860
         LH    R1,SJBASID          GET ASID FROM SJB.                   31727000
         ALR   R1,R1               MULTIPLY BY FOUR.                    31727500
         ALR   R1,R1                                                    31728000
         AL    R1,$SVHAVT          POINT TO ENTRY IN HAVT.              31728500
         SL    R1,=A(SJBSJB-SJBDSECT)  PREPARE TO CHAIN.                31729000
         DROP  RSJB                DROP RSJB AS SJB BASE.               31729500
         USING SJBDSECT,R1         SET SJB BASE TO R1.                  31730000
SJBF10   DS    0H                                                       31730500
         LTR   R2,R1               SAVE AND TEST PREV SJB PTR.          31731000
         BZ    SJBF20              IF ZERO, SJB WASN'T ON HAVT.         31731500
         L     R1,SJBSJB           POINT TO NEXT SJB.                   31732000
         CLR   R1,RSJB             IS THIS THE ONE TO DECHAIN...        31732500
         BNE   SJBF10              IF NOT, LOOP ONWARDS.                31733000
         L     R0,SJBSJB           PICK UP NEXT POINTER FROM THIS.      31733500
         USING SJBDSECT,R2         SET SJB BASE TO R2.                  31734000
         ST    R0,SJBSJB           SET NEXT POINTER IN PREVIOUS.        31734500
         DROP  R1,R2               DROP TWO SJB BASES.                  31735000
*                                                                       31735500
*                                                                       31736000
*              DECHAIN SJB SAVE AREA AND SHOW UNLOCKED                  31736500
*                                                                       31737000
*                                                                       31737500
SJBF20   DS    0H                                                       31738000
         LH    R0,SJBLENG-SJBDSECT(,RSJB)  GET SJB LENGTH            R4 31738300
         LR    R1,RSJB             POINT R1 TO THE SJB.                 31738500
         L     R13,4(,R1)          DECHAIN SJB SAVE AREA.               31739000
         N     R12,=X'7FFFFFFF'    SHOW R13 NOT SJB POINTER.            31739500
*                                                                       31740000
*                                                                       31740500
*              FREE THE STORAGE OCCUPIED BY THE SJB                     31741000
*                                                                       31741500
*                                                                       31742000
         LR    R5,R14              SAVE RETURN ADDRESS.                 31742500
        $FREMAIN RC,A=(R1),LV=(R0),SP=241,KEY=1  FREE SJB            R4 31743000
*                                                                       31743500
*                                                                       31744000
*              RETURN TO CALLER                                         31744500
*                                                                       31745000
*                                                                       31745500
         BR    R5                  RETURN.                              31746000
         DROP  R15                 DROP LOCAL BASE.                     31746500
         TITLE '$SDBFREE -- ROUTINE TO FREE AN SDB'                     31747000
*                                                                       31747500
*                                                                       31748000
*              $SDBFREE -- ROUTINE TO FREE AN SDB                       31748500
*                                                                       31749000
*                                                                       31749500
SSDBFREE DS    0H                                                       31750000
$SDBFREE EQU   SSDBFREE                                                 31750500
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      31751000
         LR    R12,R15             ESTABLISH                            31751500
         USING $SDBFREE,R12        ADDRESSABILITY.                      31752000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              31752500
*                                                                       31753000
*              IF I/O IS ACTIVE, WAIT                                   31753500
*                                                                       31754000
         L     R1,SDBECB           LOAD ECB                         R41 31754500
SDF05    LR    R2,R1               RELOAD ECB                       R41 31754600
         N     R2,=XL4'7F000000'   RESET WAIT BIT                   R41 31754700
         CS    R1,R2,SDBECB        REPLACE ECB                      R41 31754800
         BNE   SDF05               TRY AGAIN IF UNSUCCESSFUL        R41 31754900
         WAIT  1,ECB=SDBECB        WAIT FOR I/O TO COMPLETE.            31755000
*                                                                       31755500
*              FREE ALL BUFFERS                                         31756000
*                                                                       31756500
         L     RBUF,SDBPBF         FREE ALL                             31757000
         BAL   R5,SDFBFREP         PROTECTED BUFFERS.                   31757500
         L     RBUF,SDBUBF         FREE ALL                             31758000
         BAL   R5,SDFBFREU         UNPROTECTED BUFFERS.                 31758500
         L     RBUF,SDBHBF         FREE ALL                             31759000
         BAL   R5,SDFBFREU         HOLD BUFFERS.                        31759500
         L     RBUF,SDBFBF         FREE ALL                             31760000
         BAL   R5,SDFBFREP         CH-END FREE BUFFERS.                 31760500
         L     RBUF,SDBPBFX        FREE ALL                             31761000
         BAL   R5,SDFBFREP         UNWRITTEN PROTECTED BUFFERS.         31761500
         L     R8,SDBSJB           POINT TO PROPER SJB.                 31762000
         USING SJBDSECT,R8         SET SJB ADDRESSABILITY.              31762500
         LA    R1,SJBSDB           SET UP REGISTER 1 TO                 31763000
         S     R1,=A(SDBSDB-SDBDSECT)  CHAIN SDBS FROM SJB.             31763500
SDF10    CL    RSDB,SDBSDB-SDBDSECT(,R1)  IF SUBJECT SDB IS NEXT,       31764000
         BE    SDF20               GO DECHAIN IT.                       31764500
         L     R1,SDBSDB-SDBDSECT(,R1)  ELSE POINT TO NEXT SDB.         31765000
         LTR   R1,R1               IF THERE'S A NEXT,                   31765500
         BNZ   SDF10               GO TEST ITS SDBSDB FIELD.            31766000
         B     SDF30               ELSE SKIP DECHAINING.                31766500
SDF20    MVC   SDBSDB-SDBDSECT(,R1),SDBSDB  DECHAIN SUBJECT SDB.        31767000
SDF30    DS    0H                  POTENTIAL ERROR - SDB NOT ON CHAIN.  31767500
         MVC   0(4,RSDB),SDBTCBM   SET FREEMAIN TCB POINTER.            31768000
         $FREMAIN RU,A=(RSDB),LV=SDBLNG,SP=230,KEY=5,TCB=YES            31768500
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   31769000
         BR    R14                 RETURN TO CALLER.                    31769500
*                                                                       31770000
*              SUBROUTINES TO FREE BUFFERS                              31770500
*                                                                       31771000
SDFBFREU DS    0H                                                       31771500
         USING BFD,RBUF            USE BUFFER DSECT.                    31772000
         LTR   R1,RBUF             IF NO BUFFER TO FREE,                31772500
         BZR   R5                  RETURN.                              31773000
         L     RBUF,BFBF           ELSE POINT TO NEXT BUFFER            31773500
         $FREEBUF TYPE=UNPROT,A=(R1)  AND FREE CURRENT.                 31774000
         B     SDFBFREU            THEN REPEAT.                         31774500
         SPACE 1                                                        31775000
SDFBFREP DS    0H                                                       31775500
         LTR   R1,RBUF             IF NO BUFFER TO FREE,                31776000
         BZR   R5                  RETURN.                              31776500
         L     RBUF,BFBF           ELSE POINT TO NEXT BUFFER            31777000
         $FREEBUF TYPE=PROT,A=(R1)  AND FREE CURRENT.                   31777500
         B     SDFBFREP            THEN REPEAT.                         31778000
         DROP  ,                   DROP ALL BASES.                      31778500
         TITLE 'LITERAL POOL FOR $PROLOG - $SDBFREE'                    31779000
         LTORG                                                          31779500
         TITLE 'HASP SUBSYSTEM SUPPORT MODULE -- REQUEST/RETURN JOB ID' 31780000
*********************************************************************** 31780500
*                                                                     * 31781000
*        REQUEST/RETURN JOB ID - SUBSYSTEM FUNCTIONS SSOBRQST/SSOBRTRN* 31781500
*                                                                     * 31782000
* INPUT REGISTERS -                                                   * 31782500
*                                                                     * 31783000
*        R0     = ADDRESS OF SSCVT                                    * 31783500
*        R1     = ADDRESS OF SSOB                                     * 31784000
*        R13    = SAVE AREA                                           * 31784500
*        R14    = RETURN                                              * 31785000
*        R15    = ENTRY BASE                                          * 31785500
*                                                                     * 31786000
* OUTPUT REGISTERS -                                                  * 31786500
*                                                                     * 31787000
*        R0-R14 = UNCHANGED                                           * 31787500
*        R15    = RETURN CODE                                         * 31788000
*                                                                     * 31788500
*********************************************************************** 31789000
         SPACE 2                                                        31789500
HOSREQID $PROLOG SSOBRQST,SSRRSIZE,LOCK=YES                             31790000
         SPACE 1                                                        31790500
         USING SJBDSECT,RSJB       PROVIDE SJB ADDRESSABILITY           31791000
         USING SSRQBGN,RSOX        PROVIDE SSOB EXT'N ADDRESSABILITY    31791500
         USING SSIB,RSIB           PROVIDE SSIB ADDRESSABILITY          31792000
         USING $SVDSECT,RSVT       PROVIDE SSVT ADDRESSABILITY          31792500
         SPACE 1                                                        31793000
         LTR   R12,R12             TEST FOR SJB                         31793500
         BM    HRQ010              BR IF YES                            31794000
         EJECT                                                          31794500
*                                                                       31795000
*        C R E A T E   A N   S J B                                      31795500
*                                                                       31796000
         SPACE 1                                                        31796500
         LR    R5,SAVE             SAVE ADDRESS OF USER SAVE AREA       31797000
         CALL  $SJBINIT            CREATE AN SJB                        31797500
         BALR  R12,0               RE-ESTABLISH                         31797600
         USING *,R12               ADDRESSABILITY                       31797700
         LA    R12,HRQBASE         ON                                   31797800
         USING HRQBASE,R12         RETURN.                              31797900
         BNZ   HRQFAIL             BR IF SJB NOT BUILT                  31798000
         ST    RSJB,8(,R5)         CHAIN                                31798500
         ST    R5,SJBSAVE+4         SAVE AREAS                          31799000
         L     R0,PSATOLD-PSA      SET LOCK HEADER                      31799500
         LNR   R1,R0                TO SHOW                             31800000
         STM   R0,R1,SJBLOCKH       SJB IN USE                          31800500
         MVI   SJBXQFN1+1,SSOBRQST SHOW REQUEST JOB ID FUNCTION         31801000
         ST    RSJB,SSIBSUSE       CHAIN SJB TO SSIB                    31801500
         ST    RSIB,SJBSSIB         AND SSIB TO SJB                     31802000
         OI    SJBFLG1,SJB1SJID    SHOW SELECT-BY-JOB-ID                31802500
         SPACE 1                                                        31803000
*                                                                       31803500
*        G E T   J O B   I D   F R O M   S U B S Y S T E M              31804000
*                                                                       31804500
         SPACE 1                                                        31805000
HRQ010   DS    0H                                                       31805500
         BALR  R12,0               ESTABLISH                            31806000
         USING HRQBASE,R12          ADDRESSABILITY                      31806500
         SPACE 1                                                        31807000
HRQBASE  DS    0H                                                       31807500
         MVI   SSIBJBID,1          CAUSE QUEUE TO PENDING-BY-NUM        31808000
         MVC   SJBSECB,SSRRSECB    SAVE STOP ECB ADDRESS                31808500
         SL    R12,=A(HRQBASE-HJSBASE)  GET JOB SELECT BASE             31809000
         BR    R12                 BR TO INTERFACE TO SUBSYSTEM         31809500
         SPACE 1                                                        31810000
HRQ020   DS    0H                                                       31810500
         LA    R15,SSRROK          SET 'GOOD' RETURN CODE               31811000
        $EPILOG KEY=0               AND RETURN TO REQUESTER             31811500
         SPACE 1                                                        31812000
HRQFAIL  DS    0H                                                       31812500
         BALR  R12,0               RE-ESTABLISH                         31813000
         USING *,R12                ADDRESSABILITY                      31813500
         LA    R12,0(,R12)         SHOW NO SJB                          31814000
         LA    R15,SSRRFAIL        SET 'FAILED' RETURN CODE             31814500
        $EPILOG KEY=0               AND RETURN TO REQUESTER             31815000
         EJECT                                                          31815500
HOSRETID $PROLOG SSOBRTRN,SSRRSIZE,LOCK=YES                             31816000
         SPACE 1                                                        31816500
         SL    R12,=A(*-HJEBASE)   RETURN JOB ID IS HANDLED             31817000
         USING HJEBASE,R12         SET JBTM ADDRESSABILITY              31817500
         B     HJERTRN             ENTER TERMINATION                    31818000
         SPACE 1                                                        31818500
         DROP  RSJB,RSOX,RSIB,RSVT,R12                                  31819000
         TITLE 'HOSJBSL - JOB SELECTION SUBSYSTEM FUNCTION'             31819500
*                                                                       31820000
*                                                                       31820500
*              HASP JOB SELECTION SUBSYSTEM FUNCTION                    31821000
*                                                                       31821500
*                                                                       31822000
HOSJBSL  $PROLOG SSOBJBSL,SSJSIZE,LOCK=YES                              31822500
         USING BFD,RBUF            SET BUFFER ADDRESSABILITY.           31823000
         USING JCTDSECT,R7         SET JCT ADDRESSABILITY.              31823500
         USING SSIB,RSIB           SET SSIB ADDRESSABILITY.             31824000
         USING SSJSBGN,RSOX        SET SSOB EXT ADDRESSABILITY.         31824500
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             31825000
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              31825500
         LTR   R12,R12             IF SJB ALREADY EXISTS,               31826000
         BM    HJS100              BRANCH.                              31826500
*                                                                       31827000
*                                                                       31827500
*              FIRST INITIATOR CALL - CONSTRUCT AN SJB                  31828000
*                                                                       31828500
*                                                                       31829000
         LR    R5,R13              SAVE USER SAVE AREA POINTER.         31829500
         CALL  $SJBINIT            CREATE SUBSYSTEM JOB BLOCK.          31830000
         BALR  R12,0               RE-ESTABLISH                         31830100
         USING *,R12               ADDRESSABILITY                       31830200
         LA    R12,HJSBASE         ON                                   31830300
         USING HJSBASE,R12         RETURN.                              31830400
         BNZ   HJS800              ERROR IF NO STORAGE.                 31830500
         ST    RSJB,8(,R5)         POINT USER SAVE AREA TO SJB.         31831000
         ST    R5,SJBSAVE+4        POINT SJB TO USER SAVE AREA.         31831500
         L     R0,PSATOLD-PSA      SET R0 = CURRENT TCB, R1 MINUS.      31832000
         LNR   R1,R0               SET SJB TO LOOK AS IF                31832500
         STM   R0,R1,SJBLOCKH      LOCK WERE OBTAINED.                  31833000
         MVI   SJBXQFN1+1,SSOBJBSL SHOW SJB LOCKED FOR JOB SELECT.      31833500
         ST    RSJB,SSIBSUSE       SAVE SJB POINTER IN SSIB.            31834000
         ST    RSIB,SJBSSIB        SET LIFE-OF-JOB SSIB PTR IN SJB      31834500
         OI    SJBFLG1,SJB1SJID    ASSUME SELECT-JOB-BY-JOB-ID.         31835000
*                                                                       31835500
*                                                                       31836000
*              SUBSYSTEM JOB BLOCK EXISTS - RE-ESTABLISH ADDR.          31836500
*                                                                       31837000
*                                                                       31837500
HJS100   DS    0H                                                       31838000
         BALR  R12,0               ESTABLISH PERMANENT                  31838500
         USING *,R12               LOCAL ADDRESSABILITY.                31839000
HJSBASE  DS    0H                                                       31839500
         O     R12,=X'80000000'    SHOW SJB LOCKED, SAVE AREA          C31840000
                                   CHAINED.                             31840500
*                                                                       31841000
*                                                                       31841500
*              NOW EITHER STOP INITIATOR OR SELECT JOB                  31842000
*                                                                       31842500
*                                                                       31843000
         TM    SJBFLG2,SJB2PNIT    IF WE ARE TO STOP INITIATOR,         31843500
         BO    HJS805              BRANCH.                              31844000
         SPACE 1                                                        31845500
         NI    SJBFLG1,SJB1SJID    RESET ALL FLG1 BUT SELECT-ID         31846000
         MVI   SJBFLG2,0           AND ALL OF FLG2.                     31846500
         LM    R0,R1,SSIBJBID      GET REQUESTED JOB ID FROM SSIB       31847000
         STM   R0,R1,SJBJOBID      AND PUT IT IN THE SJB.               31847500
         ALR   R0,R1               IS ANY JOB ID SPECIFIED...           31848000
         BNZ   *+8                 SKIP IF SELECT-BY-ID.                31848500
         NI    SJBFLG1,255-SJB1SJID  ELSE SHOW SELECT-BY-CLASS.         31849000
         TM    SJBFLG1,SJB1SJID    IF SYSTEM TASK,                      31849500
         BO    HJS150              DON'T DECREMENT $SVPIDLE.            31850000
         L     R0,$SVPIDLE         GET INITIATOR COUNTER.               31850500
HJS140   DS    0H                                                       31851000
         LTR   R1,R0               IF NOT POSITIVE,                     31851500
         BNP   HJS800              STOP THIS INITIATOR.                 31852000
         BCTR  R1,0                DECREMENT COUNT BY ONE               31852500
         CS    R0,R1,$SVPIDLE      AND STORE NEW COUNT.                 31853000
         BNE   HJS140              IF INTERFERENCE, CHECK AGAIN.        31853500
HJS150   DS    0H                                                       31854000
* SELECT JOB BY ID OR BY CLASS ACCORDING TO SJB1SJID                    31854500
         CALL  $SVJLOK             ACQUIRE HASP CMS LOCK.               31855000
         NI    SJBFLG2,255-SJB2CNCL  RESET THE CANCEL FLAG.             31855500
         LA    R1,$SVJPCLS         ASSUME SELECT-JOB-BY-CLASS.          31856000
         TM    SJBFLG1,SJB1SJID    IF SELECT-BY-ID FLAG IS OFF,         31856500
         BZ    *+8                 SKIP.                                31857000
         LA    R1,$SVJPNUM         SET SELECT-BY-ID QUEUE.              31857500
         SLR   R0,R0               ZERO OUT                             31858000
         ST    R0,SJBECB           THE ECB.                             31858500
         CALL  $SJBRQ              QUEUE SJB PENDING JOB.               31859000
         CALL  $SVJUNLK            RELEASE HASP CMS LOCK.               31859500
         $$POST ELMT=$SVJOB        POST HASPXEQ FOR JOB.                31860000
         WAIT  1,ECB=SJBECB        WAIT TILL HASP SELECTS JOB.          31860500
*                                                                       31861000
*                                                                       31861500
*              EXAMINE STATUS AFTER XEQ HAS POSTED US                   31862000
*                                                                       31862500
*                                                                       31863000
         TM    SJBFLG2,SJB2PNIT    IF HASP WANTS INIT STOPPED,          31863500
         BO    HJS805              BRANCH.                              31864000
         TM    SJBFLG2,SJB2JNFD    IF JOB-BY-ID NOT FOUND,              31864500
         BO    HJS850              BRANCH.                              31865000
*                                                                       31865500
*                                                                       31866000
*              A JOB HAS BEEN FOUND FOR THIS INITIATOR                  31866500
*                                                                       31867000
*                                                                       31867500
HJS200   DS    0H                                                       31868000
         TIME  BIN                 GET JOB'S STARTING TIME & DATE.      31868500
         STM   R0,R1,SJBDBLWK      SAVE TEMPORARILY IN SJB.             31869000
*                                                                       31869500
*                                                                       31870000
*              GET STORAGE FOR JCT, IF REQUIRED                         31870500
*                                                                       31871000
*                                                                       31871500
         L     R1,SJBJCT           IS JCT STORAGE                       31872000
         LTR   R1,R1               ALREADY ASSIGNED...                  31872500
         BNZ   HJS210              BRANCH IF SO.                        31873000
         CALL  HCBGM               GET JCT STORAGE.                     31873500
         BNZ   HJS830              ERROR IF NO STORAGE.                 31874000
         ST    R1,SJBJCT           SAVE JCT POINTER IN SJB.             31874500
HJS210   DS    0H                                                       31875000
*                                                                       31875500
*                                                                       31876000
*              READ IN THE HASP JOB CONTROL TABLE                       31876500
*                                                                       31877000
*                                                                       31877500
         L     R0,SJBJCTRK         SET R0 = JCT TRACK ADDRESS.          31878000
         CALL  HCBRD               READ IN THE JCT.                     31878500
         LR    R7,R1               SET JCT ADDRESSABILITY.              31879000
         BZ    HJS220              BRANCH IF JCT READ OKAY.             31879500
         CALL  HCBFM               ELSE FREE JCT STORAGE.               31880000
         SLR   R7,R7               ZERO OUT THE JCT POINTER             31880500
         ST    R7,SJBJCT           IN THE SJB.                          31881000
         B     HJS840              ERROR READING JCT.                   31881500
HJS220   DS    0H                                                       31882000
*                                                                       31882500
*                                                                       31883000
*              MOVE JOB IDENTIFIERS TO SJB AND SSIB                     31883500
*                                                                       31884000
*                                                                       31884500
         TM    JCTJOBFL,JCTNOJNL   TEST FOR JOB JOURNALLING          R4 31884600
         BO    SKIP10              BR IF NO                          R4 31884700
         OI    SJBFLG2,SJB2JNL      ELSE INDICATE SO IN SJB          R4 31884800
SKIP10   MVC   JCTXEQON(8),SJBDBLWK  SET DATE, TIME OF JOB START.       31885000
         MVC   SJBJOBNM,JCTJNAME   SET JOB NAME IN SJB.                 31885500
         TM    SJBFLG1,SJB1XBMC    IF XBM CONTINUATION,                 31885600
         BO    *+12                 HAVE NO SSIB.                       31885700
         LM    R0,R1,SJBJOBID      GET HASP JOB IDENTIFIER.             31886000
         STM   R0,R1,SSIBJBID      SET IT IN SSIB.                      31886500
         SLR   R0,R0               ZERO OUT                             31887000
         ST    R0,SJBLOGQ          SJBLOGQ.                             31887500
         MVC   JCTPRIO,SJBPRIO     MOVE SELECTION PRTY TO JCT.          31888000
         MVC   SJBESTLN,JCTESTLN   SET PRINT AND PUNCH                  31888500
         MVC   SJBESTPU,JCTESTPU   EXCESSION LIMITS.                    31889000
         SPACE 1                                               @OZ18212 31889100
         SPACE 1                                               @OZ18212 31889200
         MVC   JCTCPUID,$SVSID     SET SYS ID IN JMR AND       @OZ18212 31889300
         MVC   JCTEXSID,$SVSID      JCT FOR SMF TYPE 26        @OZ18212 31889400
         OI    JCTFLAG1,JCT1CKPT   FLAG JCT FOR CHECKPOINT          R41 31889500
         CLI   SJBXQFN1+1,SSOBRQST TEST FOR REQUEST-JOB-ID           R4 31889600
         BE    HJS250              BR IF YES                         R4 31889700
*                                                                       31891700
*                                                                       31891800
*              SET CONVERTER RETURN CODE IN THE SSOB EXTENSION          31891900
*                                                                       31892000
*                                                                       31892100
         TM    SJBFLG1,SJB1SJID    IF THIS JOB IS                       31892200
         BZ    *+16                SELECT-BY-ID,                        31892500
         ICM   R0,15,JCTCNVRC      MOVE CONVERTER RETURN CODE           31893000
         ST    R0,SSJSSERR         TO SSOB.                             31893500
         BNZ   HJS560              TERMINATE IF ANY ERROR DETECTED.     31894000
*                                                                       31894500
*                                                                       31895000
*              IF EXECUTION BATCH MONITOR CONTINUATION,                 31895500
*              SET NEW JOB KEY IN ALL SDBS.                             31896000
*                                                                       31896500
*                                                                       31897000
         TM    SJBFLG1,SJB1XBMC    IF NOT XBM CONTINUATION,             31897500
         BZ    HJS250              BRANCH.                              31898000
         L     R0,SJBJKEY          SET R0 = JOB KEY.                    31898500
         L     R1,SJBSDB           POINT TO FIRST SDB.                  31899000
HJS230   DS    0H                                                       31899500
         LTR   R1,R1               IF END OF SDBS,                      31900000
         BZ    HJS240              END LOOP.                            31900500
         USING SDBDSECT,R1         SET SDB ADDRESSABILITY.              31901000
         ST    R0,SDBJKEY          SET JOB KEY IN SDB.                  31901500
         L     R1,SDBSDB           POINT TO NEXT SDB                    31902000
         B     HJS230              AND LOOP.                            31902500
HJS240   DS    0H                                                       31903000
         DROP  R1                  DROP SDB ADDRESSABILITY.             31903500
*                                                                       31904000
*                                                                       31904500
*              IF EXECUTION BATCH MONITOR CONTINUATION,                 31905000
*              READ NEW INPUT IOT, COPY THE 'JCL' PDDB                  31905500
*              AND TRACK GROUP MAP TO THE OLD 1ST IOT AND               31906000
*              GET NEW TRACKS FOR ANY OTHER OLD IOTS.                   31906500
*                                                                       31907000
*                                                                       31907500
         L     RIOT,SJBIOT         SAVE POINTER TO PREVIOUS 1ST IOT.    31908000
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              31908500
         LA    R2,JCTIOT           SET TRACK CHAIN POINTER.             31909000
         LA    R3,SJBIOT           SET DUMMY STORAGE CHAIN POINTER.     31909500
         BAL   R4,HJSRDIOT         READ IN THE ONLY IOT.                31910000
         ST    RIOT,SJBIOT         RESTORE POINTER TO PREVIOUS 1ST IOT. 31910500
         L     R15,$SVMAPL              COPY                         R4 31911000
         LA    R15,TGMAP-TGMDSECT(,R15)  ALL                         R4 31911200
         LA    R14,IOTTGMAP               TGM                        R4 31911400
         LA    R4,IOTTGMAP-IOTDSECT(,R1)   FIELDS                    R4 31911600
         LR    R5,R15                       TO                       R4 31911800
         MVCL  R14,R4                        OLD IOT                 R4 31912000
         L     RIOT,SJBIOT         RESTORE IOT ADDRESS               R4 31912200
         MVC   IOTMSTAB(TABAIOT-TABDSECT),IOTMSTAB-IOTDSECT(R1)     R41 31912300
         OI    JCTFLAG1,JCT1CKPT   FLAG JCT FOR CHECKPOINT           R4 31912400
         L     R15,$SVPDDB1           MOVE                           R4 31912600
         LA    R14,IOTPDBOJ(R15,RIOT)  JCL                           R4 31912800
         LA    R4,IOTPDBOJ(R15,R1)      PDDB                         R4 31913000
         MVC   0(PDBLENG,R14),0(R4)      TO OLD IOT                  R4 31913200
         OI    PDBFLAG1-PDBDSECT(R14),PDB1NSOT  DON'T LET JCL PRINT  R4 31913400
         MVC   IOTTRACK,JCTIOT     MOVE NEW IOT TRK ADDR TO OLD IOT.    31913600
         CALL  HCBFM               FREE NEW IOT STORAGE                 31914000
         SLR   R2,R2               SET R2 TO ZERO.                      31914500
         LA    R4,IOTMSTAB         SET R4 TO MASTER TAB FOR $STRAK   R4 31914600
HJS246   DS    0H                                                       31915500
         MVC   IOTJBKEY,SJBJKEY    SET KEY IN OUTPUT IOT.               31916000
         OI    IOTFLAG1,IOT1CKPT   FLAG IOT FOR CHECKPOINT.             31916500
         ST    R2,IOTIOTTR         ZERO TRACK CHAIN POINTER.            31917000
         L     R3,IOTIOT           IF NO MORE                           31917500
         LTR   R3,R3               OUTPUT IOTS,                         31918000
         BZ    HJS570              CONTINUE WITH XBMC WORK.             31918500
         LR    R1,R4               ELSE POINT TO ALLOC TGM &            31919000
         CALL  $STRAK              GET TRACK FOR NEXT IOT.              31919500
         ST    R1,IOTIOTTR         SET CHAINING TRACK.                  31920000
         LR    RIOT,R3             POINT TO NEXT IOT.                   31920500
         ST    R1,IOTTRACK         SET ITS TRACK IN IT.                 31921000
         B     HJS246              GO DO THIS NEXT IOT.                 31921500
*                                                                       31922000
*                                                                       31922500
*              FOR NON-EXECUTION BATCH MONITOR CONTINUATION,            31923000
*              READ IN THE REGULAR IOT(S)                               31923500
*                                                                       31924000
*                                                                       31924500
HJS250   DS    0H                                                       31925000
         LA    R2,JCTIOT           SET TRACK CHAIN POINTER.             31925500
         LA    R3,SJBIOT           SET STORAGE CHAIN POINTER.           31926000
         BAL   R4,HJSRDIOT         READ ALL REGULAR IOTS.               31926500
*                                                                       31927000
*                                                                       31927500
*              READ IN JOB'S OUTPUT CONTROL RECORD(S)          @OZ19486 31928000
*                                                                       31928500
*                                                                       31929000
         L     R1,SJBOCT           GET OCR STORAGE ADDRESS.             31929500
         TM    SJBFLG1,SJB1XBM     IF BATCH MONITOR,                    31930000
         BO    HJS300              DON'T READ OCTS.                     31930500
         L     R0,JCTOCTTR         GET OCR TRACK ADDRESS.               31931000
         LTR   R0,R0               IF JOB HAS NO OCR,                   31931500
         BZ    HJS310              GO FREE OCR STORAGE.                 31932000
         LTR   R1,R1               JOB HAS OCR.  IF OCR STORAGE         31932500
         BNZ   HJS280              ADDRESS EXISTS, GO READ IT.          31933000
         CALL  HCBGM               ELSE GET OCR STORAGE.                31933500
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        31934000
         ST    R1,SJBOCT           SET POINTER TO OCR IN SJB.           31934500
HJS280   DS    0H                                                       31935000
         CALL  HCBRD               READ IN THE OCR.                     31935500
         BNZ   HJS840              ERROR - CAN'T READ OCR.     @OZ19486 31936000
         ICM   R0,15,OCTOCTTR-OCTDSECT(R1) TTR OF NXT OCT      @OZ19486 31936100
         BZ    HJS320              NO MORE, EXIT LOOP          @OZ19486 31936200
         LR    R5,R1               SAVE ADDRESS OF OCT N       @OZ19486 31936300
         CALL  HCBGM               GET STORAGE FOR OCT N+1     @OZ19486 31936400
         BNZ   HJS830              IF NO STORAGE, ABORT        @OZ19486 31936500
         ST    R1,OCTOCT-OCTDSECT(,R5) CHAIN OCT N+1           @OZ19486 31936600
         B     HJS280              LOOP TO READ OCT N+1        @OZ19486 31936700
         SPACE 2                                               @OZ19486 31936800
HJS300   DS    0H                                                       31937000
         L     RIOT,SJBIOT         POINT TO THE 1ST IOT.                31937500
         AL    RIOT,$SVPDDB1                             DON'T PRINT R4 31938000
         OI    IOTPDBOI+PDBFLAG1-PDBDSECT(RIOT),PDB1NSOT  JCL IMAGES R4 31938300
HJS310   DS    0H                                                       31938500
         CALL  HCBFM               FREE OCR STORAGE                     31939000
         SLR   R0,R0               AND ZERO                             31939500
         ST    R0,SJBOCT           OCR POINTER IN SJB.                  31940000
HJS320   DS    0H                                                       31940500
*                                                                       31941000
*                                                                       31941500
*              IF JOB SELECT CODE IS BEING USED BY                      31942000
*              REQUEST-JOB-ID FUNCTION, RETURN THERE                    31942500
*                                                                       31943000
*                                                                       31943500
         CLI   SJBXQFN1+1,SSOBRQST IF NOT REQUEST-JOB-ID,               31944000
         BNE   HJS340              CONTINUE.                            31944500
         SL    R12,=A(HJSBASE-HRQBASE)  SET BASE TO HOSRQST.            31945000
         USING HRQBASE,R12         TELL THE ASSEMBLER.                  31945500
         B     HRQ020              RETURN TO HOSRQST CODE.              31946000
HJS340   DS    0H                                                       31946500
         USING HJSBASE,R12         RESET LOCAL ADDRESSABILITY.          31947000
*                                                                       31947500
*                                                                       31948000
*              PRIOR TO FAKE-OPENS, ALTER ADDRESSABILITY                31948500
*                                                                       31949000
*                                                                       31949500
         DROP  RSOX                DROP RSOX TO PICK UP RSDB.           31950000
         LR    RSIB,RSOX           POINT RSIB (R8) TO SSOB EXT.         31950500
         USING SSJSBGN,RSIB        SET SSOB EXT ADDRESSABILITY.         31951000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              31951500
*                                                                       31952000
*                                                                       31952500
*              MOVE CERTAIN INFORMATION TO SSOB EXTENSION               31953000
*                                                                       31953500
*                                                                       31954000
*                                                                    R4 31954100
*                      PERFORM PASSWORD PROCESSING                   R4 31954200
*                                                                    R4 31954300
         LA    R3,$JSPSLEN         GET NECESSARY LENGTH FOR PASSWRDS R4 31954400
         CH    R3,SSJSLEN          COMPARE TO ACTUAL LENGTH          R4 31954500
         BH    HJS350              BR IF NOT LONG ENOUGH             R4 31954600
         LA    R3,JCTPASS          GET ADDR OF JCT CURRENT PASS      R4 31954900
         LA    R1,SSJSPASS         GET ADDR OF SSOB CURRENT PASS     R4 31955000
         BAL   R14,HJS345          BR TO MOVE FROM JCT TO SSOB       R4 31955100
         LA    R3,JCTNUPAS         GET ADDR OF JCT NEW PASS          R4 31955400
         LA    R1,SSJSPAS2         GET ADDR OF SSOB NEW PASS         R4 31955500
         BAL   R14,HJS345          BR TO MOVE FROM JCT TO SSOB       R4 31955600
         CLI   JCTNUPAS,X'00'      TEST FOR NEW PASSWORD             R4 31955700
         BE    HJS350              BR IF NO NEW PASSWORD             R4 31955800
         MVC   JCTPASS,JCTNUPAS    MOVE NEW PASS TO CURRENT FIELD    R4 31955900
         XC    JCTNUPAS,JCTNUPAS   ZERO NEW PASSWORD FIELD           R4 31956000
         B     HJS350              THEN BR TO CONTINUE               R4 31956100
         SPACE 2                                                     R4 31956200
*                                                                    R4 31956300
*                                                                    R4 31956400
*        JOB SELECT SUBROUTINE TO MOVE PASSWORDS FROM JCT TO SSOB    R4 31956500
*                                                                    R4 31956600
*                                                                    R4 31956700
HJS345   LR    R15,R1              SAVE SSOB ADDR                    R4 31956800
         MVC   1(8,R1),0(R3)       STORE PASSWRD IN SSOB             R4 31956900
         LA    R3,8                GET SIZE OF MAX PASSWORD          R4 31957000
         SPACE 1                                                     R4 31957100
HJS346   TM    8(R1),X'BF'         CHECK END OF FIELD FOR BLANK/ZERO R4 31957200
         BNZ   HJS347              BR IF END OF PASSWORD             R4 31957300
         BCTR  R1,0                BACK UP ONE BYTE                  R4 31957400
         BCT   R3,HJS346           SUBT TO GET VALID CHAR NUM        R4 31957500
         SPACE 1                                                     R4 31957600
HJS347   DS    0H                  END OF PASSWORD FOUND             R4 31957700
         STC   R3,0(R15)           STORE LENGTH OF PASSWORD          R4 31957800
         BR    R14                 RETURN                            R4 31957900
         SPACE 1                                                     R4 31958000
$JSPSLEN EQU   SSJSPAS2+L'SSJSPAS2-SSJSBGN EXT'N LEN NEEDED FOR PWDS R4 31958100
         EJECT                                                       R4 31958200
HJS350   DS    0H                                                    R4 31958300
         MVC   SSJSSTEP,JCTJSSTP   MOVE RESTART STEP TO SSOBX.          31958400
         NI    JCTJSFLG,255-SSRQHOLD  RESET RESTART HOLD FLAG.          31958500
         MVC   SSJSFLG1,JCTJSFLG   MOVE RESTART FLAGS TO SSOBX.         31958600
         LA    R0,JCTJMR           SET JMR POINTER                      31958700
         ST    R0,SSJSJMR          IN SSOB EXTENSION.                   31958800
*                                                                       31958900
*                                                                       31959000
*              FAKE-OPEN INTERNAL TEXT DATA SET                         31959100
*                                                                       31959200
*                                                                       31959300
         TM    SJBFLG1,SJB1XBM     IF NOT XBM,                          31959500
         BZ    *+8                 SKIP.                                31960000
         OI    JCTJOBFL,JCTNOJNL   PREVENT JOURNALING.                  31960500
         LA    R3,SJBIACB          POINT TO ACB.                        31961000
         ST    R3,SSJSTACB         STORE POINTER IN SSOBX.              31961500
         L     RIOT,SJBIOT         POINT TO THE 1ST IOT.                31962000
         L     R15,$SVPDDB1          POINT TO                        R4 31962100
         LA    R0,IOTPDBOT(RIOT,R15)  INTERNAL TEXT PDDB             R4 31962200
         CALL  HFOPSUB             CREATE AN SDB.                       31962500
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        31963000
         MVC   SDBDDNM,=CL8'$INTTEXT'  SHOW EBCDIC INTTEXT.             31963500
         CALL  HOOLDINP            OPEN INTERNAL TEXT DATA SET.         31965000
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        31965500
         CALL  HCNVFDAD            SET STARTING TRACK IN IOB.           31966000
         OI    SDBFLG2,SDB2IOA     SHOW I/O ACTIVE.                     31966500
         EXCP  SDBIOB              PRIME THE DATA SET.                  31967000
         WAIT  1,ECB=SDBECB        WAIT FOR I/O TO END.                 31967500
*                                                                       31968000
*                                                                       31968500
*              FAKE-OPEN JOB JOURNAL DATA SET                           31969000
*                                                                       31969500
*                                                                       31970000
         TM    JCTJOBFL,JCTNOJNL   IF JOB IS TO JOURNAL,                31970500
         BZ    HJS360              BRANCH.                              31971000
* IF NO JOB JOURNAL EXISTS ---                                          31971500
         SLR   R3,R3               ZERO OUT JOURNAL                     31972000
         ST    R3,SSJSJACB         ACB POINTER IN SSOBX.                31972500
         B     HJS440              ELSE CONTINUE FAKE OPEN.             31973000
HJS360   DS    0H                                                       31973500
* IF JOB JOURNAL EXISTS ---                                             31974000
         LA    R3,SJBJACB          POINT TO JOURNAL ACB.                31974500
         ST    R3,SSJSJACB         SET POINTER IN SSOBX.                31975000
         L     R15,$SVPDDB1          POINT TO                        R4 31975100
         LA    R0,IOTPDBON(RIOT,R15)  JOB JOURNAL PDDB               R4 31975200
         CALL  HFOPSUB             CREATE SDB  (R1=PDDB ON RETURN)   R4 31975300
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        31976000
         MVC   SDBDDNM,=CL8'$JOURNAL'  SHOW EBCDIC JOURNAL.             31976500
* IF NEW JOURNAL, OPEN FOR OUTPUT                                       31978000
         CLI   SSJSFLG1,0          IF RESTART FLAGS NOT ALL OFF,        31978500
         BNE   HJS400              OPEN JOURNAL FOR INPUT.              31979000
HJS380   DS    0H                                                       31979500
         CALL  HONEWOUT            OPEN JOURNAL FOR OUTPUT.             31980000
         BZ    HJS440              CONTINUE IF OKAY.                    31980500
         B     HJS830              ERROR - NO STORAGE AVAILABLE.        31981000
HJS400   DS    0H                                                       31981500
* IF OLD JOURNAL, OPEN FOR INPUT, READ, AND WAIT                        31982000
         USING PDBDSECT,R1         SET PDDB ADDRESSABILITY.             31982500
         TM    PDBFLAG1,PDB1NULL   IF JOURNAL NEVER USED,               31983000
         BO    HJS380              TRY TO OPEN FOR OUTPUT.              31983500
         CALL  HOOLDINP            OPEN JOURNAL FOR INPUT.              31984000
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        31984500
         CALL  HCNVFDAD            SET TRACK ADDRESS IN IOB.            31985000
         OI    SDBFLG2,SDB2IOA     SHOW I/O ACTIVE.                     31985500
         EXCP  SDBIOB              START FIRST READ OF JOURNAL.         31986000
         WAIT  1,ECB=SDBECB        WAIT FOR ITS COMPLETION.             31986500
         TM    SDBFLG2,SDB2IOE     IF NO I/O ERROR,                     31987000
         BZ    HJS440              CONTINUE.                            31987500
         NI    SSJSFLG1,255-SSJSWARM  IF MORE THAN WARM START,          31988000
         BNZ   HJS440              LEAVE JOURNAL AS INPUT.              31988500
* ON WARM START, JOB JOURNAL DIDN'T MAKE IT.  THE JOB NEVER GOT         31989000
* INITIATED.  RESET JOURNAL TO OUTPUT.                                  31989500
         $FREEBUF TYPE=PROT,A=SDBPBF  FREE PROTECTED BUFFER.            31990000
         SLR   R0,R0               CLEAR REGISTER                    R4 31990100
         ST    R0,SDBPBF           CLEAR POINTER TO PBF              R4 31990200
         $FREEBUF TYPE=UNPROT,A=SDBUBF  FREE UNPROTECTED BUFFER.        31990500
         SLR   R0,R0               ZERO JOURNAL SDB'S                   31991000
         STH   R0,SDBFLG1          FLAG BYTES 1 AND 2.                  31991500
         ST    R0,SDBUBF           CLEAR POINTER TO UBF              R4 31991600
         L     R7,SJBJCT           RESTORE JCT ADDRESS              R41 31991700
         B     HJS380              GO OPEN JOURNAL FOR OUTPUT.          31992000
HJS440   DS    0H                                                       31992500
*                                                                       31993000
*                                                                       31993500
*              FAKE-OPEN SYSTEM MESSAGES DATA SET                       31994000
*                                                                       31994500
*                                                                       31995000
         LA    R3,SJBMACB          POINT TO SYSMSG ACB.                 31995500
         ST    R3,SSJSMACB         STORE ACB POINTER IN SSOBX.          31996000
         L     R15,$SVPDDB1          POINT TO                        R4 31996100
         LA    R0,IOTPDBOM(RIOT,R15)  SYSTEM MESSAGES PDDB           R4 31996200
         CALL  HFOPSUB             CREATE SDB  (R1=PDDB ON RETURN)   R4 31996300
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        31997000
         MVC   SDBRECCT,PDBRECCT-PDBDSECT(R1) BEGIN REC CNT    @OZ19451 31997250
         OI    SDBFLG1,SDB1OUT     SHOW DATA SET SYSOUT.                31997500
         MVC   SDBDDNM,=CL8'$SYSMSGS'  SHOW EBCDIC SYSMSGS.             31998000
         NI    PDBFLAG1,255-PDB1NULL  SHOW DATA SET OPENED.          R4 31998100
         L     WA,JCTMSGSC         GET CONTINUATION TRACK           R41 31999000
         BAL   WE,HJSREOPN         REPOSITION DS IF WARM START      R41 31999100
         BNZ   HJSOPNOL            BR IF WARM START                 R41 31999200
         SPACE 1                                                    R41 31999300
         L     R0,PDBMTTR          GET STARTING MTTR IN R0.             32000000
         DROP  R1                  DROP PDDB BASE.                      32000500
         LA    R1,X'100'           CONVERT MTTR                         32001000
         SRDL  R0,8                TO RBA AND STORE IN                  32001500
         STM   R0,R1,SDBTRKF       SDB AS STARTING RBA.                 32002000
         CALL  HOOLDOUT            OPEN FOR OUTPUT.                     32002500
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        32003000
         L     R0,JCTMSGSC         GET SYSMSG CONTINUATION TRACK.       32003500
         CALL  HJSRETAB            REBUILD TRACK ALLOC. BLOCK       R41 32003700
         LA    R1,X'100'           CHANGE IT TO                         32004000
         SRDL  R0,8                RBA FORMAT.                          32004500
         STM   R0,R1,SDBTRK        SET RBA IN SDBTRK.                   32005000
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         32005500
         STM   R0,R1,BFRBA         SET RBA IN BFRBA.                    32006000
*                                                                       32006500
*                                                                       32007000
*              FAKE-OPEN HASP JOB LOG DATA SET                          32007500
*                                                                       32008000
*                                                                       32008500
HJSOPNOL DS    0H                                                   R41 32008600
         LA    R3,SJBLACB          POINT TO HASP LOG ACB.               32009000
         L     R15,$SVPDDB1          POINT TO                        R4 32009100
         LA    R0,IOTPDBOL(RIOT,R15)  HASP JOB LOG PDDB              R4 32009200
         CALL  HFOPSUB             CREATE SDB  (R1=PDDB ON RETURN)   R4 32009300
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        32010000
         MVC   SDBRECCT,PDBRECCT-PDBDSECT(R1) BEGIN REC CNT    @OZ19451 32010250
         OI    SDBFLG1,SDB1OUT     SHOW DATA SET SYSOUT.                32010500
         MVC   SDBDDNM,=CL8'$JES2LOG'  SHOW EBCDIC JES2LOG.             32011000
         NI    PDBFLAG1-PDBDSECT(R1),255-PDB1NULL  SHOW DATASET OPENED. 32012500
         L     WA,JCTJLOGC         GET CONTINUATION TRACK           R41 32012600
         BAL   WE,HJSREOPN         REPOSITION DS IF WARM START      R41 32012700
         BNZ   HJS550              BR IF WARM START                 R41 32012800
         SPACE 1                                                    R41 32012900
         CALL  HOOLDOUT            OPEN DATA SET FOR OUTPUT.            32013000
         BNZ   HJS830              ERROR - NO STORAGE AVAILABLE.        32013500
         L     R0,JCTJLOGC         GET CONTINUATION TRACK.              32014000
         CALL  HJSRETAB            REBUILD TRACK ALLOC. BLOCK       R41 32014300
         LA    R1,X'100'           CONVERT IT TO                        32014500
         SRDL  R0,8                RBA FORMAT.                          32015000
         STM   R0,R1,SDBTRK        SET RBA IN SDBTRK.                   32015500
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         32016000
         STM   R0,R1,BFRBA         SET RBA IN BFRBA.                    32016500
HJS550   DS    0H                                                   R41 32016600
         L     R0,SSJSJACB         IF JOB HAS                           32017000
         LTR   R0,R0               NO JOURNAL                           32017500
         BNZ   HJS560              DATA SET, BUT WILL                   32018000
         CLI   SSJSFLG1,0          WARM START OR RESTART,               32018500
         BNE   HJS870              WRITE MESSAGE.                       32019000
HJS560   DS    0H                                                       32019500
*                                                                       32023000
*                                                                       32023500
*              CONCLUDE JOB SELECTION                                   32024000
*                                                                       32024500
*                                                                       32025000
         TM    SJBFLG1,SJB1SJID    IF SELECT-BY-ID,                     32025500
         BO    HJS575              BRANCH.                              32026000
HJS570   DS    0H                                                       32026500
         TM    $SVSTUS,$SVSTXST    IF HASP IS NOT MONITORING            32027000
         BZ    HJS575              TIME EXCESSIONS, BRANCH.             32027500
*                                                                       32028000
*                                                                       32028500
*        ALLOW HASP TO MONITOR TIME EXCESSIONS                          32029000
*                                                                       32029500
*                                                                       32030000
         L     R1,JCTETIME         PROVIDE HASP                         32030500
         LNR   R1,R1                WITH INITIAL                        32031000
         ST    R1,SJBXSTIM           TIME INTERVAL                      32031500
         $$POST ELMT=$SVXSTIM      POST HASPTIME FOR WORK               32032000
HJS575   DS    0H                                                       32032500
         TM    SJBFLG1,SJB1XBMC    IF XBM CONTINUATION,                 32033000
         BO    HJS600              RETURN TO HAMGET.                    32033500
*                                                                       32034000
*                                                                       32034500
*              CALL IEFIB600, THE SCHEDULER WORK AREA CREATOR           32035000
*                                                                       32035500
*                                                                       32036000
         TM    SJBFLG1,SJB1SJID    IF NOT SELECT-BY-ID,                 32036500
         BZ    HJS580              DON'T CHECK CONVERTER CODE.          32037000
         L     R0,SSJSSERR         EXAMINE CONVERTER                    32037500
         LTR   R0,R0               COMPLETION CODE.                     32038000
         BNZ   HJS830              IF NON-ZERO, SKIP IEFIB600.          32038500
HJS580   DS    0H                                                       32039000
         TM    SJBFLG1,SJB1XBM     TEST FOR XBM.               @OZ26957 32039020
         BZ    HJS582              NOT XBM, SKIP.              @OZ26957 32039040
         CALL  HCBGM               GET DUMMY JCT BUFFER.       @OZ26957 32039060
         BNZ   HJS830              ERROR IF NO STORAGE.        @OZ26957 32039080
*            PREPARE DUMMY JCT TO REPRESENT XBM      *         @OZ26957 32039100
         DROP  R7                  DROP PREVIOUS JCT BASE      @OZ26957 32039105
         USING JCTDSECT,R1         MAKE NEW JCT ADDRESSABLE    @OZ26957 32039110
         MVC   JCTJMRST(L'JCTJMR),JCTJMRST-JCTDSECT(R7)        @OZ26957 32039120
         MVC   JCTJMRJN(8),SJBXBJNM   SUBSTITUTE XBM JOBNAME.  @OZ26957 32039140
         LR    R7,R1               PRESERVE DUMMY JCT ADDR.    @OZ26957 32039160
         DROP  R1                  DROP CURRENT JCT BASE       @OZ26957 32039165
         USING JCTDSECT,R7         USE PREV. BASE FOR NEW JCT  @OZ26957 32039170
         $TIME                     GET CURRENT TIME AND DATE.  @OZ26957 32039180
         STM   R0,R1,JCTRDRON      XBM TIME ON READER          @OZ26957 32039200
         STM   R0,R1,JCTRDROF        IS VERY BRIEF.            @OZ26957 32039220
         LA    R1,JCTJMR           SET XBM JMR POINTER         @OZ26957 32039240
         ST    R1,SSJSJMR            IN SSOB EXT.              @OZ26957 32039260
HJS582   DS    0H                                              @OZ26957 32039280
         L     R1,4(,R13)          POINT R1                             32039500
         L     R1,24(,R1)          TO USER'S SSOB.                      32040000
         SPACE 1                                                        32040500
         LINK  EP=IEFIB600         LINK TO IEFIB600.                    32041000
         SPACE 1                                                        32041500
         ST    R15,SSJSSERR        SAVE IEFIB600 RETURN CODE.           32042000
         TM    SJBFLG1,SJB1XBM     TEST FOR XBM.               @OZ26957 32042020
         BZ    HJS587              SKIP IF NOT.                @OZ26957 32042040
         LR    R1,R7               RESTORE DUMMY JCT ADDR.     @OZ26957 32042060
         L     R7,SJBJCT           RESTORE USER'S JCT ADDR.    @OZ26957 32042070
         CALL  HCBFM               FREE DUMMY JCT BUFFER.      @OZ26957 32042080
HJS587   DS    0H                                              @OZ26957 32042090
         BAL   R14,HJSMSG1         WTO 'HASP373 STARTED'.               32042100
         L     R15,SSJSSERR        GET IEFIB600 RETURN CODE.            32042200
         LTR   R15,R15             IF CODE IS ZERO,                     32042500
         BZ    HJS590              CONTINUE.                            32043000
         TM    SJBFLG1,SJB1SJID    IF NON-ZERO CODE,                    32043500
         BO    HJS830              END INITIATOR IF SELECT-ID.          32044000
         B     HJS840              IN ANY CASE TERMINATE JOB.           32044500
HJS590   DS    0H                                                       32045000
*                                                                       32045500
*                                                                       32046000
*              PROCESS OPERATOR CANCEL AND SET SJBCSCB                  32046500
*                                                                       32047000
*                                                                       32047500
         L     R1,SSJSLCT          POINT TO LINKAGE CONTROL TABLE.      32048000
         USING LCTDSECT,R1         SET LCT ADDRESSABILITY.              32048500
         L     R1,LCTQDRTY         POINT TO CSCB FROM LCT.              32049000
         USING CSCDSECT,R1         SET CSCB ADDRESSABILITY.             32049500
         ST    R1,SJBCSCB          SAVE CSCB POINTER IN SJB.            32050000
         TM    SJBFLG2,SJB2CNCL    IF NOT OPERATOR CANCEL,              32050500
         BZ    HJS595              PROCEED.                             32051000
         OI    CHACT,CHCLD         SHOW CANCEL OF WHOLE JOB.            32051500
         MVC   CHCECB,=X'40000222' POST CANCEL ECB.                     32052000
         DROP  R1                  DROP CSCB BASE.                      32052500
HJS595   DS    0H                                                       32053000
*                                                                       32053500
*                                                                       32054000
*              IF JOURNAL WAS OPEN FOR INPUT, CHANGE IT TO OUTPUT       32054500
*                                                                       32055000
*                                                                       32055500
         L     RSDB,SSJSJACB       POINT TO JOURNAL ACB.                32056000
         LTR   RSDB,RSDB           IF NO JOURNAL,                       32056500
         BZ    HJS900              JUST RETURN TO INITIATOR.            32057000
         USING IFGACB,RSDB         SET ACB ADDRESSABILITY.              32057500
         L     RSDB,ACBDEB-1       POINT FROM ACB TO DEB.               32058000
         USING DEBBASIC,RSDB       SET DEB ADDRESSABILITY.              32058500
         L     RSDB,DEBIRBAD       POINT FROM DEB TO SDB.               32059000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              32059500
         TM    SDBFLG1,SDB1GET     IF JOURNAL NOW OUTPUT,               32060000
         BZ    HJS900              JUST RETURN TO INITIATOR.            32060500
* CHANGE JOURNAL DATA SET FROM INPUT TO OUTPUT,                         32061000
* LEAVING UNPROTECTED BUFFER INTACT (SINCE LAST OPERATION               32061500
* DONE TO JOURNAL WAS A POINT).                                         32062000
         $FREEBUF TYPE=PROT,A=SDBPBF  FREE PROTECTED BUFFER.            32062500
         SLR   R0,R0               ZERO PROTECTED-BUFFER                32063000
         ST    R0,SDBPBF           POINTER IN SDB.                      32063500
         XI    SDBFLG1,SDB1GET+SDB1PUT  FLAG SDB FOR OUTPUT.            32064000
         MVI   SDBCCW4,X'05'       SET WRITE-DATA CCW.                  32064500
         B     HJS900              NOW RETURN TO INITIATOR.             32065000
HJS600   DS    0H                                                       32065500
*                                                                       32066000
*                                                                       32066500
*              EXECUTION BATCH MONITOR CONTINUATION -                   32067000
*              RE-OPEN ALL SUBSYSTEM DATA SETS                          32067500
*                                                                       32068000
*                                                                       32068500
         LA    RSDB,SJBSDB         POINT TO SDB CHAIN.                  32069000
         SL    RSDB,=A(SDBSDB-SDBDSECT)  SET UP TO CHAIN.               32069500
HJS620   DS    0H                                                       32070000
         L     RSDB,SDBSDB         POINT TO THE NEXT SDB.               32070500
         LTR   RSDB,RSDB           IF NO MORE,                          32071000
         BZ    HJS660              END OF XBMC FAKE OPEN.               32071500
         CLI   SDBDKEY+1,PDBINTXT  IF INTERNAL TEXT DATA SET,           32072000
         BE    HJS620              CONTINUE WITH NEXT SDB.              32072500
         NI    SDBFLG2,SDB2XBIN+SDB2MCLS  OF FLAG2 BUT XBIN, MCLS.      32073000
         L     R2,SDBPDDB          ESTABLISH PDDB                       32073500
         USING PDBDSECT,R2          ADDRESSABILITY.                     32074000
         TM    SDBFLG2,SDB2XBIN    IS THIS BATCH INPUT UNIT...          32074500
         BNZ   HJS640              BRANCH IF BATCH INPUT UNIT.          32075000
         TM    SDBFLG1,SDB1FOPN    IF INTERNAL DATA SET        @OZ29148 32075100
         BO    HJS621              BYPASS NEXT TEST            @OZ29148 32075125
         TM    SDBFLG2,SDB2MCLS    IF ORIGINAL OUTPUT CLASS    @OZ29148 32075150
         BZ    HJS622               WAS NOT $ OR *, SKIP THIS  @OZ29148 32075175
HJS621   DS    0H                                              @OZ29148 32075200
         MVC   PDBCLASS,JCTMCLAS   SET CLASS FROM JCT          @OZ29148 32075220
         NI    PDBFLAG1,255-PDB1NSOT-PDB1HOLD RESET FLAG BITS  @OZ29148 32075240
         NI    PDBFLAG2,255-PDB2TCEL  RESET TRACKCELL          @OZ29148 32075260
         SLR   R3,R3               ZERO R3 FOR IC              @OZ29148 32075280
         IC    R3,JCTMCLAS         GET MESSAGE CLASS           @OZ29148 32075300
         LA    R1,$SVSCAT(R3)      POINT TO ITS SCAT ENTRY     @OZ29148 32075320
         TM    PDBFLAG2,PDB2HLDS   IF HOLD=YES ON DD CARD      @OZ29148 32075340
         BO    *+12                 DONT CHECK SCATHOLD        @OZ29148 32075360
         TM    SCATFLAG-SCADSECT(R1),SCATHOLD  HOLD CLASS...   @OZ29148 32075380
         BZ    *+8                 BRANCH IF NOT               @OZ29148 32075400
         OI    PDBFLAG1,PDB1HOLD   SHOW HELD DATA SET          @OZ29148 32075425
         TM    SCATFLAG-SCADSECT(R1),SCATDUMM  DUMMY CLASS...  @OZ29148 32075450
         BZ    *+8                 BRANCH IF NOT               @OZ29148 32075475
         OI    PDBFLAG1,PDB1NSOT   MARK AS DUMMY               @OZ29148 32075500
         TM    SCATFLAG-SCADSECT(R1),SCATTCEL   IF CLASS NOT   @OZ29148 32075525
         BZ    HJS622              TRACKCELLED, THEN BRANCH    @OZ29148 32075550
         OI    PDBFLAG2,PDB2TCEL   SHOW TRACKCELLED DATA SET   @OZ29148 32075575
HJS622   DS    0H                                              @OZ29148 32075600
         TM    PDBFLAG2,PDB2JFMS   IF ORIGINAL FORMS           @OZ29148 32075625
         BZ    *+10                 WAS SET FROM JCT           @OZ29148 32075650
         MVC   PDBFORMS,JCTFORMS     THEN SET NEW JCTFORMS     @OZ29148 32075675
         NI    PDBFLAG1,255-PDB1NULL   RESET NULL              @OZ29148 32075700
         TM    JCTJOBFL,JCTNOUPT   TEST 'NO OUTPUT' OPTION     @OZ29148 32075725
         BO    SKIP20              BR TO SET NSOT              @OZ29148 32075750
         TM    PDBFLAG1,PDB1LOG    TEST FOR JES2 JOB LOG       @OZ29148 32075775
         BZ    HJS625              BRANCH IF NO                @OZ29148 32075800
         TM    JCTJBOPT,JCTNOLOG   TEST 'NOLOG' OPTION         @OZ29148 32075825
         BZ    HJS625              BRANCH IF NOT SET           @OZ29148 32075850
SKIP20   OI    PDBFLAG1,PDB1NSOT   MAKE NON PRINTABLE          @OZ29148 32075875
HJS625   DS    0H                                                    R4 32075900
         XC    SDBTAB(SDBAIOT-SDBTAB),SDBTAB CLEAR THE TAB     @OZ18630 32075910
         OI    SDBTAB+(TABFLAG-TABDSECT),TABMINOR SHOW MINOR   @OZ18630 32075920
         TM    PDBFLAG2,PDB2TCEL   IS DATA SET TRACKCELLED     @OZ18630 32075930
         BZ    HJS627              BRANCH IF NOT               @OZ18630 32075940
         OI    SDBTAB+(TABFLAG-TABDSECT),TABMAJOR SHOW MAJOR   @OZ18630 32075950
HJS627   DS    0H                                              @OZ18630 32075960
         SLR   R0,R0               ZERO THE SDB'S              @OZ29019 32075992
         ST    R0,SDBRECCT           OUTPUT RECORD COUNT       @OZ29019 32075994
         BCTR  R0,0                SET OUTPUT LIMIT            @OZ29019 32075996
         ST    R0,SDBOUTLM           TO MAXIMUM                @OZ29019 32075998
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         32076000
         LTR   RBUF,RBUF           IF BUFFER PRESENT, DATASET WAS OPEN  32076500
         BNZ   HJS630              AT LAST XBM JOB TERMINATE (RE-OPEN). 32077000
         OI    PDBFLAG1,PDB1NULL   ELSE, SHOW UNOPENED DATASET - BATCH  32077500
         ST    RBUF,PDBMTTR        MONITOR WILL OPEN WHEN NECESSARY.    32078000
         B     HJS620              CONTINUE WITH NEXT SDB.              32078500
         SPACE 1                                                        32079000
* RE-OPEN OUTPUT DATA SET                                               32079500
HJS630   DS    0H                                                       32080000
*              THIS LINE DELETED BY APAR NUMBER                @OZ18630 32080500
         LA    R1,SDBTAB           POINT TO TRACK ALLOC BLOCK  @OZ18630 32080600
         CALL  $STRAK              GET A TRACK FOR DATA SET.            32081500
         ST    R1,PDBMTTR          STORE TRACK IN PDDB.                 32082000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32082500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32083000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32083500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32083600
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32083700
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32083800
         LR    R0,R1               CONVERT                              32084000
         LA    R1,X'100'           TRACK ADDRESS                        32084500
         SRDL  R0,8                TO RBA.                              32085000
         STM   R0,R1,SDBTRKF       SET STARTING TRACK.                  32085500
         STM   R0,R1,SDBTRK        SET CURRENT TRACK.                   32086000
         STM   R0,R1,BFRBA         SET RBA IN BUFFER.                   32086500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29019 32087000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29019 32087500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29019 32088000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29019 32088500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32089000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32089500
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32090000
         CLI   SDBDKEY+1,PDBOUHJL  IF NOT JES2 JOB LOG,                 32090500
         BNE   HJS620              CONTINUE WITH NEXT SDB.              32091000
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148 32091500
* RE-TITLE THE JES2 JOB LOG                                             32092000
         L     R0,=A(HASPAM)       GET HAM ADDRESS.                     32092500
         ST    R0,SJBLACB+ACBINRTN-IFGACB  DE-NULLIFY JOB LOG.          32093000
         LM    R2,R3,=A(HJLHDR,HJLHDL)  POINT TO TITLE, LENGTH.         32093500
         MVC   BFDAT(HJLHDL),0(R2) MOVE TITLE INTO BUFFER.              32094000
         L     R0,BFLEN            REDUCE                               32094500
         SLR   R0,R3               REMAINING LENGTH                     32095000
         ST    R0,BFLEN            BY TITLE LENGTH.                     32095500
         AL    R3,BFLOC            INCREASE BUFFER OFFSET               32096000
         ST    R3,BFLOC            BY TITLE LENGTH.                     32096500
         BAL   R14,HJSMSG1         WTO 'HASP373 STARTED'.               32097000
         B     HJS620              CONTINUE WITH NEXT SJB.              32097500
* RE-OPEN THE BATCH INPUT DATA SET                                      32098000
HJS640   DS    0H                                                       32098500
         MVC   SDBMTTR,PDBMTTR     MOVE TRK ADR FOR CONVERSION.         32099000
         CALL  HCNVFDAD            CONVERT TRACK ADDRESS.               32099500
         EXCP  SDBIOB              READ FIRST RECORD.                   32100000
         WAIT  1,ECB=SDBECB        WAIT TILL IT'S READ.                 32100500
         B     HJS620              CONTINUE WITH NEXT SDB.              32101000
HJS660   DS    0H                                                       32101500
*                                                                       32102000
*                                                                       32102500
*              RETURN TO HAMGET TO CONTINUE                             32103000
*              EXECUTION BATCH MONITOR OPERATION                        32103500
*                                                                       32104000
*                                                                       32104500
         CALL  HCBCK               CHECKPOINT CONTROL BLOCKS.           32105000
         SL    R12,=A(HJSBASE-SVCHBASE)  ADJUST BASE TO SVCHAM.         32105500
         USING SVCHBASE,R12        TELL THE ASSEMBLER.                  32106000
         B     SX100               RETURN TO SVCXBM.                    32106500
         USING HJSBASE,R12         RESTORE LOCAL ADDRESSABILITY.        32107000
         EJECT                                                          32110200
*                                                                       32110300
*                                                                       32110400
*              ERROR EXITS FROM JOB SELECT                              32110500
*                                                                       32110600
*                                                                       32110700
HJS800   DS    0H                                                       32110800
*                                                                       32111000
*                                                                       32111500
*              UNABLE TO ACQUIRE COMMON STORAGE FOR                     32112000
*              SUBSYSTEM JOB BLOCK,  OR NORMAL INITIATOR STOP,          32112500
*              OR CONVERTER/INTERPRETER ERROR IF SELECT-                32113000
*              BY-JOB-ID                                                32113500
*                                                                       32114000
*                                                                       32114500
         $MID  350                 SET HASP MESSAGE ID.                 32115000
         WTO   '&MID.INIT STOPPED',ROUTCDE=2,DESC=4 WRITE MSG.          32115500
HJS805   DS    0H                                                       32116000
         LA    R10,SSJSISTP        ASSUME NORMAL STOP CODE.             32116500
         LTR   R12,R12             IF NO SJB COULD BE GOT,              32117000
         BNM   HJS820              RETURN NORMAL STOP CODE.             32117500
         TM    SJBFLG1,SJB1SJID    IF NOT SELECT-JOB-BY-ID,             32118000
         BZ    HJS810              FREE SJB AND RETURN NORMAL.          32118500
         L     R0,SSJSSERR         IF NOT ERROR FROM CONVERTER          32119000
         LTR   R0,R0               OR INTERPRETER, RETURN               32119500
         BZ    HJS810              NORMAL STOP CODE.                    32120000
         LA    R10,SSJSYSER        ELSE RETURN SYSTEM ERROR.            32120500
HJS810   DS    0H                                                       32121000
         CALL  $SJBFREE            FREE THE SJB.                        32121500
HJS820   DS    0H                                                       32122000
         LR    R15,R10             SET RETURN CODE IN R15               32122500
         B     HJS950              AND RETURN TO INITIATOR.             32123000
         SPACE 3                                                        32123500
HJS830   DS    0H                                                       32124000
*                                                                       32124500
*                                                                       32125000
*              INSUFFICIENT COMMON STORAGE OR PRIVATE STORAGE TO        32125500
*              INITIATE A JOB.  CAUSE INITIATOR TO TERMINATE            32126000
*              AND JOB (UNLESS SELECTED BY ID) TO RERUN.                32126500
*                                                                       32127000
*                                                                       32127500
         OI    SJBFLG2,SJB2PNIT    CAUSE NEXT SELECT TO END INIT.       32128000
         TM    SJBFLG1,SJB1SJID    IF SELECT-JOB-BY-ID,                 32128500
         BO    HJS840              DON'T RE-RUN JOB.                    32129000
         OI    SJBFLG1,SJB1EJOB    ELSE CAUSE JOB TO RERUN.             32129500
HJS840   DS    0H                                                       32130000
*                                                                       32130500
*                                                                       32131000
*              TERMINATE JOB BY CALLING HOSTERM                         32131500
*                                                                       32132000
*                                                                       32132500
         SL    R12,=A(HJSBASE-HJEBASE)  ADJUST BASE TO HOSTERM.         32133000
         USING HJEBASE,R12         TELL THE ASSEMBLER.                  32133500
         B     HJEJBSL             TERMINATE THE SELECTED JOB.          32134000
         USING HJSBASE,R12         RESTORE LOCAL ADDRESSABILITY.        32134500
HJS850   DS    0H                                                       32135000
*                                                                       32135500
*                                                                       32136000
*              JOB NOT FOUND BUT SELECTED BY ID                         32136500
*                                                                       32137000
*                                                                       32137500
         $MID  361                 SET HASP MESSAGE ID.                 32138000
         WTO   '&MID.JOB NOT FOUND',ROUTCDE=10,DESC=6                   32138500
         CALL  $SJBFREE            FREE THE SJB.                        32139000
         LA    R15,SSJSPERR        SET PROGRAM ERROR CODE.              32139500
         B     HJS950              RETURN TO THE INITIATOR.             32140000
         SPACE 3                                                        32140500
HJS870   DS    0H                                                       32141000
*                                                                       32141500
*                                                                       32142000
*              JOB JOURNAL ABSENT BUT REQUIRED                          32142500
*                                                                       32143000
*                                                                       32143500
         $MID 374                  SET MESSAGE ID.                      32144000
         WTO   '&MID. - JOB HAS NO JOURNAL',ROUTCDE=11,DESC=6           32144500
         B     HJS840              GO TERMINATE THE JOB.                32145000
         EJECT                                                          32145500
HJS900   DS    0H                                                       32146000
*                                                                       32146500
*                                                                       32147000
*              NORMAL RETURN FROM JOB SELECTION TO INITIATOR            32147500
*                                                                       32148000
*                                                                       32148500
         OI    JCTFLAG1,JCT1CKPT   FLAG JCT FOR CKPT           @OZ31931 32148750
         CALL  HCBCK               CHECKPOINT JOB CONTROL BLOCKS.       32149000
         SLR   R15,R15             RETURN ZERO CODE - JOB SELECT        32149500
*                                  WORKED OKAY.                         32150000
         SPACE 3                                                        32150500
HJS950   DS    0H                                                       32151000
         $EPILOG ,                 RETURN TO INITIATOR.                 32151500
*                                                                       32152000
*              SUBROUTINE TO WRITE MESSAGE HASP373                      32152500
*                                                                       32153000
         $MID  373                 SET MESSAGE ID.                      32153500
HJSMSG1  DS    0H                                                       32154000
         TM    SJBFLG1,SJB1SJID    IF SELECT-BY-CLASS,                  32154500
         BZ    HJSMSG11            BRANCH.                              32155000
         WTO   '&MID.STARTED',ROUTCDE=2,DESC=6                          32155500
         BR    R14                 WRITE SHORT MSG, RETURN.             32156000
HJSMSG11 DS    0H                                                       32156500
         L     R7,SJBJCT           POINT R7 TO JCT.                     32157000
         MVC   HJSMSG1Z,HJSMSG1A   MOVE MESSAGE.                        32157500
         MVC   HJSMSG1Y,SJBPATID   MOVE INITIATOR ID.                   32158000
         MVC   HJSMSG1X,SJBJCLAS   MOVE CLASS ID.                       32158500
         MVC   HJSMSG1W,JCTCPUID   MOVE SYSTEM ID.                      32158800
         WTO   MF=(E,JCTWORK)      WRITE MESSAGE.                       32159000
         DROP  R7                  DROP JCT BASE.                       32159500
         BR    R14                 RETURN.                              32160000
HJSMSG1A WTO   '&MID.STARTED - INIT XX - CLASS Y - SYS ZZZZ',          C32160500
               ROUTCDE=2,DESC=6,MF=L                                    32161000
HJSMSG1B EQU   *                                                        32161500
HJSMSG1Z EQU   JCTWORK,HJSMSG1B-HJSMSG1A  MESSAGE                       32162000
HJSMSG1Y EQU   JCTWORK+4+9+15,2    INITIATOR ID                      R4 32162500
HJSMSG1X EQU   JCTWORK+4+9+26,1    CLASS ID                          R4 32163000
HJSMSG1W EQU   JCTWORK+4+9+34,4    SYSTEM ID                         R4 32163300
         EJECT                                                      R41 32163500
         USING JCTDSECT,R7         PROVIDE JCT ADDRESSABILITY       R41 32163600
         DROP  RBUF                RE-ESTABLISH                     R41 32163700
         USING BFDSECT,WA           BUFFER ADDRESSABILITY           R41 32163800
         SPACE 1                                                    R41 32163900
HJSREOPN TM    JCTJSFLG,SSJSWARM   TEST FOR WARM START              R41 32164000
         BO    *+10                BR IF YES TO REPOSITION          R41 32164100
         TM    JCTJBOPT,JCTRERUN   TEST FOR JOB RE-RUN              R41 32164200
         BZR   WE                  RETURN IF NO WITH VALID CC       R41 32164300
         SPACE 1                                                    R41 32164400
         CALL  HOOLDINP            OPEN DATA SET FOR INPUT          R41 32164500
         BNZ   HJS830              BR IF INSUFFICIENT STORAGE       R41 32164600
         ST    WA,SDBMTTR          SET CONTINUATION TRACK ADDR      R41 32164700
         CALL  HCNVFDAD            SET TRACK ADDRESS IN IOB         R41 32164800
         L     WA,SDBUBF           POINT TO UNPROTECTED BUFFER      R41 32164900
         SPACE 1                                                    R41 32165000
HJSIO    OI    SDBFLG2,SDB2IOA     INDICATE I/O ACTIVE              R41 32165100
         EXCP  SDBIOB              START I/O OPERATION              R41 32165200
         WAIT  1,ECB=SDBECB        WAIT FOR I/O COMPLETION          R41 32165300
         TM    SDBFLG2,SDB2IOE+SDB2EOD  TEST I/O STATUS             R41 32165400
         BNZ   HJSBFLST            BR IF ERROR OR EOD               R41 32165500
         OI    BFFL1,BF1EOB        ALLOW UBF REFILL                 R41 32165600
         B     HJSIO               BR TO READ NEXT BUFFER           R41 32165700
         SPACE 1                                                    R41 32165800
HJSBFLST L     R0,SDBMTTR          GET                              R41 32165900
         TM    SDBFLG2,SDB2IOE      CONTINUATION                    R41 32166000
         BO    HJSRBTAB              TRACK                          R41 32166100
         ICM   R0,15,SDBTRK+1         ADDRESS                       R41 32166200
         SPACE 1                                                    R41 32166300
HJSRBTAB CALL  HJSRETAB            RE-BUILD TRACK ALLOC. BLOCK      R41 32166400
         XI    SDBFLG1,SDB1GET+SDB1PUT  RESET FOR OUTPUT            R41 32166500
         MVI   SDBCCW4,5           SET CCW FOR DATA WRITES          R41 32166600
         MVI   SDBCHEND,SDBCEPUT   SET CHANNEL-END OPTION           R41 32166700
         TM    SDBFLG2,SDB2IOE     TEST I/O STATUS                  R41 32166800
         BO    HJSIOE              BR IF ERROR (RAN OFF END)        R41 32166900
         MVC   SDBMTTR,SDBTRK+1    RESET TRACK ADDRESS              R41 32167000
         CLI   BFDAT,LRCBFEND      TEST FOR LOGICALLY EMPTY BFR     R41 32167100
         BE    HJSIOE              BR IF SO TO RE-USE BUFFER        R41 32167200
         L     R1,=A(HFCMSG)       POINT TO 'JOB DELETED' TEXT      R41 32167300
         CLC   BFDAT(HFCMSGL),0(R1)  TEST FOR SAME                  R41 32167400
         BE    HJSIOE              BR IF SO TO RE-USE BUFFER        R41 32167500
         CALL  HCNVFDAD            SET TRACK ADDRESS IN IOB         R41 32167600
         LA    R1,SDBTAB           POINT TO TRACK ALLOC. BLOCK      R41 32167700
         CALL  $STRAK              GET TRACK FOR NEXT BUFFER        R41 32167800
         L     WA,SDBPBF           POINT TO PROTECTED BUFFER        R41 32167900
         ST    R1,BFNXT            SET CHAIN TRACK ADDRESS          R41 32168000
         LR    WA,R1               SAVE NEW TRACK ADDRESS           R41 32168100
         OI    SDBFLG2,SDB2IOA     INDICATE I/O ACTIVE              R41 32168200
         EXCP  SDBIOB              START I/O OPERATION              R41 32168300
         WAIT  1,ECB=SDBECB        WAIT FOR I/O COMPLETION          R41 32168400
         ST    WA,SDBMTTR          SET NEW TRACK ADDRESS            R41 32168500
         B     HJSNXTBF            BR TO CONTINUE                   R41 32168600
         SPACE 1                                                    R41 32168700
HJSIOE  $FREEBUF TYPE=PROT,A=SDBPBF  FREE PROTECTED BUFFER          R41 32168800
         L     R7,SJBJCT           RESTORE JCT ADDRESS IN R7        R41 32168900
         SLR   R1,R1               CLEAR                            R41 32169000
         ST    R1,SDBPBF            BUFFER ADDRESS                  R41 32169100
         SPACE 1                                                    R41 32169200
HJSNXTBF L     R0,SDBMTTR          GET TRACK ADDRESS                R41 32169300
         LA    R1,X'100'           CONVERT TO                       R41 32169400
         SRDL  R0,8                 RBA FORMAT                      R41 32169500
         L     WA,SDBUBF           POINT TO UNPROTECTED BUFFER      R41 32169600
         STM   R0,R1,SDBTRK        SET RBA IN SDB                   R41 32169700
         STM   R0,R1,BFRBA          AND IN BUFFER                   R41 32169800
         LH    R0,$SVBFSIZ         GET BUFFER SIZE                  R41 32169900
         SL    R0,=A(BFDAT+1-BFIO) SET LENGTH                       R41 32170000
         ST    R0,BFLEN             OF DATA AREA                    R41 32170100
         LA    R1,BFDAT            SET POINTER IN UBF          @OZ25160 32170130
         ST    R1,BFLOC            FOR FIRST LOGICAL RECORD    @OZ25160 32170160
         SLR   R1,R1               CLEAR                            R41 32170200
         ST    R1,BFTRK             TRACK ADDRESS                   R41 32170300
         ST    R1,BFNXT              AND CHAIN ADDRESS              R41 32170400
         MVC   BFKEY,SDBJKEY       ENSURE VALID DATA SET KEY        R41 32170500
         NI    SDBFLG2,255-SDB2EOD-SDB2IOE  RESET FLAGS             R41 32170600
         SLR   R15,R15             SET NON-ZERO CONDITION CODE      R41 32170700
         BR    WE                  RETURN TO CALLER                 R41 32170800
         EJECT                                                      R41 32170900
*********************************************************************** 32171000
*                                                                     * 32171100
*        HJSRETAB -- SUBROUTINE TO REBUILD SDB TRK ALLOC'N BLK        * 32171200
*                                                                     * 32171300
* INPUT  R0    - RESUME MTTR, VALID ON EXIT                           * 32171400
*        R10   - SDB ADDRESS                                          * 32171500
*        R13   - SAVE AREA ADDRESS                                    * 32171600
*        R14   - RETURN ADDRESS                                       * 32171700
*        R15   - ENTRY POINT ADDRESS                                  * 32171800
*                                                                     * 32171900
*********************************************************************** 32172000
         SPACE 1                                                    R41 32172100
         USING TABDSECT,R14        PROVIDE TAB ADDRESSABILITY       R41 32172200
         USING HJSRETAB,R15        PROVIDE LOCAL ADDRESSABILITY     R41 32172300
         SPACE 1                                                    R41 32172400
HJSRETAB STM   R14,R2,12(R13)      SAVE REGISTERS                   R41 32172500
         LA    R14,SDBTAB          ADDRESS TAB IN SDB               R41 32172600
         LR    R2,R0               COMPUTE                          R41 32172700
         SRL   R2,24                TRACK-EXTENT-DATA               R41 32172800
         MH    R2,=Y(TEDSIZ)         BLOCK                          R41 32172900
         AL    R2,$SVTFRST            ADDRESS                       R41 32173000
         LH    R2,TNRT-TEDDSECT(,R2)  SET MAX RECORD                R41 32173100
         STC   R2,TABMAXR                NUMBER IN TAB              R41 32173200
         ST    R0,TABMTTR          SET MTTR IN TAB                  R41 32173300
         MVI   TABSPN,1            INIT SUB-PERM VALUE IN TAB       R41 32173400
         IC    R2,$SVRINCR         R2 = &RECINCR                    R41 32173500
         IC    R0,=X'01'           MTT1 -- 1ST RECORD ON TRACK      R41 32173600
         SLR   R1,R1               CLEAR BUFFER COUNT               R41 32173700
         SPACE 1                                                    R41 32173800
HRETAB10 IC    R1,$SVTKCEL         SET FOR MAX TRACK-CELL           R41 32173900
         SPACE 1                                                    R41 32174000
HRETAB20 CLM   R0,1,TABMTTR+3      SEARCH FOR RECORD                R41 32174100
         BE    HRETAB40            BR IF FOUND                      R41 32174200
         ALR   R0,R2               INCR MTTR BY &RECINCR            R41 32174300
         CLM   R0,1,TABMAXR        TOO HIGH FOR TRACK...            R41 32174400
         BNH   HRETAB30            BR IF NO                         R41 32174500
         IC    R0,TABSPN            ELSE INCR SUB-PERM              R41 32174600
         AL    R0,=F'1'              VALUE AND RESET                R41 32174700
         STC   R0,TABSPN              TRACK ADDRESS (MTTP)          R41 32174800
         SPACE 1                                                    R41 32174900
HRETAB30 BCT   R1,HRETAB20         DECR BUFFER COUNT                R41 32175000
         B     HRETAB10            NEW TRACK CELL IF ZERO           R41 32175100
         EJECT                                                      R41 32175200
HRETAB40 MVC   12(1,R13),TABSPN    SAVE SUB-PERM VALUE              R41 32175300
         STC   R1,TABUFCNT         SAVE BUFFER COUNT, SO FAR        R41 32175400
         SPACE 1                                                    R41 32175500
HRETAB50 BCT   R1,HRETAB60         DECR BUFFER COUNT                R41 32175600
         B     HRETAB70            BR IF LAST RECORD IN CELL        R41 32175700
         SPACE 1                                                    R41 32175800
HRETAB60 ALR   R0,R2               INCR MTTR BY &RECINCR            R41 32175900
         CLM   R0,1,TABMAXR        TOO HIGH FOR TRACK...            R41 32176000
         BNH   HRETAB50            LOOP IF NOT                      R41 32176100
         CLM   R2,1,12(R13)        ENTIRE TRACK DEPLETED...         R41 32176200
         BNH   HRETAB70            RETURN IF YES -- SHORT CELL      R41 32176300
         IC    R0,12(,R13)          ELSE INCR SUB-PERM              R41 32176400
         AL    R0,=F'1'              VALUE AND RESET                R41 32176500
         STC   R0,12(,R13)            TRACK ADDRESS (MTTP)          R41 32176600
         B     HRETAB50            BR TO CONTINUE                   R41 32176700
         SPACE 1                                                    R41 32176800
HRETAB70 IC    R2,TABUFCNT         SET REMAINING                    R41 32176900
         SLR   R2,R1                BUFFER COUNT                    R41 32177000
         BCTR  R2,0                  IN                             R41 32177100
         STC   R2,TABUFCNT            TAB                           R41 32177200
         LM    R14,R2,12(R13)      RESTORE REGISTERS                R41 32177300
         BR    R14                 RETURN TO CALLER                 R41 32177400
         SPACE 1                                                    R41 32177500
         DROP  R15                 KILL LOCAL ADDRESSABILITY        R41 32177600
         EJECT                                                      R41 32177700
*                                                                   R41 32177800
*                                                                   R41 32177900
*              JOB SELECT SUBROUTINE TO READ IOTS                       32178000
*                                                                       32178100
*                                                                       32178200
HJSRDIOT DS    0H                                                       32178300
         SL    R2,=A(IOTIOTTR-IOTDSECT)  CHAIN TRACK ADDRESS.           32178400
         SL    R3,=A(IOTIOT-IOTDSECT)  CHAIN STORAGE ADDRESS.           32178500
* R1 POINTS TO NEW IOT                                                  32178600
* R2 POINTS TO PREVIOUS IOT OR TO JCT, FOR TRACK ADDRESS                32178700
* R3 POINTS TO PREVIOUS IOT OR TO SJB, FOR STORAGE ADDRESS              32178800
HJSRI10  DS    0H                                                       32178900
         L     R0,IOTIOTTR-IOTDSECT(,R2)  GET NEXT IOT TRACK.           32179000
         LTR   R0,R0               IF ZERO, IOT CHAIN                   32179100
         BZR   R4                  IS COMPLETE - RETURN.                32179200
         CALL  HCBGM               GET STORAGE FOR ANOTHER IOT.         32179300
         BNZ   HJS830              BRANCH IF NO STORAGE AVAILABLE.      32179400
         CALL  HCBRD               READ IN THE IOT.                     32179500
         BNZ   HJSRI20             BRANCH IF READ ERROR.                32179600
         ST    R15,IOTIOT-IOTDSECT(,R1)  ZERO IOT CHAIN POINTER.        32179700
         ST    R1,IOTIOT-IOTDSECT(,R3)  CHAIN PREV IOT TO THIS.         32179800
         LR    R2,R1               POINT TRACK CHAIN REG AND            32179900
         LR    R3,R1               STOR CHAIN REG TO THIS IOT.          32180000
         B     HJSRI10             TRY FOR ANOTHER IOT.                 32180100
* ERROR RETURNED FROM READ - FREE LAST IOT AND RETURN                   32180200
HJSRI20  DS    0H                                                       32180300
         CALL  HCBFM               FREE IOT STORAGE.                    32180400
         B     HJS840              CAUSE JOB TO TERMINATE.              32180500
         DROP  ,                   DROP ALL BASES.                      32180600
         EJECT                                                      R41 32180700
         LTORG                                                      R41 32180800
         TITLE 'HOSTERM - SUBSYSTEM JOB TERMINATION FUNCTION'           32180900
*                                                                       32181000
*                                                                       32181100
*              HOSTERM - SUBSYSTEM JOB TERMINATION FUNCTION             32181200
*                                                                       32181300
*                                                                       32181400
HOSTERM  $PROLOG SSOBTERM,SSJTSIZE,LOCK=REQ                             32181500
HJEBASE  DS    0H                                                       32182000
*                                                                       32182500
*                                                                       32183000
*              ENTRY POINT HOSTERM ---                                  32183500
*              TERMINATE REGULAR JOB                                    32184000
*              TERMINATE EXECUTION BATCH MONITOR, WITH OR WITHOUT       32184500
*                 USER JOB                                              32185000
*              TERMINATE STARTED TASK                                   32185500
*                                                                       32186000
*                                                                       32186500
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              32187000
         USING SSJTBGN,RSOX        SET SSOB EXT ADDRESSABILITY.         32187500
         USING SSIB,RSIB           SET SSIB ADDRESSABILITY.             32188000
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             32188500
         USING JCTDSECT,R7         SET JCT ADDRESSABILITY.              32189000
* SET INITIAL TERMINATION CONTROL FLAGS                                 32189500
         MVI   SJBFLG3,SJB3CLS+SJB3FSDB+SJB3FIOT+SJB3CKPT+SJB3FJCT      32190000
         MVI   SJBFLG4,0           ZERO 2D TERMINATION FLAGS.           32190500
         L     R7,SJBJCT           LOAD JCT BASE REGISTER.              32191000
* IF EXECUTION BATCH MONITOR WITHOUT USER JOB AVOID CLOSE, CKPT         32191500
         TM    SJBFLG1,SJB1XBM     IF NOT BATCH MONITOR ENDING,         32192000
         BZ    HJET10              GO CHECK STARTED TASK.               32192500
         OI    SJBFLG1,SJB1XBMR    CAUSE XBM FLAG TO RESET LATER.       32193000
         TM    SJBFLG1,SJB1XBMC+SJB1XBWT  IF MONITOR ENDING WITH        32193500
         BZ    HJET20              JOB, TREAT AS ORDINARY.              32194000
         NI    SJBFLG3,255-SJB3CLS-SJB3CKPT  ELSE NO CLOSE, CKPT.       32194500
         B     HJE000              ENTER TERMINATION.                   32195000
HJET10   DS    0H                                                       32195500
* IF STARTED TASK IS TERMINATING, FREE SJB, NULLIFY JCL PDDB,           32196000
* WRITE 'ENDED'                                                         32196500
         TM    SJBFLG1,SJB1SJID    IF NOT STARTED TASK,                 32197000
         BZ    HJET20              GO CHECK RE-EXECUTE FLAG.            32197500
         OI    SJBFLG3,SJB3TERM    SHOW JOB READY TO TERMINATE.         32198000
         OI    SJBFLG4,SJB4MEND+SJB4FSJB  CAUSE SJB TO FREE.            32198500
         B     HJET80              GO MOVE JMR.                         32199000
HJET20   DS    0H                                                       32199500
* IF JOB IS TO RESTART (HASP COMMAND $EJOB), PARTIALLY PURGE            32200000
* OUTPUT TRACK GROUPS, WRITE 'QUEUED FOR RE-EXECUTION'                  32200500
         TM    SJBFLG1,SJB1EJOB    RE-RUN REQUESTED...              R41 32200600
         BO    HJERERUN            BR IF YES TO FORCE RE-QUEUE      R41 32200700
         TM    JCTJOBFL,JCTRSTRT   IS JOB RESTARTABLE...            R41 32200800
         BZ    HJET30              BR IF NO (TERMINATE JOB)         R41 32200900
         TM    JCTJSFLG,SSJSWARM   HAD JOB WARM STARTED...          R41 32201000
         BZ    HJET30              BR IF NO (TERMINATE JOB)         R41 32201100
         TM    JCTJBOPT,JCTRERUN   HAS JOB RE-RUN ALREADY...        R41 32201200
         BO    HJET30              BR IF YES (TERMINATE JOB)        R41 32201300
         SPACE 1                                                    R41 32201400
HJERERUN OI    SJBFLG1,SJB1EJOB    FORCE JOB TO RE-RUN              R41 32201500
         OI    JCTJBOPT,JCTRERUN   INDICATE RE-RUN REQUEST          R41 32201600
         SLR   R0,R0               GET ZEROS IN REGISTER                32201700
         STH   R0,JCTJSSTP         KILL RESTART STEP IN JCT             32201800
         STC   R0,JCTJSFLG         KILL RESTART FLAGS IN JCT            32201900
         OI    SJBFLG3,SJB3PPOU    ELSE PURGE PARTIAL OUTPUT            32203500
         OI    SJBFLG4,SJB4MREX    AND WRITE 'QUEUED FOR RE-EXEC'.      32204500
         ICM   R1,7,SSJTJMR+1      POINT TO JMR-IF NO JMR,     @OZ27662 32204600
         BZ    HJE000              ENTER TERMINATION.          @OZ27662 32204800
         MVC   JCTUSEID,JCTUSEID-JCTJMR(R1)  XFER USER INFO    @OZ27662 32204900
         MVC   JCTUCOM,JCTUCOM-JCTJMR(R1)      FROM SWA JMR.   @OZ27662 32204950
         B     HJE000              ENTER TERMINATION.                   32205000
HJET30   DS    0H                                                       32205500
* REGULAR JOB END, OR XBM WITH USER JOB - NULLIFY JCL PDDB,             32206000
* WRITE 'ENDED'                                                         32206500
         OI    SJBFLG3,SJB3TERM    SHOW JOB READY TO TERMINATE.         32207000
         OI    SJBFLG4,SJB4MEND    WRITE 'ENDED'.                       32207500
         B     HJET80              GO MOVE JMR.                         32208000
HJET80   DS    0H                                                       32208500
* MOVE JMR BACK INTO HASP JOB CONTROL TABLE                             32209000
         TM    SJBFLG1,SJB1XBM     IF BATCH MONITOR ENDING,    @OZ26957 32209200
         BO    HJE000              ENTER TERMINATION.          @OZ26957 32209400
         L     R1,SSJTJMR          POINT TO JMR TO MOVE.                32209500
         LTR   R7,R7               IF NO JCT,                           32210000
         BZ    HJE000              ENTER TERMINATION.                   32210500
         LTR   R1,R1               IF JMR DOESN'T EXIST,                32211000
         BZ    HJE000              ENTER TERMINATION.                   32211500
         MVC   JCTJMR,0(R1)        MOVE JMR INTO HASP JCT.              32212000
         B     HJE000              ENTER TERMINATION.                   32212500
         SPACE 3                                                        32213000
*                                                                       32213500
*                                                                       32214000
*              ENTRY POINT HJERENQ ---                                  32214500
*              RE-ENQUEUE JOB FOR OS RESTART                            32215000
*                                                                       32215500
*                                                                       32216000
HJERENQ  DS    0H                                                       32216500
         NI    SJBFLG1,255-SJB1EJOB  RESET POSSIBLE RESTART-JOB.        32217000
         MVI   SJBFLG3,SJB3CLS+SJB3FSDB+SJB3FIOT+SJB3CKPT+SJB3FJCT      32217500
         MVI   SJBFLG4,SJB4MREQ    WRITE 'RE-ENQUEUED'.                 32218000
         L     R7,SJBJCT           POINT TO THE JOB'S JCT.              32218500
         LTR   R7,R7               IF JCT DOESN'T EXIST,                32219000
         BZ    HJE000              ENTER TERMINATION.                   32219500
         MVC   JCTJSSTP,SSRQSTEP   SAVE RESTART STEP IN JCT.            32220000
         MVC   JCTJSFLG,SSRQFLG1   SAVE RESTART FLAGS IN JCT.           32220500
         OI    JCTJBOPT,JCTRERUN   INDICATE RE-RUN REQUEST          R41 32220600
         TM    JCTJSFLG,SSRQHOLD   IS JOB TO BE HELD...                 32221000
         BZ    SKIP60              SKIP IF NOT                       R4 32221100
         OI    SJBFLG2,SJB2HOLD    INDICATE HOLD IN SJB              R4 32221200
         XI    SJBFLG4,SJB4MREQ+SJB4MRQH  RESET MREQ, SET MRQH.         32222000
SKIP60   B     HJE000              GO ISSUE MESSAGE.                    32222500
         SPACE 3                                                        32223000
*                                                                       32223500
*                                                                       32224000
*              ENTRY POINT HJEJBSL ---                                  32224500
*              TERMINATE SELECTED REGULAR JOB, USER JOB (XBM),          32225000
*                 STARTED TASK, OR CREATED-ID JOB                       32225500
*              RERUN SELECTED REGULAR OR USER JOB                       32226000
*                                                                       32226500
*                                                                       32227000
HJEJBSL  DS    0H                                                       32227500
* RESTORE RSIB AND RSOX TO THEIR CORRECT VALUES                         32228000
         L     R1,4(,R13)          POINT TO CALLER'S SAVE AREA.         32228500
         L     R1,24(,R1)          GET ENTRY REGISTER 1.                32229000
         USING SSOBEGIN,R1         SET SSOB ADDRESSABILITY.             32229500
         L     RSIB,SSOBSSIB       SET SSIB BASE.                       32230000
         L     RSOX,SSOBINDV       SET SSOB EXT BASE.                   32230500
         DROP  R1                  DROP REGISTER 1 AS SSOB BASE.        32231000
* SET INITIAL TERMINATION FUNCTION FLAGS                                32231500
         MVI   SJBFLG3,SJB3CLS+SJB3CKPT  CAUSE CLOSE & CKPT.            32232000
         MVI   SJBFLG4,0           ZERO 2D TERMINATION FLAG.            32232500
         L     R7,SJBJCT           LOAD JCT BASE REGISTER.              32233000
* IF XBM CONTINUATION FLAG OFF, NO NEED TO PRESERVE SDB, IOTS,          32233500
* JCT                                                                   32234000
         TM    SJBFLG1,SJB1XBMC    IF EXECUTION BATCH MON CONT,         32234500
         BO    HJES30              GO PROCESS IT.                       32235000
         OI    SJBFLG3,SJB3FSDB+SJB3FIOT+SJB3FJCT  CAUSE FREEING.       32235500
         OI    SJBFLG1,SJB1XBMR    CAUSE RESET OF SJB1XBM.              32236000
* IF STARTED TASK, FREE SJB, NULLIFY JCL PDDB, WRITE 'TERMINATED'       32236500
         TM    SJBFLG1,SJB1SJID    IF NOT STARTED TASK,                 32237000
         BZ    HJES10              CHECK FOR RE-EXECUTION.              32237500
         OI    SJBFLG3,SJB3TERM    SHOW JOB READY TO TERMINATE.         32238000
         OI    SJBFLG4,SJB4MTRM+SJB4FSJB  WRITE 'TERMINATED'.           32238500
         B     HJE000              ENTER TERMINATION.                   32239000
HJES10   DS    0H                                                       32239500
* IF JOB IS TO RESTART ($EJOB), PURGE PARTIAL OUTPUT,                   32240000
* WRITE 'QUEUED FOR RE-EXECUTION'.                                      32240500
         TM    SJBFLG1,SJB1EJOB    IF NO RE-EXECUTION,                  32241000
         BZ    HJES20              SET UP NORMAL SELECT FAILURE.        32241500
         SLR   R0,R0               GET ZEROS IN REGISTER                32241600
         STH   R0,JCTJSSTP         KILL RESTART STEP IN JCT             32241700
         STC   R0,JCTJSFLG         KILL RESTART FLAGS IN JCT            32241800
         OI    SJBFLG3,SJB3PPOU    ELSE PURGE PARTIAL OUTPUT,           32243500
         OI    SJBFLG4,SJB4MREX    WRITE 'QUEUED FOR RE-EXEC'.          32244500
         B     HJE000              ENTER TERMINATION.                   32245000
* OTHERWISE NULLIFY JCL PDDB, WRITE 'TERMINATED'                        32245500
HJES20   DS    0H                                                       32246000
         OI    SJBFLG3,SJB3TERM    SHOW JOB READY TO TERMINATE.         32246500
         OI    SJBFLG4,SJB4MTRM    WRITE 'TERMINATED'.                  32247000
         B     HJE000              ENTER TERMINATION.                   32247500
* XBM CONTINUATION - ONLY WRITE MESSAGE                                 32248000
HJES30   DS    0H                                                       32248500
         MVI   SJBFLG3,0           DO NOTHING.                          32249000
         MVI   SJBFLG4,SJB4MTRM    WRITE 'TERMINATED'.                  32249500
         TM    SJBFLG1,SJB1EJOB    IF THAT'S CORRECT,                   32250000
         BZ    HJE000              ENTER TERMINATION.                   32250500
         MVI   SJBFLG4,SJB4MREX    WRITE 'QUEUED FOR RE-EXEC'.          32251000
         B     HJE000              ENTER TERMINATION.                   32251500
         SPACE 3                                                        32252000
*                                                                       32252500
*                                                                       32253000
*              ENTRY POINT HJERTRN ---                                  32253500
*              TERMINATE CREATED-ID JOB (E.G., SYSTEM LOG)              32254000
*                                                                       32254500
*                                                                       32255000
HJERTRN  DS    0H                                                       32255500
         MVI   SJBFLG3,SJB3CLS+SJB3FSDB+SJB3FIOT+SJB3CKPT+SJB3FJCT      32256000
         MVI   SJBFLG4,SJB4FSJB    CAUSE SJB TO FREE, NO MSG.           32256500
         L     R7,SJBJCT           LOAD JCT BASE REGISTER.              32257000
         B     HJE000              ENTER TERMINATION.                   32257500
         SPACE 3                                                        32258000
*                                                                       32258500
*                                                                       32259000
*        ENTRY POINT HJEXBM ---                                         32259500
*              TERMINATE USER JOB THAT RAN UNDER AN EXECUTION           32260000
*                 BATCH MONITOR.  LEAVE ENVIRONMENT SUITABLE FOR        32260500
*                 RUNNING ANOTHER USER JOB.                             32261000
*                                                                       32261500
*                                                                       32262000
HJEXBM   DS    0H                                                       32262500
         MVI   SJBFLG3,SJB3CLS+SJB3CKPT+SJB3TERM  SET FLAGS.            32263000
         MVI   SJBFLG4,SJB4MEND    SET MESSAGE FLAG.                    32263500
         L     R7,SJBJCT           POINT TO JOB'S JCT.                  32264000
         B     HJE000              ENTER TERMINATION.                   32264500
         EJECT                                                          32265000
*                                                                       32265500
*                                                                       32266000
*              COMMON ENTRY POINT AND MESSAGE WRITER                    32266500
*                                                                       32267000
*                                                                       32267500
HJE000   DS    0H                                                       32268000
         LTR   R7,R7               IF NO JCT EXISTS,                    32268500
         BZ    HJE100              SKIP MESSAGE WRITING.                32269000
         CLI   JCTTSUAF,0          WAS NOTIFY REGUESTED                 32269100
         BE    HJE005              IF NOT SKIP NOTIFY                   32269200
         CLI   SJBXQFN1+1,SSOBJBSL WAS ENTRY FROM JOB SELECT            32269300
         BNE   *+8                 IF NOT BRANCH                        32269400
         OI    JCTJTFLG,SSJTJFAL   SET JCL ERROR FLAG                   32269500
         CLI   SJBXQFN1+1,SSOBTERM  WAS ENTRY FROM JOB TERM             32269600
         BNE   HJE005              IF NOT SKIP NOTIFY                   32269700
         CLC   $SVRELNO,=C'02'     TEST OS/VS2 RELEASE NUMBER        R4 32269800
         BE    HJE005              IGNORE RETURN CODE IF RELEASE 2   R4 32269900
         TM    SSJTFLG1,SSJTJFAL+SSJTCFAL  JOB FAILED CC                32270000
         BNO   HJE002              IF NOT SET FLAGS                     32270100
         L     R1,SSJTPCOD         LOAD POINTER TO CC                   32270200
         MVC   JCTJTCC(2),0(R1)    MOVE CC TO JCT                       32270300
         L     R1,SSJTPSN1         LOAD POINTER TO STEPNAME1            32270400
         MVC   JCTPSN1(8),0(R1)    MOVE STEPNAME1 TO JCT                32270500
         L     R1,SSJTPSN2         LOAD POINTER TO STEPNAME2            32270600
         MVC   JCTPSN2(8),0(R1)    MOVE STEPNAME2 TO JCT                32270700
HJE002   MVC   JCTJTFLG(1),SSJTFLG1 SET JCT JOB TERM FLAGS              32270800
* SELECT MESSAGE TO WRITE AND MOVE IT TO JCTWORK                        32270900
HJE005   LA    R1,HJEM1            SET UP 'ENDED' MESSAGE.              32271000
         TM    SJBFLG4,SJB4MEND    IF CORRECT,                          32271100
         BO    HJE010              WRITE MESSAGE.                       32271200
         LA    R1,HJEM2            SET UP 'TERMINATED'.                 32271500
         TM    SJBFLG4,SJB4MTRM    IF CORRECT,                          32272000
         BO    HJE010              WRITE MESSAGE.                       32272500
         LA    R1,HJEM3            SET UP 'RE-ENQUEUED'.                32273000
         TM    SJBFLG4,SJB4MREQ    IF CORRECT,                          32273500
         BO    HJE010              WRITE MESSAGE.                       32274000
         LA    R1,HJEM35           SET UP 'RE-ENQUEUED & HELD'.         32274500
         TM    SJBFLG4,SJB4MRQH    IF CORRECT,                          32275000
         BO    HJE010              WRITE MESSAGE.                       32275500
         LA    R1,HJEM4            'QUEUED FOR RE-EXECUTION'.           32276000
         TM    SJBFLG4,SJB4MREX    IF CORRECT,                          32276500
         BO    HJE010              WRITE MESSAGE.                       32277000
         B     HJE100              NO MESSAGE.                          32277500
* WRITE THE SELECTED MESSAGE                                            32278000
HJE010   DS    0H                                                       32278500
         WTO   MF=(E,(1))          WRITE TERMINATION MESSAGE.           32279000
* CONTINUE TO MORE COMMON CODE                                          32279500
         B     HJE100              BRANCH TO START TERMINATION.         32280000
         SPACE 3                                                        32280500
* MESSAGES ---                                                          32281000
         $MID 395                  HASP MESSAGE ID                      32281500
HJEM1    WTO   '&MID.ENDED',ROUTCDE=2,DESC=6,MF=L                       32282000
         SPACE 1                                                        32282500
         $MID  396                 HASP MESSAGE ID                      32283000
HJEM2    WTO   '&MID.TERMINATED',ROUTCDE=2,DESC=6,MF=L                  32283500
         SPACE 1                                                        32284000
         $MID  397                 HASP MESSAGE ID                      32284500
HJEM3    WTO   '&MID.RE-ENQUEUED',ROUTCDE=2,DESC=6,MF=L                 32285000
         SPACE 1                                                     R4 32285100
         $MID  303                 HASP MESSAGE ID                   R4 32285200
HJEM35   WTO   '&MID.RE-ENQUEUED AND HELD',ROUTCDE=2,DESC=6,MF=L        32285500
         SPACE 1                                                        32286000
         $MID  398                 HASP MESSAGE ID                      32286500
HJEM4    WTO   '&MID.QUEUED FOR RE-EXECUTION',ROUTCDE=2,DESC=6,        C32287000
               MF=L                                                     32287500
         EJECT                                                          32288000
*                                                                       32288500
*                                                                       32289000
*              JOB TERMINATION CONTINUES HERE                           32289500
*                                                                       32290000
*                                                                       32290500
HJE100   DS    0H                                                       32291000
*                                                                       32291500
*              ZERO CSCB POINTER IN SJB                                 32292000
*                                                                       32292500
         TM    SJBFLG1,SJB1XBMC    IF XMB CONTINUING...        @OZ26748 32292600
         BO    HJE110               SKIP THIS                  @OZ26748 32292700
         SLR   R0,R0               ZERO OUT                             32293000
         ST    R0,SJBCSCB          CSCB POINTER.                        32293500
         SPACE 3                                                        32294000
*                                                                       32294500
*              PURGE PSO IF PRESENT                                     32295000
*                                                                       32295500
HJE110   DS    0H                                              @OZ26748 32295750
         L     R6,SJBPSOP          POINT TO PSO.                        32296000
         LTR   R6,R6               TEST FOR PRESENT.                    32296500
         BZ    HJENPSO             SKIP PURGE IF NO PSO.                32297000
         OI    PSOFLG2-PSODSECT(R6),SSSOCTRL SET TO TERMINATE PSO.      32297500
         STM   R14,R12,SJBDSECT+12 SAVE REGISTERS                       32298000
         ICM   R12,7,=AL3(HOSEOTB) POINT TO PSO PURGE BASE              32298500
         LR    R8,R13              COPY SJB POINTER                     32299000
         BAL   R14,HETSOUT-HOSEOTB(,R12) ENTER PSO PURGER               32299500
         USING *,R14                                                    32300000
         ICM   R12,7,=AL3(PSOBASE) POINT TO PSO QUEUEING ROUTINE BASE   32300500
         DROP  R14                                                      32301000
         LR    R13,R8              RESTORE SJB POINTER                  32301500
         BAL   R8,PSOQUEUE-PSOBASE(,R12) ENTER PSO TERMINATOR           32302000
         LM    R14,R12,SJBDSECT+12 RESTORE NORMAL REGISTERS             32302500
         SLR   R0,R0               ZERO                                 32303000
         ST    R0,SJBFLOW          FLOW INDICATORS.                     32303500
HJENPSO  DS    0H                                                       32304000
         LTR   R7,R7               IF NO JCT,                           32304500
         BZ    HJEA00              DON'T DO ENDING TIME.                32305000
         TIME BIN                  GET TIME AND DATE AND                32305500
         STM   R0,R1,JCTXEQOF      SAVE THEM IN JCT.                    32306000
         SPACE 3                                                        32307100
HJEA00   DS    0H                                                       32307200
*                                                                       32307500
*                                                                       32308000
*              CLOSE ALL SUBSYSTEM DATA SETS                            32308500
*                                                                       32309000
*                                                                       32309500
         TM    SJBFLG3,SJB3CLS     ARE WE TO CLOSE DATA SETS...         32310000
         BZ    HJEA90              IF NOT, SKIP THIS CODE.              32310500
* NULLIFY FAKE-OPENED ACBS                                              32311000
         L     R0,=A(HAMNULL)      GET NULL ADDRESS.                    32311500
         ST    R0,SJBLACB+ACBINRTN-IFGACB  NULLIFY JOB LOG.             32312000
         LTR   R7,R7               IS THERE A JCT...                    32312500
         BZ    HJEA90              IF NOT, SKIP CLOSING.                32313000
         LA    RSDB,SJBSDB         POINT TO FIRST SDB ADDRESS.          32313500
         SL    RSDB,=A(SDBSDB-SDBDSECT)  SET UP TO CHAIN.               32314000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              32314500
HJEA10   DS    0H                                                       32315000
         L     RSDB,SDBSDB         POINT TO NEXT SDB.                   32315500
         LTR   RSDB,RSDB           IF NO MORE,                          32316000
         BZ    HJEA80              SET UP RSOX AND CONTINUE.            32316500
         CALL  HFCLSUB             CLOSE THE DATA SET.                  32317000
         B     HJEA10              THEN CONTINUE WITH NEXT SDB.         32317500
HJEA80   DS    0H                                                       32318000
         DROP  RSDB                DROP SDB ADDRESSABILITY.             32318500
         CALL  HJEAHOLD            HOLD DATA SETS IF REQUIRED.          32319000
HJEA90   DS    0H                                                       32321500
         SPACE 3                                                        32322000
HJEB00   DS    0H                                                       32322500
*                                                                       32323000
*                                                                       32323500
*              FREE ALL SUBSYSTEM DATASET BLOCKS                        32324000
*                                                                       32324500
*                                                                       32325000
         TM    SJBFLG3,SJB3FSDB    IF NO SDB FREE WANTED,               32325500
         BZ    HJEB90              SKIP THIS CODE.                      32326000
HJEB10   DS    0H                                                       32326500
         L     RSDB,SJBSDB         POINT TO FIRST SDB.                  32327000
         LTR   RSDB,RSDB           IF NO MORE SDBS,                     32327500
         BZ    HJEB80              SET UP RSOX AND CONTINUE.            32328000
         CALL  $SDBFREE            ELSE FREE & DECHAIN SDB.             32328500
         B     HJEB10              CONTINUE FREEING SDBS.               32329000
HJEB80   DS    0H                                                       32329500
         L     RSOX,4(,R13)        POINT TO ORIGINAL SAVE AREA.         32330000
         L     RSOX,24(,RSOX)      POINT TO SSOB.                       32330500
         L     RSOX,SSOBINDV-SSOB(,RSOX)  POINT TO SSOB EXTEN.          32331000
         USING SSJTBGN,RSOX        SET SSOB EXT ADDRESSABILITY.         32331300
HJEB90   DS    0H                                                       32331500
         SPACE 3                                                        32332000
HJEC00   DS    0H                                                       32332500
*                                                                       32333000
*                                                                       32333500
*              SHOW JOB READY TO TERMINATE                              32334000
*                                                                       32334500
*                                                                       32335000
         L     RIOT,SJBIOT         IF NO                                32335500
         LTR   RIOT,RIOT           REGULAR IOT(S),                      32336000
         BZ    HJEC90              SKIP PURGE.                          32336500
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              32337000
         LTR   R7,R7               DOES JCT EXIST...           @OZ19451 32337025
         BZ    HJEC86              BRANCH IF NOT               @OZ19451 32337050
         TM    SJBFLG1,SJB1EJOB    IS JOB TO BE RERUN...       @OZ19451 32337075
         BZ    HJEC86              NO, DONT COUNT LINES        @OZ19451 32337100
*        SET JCTLINES/JCTXOUT TO SUM OF RECORD COUNTS FOR      @OZ19451 32337125
*        JCL IMAGE, SYSTEM MESSAGE, AND JOB LOG FILES          @OZ19451 32337150
         XR    R0,R0               ZERO ACCUMULATOR            @OZ19451 32337175
         L     R15,$SVPDDB1        GET OFFSET TO FIRST PDDB    @OZ19451 32337200
         LA    R15,IOTPDBOL(,R15)  ADD JOB LOG LINES           @OZ19451 32337225
         AL    R0,PDBRECCT-PDBDSECT(R15,RIOT) TO ACCUMULATOR   @OZ19451 32337250
         LA    R15,IOTPDBOI-IOTPDBOL(,R15) ADD JCL IMAGE LNS   @OZ19451 32337275
         AL    R0,PDBRECCT-PDBDSECT(R15,RIOT) TO ACCUMULATOR   @OZ19451 32337300
         LA    R15,IOTPDBOM-IOTPDBOI(,R15) ADD SYS MSG LINES   @OZ19451 32337325
         AL    R0,PDBRECCT-PDBDSECT(R15,RIOT) TO ACCUMULATOR   @OZ19451 32337350
         ST    R0,JCTLINES         SET PRINT OUTPUT AND        @OZ19451 32337375
         ST    R0,JCTXOUT           TOTAL OUTPUT COUNTS        @OZ19451 32337400
HJEC86   DS    0H                                              @OZ19451 32337425
         TM    SJBFLG3,SJB3TERM    IF JOB NOT TERMINATING,              32337500
         BZ    HJEC90              SKIP THIS CODE.                      32338000
         AL    RIOT,$SVPDDB1        ELSE POINT TO JCL PDDB           R4 32338500
         OI    IOTPDBOJ+PDBFLAG1-PDBDSECT(RIOT),PDB1NULL             R4 32338800
HJEC90   DS    0H                                                       32339000
         SPACE 3                                                        32339500
HJED00   DS    0H                                                       32340000
*                                                                       32340500
*                                                                       32341000
*              PERFORM PARTIAL PURGE OF OUTPUT IOT TRACK GROUPS         32341500
*                                                                       32342000
*                                                                       32342500
         L     RIOT,SJBIOT         IF JOB HAS                           32343000
         LTR   RIOT,RIOT           NO IOT(S),                           32343500
         BZ    HJED90              SKIP PURGE.                          32344000
         OI    IOTFLAG1,IOT1CKPT   FLAG 1ST IOT FOR CHECKPOINT.         32344500
         TM    SJBFLG3,SJB3PPOU    IS PARTIAL OUTPUT PURGE NEEDED       32345000
         BZ    HJED90              IF NOT, SKIP THIS CODE.              32345500
         LTR   R7,R7               IF NO JCT,                           32346000
         BZ    HJED90              SKIP THE FUNCTION.                   32346500
* NEXT, NULLIFY ALL PDDBS ALLOCATED DURING EXECUTION                    32347000
         LH    R0,JCTPDDBO         GET DD NUMBER OF 1ST OUTPUT PDDB.    32347500
         SPACE 1                                                        32348000
HJED20   L     R1,$SVPDDB1         GET OFFSET OF 1ST PDDB IN IOT     R4 32348500
         USING PDBDSECT,R1         PROVIDE PDDB ADDRESSABILITY.         32349000
         SPACE 1                                                        32349500
HJED40   CL    R1,IOTPDDBP         IF HAVE LOOKED AT ALL PDDBS          32350000
         BNL   HJED60               IN THIS IOT, BR TO TRY NEXT.        32350500
         CH    R0,PDBDSKEY-PDBDSECT(R1,RIOT)  IS IT THE ONE...          32351000
         BL    HJED50              BR IF ALREADY 1ST SYSOUT         R41 32351100
         LA    R1,PDBLENG(,R1)     BUMP IN ANY CASE.                    32351500
         BH    HJED40              BR IF NOT LAST DD * / DATA       R41 32352000
HJED50   DS    0H                                                   R41 32352100
         ST    R1,IOTPDDBP         RESET OFFSET IN IOT.                 32352500
         XC    IOTIOTTR,IOTIOTTR   TRUNCATE THE IOT CHAIN.              32353000
         OI    IOTFLAG1,IOT1CKPT   FLAG THE IOT FOR CHECKPOINT.         32353500
         B     HJED90              THEN CONTINUE.                       32354000
         SPACE 1                                                        32354500
HJED60   ICM   RIOT,15,IOTIOT      IF ANOTHER IOT,                      32355000
         BNZ   HJED20              BR TO SCAN IT.                       32355500
HJED90   DS    0H                                                       32356000
         SPACE 3                                                        32356500
HJEF00   DS    0H                                                       32357000
*                                                                       32357500
*                                                                       32358000
*              CHECKPOINT CONTROL BLOCKS AS REQUIRED                    32358500
*                                                                       32359000
*                                                                       32359500
         TM    SJBFLG3,SJB3CKPT    IS CHECKPOINTING CALLED FOR...       32360000
         BZ    HJEF90              SKIP THIS CODE IF NOT.               32360500
         L     RIOT,SJBIOT         POINT TO THE 1ST IOT.                32361000
HJEF10   DS    0H                                                       32361500
         LTR   R1,RIOT             IF NO MORE IOTS,                     32362000
         BZ    HJEF90              BR TO FREE STORAGE.                  32362500
         TM    IOTFLAG1,IOT1CKPT   IF NO CHECKPOINT REQUIRED,           32363000
         BZ    HJEF20              GO TO NEXT IOT.                      32363500
         NI    IOTFLAG1,255-IOT1CKPT  RESET CHECKPOINT FLAG.            32364000
         L     R0,IOTTRACK         GET IOT'S TRACK ADDRESS.             32364500
         CALL  HCBWR               WRITE THE IOT.                       32365000
HJEF20   DS    0H                                                       32365500
         L     RIOT,IOTIOT         POINT TO NEXT IOT.                   32366000
         B     HJEF10              LOOP THROUGH ALL IOTS.               32366500
HJEF90   DS    0H                                                       32367000
         SPACE 1                                               @OZ29966 32367025
         TM    SJBFLG1,SJB1XBMC    IF XBM NOT CONTINUING       @OZ29966 32367050
         BZ    HJEG00              DON'T NULLIFY PDDB'S        @OZ29966 32367075
         ICM   RIOT,15,SJBIOT      PT TO 1ST IOT               @OZ29966 32367100
         BZ    HJEG00              SKIP IF NO IOT'S            @OZ29966 32367150
         L     R4,$SVPDDB1         PREPARE TO RESET XBM        @OZ29966 32367200
         LA    R4,IOTPDBOD-PDBLENG(RIOT,R4) SYSOUT DATASETS    @OZ29966 32367250
HJEF95   LA    R4,PDBLENG(,R4)     PT TO NEXT PDDB (IF ANY)    @OZ29966 32367300
         L     R1,IOTPDDBP         IF NOT END                  @OZ29966 32367350
         LA    R1,IOTDSECT(R1)       OF PDDB'S                 @OZ29966 32367400
         CLR   R4,R1                  IN CURRENT IOT           @OZ29966 32367450
         BL    HJEF97              GO CHANGE NULL STATUS       @OZ29966 32367500
         ICM   RIOT,15,IOTIOT      IF NO MORE IOT'S            @OZ29966 32367550
         BZ    HJEG00              GET OUT OF LOOP             @OZ29966 32367600
         L     R4,$SVPDDB1         ELSE                        @OZ29966 32367650
         ALR   R4,RIOT               PREPARE                   @OZ29966 32367700
         SL    R4,=A(PDBLENG)          TO SCAN                 @OZ29966 32367750
         B     HJEF95                    NEXT IOT              @OZ29966 32367800
         USING PDBDSECT,R4                                     @OZ29966 32367820
HJEF97   OI    PDBFLAG1,PDB1NULL   NULLIFY PDDB AGAINST REUSE  @OZ29966 32367850
         B     HJEF95              GO TEST NEXT PDDB           @OZ29966 32367900
         DROP  R4                                              @OZ29966 32367950
HJEG00   DS    0H                                                       32368000
*                                                                       32368500
*                                                                       32369000
*              FREE STORAGE OCCUPIED BY ALL IOTS                        32369500
*                                                                       32370000
*                                                                       32370500
         TM    SJBFLG3,SJB3FIOT    ARE WE TO FREE IOTS...               32371000
         BZ    HJEG90              IF NOT, SKIP THIS CODE.              32371500
HJEG10   DS    0H                                                       32372000
         L     RIOT,SJBIOT         POINT TO THE 1ST IOT.                32372500
         LTR   R1,RIOT             IF NONE,                             32373000
         BZ    HJEG90              END OF THIS SEGMENT.                 32373500
         MVC   SJBIOT,IOTIOT       DECHAIN THE IOT.                     32374000
         CALL  HCBFM               FREE IT.                             32374500
         B     HJEG10              GO DO ANOTHER IOT.                   32375000
HJEG90   DS    0H                                                       32375500
*                                                                       32376000
*                                                                       32376500
*              UNCONDITIONALLY FREE THE OUTPUT CONTROL TABLES           32377000
*                                                                       32377500
*                                                                       32378000
HJEG100  DS    0H                                                       32378500
         L     R1,SJBOCT           POINT TO THE OCT.                    32379000
         LTR   R1,R1               IS THERE ONE...                      32379500
         BZ    HJEG110             IF NOT, END OF SECTION.              32380000
         USING OCTDSECT,R1         SET OCT ADDRESSABILITY.              32380500
         MVC   SJBOCT,OCTOCT       DECHAIN OCT.                         32381000
         CALL  HCBFM               FREE IT.                             32381500
         B     HJEG100             GO LOOK FOR ANOTHER.                 32382000
HJEG110  DS    0H                                                       32382500
         DROP  R1                  DROP OCT ADDRESSABILITY.             32383000
*                                                                       32383500
*                                                                       32384000
*        SET INITIAL OUTPUT PRIORITY                                R41 32384500
*                                                                       32385000
*                                                                       32385500
         TM    SJBFLG3,SJB3CKPT    IF JCT NOT TO BE WRITTEN,            32386000
         BZ    HJEH00              SKIP OUTPUT PRIORITY.                32386500
         LTR   R7,R7               IF NO JCT EXISTS,                    32387000
         BZ    HJEH00              SKIP.                                32387500
         TM    SJBFLG1,SJB1EJOB    IF JOB NOT TO RERUN,                 32388000
         BZ    HJEG115             CONTINUE OUTPUT PROPRITY.            32388500
         SLR   R0,R0               ZERO REGISTER ZERO.                  32389000
*              THIS LINE DELETED BY APAR NUMBER                @OZ19451 32389500
*              THIS LINE DELETED BY APAR NUMBER                @OZ19451 32390000
         ST    R0,JCTPUNCH         PUNCH OUTPUT.                        32390500
         B     HJEG140             GO WRITE THE JCT.                    32391000
HJEG115  DS    0H                                                       32391500
         LA    R0,1*16             STARTING PRIORITY = 1            R41 32392000
*              THIS LINE DELETED BY APAR NUMBER                @OZ28514 32392500
*              THIS LINE DELETED BY APAR NUMBER                @OZ28514 32393000
         CLI   SJBPRIO,13*16       CHECK FOR 'HIGH' PRIORITY        R41 32393500
         BL    HJEG130             USE '1' IF NOT                   R41 32394000
         LA    R0,15*16            RESET PRIO TO MAX                R41 32394500
         SPACE 1                                                        32398000
HJEG130  DS    0H                                                       32398500
         STC   R0,JCTIOPRI         STORE INIT OUTPUT PRTY IN JCT.       32399000
         STC   R0,SJBPRIO          PUT INITIAL OUTPUT PRTY IN SJB.      32399500
HJEG140  DS    0H                                                       32400000
         LR    R1,R7               POINT R1 TO JCT.                     32400500
         L     R0,SJBJCTRK         GET ITS TRACK IN R0.                 32401000
         CALL  HCBWR               WRITE IT.                            32401500
         SPACE 3                                                        32402000
HJEH00   DS    0H                                                       32402500
*                                                                       32403000
*                                                                       32403500
*              INVOKE HASPXEQ TO TERMINATE/RE-ENQUEUE THE JOB OR        32404000
*              TO CLEAN UP EXECUTION BATCH MONITOR                      32404500
*                                                                       32405000
*                                                                       32405500
* ACQUIRE HASP CROSS-MEMORY-SERVICES LOCK                               32406000
         CALL  $SVJLOK             GET HASP CMS LOCK.                   32406500
* ACQUIRE OS LOCAL MEMORY LOCK                                          32407000
HJEHLL   SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,               C32407500
               RELATED=(HASPSSSM,(HJEHUL))                              32408000
* ACQUIRE OS CROSS-MEMORY-SERVICES LOCK                                 32408500
HJEHLC   SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,REGS=USE,                 C32409000
               RELATED=(HASPSSSM,(HJEHUC))                              32409500
* SET AND RESET MISCELLANEOUS FLAGS ONLY UNDER LOCK                     32410000
         TM    SJBFLG1,SJB1XBMR    IF XBM RESET NOT REQUIRED,           32410500
         BZ    *+8                 SKIP.                                32411000
         NI    SJBFLG1,255-SJB1XBM-SJB1XBMR  RESET XBM, XBMR.           32411500
         TM    SJBFLG1,SJB1XBM+SJB1XBMC  IF NOT XBM CONTINUE,           32412000
         BNO   *+8                 SKIP.                                32412500
         OI    SJBFLG1,SJB1XBWT    SHOW XBM WAITING FOR JOB.            32413000
*              FREE ANY EXTRANEOUS STORAGE CELLS                        32413500
         LR    R0,R13              SET CELL PURGE                       32414000
         SLR   R1,R1               PARAMETERS.                          32414500
         ST    R1,SJBLOGQ          ZERO OUT LOG Q.                      32415000
         LR    R6,R7               SAVE JCT POINTER                     32415500
         L     R15,$SVFCELA        POINT TO CELL PURGE.                 32416000
         BALR  R14,R15             PURGE CELLS.                         32416500
         LR    R7,R6               RESTORE JCT POINTER                  32417000
* INCREMENT $SVPIDLE IF NEITHER SJB1XBM NOR SJB1SJID                    32417500
         TM    SJBFLG1,SJB1XBM+SJB1SJID  IF XBM OR SYSTEM TASK,         32418000
         BNZ   HJEH50              SKIP $SVPIDLE INCREMENT.             32418500
         L     R1,$SVPIDLE         GET CURRENT PIDLE IN R1,             32419000
         LA    R0,1(,R1)           INCREMENT PIDLE IN R0.               32419500
         CS    R1,R0,$SVPIDLE      SWITCH THEM.                         32420000
         BNE   *-8                 IF INTERFERENCE, REPEAT.             32420500
HJEH50   DS    0H                                                       32421000
* QUEUE SJB ON $SVJTERM OR $SVJRENQ FOR HASPXEQ                         32421500
         LA    R1,$SVJTERM         ASSUME JOB SHOULD TERMINATE.         32422000
         CLI   SJBXQFN1+1,SSOBRENQ IF JOB SHOULD TERMINATE,             32422500
         BNE   *+8                 SKIP.                                32423000
         LA    R1,$SVJRENQ         ELSE SET RE-ENQUEUE QUEUE.           32423500
         SLR   R0,R0               ZERO THE                             32424000
         ST    R0,SJBECB           ECB.                                 32424500
* SET ASCB POINTER IN SJB FOR XMPOST (MIGHT BE EOM)                     32425000
         MVC   SJBASCBP,PSAAOLD-PSA  RE-SET ASCB POINTER.               32425500
         CALL  $SJBRQ              RE-QUEUE THE SJB.                    32426000
* RELEASE OS CROSS-MEMORY-SERVICES LOCK                                 32426500
HJEHUC   SETLOCK RELEASE,TYPE=CMS,REGS=USE,                            C32427000
               RELATED=(HASPSSSM,(HJEHLC))                              32427500
* RELEASE OS LOCAL MEMORY LOCK                                          32428000
HJEHUL   SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          C32428500
               RELATED=(HASPSSSM,(HJEHLL))                              32429000
* RELEASE HASP CROSS-MEMORY-SERVICES LOCK                               32429500
         CALL  $SVJUNLK            RELEASE HASP CMS LOCK.               32430000
* POST HASPXEQ FOR JOB AND WAIT TILL IT POSTS US BACK                   32430500
         $$POST ELMT=$SVJOB        POST HASP.                           32431000
         WAIT  1,ECB=SJBECB        SHORT WAIT FOR REGULAR.              32431500
HJEH70   DS    0H                                                       32432000
* SET & RESET MISCELLANEOUS FLAGS                                       32432500
         NI    SJBFLG1,255-SJB1EJOB  RESET RE-EXECUTE FLAG.             32433000
         SPACE 3                                                        32433500
HJEI00   DS    0H                                                       32434000
*                                                                       32434500
*                                                                       32435000
*              FREE THE HASP JOB CONTROL TABLE                          32435500
*                                                                       32436000
*                                                                       32436500
         TM    SJBFLG3,SJB3FJCT    SHOULD WE FREE THE JCT...            32437000
         BZ    HJEI90              IF NOT, SKIP THIS CODE.              32437500
         LTR   R1,R7               IS THERE A JCT TO FREE...            32438000
         BZ    HJEI90              BRANCH IF NOT.                       32438500
         SLR   R7,R7               OTHERWISE                            32439000
         ST    R7,SJBJCT           ZERO SJB POINTER TO JCT              32439500
         CALL  HCBFM               AND FREE THE JCT SPACE.              32440000
HJEI90   DS    0H                                                       32440500
         SPACE 3                                                        32441000
HJEJ00   DS    0H                                                       32441500
*                                                                       32442000
*                                                                       32442500
*              IF EXECUTION BATCH MONITOR, EXIT HERE                    32443000
*                                                                       32443500
*                                                                       32444000
         TM    SJBFLG1,SJB1XBM     IF NOT BATCH MONITOR,                32444500
         BZ    HJEJ90              SKIP THIS CODE.                      32445000
         TM    SJBFLG1,SJB1XBWT    IF NO JOB SELECTED,                  32445500
         BO    HJEJ10              RETURN TO SVCXBM.                    32446000
* RETURN TO HOSJBSL TO SET UP NEW USER JOB                              32446500
         SL    R12,=A(HJEBASE-HJSBASE)  SET UP JOB SELECT BASE.         32449000
         USING HJSBASE,R12         SET JBSL ADDRESSABILITY.             32449500
         B     HJS200              ENTER JBSL TO START USER JOB.        32450000
         USING HJEBASE,R12         RESTORE JBTM ADDRESSABILITY.         32450500
HJEJ10   DS    0H                                                       32451000
* RETURN TO SVCXBM TO TERMINATE EXECUTION BATCH MONITOR                 32451500
         SL    R12,=A(HJEBASE-SVCHBASE)  SET SVCXBM BASE                32452000
         USING SVCHBASE,R12        AND ADDRESSABILITY.                  32452500
         B     SX100               RETURN TO SVCXBM.                    32453000
         USING HJEBASE,R12         RESTORE JBTM ADDRESSABILITY.         32453500
HJEJ90   DS    0H                                                       32454000
         SPACE 3                                                        32454500
HJEK00   DS    0H                                                       32455000
*                                                                       32455500
*                                                                       32456000
*              IF JOB SELECTED BY ID (STARTED TASK), EXIT HERE          32456500
*                                                                       32457000
*                                                                       32457500
         TM    SJBFLG1,SJB1SJID    IF NOT STARTED TASK,                 32458000
         BZ    HJEK90              SKIP THIS CODE.                      32458500
* IF SUBSYSTEM FUNCTION IS JOB TERMINATE, EXIT NORMALLY.                32459000
         SLR   R15,R15             ASSUME NORMAL END.                   32459500
         CLI   SJBXQFN1+1,SSOBJBSL IF SUBSYS FUNC IS NOT JBSL,          32460000
         BNE   HJEK10              RETURN NORMALLY.                     32460500
* IF SUBSYSTEM FUNCTION IS JOB SELECT, SHOW PROGRAM ERROR.              32461000
         LA    R15,SSJSPERR        ELSE ASSUME PROG ERROR.              32461500
* BUT IF SSJSSERR IS NONZERO, SHOW SYSTEM ERROR                         32462000
         L     R0,SSJSSERR         GET CONV/INTRP CODE.                 32462500
         LTR   R0,R0               IF ZERO,                             32463000
         BZ    HJEK10              MUST BE PROGRAM ERROR.               32463500
         LA    R15,SSJSYSER        ELSE SHOW SYSTEM ERROR.              32464000
* SAVE RETURN CODE IN ORIGINAL SAVE AREA, R0 SLOT                       32464500
HJEK10   DS    0H                                                       32465000
         L     R1,4(,R13)          SAVE RETURN CODE                     32465500
         ST    R15,20(,R1)         WHILE FREEING SJB.                   32466000
         L     R1,24(,R1)          GET SSOB ADDRESS                 R41 32466100
         USING SSOBEGIN,R1         SET SSOB ADDRESSABILITY          R41 32466200
         L     RSIB,SSOBSSIB       GET SSIB ADDRESS                 R41 32466300
         XC    SSIBSUSE,SSIBSUSE   CLEAR PTR TO SJB                 R41 32466400
* FREE THE SUBSYSTEM JOB BLOCK                                          32466500
         CALL  $SJBFREE            FREE THE SJB.                        32467000
* RESTORE RETURN CODE TO R15 AND GO TO $EPILOG                          32467500
         L     R15,20(,R13)        RESTORE RETURN CODE TO R15.          32468000
         $EPILOG ,                 RETURN FROM FUNCTION.                32468500
HJEK90   DS    0H                                                       32469000
         SPACE 3                                                        32469500
HJEL00   DS    0H                                                       32470000
*                                                                       32470500
*                                                                       32471000
*              IF JOB WAS SET FOR OS RESTART OR TERMINATE,              32471500
*              EXIT HERE                                                32472000
*                                                                       32472500
*                                                                       32473000
         CLI   SJBXQFN1+1,SSOBJBSL WAS ENTRY FROM JOB SELECT...         32473500
         BNE   HJEL10              BRANCH IF NOT.                       32474000
         SL    R12,=A(HJEBASE-HJSBASE)  SET JBSL BASE.                  32474500
         USING HJSBASE,R12         SET JBSL ADDRESSABILITY.             32475000
         L     R1,4(,RSJB)         POINT TO CALLER'S SAVEAREA.          32475500
         L     R1,24(,R1)          GET CALLER'S R1.                     32476000
         USING SSOBEGIN,R1         SET SSOB ADDRESSABILITY.             32476500
         L     RSIB,SSOBSSIB       POINT RSIB TO SSIB.                  32477000
         L     RSOX,SSOBINDV       POINT RSOX TO EXTENSION.             32477500
         DROP  R1                  DROP SSOB BASE.                      32478000
         B     HJSBASE             RETURN TO JOB SELECT.                32478500
         USING HJEBASE,R12         SET JBTM ADDRESSABILITY.             32479000
HJEL10   DS    0H                                                       32479500
         SLR   R15,R15                                                  32480000
         $EPILOG ,                 RETURN WITH NORMAL CODE.             32480500
         DROP  R7,RSOX,RIOT,RSIB   DROP BASES.                          32481000
         TITLE 'LITERAL POOL FOR HOSREQID - HOSTERM'                    32485000
         LTORG                                                          32485500
         TITLE 'HASP CONTROL BLOCK (JCT, IOT, OCT) SUBROUTINES'         32486000
*                                                                       32486500
*                                                                       32487000
*              GET MAIN STORAGE FOR A HASP CONTROL BLOCK                32487500
*                                                                       32488000
*                                                                       32488500
HCBGM    DS    0H                                                       32489000
         USING *,R12               SET LOCAL ADDRESSABILITY.            32489500
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      32490000
         LR    R12,R15             SET LOCAL BASE.                      32490500
         LH    R1,$SVBFSIZ               GET                         R4 32490800
         LA    R0,IOTSTART-IOTDSECT(,R1)  BUFFER                     R4 32491000
        $GETMAIN RC,LV=(R0),SP=230,KEY=5   STORAGE                   R4 32491100
         ST    R15,16(,R13)        STORE R15 IN SAVE AREA.              32491500
         ST    R1,24(,R13)         STORE R1 IN SAVE AREA.               32492000
         BZ    HCBGM9              IF STORAGE GOT, SKIP MESSAGE.        32492500
         $MID  359                 WRITE OUT-OF-SP-231 MESSAGE.         32493000
         WTO   '&MID.HCBGM - NO STORAGE AVAILABLE IN SP 230',        R4C32493100
               ROUTCDE=10,DESC=6                                        32494000
HCBGM9   DS    0H                                                       32494500
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   32495000
         LTR   R15,R15             SET CONDITION CODE.                  32495500
         BR    R14                 RETURN TO CALLER.                    32496000
         EJECT                                                          32496500
*                                                                       32497000
*                                                                       32497500
*              FREE MAIN STORAGE FOR A HASP CONTROL BLOCK               32498000
*                                                                       32498500
*                                                                       32499000
* REGISTER 1 POINTS TO SPACE TO FREE                                    32499500
HCBFM    DS    0H                                                       32500000
         USING *,R12               SET LOCAL ADDRESSABILITY.            32500500
         LTR   R1,R1               IF NO STORAGE TO FREE,               32501000
         BZR   R14                 RETURN CONDITION CODE ZERO.          32501500
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      32502000
         LR    R12,R15             SET LOCAL BASE.                      32502500
         LH    R2,$SVBFSIZ                             FREE          R4 32502600
         LA    R0,IOTSTART-IOTDSECT(,R2)                BUFFER       R4 32502700
        $FREMAIN RC,LV=(R0),SP=230,KEY=5,A=(R1),TCB=YES  STORAGE     R4 32502800
         BZ    HCBFM9              SKIP MESSAGE IF OKAY.                32503500
         $MID  371                 ELSE WRITE FREEMAIN FAILED.          32504000
         WTO   '&MID.HCBFM - FREEMAIN FAILED FOR SP 230',            R4C32504100
               ROUTCDE=10,DESC=4                                        32505000
HCBFM9   DS    0H                                                       32505500
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   32506000
         SR    R15,R15             ZERO R15 AND CONDITION CODE.         32506500
         BR    R14                 RETURN TO CALLER.                    32507000
         DROP  R12                 DROP LOCAL BASE.                     32507500
         EJECT                                                          32508000
*                                                                       32508500
*                                                                       32509000
*              CHECKPOINT ALL HASP CONTROL BLOCKS                       32509500
*              POINTED TO BY AN SJB                                     32510000
*                                                                       32510500
*                                                                       32511000
HCBCK    DS    0H                                                       32511500
         USING *,R7                SET LOCAL ADDRESSABILITY.            32512000
         LR    R7,R15              SET LOCAL BASE.                      32512500
         LR    R6,R14              SAVE RETURN ADDRESS.                 32513000
* CHECKPOINT REGULAR IOT(S)                                             32513500
         LA    R5,SJBIOT           SET ARGUMENT.                        32514000
         BAL   R4,HCBCKIOT         CALL IOT CHAIN CHECKPOINTER.         32514500
* CHECKPOINT SPIN IOTS                                                  32515000
         LA    R5,SJBSPIOT         SET ARGUMENT.                        32515500
         BAL   R4,HCBCKIOT         CALL IOT CHAIN CHECKPOINTER.         32516000
* CHECKPOINT JCT                                                        32516500
         L     R5,SJBJCT           POINT TO THE HASP JCT.               32517000
         LTR   R1,R5               IF NO JCT,                           32517500
         BZR   R6                  JUST RETURN TO CALLER.               32518000
         USING JCTDSECT,R5         SET JCT ADDRESSABILITY.              32518500
         TM    JCTFLAG1,JCT1CKPT   IF JCT CHECKPOINT NOT REQD,          32519000
         BZR   R6                  JUST RETURN TO CALLER.               32519500
         NI    JCTFLAG1,255-JCT1CKPT  ELSE RESET CHECKPOINT FLAG.       32520000
         L     R0,SJBJCTRK         GET JCT TRACK ADDRESS.               32520500
         CALL  HCBWR               WRITE THE JCT.                       32521000
         BR    R6                  RETURN TO CALLER.                    32521500
         SPACE 3                                                        32522000
*                                                                       32522500
*              IOT CHECKPOINT SUBROUTINE                                32523000
*                                                                       32523500
HCBCKIOT DS    0H                                                       32524000
         SL    R5,=A(IOTIOT-IOTDSECT)  ADJUST ARGUMENT.                 32524500
         USING IOTDSECT,R5         SET IOT ADDRESSABILITY.              32525000
HCBCKI1  DS    0H                                                       32525500
         L     R5,IOTIOT           POINT TO NEXT IOT.                   32526000
         LTR   R1,R5               IF END OF CHAIN,                     32526500
         BZR   R4                  RETURN TO CALLER.                    32527000
         TM    IOTFLAG1,IOT1CKPT   IF IOT CHECKPOINT NOT REQ'D,         32527500
         BZ    HCBCKI1             GO ON TO NEXT IOT.                   32528000
         NI    IOTFLAG1,255-IOT1CKPT  ELSE RESET CHECKPOINT FLAG.       32528500
         L     R0,IOTTRACK         GET IOT TRACK ADDRESS.               32529000
         CALL  HCBWR               WRITE OUT THE IOT.                   32529500
         B     HCBCKI1             THEN GO ON TO NEXT IOT.              32530000
         DROP  R5                  DROP IOT BASE.                       32530500
         DROP  R7                  DROP LOCAL BASE.                     32531000
         EJECT                                                          32531500
*                                                                       32532000
*                                                                       32532500
*              READ/WRITE A HASP CONTROL BLOCK                          32533000
*                                                                       32533500
*                                                                       32534000
HCBRD    DS    0H                  READ A CONTROL BLOCK ---             32534500
         USING *,R12               SET LOCAL ADDRESSABILITY.            32535000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      32535500
         LR    R12,R15             SET LOCAL BASE.                      32536000
         ICM   R1,8,=X'06'         ADD READ COMMAND TO DATA ADR.        32536500
         LA    R12,HCBIO           SET COMMON BASE                      32537000
         BR    R12                 AND BRANCH TO COMMON.                32537500
         SPACE 3                                                        32538000
HCBWR    DS    0H                  WRITE A CONTROL BLOCK ---            32538500
         USING *,R12               SET LOCAL ADDRESSABILITY.            32539000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      32539500
         LR    R12,R15             SET LOCAL BASE.                      32540000
         ICM   R1,8,=X'05'         ADD WRITE COMMAND TO DATA ADR.       32540500
         LA    R12,HCBIO           SET COMMON BASE.                     32541000
         SPACE 3                                                        32541500
HCBIO    DS    0H                                                       32542000
         USING *,R12               COMMON ROUTINE FOR READ/WRITE--      32542500
         TM    SJBFLG1,SJB1XBWT    IF XBM HAS NO JOB,                   32542600
         BO    HCBIO900             PROHIBIT ALL I/O HERE.              32542700
         CLM   R1,7,=F'0'          IF ZERO BUFFER POINTER,     @OZ19486 32543000
         BZ    HCBIO800            EXIT IMMEDIATELY.                    32543500
         AL    R1,=A(BUFSTART-BUFDSECT)  COMPUTE READ/WRITE ADR.        32544000
         ST    R1,SJBCCW4          SET COMMAND, DATA ADDRESS.           32544500
* CONVERT MTTR TO FULL DISK ADDRESS, MBBCCHHR                           32545000
         CLM   R0,8,$SVNUMDA       IF INCORRECT EXTENT,              R4 32545500
         BNL   HCBIO100             BRANCH TO ERROR MESSAGE          R4 32546000
         LR    R3,R0               COPY MTTR TO R3.                     32546500
         LA    R0,0(,R3)           MAKE R0 0TTR.                        32547000
         XR    R3,R0               MAKE R3 M000.                        32547500
         ST    R3,SJBIFDAD         SET EXTENT, ZEROES IN IOB.           32548000
         STC   R0,SJBIFDAD+7       SET RECORD NUMBER IN IOB.            32548500
         SRL   R3,24               FROM EXTENT NUMBER,                  32549000
         MH    R3,=AL2(TEDSIZ)     CALCULATE ADDRESS OF                 32549500
         L     R4,$SVTED           TRACK EXTENT                      R4 32550000
         ALR   R4,R3               DATA.                             R4 32550300
         USING TEDDSECT,R4         SET TED ADDRESSABILITY.              32550500
         LR    R2,R0               COPY 0TTR TO R2.                     32551500
         SRDL  R2,40               SET TT IN R2, R3 FOR DIVIDE.         32552000
         L     R0,TNTC             GET NUMBER OF TRACKS/CYL.            32552500
         LTR   R0,R0               IF ZERO, SPOOL VOLUME ABSENT -       32553000
         BZ    HCBIO100            WRITE ERROR MESSAGE.                 32553500
         DR    R2,R0               ELSE COMPUTE CYL & HEAD.             32554000
         $ALGN STH,R3,SJBIFDAD+3   SET CYLINDER IN IOB.                 32554500
         $ALGN STH,R2,SJBIFDAD+5   SET HEAD IN IOB.                     32555000
* SET ROTATIONAL POSITION SENSING                                       32555500
         MVI   SJBCCW1,X'03'       ASSUME NO RPS.                       32556000
         L     R2,TRPS             POINT TO EXTENT'S RPS TABLE.         32556500
         LTR   R2,R2               IF ZERO POINTER,                     32557000
         BZ    HCBIO10             DEVICE HAS NO RPS.                   32557500
         SLR   R3,R3               ELSE ZERO R3 FOR IC.                 32558000
         IC    R3,SJBIFDAD+7       GET RECORD NUMBER FRON IOB.          32558500
         IC    R3,0(R3,R2)         GET CORRESPONDING SECTOR NUMB.       32559000
         STC   R3,SJBCCW1+5        SET SET-SECTOR DATA                  32559500
         MVI   SJBCCW1,X'23'       AND SET-SECTOR COMMAND.              32560000
* EXECUTE CHANNEL PROGRAM                                               32560500
HCBIO10  EXCP  SJBIOB              START THE CHANNEL PROGRAM.           32561000
* ADD ONE TO INPUT/OUTPUT SERVICE MEASURE                               32561500
         L     R1,PSAAOLD-PSA      POINT TO CURRENT ASCB.               32562000
         USING ASCB,R1             SET ASCB ADDRESSABILITY.             32562500
         L     R2,ASCBIOSM         GET CURRENT IOSM - BYTES 0,1.        32563000
HCBIO15  DS    0H                                                       32563500
         LR    R3,R2               MOVE IT TO UPDATE REGISTER.          32564000
         AL    R3,=FS16'1'         ADD 1 TO SERVICE MEASURE.            32564500
         CS    R2,R3,ASCBIOSM      STORE NEW MEASURE.                   32565000
         BNE   HCBIO15             REPEAT IF INTERFERENCE.              32565500
         DROP  R1                  DROP ASCB ADDRESSABILITY.            32566000
* AWAIT COMPLETION                                                      32566500
         WAIT  1,ECB=SJBECB        WAIT TILL IT ENDS.                   32567000
* VERIFY THE I/O OPERATION                                              32567500
         TM    SJBECB,X'20'        IF NOT-PERM-ERROR FLAG IS OFF,       32568000
         BZ    HCBIO120            GO WRITE ERROR MESSAGE.              32568500
* VALIDITY-CHECK THE CONTROL BLOCK IF READ                              32569000
         CLI   SJBCCW4,6           IF NOT A CONTROL BLOCK READ,         32569500
         BNE   HCBIO900            PERFORM NO VALIDITY CHECK.           32570000
         L     R5,24(,R13)         POINT AGAIN TO THE BUFFER.           32570500
         USING JCTDSECT,R5         SET JCT ADDRESSABILITY.              32571000
         CLC   =CL4'JCT',JCTID     IF CONTROL BLOCK IS JCT,             32571500
         BE    HCBIO20             GO CHECK IT.                         32572000
         CLC   =CL4'IOT',JCTID     IF CONTROL BLOCK IS IOT,             32572500
         BE    HCBIO30             GO CHECK IT.                         32573000
         CLC   =CL4'OCT',JCTID     IF CONTROL BLOCK IS OCT,             32573500
         BE    HCBIO40             GO CHECK IT.                         32574000
         B     HCBIO110            ELSE UNKNOWN CONTROL BLOCK.          32574500
* JCT VALIDITY CHECK                                                    32575000
HCBIO20  CLC   SJBJQOFF,JCTJQE     IF JQE OFFSET IN JCT                 32575500
         BNE   HCBIO110            IS INCORRECT, ERROR.                 32576000
         MVC   SJBJKEY,JCTJBKEY    ELSE SET JOB KEY IN SJB              32576500
         B     HCBIO900            AND RETURN.                          32577000
* IOT VALIDITY CHECK                                                    32577500
         USING IOTDSECT,R5         SET IOT ADDRESSABILITY.              32578000
HCBIO30  CLC   SJBJKEY,IOTJBKEY    IF JOB KEY IN IOT IS WRONG,          32578500
         BNE   HCBIO110            IOT IS INVALID.                      32579000
         B     HCBIO900            ELSE RETURN.                         32579500
* OCT VALIDITY CHECK                                                    32580000
         USING OCTDSECT,R5         SET OCT ADDRESSABILITY.              32580500
HCBIO40  CLC   SJBJKEY,OCTJBKEY    IF JOB KEY IN OCT IS WRONG,          32581000
         BNE   HCBIO110            OCT IS INVALID.                      32581500
         B     HCBIO900            ELSE RETURN.                         32582000
         SPACE 3                                                        32582500
*                                                                       32583000
*              WRITE ERROR MESSAGE - INVALID TRACK ADDRESS              32583500
*                                                                       32584000
HCBIO100 DS    0H                                                       32584500
         $MID  363                 SET HASP MESSAGE ID.                 32585000
         WTO   '&MID.HCBIO - INVALID TRACK ADDRESS',ROUTCDE=10,        C32585500
               DESC=6                                                   32586000
         B     HCBIO800                                                 32586500
         SPACE 3                                                        32587000
*                                                                       32587500
*              ERROR MESSAGE - INVALID CONTROL BLOCK                    32588000
*                                                                       32588500
         $MID  364                 SET HASP MESSAGE ID.                 32589000
HCBIOVMS WTO   '&MID.HCBIO - INVALID CONTROL BLOCK - ***',             C32589500
               ROUTCDE=10,DESC=6,MF=L                                   32590000
HCBIOM1  EQU   HCBIOVMS,*-HCBIOVMS                                      32590500
HCBIOM2  EQU   4+9+32,3            CONTROL BLOCK ID                  R4 32591000
*                                                                       32591500
*              WRITE INVALID CONTROL BLOCK MESSAGE                      32592000
*                                                                       32592500
HCBIO110 DS    0H                                                       32593000
         GETMAIN R,LV=L'HCBIOM1    GET STORAGE FOR MESSAGE.             32593500
         MVC   0(L'HCBIOM1,R1),HCBIOM1  MOVE MESSAGE.                   32594000
         MVC   HCBIOM2(,R1),0(R5)  SET CONTROL BLOCK TYPE.              32594500
         LR    R2,R1               SAVE STORAGE ADDRESS.                32595000
         WTO   MF=(E,(1))          WRITE MESSAGE.                       32595500
         FREEMAIN R,LV=L'HCBIOM1,A=(R2)  FREE STORAGE.                  32596000
         B     HCBIO800            RETURN ERROR CODE.                   32596500
         SPACE 3                                                        32597000
*                                                                       32597500
*              I/O ERROR READING/WRITING CONTROL BLOCK                  32598000
*                                                                       32598500
         $MID  370                 SET HASP MESSAGE ID.                 32599000
HCBIOERR WTO   '&MID.HCBIO - I/O ERROR ****ING CONTROL BLOCK - ***',MF=C32599500
               L,ROUTCDE=10,DESC=6                                      32600000
HCBIOM3  EQU   HCBIOERR,*-HCBIOERR MESSAGE LENGTH                       32600500
HCBIOM4  EQU   4+9+18,4            READ/WRIT OFFSET, LENGTH          R4 32601000
HCBIOM5  EQU   4+9+42,3            CB TYPE OFFSET, LENGTH            R4 32601500
*                                                                       32602000
*              WRITE I/O ERROR MESSAGE                                  32602500
*                                                                       32603000
HCBIO120 DS    0H                                                       32603500
         GETMAIN R,LV=L'HCBIOM3    GET STORAGE FOR MESSAGE.             32604000
         MVC   0(L'HCBIOM3,R1),HCBIOM3  MOVE MESSAGE.                   32604500
         MVC   HCBIOM4(,R1),=C'READ'  ASSUME 'READ'ING.                 32605000
         CLI   SJBCCW4,6           IF READ,                             32605500
         BE    *+10                SKIP.                                32606000
         MVC   HCBIOM4(,R1),=C'WRIT'  ELSE SET 'WRIT'ING.               32606500
         L     R5,SJBCCW4          GET POINTER TO ID.                   32607000
         MVC   HCBIOM5(,R1),0(R5)  MOVE CB ID TO MESSAGE.               32607500
         LR    R2,R1               SAVE STORAGE ADDRESS.                32608000
         WTO   MF=(E,(1))          WRITE MESSAGE.                       32608500
         FREEMAIN R,LV=L'HCBIOM3,A=(R2)  FREE STORAGE.                  32609000
         B     HCBIO800            RETURN ERROR CODE.                   32609500
         SPACE 3                                                        32610000
*                                                                       32610500
*              ERROR RETURN                                             32611000
*                                                                       32611500
HCBIO800 DS    0H                                                       32612000
         LA    R15,4               SET R15 TO 4                         32612500
         B     HCBIO950            AND RETURN.                          32613000
         SPACE 3                                                        32613500
*                                                                       32614000
*              NORMAL RETURN                                            32614500
*                                                                       32615000
HCBIO900 DS    0H                                                       32615500
         SLR   R15,R15             ZERO REGISTER 15.9                   32616000
HCBIO950 DS    0H                                                       32616500
         ST    R15,16(,R13)        SAVE RETURN CODE IN SAVE AREA.       32617000
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   32617500
         LTR   R15,R15             SET CONDITION CODE.                  32618000
         BR    R14                 RETURN TO CALLER.                    32618500
         DROP  ,                   DROP ALL BASES.                      32619000
         TITLE 'HASP JOB RE-ENQUEUE SUBSYSTEM FUNCTION'                 32619500
*                                                                       32620000
*                                                                       32620500
*              HASP JOB RE-ENQUEUE SUBSYSTEM FUNCTION                   32621000
*                                                                       32621500
*                                                                       32622000
HOSRENQ  $PROLOG SSOBRENQ,SSRQSIZE,LOCK=REQ                             32622500
         SL    R12,=A(*-HJEBASE)   JOB RE-ENQUEUE IS HANDLED            32623000
         USING HJEBASE,R12         SET JBTM ADDRESSABILITY.             32623500
         B     HJERENQ             RE-ENQUEUE THE JOB.                  32624000
         TITLE 'HOSEOT -- END-OF-TASK RECOVERY ROUTINE'                 32624500
HOSEOT   $PROLOG SSOBEOT,SSETSIZE,LOCK=REQ                              32625000
HOSEOTB  DS    0H                  END-OF-TASK BASE                     32625500
*                                                                       32626000
*                                                                       32626500
*              ATTEMPT TO SET FLAG SJBTFFGP TO CAUSE $EPILOG            32627000
*              TO FREE A POSSIBLE PSO CONTROL BLOCK                     32627500
*                                                                       32628000
*                                                                       32628500
         USING SSETBGN,RSOX        SET SSOX ADDRESSABILITY.             32629000
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              32629500
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             32630000
HET100   DS    0H                                                       32630500
         L     R15,SJBPSOP         IF NO PSO                            32631000
         LTR   R15,R15             CONTROL BLOCK EXISTS,                32631500
         BZ    HET200              SKIP.                                32632000
         USING PSODSECT,R15        SET PSO ADDRESSABILITY.              32632500
         CLC   PSOTCB,SSETCBA      IF PSO FOR DIFFERENT TASK,           32633000
         BNE   HET200              SKIP.                                32633500
         OI    SJBTFFG,SJBTFFGP    ELSE SET FLAG FOR $EPILOG.           32634000
         DROP  R15                 DROP PSO BASE.                       32634500
*                                                                       32635000
*                                                                       32635500
*              CALL SUBROUTINE $SVFCELA TO FREE CELLS ASSOCIATED        32636000
*              WITH THIS SJB AND TCB                                    32636500
*                                                                       32637000
*                                                                       32637500
HET200   DS    0H                                                       32638000
         LR    R0,RSJB             SET ARGUMENTS -                      32638500
         L     R1,SSETCBA          R0=SJB, R1=TCB.                      32639000
         L     R15,$SVFCELA        FREE ALL                             32639500
         BALR  R14,R15             ASSOCIATED CELLS.                    32640000
*                                                                       32640100
*                                                                       32640200
*              COMPLETE PURGED I/O REQUESTS FOR THIS TASK               32640300
*                                                                       32640400
*                                                                       32640500
HET300   DS    0H                                                       32640600
* STOP ALL OTHER TASKS FROM EXECUTING                                   32640700
         STATUS SET,ND,,(4)        SET TCBHNDSP.                        32640800
* RUN THE CHAIN OF SUBSYSTEM DATASET BLOCKS                             32640900
         L     R8,SJBSDB           POINT TO THE FIRST SDB.              32641000
HET320   DS    0H                                                       32641100
         LTR   R8,R8               IF NO MORE SDBS,                     32641200
         BZ    HET420              END OF SECTION.                      32641300
         USING SDBDSECT,R8         SET SDB ADDRESSABILITY.              32641400
* DETERMINE TEST TO BE MADE ON THIS SDB                                 32641500
         TM    SDBFLG2,SDB2IOA     IF IOA FLAG OFF,                     32641600
         BZ    HET340              BRANCH.                              32641700
* SDB2IOA ON --- IF PURGED WITH HIO, RESTART                            32641800
         CLI   SDBICMP,X'48'       IF NOT PURGE/HALT-I/O,               32641900
         BNE   HET380              DO NEXT SDB.                         32642000
         B     HET360              ELSE GO COMPLETE I/O.                32642100
* SDB2IOA OFF -- IF OUTPUT AND PURGE-QUIESCE, RESTART                   32642200
HET340   DS    0H                                                       32642300
         CLI   SDBCHEND,SDBCEPUT   IF CE APDG NOT HCEPUT,               32642400
         BNE   HET380              DO NEXT SDB.                         32642500
         L     R0,SDBPBF           ELSE IF SDBPBF                       32642600
         LTR   R0,R0               IS ZERO,                             32642700
         BZ    HET380              GO DO NEXT SDB.                      32642800
* SAVE CURRENT CONTENTS OF ECB                                          32642900
HET360   DS    0H                                                       32643000
         L     R2,SDBECB           SAVE CURRENT ECB.                    32643100
         MVI   SDBECB,0            ZERO THE ECB.                        32643200
* ISSUE EXCP TO RESUME CHANNEL OPERATIONS                               32643300
         EXCP  SDBIOB              START CHANNEL PROGRAM.               32643400
* WAIT FOR COMPLETION OF ALL I/O                                        32643500
         WAIT  1,ECB=SDBECB        WAIT FOR COMPLETION.                 32643600
* IF SAVED ECB WAS WAITING, RESTORE AND POST IT                         32643700
         LTR   R2,R2               IF SAVED ECB'S WAIT BIT              32643800
         BNM   HET400              IS OFF, BRANCH.                      32643900
         ST    R2,SDBECB           RESTORE SAVED ECB.                   32644000
         IC    R0,SDBICMP          GET POST CODE.                       32644100
         SLL   R0,24               LEFT-JUSTIFY.                        32644200
         POST  SDBECB,(0)          POST THE SAVED ECB.                  32644300
         B     HET400              GO LOOK AT NEXT SDB.                 32644400
* DO A FINAL CHECK ON THIS SDB                                          32644500
HET380   DS    0H                                                       32644600
*              THIS LINE DELETED BY APAR NUMBER                @OZ29959 32644700
*              THIS LINE DELETED BY APAR NUMBER                @OZ29959 32644800
         TM    SDBFLG2,SDB2IOA     IF I/O INACTIVE,                     32644900
         BZ    HET400              DO NEXT SDB.                         32645000
         TM    SDBECB,X'C0'        IF WAITING OR POSTED,                32645100
         BNZ   HET400              DO NEXT SDB.                         32645200
         WAIT  1,ECB=SDBECB        WAIT FOR I/O COMPLETION.             32645300
* CONTINUE WITH NEXT SDB                                                32645400
         SPACE 1                                                     R4 32645500
*********************************************************************** 32645600
*                                                                     * 32645700
*        IF SDB WAS GETMAINED UNDER TASK BEING TERMINATED, IT MUST    * 32645800
*        NOW BE DE-CHAINED, SINCE ITS SUBPOOL WILL SOON BE FREED.     * 32645900
*                                                                     * 32646000
*********************************************************************** 32646100
         SPACE 1                                                     R4 32646200
HET400   CLC   SSETCBA,SDBTCBM     TEST SDB TCB                      R4 32646300
         BNE   HET415              BR IF NOT CURRENT TCB             R4 32646400
         LA    R1,SJBSDB              PREPARE TO LOCATE              R4 32646500
         SL    R1,=A(SDBSDB-SDBDSECT)  PRECEEDING SDB                R4 32646600
         SPACE 1                                                     R4 32646700
HET405   C     R8,SDBSDB-SDBDSECT(,R1)  IS NEXT SDB CURRENT SDB      R4 32646800
         BE    HET410                   BR IF YES                    R4 32646900
         L     R1,SDBSDB-SDBDSECT(,R1)  POINT TO NEXT SDB            R4 32647000
         B     HET405                   BR TO TEST IT                R4 32647100
         SPACE 1                                                     R4 32647200
HET410   MVC   SDBSDB-SDBDSECT(,R1),SDBSDB  DECHAIN CURRENT SDB      R4 32647300
         SPACE 1                                                     R4 32647400
HET415   L     R8,SDBSDB           POINT TO NEXT SDB                 R4 32647500
         B     HET320              AND PROCESS IT.                      32647600
* END OF SECTION                                                        32647700
HET420   DS    0H                                                       32647800
         STATUS RESET,ND,,(4)      RESET TCBHNDSP.                      32647900
         DROP  R8                  DROP SDB BASE.                       32648000
*                                                                       32648100
*                                                                       32648200
*              RETURN FROM END-OF-TASK                                  32648300
*                                                                       32648400
*                                                                       32648500
HET900   DS    0H                                                       32648600
         SLR   R15,R15             SHOW NORMAL RETURN.                  32648700
         $EPILOG ,                 RETURN.                              32648800
         EJECT                                                          32648900
*                                                                       32649000
*                                                                       32649100
*              TABLE OF HFRR ROUTINE OFFSETS, IN ORDER                  32649200
*              OF SUBSYSTEM FUNCTION ID.  FIRST ENTRY IS ZERO.          32649300
*                                                                       32649400
HETTAB   DS    0H                                                       32649500
         DC    AL2(HETEND-HOSEOTB) ..0 NULL FUNCTION PURGER             32649600
         DC    AL2(HETSOUT-HOSEOTB) .1 PROCESS SYSOUT PURGER            32649700
         DC    AL2(HETCANC-HOSEOTB) .2 TSO CANCEL PURGER                32649800
         DC    AL2(HETSTAT-HOSEOTB) .3 TSO STATUS PURGER                32649900
         DC    28AL2(HETEND-HOSEOTB)                                    32650000
*                                                                       32650500
         EJECT                                                          32651000
         DROP  RSJB                DROP NORMAL SJB BASE.                32651500
         USING SJBDSECT,R8         SET R8 AS SJB BASE.                  32652000
*********************************************************************** 32652500
*                                                                     * 32653000
*        END OF TASK WHILE SJB LOCKED FOR PROCESS SYSOUT FUNCTION     * 32653500
*                                                                     * 32654000
*********************************************************************** 32654500
HETSOUT  DS    0H                                                       32655000
         OI    SJBTFFG,SJBTFFGP    SET PURGE REQUESTED FOR EPILOG       32655500
         B     HETSTATA            SKIP FIRST INSTRUCTION OF C/S        32656000
*********************************************************************** 32656500
*                                                                     * 32657000
*        END OF TASK WHILE SJB LOCKED FOR CANCEL/STATUS FUNCTION      * 32657500
*                                                                     * 32658000
*********************************************************************** 32658500
HETCANC  DS    0H                                                       32659000
HETSTAT  DS    0H                                                       32659500
         OI    SJBTFFG,SJBTFFGC    SET CANCEL/STATUS PURGING FLAG       32660000
HETSTATA DS    0H                                                       32660500
         TM    SJBTFFG,SJBTFFGM    IS ECB  MEANINGFULL                  32661000
         BZR   R14                 EXIT IF NOTHING TO DO                32661500
         LR    R3,R11              SAVE SSVT POINTER                    32662000
         LR    R4,R12              SAVE BASE                            32662500
         LR    R5,R13              AND                                  32663000
         LR    R6,R14              SOME                                 32663500
         L     R15,=A(TSETLOCK)    POINT TO SET LOCK                    32664000
         BALR  R2,R15              SET LOCK                             32664500
         LR    R11,R3              RESTORE SSVT POINTER                 32665000
         LR    R12,R4              PUT BASE BACK                        32665500
         SLR   R3,R3               ZERO REGISTER                        32666000
         L     R4,SJBECB           PICK UP ECB                          32666500
HETCSCS  CLM   R4,8,=X'40'         HAS ECB BEEN POSTED                  32667000
         BE    HETCSP              X'40' - POSTED - HASP FINISHED       32667500
         CS    R4,R3,SJBECB        TAKE OVER ECB                        32668000
         BNZ   HETCSCS             LOOP IF NOT ALTERED                  32668500
         LA    R4,$SVTSCS          POINT TO CANCEL/STATUS QUEUE         32669000
         TM    SJBTFFG,SJBTFFGC    IS THIS CANCEL/STATUS                32669500
         BO    *+8                 SKIP NSI IF YES                      32670000
         LA    R4,$SVPSOQ          POINT TO PSO QUEUE                   32670500
         LR    R13,R8              USE STANDARD SJB POINTER             32671000
         L     R15,=A(TSUABQS)     POINT TO QUEUE SCANNER               32671500
         BALR  R14,R15             SCAN QUEUE                           32672000
         BZ    HETCSCKW            IF NOT ON TEST FOR EVER ON           32672500
* SJB FOUND ON CANCEL/STATUS QUEUE                                      32673000
         ICM   R1,15,$SVHASP       PICK UP HASP STATUS                  32673500
         BZ    HETCSULW            IF STILL UP UNLOCK AND WAIT          32674000
         L     R15,=A(TSHABDQ)     POINT TO DEQUEUE ROUTINE             32674500
         BALR  R14,R15             ENTER IT, R4=QUEUE HEAD ADDRESS      32675000
HETCSP   LR    R3,R11              SAVE SSVT POINTER                    32675500
         LR    R4,R12              SAVE BASE                            32676000
         L     R15,=A(TSFRELOK)    POINT TO FREE LOCK                   32676500
         BALR  R2,R15              ENTER IT                             32677000
         LR    R11,R3              RESTORE SSVT POINTER                 32677500
         LR    R12,R4              RESTORE BASE                         32678000
HETCSXIT LR    R13,R5              RESTORE USER SAVE POINTER            32678500
         LR    R14,R6              RESTORE RETURN                       32679000
         BR    R14                 RETURN                               32679500
HETCSCKW LR    R4,R12              SAVE BASE                            32680000
         LR    R3,R11              SAVE SSVT POINTER                    32680500
         L     R15,=A(TSFRELOK)    POINT TO FREE LOCK ROUTINE           32681000
         BALR  R2,R15              ENTER IT                             32681500
         LR    R11,R3              RESTORE SSVT POINTER                 32682000
         LR    R12,R4              RESTORE BASE                         32682500
         CLI   SJBTFLOW,X'0'       WAS IT EVER ON THE QUEUE             32683000
         BZ    HETCSXIT            EXIT IF NO                           32683500
HETCSWAT LA    R1,$SVJOB           POINT TO XEQ POST ELEMENT            32684000
         TM    SJBTFFG,SJBTFFGC    IS THIS CANCEL/STATUS                32684500
         BO    *+8                 SKIP PSO SETTING IF YES              32685000
         LA    R1,$SVPSO           POINT TO PSO POST ELEMENT            32685500
         $$POST ELMT=(R1)          POST PROBABLE WAITING PROCESSOR      32686000
         WAIT  ECB=SJBECB          WAIT FOR POST                        32686500
         B     HETCSXIT            EXIT                                 32687000
HETCSULW LR    R4,R12              SAVE BASE                            32687500
         LR    R3,R11              SAVE SSVT POINTER                    32688000
         L     R15,=A(TSFRELOK)    POINT TO FREE LOCK ROUTINE           32688500
         BALR  R2,R15              ENTER IT                             32689000
         LR    R11,R3              RESTORE SSVT POINTER                 32689500
         LR    R12,R4              RESTORE BASE                         32690000
         B     HETCSWAT            WAIT                                 32690500
HETEND   DS    0H                                                       32691000
         BR    R14                 NULL HFRR.                           32691500
         DROP  ,                   DROP ALL BASES.                      32692000
         TITLE 'HOSEOM -- SUBSYSTEM END-OF-MEMORY FUNCTION'             32692500
*                                                                       32693000
*                                                                       32693500
*              HOSEOM - END-OF-MEMORY SUBSYSTEM INTERFACE               32694000
*                                                                       32694500
*                                                                       32695000
HOSEOM   $PROLOG SSOBEOM,SSENSIZE,LOCK=NO                               32695500
HOSEOMB  DS    0H                                                       32696000
         USING SSENBGN,RSOX        SET SSEN ADDRESSABILITY.             32696500
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             32697000
*                                                                       32697500
*                                                                       32698000
*              IF JES2 MEMORY, SET INDICATORS                           32698500
*                                                                       32699000
*                                                                       32699500
HEN010   DS    0H                                                       32700000
         CLC   SSENASCB,$SVPOSTE+4 TEST FOR JES2 MEMORY              R4 32700500
         BNE   HEN020              BR IF NO                          R4 32701000
         TM    $SVSTUS,$SVSTUST    DID JES2 TERMINATE SELF           R4 32701500
         BO    SKIP70              BR IF YES                         R4 32702000
         OI    $SVSTUS,$SVSTUST    SHOW JES2 TERMINATION COMPLETE.      32702500
         MVC   $SVHASP,=F'-1'      SHOW JES2 ABENDED.                   32703000
SKIP70   STM   R0,R15,$SVEOMSV     SAVE REGISTERS                    R4 32703100
         L     R15,=A(TGETLCL)     GET                                  32703200
         BALR  R8,R15               LOCAL LOCK                          32703300
         L     R15,=A(TGETCMS)     GET                                  32703400
         BALR  R8,R15               CMS LOCK                            32703500
         L     R1,$SVRELSE         GET ADDR OF RELEASE SRB-IOSB         32703600
         L     R2,IOSUCB-IOSB+SRBSIZE(,R1)  GET CHKPT UCB ADDRESS       32703700
         SLR   R0,R0               GET CHECKPOINT DEVICE                32703800
         IC    R0,UCBSQC-UCBDSECT(,R2)  RESERVE COUNT                   32703900
         TM    $SVSTUS,$SVSTIRV+$SVSTCRV  ANY HASP RESERVES             32704000
         BZ    HEN014              BRANCH IF NOT                        32704100
         BCTR  R0,0                DECREMENT COUNT                      32704200
         BNO   *+6                 SKIP IF ONLY ONE RESERVE             32704300
         BCTR  R0,0                DECREMENT SECOND TIME                32704400
         STC   R0,UCBSQC-UCBDSECT(,R2)  STORE RESERVE COUNT             32704500
         NI    $SVSTUS,255-$SVSTIRV-$SVSTCRV  CLEAR RESERVES            32704600
HEN014   LTR   R0,R0               NON-HASP RESERVES STILL PRESENT      32704700
         BNZ   HEN018              BRANCH IF YES                        32704800
         TM    UCBTBYT2-UCBDSECT(R2),UCBRR  IS DEVICE SHARED            32704900
         BZ    HEN018              BRANCH IF NOT                        32705000
         LR    R13,RSVT            PRESERVE SSVT REGISTER               32705100
         STARTIO SRB=(1)           TELL IOS TO RELEASE DEVICE           32705200
         LR    RSVT,R13            RELOAD SSVT REGISTER                 32705300
         L     R12,$SVEOMSV+4*R12  RELOAD LOCAL BASE                 R4 32705400
HEN018   L     R15,=A(TFREECMS)    FREE                                 32705500
         BALR  R8,R15               CMS LOCK                            32705600
         L     R15,=A(TFREELCL)    FREE                                 32705700
         BALR  R8,R15               LOCAL LOCK                          32705800
         LM    R0,R15,$SVEOMSV     RELOAD REGISTERS                  R4 32705900
         L     R1,$SVHECBA         ADDR OF ECB AND $$POST WORK FLAG  R4 32706000
         MVI   $SVPOSTW(R1),X'FF'  INHIBIT JES2 XMPOSTING            R4 32706100
HEN020   DS    0H                                                       32706200
*                                                                       32706300
*                                                                       32706400
*              IF ENDING MEMORY HOLDS JCQ LOCK, RELEASE IT.             32706500
*                                                                       32706600
*                                                                       32706700
HEN100   DS    0H                                                       32707000
         L     R1,$SVJLOCK         GET LOCK-HOLDING ASCB ADDRESS.       32707500
         LTR   R1,R1               IF JCQ LOCK IS FREE,                 32708000
         BZ    HEN190              CONTINUE.                            32708500
         CL    R1,SSENASCB         IF ASCB NOT SAME AS                  32709000
         BNE   HEN190              ENDING MEMORY'S, CONTINUE.           32709500
         CALL  $SVJUNLK            ELSE RELEASE THE JCQ LOCK.           32710000
         B     HEN100              THEN CHECK AGAIN.                    32710500
HEN190   DS    0H                                                       32711000
*                                                                       32711500
*                                                                       32712000
*              PURGE INTERNAL READERS                                   32712500
*                                                                       32713000
*                                                                       32713500
HEN200   DS    0H                                                       32714000
         L     R8,$SVIRDRS         POINT TO FIRST INTRDR DCT.           32714500
         USING DCTDSECT,R8         SET DCT ADDRESSABILITY.              32715000
         L     R7,=F'-4'           PICK UP COUNT                        32715500
         L     R3,0(R7,R8)         OF INTRDR DCTS              @OZ29612 32716000
         SLR   R7,R7               ZERO R7 FOR ZEROING.                 32716500
         SLR   R6,R6               ZERO R6 FOR COUNTING.                32717000
         L     R5,SSENASCB         POINT R5 TO ENDING ASCB.             32717500
HEN210   DS    0H                                                       32718000
         CL    R5,RIDASCBP         IF INTRDR NOT ENDING MEMORY'S,       32718500
         BNE   HEN220              GO CHECK NEXT INTRDR.                32719000
         ST    R7,RIDASCBP         MAKE ASCB AND UNPROTECTED-           32719500
         ST    R7,RIDUBF           BUFFER POINTERS ZERO.                32720000
         NI    RIDFLAGS,255-RIDBUSY SHOW SSSM GIVES UP CONTROL @OZ29612 32720080
         OI    RIDFLAGS,RIDEND+RIDPOST SET END AND POST BITS   @OZ29612 32720160
         OI    DCTFLAGS,DCTDELET   DELETE JOB ON INTRDR        @OZ29612 32720240
         NI    DCTFLAGS,255-DCTSTOP CLEAR POSSIBLE STOP        @OZ29612 32720320
         $$POST ELMT=$SVIRDR       POST HASPDISP FOR INTRDR    @OZ29612 32720400
         NI    RIDFLAGS,255-RIDALLOC  SHOW NOT ALLOCATED.               32720500
         BCTR  R6,0                COUNT ONE.                           32721000
HEN220   DS    0H                                                       32721500
         L     R8,DCTCHAIN         POINT TO NEXT INTRDR.                32722000
         BCT   R3,HEN210           BRANCH TO PROCESS IT        @OZ29612 32722500
HEN230   DS    0H                                                       32723000
         LTR   R6,R6               IF WE DIDN'T UNALLOCATE,             32723500
         BZ    HEN290              DON'T POST WAIT ELEMENTS.            32724000
         L     R6,$SVIRWT          GET POINTER TO FIRST                 32724500
         CS    R6,R7,$SVIRWT       WAIT ELEMENT, AND CLEAR              32725000
         BNE   *-4                 THE POINTER.                         32725500
         LTR   R6,R6               IF NO WAIT ELEMENTS,                 32726000
         BZ    HEN290              END OF INTRDR PURGE.                 32726500
         L     R5,CVTPTR           POINT TO                             32727000
         USING CVT,R5              THE ASVT                             32727500
         L     R5,CVTASVT          FROM THE                             32728000
         USING ASVT,R5             CVT.                                 32728500
HEN240   DS    0H                                                       32729000
         L     R4,12(,R6)          GET WAIT ELM'S ASCB POINTER.         32729500
         USING ASCB,R4             SET ASCB ADDRESSABILITY.             32730000
         LH    R3,ASCBASID         GET ASID FROM ASCB.                  32730500
         ALR   R3,R3               MULTIPLY                             32731000
         ALR   R3,R3               BY FOUR.                             32731500
         CL    R4,ASVTFRST(R3)     IF ASCB ADDRESS DOESN'T              32732000
         BNE   HEN250              MATCH ASVT, BRANCH.                  32732500
         TM    ASCBFLG1,ASCBTERM+ASCBABNT  IF ASCB TERMINATING,         32733000
         BNZ   HEN250              BRANCH.                              32733500
         POST  MF=(E,8(,R6))       POST WAIT ELEMENT.                   32734000
         L     R6,0(,R6)           POINT TO NEXT WAIT ELEMENT.          32734500
         B     HEN260              CHECK POINTER.                       32735000
HEN250   DS    0H                                                       32735500
         LR    R1,R6               INSTEAD OF POST, FREE W. E.          32736000
         L     R6,0(,R6)           AFTER POINTING TO NEXT.              32736500
         $FREMAIN RC,A=(R1),LV=32,SP=231,KEY=1  FREE W. E.              32737000
HEN260   DS    0H                                                       32737500
         LTR   R6,R6               IF ANOTHER WAIT ELEMENT,             32738000
         BNZ   HEN240              GO CHECK IT.                         32738500
         DROP  R8,R5,R4            DROP LOCAL BASES.                    32739000
HEN290   DS    0H                                                       32739500
*                                                                       32740000
*                                                                       32740500
*              FIND A SUBSYSTEM JOB BLOCK TO TERMINATE                  32741000
*                                                                       32741500
*                                                                       32742000
HEN300   DS    0H                                                       32742500
         LH    R1,SSENASID         GET TERMINATING MEMORY'S ID.         32743000
         ALR   R1,R1               MULTIPLY IT                          32743500
         ALR   R1,R1               BY FOUR.                             32744000
         AL    R1,$SVHAVT          ADD HAVT ORIGIN.                     32744500
         L     R1,0(,R1)           POINT TO FIRST SJB THIS MEMORY.      32745000
         LTR   R1,R1               IF NO SJBS,                          32745500
         BZ    HEN900              NO WORK TO DO.                       32746000
HEN320   DS    0H                                                       32746500
         USING SJBDSECT,R1         SET R1 AS SJB BASE.                  32747000
         L     R2,SJBSJB           FIND THE                             32747500
         LTR   R2,R2               LAST SUBSYSTEM                       32748000
         BZ    HEN340              JOB BLOCK                            32748500
         LR    R1,R2               ON THE CHAIN                         32749000
         B     HEN320              FOR THIS MEMORY.                     32749500
*                                                                       32750000
*                                                                       32750500
*              CHAIN SJB SAVE AREA TO CALLER'S SAVE AREA                32751000
*                                                                       32751500
*                                                                       32752000
HEN340   DS    0H                                                       32752500
         ST    R1,8(,R13)          POINT CALLER'S SAVE AREA TO SJB      32753000
         ST    R13,4(,R1)          POINT SJB TO CALLER'S AREA.          32753500
         LR    R13,R1              CHANGE SJB                           32754000
         DROP  R1                  ADDRESSABILITY FROM                  32754500
         USING SJBDSECT,RSJB       R1 TO R13 (RSJB).                    32755000
*                                                                       32755500
*                                                                       32756000
*              GET JOB COMMUNICATION QUEUES LOCK.                       32756500
*              SET END-OF-MEMORY FLAG IN SJB.                           32757000
*              SET UP FOR XMPOST TO CURRENT MEMORY.                     32757500
*                                                                       32758000
*                                                                       32758500
         CALL  $SVJLOK             ACQUIRE JCQ LOCK.                    32759000
         OI    SJBFLG2,SJB2EOM+SJB2PNIT  FLAG SJB FOR EOM.              32759500
         SLR   R0,R0               ZERO THE                             32760000
         ST    R0,SJBECB           SJB'S ECB.                           32760500
         MVC   SJBASCBP,PSAAOLD-PSA  SET NEW POSTING ASCB.              32761000
*                                                                       32761500
*                                                                       32762000
*              BRANCH ACCORDING TO VALUE OF SJBQUEUE                    32762500
*                                                                       32763000
*                                                                       32763500
         L     R1,SJBQUEUE         GET HEADER ADDRESS                   32764000
         LTR   R1,R1               OF CURRENT SJB QUEUE.                32764500
         BZ    HEN500              IF NOT ON QUEUE, BRANCH.             32765000
         LA    R0,$SVJPCLS         GET 1ST Q HEADER ADDRESS.            32765500
         SR    R1,R0               COMPUTE CURRENT Q DISPLACEMENT.      32766000
         BM    HEN520              BRANCH IF INVALID.                   32766500
         LA    R0,3                CHECK                                32767000
         NR    R0,R1               FULLWORD BOUNDARY.                   32767500
         BNZ   HEN520              BRANCH IF INVALID.                   32768000
         LA    R0,$SVJRENQ-$SVJPCLS  CHECK                              32768500
         CLR   R0,R1               MAXIMUM VALUE.                       32769000
         BH    HEN520              BRANCH IF INVALID.                   32769500
* THE FOLLOWING CODE IS DEPENDENT ON THE ORDER OF DEFINITION            32770000
* OF THE JOB COMMUNICATION QUEUES IN THE SSVT                           32770500
         B     *+4(R1)             BRANCH TO VECTOR.                    32771000
         B     HEN580              PCLS - PENDING BY CLASS              32771500
         B     HEN520              PXBM - PENDING FOR XBM               32772000
         B     HEN480              PNUM - PENDING BY NUMBER             32772500
         B     HEN400              XCLS - EXECUTING BY CLASS            32773000
         B     HEN400              XNUM - EXECUTING BY NUMBER           32773500
         B     HEN560              TERM - TERMINATING                   32774000
         B     HEN560              RENQ - RE-ENQUEUEING                 32774500
*                                                                       32775000
*                                                                       32775500
*              PROCESSING IF TERMINATION REQUIRED                       32776000
*                                                                       32776500
*                                                                       32777000
HEN400   DS    0H                                                       32777500
         LA    R1,$SVJTERM         ASSUME TERMINATION QUEUE.            32791500
         TM    SJBFLG2,SJB2JNL     TEST FOR JOURNALLED JOB           R4 32791600
         BZ    HEN460              BR IF NO                          R4 32791700
         LA    R1,$SVJRENQ         SET RE-ENQUEUE QUEUE                 32793000
HEN460   DS    0H                                                       32793500
         CALL  $SJBRQ              PUT SJB ON APPROPRIATE QUEUE.        32794000
* RELEASE THE JOB COMMUNICATION QUEUES LOCK                             32794500
HEN480   DS    0H                                                       32795000
         ICM   R15,7,SJBJQE+1      SEE IF JQE EXISTS....       @OZ28534 32795100
         BZ    HEN490              BRANCH IF NO                @OZ28534 32795200
         MVI   SJBECB,0            SHOW ECB UNPOSTED.                   32795500
         CALL  $SVJUNLK            RELEASE JCQ LOCK.                    32796000
* POST HASPEXEC SHOWING JOB READY                                       32796500
         $$POST ELMT=$SVJOB        FIRE UP HASP.                        32797000
* WAIT TILL HASP POSTS US BACK                                          32797500
         WAIT  1,ECB=SJBECB        WAIT FOR HASP.                       32798000
         CALL  $SJBFREE            FREE THE SJB                      R4 32798100
         B     HEN300              GO DO NEXT SJB.                      32799500
HEN490   SLR   R1,R1               ZERO R1, TELL SJBRQ TO      @OZ28534 32799600
         CALL  $SJBRQ                DEQUEUE SJB               @OZ28534 32799700
* HEN500 - SJB NOT ON ANY QUEUE.  UNLOCK, FREE, & DO NEXT SJB.          32800000
HEN500   DS    0H                                                       32800500
         CALL  $SVJUNLK            RELEASE THE JCQ LOCK.                32801000
         CALL  $SJBFREE            FREE THE SJB                      R4 32801100
* GO DO THE NEXT SJB                                                    32802000
         B     HEN300              GO DO NEXT SJB.                      32802500
HEN520   DS    0H                                                       32805000
         LA    R1,$SVJTERM         SET TERMINATION QUEUE.               32808000
         B     HEN460              GO REQUEUE THE SJB.                  32808500
*                                                                       32809000
*              IF ALREADY ON TERM OR RENQ, RESET SJB2EOM                32809500
*                                                                       32810000
HEN560   DS    0H                                                       32810500
         NI    SJBFLG2,255-SJB2EOM RESET SJB2EOM AND CONTINUE           32811000
         B     HEN480              BY $$POSTING AND WAITING.            32811500
*                                                                       32812000
*              PENDING-BY-CLASS - RELEASE JCQ LOCK,                     32812500
*              START ANOTHER INITIATOR, AND FREE EVERYTHING             32813000
*                                                                       32813500
HEN580   DS    0H                                                       32814000
         SLR   R1,R1               TELL $SJBRQ TO DEQUEUE           R41 32814100
         CALL  $SJBRQ              CALL $SJBRQ                      R41 32814200
         CALL  $SVJUNLK            RELEASE THE JCQ LOCK.                32814500
         LA    R1,SJBID            POINT TO COMMAND AREA.               32815000
         MVC   0(22,R1),HEN580A    MOVE COMMAND TEXT.                   32815500
         MVC   18(4,R1),$SVSSNM    MOVE SUBSYSTEM ID.                   32816000
         SLR   R0,R0               ZERO REGISTER 0.                     32816500
         SVC   34                  ISSUE START-INIT COMMAND.            32817000
         CALL  $SJBFREE            FREE THE SJB                      R4 32817100
         B     HEN300              GO DO NEXT SJB                    R4 32817200
HEN580A  DC    AL2(22,0),C'S INIT.INIT,,,****'  COMMAND                 32818500
*                                                                       32819000
*              END OF END-OF-MEMORY                                     32819500
*                                                                       32820000
HEN900   DS    0H                                                       32820500
         SLR   R15,R15             SHOW NORMAL RETURN.                  32821000
         $EPILOG ,                 RETURN TO USER.                      32821500
         SPACE 2                                                        32856000
         DROP  ,                   DROP ALL BASES.                      32856500
         TITLE 'LITERAL POOL FOR HCBXX, HOSRENQ - HOSEOM'               32857000
         LTORG                                                          32857500
         TITLE 'HASP SUBSYSTEM SUPPORT ROUTINE -- ALLOCATE'             32858000
*                                                                       32858500
*                                                                       32859000
*              HASP SUBSYSTEM SUPPORT ROUTINE -- ALLOCATE               32859500
*                                                                       32860000
*                                                                       32860500
HOSALLOC $PROLOG SSOBALOC,SSALSIZE,LOCK=REQ                             32861000
         USING SSALBGN,RSOX        SET SSAL ADDRESSABILITY.             32861500
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              32862000
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             32862500
         L     RJFC,SSALJFCB       POINT TO DATA SET'S JFCB.            32863000
         USING INFMJFCB,RJFC       SET JFCB ADDRESSABILITY.             32863500
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              32864000
         SPACE 2                                                     R4 32864500
*                                                                       32865000
*              CREATE DSNAME IF REQUIRED                                32865500
*                                                                       32866000
         SPACE 1                                                        32866500
         TM    SSALFLG1,SSALASNM   DOES DSNAME EXIST ALREADY...         32867000
         BZ    HAL020              IF SO, GO CHECK IT.                  32867500
         LA    R14,HALO            ELSE SET RETURN ADDRESS              32868000
         B     HALCRDSN            AND CREATE DSNAME.                   32868500
         SPACE 2                                                     R4 32869000
*                                                                       32869500
*              VALIDIFY DATA SET NAME                                   32870000
*                                                                       32870500
         SPACE 1                                                     R4 32871000
HAL020   DS    0H                                                       32871500
         MVC   DSNSSNM,$SVSSNM     SET SUBSYS NAME IN DSN.              32872000
         SPACE 1                                                     R4 32873000
*                                                                       32873500
*              BRANCH TO PROPER ALLOCATION ROUTINE                      32874000
*                                                                       32874500
         SPACE 1                                                        32875000
         LH    R0,DSNDSTYP         GET DATA SET TYPE.                   32875500
         CH    R0,=C'SI'           IF SYSIN,                            32876000
         BE    HALI                GO ALLOCATE.                         32876500
         CH    R0,=C'SO'           IF SYSOUT,                           32877000
         BE    HALO                GO ALLOCATE.                         32877500
         CH    R0,=C'PS'           IF PROCESS-SYSOUT,                   32878000
         BE    HALP                GO ALLOCATE.                         32878500
         B     HAL800              ERROR - UNRECOGNIZED TYPE.           32879000
         EJECT                                                          32879500
*                                                                       32880000
*                                                                       32880500
*              SYSIN DATA SET ALLOCATION                                32881000
*                                                                       32881500
*                                                                       32882000
         SPACE 1                                                        32882500
HALI     DS    0H                                                       32883000
         LA    RIOT,SJBIOT         POINT TO THE 1ST IOT.                32883500
         BAL   R14,HALFINDP        ATTEMPT TO FIND DATA SET.            32884000
         BZ    HAL800              ERROR - DATA SET NOT FOUND.          32884500
         LR    RSIB,RSOX           SAVE SSAL ADDRESS IN RSIB.           32885000
         CALL  $SDBINIT            CREATE AN SDB FOR DATA SET.          32885500
         BNZ   HAL800              ERROR - NO STORAGE.                  32886000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              32886500
         ST    R4,SDBPDDB          SET PDDB ADDRESS AND ITS             32887000
         ST    RIOT,SDBPIOT        IOT ADDRESS IN THE SDB.              32887500
         BAL   R14,HALJMERG        MERGE PDDB INTO JFCB.                32888000
         SPACE 3                                                        32888500
*                                                                       32889000
*              IF XBM BATCH INPUT UNIT, STORE SDB ADDRESS               32889500
*              IN SJB AND FLAG THE SDB AS BATCH INPUT.                  32890000
*                                                                       32890500
         SPACE 1                                                        32891000
         TM    SJBFLG1,SJB1XBM     IF NOT BATCH MONITOR INPUT,          32891500
         BZ    HAL950              RETURN.                              32892000
         ST    RSDB,SJBXBSDB       POINT SJB TO BATCH INPUT SDB.        32892500
         OI    SDBFLG2,SDB2XBIN    SHOW SDB IS BATCH INPUT.             32893000
         B     HAL950              RETURN.                              32893500
         SPACE 1                                                        32894000
         DROP  RSDB                DROP SDB BASE.                       32894500
         USING SSALBGN,RSOX        RESET SSAL ADDRESSABILITY.           32895000
         EJECT                                                          32895500
*                                                                       32896000
*                                                                       32896500
*              SYSOUT DATA SET ALLOCATION                               32897000
*                                                                       32897500
*                                                                    R4 32897600
         SPACE 1                                                     R4 32897700
HALO     DS    0H                                                    R4 32897800
         L     R5,PSATOLD-PSA      FIND CURRENT TCB                  R4 32897900
         L     R5,TCBTCT-TCB(,R5)  GET TCT ADDRESS                   R4 32898000
         LA    R5,0(,R5)           CLEAR HI-ORDER BYTE               R4 32898100
         LTR   R5,R5               TEST FOR SMF                      R4 32898200
         BZ    HALO10              BR IF NO                          R4 32898300
         L     R5,TCTJMR-SMFTCT(,R5)  GET JMR ADDRESS                R4 32898400
         L     R1,SJBJCT              GET JCT ADDRESS                R4 32898500
         USING JCTDSECT,R1         PROVIDE JCT ADDRESSABILITY        R4 32898600
         CLC   JCTUSEID,JCTUSEID-JCTJMR(R5)  TEST USER SMF INFO      R4 32898700
         BE    SKIP80                        BR IF UNCHANGED         R4 32898800
         OI    JCTFLAG1,JCT1CKPT             CAUSE JCT CKPT          R4 32898900
SKIP80   CLC   JCTUCOM,JCTUCOM-JCTJMR(R5)  TEST USER SMF INFO        R4 32899000
         BNE   SKIP90              BR IF CHANGED                     R4 32899100
         TM    JCTFLAG1,JCT1CKPT   IS JCT CKPT REQUIRED...           R4 32899200
         BZ    HALO10              BR IF NO                          R4 32899300
         SPACE 1                                                     R4 32899400
*                                                                    R4 32899500
*        USER FIELDS IN JMR MODIFIED -- TRANSFER TO JCT AND CKPT     R4 32899600
*                                                                    R4 32899700
         SPACE 1                                                     R4 32899800
SKIP90   MVC   JCTUSEID,JCTUSEID-JCTJMR(R5)  XFER USER SMF INFO      R4 32899900
         MVC   JCTUCOM,JCTUCOM-JCTJMR(R5)  XFER USER SMF INFO        R4 32900000
         NI    JCTFLAG1,255-JCT1CKPT  RESET CKPT FLAG                R4 32900100
         L     R0,SJBJCTRK         GET JCT TRACK ADDRESS             R4 32900200
         CALL  HCBWR               WRITE THE JCT                     R4 32900300
         DROP  R1                  KILL JCT ADDRESSABILITY           R4 32900400
HALO10   DS    0H                                                    R4 32900500
         L     R1,SSALPGMN         POINT TO USER WRITER NAME         R4 32900600
         CLC   =CL8'INTRDR',0(R1)  IF IT'S 'INTRDR',                    32900700
         BE    HALR                ALLOCATE INTERNAL READER.            32900800
         SPACE 3                                                        32901000
*                                                                       32901500
*              TEST FLAGS SSALHOLD, SSALTRKM                            32902000
*                                                                       32902500
         SPACE 1                                                        32903000
         TM    SSALFLG1,SSALHOLD+SSALTRKM  IF SPIN OR HOLD,             32903500
         BNZ   HALO20              BUILD AN IOT.                        32904000
         CALL  HALCLASS            IF NOT SCATHOLD,                     32904500
         BZ    HALO40              SKIP BUILDING IOT.                   32905000
         SPACE 3                                                        32905500
*                                                                       32906000
*              GET STORAGE FOR, CREATE, AND CHAIN AN IOT                32906500
*                                                                       32907000
         SPACE 1                                                        32907500
HALO20   DS    0H                                                       32908000
         TM    SJBFLG1,SJB1XBM+SJB1XBMC  IF NOT BATCH MONITOR,          32908500
         BZ    HALO30              CONTINUE.                            32909000
         TM    SSALFLG1,SSALTRKM+SSALASNM  TEST FOR DYNAMIC ALLOCATE    32909500
         BZ    HALO40              TREAT AS NON SPIN/HOLD      @OZ20657 32910000
         B     HAL800              BUT DISALLOW DYNAMIC ALLOCATE        32910500
         SPACE 1                                                        32911000
HALO30   DS    0H                                                       32911500
         CALL  HCBGM               GET STORAGE FOR IOT.                 32912000
         BNZ   HAL800              ERROR - NO STORAGE AVAILABLE.        32912500
         SPACE 1                                                        32913000
         LR    RIOT,R1             SET IOT BASE REGISTER.               32913500
         L     R1,SJBIOT           POINT TO ALLOCATION IOT.             32914000
         LTR   R1,R1               IF NO ALLOCATION IOT,                32914500
         BZ    HALO50              ERROR - CAN'T GET TRACK.             32915000
         LA    R1,IOTMSTAB-IOTDSECT(,R1)     POINT TO MASTER TAB     R4 32915100
         CALL  $STRAK              GET A TRACK FOR THE IOT.             32916000
         L     R15,SJBIOT          GET ALLOCATION IOT ADDRESS  @OZ17477 32916100
         OI    IOTFLAG1-IOTDSECT(R15),IOT1CKPT FORCE IOT CHKPT @OZ17477 32916200
         SPACE 1                                                        32916500
         CALL  HALCRIOT            FORMAT THE IOT.                      32917000
         SPACE 1                                                        32917500
         CALL  HALCHIOT            CHAIN THE IOT.                       32918000
         SPACE 1                                                        32918500
         B     HALO80              CREATE A PDDB.                       32919000
         SPACE 3                                                        32919500
*                                                                       32920000
*              IF SSALASNM, DON'T BOTHER SEARCHING PDDBS                32920500
*                                                                       32921000
         SPACE 1                                                        32921500
HALO40   DS    0H                                                       32922000
         TM    SSALFLG1,SSALASNM   IF DSNAME ASSIGNED HERE,             32922500
         BO    HALO60              SKIP PDDB SEARCH.                    32923000
         SPACE 3                                                        32923500
*                                                                       32924000
*              OTHERWISE SEARCH PDDBS FOR SAME DS KEY                   32924500
*                                                                       32925000
         SPACE 1                                                        32925500
         LA    RIOT,SJBIOT         POINT TO THE 1ST IOT.                32926000
         BAL   R14,HALFINDP        TEST FOR PREV-CREATED PDDB.          32926500
         LR    R6,R4               POINT R6 TO PDDB.                    32927000
         BC    13,HALO45           BRANCH IF PDDB NOT FOUND.            32927500
         L     R1,SSALSOUT         POINT TO DATA SET STATUS.            32928000
         TM    0(R1),1             IF OLD AND PDDB EXISTS,              32928500
         BO    HALO100             GO BUILD AN SDB.                     32929000
         USING PDBDSECT,R6         SET PDDB ADDRESSABILITY.             32929500
         OI    PDBFLAG1,PDB1NULL   NEW.  SHOW NEW PDDB.                 32930000
         OI    IOTFLAG1,IOT1CKPT   FLAG IOT FOR CHECKPOINT.             32930500
         B     HALO100             THEN GO BUILD AN SDB.                32931000
HALO45   L     R1,SSALSOUT         POINT TO SCTSBYT3.                   32931500
         TM    0(R1),1             SINCE PDDB NOT FOUND,                32932000
         BO    HAL800              ERROR IF DISP=OLD.                   32932500
         B     HALO60              CONTINUE IF DISP=NEW.                32933000
         SPACE 3                                                        32933500
*                                                                       32934000
*              ERROR ROUTINE TO FREE IOT AND EXIT                       32934500
*                                                                       32935000
         SPACE 1                                                        32935500
HALO50   DS    0H                                                       32936000
         LR    R1,RIOT             POINT R1 TO THE IOT.                 32936500
         CALL  HCBFM               FREE IT.                             32937000
         B     HAL800              GO TO ERROR EXIT.                    32937500
         SPACE 3                                                        32938000
*                                                                       32938500
*              FIND THE LAST IOT ON SJBIOT                           R4 32938600
*                                                                       32939500
         SPACE 1                                                        32940000
HALO60   DS    0H                                                       32940500
         L     R1,SJBIOT           POINT TO THE 1ST IOT.                32941000
HALO70   DS    0H                                                       32941500
         LR    RIOT,R1             SET IOT BASE.                        32942000
         L     R1,IOTIOT           POINT TO THE NEXT IOT.               32942500
         LTR   R1,R1               IF IT EXISTS,                        32943000
         BNZ   HALO70              LOOP TILL LAST IS FOUND.             32943500
         SPACE 3                                                        32944000
*                                                                       32944500
*              CREATE A PERIPHERAL DATASET DEFINITION BLOCK             32945000
*                                                                       32945500
         SPACE 1                                                        32946000
HALO80   DS    0H                                                       32946500
         PACK  SJBDBLWK,DSNDSNR    SET PACKED DS KEY.                   32947500
         CALL  HALCRPDB            CREATE A PDDB.                       32948000
         BC    2,HALO30            NO ROOM IN IOT,GET ANOTHER  @OZ20657 32948500
         BC    4,HAL820            ERROR - INVALID DESTINATION.         32949000
         SPACE 3                                                        32949500
*                                                                       32950000
*              CREATE ADDITIONAL PDDBS FOR MULTIPLE DESTINATIONS        32950500
*                                                                       32951000
         SPACE 1                                                        32951500
         TM    PDBFLAG1,PDB1MDES   IF NOT MULTIPLE DESTINATIONS,        32952000
         BZ    HALO100             SKIP MULTIPLE PDDBS.                 32952500
         L     R7,SJBJCT           POINT TO THE HASP JCT.               32953000
         USING JCTDSECT,R7         SET JCT ADDRESSABILITY.              32953500
         STM   R5,R6,JCTWORK+12    SAVE FIRST IOT & PDDB ADDRS.         32954000
         CL    RIOT,SJBIOT         UNLESS THE PDDB'S IOT                32954500
         BE    *+8                 IS THE MAIN ALLOCATION IOT,          32955000
         NI    IOTFLAG1,255-IOT1ALOC  DON'T USE IT FOR ALLOC.           32955500
HALO84   DS    0H                                                       32956000
         MVC   JCTWORK(8),JCTWORK+2  GET NEXT DESTINATION.              32956500
         LH    R2,JCTWORK          GET IT INTO REGISTER 2.              32957000
         LTR   R2,R2               IF IT'S DEFAULT,                  R4 32957500
         BE    HALO95              WE'RE AT THE END.                    32958000
         TM    PDBFLAG1,PDB1PSO    IF CURRENT PDDB IS PSO,              32958500
         BO    HALO87              GO BUILD A NEW IOT.                  32959000
         L     R4,IOTPDDBP         GET OFFSET FOR NEXT PDDB.            32959500
         LA    R15,PDBLENG(,R4)    IF THIS IOT                       R4 32960000
         CH    R15,IOTLENG         HAS ROOM                          R4 32960300
         BNH   HALO90              FOR ANOTHER PDDB, BRANCH.            32960500
HALO87   DS    0H                                                       32961000
         CALL  HCBGM               GET SPACE FOR AN IOT.                32961500
         BNZ   HAL800              ERROR - NO STORAGE AVAILABLE.        32962000
         LR    RIOT,R1             SET IOT BASE REGISTER.               32962500
         L     R1,SJBIOT           POINT TO ALLOCATION IOT.             32963000
         LA    R1,IOTMSTAB-IOTDSECT(,R1)     THENCE TO MASTER TAB    R4 32963100
         CALL  $STRAK              GET A TRACK FOR NEW IOT.             32964000
         L     R15,SJBIOT          GET ALLOCATION IOT ADDRESS  @OZ17477 32964100
         OI    IOTFLAG1-IOTDSECT(R15),IOT1CKPT FORCE IOT CHKPT @OZ17477 32964200
         CALL  HALCRIOT            FORMAT THE IOT.                      32964500
         NI    IOTFLAG1,255-IOT1ALOC  DON'T USE ITS TGM.                32965000
         CALL  HALCHIOT            CHAIN THE IOT.                       32965500
         L     R4,IOTPDDBP         GET OFFSET TO FIRST PDDB.            32966000
HALO90   DS    0H                                                       32966500
         LA    R1,0(R4,RIOT)       GET ABSOLUTE PDDB ADDRESS.           32967000
         MVC   0(PDBLENG,R1),0(R6) MOVE NEW PDDB.                       32967500
         STH   R2,PDBDEST-PDBDSECT(,R1)  SET NEW DESTINATION.           32968000
         LA    R0,PDBLENG(,R4)     GET OFFSET TO NEXT PDDB              32968500
         ST    R0,IOTPDDBP         AND STORE IT IN IOT.                 32969000
         B     HALO84              TRY FOR ANOTHER PDDB.                32969500
HALO95   DS    0H                                                       32970000
         LR    R6,R1               POINT R6 TO MOST-RECENT PDDB.        32970100
         TM    IOTFLAG1,IOT1SPIN   IF SPIN, IOTS ARE CHAINED            32970200
         BO    *+8                 LIFO - SDBPIOT AND SDBPDDB           32970300
*                                  MUST POINT TO LAST-CREATED.          32970400
         LM    R5,R6,JCTWORK+12    RESTORE 1ST PDDB, IOT PTRS.          32970500
         DROP  R7                  DROP JCT ADDRESSABILITY.             32971000
         L     RJFC,SSALJFCB       POINT TO JFCB.                       32971500
         USING INFMJFCB,RJFC       SET JFCB ADDRESSABILITY.             32972000
         SPACE 3                                                        32972500
         SPACE 3                                                        32973000
*                                                                       32973500
*              FINALLY, CREATE A SUBSYSTEM DATASET BLOCK                32974000
*                                                                       32974500
         SPACE 1                                                        32975000
HALO100  DS    0H                                                       32975500
         LR    RSIB,RSOX           POINT RSIB TO SSAL.                  32976000
         DROP  RSOX                CHANGE SSAL                          32976500
         USING SSALBGN,RSIB        ADDRESSABILITY.                      32977000
         CALL  $SDBINIT            GET STORAGE, FORMAT SDB.             32977500
         BNZ   HAL800              ERROR - NO STORAGE AVAILABLE.        32978000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              32978500
         TM    PDBFLAG2,PDB2TCEL   IS THIS A TRAKCELL'ED DATA SET    R4 32978600
         BZ    SKIP100             BR IF NO                          R4 32978700
         OI    SDBTAB+(TABFLAG-TABDSECT),TABMAJOR  SHOW MAJOR TAB    R4 32978800
SKIP100  L     R1,SSALCLAS         IF OUTPUT CLASS                      32979000
         CLI   0(R1),C'$'          IS DOLLAR-SIGN                       32979500
         BE    HALO110             OR ASTERISK,                         32980000
         CLI   0(R1),C' '          OR NULL                          R41 32980100
         BE    HALO110                                              R41 32980200
         CLI   0(R1),C'*'          SET FLAG SDB2MCLS.                   32980500
         BNE   HALO120             THIS IS USED BY                      32981000
HALO110  OI    SDBFLG2,SDB2MCLS    XBM CONTINUATION.                    32981500
HALO120  DS    0H                                                       32982000
         ST    R6,SDBPDDB          POINT SDB TO THE PDDB                32982500
         ST    RIOT,SDBPIOT        AND TO ITS IOT.                      32983000
         L     R1,JFCOUTLI-1       GET OUTPUT LIMIT FROM JFCB.          32983500
         LA    R1,0(,R1)           IT'S ONLY 3 BYTES LONG.              32984000
         BCTR  R1,0                REDUCE 0 TO -1.                      32984500
         ST    R1,SDBOUTLM         SET OUTPUT LIMIT IN SDB.             32985000
         MVC   SDBAIOT,SJBIOT      SET ALLOCATION IOT DEFAULT.          32985500
         TM    IOTFLAG1,IOT1ALOC   IF PDDB'S IOT SAYS ALLOCATE,         32986000
         BZ    *+8                 HOWEVER,                             32986500
         ST    RIOT,SDBAIOT        USE PDDB'S IOT INSTEAD.              32987000
         MVC   SDBDKEY,PDBDSKEY    SET DATA SET KEY IN SDB.             32987500
         OI    SDBFLG1,SDB1PUT+SDB1OUT  SHOW PUT, SYSOUT.               32988000
* TEST FOR RESTART SITUATION                                            32988500
         TM    PDBFLAG1,PDB1NULL   IF PDDB UNOPENED,                    32989000
         BO    HALO200             SKIP.                                32989500
         L     R1,SSALSOUT         IF DATA SET SAYS IT'S                32990000
         TM    0(R1),1             OLD, THIS IS RESTART.                32990500
         BZ    HALO200             SKIP IF NEW.                         32991000
         MVC   SDBTRK+1(4),PDBMTTR SET UP SDBTRK                        32991500
         MVC   SDBTRK+5(3),=X'FFFFFF'  FOR POINT IN OPEN.               32992000
         MVC   SDBTRKF+1(4),PDBMTTR  SET DATA SET'S                     32992500
         MVI   SDBTRKF+7,1         STARTING RBA.                        32993000
HALO200  DS    0H                                                       32993500
         B     HAL900              RETURN.                              32994000
         DROP  R6,RSIB,RSDB        DROP PDDB, SSAL, SDB BASES.          32994500
         USING SSALBGN,RSOX        SET SSAL ADDRESSABILITY.             32995000
         EJECT                                                          32995500
*                                                                       32996000
*                                                                       32996500
*              PROCESS-SYSOUT DATA SET ALLOCATION                       32997000
*                                                                       32997500
*                                                                       32998000
         SPACE 1                                                        32998500
HALP     DS    0H                                                       32999000
         L     R4,SJBPSOP          POINT TO THE PSO BLOCK.              32999500
         LTR   R4,R4               IF IT DOESN'T EXIST,                 33000000
         BZ    HAL800              ERROR - CAN'T ALLOCATE.              33000500
         USING PSODSECT,R4         GET PSO ADDRESSABILITY.              33001000
         SPACE 3                                                        33002500
*                                                                       33003000
*              BUILD AN SDB FOR THE DATA SET                            33003500
*                                                                       33004000
         SPACE 1                                                        33004500
         LR    RSIB,RSOX           POINT RSIB TO THE SSAL.              33005000
         CALL  $SDBINIT            CREATE AN SDB.                       33005500
         BNZ   HAL800              ERROR - NO STORAGE AVAILABLE.        33006000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              33006500
         MVC   SDBJKEY,PSOJBKEY    SET JOB KEY IN SDB.                  33007000
         LA    R4,PSOPDDB          GET PSO PDDB ADDRESS                 33007500
         BAL   R14,HALJMERG        MERGE PDDB INTO JFCB.                33008000
         ST    R4,SDBPDDB          POINT SDB TO PDDB.                   33008500
         OI    SDBFLG1,SDB1PSO     SHOW PSO TYPE.                       33009000
         B     HAL950              RETURN SKIPPING CHECKPOINT.          33009500
         DROP  R4,RJFC,RSDB        DROP PDDB, JFCB, SDB BASES.          33010000
         EJECT                                                          33010500
*                                                                       33011000
*              INTERNAL READER DATA SET ALLOCATION                      33011500
*                                                                       33012000
HALR     DS    0H                                                       33012500
         LR    RSIB,RSOX           POINT RSIB TO THE SSAL.              33013000
         USING SSALBGN,RSIB        SET SSAL ADDRESSABILITY.             33013500
*                                                                       33014000
*              CHECK AUTHORIZATION, IF NECESSARY                        33014500
*                                                                       33015000
         TM    SSALFLG1,SSALASNM   IS THIS DYNAMIC ALLOCATION...        33015500
         BZ    HALR10              IF NOT, GO ALLOCATE.                 33016000
         L     R10,PSATOLD-PSA     DYNAMIC.  POINT TO TCB,              33016500
         L     R10,TCBJSCB-TCB(,R10)  THENCE TO JSCB,                   33017000
         L     R10,JSCBACT-IEZJSCB(,R10) THENCE TO ACTIVE JSCB.     R41 33017100
         L     R10,JSCBPSCB-IEZJSCB(,R10)  THENCE TO PSCB.              33017500
         LTR   R10,R10             IS THERE A PSCB...                   33018000
         BZ    HALR10              IF NOT, GO ALLOCATE.                 33018500
         TM    PSCBATR1-PSCB(R10),PSCBJCL  IF USER IS AUTHORIZED,       33019000
         BO    HALR10              GO ALLOCATE AN INTRDR.               33019500
         LA    R15,SSALNAUT        SHOW ALLOCATION NOT AUTHORIZED       33020000
         $EPILOG KEY=0             AND RETURN.                          33020500
*                                                                       33021000
*              IT IS OKAY TO ALLOCATE AN INTERNAL READER                33021500
*                                                                       33022000
HALR10   DS    0H                                                       33022500
*                                                                       33023000
*              ACQUIRE CROSS-MEMORY SERVICES LOCK                       33023500
*                                                                       33024000
         LR    R1,R13              SAVE SAVEAREA POINTER                33024500
         STM   R11,R13,12(R1)      SAVE REGISTERS 11 THROUGH 13.        33025000
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(HALR40,HALR90,HC33025500
               ALR110)             OBTAIN LOCAL LOCK.                   33026000
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=(HALR40,HALR90,HALC33026500
               R110)               OBTAIN CMS LOCK.                     33027000
         LM    R11,R13,12(R1)      RESTORE REGISTERS 11 THROUGH 13.     33027500
*                                                                       33028000
*              SEE IF JES2 WAS INITIALIZED WITH INTERNAL READERS     R4 33028100
*                                                                       33029000
HALR19   L     R1,PSAAOLD-PSA      POINT TO CURRENT ASCB.               33029500
         L     R10,$SVIRDRS        POINT TO FIRST INTRDR DCT.           33030000
         USING DCTDSECT,R10        USE DCT DSECT.                       33030500
         L     R2,=F'-4'           PICK UP COUNT                        33031000
         L     R2,0(R2,R10)        OF INTRDR DCTS.                      33031500
         BCTR  R2,0                REDUCE BY 2 FOR                      33032000
         BCTR  R2,0                STCINRDR, TSOINRDR.                  33032500
         L     R10,DCTCHAIN        BYPASS STCINRDR                      33033000
         L     R10,DCTCHAIN        BYPASS TSOINRDR.                     33033500
         LTR   R2,R2               ARE THERE ANY INTRDRS AT ALL...      33034000
         BZ    HALR90              NO, CAN'T ALLOCATE                R4 33034100
         SR    R0,R0               ZERO COUNTER, USED TO SEE IF ALL     33035000
*                                  ALLOCATED INTERNAL READERS BELONG    33035500
*                                  TO THIS CALLER'S MEMORY.             33036000
*                                                                       33036500
*              FIND AN UNALLOCATED INTERNAL READER                      33037000
*                                                                       33037500
HALR20   DS    0H                                                       33038000
         TM    RIDFLAGS,RIDALLOC   IS THIS INTRDR ALLOCATED...          33038500
         BZ    HALR100             IF NOT, WE'LL TAKE IT.               33039000
         CL    R1,RIDASCBP         YES.  IS IT ALLOC'D TO SAME          33039500
         BE    *+6                 MEMORY AS REQUESTOR...               33040000
         BCTR  R0,0                IF NOT, COUNT A CANDIDATE.           33040500
         L     R10,DCTCHAIN        POINT TO NEXT INTRDR DCT.            33041000
         BCT   R2,HALR20           BRANCH TO EXAMINE IT.                33041500
*                                                                       33042000
*              ALL INTERNAL READERS ARE ALLOCATED                       33042500
*                                                                       33043000
HALR30   DS    0H                                                       33043500
         LTR   R0,R0               ARE ALL ALLOCATED TO CALLER'S MEM... 33044000
         BZ    HALR90              IF SO, UNABLE TO ALLOCATE.           33044500
         TM    SSALFLG1,SSALWAIT   IS CANCEL ECB VALID...               33045000
         BZ    HALR90              IF NOT, DO NOT WAIT.                 33045500
*                                                                       33046000
*              GET A WAIT ELEMENT                                       33046500
*                                                                       33047000
         $GETMAIN RC,LV=32,SP=231,KEY=1  GET WAIT ELEMENT.              33047500
         BNZ   HALUNSC             BRANCH IF ELEMENT NOT GOT.           33048000
*                                                                       33048500
*        WAIT ELEMENT ---                                               33049000
*              +0  - CHAIN (HEADER IS $SVIRWT)                          33049500
*              +4  - ECB FOR UNALLOCATE TO POST                         33050000
*              +8  - ECB POINTER FOR XMPOST                             33050500
*              +12 - ASCB POINTER FOR XMPOST                            33051000
*              +16 - ERRET POINTER FOR XMPOST                           33051500
*              +20 - ECBLIST 1 - POINTER TO CANCEL ECB                  33052000
*              +24 - ECBLIST 2 - POINTER TO ABOVE ECB                   33052500
*                                                                       33053000
*                                                                       33053500
*              FILL IN THE WAIT ELEMENT                                 33054000
*                                                                       33054500
         MVI   4(R1),0             CLEAR UNALLOCATE ECB.                33055000
         LA    R2,4(,R1)           POINT TO UNALLOCATE ECB.             33055500
         ST    R2,8(,R1)           SET POINTER FOR XMPOST.              33056000
         ST    R2,24(,R1)          SET POINTER FOR WAIT.                33056500
         MVI   24(R1),X'80'        TERMINATE ECBLIST.                   33057000
         L     R2,CVTPTR           POINT TO CVT,                        33057500
         L     R3,PSAAOLD-PSA      POINT TO CURRENT ASCB.               33058000
         ST    R3,12(,R1)          SAVE ASCB POINTER FOR XMPOST.        33058500
         LA    R3,CVTBRET-CVT(,R2) POINT TO 'BR 14'.                    33059000
         ST    R3,16(,R1)          SET ERRET POINTER FOR XMPOST.        33059500
         MVC   20(4,R1),SSALCNCL   SET CANCEL ECB POINTER FOR WAIT.     33060000
         L     R0,$SVIRWT          CHAIN NEW                            33060500
         ST    R0,0(,R1)           WAIT ELEMENT                         33061000
         CS    R0,R1,$SVIRWT       LAST-IN-FIRST-OUT                    33061500
         BNE   *-8                 ON HEADER $SVIRWT.                   33062000
         LR    R3,R1               SAVE WAIT ELEMENT ADDRESS.           33062500
*                                                                       33063000
*              RELEASE CMS LOCK                                         33063500
*                                                                       33064000
HALR40   DS    0H                                                       33064500
         LR    R2,R13              SAVE SAVEAREA POINTER.               33065000
         STM   R11,R13,12(R2)      SAVE REGISTERS 11 - 13.              33065500
         SETLOCK RELEASE,TYPE=CMS,RELATED=HALR10  RELEASE CMS LOCK.     33066000
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=HALR10                     C33066500
                                   RELEASE LOCAL LOCK.                  33067000
         LM    R11,R13,12(R2)      RESTORE REGISTERS 11 - 13.           33067500
*                                                                       33068000
*              WAIT FOR CANCEL OR UNALLOCATION.                         33068500
*                                                                       33069000
         WAIT  1,ECBLIST=20(,R1)   WAIT.                                33069500
*                                                                       33070000
*              WHEN POSTED, REESTABLISH CMS LOCK                        33070500
*                                                                       33071000
HALR45   SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(HALR90,HALR110)C33071500
                                   AGAIN OBTAIN CMS LOCK.               33072000
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=(HALR90,HALR110)  C33072500
                                   AGAIN OBTAIN LOCAL LOCK.             33073000
         LM    R11,R13,12(R2)      RESTORE REGISTERS 11 THROUGH 13.     33073500
*                                                                       33074000
*              DECHAIN AND FREE WAIT ELEMENT.                           33074500
*                                                                       33075000
         LR    R1,R3               POINT R1 TO SUBJECT WAIT ELEMENT.    33075500
         LA    R2,$SVIRWT          POINT R2 TO HEADER.                  33076000
HALR50   LR    R3,R2               SAVE PREVIOUS POINTER.               33076500
         L     R2,0(,R2)           GET NEXT POINTER.                    33077000
         LTR   R2,R2               IF ZERO, CHAIN ENDS                  33077500
         BZ    HALR60              - MERELY FREE SUBJECT ELEMENT.       33078000
         CLR   R1,R2               IF NEXT DOESN'T MATCH SUBJECT,       33078500
         BNE   HALR50              KEEP TRYING.                         33079000
         MVC   0(4,R3),0(R1)       DECHAIN SUBJECT.                     33079500
HALR60   $FREMAIN RU,A=(R1),LV=32,SP=231,KEY=1  FREE WAIT ELEMENT.      33080000
*                                                                       33080500
*              NOW FIND WHY WE WERE POSTED                              33081000
*                                                                       33081500
         L     R1,SSALCNCL         POINT TO CANCEL ECB.                 33082000
         TM    0(R1),X'40'         IS IT POSTED...                      33082500
         BZ    HALR19              IF NOT, TRY AGAIN TO ALLOCATE.       33083000
         LR    R2,R13              CANCEL REQUESTED -                   33083500
         STM   R11,R13,12(R2)      SAVE REGISTERS 11 - 13 AND           33084000
         SETLOCK RELEASE,TYPE=CMS,RELATED=HALR45  UNLOCK FROM CMS.      33084500
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=HALR45                     C33085000
                                   RELEASE LOCAL LOCK.                  33085500
         LM    R11,R13,12(R2)      RESTORE REGISTERS 11 - 13.           33086000
         LA    R15,SSALCREQ        SHOW CANCEL REQUEST.                 33086500
         $EPILOG KEY=0             RETURN TO CALLER.                    33087000
         SPACE 3                                                        33087500
*                                                                       33088000
*              BRANCH TO HERE IF UNABLE TO ALLOCATE                     33088500
*                                                                       33089000
HALR90   DS    0H                                                       33089500
         LR    R2,R13              SAVE REGISTERS                       33090000
         STM   R11,R13,12(R2)      11 THROUGH 13.                       33090500
         SETLOCK RELEASE,TYPE=CMS,RELATED=(HALR10,HALR45)  UNLOCK CMS.  33091000
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(HALR10,HALR45)            C33091500
                                   RELEASE LOCAL LOCK.                  33092000
         LM    R11,R13,12(R2)      RESTORE REGISTERS 11 THROUGH 13.     33092500
         LA    R15,SSALWTFL        SHOW UNABLE TO ALLOCATE.             33093000
         $EPILOG KEY=0             RETURN TO CALLER.                    33093500
         EJECT                                                          33094000
*                                                                       33094500
*              WE FOUND AN INTERNAL READER.  ALLOCATE IT.               33095000
*                                                                       33095500
HALR100  DS    0H                                                       33096000
         MVC   RIDASCBP,PSAAOLD-PSA  POINT DCT TO ASCB.                 33096500
         OI    RIDFLAGS,RIDALLOC   SHOW INTRDR ALLOCATED.               33097000
         L     R2,PSAAOLD-PSA      SET ADDRESS OF CURRENT               33097500
         ST    R2,RIDASCBP         ASCB IN INTERNAL READER DCT.         33098000
*                                                                       33098500
*              RELEASE CMS LOCK                                         33099000
*                                                                       33099500
HALR110  DS    0H                                                       33100000
         LR    R2,R13              SAVE REGISTERS                       33100500
         STM   R11,R13,12(R2)      11 THROUGH 13.                       33101000
         SETLOCK RELEASE,TYPE=CMS,RELATED=(HALR10,HALR45)  UNLOCK CMS.  33101500
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(HALR10,HALR45)            C33102000
                                   RELEASE LOCAL LOCK.                  33102500
         LM    R11,R13,12(R2)      RESTORE REGISTERS 11 THROUGH 13.     33103000
         SPACE 2                                                        33103500
*                                                                       33104000
*              SET DEFAULT OUTPUT CLASS IN INTRDR                       33104500
*                                                                       33105000
         L     R7,SJBJCT           POINT TO JCT                      R4 33105100
         L     R1,SSALCLAS         POINT TO OUTPUT CLASS.               33105500
         LTR   R1,R1               IS POINTER ZERO...                   33106000
         BZ    HALR120             IF SO, SET CLASS A.                  33106500
         MVC   DCTMCLAS,0(R1)      ELSE SET SPECIFIED CLASS.            33107000
         CLI   DCTMCLAS,C'$'       IF CLASS IS $                        33107500
         BE    HALR113             OR                                   33108000
         CLI   0(R1),C' '          NULL                             R41 33108100
         BE    HALR113             OR                               R41 33108200
         CLI   DCTMCLAS,C'*'       IF CLASS IS *,                       33108500
         BNE   HALR116                                                  33109000
HALR113  DS    0H                                                       33109500
         USING JCTDSECT,R7         JOB'S MSGCLASS=                      33110500
         MVC   DCTMCLAS,JCTMCLAS   FOR                                  33111000
         DROP  R7                  ALLOCATED CLASS.                     33111500
HALR116  DS    0H                                                       33112000
         CLI   DCTMCLAS,C'A'       IS CLASS VALID...                    33112500
         BNL   HALR130             BRANCH IF SO.                        33113000
HALR120  DS    0H                                                       33113500
         MVI   DCTMCLAS,C'A'       SET CLASS A AS DEFAULT.              33114000
HALR130  DS    0H                                                       33114500
         SPACE 2                                                        33115000
*                                                                       33115500
*              SET DEFAULT DESTINATION IN INTRDR                        33116000
*                                                                       33116500
         L     R1,SSALDEST         POINT TO ARG DESTINATION.            33117000
         CLC   =CL8' ',0(R1)       IF NOT ALL BLANKS,                   33117500
         BNE   HALR140             GO CONVERT IT.                       33118000
         L     R1,4(,R13)          ELSE POINT TO PREV SAVEAREA          33118500
         L     R1,24(,R1)          & GET CALLER'S REG 1.                33119000
         USING SSOB,R1             SET SSOB ADDRESSABILITY.             33119500
         L     R1,SSOBSSIB         POINT TO SSIB.                       33120000
         USING SSIB,R1             SET SSIB ADDRESSABILITY.             33120500
         LA    R1,SSIBDEST         POINT TO DEFAULT DESTINATION.        33121000
         DROP  R1                  DROP SSIB ADDRESSABILITY.            33121500
HALR140  DS    0H                                                       33122000
         SLR   R2,R2               CLEAR REGISTER                    R4 33122100
         IC    R2,$SVTOSYS         SET DEFAULT FIRST BYTE            R4 33122300
         CALL  USERDEST            CONVERT DESTINATION.                 33122800
         B     HALR190             +0 - INVALID DESTINATION             33123000
*                                  +4 - R2 CONTAINS DESTINATION.        33123500
         LTR   R2,R2               ANY ROUTE SPECIFIED...            R4 33123600
         BNZ   HALR145             BR IF YES                         R4 33123700
         ICM   R2,2,$SVTOSYS       SET 'LOCAL   '                    R4 33123900
         SPACE 1                                                     R4 33124500
HALR145  DS    0H                                                    R4 33124600
         STH   R2,DCTPRINT         SET PRINT AND                        33124700
         STH   R2,DCTPUNCH         PUNCH DESTINATIONS                   33125000
         B     HAL975              AND RETURN.                          33126000
         SPACE 2                                                        33126500
* INVALID DESTINATION                                                   33127000
HALR190  DS    0H                                                       33127500
         NI    RIDFLAGS,255-RIDALLOC  UNALLOCATE INTRDR.                33128000
         LA    R15,SSALIDST        SET INVALID DESTINATION     @OZ20021 33128500
         $EPILOG                   RETURN                      @OZ20021 33128750
         DROP  R10                 DROP DCT BASE.                       33129000
         EJECT                                                          33129500
*                                                                       33130000
*                                                                       33130500
*              FAILURE IN ALLOCATION                                    33131000
*                                                                       33131500
*                                                                       33132000
HAL800   DS    0H                                                       33132500
HALUNSC  EQU   HAL800                                                   33133000
         LA    R15,SSALUNAL        SET UNABLE-TO-ALLOCATE.              33133500
         B     HAL890              RETURN.                              33134000
HAL820   DS    0H                                                       33134500
         LA    R15,SSALIDST        SET INVALID DESTINATION.             33135000
         SPACE 3                                                        33135500
HAL890   DS    0H                                                       33136000
         LR    R2,R15              SAVE RETURN CODE IN R2.              33136500
         CALL  HCBCK               CHECKPOINT MAY BE REQUIRED.          33137000
         LR    R15,R2              RESTORE RETURN CODE.                 33137500
         $EPILOG ,                 RETURN.                              33138000
         SPACE 3                                                        33138500
*                                                                       33139000
*                                                                       33139500
*              NORMAL EXIT FROM ALLOCATION                              33140000
*                                                                       33140500
*                                                                       33141000
         SPACE 1                                                        33141500
HAL900   DS    0H                                                       33142000
         CALL  HCBCK               CHECKPOINT MARKED BLOCKS.            33142500
         SPACE 1                                                        33143000
HAL950   DS    0H                                                       33143500
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              33144000
         L     R1,SSALDDNM         SAVE DATA SET'S DDNAME               33144500
         MVC   SDBDDNM,0(R1)       IN THE SDB.                          33145000
HAL975   DS    0H                                                       33145500
         ST    RSDB,SSALSSCM       POINT SSALSSCM TO SDB/DCT.           33146000
         L     R1,SSALSSNM         GET ADDRESS OF SUBSYSTEM NAME.       33146500
         MVC   0(4,R1),$SVSSNM     MOVE SUBSYSTEM NAME.                 33147000
         SLR   R15,R15             SHOW NORMAL EXIT.                    33147500
         $EPILOG ,                 RETURN.                              33148000
         DROP  RIOT,RSIB,RSDB      DROP IOT, SSAL, SDB BASES.           33148500
         TITLE 'HALCRDSN -- SUBROUTINE TO CREATE DSNAME'                33149000
*                                                                       33149500
*        ROUTINE NAME - HALCRDSN                                        33150000
*                                                                       33150500
*        PURPOSE - TO CREATE AN APPROPRIATE DATA SET NAME FOR AN        33151000
*              OUTPUT SUBSYSTEM DATA SET, INCLUDING DATA SET            33151500
*              KEY ASSIGNMENT.                                          33152000
*                                                                       33152500
*        FUNCTION/OPERATION -                                           33153000
*              1.  MOVE 4-CHARACTER SUBSYSTEM NAME FROM SSVT TO         33153500
*                  USER AREA.  FOLLOW IT WITH A PERIOD.                 33154000
*              2.  MOVE JOB TYPE (JOB, STC, TSU) FROM SJB TO            33154500
*                  USER AREA.                                           33155000
*              3.  MOVE NUMERIC JOB ID FROM SJB TO USER AREA,           33155500
*                  FOLLOWED BY PERIOD, INSURING THAT LEADING            33156000
*                  BLANKS OF ID BECOME EBCDIC ZEROES.                   33156500
*              4.  MOVE 'SO' TO USER AREA TO SHOW SYSOUT DATA SET.      33157000
*              5.  INCREMENT BY ONE THE JCT'S DATA SET KEY AND          33157500
*                  SUPPLY THE INCREMENTED VALUE IN EBCDIC TO            33158000
*                  USER AREA.                                           33158500
*              6.  BLANK OUT THE REMAINING USER AREA AND RETURN.        33159000
*              NOTE - THE USER AREA IS TYPICALLY A JFCB AS              33159500
*                  FURNISHED TO THE 'ALLOCATE' SUBSYSTEM                33160000
*                  INTERFACE.                                           33160500
*                                                                       33161000
*        REGISTERS AT ENTRY -                                           33161500
*              R7  = USER AREA, TYPICALLY A JFCB                        33162000
*              R11 = SUBSYSTEM VECTOR TABLE                             33162500
*              R13 = SUBSYSTEM JOB BLOCK                                33163000
*              R14 = RETURN ADDRESS                                     33163500
*                                                                       33164000
*        REGISTER USAGE IN ADDITION TO THE ABOVE -                      33164500
*              R1  = HASP JCT                                           33165000
*              R2  = WORK REGISTER                                      33165500
*              NOTE - ADDRESSABILITY IS THE SAME AS HOSALLOC            33166000
*                                                                       33166500
*        REGISTER DIFFERENCES AT EXIT -                                 33167000
*              R1, R2 DESTROYED                                         33167500
*                                                                       33168000
*        EXIT - NORMAL -                                                33168500
*              ON R14                                                   33169000
*                                                                       33169500
HALCRDSN DS    0H                                                       33170000
         USING INFMJFCB,R7         SET JFCB ADDRESSABILITY.             33170500
         MVC   DSNSSNM,$SVSSNM     SET SUBSYSTEM NAME.                  33171000
         MVI   DSNSSNM+4,C'.'      SET PERIOD.                          33171500
         MVC   DSNJBID(3),SJBJOBID SET JOB TYPE.                        33172000
         PACK  SJBDBLWK(3),SJBJOBID+3(5)  PACK JOB NUMBER.              33172500
         UNPK  DSNJBNR,SJBDBLWK(3) UNPACK IT TO USER AREA.              33173000
         MVI   DSNJBID+8,C'.'      SET PERIOD.                          33173500
         MVC   DSNDSTYP,=C'SO'     SET 'SO' FOR SYSOUT.                 33174000
         L     R1,SJBJCT           POINT TO THE JCT.                    33174500
         USING JCTDSECT,R1         SET JCT ADDRESSABILITY.              33175000
         L     R2,JCTPDDBK         GET LAST-USED DS KEY.                33175500
         AL    R2,=FS16'1'         ADD 1 TO IT.                         33176000
         ST    R2,JCTPDDBK         STORE IT BACK IN THE JCT.            33176500
         OI    JCTFLAG1,JCT1CKPT   REQUIRE JCT CHECKPOINT.              33177000
         SRL   R2,16               RIGHT-JUSTIFY DS KEY.                33177500
         CVD   R2,SJBDBLWK         CONVERT TO PACKED DECIMAL.           33178000
         OI    SJBDBLWK+7,X'0F'    FORCE ZONE TO ALL ONES.              33178500
         UNPK  DSNDSNR,SJBDBLWK+5(3)  SET DATA SET NUMBER.              33179000
         MVI   DSNBLANK,C' '       PAD DATA SET NAME                    33179500
         MVC   DSNBLNK1,DSNBLANK   WITH BLANKS.                         33180000
         DROP  R1,R7               DROP JCT, JFCB BASES.                33180500
         BR    R14                 RETURN TO CALLER.                    33181000
         TITLE 'HALFINDP -- SEARCH IOT CHAIN FOR PDDB'                  33181500
*                                                                       33182000
*                                                                       33182500
*              HALFINDP -- FIND PDDB IN IOT CHAIN BY DATASET KEY        33183000
*                                                                       33183500
*                                                                       33184000
* THIS SUBROUTINE OPERATES UNDER HOSALLOC ADDRESSABILITY                33184500
         SPACE 1                                                        33185000
HALFINDP DS    0H                                                       33185500
         SL    RIOT,=A(IOTIOT-IOTDSECT)  SET UP FOR CHAINING.           33186000
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              33186500
         USING SSALBGN,RSOX        SET SSOB EXT ADDRESSABILITY.         33187000
         L     R7,SSALJFCB         POINT TO THE DATA SET'S JFCB.        33187500
         USING INFMJFCB,R7         SET JFCB ADDRESSABILITY.             33188000
         PACK  SJBDBLWK,DSNDSNR    PACK DATA SET NUMBER.                33188500
         CVB   R0,SJBDBLWK         CONVERT IT TO BINAR.                 33189000
HALFP10  DS    0H                                                       33189500
         L     RIOT,IOTIOT         POINT TO THE NEXT IOT.               33190000
         LTR   RIOT,RIOT           IF NO MORE IOTS,                     33190500
         BZR   R14                 RETURN CC=0 - PDDB NOT FOUND.        33191000
         L     R1,IOTPDDBP         GET OFFSET AFTER LAST PDDB.          33191500
         ALR   R1,RIOT             MAKE IT ABSOLUTE.                    33192000
         LR    R4,RIOT             POINT TO                          R4 33192500
         AL    R4,$SVPDDB1          FIRST PDDB                       R4 33192800
         USING PDBDSECT,R4         SET PDDB ADDRESSABILITY.             33193000
HALFP20  DS    0H                                                       33193500
         CLR   R4,R1               ARE WE PAST PDDBS IN IOT...          33194000
         BNL   HALFP10             BRANCH IF SO.                        33194500
         CH    R0,PDBDSKEY         DOES THIS PDDB MATCH DS KEY...       33195000
         BE    HALFP30             BRANCH IF SO.                        33195500
         LA    R4,PDBLENG(,R4)     POINT TO NEXT PDDB.                  33196000
         B     HALFP20             AND CHECK IT.                        33196500
HALFP30  DS    0H                                                       33197000
         SLR   R15,R15             CORRECT PDDB FOUND -                 33197500
         BR    R14                 RETURN TO CALLER WITH CC=2.          33198000
         SPACE 1                                                        33198500
         DROP  RIOT,RSOX,R7,R4     DROP BASES.                          33199000
         TITLE 'HALJMERG -- SUBROUTINE TO MERGE PDDB FIELDS INTO JFCB'  33199500
*                                                                       33200000
*                                                                       33200500
*              HALJMERG - SUBROUTINE TO MERGE JFCB FIELDS               33201000
*                                                                       33201500
*                                                                       33202000
         SPACE 1                                                        33202500
HALJMERG DS    0H                                                       33203000
         USING PDBDSECT,R4         SET PDDB ADDRESSABILITY.             33203500
         USING INFMJFCB,R7         SET JFCB ADDRESSABILITY.             33204000
* MERGE JFCRECFM                                                        33204500
         CLI   JFCRECFM,0          IF JFCRECFM NOT ZERO,                33205000
         BNE   HJM020              SKIP MERGE.                          33205500
         MVC   JFCRECFM,PDBRECFM   MERGE JFCRECFM.                      33206000
* MERGE JFCLRECL AND JFCBLKSI                                           33206500
HJM020   DS    0H                                                       33207000
         SLR   R0,R0               ZERO R0 FOR COMPARE.                 33207500
         LH    R1,PDBLRECL         GET PDBLRECL IN R1                   33208000
         LR    R15,R1              (AND R15 FOR JFCBLKSI).              33208500
         TM    JFCRECFM,JFCUND     BR IF                            R41 33209000
         BO    HJM040               RECFM=U                         R41 33209300
         TM    JFCRECFM,JFCVAR     BR IF                            R41 33209500
         BO    HJM030               RECFM=V                         R41 33209700
         OI    JFCRECFM,JFCFIX+JFCRFB  ELSE FORCE RECFM=FB          R41 33210000
         B     HJM040              BR TO CONTINUE                   R41 33210500
HJM030   DS    0H                                                   R41 33210700
         LA    R1,4(,R1)           VARIABLE. SET LRECL, BLKSI           33211000
         LA    R15,4(,R1)          SET BLKSI = LRECL+4.                 33213000
HJM040   DS    0H                                                       33213500
         CH    R0,JFCLRECL         IF JFCLRECL NOT ZERO,                33214000
         BNE   *+8                 DON'T MERGE.                         33214100
         STH   R1,JFCLRECL         MERGE JFCLRECL.                      33214200
         CH    R0,JFCBLKSI         IF JFCBLKSI NOT ZERO,                33214300
         BNE   HJM080              DON'T MERGE.                         33214400
         STH   R15,JFCBLKSI        MERGE JFCBLKSI.                      33214500
* MERGE JFCFCBID                                                        33215000
HJM080   DS    0H                                                       33215500
         L     R0,JFCFCBID         IF JFCFCBID                          33216000
         LTR   R0,R0               IS NOT ZERO,                         33216500
         BNZ   HJM100              DON'T MERGE.                         33217000
         MVC   JFCFCBID,PDBFCB     MERGE JFCFCBID.                      33217500
* MERGE JFCUCSID                                                        33218000
HJM100   DS    0H                                                       33218500
         L     R0,JFCUCSID         IF JFCUCSID                          33219000
         LTR   R0,R0               IS NOT ZERO,                         33219500
         BNZ   HJM120              DON'T MERGE.                         33220000
         MVC   JFCUCSID,PDBUCS     MERGE JFCUCSID.                      33220500
* MERGE JFCFUNC                                                         33221000
HJM120   DS    0H                                                       33221500
         CLI   JFCFUNC,0           IF JFCFUNC IS NONZERO,               33222000
         BNE   HJM140              DON'T MERGE.                         33222500
         MVC   JFCFUNC,PDBFUNC     MERGE JFCFUNC.                       33223000
* THAT'S ALL THE MERGES.                                                33223500
HJM140   DS    0H                                                       33224000
         BR    R14                 RETURN.                              33224500
         DROP  R4,R7               DROP PDDB, JFCB BASES.               33225000
         TITLE 'HALCRIOT -- SUBROUTINE TO FORMAT AN IOT'                33225500
*                                                                       33226000
*                                                                       33226500
*              HALCRIOT -- SUBROUTINE TO FORMAT AN IOT                  33227000
*                                                                       33227500
*                                                                       33228000
         SPACE 1                                                        33228500
HALCRIOT DS    0H                                                       33229000
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              33229500
         USING *,R12               SET LOCAL ADDRESSABILITY.            33230000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      33230500
         LR    R12,R15             SET LOCAL BASE.                      33231000
         SPACE 3                                                        33231500
*                                                                       33232000
*              CLEAR FIRST PART OF IOT                                  33232500
*                                                                       33233000
         SPACE 1                                                        33233500
         LR    R0,RIOT             SET MVCL TO-ADDRESS.                 33234000
         L     R4,0(,RIOT)         SAVE GETMAIN TCB ADDRESS          R4 33234100
         L     R1,$SVPDDB1         CLEAR TO START OF 1ST PDDB        R4 33234500
         SLR   R3,R3               CAUSE CLEAR TO ZEROES.               33235000
         MVCL  R0,R2               CLEAR FIRST PART OF IOT.             33235500
         ST    R4,0(,RIOT)         RESTORE GETMAIN TCB ADDRESS       R4 33235600
         SPACE 3                                                        33236000
*                                                                       33236500
*              SET FIELDS IN IOT                                        33237000
*                                                                       33237500
         SPACE 1                                                        33238000
         MVC   IOTID,=CL4'IOT'     SET IOTID.                           33238500
         LH    R15,$SVBFSIZ                SET                       R4 33238800
         LA    R15,IOTSTART-IOTDSECT(,R15)  IOT                      R4 33239000
         STH   R15,IOTLENG                   LENGTH.                 R4 33239300
         MVI   IOTFLAG1,IOT1CKPT   FLAG IOT FOR CHECKPOINT.             33239500
         MVC   IOTJBKEY,SJBJKEY    SET IOTJBKEY.                        33240000
         MVC   IOTTRACK,24(R13)    SET IOTTRACK.                        33240500
* CHAINING POINTERS IOTIOTTR AND IOTIOT WILL BE SET DURING              33241000
* CHAINING IN SUBROUTINE HALCHIOT                                       33241500
         ST    RSJB,IOTSJB         SET IOTSJB.                          33242000
         L     R0,$SVPDDB1         SET OFFSET TO 1ST PDDB IN         R4 33242500
         ST    R0,IOTPDDBP             IOTPDDBP.                        33243000
         SPACE 3                                                        33243500
*                                                                       33244000
*              FURTHER SET IOTFLAG1                                     33244500
*                                                                       33245000
         SPACE 1                                                        33245500
         USING SSALBGN,RSOX        SET SSAL ADDRESSABILITY.             33246000
         TM    SSALFLG1,SSALHOLD+SSALTRKM+SSALSPIN  IF SPECIAL,         33246500
         BNZ   HALCRI20            GO CHANGE FLAGS.                     33247000
         CALL  HALCLASS            IF NOT SCATHOLD,                     33247500
         BZ    HALCRI90            LEAVE FLAGS ALONE.                   33248000
HALCRI20 DS    0H                                                       33248500
         TM    SJBFLG1,SJB1XBM     IF BATCH MONITOR,           @OZ28238 33248600
         BO    HALCRI90            TREAT AS NON-SPIN/HOLD      @OZ28238 33248700
         OI    IOTFLAG1,IOT1SPIN   INDICATE SPIN IOT.                   33249000
         TM    SSALFLG1,SSALTRKM   IF NEW TRACK MAP NEEDED,             33249500
         BZ    HALCRI90            THEN                                 33250000
         OI    IOTFLAG1,IOT1ALOC   SET IOT1ALOC.                        33250500
         SPACE 3                                                        33251000
*                                                                       33251500
*              RETURN TO CALLER                                         33252000
*                                                                       33252500
         SPACE 1                                                        33253000
HALCRI90 DS    0H                                                       33253500
         OI    IOTMSTAB+(TABFLAG-TABDSECT),TABMASTR SETUP MSTR TAB   R4 33253600
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   33254000
         BR    R14                 RETURN.                              33254500
         DROP  RIOT,RSOX           DROP IOT, SSAL BASES.                33255000
         TITLE 'HALCHIOT -- SUBROUTINE TO CHAIN AN IOT'                 33255500
*                                                                       33256000
*                                                                       33256500
*              HALCHIOT -- SUBROUTINE TO CHAIN AN IOT                   33257000
*                                                                       33257500
*                                                                       33258000
         SPACE 1                                                        33258500
HALCHIOT DS    0H                                                       33259000
         USING *,R12               SET LOCAL ADDRESSABILITY.            33259500
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      33260000
         LR    R12,R15             SET LOCAL BASE.                      33260500
         SPACE 3                                                        33261000
*                                                                       33261500
*              DECIDE WHICH TYPE OF CHAINING TO DO                      33262000
*                                                                       33262500
         SPACE 1                                                        33263000
         L     R7,SJBJCT           POINT TO HASP JCT.                   33263500
         USING JCTDSECT,R7         SET JCT ADDRESSABILITY.              33264000
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              33264500
         TM    IOTFLAG1,IOT1SPIN   IF SPIN IOT,                         33265000
         BO    HALCHI50            GO CHAIN IT.                         33265500
         SPACE 3                                                        33266000
*                                                                       33266500
*              CHAIN REGULAR IOT FIFO                                   33267000
*                                                                       33267500
         SPACE 1                                                        33268000
         L     R1,SJBIOT           POINT TO THE 1ST IOT.                33268500
HALCHI10 DS    0H                                                       33269000
         LR    R2,R1               SAVE PREVIOUS IOT POINTER.           33269500
         L     R1,IOTIOT-IOTDSECT(,R1)  POINT TO NEXT IOT.              33270000
         LTR   R1,R1               IF IT EXISTS,                        33270500
         BNZ   HALCHI10            LOOP TILL END OF CHAIN.              33271000
         SLR   R0,R0               ZERO OUT                             33271500
         ST    R0,IOTIOT           IOTIOT                               33272000
         ST    R0,IOTIOTTR         AND IOTIOTTR.                        33272500
         MVC   IOTIOTTR-IOTDSECT(,R2),IOTTRACK  CHAIN AUX STOR.         33273000
         ST    RIOT,IOTIOT-IOTDSECT(,R2)  CHAIN MAIN STORAGE.           33273500
         OI    IOTFLAG1-IOTDSECT(R2),IOT1CKPT  CKPT PREV IOT.           33274000
         B     HALCHI90            RETURN.                              33274500
         SPACE 3                                                        33275000
*                                                                       33275500
*              CHAIN SPIN IOT LIFO                                      33276000
*                                                                       33276500
         SPACE 1                                                        33277000
HALCHI50 DS    0H                                                       33277500
         MVC   IOTIOT,SJBSPIOT     POINT THIS IOT TO NEXT.              33278000
         ST    RIOT,SJBSPIOT       POINT HEADER TO THIS.                33278500
         MVC   IOTIOTTR,JCTSPIOT   DO THE SAME FOR                      33279000
         MVC   JCTSPIOT,IOTTRACK   AUXILIARY STORAGE CHAIN.             33279500
         OI    JCTFLAG1,JCT1CKPT   REQUIRE JCT CHECKPOINT.              33280000
         SPACE 3                                                        33280500
*                                                                       33281000
*              RETURN TO CALLER                                         33281500
*                                                                       33282000
         SPACE 1                                                        33282500
HALCHI90 DS    0H                                                       33283000
         OI    IOTFLAG1,IOT1CKPT   REQUIRE IOT CHECKPOINT.              33283500
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   33284000
         BR    R14                 RETURN.                              33284500
         DROP RIOT,R7              DROP IOT, JCT BASES.                 33285000
         TITLE 'HALCRPDB -- SUBROUTINE TO CREATE A PDDB'                33285500
HALCRPDB DS    0H                                                       33286000
*                                                                       33286500
*                                                                       33287000
*              CREATE PERIPHERAL DATASET DEFINITION BLOCK (PDDB)        33287500
*                                                                       33288000
*                                                                       33288500
         USING *,R12               SET LOCAL ADDRESSABILITY.            33289000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      33289500
         LR    R12,R15             SET LOCAL BASE.                      33290000
* SEE IF THERE'S ENOUGH SPACE IN THE IOT TO HOLD A PDDB                 33290500
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              33291500
         L     R6,IOTPDDBP         GET OFFSET PAST LAST PDDB.           33292000
         LA    R15,PDBLENG(,R6)    IF NO ROOM                        R4 33292500
         CH    R15,IOTLENG         FOR MAX PDDB,                     R4 33292800
         BH    HCP800              RETURN CC=2 TO GET IOT.              33293000
* MOVE MAXIMUM-LENGTH PDDB BUT DON'T SET IOTPDDBP YET.                  33293500
         ALR   R6,RIOT             COMPUTE ABSOLUTE PDDB ADDRESS.       33294000
         MVC   0(PDBLENG,R6),HALPDDB  MOVE MODEL PDDB.                  33294500
* IF SSOB EXTENSION EXISTS, VERIFY USER ID                              33295000
         USING SSALBGN,RSOX        SET SSOB EXT ADDRESSABILITY.         33297000
         L     R1,SJBJCT           POINT TO JCT                      R4 33297100
         SLR   R2,R2               SET DEFAULT                       R4 33297200
         IC    R2,JCTROUTE-JCTDSECT(R1) GET DEFAULT FIRST BYTE       R4 33297400
         L     R1,SSALDEST         GET DESTINATION POINTER.             33297800
* FOLLOWING CALL DESTROYS R0,R1,R2,R3,R14,R15                           33298000
         CALL  USERDEST            VALIDIFY AND COMPRESS DEST.          33298500
         B     HCP810              +0 - INVALID DESTINATION             33299000
*                                  +4 - R2 CONTAINS DESTINATION         33299500
HCP100   DS    0H                                                       33300000
* CLEAR SSALDEST FIELD FOR POSSIBLE UPDATE DURING UNALLOCATION       R4 33301000
         L     R1,SSALDEST         CLEAR DEST FIELD                  R4 33302000
         MVC   0(8,R1),=CL8' '      IN SSOB                          R4 33303000
         USING PDBDSECT,R6         SET NEW PDDB ADDRESSABILITY.         33304000
         SPACE 3                                                        33305000
*                                                                       33305500
*              SET PDDB FROM SSOB EXTENSION                             33306000
*                                                                       33306500
* SET FORMS IDENTIFIER UNLESS ARGUMENT IS ZERO                          33308000
         L     R1,SSALFORM         GET POINTER TO FORMS ID.             33308500
         L     R1,0(,R1)           GET FORMS ID.                        33309000
         CL    R1,=CL4' '          IF BLANK FORMS,                      33309500
         BE    *+8                 DON'T USE IT.                        33310000
         ST    R1,PDBFORMS         ELSE STORE IT IN PDBFORMS.           33310500
* SET FORMS CONTROL BUFFER IDENTIFIER UNLESS ZERO                       33311000
         L     R7,SSALJFCB         POINT TO JFCB.                       33311500
         USING INFMJFCB,R7         SET JFCB ADDRESSABILITY.             33312000
         L     R1,JFCFCBID         GET FORMS CONTROL BUFFER ID.         33312500
         LTR   R1,R1               IF ZERO,                             33313000
         BZ    *+14                DON'T USE IT.                        33313500
         ST    R1,PDBFCB           ELSE STORE IT IN PDBFCB.             33314000
         OC    PDBFCB,=X'40404040' SET BINARY ZEROES TO BLANKS.         33314500
* SET UNIVERSAL CHARACTER SET IDENTIFIER UNLESS ZERO                    33315000
         L     R1,JFCUCSID         GET UNIV CHAR SET ID.                33315500
         LTR   R1,R1               IF ZERO,                             33316000
         BZ    *+14                DON'T USE IT.                        33316500
         ST    R1,PDBUCS           ELSE STORE IT IN PDBUCS.             33317000
         OC    PDBUCS,=X'40404040' SET BINARY ZEROES TO BLANKS.         33317500
* SET 3525 FUNCTION BYTE IRREGARDFUL                                    33318000
         MVC   PDBFUNC,JFCFUNC     SET PDBFUNC.                         33318500
* SET DESTINATION, COMPUTED EARLIER, NOW IN R2                          33319000
         STH   R2,PDBDEST          SET DESTINATION.                     33319500
* SET COPY COUNT UNLESS ZERO                                            33320000
         L     R1,SSALCOPY         POINT TO COPIES= PARM.               33320500
         CLI   0(R1),0             TEST COPY COUNT.                     33321000
         BE    *+10                BR IF NONE PROVIDED.                 33321500
         MVC   PDBCOPYS,0(R1)      ELSE SET COPIES.                     33322000
* CHECK FOR DSID APPENDED TO DSNAME                            @Y30O    33322100
         LA    R1,DSNDSID+L'DSNDSID  POINT TO DSID EXTENSION         R4 33322200
         CLI   0(R1),C'.'          WAS DSID APPENDED...              R4 33322300
         BNE   HCP200              BR IF NO TO TEST FOR WTRID        R4 33322400
* MOVE DSID TO PDDB                                            @Y30O    33322500
         MVC   PDBDSID,1(R1)       MOVE DSID(+ BLANKS) TO PDDB @Y30O    33322600
         MVI   0(R1),C' '          CLEAR DSID EXTENSION INDICATOR    R4 33322700
         MVC   1(8,R1),0(R1)       BLANK OUT DSID IN DSNAME    @Y30O    33322800
         OC    PDBDSID,0(R1)       ENSURE DSID PADDED WITH BLANKS    R4 33322900
* FLAG PDDB FOR SPECIAL HANDLING                               @Y30O    33323000
         OI    PDBFLAG1,PDB1DSID+PDB1HOLD+PDB1PSO DSID/HOLD/PSO@Y30O    33323100
         B     HCP300              BYPASS WTRID TEST           @Y30O    33323200
* SET USER WRITER IDENTIFIER (WHETHER OR NOT ZERO)                   R4 33323300
HCP200   DS    0H                                                    R4 33323400
         L     R1,SSALPGMN         POINT TO USER WRITER NAME.           33323500
         MVC   PDBWTRID,0(R1)      MOVE IT TO PDBWTRID.                 33323600
         EJECT                                                       R4 33323700
HCP300   DS    0H                                                       33324000
         TM    JFCOPTCD,JFCOPTJ    TEST FOR 3800 OPTCD=J            R41 33324100
         BZ    HCPBURST            BR IF NO                         R41 33324200
         OI    PDBFLAG2,PDB2OPTJ   ELSE, SET FLAG IN PDDB            R4 33324300
HCPBURST L     R1,SJBJCT           POINT TO JCT -- TEST JOB'S       R41 33324400
         TM    JCTFLAG1-JCTDSECT(R1),JCTBURST  BURST DEFAULT...     R41 33324500
         BZ    *+8                 BR IF BURST=N                    R41 33324600
         OI    PDBFLAG2,PDB2BRST    ELSE SET BURST=Y IN PDDB        R41 33324700
         TM    JFCUCSOP,JFCBEXTP   TEST FOR 3800 EXTENSION          R41 33324800
         BNO   HCP310              BR IF NOT - END MERGE             R4 33324900
         SPACE 1                                                     R4 33325000
         L     R7,JFCBEXAD-1       ESTABLISH JFCB                    R4 33325100
         USING JFCBE-16,R7          EXTENSION ADDRESSABILITY         R4 33325200
         SPACE 1                                                     R4 33325300
* SET 3800 BURSTER SPECIFICATION                                     R4 33325400
         TM    JFCBFLAG,JFCBBST    TEST FOR BURST=YES ON DD          R4 33325500
         BNO   *+8                 BR IF NOT                        R41 33325600
         OI    PDBFLAG2,PDB2BRST   ELSE, SET BURST=YES IN PDDB       R4 33325700
         TM    JFCBFLAG,JFCBCFS    TEST FOR BURST=N ON DD           R41 33325800
         BZ    *+8                 BR IF NOT                        R41 33325900
         NI    PDBFLAG2,255-PDB2BRST ELSE SET BURST=N IN PDDB       R41 33326000
* SET 3800 COPY MODIFICATION IMAGE ID AND TABLE REF CHAR             R4 33326100
SKIP120  L     R1,JFCMODIF         GET MODIFY PARAMETER              R4 33326200
         LTR   R1,R1               TEST FOR NOT SPECIFIED            R4 33326300
         BNM   HCPFLSH             BR IF NOT SPECIFIED               R4 33326400
         ST    R1,PDBMODF          ELSE, SET PDBMODF                 R4 33326500
         OC    PDBMODF,=X'40404040' CONVERT BINARY ZEROS TO BLANKS   R4 33326600
         MVC   PDBMODFT,JFCIDTRC   SET PDBMODFT                      R4 33326700
* SET 3800 FLASH FRAME ID AND FLASH COUNT                            R4 33326800
HCPFLSH  DS    0H                                                    R4 33326900
         L     R1,JFCBMAGT         GET FLASH PARAMETER               R4 33327000
         LTR   R1,R1               TEST FOR FLASH SPECIFIED          R4 33327100
         BNM   HCPCHARS            BR IF NOT SPECIFIED               R4 33327200
         ST    R1,PDBFLASH         ELSE, SET PDBFLASH                R4 33327300
         OC    PDBFLASH,=X'40404040' CONVERT BINARY ZEROS TO BLANKS  R4 33327400
         ICM   R1,1,JFCIMTOT       SET FLASH                        R41 33327500
         BZ    HCPCHARS             COUNT IF                        R41 33327600
         STC   R1,PDBFLSHC           SPECIFIED                      R41 33327700
* SET 3800 CHAR1, CHAR2, CHAR3, CHAR4                                R4 33327800
HCPCHARS DS    0H                                                    R4 33327900
         L     R1,JFCBTRS1         SET                               R4 33328000
         CL    R1,=X'40404040'      CHARS FROM                 @OZ30543 33328010
         BE    SKIP130              JFCB TO                    @OZ30543 33328020
         LTR   R1,R1                PDBCHAR1                         R4 33328100
         BZ    SKIP130               IF                        @OZ30543 33328200
         ST    R1,PDBCHAR1            SPECIFIED                      R4 33328300
         OC    PDBCHAR1,=X'40404040'   AND CNVRT ZEROS TO BLANKS     R4 33328400
SKIP130  L     R1,JFCBTRS2         SET                               R4 33328500
         CL    R1,=X'40404040'      CHARS FROM                 @OZ30543 33328510
         BE    SKIP140              JFCB TO                    @OZ30543 33328520
         LTR   R1,R1                PDBCHAR2                         R4 33328600
         BZ    SKIP140               IF                        @OZ30543 33328700
         ST    R1,PDBCHAR2            SPECIFIED                      R4 33328800
         OC    PDBCHAR2,=X'40404040'   AND CNVRT ZEROS TO BLANKS     R4 33328900
SKIP140  L     R1,JFCBTRS3         SET                               R4 33329000
         CL    R1,=X'40404040'      CHARS FROM                 @OZ30543 33329010
         BE    SKIP150              JFCB TO                    @OZ30543 33329020
         LTR   R1,R1                PDBCHAR3                         R4 33329100
         BZ    SKIP150               IF                        @OZ30543 33329200
         ST    R1,PDBCHAR3            SPECIFIED                      R4 33329300
         OC    PDBCHAR3,=X'40404040'   AND CNVRT ZEROS TO BLANKS     R4 33329400
SKIP150  L     R1,JFCBTRS4         SET                               R4 33329500
         CL    R1,=X'40404040'      CHARS FROM                 @OZ30543 33329510
         BE    SKIP160              JFCB TO                    @OZ30543 33329520
         LTR   R1,R1                PDBCHAR4                         R4 33329600
         BZ    SKIP160               IF                        @OZ30543 33329700
         ST    R1,PDBCHAR4            SPECIFIED                      R4 33329800
         OC    PDBCHAR4,=X'40404040'   AND CNVRT ZEROS TO BLANKS     R4 33329900
* SET 3800 COPY GROUPS                                               R4 33330000
SKIP160  MVC   PDBCOPYG,JFCGROUP   SET PDBCOPYG                      R4 33330100
* END OF JFCB-TO-PDDB MERGE                                          R4 33330200
         EJECT                                                       R4 33330300
HCP310   DS    0H                                                    R4 33330400
* END OF PDDB SETUP FROM SSOB EXTENSION AND JFCB                        33330500
         SPACE 1                                                    R41 33330600
         L     R7,SSALJFCB         RESTORE JFCB                     R41 33330700
         USING INFMJFCB,R7          ADDRESSABILITY                  R41 33330800
         SPACE 3                                                        33330900
*                                                                       33331000
*              SEARCH FOR OUTPUT CTRL RECORD TO MATCH PDBFORMS          33331100
*                                                                       33331200
         SLR   R3,R3               ASSUME NO OCR               @OZ27530 33331250
         ICM   R0,15,PDBFORMS      GET FORMS NUMBER FROM PDDB.          33331300
         BZ    HCP495              BR IF NONE PROVIDED         @OZ27530 33331400
* SET UP TO CHAIN OUTPUT CONTROL TABLES                                 33331500
         LA    R3,SJBOCT           POINT TO OCT POINTER,                33331600
         SL    R3,=A(OCTOCT-OCTDSECT)  SUBTRACT CHAIN OFFSET.           33331700
         USING OCTDSECT,R3         SET OCT ADDRESSABILITY.              33331800
* POINT TO THE NEXT OUTPUT CONTROL TABLE                                33331900
HCP320   DS    0H                                                       33332000
         L     R3,OCTOCT           POINT TO NEXT OCT.                   33332100
         LTR   R3,R3               IF NO MORE, SEARCH FAILED -          33332500
         BZ    HCP495              SKIP OCR PROCESSING              R41 33333000
* SET UP TO SEARCH OUTPUT CONTROL RECORDS                               33333500
         L     R1,OCTOCROF         GET OFFSET TO LAST OCR.              33334000
         ALR   R1,R3               MAKE IT ABSOLUTE.                    33334500
         LA    R2,OCTOCR           POINT TO FIRST OCR.                  33335000
* CHECK NEXT OCR IF IT EXISTS                                           33335500
HCP340   DS    0H                                                       33336000
         CLR   R2,R1               ARE THERE MORE OCRS...               33336500
         BNL   HCP320              IF NOT, GO TO NEXT OCT.              33337000
         USING OCRDSECT,R2         SET OCR ADDRESSABILITY.              33337500
         CL    R0,OCRCODE          DOES OCR CODE MATCH FORMS...         33338000
         BE    HCP400              YES.  THIS IS THE ONE.               33338500
         LA    R2,OCREND           NO.  POINT TO NEXT OCR AND           33339000
         B     HCP340              TEST IF IT IS ONE.                   33339500
         SPACE 1                                                        33340000
         DROP  R3                  DROP OCT ADDRESSABILITY.             33340500
         EJECT                                                       R4 33340600
* MATCHING OCR IS FOUND - MERGE STARTS HERE                             33341000
HCP400   DS    0H                                                       33341500
* MERGE OCRFORMS INTO PDBFORMS                                          33342000
         L     R1,SSALFORM         GET POINTER TO FORMS ID              33342500
         L     R0,OCRFORMS         GET OCR FORMS ID                     33343000
         ST    R0,PDBFORMS         SET PDBFORMS                         33343500
         ST    R0,0(,R1)           RESET INPUT FORMS ID                 33344000
* MERGE OCRFCB INTO PDBFCB AND INTO JFCFCBID                            33344500
         L     R1,OCRFCB           GET OCR FORMS CTRL BUFFER ID.        33345000
         LTR   R1,R1               IF NO OCR FCB,                       33345500
         BZ    *+12                SKIP.                                33346000
         ST    R1,PDBFCB           SET PDBFCB.                          33346500
         ST    R1,JFCFCBID         SET JFCFCBID.                        33347000
* MERGE OCRUCS INTO PDBUCS AND INTO JFCUCSID                            33347500
         L     R1,OCRUCS           GET OCR UNIVERSAL CHAR SET ID.       33348000
         LTR   R1,R1               IF NO OCR UCS,                       33348500
         BZ    *+12                SKIP.                                33349000
         ST    R1,PDBUCS           SET PDBUCS.                          33349500
         ST    R1,JFCUCSID         SET JFCUCSID.                        33350000
* MERGE OCRRECNT INTO PDBRECCT                                          33350500
         L     R1,OCRRECNT         GET OCR RECORD COUNT FIELD.          33351000
         LTR   R1,R1               IF IT IS ZERO,                       33351500
         BZ    *+8                 SKIP.                                33352000
         ST    R1,PDBRECCT         SET PDBRECCT.                        33352500
* MERGE OCRINDEX INTO PDBINDEX                                          33353000
         ICM   R1,8,OCRINDEX       GET OCR 3211 PRINT INDEX.            33353500
         BZ    *+8                 IF IT IS ZERO, SKIP.                 33354000
         STCM  R1,8,PDBINDEX       SET PDBINDEX.                        33354500
* MERGE OCRCPTN INTO PDBCPTN                                        R41 33354600
         MVC   PDBCPTN(1),OCRCPTN  SET PDBCPTN                      R41 33354700
* MERGE OCRDEST1 INTO PDBDEST                                           33355000
         LH    R1,OCRDEST1         GET FIRST OCR DESTINATION.           33355500
         LTR   R1,R1               IF IT'S DEFAULT,                  R4 33356000
         BE    HCP480              BRANCH.                              33356500
         STH   R1,PDBDEST          SET PDBDEST.                         33357000
         LH    R1,OCRDEST2         PICK UP 2D OCR DESTINATION.          33357500
         LTR   R1,R1               IF IT'S DEFAULT,                  R4 33358000
         BE    HCP480              ONLY ONE DESTINATION.                33358500
         OI    PDBFLAG1,PDB1MDES   ELSE SET FLAG PDB1MDES.              33359000
         L     R1,SJBJCT           POINT TO THE JCT                     33359500
         USING JCTDSECT,R1         AND GET ADDRESSABILITY.              33360000
         MVC   JCTWORK(8),OCRDEST1 MOVE 4 DESTS TO JCTWORK.             33360500
         MVC   JCTWORK+8(2),=X'0000' MOVE TERMINATOR.                R4 33361000
         DROP  R1                  DROP JCT ADDRESSABILITY.             33361500
HCP480   DS    0H                                                       33362000
* MERGE OCRCOPY INTO PDBCOPYS                                           33362500
         ICM   R1,8,OCRCOPY        GET OCR COPY COUNTER.                33363000
         BZ    *+8                 IF IT IS ZERO, SKIP.                 33363500
         STCM  R1,8,PDBCOPYS       SET PDBCOPYS.                        33364000
         EJECT                                                       R4 33364100
*                                                                    R4 33364200
*        MERGE 3800 OCR FIELDS WITH PDDB                             R4 33364300
*                                                                    R4 33364400
* MERGE OCRFLAGS(BURST) INTO PDBFLAG2                                R4 33364500
         TM    OCRFLAGS,OCRBRSTY   TEST FOR BURST=YES IN OCR         R4 33364600
         BZ    SKIP170             BR IF NOT                         R4 33364700
         OI    PDBFLAG2,PDB2BRST   SET PDBFLAG2(PDB2BRST)            R4 33364800
SKIP170  TM    OCRFLAGS,OCRBRSTN   TEST FOR BURST=NO IN OCR          R4 33364900
         BZ    SKIP180             BR IF NOT                         R4 33365000
         NI    PDBFLAG2,255-PDB2BRST  RESET PDBFLAG2(PDB2BRST)       R4 33365100
* MERGE OCRMODF/OCRMODFT INTO PDBMODF/PDBMODFT                       R4 33365200
SKIP180  L     R1,OCRMODF          GET OCR MODIFY IMAGE ID           R4 33365300
         LTR   R1,R1               TEST FOR SPECIFIED                R4 33365400
         BZ    HCP490              BR IF NOT                         R4 33365500
         ST    R1,PDBMODF          SET PDBMODF                       R4 33365600
         ICM   R1,1,OCRMODFT       GET OCR COPY MOD TRC              R4 33365700
         BZ    HCP490              BR IF NOT SPECIFIED               R4 33365800
         STC   R1,PDBMODFT         SET PDBMODFT                      R4 33365900
HCP490   DS    0H                                                    R4 33366000
* MERGE OCRFLASH/OCRFLSHC INTO PDBFLASH/PDBFLSHC                     R4 33366100
         L     R1,OCRFLASH         GET OCR FLASH FRAME ID            R4 33366200
         LTR   R1,R1               TEST FOR SPECIFIED                R4 33366300
         BZ    HCP492              BR IF NOT                         R4 33366400
         ST    R1,PDBFLASH         SET PDBFLASH                      R4 33366500
         ICM   R1,1,OCRFLSHC       GET OCR FLASH COUNT               R4 33366600
         BZ    HCP492              BR IF NOT SPECIFIED               R4 33366700
         STC   R1,PDBFLSHC         SET PDBFLSHC                      R4 33366800
HCP492   DS    0H                                                    R4 33366900
* MERGE OCRCHAR1-4 INTO PDBCHAR1-4                                   R4 33367000
         L     R1,OCRCHAR1         GET OCR CHAR1                     R4 33367100
         LTR   R1,R1               TEST FOR SPECIFIED                R4 33367200
         BZ    HCP494              BR IF NOT                         R4 33367300
         ST    R1,PDBCHAR1         SET PDBCHAR1                      R4 33367400
         L     R1,OCRCHAR2         GET OCR CHAR2                     R4 33367500
         LTR   R1,R1               TEST FOR SPECIFIED                R4 33367600
         BZ    HCP494              BR IF NOT                         R4 33367700
         ST    R1,PDBCHAR2         SET PDBCHAR2                      R4 33367800
         L     R1,OCRCHAR3         GET OCR CHAR3                     R4 33367900
         LTR   R1,R1               TEST FOR SPECIFIED                R4 33368000
         BZ    HCP494              BR IF NOT                         R4 33368100
         ST    R1,PDBCHAR3         SET PDBCHAR3                      R4 33368200
         L     R1,OCRCHAR4         GET OCR CHAR4                     R4 33368300
         LTR   R1,R1               TEST FOR SPECIFIED                R4 33368400
         BZ    HCP494              BR IF NOT                         R4 33368500
         ST    R1,PDBCHAR4         SET PDBCHAR4                      R4 33368600
HCP494   DS    0H                                                    R4 33368700
* MERGE OCRCOPYG INTO PDBCOPYG                                       R4 33368800
         CLI   OCRCOPYG,0          TEST FOR SPECIFIED                R4 33368900
         BZ    HCP495              BR IF NOT                         R4 33369000
         MVC   PDBCOPYG,OCRCOPYG   SET PDBCOPYG                      R4 33369100
         EJECT                                                       R4 33369200
*                                                                    R4 33369300
*        IF JFCB EXTENSION EXISTS - MERGE-BACK PDDB TO JFCB          R4 33369400
*                                                                    R4 33369500
         SPACE 1                                                     R4 33369600
HCP495   TM    JFCUCSOP,JFCBEXTP   TEST FOR 3800 EXTENSION          R41 33369700
         BZ    HCP500              BR IF NOT - END MERGE             R4 33369800
         L     R7,JFCBEXAD-1       ESTABLISH JFCB                    R4 33369900
         USING JFCBE-16,R7          EXTENSION ADDRESSABILITY         R4 33370000
         SPACE 1                                                     R4 33370100
* MERGE PDBFLAG (BURST) INTO JFCBFLAG                                R4 33370200
         TM    PDBFLAG2,PDB2BRST   TEST FOR BURST=YES                R4 33370300
         BZ    HCP496              BR IF NO                          R4 33370400
         OI    JFCBFLAG,JFCBBST    INDICATE BURST=YES                R4 33370500
         NI    JFCBFLAG,255-JFCBCFS  IN JFCB                         R4 33370600
         B     HCP497                AND BR TO CONTINUE             R41 33370700
HCP496   OI    JFCBFLAG,JFCBCFS    INDICATE BURST=NO                 R4 33370800
         NI    JFCBFLAG,255-JFCBBST  IN JFCB                         R4 33370900
HCP497   LTR   R3,R3               TEST FOR OCR PRESENT             R41 33371000
         BZ    HCP500              END MERGE IF NOT                 R41 33371100
* MERGE PDBMODF/PDBMODFT INTO JFCMODIF/JFCIDTRC                      R4 33371200
HCP498   CLC   PDBMODF,=C'****'    WAS MODIFY SPECIFIED...           R4 33371300
         BE    SKIP200             BR IF NOT                         R4 33371400
         MVC   JFCMODIF,PDBMODF    MOVE COPY MOD ID                  R4 33371500
         MVC   JFCIDTRC,PDBMODFT   MOVE COPY MOD TRC                 R4 33371600
* MERGE PDBFLASH/PDBFLSHC INTO JFCBMAGT/JFCIMTOT                     R4 33371700
SKIP200  CLC   PDBFLASH,=C'****'   TEST FOR FLASH SPECIFIED          R4 33371800
         BE    SKIP210             BR IF NOT                         R4 33371900
         MVC   JFCBMAGT,PDBFLASH   MOVE FLASH FRAME ID               R4 33372000
         MVC   JFCIMTOT,PDBFLSHC   MOVE FLASH COUNT                  R4 33372100
* MERGE PDBCHAR1-4 INTO JFCBTRS1-4                                   R4 33372200
SKIP210  CLC   PDBCHAR1,=C'****'   MERGE CHAR1                       R4 33372300
         BE    SKIP220              IF                               R4 33372400
         MVC   JFCBTRS1,PDBCHAR1     SPECIFIED                       R4 33372500
SKIP220  CLC   PDBCHAR2,=C'****'   MERGE CHAR2                       R4 33372600
         BE    SKIP230              IF                               R4 33372700
         MVC   JFCBTRS2,PDBCHAR2     SPECIFIED                       R4 33372800
SKIP230  CLC   PDBCHAR3,=C'****'   MERGE CHAR3                       R4 33372900
         BE    SKIP240              IF                               R4 33373000
         MVC   JFCBTRS3,PDBCHAR3     SPECIFIED                       R4 33373100
SKIP240  CLC   PDBCHAR4,=C'****'   MERGE CHAR4                       R4 33373200
         BE    SKIP250              IF                               R4 33373300
         MVC   JFCBTRS4,PDBCHAR4     SPECIFIED                       R4 33373400
* MERGE PDBCOPYG INTO JFCGROUP                                       R4 33373500
SKIP250  CLI   PDBCOPYG,0          TEST FOR SPECIFIED                R4 33373600
         BE    HCP500              BR IF NOT                         R4 33373700
         MVC   JFCGROUP,PDBCOPYG   MOVE IN COPY GROUPS               R4 33373800
         SPACE 1                                                     R4 33373900
         DROP  R7                  SUSPEND JFCBE ADDRESSABILITY      R4 33374000
         SPACE 2                                                     R4 33374100
HCP500   DS    0H                                                    R4 33374200
         EJECT                                                       R4 33374300
         SPACE 3                                                        33374400
*                                                                       33374500
*                                                                       33374600
*              SET CLASS, DATA SET KEY, FLAGS                           33374700
*                                                                       33374800
*                                                                       33374900
         CALL  HALCLASS            GET CLASS, SCATHOLD STATUS.          33375000
         STC   R2,PDBCLASS         SET CLASS INTO PDDB.                 33375100
         BZ    *+16                IF NOT SCATHOLD, SKIP.               33375200
         TM    SJBFLG1,SJB1XBM     IF BATCH MONITOR JOB,                33375300
         BO    *+8                 SKIP.                                33375400
         OI    PDBFLAG1,PDB1HOLD   SET HOLD FLAG IN PDDB.               33375500
         TM    SCATFLAG-SCADSECT(R1),SCATDUMM  Q. DUMMY CLASS           33375600
         BZ    *+8                             BR. IF NO                33375700
         OI    PDBFLAG1,PDB1NSOT               MARK AS DUMMY            33375800
         TM    SCATFLAG-SCADSECT(R1),SCATTCEL TRAKCELL SYSOUT CLASS  R4 33375900
         BZ    SKIP260             NO                                R4 33376000
         OI    PDBFLAG2,PDB2TCEL   YES - SHOW TRAKCELL DATA SET      R4 33376100
SKIP260  CVB   R1,SJBDBLWK         CONVERT DS NUMBER TO                 33376200
         STH   R1,PDBDSKEY         BINARY AND SET KEY.                  33376300
         TM    SSALFLG1,SSALTRKM   IF ALLOC SPECIFIED                   33376400
         BZ    *+8                 INDIVIDUAL TRACK GROUP MAP,          33376500
         OI    PDBFLAG1,PDB1SPIN   SET FLAG PDB1SPIN.                   33376600
         TM    SSALFLG1,SSALHOLD   IF ALLOC SPECIFIED                   33376700
         BZ    *+12                HOLD-AT-UNALLOCATION        @OZ29148 33376800
         OI    PDBFLAG1,PDB1HOLD   SET PDB1HOLD.                        33376900
         OI    PDBFLAG2,PDB2HLDS   ALSO SPECIFIC HOLD          @OZ29148 33376950
         TM    PDBFLAG1,PDB1SPIN+PDB1HOLD  IF EITHER FLAG               33377000
         BZ    *+8                 WAS SET,                             33377100
         OI    PDBFLAG1,PDB1PSO    SET PDB1PSO.                         33377200
         L     R7,SJBJCT           GET JCT ADDRESS FROM SJB.            33377300
         USING JCTDSECT,R7         PROVIDE JCT ADDRESSABILITY.          33377500
         TM    JCTJOBFL,JCTNOUPT   TEST 'NO OUTPUT' OPTION.             33378000
         BZ    *+8                 BR IF NO.                            33378500
         OI    PDBFLAG1,PDB1NSOT   ELSE DON'T LET DATASET PRINT.        33379000
         ICM   R1,15,PDBFORMS      GET FINAL FORMS NUMBER.              33379500
         BNZ   HCP600              BR IF 'VALID'.                       33380000
         MVC   PDBFORMS,JCTFORMS   ELSE USE JOB FORMS.                  33380500
         OI    PDBFLAG2,PDB2JFMS   SHOW PDBFORMS SET BY JCTFORMS    R41 33380600
         L     R1,SSALFORM         GET FORMS ID ADDRESS             R41 33380700
         MVC   0(4,R1),JCTFORMS    UPDATE FORMS ID FIELD            R41 33380800
HCP600   DS    0H                                                       33381000
         SPACE 3                                                        33381500
*                                                                       33382000
*                                                                       33382500
*              UPDATE IOTPDDBP AND RETURN.                              33383000
*                                                                       33383500
*                                                                       33384000
         LA    R0,PDBLENG          GET PDDB LENGTH.                     33384500
         AL    R0,IOTPDDBP         ADD OLD IOTPDDBP.                    33385000
         ST    R0,IOTPDDBP         SET NEW IOTPDDBP.                    33385500
         ST    R6,44(,R13)         SAVE PDDB ADR IN SAVEAREA.           33386000
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   33386500
         SR    R15,R15             SET CC=0.                            33387000
         BR    R14                 RETURN TO CALLER.                    33387500
         EJECT                                                          33388000
*                                                                       33388500
*                                                                       33389000
*              NO SPACE - RETURN CC=2 TO GET ANOTHER IOT                33389500
*                                                                       33390000
*                                                                       33390500
HCP800   DS    0H                                                       33391000
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   33391500
         SLR   R15,R15             SET CC=2.                            33392000
         BR    R14                 RETURN TO CALLER.                    33392500
         SPACE 1                                                     R4 33392600
*                                                                       33393500
*                                                                       33394000
*              INVALID DESTINATION - RETURN CC = 1                      33394500
*                                                                       33395000
*                                                                       33395500
HCP810   DS    0H                                                       33396000
         CLI   *,X'FF'             SET CC = 1  (MASK OF 4)           R4 33396500
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   33397000
         BR    R14                 RETURN TO CALLER.                    33397500
         SPACE 1                                                     R4 33397600
*                                                                       33398500
*                                                                       33399000
*        DEFAULT FULL-LENGTH PERIPHERAL DATASET DEFINITION BLOCK        33399500
*                                                                       33400000
*                                                                       33400500
         DS    0F                  FORCE HALPDDB TO FULLWORD.           33401500
HALPDDB  DS    0CL(PDBLENG)        MODEL PDDB.                          33402000
         DC    AL1(PDB1NULL)       FLAG BYTE                            33402500
         DC    AL1(0)              RECORD FORMAT                        33403000
         DC    H'0'                MAXIMUM LOGICAL RECORD LENGTH        33403500
         DC    F'0'                STARTING TRACK ADDRESS               33404000
         DC    H'0'                DATA SET KEY                         33404500
         DC    C'A'                DEFAULT SYSOUT CLASS                 33405000
         DC    AL1(1)              DEFAULT COPY COUNT                   33405500
         DC    X'8000'             DESTINATION                          33406000
         DC    AL1(0,0,0)          CPU ID, SECURITY, 3211 INDEX         33406500
         DC    AL1(JFCFNCBP)       3525 FUNCTION BYTE                   33407000
         DC    AL1(0)              FLAG BYTE 2                       R4 33407100
         DC    X'FF'               DEFAULT COMPACTION TABLE NUMBER  R41 33407200
         DC    F'0'                RECORD COUNT                         33408000
         DC    XL4'00'             FORMS NUMBER                         33408500
         DC    C'****'             FCB ID                               33409000
         DC    C'****'             UCS ID                               33409500
         DC    CL8' '              USER WRITER NAME                     33410000
         DC    XL8'00'             CHECKPOINT RBA                       33410500
         DC    CL4'****'           TRANSLATE TABLE 1                 R4 33410600
         DC    CL4'****'           TRANSLATE TABLE 2                 R4 33410700
         DC    CL4'****'           TRANSLATE TABLE 3                 R4 33410800
         DC    CL4'****'           TRANSLATE TABLE 4                 R4 33410900
         DC    CL4'****'           FLASH ID                          R4 33411000
         DC    CL4'****'           MODIFY ID                         R4 33411100
         DC    AL1(255)            FLASH COUNT                      R41 33411200
         DC    AL1(0)              TABLE REFERENCE CHARACTER         R4 33411300
         DC    AL1(0,0,0,0,0,0,0,0)     COPY GROUPS                  R4 33411400
         DC    F'0'                                                  R4 33411500
         EJECT                                                       R4 33411600
*                                                                       33411700
*              TEST SCATHOLD.  R10 POINTS TO SSAL.                      33412000
*                                                                       33412500
HALCLASS DS    0H                                                       33413000
         USING *,R15               SET LOCAL ADDRESSABILITY.            33413500
         L     R1,SJBJCT           POINT TO JOB'S HASP JCT.             33414000
         SLR   R2,R2               ZERO R2 FOR IC.                      33414500
         IC    R2,JCTMCLAS-JCTDSECT(,R1)  GET MESSAGE CLASS.            33415000
         LA    R1,$SVSCAT(R2)      POINT TO ITS SCAT ENTRY.             33415500
         USING SCADSECT,R1         SET SCAT ADDRESSABILITY.             33416000
         TM    SCATFLAG,SCATHOLD   SET CC=0 IF HOLD DISALLOWED.         33416500
         BALR  R0,0                SAVE CONDITION CODE.                 33417000
         L     R1,SSALCLAS         POINT TO DATA SET'S CLASS.           33417500
         CLI   0(R1),C'$'          IF CLASS IS $,                       33418000
         BE    HALCLAS1            USE JCTMCLAS.                        33418500
         CLI   0(R1),C' '          IF CLASS IS NULL                 R41 33418600
         BE    HALCLAS1            USE JCTMCLAS                     R41 33418700
         CLI   0(R1),C'*'          IF CLASS IS *,                       33419000
         BE    HALCLAS1            USE JCTMCLAS.                        33419500
         IC    R2,0(,R1)           ELSE USE GIVEN CLASS.                33420000
HALCLAS1 DS    0H                                                       33420500
         SPM   R0                  RESTORE CONDITION CODE.              33421000
         LA    R1,$SVSCAT(R2)      POINT TO PROPER SCAT ENTRY.          33421500
         BZR   R14                 RETURN IF HOLD DISALLOWED.           33422000
         TM    SCATFLAG,SCATHOLD   SET CC ACC. TO SCATHOLD.             33422500
         BR    R14                 RETURN CONDITION CODE.               33423000
         DROP  ,                   DROP ALL ADDRESSABILITY.             33423500
         TITLE 'LITERAL POOL FOR ALLOCATE'                           R4 33423600
         LTORG                                                       R4 33423700
         TITLE 'HASP SUBSYSTEM SUPPORT ROUTINE -- UNALLOCATE'           33424000
*                                                                       33424500
*                                                                       33425000
*              HASP SUBSYSTEM SUPPORT ROUTINE -- UNALLOCATE             33425500
*                                                                       33426000
*                                                                       33426500
         SPACE 1                                                        33427000
HOSUNAL  $PROLOG SSOBUNAL,SSALSIZE,LOCK=REQ                             33427500
         LR    RSIB,RSOX           TRANSFER SSAL ADDRESS TO RSIB.       33428000
         USING SSALBGN,RSIB        SET SSAL ADDRESSABILITY.             33428500
         L     RJFC,SSALJFCB       POINT TO THE JFCB.                   33429000
         USING INFMJFCB,RJFC       SET JFCB ADDRESSABILITY.             33429500
         L     RSDB,SSALSSCM       POINT TO THE SDB/DCT.                33430000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              33430500
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             33431000
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              33431500
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              33432000
         SPACE 3                                                        33432500
*                                                                       33436500
*              BRANCH ACCORDING TO DATA SET TYPE                        33437000
*                                                                       33437500
         SPACE 1                                                        33438000
         LH    R0,DSNDSTYP         LOAD DATA SET TYPE.                  33438500
         CH    R0,=C'SI'           IF SYSIN,                            33439000
         BE    HUAI                GO UNALLOCATE.                       33439500
         CH    R0,=C'SO'           IF SYSOUT,                           33440000
         BE    HUAO                GO UNALLOCATE.                       33440500
         CH    R0,=C'PS'           IF PROCESS-SYSOUT,                   33441000
         BE    HUAP                GO UNALLOCATE.                       33441500
         B     HUA800              ERROR - UNRECOGNIZABLE TYPE.         33442000
         EJECT                                                          33442500
*                                                                       33443000
*                                                                       33443500
*              SYSIN DATA SET UNALLOCATION                          R41 33444000
*                                                                       33444500
*                                                                       33445000
         SPACE 1                                                        33445500
HUAI     DS    0H                                                       33450000
         CALL  $SDBFREE            FREE THE SDB.                        33450500
         B     HUA950              RETURN WITHOUT CHECKPOINT.           33451000
         SPACE 1                                                    R41 33451100
*                                                                   R41 33451200
*                                                                   R41 33451300
*              PROCESS-SYSOUT DATA SET UNALLOCATION                 R41 33451400
*                                                                   R41 33451500
*                                                                   R41 33451600
         SPACE 1                                                    R41 33451700
         USING PDBDSECT,R4         PROVIDE PDDB ADDRESSABILITY      R41 33451800
         SPACE 1                                                    R41 33451900
HUAP     L     R4,SDBPDDB          GET PDDB ADDRESS                 R41 33452000
         TM    PDBFLAG1,PDB1HOLD   DATA SET ALREADY HELD...         R41 33452100
         BZ    HUAO50              BR IF NO (XWTR REQUEST)          R41 33452200
         NI    PDBFLAG1,255-PDB1HOLD  RESET HOLD BIT                R41 33452300
         B     HUAO20              BR TO UPDATE PDDB                R41 33452400
         EJECT                                                          33452500
*                                                                       33452600
*                                                                       33452700
*              SYSOUT DATA SET UNALLOCATION                             33453000
*                                                                       33453500
*                                                                       33454000
         SPACE 1                                                        33454500
HUAO     DS    0H                                                       33455000
         L     R1,SSALPGMN         POINT TO USER WRITER NAME.           33455500
         CLC   =CL8'INTRDR',0(R1)  IF IT'S INTERNAL READER,             33456000
         BE    HUAR                GO UNALLOCATE.                       33456500
         LTR   RSDB,RSDB           IF NO SDB,                           33457000
         BZ    HUA950              RETURN NORMALLY.                     33457500
         CLC   =CL4'SDB',SDBID     IF BAD CONTROL BLOCK ID,             33458000
         BNE   HUA800              ERROR - CAN'T UNALLOCATE.            33458500
         SLR   R15,R15             SET ZERO RETURN CODE             R41 33458600
         TM    SJBFLG1,SJB1XBWT    BIT IF XBM ENDING,                   33459000
         BO    HUA890              JUST FREE THE SDB                R41 33459500
         SPACE 1                                                        33460000
*                                                                       33460500
*              POINT TO PDDB AND ITS IOT                                33461000
*                                                                       33461500
         SPACE 1                                                        33462000
         L     R1,SJBIOT           IF THERE IS NO                       33462100
         LTR   R1,R1               PRIMARY ALLOCATION IOT,              33462200
         BZ    HUA800              ALLOCATION MAY FAIL.                 33462300
         MVI   SJBDBLWK+4,0        SET MULT DEST NULL FLAG          R41 33462400
         L     RIOT,SDBPIOT        POINT TO PDDB'S IOT.                 33462500
         L     R4,SDBPDDB          POINT TO PDDB.                       33463000
         SPACE 1                                                    R41 33463200
HUAO10   MVC   PDBRECCT,SDBRECCT   MOVE RECORD COUNT TO PDDB        R41 33463500
         NI    PDBFLAG1,255-PDB1NSOT-PDB1HOLD-PDB1SPIN-PDB1PSO      R41 33464000
         SPACE 1                                                    R41 33464100
HUAO20   L     R1,SSALDEST         GET DESTINATION ADDRESS          R41 33464200
         CLC   =CL8' ',0(R1)       TEST DESTINATION                 R41 33464300
         BE    HUAO25              BR IF NOT SPECIFIED              R41 33464400
         L     R2,SJBJCT           GET JCT ADDRESS                  R41 33464500
         IC    R2,JCTROUTE-JCTDSECT(,R2)  GET DEFAULT DEST          R41 33464600
         CALL  USERDEST            VALIDATE USER DESTINATION        R41 33464700
         B     HUAO25              BR IF INVALID DESTINATION +0     R41 33464800
         STH   R2,PDBDEST          SET NEW DESTINATION       +4     R41 33464900
         SPACE 1                                                    R41 33465000
HUAO25   L     R1,SSALCLAS         POINT TO OUTPUT CLASS            R41 33465100
         CLI   0(R1),C' '          CLASS SPECIFIED...               R41 33465200
         BNE   HUAO30              BR IF YES                        R41 33465300
         MVC   0(1,R1),PDBCLASS     ELSE USE CURRENT CLASS          R41 33465400
         EJECT                                                      R41 33465500
HUAO30   LR    RSDB,RSIB           RELOAD SSAL ADDRESS              R41 33465600
         CALL  HALCLASS            GET CLASS, HOLD STATUS           R41 33465700
         L     RSDB,SSALSSCM       RESTORE SDB ADDRESS              R41 33465800
         BZ    HUAO40              BR IF NON-HOLD CLASS             R41 33465900
         CLI   DSNDSTYP,C'P'       TEST FOR PSO REQUEST             R41 33466000
         BE    HUAO40              BR IF YES (IGNORE HOLD)          R41 33466100
         OI    PDBFLAG1,PDB1HOLD    ELSE SET HOLD FLAG              R41 33466200
         SPACE 1                                                    R41 33466300
HUAO40   STC   R2,PDBCLASS         SET SYSOUT CLASS                 R41 33466400
         TM    SSALFLG1,SSALHOLD   TEST FOR EXPLICIT HOLD           R41 33466500
         BZ    *+8                 BR IF NO                         R41 33466600
         OI    PDBFLAG1,PDB1HOLD    ELSE SET HOLD FLAG              R41 33466700
         TM    SCATFLAG-SCADSECT(R1),SCATDUMM  DUMMY CLASS...       R41 33466800
         BZ    *+8                 BR IF NO                         R41 33466900
         OI    PDBFLAG1,PDB1NSOT    ELSE SET NO-PRINT FLAG          R41 33467000
         TM    PDBFLAG1,PDB1DSID   TEST FOR DSID                    R41 33467100
         BO    HUAO45              BR IF YES (IGNORE WTR ID)        R41 33467200
         L     R1,SSALPGMN         GET WTR ID ADDRESS               R41 33467300
         CLI   0(R1),C' '          WTR ID SPECIFIED...              R41 33467400
         BE    HUAO45              BR IF NO                         R41 33467500
         MVC   PDBWTRID,0(R1)      MOVE WTR ID TO PDDB              R41 33467600
         SPACE 1                                                    R41 33467700
HUAO45   L     R1,SSALFORM         GET FORMS ID ADDRESS             R41 33467800
         CLI   0(R1),C' '          FORMS ID SPECIFIED...            R41 33467900
         BE    HUAO50              BR IF NO                         R41 33468000
         MVC   PDBFORMS,0(R1)      MOVE FORMS ID TO PDDB            R41 33468100
         SPACE 1                                                    R41 33468200
HUAO50   TM    SSALFLG1,SSALDELT   TEST FOR EXPLICIT DELETE         R41 33468300
         BZ    *+8                 BR IF NO                         R41 33468400
         OI    PDBFLAG1,PDB1NSOT    ELSE SET NO-PRINT FLAG          R41 33468500
         CLI   DSNDSTYP,C'P'       TEST FOR PSO REQUEST             R41 33468600
         BNE   HUAO60              BR IF NO (NORMAL UNALLOC)        R41 33468700
         CALL  $SDBFREE             ELSE FREE THE SDB               R41 33468800
         B     HUA950              RETURN WITHOUT CHECKPOINTING     R41 33468900
         EJECT                                                      R41 33469000
HUAO60   OI    IOTFLAG1,IOT1CKPT   FORCE IOT CHECKPOINT             R41 33469100
         NI    SJBDBLWK+4,PDB1NULL TEST MULT DEST NULL FLAG         R41 33469200
         BZ    *+8                 BR IF NON-NULL DATA SET          R41 33469300
         OI    PDBFLAG1,PDB1NULL    ELSE PROPAGATE NULL BIT         R41 33469400
         MVC   SJBDBLWK(4),IOTIOT  SAVE ADDRESS OF NEXT IOT         R41 33469500
         MVC   SJBDBLWK+4(1),PDBFLAG1  SAVE PDDB FLAG BYTE          R41 33469600
         L     R2,SJBJCT           GET JCT ADDRESS                  R41 33469700
         TM    JCTJOBFL-JCTDSECT(R2),JCTNOUPT  TEST FOR NO PRNT     R41 33469800
         BZ    *+8                 BR IF NO (PRINT ALLOWED)         R41 33469900
         OI    PDBFLAG1,PDB1NSOT    ELSE SET NO-PRINT FLAG          R41 33470000
         TM    PDBFLAG1,PDB1DSID   TEST FOR DSID                    R41 33470100
         BZ    *+8                 BR IF NO                         R41 33470200
         OI    PDBFLAG1,PDB1HOLD    ELSE SET HOLD FLAG              R41 33470300
         TM    SSALFLG1,SSALSPIN   TEST FOR SPIN REQUEST            R41 33470400
         BZ    HUAO63              BR IF NO                    @OZ29364 33470500
         SPACE 1                                               @OZ29364 33470505
*        UPDATE SMF INFORMATION BEFORE SPINNING                @OZ29364 33470510
         USING JCTDSECT,R2                                     @OZ29364 33470515
         L     R1,PSATOLD-PSA      FIND CURRENT TCB            @OZ29364 33470520
         ICM   R1,7,TCBTCTB-TCB(R1)    GET 24-BIT TCT ADDR.    @OZ29364 33470525
         BZ    HUAO62              BR IF NO SMF.               @OZ29364 33470530
         L     R1,TCTJMR-SMFTCT(,R1) GET JMR ADDRESS.          @OZ29364 33470535
         CLC   JCTUSEID,JCTUSEID-JCTJMR(R1) TEST USER SMF.     @OZ29364 33470540
         BNE   HUAO61              BR IF CHANGED.              @OZ29364 33470545
         CLC   JCTUCOM,JCTUCOM-JCTJMR(R1) TEST USER SMF COMM.  @OZ29364 33470550
         BE    HUAO62              BR IF ALL UNCHANGED         @OZ29364 33470555
HUAO61   MVC   JCTUSEID,JCTUSEID-JCTJMR(R1) XFER USER SMF      @OZ29364 33470560
         MVC   JCTUCOM,JCTUCOM-JCTJMR(R1) FROM JMR TO JCT.     @OZ29364 33470565
         OI    JCTFLAG1,JCT1CKPT   CAUSE JCT CHECKPOINT.       @OZ29364 33470570
HUAO62   OI    PDBFLAG1,PDB1SPIN   SET SPIN FLAG.              @OZ29364 33470600
HUAO63   DS    0H                  COMMON RETURN               @OZ29364 33470625
         DROP  R2                                              @OZ29364 33470650
         SPACE 1                                               @OZ29364 33470675
         TM    PDBFLAG1,PDB1HOLD+PDB1SPIN  TEST FOR HOLD/SPIN       R41 33470700
         BZ    *+8                 BR IF NO                         R41 33470800
         OI    PDBFLAG1,PDB1PSO     ELSE SET PSO FLAG               R41 33470900
         SPACE 1                                                        33490000
*                                                                       33490500
*              CHECK IF SPIN IOT PRESENT OR REQUIRED                    33491000
*                                                                       33491500
         SPACE 1                                                        33492000
         TM    IOTFLAG1,IOT1SPIN   IS IOT ALREADY SPIN-TYPE...          33492500
         BO    HUAO200             BRANCH IF SO.                        33493000
         TM    PDBFLAG1,PDB1PSO    SHOULD IOT BE SPIN-TYPE...           33493500
         BZ    HUAO280             BR IF NO (ALL FOR THIS PDDB)     R41 33494000
         EJECT                                                          33500000
*                                                                       33500500
*              CREATE A SPIN IOT FOR UNALLOCATE                         33501000
*                                                                       33501500
         SPACE 1                                                        33502000
HUAO100  DS    0H                                                       33502500
         CALL  HCBGM               GET STORAGE FOR IOT.                 33503000
         BNZ   HUA800              ERROR - STORAGE UNAVAILABLE.         33503500
         LR    RIOT,R1             SET IOT BASE REGISTER.               33504000
         L     R1,SJBIOT           POINT TO ALLOCATION IOT.             33504500
         LA    R1,IOTMSTAB-IOTDSECT(,R1)     PT TO THE MASTER TAB    R4 33504600
         CALL  $STRAK              ALLOCATE A TRACK FOR IOT.            33506500
         L     R15,SJBIOT          GET ALLOCATION IOT ADDRESS  @OZ17477 33506600
         OI    IOTFLAG1-IOTDSECT(R15),IOT1CKPT FORCE IOT CHKPT @OZ17477 33506700
         LR    RSOX,RSIB           POINT RSOX TO THE SSAL.              33507000
         CALL  HALCRIOT            FORMAT THE IOT.                      33507500
         OI    IOTFLAG1,IOT1SPIN   PUT ON CORRECT CHAIN        @OZ17491 33507650
         CALL  HALCHIOT            CHAIN IOT TO SJB, JCT.               33507800
         MVC   SJBSPIOT,IOTIOT     DECHAIN IT FROM SJB.                 33508000
         L     R15,$SVPDDB1            MOVE PDDB                     R4 33508300
         LA    RSDB,0(RIOT,R15)         TO NEW                       R4 33508500
         MVC   0(PDBLENG,RSDB),PDBDSECT  SPIN IOT                    R4 33508800
         L     RSDB,SSALSSCM       RESTORE RSDB.                        33509000
         OI    PDBFLAG1,PDB1NSOT   DELETE THE OLD PDDB.                 33509500
         LA    R0,PDBLENG(,R15)    GET OFFSET OF NEXT PDDB           R4 33511000
         ST    R0,IOTPDDBP         AND STORE POINTER IN IOT.            33511500
         SPACE 1                                                        33512000
*                                                                       33512500
*              WRITE THE IOT AND SPIN IT                                33513000
*                                                                       33513500
         SPACE 1                                                        33514000
         CALL  HIOTSPIN            SPIN/HOLD THE IOT.                   33515000
         L     RIOT,SDBPIOT        POINT BACK TO ORIGINAL            R4 33516000
         L     R4,SDBPDDB            IOT AND PDDB                    R4 33517000
         B     HUAO280             GO CHECK FOR MULTI-DEST           R4 33518000
         EJECT                                                          33521500
         CNOP  0,8                                                      33522000
HUAO200  BAL   R14,HALDCIOT        DE-CHAIN IOT FROM SPIN IOT CHAIN     33522500
*  SPIN/HOLD THE IOT IF DATASET SPUN/HELD/DELETE/NOPRINT       @OZ29594 33523000
         TM    PDBFLAG1,PDB1SPIN+PDB1HOLD+PDB1NSOT SPIN NOW?   @OZ29594 33523100
         BZ    HUAO210             BR IF NOT                         R4 33523500
         CALL  HIOTSPIN            SPIN/HOLD THE IOT                 R4 33523600
         TM    SJBDBLWK+4,PDB1MDES IF MULTIPLE DESTINATIONS,         R4 33523700
         BO    HUAO285             CONSIDER THE NEXT IOT,            R4 33523800
         B     HUAO300             ELSE FREE THE SDB                 R4 33523900
         SPACE 1                                                        33524000
*                                                                       33524500
*              SPIN/HOLD DATASET WAS NOT SPUN/HELD                      33525000
*                                                                       33525500
         SPACE 1                                                        33526000
HUAO210  L     R1,SJBIOT           GET ALLOCATION IOT ADDRESS        R4 33526500
         OI    IOTFLAG1-IOTDSECT(R1),IOT1CKPT  REQUEST IOT CHECKPOINT   33528000
         MVI   IOTFLAG1,0          RESET SPIN IOT FLAG                  33528500
         L     R0,$SVMAPL          GET LENGTH OF TRACK GROUP MAP     R4 33529000
         LA    R1,IOTTGMAP-IOTDSECT+TGMAP-TGMDSECT(,R1)  MERGE       R4 33529100
        $VFL   OC,(R1),IOTTGMAP+TGMAP-TGMDSECT,(R0)       MAPS       R4 33529200
         LA    R0,IOTTGMAP+TGMAP-TGMDSECT  CLEAR                     R4 33529300
         L     R1,$SVMAPL                   OLD                      R4 33529400
         SLR   R15,R15                       TRACK GROUP             R4 33529500
         MVCL  R0,R14                         MAP                    R4 33529600
         NI    IOTFLAG1,255-IOT1CKPT  RESET CHECKPOINT FLAG         R41 33529900
         OI    PDBFLAG1,PDB1NSOT   NULLIFY PDDB ON SPIN CHAIN  @OZ26752 33529950
         L     R0,IOTTRACK         RE-WRITE                             33530000
         LR    R1,RIOT              CLEANED-UP                          33530500
         CALL  HCBWR                 SPIN IOT                           33531000
         NI    PDBFLAG1,255-PDB1NSOT PRINT ON REGULAR CHAIN    @OZ26752 33531250
         LR    R2,RIOT             SAVE PDDB'S IOT ADDRESS              33531500
         L     R1,SJBIOT           PREPARE TO FIND LAST REGULAR IOT     33532000
         SPACE 1                                                        33532500
*                                                                       33533000
*              RETURN SPIN/HOLD DATASET TO FOLD                         33533500
*                                                                       33534000
         SPACE 1                                                        33534500
HUAO220  LR    RIOT,R1             RE-LOAD LAST VALID IOT ADDRESS       33535000
         L     R1,IOTIOT           GET ADDR OF NEXT OUTPUT IOT          33535500
         LTR   R1,R1               TEST FOR VALID IOT ADDRESS           33536000
         BNZ   HUAO220             BR IF SO                             33536500
         SPACE 1                                                        33537000
         L     R6,IOTPDDBP         GET OFFSET OF LAST PDDB IN IOT       33537500
         LA    R15,PDBLENG(,R6)    ROOM FOR                          R4 33538000
         CH    R15,IOTLENG         ANOTHER...                        R4 33538300
         BNH   HUAO240             BR IF SO                             33538500
         EJECT                                                          33539000
*                                                                       33539500
*              USE SPIN/HOLD IOT AS NEXT OUTPUT IOT                     33540000
*                                                                       33540500
         SPACE 1                                                        33541000
         L     R1,SJBIOT           GET ALLOCATION IOT ADDRESS           33541500
         LA    R1,IOTMSTAB-IOTDSECT(,R1)     GET NEW TRACK ADDRESS   R4 33541600
         CALL  $STRAK                      FOR NEW OUTPUT IOT           33542500
         L     R15,SJBIOT          GET ALLOCATION IOT ADDRESS  @OZ17477 33542600
         OI    IOTFLAG1-IOTDSECT(R15),IOT1CKPT FORCE IOT CHKPT @OZ17477 33542700
         ST    R1,IOTIOTTR         EXTEND OUTPUT IOT                    33543000
         ST    R2,IOTIOT            ON SPOOL AND IN STORAGE             33543500
         OI    IOTFLAG1,IOT1CKPT   REQUEST IOT CHECKPOINT               33544000
         LR    RIOT,R2             RESTORE EX-SPIN IOT ADDRESS          33544500
         ST    R1,IOTTRACK         STORE NEW TRACK ADDRESS              33545000
         SLR   R0,R0               CLEAR NEW                            33545500
         ST    R0,IOTIOTTR          OUTPUT IOT                          33546000
         ST    R0,IOTIOT             CHAIN ADDRESSES                    33546500
         OI    IOTFLAG1,IOT1CKPT   REQUEST IOT CHECKPOINT      @OZ26752 33546750
         B     HUAO280             END FOR THIS PDDB.                   33547000
         SPACE 1                                                        33547500
*                                                                       33548000
*              MOVE PDDB TO END OF LAST OUTPUT IOT                      33548500
*                                                                       33549000
         SPACE 1                                                        33549500
         CNOP  0,8                                                      33550000
HUAO240  LA    R1,0(R6,RIOT)       MOVE PDDB TO END                     33550500
         MVC   0(PDBLENG,R1),PDBDSECT  OF LAST OUTPUT IOT               33551000
         LR    R1,R2               FREE THE                             33551500
         CALL  HCBFM                SPIN IOT BUFFER                     33552000
         LA    R6,PDBLENG(,R6)     UPDATE OFFSET TO                     33552500
         ST    R6,IOTPDDBP          NEXT PDDB IN IOT                    33553000
         OI    IOTFLAG1,IOT1CKPT   CAUSE NORMAL IOT CHECKPOINT.         33553500
         B     HUAO285             END FOR THIS PDDB.                   33553600
         EJECT                                                          33553700
*                                                                       33553800
*                                                                       33553900
*              SELECT NEXT PDDB IF MULTIPLE DESTINATION                 33554000
*                                                                       33554100
*                                                                       33554200
HUAO280  DS    0H                                                       33554300
         TM    SJBDBLWK+4,PDB1MDES DID OLD PDDB SAY MDES...             33554400
         BZ    HUAO300             IF NOT, END UNALLOCATION.            33554500
         L     R1,IOTPDDBP         POINT TO LIMIT OF PDDBS              33554600
         ALR   R1,RIOT             IN THIS IOT.                         33554700
         LA    R4,PDBLENG(,R4)     POINT PAST OLD PDDB.                 33554800
         CLR   R1,R4               IF THERE'S ANOTHER PDDB              33554900
         BH    HUAO290             IN THIS IOT, BRANCH.                 33555000
HUAO285  DS    0H                                                       33555100
         L     RIOT,SJBDBLWK       POINT TO THE NEXT IOT.               33555200
         LTR   RIOT,RIOT           IF NO MORE IOTS,                     33555300
         BZ    HUAO300             END UNALLOCATION.                    33555400
         ST    RIOT,SDBPIOT        SET SDBPIOT TO NEW IOT.              33555500
         L     R4,$SVPDDB1         POINT TO FIRST                    R4 33555600
         ALR   R4,RIOT              PDDB IN IT                       R4 33555700
HUAO290  DS    0H                                                       33555800
         ST    R4,SDBPDDB          SET SDBPDDB TO NEW PDDB.             33555900
         CLC   PDBDSKEY,SDBDKEY    IF DATA SET KEY MATCHES,             33556000
         BE    HUAO10               BR TO UNALLOCATE IT TOO         R41 33556100
*                                                                       33556200
*                                                                       33556300
*              FREE THE SUBSYSTEM DATASET BLOCK AND EXIT                33556400
*                                                                       33556500
*                                                                       33556600
HUAO300  DS    0H                                                       33556700
         CALL  $SDBFREE            FREE THE SDB.                        33556800
         B     HUA900              EXIT NORMALLY.                       33556900
         EJECT                                                          33558500
*                                                                       33559000
*              INTERNAL READER UNALLOCATION                             33559500
*                                                                       33560000
HUAR     DS    0H                                                       33560500
         USING DCTDSECT,RSDB       USE DCT DSECT.                       33561000
         CLI   DCTDEVTP,DCTINR     DOES SSALSSCM POINT TO INT RDR...    33561500
         BE    HUAR10              IF SO, CONTINUE.                     33562000
         LA    R15,SSALWTFL        IF NOT, CAN'T ALLOCATE.              33562500
          $EPILOG ,                RETURN FAILURE CODE.                 33563000
         SPACE 1                                                        33563500
*                                                                       33564000
*              ACQUIRE CMS LOCK                                         33564500
*                                                                       33565000
HUAR10   DS    0H                                                       33565500
         LR    R2,R13              SAVE REGISTERS                       33566000
         STM   R11,R13,12(R2)      11 THROUGH 13.                       33566500
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=HUAR30          C33567000
                                   ACQUIRE LOCAL LOCK.                  33567500
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=HUAR30            C33568000
                                   ACQUIRE CMS LOCK.                    33568500
         LM    R11,R13,12(R2)      RESTORE REGISTERS 11 THROUGH 13.     33569000
*                                                                       33569500
*              UNALLOCATE INTERNAL READER                               33570000
*                                                                       33570500
         SLR   R0,R0               ZERO OUT INTERNAL READER'S           33571000
         ST    R0,RIDASCBP         ASCB POINTER AND                     33571500
         ST    R0,RIDUBF           UNPROTECTED-BUFFER POINTER.          33572000
         NI    RIDFLAGS,255-RIDALLOC  SHOW INTERNAL READER NOT ALLOC.   33572500
*                                                                       33573000
*              POST EVERYBODY WAITING ON INTERNAL READER ALLOCATION.    33573500
*                                                                       33574000
         SLR   R0,R0               ZERO R0 FOR ZEROING.                 33574500
         L     R6,$SVIRWT          POINT TO FIRST WAIT ELEMENT          33575000
         CS    R6,R0,$SVIRWT       AND MAKE THE                         33575500
         BNE   *-4                 CHAIN HEADER ZERO.                   33576000
HUAR20   DS    0H                                                       33576500
         LTR   R6,R6               IS THERE A WAIT ELEMENT...           33577000
         BZ    HUAR30              IF NOT, DONE POSTING.                33577500
         L     R5,12(,R6)          POINT TO THE ASCB.                   33578000
         USING ASCB,R5             SET ASCB ADDRESSABILITY.             33578500
         TM    ASCBFLG1,ASCBTERM+ASCBABNT  IF MEMORY ENDING,            33579000
         BNZ   HUAR25              GO FREE ELEMENT.                     33579500
         DROP  R5                  DROP ASCB BASE.                      33580000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      33580500
         LR    R9,R13              ONLY 9, 14 GOOD AFTER CALL.          33581000
         L     R15,CVTPTR          POINT TO CVT.                        33581500
         L     R15,CVT0PT01-CVT(,R15)  POINT THENCE TO IEA0PT01.        33582000
         SLR   R10,R10             SHOW ZERO COMPLETION CODE.           33582500
         L     R11,8(,R6)          POINT R11 TO ECB.                    33583000
         O     R11,=X'80000000'    SHOW CROSS-MEMORY POST.              33583500
         L     R12,16(,R6)         POINT R12 TO ERRET.                  33584000
         L     R13,12(,R6)         POINT R13 TO ASCB.                   33584500
         BALR  R14,R15             GO POST.                             33585000
         LR    R13,R9              RESTORE R13 FROM R9.                 33585500
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   33586000
         L     R6,0(,R6)           POINT TO NEXT ELEMENT.               33586500
         B     HUAR20              GO CHECK IT.                         33587000
HUAR25   DS    0H                                                       33587500
         LR    R1,R6               INSTEAD OF POST, FREE ELEMENT        33588000
         L     R6,0(,R6)           AFTER POINTING TO NEXT ONE.          33588500
         $FREMAIN RC,A=(R1),LV=32,SP=231,KEY=1  FREE WAIT ELEMENT.      33589000
         B     HUAR20              THEN CHECK NEXT ELEMENT.             33589500
*                                                                       33590000
*              RELEASE CMS LOCK                                         33590500
*                                                                       33591000
HUAR30   DS    0H                                                       33591500
         LR    R2,R13              SAVE REGISTERS                       33592000
         STM   R11,R13,12(R2)      11 THROUGH 13.                       33592500
         SETLOCK RELEASE,TYPE=CMS,RELATED=HUAR10                       C33593000
                                   RELEASE CMS LOCK.                    33593500
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=HUAR10                     C33594000
                                   RELEASE LOCAL LOCK.                  33594500
         LM    R11,R13,12(R2)      RESTORE REGISTERS 11 THROUGH 13.     33595000
*                                                                       33595500
*              RETURN TO CALLER.                                        33596000
         LA    R15,SSALRTOK        SET NORMAL RETURN CODE.              33596500
         $EPILOG KEY=0             RETURN TO CALLER.                    33597000
         EJECT                                                          33597500
*                                                                       33598000
*                                                                       33598500
*              FAILURE IN UNALLOCATION                                  33599000
*                                                                       33599500
*                                                                       33600000
         SPACE 1                                                        33600500
HUA800   DS    0H                                                       33601000
         LA    R15,SSALWTFL        SET UNABLE-TO-ALLOCATE.              33601500
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY           R41 33601600
         CLC   =CL4'SDB',SDBID     TEST SDB ID                      R41 33601700
         BE    HUA890              BR IF OK                         R41 33602000
        $EPILOG ,                   ELSE RETURN                     R41 33602200
HUA820   DS    0H                                                       33602500
         LA    R15,SSALIDST        SET INVALID DESTINATION.             33603000
         SPACE 3                                                        33603500
HUA890   DS    0H                                                       33604000
         LR    R2,R15              SAVE RETURN CODE.                    33604500
         CALL  $SDBFREE            FREE THE SDB.                        33605000
         LR    R15,R2              RESTORE RETURN CODE.                 33605500
         $EPILOG ,                 RETURN.                              33606000
         SPACE 3                                                        33606500
*                                                                       33607000
*                                                                       33607500
*              NORMAL EXIT FROM UNALLOCATION                            33608000
*                                                                       33608500
*                                                                       33609000
         SPACE 1                                                        33609500
HUA900   DS    0H                                                       33610000
         CALL  HCBCK               CHECKPOINT MARKED BLOCKS.            33610500
         SPACE 1                                                        33611000
HUA950   DS    0H                                                       33611500
         SLR   R15,R15             SHOW NORMAL EXIT.                    33612000
         $EPILOG ,                 RETURN.                              33612500
         TITLE 'HALDCIOT -- SUBROUTINE TO DECHAIN IOT'                  33613000
*                                                                       33613500
*                                                                       33614000
*              HALDCIOT -- DECHAIN OUTPUT OR SPIN IOT                   33614500
*                                                                       33615000
*                                                                       33615500
* OUTPUT IOT - IOT IS DECHAINED FROM SJBIOT AND JCTIOT                  33616000
* SPIN IOT - IOT IS DECHAINED FROM SJBSPIOT AND JCTSPIOT                33616500
* THIS SUBROUTINE OPERATES UNDER HOSUNAL ADDRESSABILITY.                33617000
         SPACE 1                                                        33617500
HALDCIOT DS    0H                                                       33618000
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              33618500
         TM    IOTFLAG1,IOT1SPIN   IS THIS A SPIN IOT...                33619000
         BZR   R14                 IGNORE NON-SPIN IOT NOW.             33619500
         SPACE 3                                                        33620000
*                                                                       33620500
*              DE-CHAIN SPIN IOT FROM SJBSPIOT ONLY                  R4 33620600
*                                                                       33621500
         SPACE 1                                                        33622000
         LA    R1,SJBSPIOT         POINT TO SPIN IOT HEADER.            33622500
         SL    R1,=A(IOTIOT-IOTDSECT)  SET UP TO CHAIN.                 33623000
HALDCI10 DS    0H                                                       33623500
         LR    R2,R1               SAVE PREVIOUS IOT POINTER.           33624000
         L     R1,IOTIOT-IOTDSECT(,R1)  POINT TO NEXT IOT.              33624500
         LTR   R1,R1               IF NO MORE IOTS,                     33625000
         BZR   R14                 RETURN.                              33625500
         CLR   RIOT,R1             IF THIS IS NOT THE                   33626000
         BNE   HALDCI10            ARGUMENT IOT, KEEP GOING.            33626500
         MVC   IOTIOT-IOTDSECT(,R2),IOTIOT  DECHAIN ARGUMENT IOT.       33627000
         BR    R14                 RETURN.                              33627500
         DROP  ,                   DROP ALL ADDRESSABILITY.             33628000
         TITLE 'LITERAL POOL FOR UNALLOCATE'                         R4 33628100
         LTORG                                                          33629000
         TITLE 'HJEAHOLD - HOLD SPECIAL DATA SETS IF HELD MSGCLASS'     33629500
*                                                                       33630000
*        ROUTINE NAME - HJEAHOLD                                        33630500
*                                                                       33631000
*        PURPOSE - TO PUT INTO HOLD STATUS A JOB'S FOUR FAKE-OPENED     33631500
*              DATASETS AND/OR XBM JOB'S SYSOUT DATASETS -              33632000
*                    JCL DATASET (NORMALLY NOT SYSOUT)                  33632500
*                    JES2 JOB LOG                                       33633000
*                    JCL IMAGES (NOT SYSOUT IF XBM)                     33633500
*                    SYSTEM MESSAGES                                    33634000
*                    EXECUTION BATCH MONITOR JOB'S SYSOUT DATASETS.     33634500
*                                                                       33635000
*        FUNCTION - IF AN ATTRIBUTE OF THE JOB'S MESSAGE CLASS IS       33635500
*              'HOLD', THIS ROUTINE CALLS HJH100 ONCE FOR EACH OF THE   33636000
*              JOB'S FOUR FAKE-OPENED DATASETS.  THEN, FOR XBM JOBS,    33636500
*              IT CALLS HJH100 ONCE FOR EACH SYSOUT DATASET WHICH       33637000
*              SHOULD BE HELD BY REASON OF CLASS OR ALLOCATION          33637500
*              DIRECTIVE.                                               33638000
*                                                                       33638500
*        OPERATION -                                                    33639000
*              1.  IF NO MAIN OUTPUT ALLOCATION IOT EXISTS, RETURN.     33639500
*              2.  THE SYSOUT CLASS ATTRIBUTE TABLE IS INDEXED BY       33640000
*                  THE BYTE AT JCTMCLAS.  THE ATTRIBUTE 'HOLD' IS       33640500
*                  TESTED.  IF NOT 'HOLD' THE NEXT 4 STEPS ARE SKIPPED. 33641000
*              3.  HJH100 IS CALLED FOR JCL DATA SET.                   33641500
*              4.  HJH100 IS CALLED FOR JES2 JOB LOG.                   33642000
*              5.  HJH100 IS CALLED FOR JCL IMAGES.                     33642500
*              6.  HJH100 IS CALLED FOR SYSTEM MESSAGES.                33643000
*              7.  IF NOT AN XBM JOB, RETURN.                           33643500
*              8.  FOR EACH XBM SYSOUT DATASET -                        33644000
*                  A.  IF PDB1HOLD, CALL HJH100. ELSE -                 33644500
*                  B.  IF JCTMCLAS AND PDBCLASS HAVE 'HOLD' ATTRIBUTE,  33645000
*                      CALL HJH100.                                     33645500
*                                                                       33646000
*        REGISTERS AT ENTRY -                                           33646500
*              R7  = HASP JCT                                           33647000
*              R11 = SUBSYSTEM VECTOR TABLE                             33647500
*              R13 = SUBSYSTEM JOB BLOCK                                33648000
*              R14 = RETURN ADDRESS                                     33648500
*              R15 = ADDRESS OF HJEAHOLD                                33649000
*                                                                       33649500
*        REGISTER USAGE IN ADDITION TO ABOVE-                           33650000
*              R1  = SCAT ENTRY                                         33650500
*              R2  = LOCAL BASE, SET FROM R15                           33651000
*              R3  = IOT CONTAINING PDDB BEING PROCESSED.               33651500
*              R4  = PDDB CURRENTLY TO BE PROCESSED                     33652000
*              R6  = LINK REGISTER                                      33652500
*              R7  = HASP JCT                                           33653000
*              R8  = RETURN REGISTER, SET FROM R14                      33653500
*              R11 = SUBSYSTEM VECTOR TABLE                             33654000
*              R13 = SUBSYSTEM JOB BLOCK                                33654500
*              R14 = RETURN REGISTER, USED TO SET R8                    33655000
*              R15 = ENTRY REGISTER, USED TO SET R2                     33655500
*                                                                       33656000
*        REGISTER DIFFERENCES AT EXIT -                                 33656500
*              R0-R6, R8, R10, R14-R15 DESTROYED                        33657000
*                                                                       33657500
*        EXITS - NULL AND NORMAL -                                      33658000
*              ON R8                                                    33658500
*                                                                       33659000
         SPACE 1                                                        33659500
HJEAHOLD DS    0H                                                       33660000
         USING *,R2                SET LOCAL ADDRESSABILITY.            33660500
         LR    R2,R15              SET LOCAL BASE.                      33661000
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              33661500
         L     R3,SJBIOT           POINT TO ALLOCATION IOT.             33662000
         LTR   R3,R3               IF IT DOESN'T EXIST,                 33662500
         BZR   R14                 NULL RETURN.                         33663000
         LR    R8,R14              SAVE RETURN IN R8.                   33663500
         USING JCTDSECT,R7         SET JCT ADDRESSABILITY.              33664000
         SLR   R6,R6               ZERO R6 FOR IC.                      33664500
         IC    R6,JCTMCLAS         GET MSGCLASS FROM JCT.               33665000
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             33665500
         LA    R1,$SVSCAT(R6)      POINT TO SCAT ENTRY FOR              33666000
         USING SCADSECT,R1         MSGCLASS, SET ADDRESSABILITY.        33666500
         TM    SCATFLAG,SCATHOLD   IF MSGCLASS NOT TO BE HELD,          33667000
         BZ    HJEAH20             BR TO TEST FOR OTHERS.               33667500
         USING IOTDSECT,R3         SET ALLOCATION IOT ADDR.             33668000
         L     R4,$SVPDDB1         POINT TO PDDB                     R4 33668500
         LA    R4,IOTPDBOJ(R3,R4)   FOR JCL DATA SET                 R4 33668800
         BAL   R6,HJH100           CALL HJH100.                         33669000
         L     R4,$SVPDDB1         POINT TO PDDB                     R4 33669500
         LA    R4,IOTPDBOL(R3,R4)   FOR JES2 JOB LOG                 R4 33669800
         BAL   R6,HJH100           CALL HJH100.                         33670000
         L     R4,$SVPDDB1         POINT TO PDDB                     R4 33670500
         LA    R4,IOTPDBOI(R3,R4)   FOR JCL IMAGES                   R4 33670800
         BAL   R6,HJH100           CALL HJH100.                         33671000
         L     R4,$SVPDDB1         POINT TO PDDB                     R4 33671500
         LA    R4,IOTPDBOM(R3,R4)   FOR SYSTEM MESSAGES              R4 33671800
         BAL   R6,HJH100           CALL HJH100.                         33672000
         SPACE 1                                                        33672500
HJEAH20  TM    SJBFLG1,SJB1XBM     IF NOT XBM JOB,                      33673000
         BZR   R8                   RETURN.                             33673500
         L     R4,$SVPDDB1                PREPARE TO HOLD            R4 33674000
         LA    R4,IOTPDBOD-PDBLENG(R3,R4)  SYSOUT DATA SETS          R4 33674300
         SPACE 1                                                        33674500
HJEAH40  LA    R4,PDBLENG(,R4)     POINT TO NEXT PDDB (IF ANY).         33675000
         L     R1,IOTPDDBP         IF NOT END                           33675500
         LA    R1,IOTDSECT(R1)      OF PDDBS IN                         33676000
         CLR   R4,R1                 CURRENT IOT,                       33676500
         BL    HJEAH60                GO TO TEST HOLD REQUIREMENT.      33677000
         ICM   R3,15,IOTIOT        IF NO MORE IOT(S),                   33677500
         BZR   R8                   RETURN.                             33678000
         L     R4,$SVPDDB1         ELSE                              R4 33678300
         ALR   R4,R3               PREPARE                           R4 33678400
         SL    R4,=A(PDBLENG)      TO SCAN                           R4 33678800
         B     HJEAH40              NEXT IOT.                           33679000
         SPACE 1                                                        33679500
         USING PDBDSECT,R4         SET PDDB ADDRESSABILITY.             33680000
HJEAH60  TM    PDBFLAG1,PDB1HOLD   IF 'HOLD=YES' SPECIFIED,             33680500
         BO    HJEAH80              GO TO HOLD THE DATASET.             33681000
         SLR   R6,R6               IF MSGCLASS                          33681500
         IC    R6,JCTMCLAS          OF JOB NOT                          33682000
         LA    R1,$SVSCAT(R6)        A 'HOLD'                           33682500
         TM    SCATFLAG,SCATHOLD      CLASS,                            33683000
         BZ    HJEAH40                 TEST NEXT PDDB.                  33683500
         IC    R6,PDBCLASS         IF SYSOUT                            33684000
         LA    R1,$SVSCAT(R6)       CLASS NOT A                         33684500
         TM    SCATFLAG,SCATHOLD     'HOLD' CLASS,                      33685000
         BZ    HJEAH40                TEST NEXT PDDB.                   33685500
         SPACE 1                                                        33686000
HJEAH80  BAL   R6,HJH100           CALL HJH100 TO HOLD THE DATASET.     33686500
         B     HJEAH40             THEN TEST NEXT PDDB.                 33687000
         EJECT                                                          33687500
*                                                                       33688000
*        ROUTINE NAME - HJH100                                          33688500
*                                                                       33689000
*        PURPOSE - TO PUT INTO HOLD STATUS A SUBSYSTEM DATA SET.        33689500
*                                                                       33690000
*        FUNCTION - A NEW IOT IS CREATED AND THE DATA SET'S PDDB        33690500
*              IS MOVED INTO IT.  THE OLD PDDB IS NULLIFIED.            33691000
*              THE IOT IS CHAINED ON THE SPIN QUEUE FOR FURTHER         33691500
*              PROCESSING BY HASPXEQ.                                   33692000
*                                                                       33692500
*        OPERATION -                                                    33693000
*              1.  IF DATASET NULL OR NOT SYSOUT, RETURN.               33693500
*              2.  IF NO STORAGE FOR NEW IOT, ERROR RETURN.             33694000
*              3.  INITIALIZE THE NEW IOT.                              33694500
*              4.  COPY THE PDDB TO THE NEW IOT.                        33695000
*              5.  NULLIFY THE OLD PDDB.                                33695500
*              6.  TRACK-ADDRESS-CHAIN THE IOT LIFO TO JCTSPIOT.        33696000
*              7.  WRITE THE IOT TO ITS ASSIGNED TRACK.                 33696500
*              8.  MAIN-STORAGE-CHAIN THE IOT LIFO TO $SVSPIOT.         33697000
*              9.  NOTIFY HASPXEQ THAT AN ADDITION HAS BEEN MADE TO     33697500
*                  $SVSPIOT AND RETURN NORMALLY.                        33698000
*                                                                       33698500
*        REGISTERS AT ENTRY -                                           33699000
*              R2  = LOCAL BASE, FROM ROUTINE HJEAHOLD                  33699500
*              R4  = PDDB TO BE PROCESSED                               33700000
*              R6  = RETURN ADDRESS                                     33700500
*              R7  = HASP JCT                                           33701000
*              R11 = SUBSYSTEM VECTOR TABLE                             33701500
*              R13 = SUBSYSTEM JOB BLOCK                                33702000
*                                                                       33702500
*        REGISTER USAGE IN ADDITION TO ABOVE -                          33703000
*              R0  = WORK, SUBROUTINE ARGUMENT                          33703500
*              R1  = SUBROUTINE ARGUMENT                                33704000
*              R5  = NEW IOT                                            33704500
*              R14 = SUBROUTINE RETURN                                  33705000
*              R15 = SUBROUTINE ENTRY                                   33705500
*                                                                       33706000
*        REGISTER DIFFERENCE AT EXIT -                                  33706500
*              R5  = 0                                                  33707000
*              R0, R1, R10, R14, R15 DESTROYED                          33707500
*                                                                       33708000
*        EXIT - NORMAL                                                  33708500
*              ON R6 WITH R5 POINTING TO NEW IOT                        33709000
*                                                                       33709500
*        EXIT - ERROR                                                   33710000
*              ON R6 WITH MESSAGE HASP376 WRITTEN AND NEW IOT           33710500
*                  STORAGE FREED                                        33711000
*                                                                       33711500
*        EXIT - NULL                                                    33712000
*              ON R6 WITH NO ACTION TAKEN                               33712500
*                                                                       33713000
         EJECT                                                          33713500
HJH100   DS    0H                                                       33714000
         TM    PDBFLAG1,PDB1NULL+PDB1NSOT  IF DATA SET IS NULL OR       33714500
         BNZR  R6                  NOT FOR SYSOUT, NULL RETURN.         33715000
         SLR   RIOT,RIOT           SHOW NO NOW IOT.                     33715500
         CALL  HCBGM               GET MAIN STORAGE FOR IOT.            33716000
         BNZ   HJH800              ERROR RETURN - NO STORAGE.           33716500
         LR    RIOT,R1             SHOW NEW IOT ADDRESS.                33717000
         L     R1,SJBIOT           POINT TO ALLOCATION IOT.             33717500
         LA    R1,IOTMSTAB-IOTDSECT(,R1)     PT TO MASTER TAB        R4 33717600
         CALL  $STRAK              GET A TRACK FOR NEW IOT.             33718500
         L     R15,SJBIOT          GET ALLOCATION IOT ADDRESS  @OZ17477 33718600
         OI    IOTFLAG1-IOTDSECT(R15),IOT1CKPT FORCE IOT CHKPT @OZ17477 33718700
         LA    R10,HJHCON          POINT R10 TO FAKE SSAL.              33719000
         CALL  HALCRIOT            FORMAT THE NEW IOT.                  33719500
         USING IOTDSECT,RIOT       SET NEW IOT ADDRESSABILITY.          33720000
         L     R15,$SVPDDB1           MOVE PDDB                      R4 33720300
         LA    R14,0(R15,RIOT)         TO                            R4 33720500
         MVC   0(PDBLENG,R14),PDBDSECT  NEW IOT                      R4 33720800
         NI    PDBFLAG1-PDBDSECT(R14),PDB1LOG  CLEAR ALL BUT LOG BIT R4 33721000
         OI    PDBFLAG1-PDBDSECT(R14),PDB1HOLD+PDB1PSO               R4 33721500
         OI    PDBFLAG1,PDB1NSOT   NULLIFY OLD PDDB.                    33722000
         LA    R0,PDBLENG(,R15)    SET PDDB LIMIT                    R4 33722500
         ST    R0,IOTPDDBP         OFFSET IN NEW IOT.                   33723000
         MVC   IOTIOTTR,JCTSPIOT   TRACK-ADDRESS CHAIN                  33724000
         L     R0,IOTTRACK         NEW IOT ONTO                         33724500
         ST    R0,JCTSPIOT         JCT'S SPIN CHAIN LIFO.               33725000
         OI    JCTFLAG1,JCT1CKPT   FLAG JCT FOR CHECKPOINT.             33725500
         CALL  HIOTSPIN            SPIN/HOLD THE IOT.                   33726000
         BR    R6                  NORMAL RETURN.                       33730500
         DROP  R3,R4,R5            DROP BASES.                          33731000
HJHCON   EQU   *-(SSALFLG1-SSALBGN)  FAKE SSAL FOR SSALHOLD FLAG.       33731500
         DC    AL1(SSALHOLD)       FLAG SSALHOLD IN BYTE SSALFLG1.      33732000
         SPACE 2                                                        33732500
         $MID  376                 SET HASP MESSAGE ID.                 33733000
HJH800   WTO   '&MID.- UNABLE TO PROCESS SUBSYSTEM DATA SET FOR HOLD', C33733500
               ROUTCDE=11,DESC=6                                        33734000
         LR    R1,RIOT             POINT R1 TO IOT OR ZERO.             33734500
         CALL  HCBFM               FREE NEW IOT STORAGE.                33735000
         BR    R6                  ERROR RETURN.                        33735500
         DROP  ,                   DROP ALL ADDRESSABILITY.             33736000
         SPACE 4                                                     R4 33736100
         LTORG                                                       R4 33736200
         TITLE 'HIOTSPIN - SPIN THE ARGUMENT IOT'                       33736300
*                                                                       33736400
*        ROUTINE NAME - HIOTSPIN                                        33736500
*                                                                       33736600
*        PURPOSE - TO PASS A SPIN/HOLD IOT TO HASPXEQ ON CHAIN          33736700
*              $SVSPIOT TO BE SPUN OR HELD                              33736800
*                                                                       33736900
HIOTSPIN DS    0H                                                       33737000
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             33737100
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              33737200
         L     R15,SJBJCT          POINT TO THE JCT AND SET             33737300
         USING JCTDSECT,R15        TEMPORARY ADDRESSABILITY.            33737400
         STM   R14,R12,JCTWORK+12  SAVE REGS IN JCTWORK.                33737500
         DROP  R15                 KILL TEMP. JCT ADDRESSABILITY     R4 33737600
         USING JCTDSECT,R7         SET NORMAL JCT ADDRESSABILITY     R4 33737700
         BALR  R12,0               ESTABLISH                            33737800
         USING *,R12               LOCAL ADDRESSABILITY.                33737900
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              33738000
         LH    R1,$SVBFSIZ              GET SPIN IOT                 R4 33738100
         LA    R0,IOTSTART-IOTDSECT(,R1) BUFFER STORAGE              R4 33738200
        $GETMAIN RC,LV=(R0),SP=231,KEY=1  IN CSA                     R4 33738300
         L     R7,SJBJCT           RESTORE JCT ADDRESS               R4 33738400
         BZ    HIS010              BR IF STORAGE OBTAINED            R4 33738500
        $MID   358                 SET MESSAGE NUMBER                R4 33738600
         WTO   '&MID.HIOTSPIN - NO STORAGE AVAILABLE IN SP 231',     R4C33738700
               ROUTCDE=10,DESC=6                                     R4 33738800
         B     HIS900              THEN EXIT                         R4 33738900
HIS010   LR    R8,R1               RELOAD IOT ADDRESS                R4 33739000
*                                                                       33739600
*              FOR HOLD DATA SETS, PERFORM HQT PROCESSING               33739700
*                                                                       33739800
         L     R3,$SVPDDB1         POINT TO                          R4 33739900
         ALR   R3,RIOT              SPIN DATA SET PDDB               R4 33740000
         USING PDBDSECT,R3         PROVIDE PDDB ADDRESSABILITY       R4 33740100
         TM    PDBFLAG1,PDB1NULL+PDB1NSOT  DATA SET PRINTABLE...    R41 33740200
         BZ    *+8                 BR IF YES                        R41 33740300
         NI    PDBFLAG1,255-PDB1HOLD  DON'T BOTHER HOLDING          R41 33740400
         TM    PDBFLAG1,PDB1HOLD   SHOULD DATA SET BE HELD...        R4 33740500
         BZ    HIS060              FLAG IS OFF, SKIP AROUND.            33740600
         DROP  R3                  KILL PDDB ADDRESSABILITY          R4 33742500
SKIP280  SLR   R1,R1               ZERO R1 - WILL BECOME IOTHQT.        33742600
         LH    R3,JCTHQRCT         GET CT OF HQRS BEFORE THIS.          33742700
         LTR   R4,R3               TEST AND SAVE FOR LATER.             33742800
         LA    R6,1(,R3)           INCREMENT HQR COUNT.                 33742900
         BZ    HIS020              BRANCH IF THIS IS 1ST HQR.           33743000
         SLR   R2,R2               ZERO HIGH DIVIDEND.                  33743100
         D     R2,$SVHQRCT         DIVIDE HQR CT BY HQRS/HQT         R4 33743200
         LTR   R2,R2               IF REMAINDER IS ZERO,                33743300
         BNZ   HIS040              WE NEED A NEW HQT TRACK.             33743400
         B     HIS030              GET NEW HQT TRACK                 R4 33743500
* NEW HQT NEEDED - GET A TRACK FOR IT                                   33743600
HIS020   DS    0H                                                       33743700
         L     R1,JCTHQT           IF TRACK ADDRESS                     33743800
         LTR   R1,R1                IN JCTHQT,                          33743900
         BNZ   HIS040                BR TO USE FOR 1ST HQT.             33744000
HIS030   L     R1,SJBIOT           POINT TO MAIN ALLOCATION IOT      R4 33744100
         LA    R1,IOTMSTAB-IOTDSECT(,R1)     SET ARG TO $STRAK       R4 33744200
         CALL  $STRAK              GET A TRACK FOR NEW HQT.             33744300
* SET HQT INFORMATION IN THE IOT                                        33744400
HIS040   DS    0H                                                       33744500
         ST    R1,IOTHQT           STORE HQT TRACK IN IOT.              33744600
         MVC   IOTHQT1,JCTHQT      LIKEWISE FIRST HQT TRACK.            33744700
         STH   R6,JCTHQRCT         UPDATE COUNT OF HQRS.                33744800
* IF FIRST HQT TRACK, WRITE THE JCT AT BOTH THE JCT TRACK               33744900
* AND THE HQT TRACK, IF NECESSARY                                       33745000
         LTR   R4,R4               IF NOT THE FIRST HQT,                33745100
         BNZ   HIS060              SKIP THIS SECTION.                   33745200
         L     R0,JCTHQT           IF TRACK ADDRESS                     33745300
         LTR   R0,R0                IN JCTHQT,                          33745400
         BNZ   HIS060                SKIP THIS SECTION.                 33745500
         ST    R1,JCTHQT           POINT JCT TO FIRST HQT TRACK.        33745600
         ST    R1,IOTHQT1          SET GOOD VALUE IN IOTHQT1.           33745700
         L     R0,SJBJCTRK         SET TRACK OF JCT                     33745800
         LR    R1,R7               AND JCT'S STORAGE ADDRESS.           33745900
         NI    JCTFLAG1,255-JCT1CKPT  RESET CHECKPOINT FLAG.            33746000
         CALL  HCBWR               WRITE THE JCT AT                     33746100
         L     R0,JCTHQT           ITS OWN TRACK AND AT                 33746200
         CALL  HCBWR               THE HCT TRACK.                       33746300
*                                                                       33747700
*              FOR SPIN/HOLD DATA SETS, WRITE AND QUEUE THE IOT         33747800
*                                                                       33747900
HIS060   DS    0H                                                       33748000
         MVC   IOTJQOFF,JCTJQE     STORE JQE OFFSET IN IOT.             33748100
         MVC   IOTHQRCT,JCTHQRCT   SET UNALLOCATION NUMBER IN IOT    R4 33748200
         NI    IOTFLAG1,255-IOT1CKPT  RESET CHECKPOINT FLAG         R41 33748300
         OI    IOTFLAG1,IOT1NTPR   SET NOT PROCESSED FLAG      @OZ25953 33748350
         L     R0,IOTTRACK         SET TRACK OF IOT                     33748400
         LR    R1,RIOT             AND IOT'S STORAGE ADDRESS.           33748500
         CALL  HCBWR               WRITE THE IOT.                       33748600
         MVC   JCTWORK+20+RIOT*4(4),IOTIOT  SAVE OLD IOT CHAIN.         33748700
         LH    R1,IOTLENG          MOVE                              R4 33748800
         LR    R0,R8                SPIN                             R4 33748900
         LR    R15,R1                IOT                             R4 33749000
         LR    R14,RIOT               TO                             R4 33749100
         MVCL  R0,R14                  CSA                           R4 33749200
         LR    R1,RIOT             FREE OLD                          R4 33749300
         CALL  HCBFM                SPIN IOT                         R4 33749400
         LR    RIOT,R8             RELOAD NEW SPIN IOT ADDRESS       R4 33749500
         L     R0,$SVSPIOT         CHAIN                                33749600
         ST    R0,IOTIOT           IOT                                  33749700
         CS    R0,RIOT,$SVSPIOT    ON                                   33749800
         BNE   *-8                 $SVSPIOT.                            33749900
         $$POST ELMT=$SVJOB        ACTIVATE JES2.                       33750000
HIS900   LM    R14,R12,JCTWORK+12  RESTORE REGISTERS                 R4 33750100
         BR    R14                 AND RETURN.                          33750200
         DROP  ,                   DROP ALL ADDRESSABILITY.             33750300
         LTORG                                                       R4 33750400
         TITLE 'HASP SUBSYSTEM SUPPORT ROUTINE -- OPEN'                 33750500
*                                                                       33750600
*                                                                       33750700
*              HASP SUBSYSTEM SUPPORT ROUTINE -- OPEN                   33750800
*                                                                       33750900
*                                                                       33751000
HOSOPEN  $PROLOG SSOBOPEN,SSDASIZE,LOCK=SDB OPEN                        33751100
HOSOPENB DS    0H                  OPEN BASE LABEL                      33751200
         SPACE 1                                                        33751300
RJFC     EQU   R7                  RJFC IS REGISTER 7.                  33751400
RDEB     EQU   R6                  RDEB IS REGISTER 6.                  33751500
*                                                                       33751600
*              USE SUBROUTINE TO SET UP REGISTERS AND                   33751700
*              TO DETERMINE TYPE OF OPEN                                33751800
*                                                                       33751900
         CALL  HOCSETUP            CALL SUBROUTINE.                     33752000
         USING DEBBASIC,RDEB       SET DEB ADDRESSABILITY.              33752100
         USING INFMJFCB,RJFC       SET JFCB ADDRESSABILITY.             33752200
         USING SSDABGN,RSIB        SET SSDA ADDRESSABILITY.             33752300
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             33752400
         B     HO000               INTERNAL READER                      33752500
         B     HO100               SUBSYSTEM DATA SET - SI              33752600
         B     HO200               SUBSYSTEM DATA SET - SO              33752700
         B     HO300               SUBSYSTEM DATA SET - PS              33752800
         B     HO400               SUBSYSTEM DATA SET - INVALID         33752900
         B     HOERR               ERROR DETECTING TYPE                 33753000
         EJECT                                                          33753100
*                                                                       33753200
*              O P E N   I N T E R N A L   R E A D E R                  33753300
*                                                                       33753400
HO000    DS    0H                                                       33753500
         USING DCTDSECT,RSDB       SET DCT ADDRESSABILITY.              33753600
         ST    RSDB,DEBIRBAD       SAVE DCT ADDRESS IN DEB.             33753800
         MVC   DEBAPPAD,=A(HASPAM) SET HAM ADDRESS IN DEB.              33753900
         L     R1,DEBDCBAD         POINT TO OPENING ACB.                33754000
         USING IFGACB,R1           SET ACB ADDRESSABILITY.              33754500
         MVC   ACBINRTN,=A(HASPAM) POINT ACB TO HASP ACS METH.          33755000
         OI    ACBINRTN,ACBINR     SHOW DEB POINTS TO INTRDR.           33755500
         SLR   R15,R15             SET NORMAL RETURN CODE.              33756000
         ST    R15,RIDUBF          ZERO UNPROTECTED-BUFFER POINTER      33756500
         $EPILOG ,                 RETURN TO CALLER.                    33757000
         DROP  R1                  DROP ACB ADDRESSABILITY.             33757500
         EJECT                                                          33758000
*                                                                       33758500
*              O P E N   S Y S I N   D A T A   S E T                    33759000
*                                                                       33759500
HO100    DS    0H                                                       33760000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              33760500
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              33761000
* IF XBM AND ALREADY OPEN, DON'T OPEN AGAIN.                            33761500
         TM    SJBFLG1,SJB1XBM     IF NOT XBM,                          33762000
         BZ    HO107               CONTINUE.                            33762500
         L     R0,SDBUBF           IF NO UNPROTECTED BUFFER,            33763000
         LTR   R0,R0               DATA SET IS NOT OPEN -               33763500
         BZ    HO107               CONTINUE.                            33764000
         BAL   R14,HODEBACB        ELSE SET UP DEB & ACB                33764500
         B     HORET               AND RETURN.                          33765000
* NOT XBM AND/OR NOT OPEN - CONTINUE NORMALLY                           33765500
HO107    DS    0H                                                       33766000
*                                                                       33766500
*              O P E N   P R O C E S S - S Y S O U T   D A T A   S E T  33767000
*                                                                       33767500
HO300    DS    0H                                                       33768000
         L     R0,SDBDEB           GET SDB'S DEB POINTER.               33768500
         LTR   R0,R0               IF NO DEB, DATA SET IS               33769000
         BZ    HO110               CLOSED.  GO OPEN IT.                 33769500
         TM    SJBFLG1,SJB1XBM     IF OPEN ALREADY AND XBM,             33770000
         BO    HORET               IGNORE OPEN.                         33770500
         B     HOERR               NOT XBM BUT OPEN - ERROR.            33771000
HO110    DS    0H                                                       33771500
*                                                                       33772000
*              OPEN SYSIN DATA SET                                      33772500
*                                                                       33773000
         CALL  HOOLDINP            GET BUFFERS ETC. FOR DATA SET.       33773500
         BNZ   HOERR               BRANCH IF HOOLDINP FAILED.           33774000
         SLR   R0,R0               ZERO                                 33774500
         ST    R0,SDBRECCT         SDB RECORD COUNTER.                  33775000
* TEST FOR CHECKPOINT RESTART                                           33775500
         TM    SSDARESF,SSDAAUTO+SSDADEFR  IF NOT                       33776000
         BZ    HO140               CHECKPOINT RESTART, BRANCH.          33776500
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER          33777000
         USING BFD,RBUF            AND SET ADDRESSABILITY.              33777500
         L     R1,SSDABUFR         POINT TO RESTART BUFFER.             33778000
         MVC   BFRBA,16(R1)        ASSUME AUTOMATIC RESTART.            33778500
         TM    SSDARESF,SSDAAUTO   IF AUTOMATIC,                        33779000
         BO    HO120               CONTINUE.                            33779500
         MVC   BFRBA(5),SDBTRKF    IF DEFERRED, SET STARTING            33780000
         MVC   BFRBA+5(3),25(R1)   TRACK & SAVED RECORD COUNT.          33780500
* FOR CHECKPOINT RESTART, POSITION THE DATA SET.                        33781000
HO120    DS    0H                                                       33781500
         DROP  RBUF                DROP BUFFER ADDRESSABILITY.          33782000
         BAL   R14,HODEBACB        SET UP DEB AND ACB.                  33782500
         LCR   R1,R1               COMPLEMENT ACB ADDRESS.              33783000
         LA    R0,HSVCPNT          SET SVC FUNCTION = POINT.            33783500
         SVC   HAMSVC              ISSUE HAM SVC.                       33784000
         B     HORET               RETURN TO CALLER.                    33784500
* FOR STEP RESTART AND NORMAL OPEN, READ.                               33785000
HO140    DS    0H                                                       33785500
         CALL  HCNVFDAD            CONVERT TRACK TO OS FORMAT.          33786000
         OI    SDBFLG2,SDB2IOA     SHOW I/O ACTIVE.                     33786500
         BAL   R14,HODEBACB        SET UP DEB AND ACB.                  33787000
         EXCP  SDBIOB              READ IN FIRST RECORD.                33787500
         WAIT  1,ECB=SDBECB        WAIT FOR COMPLETION.                 33788000
         B     HORET               THEN RETURN.                         33788500
         EJECT                                                          33789000
*                                                                       33789500
*              O P E N   S Y S O U T   D A T A   S E T                  33790000
*                                                                       33790500
HO200    DS    0H                                                       33791000
*                                                                       33791500
*              UP OPEN COUNT.  IF ALREADY OPEN, SET UP & EXIT           33792000
*                                                                       33792500
         L     R1,SDBCCW3+4        GET OPEN COUNT.                      33793000
         LA    R0,1(,R1)           INCREMENT IT.                        33793500
         ST    R0,SDBCCW3+4        STORE OPEN COUNT.                    33794000
         LTR   R1,R1               IF DATA SET WASN'T OPEN,             33794500
         BZ    HO203               GO OPEN IT.                          33795000
         LA    R14,HORET           ELSE SET RETURN ADDRESS              33795500
         B     HODEBACB            AND SET UP DEB & ACB.                33796000
*                                                                       33796500
*              OPEN SYSOUT DATA SET                                     33797000
*                                                                       33797500
HO203    DS    0H                                                       33798000
         L     R1,SDBPDDB          POINT TO PDDB FOR DATA SET.          33798500
         USING PDBDSECT,R1         USE PDDB DSECT.                      33799000
         TM    PDBFLAG1,PDB1NULL   IS DATA SET OLD...                   33799500
         BO    HO210               BRANCH IF NOT.                       33800000
         DROP  R1                  DROP PDDB BASE.                      33800500
         CALL  HOOLDOUT            YES.  OPEN FOR OLD OUTPUT.           33801000
         BNE   HOERR               ERROR - OPEN FAILED.                 33801500
*                                                                       33802000
*              FOR OLD SYSOUT, SET CURRENT RBA                          33802500
*                                                                       33803000
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         33803500
         USING BFD,RBUF            USE THE UBF DSECT.                   33804000
         LM    R0,R1,SDBTRK        GET RESUME TRACK AND                 33804500
         STM   R0,R1,BFRBA         SET IT IN BFRBA.                     33805000
         ALR   R0,R1               ERROR IF ZERO TRACK AND              33805500
         BZ    HOERR               PDB1NULL IS OFF.                     33806000
         BAL   R14,HODEBACB        SET UP DEB AND ACB.                  33806500
         TM    SSDARESF,SSDAAUTO   IF NOT A RESTART CALL,               33807000
         BZ    HO205               GO CHECK CLOSED-AT-CHECKPOINT.       33807500
         L     R1,SSDABUFR         POINT TO RESTART DATA.               33808000
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         33808500
         MVC   SDBTRKF(16),8(R1)   SET SDBTRKF, SDBTRK,                 33809000
         MVC   BFRBA,16(R1)        AND BFRBA FROM RESTART DATA.         33809500
         B     HO207               BR TO CONTINUE                   R41 33810000
HO205    DS    0H                                                       33810500
         CLC   =X'FFFFFF',SDBTRK+5 IF NOT CLOSED-AT-CHECKPOINT,         33811000
         BNE   HORET               RETURN TO CALLER.                    33811500
         LCR   R1,R1               SET ACB COMPLEMENT.                  33812000
         LA    R0,HSVCPNT          SET FUNCTION REGISTER.               33812500
         SVC   HAMSVC              POSITION TO END OF DATA SET.         33813000
         CL    R15,=A(HERNOEOD)    IF EOD NOT FOUND,                    33813500
         BNE   HOERR               ERROR.                               33814000
         LA    R0,1                OTHERWISE, SET                       33814500
         STCM  R0,7,SDBTRK+5       RECORD NUMBER ONE                    33815000
         L     RBUF,SDBUBF         IN SDBTRK                            33815500
         STCM  R0,7,BFRBA+5        AND IN BFRBA.                        33816000
         SPACE 1                                                    R41 33816100
HO207    ICM   R0,15,SDBTRK+1      GET RESUME MTTR                  R41 33816200
         CALL  HJSRETAB            RE-BUILD TRACK ALLOC. BLOCK      R41 33816300
         B     HORET               RETURN.                              33816500
*                                                                       33817000
*              OPEN NEW SYSOUT                                          33817500
*                                                                       33818000
         SPACE 2                                                        33818500
HO210    DS    0H                                                       33819000
         CALL  HONEWOUT            OPEN NEW SYSOUT DATA SET.            33819500
         BNE   HOERR               ERROR IF NO STORAGE.                 33819800
         BAL   R14,HODEBACB        SET UP DEB AND ACB.                  33820000
*                                                                       33820500
*              SET MTTR, RECFM, LRECL, FCB, UCS, AND FUNC               33821000
*                                                                       33821500
         USING IOTDSECT,RIOT       SET IOT AND PDDB                     33822000
         USING PDBDSECT,R6         ADDRESSABILITY.                      33822500
         L     RIOT,SDBAIOT        SET CHECKPOINT FLAG                  33823000
         OI    IOTFLAG1,IOT1CKPT   IN ALLOCATION IOT.                   33823500
         L     RIOT,SDBPIOT        POINT TO PDDB'S IOT.                 33824000
         L     R6,SDBPDDB          POINT TO PDDB.                       33824500
         L     R4,PDBMTTR          SET R4 = STARTING TRACK              33825000
         LH    R3,PDBDSKEY         AND R3 = DATA SET KEY.               33825500
HO270    DS    0H                                                       33826000
* SET PDBRECFM                                                          33826500
         MVC   PDBRECFM,JFCRECFM   SET PDBRECFM FROM JFCB.              33827000
* SET PDBLRECL                                                          33827500
         LH    R0,JFCLRECL         GET LRECL FROM JFCB.                 33828000
         LTR   R0,R0               IF JFCLRECL IS NONZERO,              33828100
         BNZ   *+8                 CONTINUE.                            33828200
         LH    R0,JFCBLKSI         OTHERWISE USE JFCBLKSI.              33828300
         TM    JFCRECFM,JFCFIX     IF RECFM=F,                          33828500
         BO    HO275               USE IT.                              33829000
         TM    JFCRECFM,JFCVAR     IF RECFM=U,                          33829500
         BZ    HO275               USE IT.                              33830000
         SH    R0,=H'4'            FOR RECFM=V, SUBTRACT 4.             33830500
HO275    STH   R0,PDBLRECL         SET PDBLRECL.                        33831000
* SET PDBUCS                                                            33831500
         L     R0,JFCUCSID         GET UCS FROM JFCB.                   33832000
         LTR   R0,R0               IF ZERO,                             33832500
         BZ    *+8                 DON'T USE IT.                        33833000
         ST    R0,PDBUCS           ELSE SET PDBUCS.                     33833500
* SET PDBFCB                                                            33834000
         L     R0,JFCFCBID         GET FCB FROM JFCB.                   33834500
         LTR   R0,R0               IF ZERO,                             33835000
         BZ    *+8                 DON'T USE IT.                        33835500
         ST    R0,PDBFCB           ELSE SET PDBFCB.                     33836000
* SET PDBFUNC                                                           33836500
         MVC   PDBFUNC,JFCFUNC     SET PDBFUNC FROM JFCB.               33837000
         EJECT                                                       R4 33837100
* SET PDB2OPTJ                                                       R4 33837200
         TM    JFCOPTCD,JFCOPTJ    SET OR                           R41 33837300
         BZ    SKIP290              RESET                            R4 33837400
         OI    PDBFLAG2,PDB2OPTJ     PDB2OPTJ                        R4 33837500
         B     SKIP300                BASED UPON                     R4 33837600
SKIP290  NI    PDBFLAG2,255-PDB2OPTJ   JFCOPTCD                      R4 33837700
         SPACE 1                                                     R4 33837800
*                                                                    R4 33837900
*        IF 3800 JFCB EXTENSION EXISTS, SET PDDB 3800 FIELDS         R4 33838000
*                                                                    R4 33838100
SKIP300  TM    JFCUCSOP,JFCBEXTP   TEST FOR 3800 EXTENSION          R41 33838200
         BNO   HO279               BR IF NOT                         R4 33838300
         SPACE 1                                                     R4 33838400
         L     R15,JFCBEXAD-1      ESTABLISH JFCB                    R4 33838500
         USING JFCBE-16,R15         EXTENSION ADDRESSABILITY         R4 33838600
         SPACE 1                                                     R4 33838700
* SET PDB2BRST                                                       R4 33838800
         TM    JFCBFLAG,JFCBBST    SET OR                            R4 33838900
         BZ    SKIP310              RESET                            R4 33839000
         OI    PDBFLAG2,PDB2BRST     PDB2BRST                        R4 33839100
         B     SKIP320                BASED UPON                     R4 33839200
SKIP310  NI    PDBFLAG2,255-PDB2BRST   JFCBFLAG                      R4 33839300
* SET PDBMODF/PDBMODFT                                               R4 33839400
SKIP320  L     R0,JFCMODIF         SET                               R4 33839500
         LTR   R0,R0                PDBMODF,                         R4 33839600
         BNM   SKIP330               PDBMODFT                        R4 33839700
         ST    R0,PDBMODF             IF                             R4 33839800
         MVC   PDBMODFT,JFCIDTRC       SPECIFIED                     R4 33839900
* SET PDBFLASH/PDBFLSHC                                              R4 33840000
SKIP330  L     R0,JFCBMAGT         SET                               R4 33840100
         LTR   R0,R0                PDBFLASH,                        R4 33840200
         BNM   SKIP340               PDBFLSHC                        R4 33840300
         ST    R0,PDBFLASH            IF                             R4 33840400
         MVC   PDBFLSHC,JFCIMTOT       SPECIFIED                     R4 33840500
* SET PDBCHAR1-4                                                     R4 33840600
SKIP340  L     R0,JFCBTRS1         SET                               R4 33840700
         CL    R0,=X'40404040'      CHARS FROM                 @OZ30543 33840710
         BE    SKIP350              JFCB TO                    @OZ30543 33840720
         LTR   R0,R0                PDBCHAR1                         R4 33840800
         BZ    SKIP350               IF                        @OZ30543 33840900
         ST    R0,PDBCHAR1            SPECIFIED                         33841000
SKIP350  L     R0,JFCBTRS2         SET                               R4 33841100
         CL    R0,=X'40404040'      CHARS FROM                 @OZ30543 33841110
         BE    SKIP360              JFCB TO                    @OZ30543 33841120
         LTR   R0,R0                PDBCHAR2                         R4 33841200
         BZ    SKIP360               IF                        @OZ30543 33841300
         ST    R0,PDBCHAR2            SPECIFIED                      R4 33841400
SKIP360  L     R0,JFCBTRS3         SET                               R4 33841500
         CL    R0,=X'40404040'      CHARS FROM                 @OZ30543 33841510
         BE    SKIP370              JFCB TO                    @OZ30543 33841520
         LTR   R0,R0                PDBCHAR3                         R4 33841600
         BZ    SKIP370               IF                        @OZ30543 33841700
         ST    R0,PDBCHAR3            SPECIFIED                      R4 33841800
SKIP370  L     R0,JFCBTRS4         SET                               R4 33841900
         CL    R0,=X'40404040'      CHARS FROM                 @OZ30543 33841910
         BE    SKIP380              JFCB TO                    @OZ30543 33841920
         LTR   R0,R0                PDBCHAR4                         R4 33842000
         BZ    SKIP380               IF                        @OZ30543 33842100
         ST    R0,PDBCHAR4            SPECIFIED                      R4 33842200
* SET PDBCOPYG                                                       R4 33842300
SKIP380  MVC   PDBCOPYG,JFCGROUP   SET PDDB COPY GROUPS              R4 33842400
HO279    DS    0H                                                    R4 33842500
         EJECT                                                       R4 33842600
* MERGE PDBUCS AND PDBCHAR1                                          R4 33842700
         CLC   PDBUCS,=C'****'     TEST FOR UCS SPECIFIED            R4 33842800
         BNE   SKIP390             BR IF YES                         R4 33842900
         MVC   PDBUCS,PDBCHAR1     ELSE USE CHAR1 VALUS              R4 33843000
SKIP390  CLC   PDBCHAR1,=C'****'   TEST FOR CHAR1 SPECIFIED          R4 33843100
         BNE   SKIP400             BR IF YES                         R4 33843200
         MVC   PDBCHAR1,PDBUCS     ELSE USE UCS VALUE                R4 33843300
* END OF JFCB-TO-PDDB MERGE                                             33843400
SKIP400  OC    PDBUCS,=X'40404040' SET BINARY ZEROES TO BLANKS.         33843500
         OC    PDBCHAR1,=X'40404040' SET ZEROES TO BLANKS.     @OZ25663 33843550
         OC    PDBFCB,=X'40404040' SET BINARY ZEROES TO BLANKS.         33843600
         OI    IOTFLAG1,IOT1CKPT   FLAG IOT FOR CHECKPOINT.             33843700
         TM    PDBFLAG1,PDB1MDES   IF NOT MULTIPLE                      33843800
         BZ    HO290               DESTINATIONS, SKIP.                  33843900
         LA    R6,PDBLENG(,R6)     POINT TO NEXT PDDB.                  33844000
         L     R0,IOTPDDBP         COMPUTE ADDRESS OF                   33844100
         ALR   R0,RIOT             END OF PDDBS.                        33844200
         CLR   R6,R0               IS THERE ANOTHER PDDB HERE...        33844300
         BL    HO280               BRANCH IF SO.                        33844400
         L     RIOT,IOTIOT         NO.  POINT TO NEXT IOT.              33844500
         LTR   RIOT,RIOT           IS THERE ANOTHER IOT...              33844600
         BZ    HO290               BRANCH IF NOT.                       33844700
         L     R6,$SVPDDB1         YES.  POINT TO                    R4 33844800
         ALR   R6,RIOT              FIRST PDDB.                      R4 33844900
HO280    DS    0H                                                       33845000
         CH    R3,PDBDSKEY         IF DATA SET KEY DIFFERS,             33845500
         BNE   HO290               END OF MULT DEST PDDBS.              33846000
         ST    R4,PDBMTTR          SET STARTING TRACK AND               33846500
         NI    PDBFLAG1,255-PDB1NULL  RESET THE NULL FLAG.              33847000
         B     HO270               BRANCH TO SET MORE.                  33847500
         EJECT                                                       R4 33847600
*                                                                       33848000
*              CHECKPOINT AND RETURN                                    33848500
*                                                                       33849000
HO290    DS    0H                                                       33849500
         CALL  HCBCK               CHECKPOINT AS REQUIRED.              33850000
* RETURN TO CALLER                                                      33850500
         B     HORET               EXIT TO CALLER.                      33851000
         DROP  R6,RIOT             DROP PDDB, IOT BASES.                33851500
         SPACE 5                                                        33852000
*                                                                       33852500
*              ADD OTHER DATA SET TYPES HERE                            33853000
*                                                                       33853500
HO400    DS    0H                                                       33854000
         $MID  352                                                      33854500
         WTO   '&MID.OPEN FAILED BECAUSE NOT SYSIN, SYSOUT, NOR PROCESSC33855000
               -SYSOUT',ROUTCDE=10,DESC=6                               33855500
         B     HOERR                                                    33856000
         EJECT                                                          33856500
*                                                                       33857000
*              SUBROUTINE TO SET UP DEB AND ACB                         33857500
*                                                                       33858000
HODEBACB DS    0H                                                       33858500
* ON ENTRY, R8 POINTS TO SSDA, R10 POINTS TO SDB                        33859000
* ON EXIT, R6 POINTS TO DEB, R1 POINTS TO ACB                           33859500
* CALL IS BAL R14,HODEBACB                                              33860000
* FIELDS SET - DEBIRBAD, DEBAPPAD, ACBINRTN                             33860500
         L     RDEB,SSDADEBP       POINT TO THE DEB FROM SSDA.          33861000
         USING DEBBASIC,RDEB       SET DEB ADDRESSABILITY.              33861500
         ST    RSDB,DEBIRBAD       POINT DEB TO SDB.                    33862000
         ST    RDEB,SDBDEB         POINT SDB TO DEB.                    33862500
         L     R0,=A(HASPAM)       GET POINTER TO HASPAM.               33863000
         ST    R0,DEBAPPAD         POINT DEB TO HASPAM.                 33863500
         L     R1,DEBDCBAD         POINT TO THE ACB FROM DEB.           33864000
         LA    R1,0(,R1)           CLEAR HIGH-ORDER BYTE.               33864500
         USING IFGACB,R1           SET ACB ADDRESSABILITY.              33865000
         ST    R0,ACBINRTN         POINT ACB TO HASPAM.                 33865500
         BR    R14                 RETURN.                              33866000
         DROP  R1,RDEB             DROP ACB, DEB BASES.                 33866500
         SPACE 3                                                        33867000
*                                                                       33867500
*              RETURN NORMALLY TO CALLER                                33868000
*                                                                       33868500
HORET    DS    0H                                                       33869000
         SR    R15,R15             SET RETURN CODE TO ZERO.             33869500
         $EPILOG KEY=0             *** TEMPORARY ***                    33870000
         SPACE 3                                                        33870500
*                                                                       33871000
*              RETURN ABNORMALLY TO CALLER                              33871500
*                                                                       33872000
HOERR    DS    0H                                                       33872500
         LA    R15,4               NOTE- NO RET CODES ARE DEFINED.      33873000
         $EPILOG KEY=0             *** TEMPORARY ***                    33873500
         DROP  RJFC,RSIB,RSDB,RSJB DROP JFCB, SSAL, SDB, SJB BASES.     33874000
         TITLE 'OPEN PROCESSING FOR OLD INPUT DATASET'                  33874500
*                                                                       33875000
*                                                                       33875500
*              OPEN PROCESSING FOR ANY OLD INPUT DATASET                33876000
*                                                                       33876500
*                                                                       33877000
*        LINKAGE ---                                                    33877500
*              CALL HOOLDINP                                            33878000
*                                                                       33878500
*        INPUT ---                                                      33879000
*              RSDB POINTS TO AN SDB                                    33879500
*                                                                       33880000
*        FIELDS USED ---                                                33880500
*              SDBUBF IS SET                                            33881000
*              SDBPBF IS SET                                            33881500
*              SDBPDDB IS USED                                          33882000
*              SDBTRKF IS SET                                           33882500
*              SDBMTTR IS SET                                           33883000
*              SDBCCW4 IS SET                                           33883500
*                                                                       33884000
*        OPERATION ---                                                  33884500
*              1. AN UNPROTECTED BUFFER IS GOTTEN AND ITS ADDRESS       33885000
*                 PLACED IN SDBUBF.                                     33885500
*              2. A PROTECTED BUFFER IS GOTTEN AND ITS ADDRESS          33886000
*                 PLACED IN SDBPBF.                                     33886500
*              3. THE TRACK ADDRESS IN THE PDDB IS MOVED TO SDBTRKF.    33887000
*                                                                       33887500
         EJECT                                                          33888000
HOOLDINP DS    0H                                                       33888500
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      33889000
         BALR  R12,0               ESTABLISH                            33889500
         USING *,R12               ADDRESSABILITY.                      33890000
         USING SDBDSECT,RSDB       USE THE SDB DSECT.                   33890500
*                                                                       33891000
*              GET A UBF                                                33891500
*                                                                       33892000
         $GETBUF TYPE=UNPROT       GET A BUFFER.                        33892500
         BNZ   HOOIFAIL            BRANCH IF GETMAIN FAILED.            33893000
         LR    RBUF,R1             USE BUFFER REGISTER                  33893500
         USING BFD,RBUF            AND BUFFER DSECT.                    33894000
         MVI   BFID,C'U'           SHOW UNPROTECTED BUFFER.             33894500
         OI    BFFL1,BF1EOB        SHOW BUFFER EMPTY.                R4 33895000
         ST    RBUF,SDBUBF         SET POINTER TO UBF IN SDB.           33895500
*                                                                       33896000
*              GET A PBF                                                33896500
*                                                                       33897000
         $GETBUF TYPE=PROT         GET A BUFFER.                        33897500
         BNZ   HOOIFAIL            BRANCH IF GETMAIN FAILED.            33898000
         LR    RBUF,R1             USE BUFFER REGISTER.                 33898500
         MVI   BFID,C'P'           SHOW PROTECTED BUFFER.               33899000
         ST    RBUF,SDBPBF         SET POINTER TO PBF IN SDB.           33899500
*                                                                       33900000
*              SET STARTING TRACK ADDRESS AND KEYS                      33900500
*                                                                       33901000
         L     R2,SDBPDDB          POINT TO PDDB.                       33901500
         USING PDBDSECT,R2         USE ITS DSECT.                       33902000
         L     R0,PDBMTTR          GET STARTING TRACK.                  33902500
         LA    R1,X'100'           SET R1 FOR LATER SRDL.               33903000
         ST    R0,SDBMTTR          SET SDBMTTR FOR CONVENIENCE.         33903500
         SRDL  R0,8                SET UP '0MTTR001'.                   33904000
         STM   R0,R1,SDBTRKF       SET SDBTRKF = STARTING TRACK.        33904500
         MVC   SDBDKEY,PDBDSKEY    SET DATASET KEY IN SDB.              33905000
         LA    R0,BFIO             GET PBF READ START ADDRESS.          33905500
         ST    R0,SDBCCW4          SET IT IN CCW4.                      33906000
         MVI   SDBCCW4,6           SET COMMAND TO READ.                 33906500
         OI    SDBFLG1,SDB1GET     SHOW GET ALLOWED ON DATASET.         33907000
         NI    SDBFLG1,255-SDB1CLOS  RESET THE CLOSE FLAG.              33907500
         NI    SDBFLG2,255-SDB2IOE-SDB2EOD  RESET FLAGS.                33908000
         SR    R15,R15             SHOW GOOD COMPLETION.                33908500
HOOIFAIL ST    R15,16(,R13)        LABEL FOR BAD COMPLETION.            33909000
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   33909500
         BR    R14                 RETURN.                              33910000
         DROP  R2,RBUF,R12         DROP PDB, BF, LOCAL BASES.           33910500
         TITLE 'OPEN PROCESSING FOR NEW OUTPUT DATASET'                 33911000
*                                                                       33911500
*                                                                       33912000
*              OPEN PROCESSING FOR NEW OUTPUT DATASET                   33912500
*                                                                       33913000
*                                                                       33913500
*        LINKAGE ---                                                    33914000
*              CALL HONEWOUT                                            33914500
*                                                                       33915000
*        INPUT ---                                                      33915500
*              RSDB POINTS TO AN SDB                                    33916000
*                                                                       33916500
*        FIELDS USED ---                                                33917000
*              SDBUBF IS SET                                            33917500
*              SDBAIOT IS USED                                          33918000
*              SDBPDDB IS USED                                          33918500
*              SDBPIOT IS USED                                          33919000
*              SDBTRKF IS SET                                           33919500
*              SDBTRK IS SET                                            33920000
*              UBFRBA IS SET                                            33920500
*              PDBMTTR IS SET                                           33921000
*              PDB1NULL IS RESET                                        33921500
*              IOT1CKPT IS SET                                          33922000
*              UBFPDDBK IS SET                                          33922500
*              UBFDSKEY IS SET                                          33923000
*                                                                       33923500
*        OPERATION ---                                                  33924000
*              1. AN UNPROTECTED BUFFER IS GOTTEN AND ITS ADDRESS       33924500
*                 PLACED IN SDBUBF.                                     33925000
*              2. AN INITIAL TRACK IS GOTTEN FROM THE IOT POINTED       33925500
*                 TO BY SDBAIOT, AND ITS MTTR IS PLACED INTO SDBTRKF,   33926000
*                 SDBTRK, UBFRBA, AND PDBMTTR.  THE PDDB KEY IS MOVED   33926500
*                 TO THE SDB AND THE UBF.  PDB1NULL IS RESET.           33927000
*                 IOT1CKPT IS SET IN THE IOT POINTED TO BY SDBPIOT.     33927500
*                                                                       33928000
         EJECT                                                          33928500
*                                                                       33929000
*                                                                       33929500
*              SUBROUTINE TO OPEN A NEW OUTPUT DATASET                  33930000
*                                                                       33930500
*                                                                       33931000
HONEWOUT DS    0H                                                       33931500
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.             33932000
         BALR  R12,0               ESTABLISH                            33932500
         USING *,R12               ADDRESSABILITY.                      33933000
         ST    R13,SDBSAVE+4       POINT SDB SAVEAREA TO USER'S.        33933500
         ST    RSDB,8(,R13)        POINT USER'S SAVEAREA TO SDB.        33934000
         LA    R13,SDBSAVE         SET R13 TO SDB SAVEAREA.             33934500
         $GETBUF TYPE=UNPROT       GET A BUFFER.                        33935000
         BNZ   HONOFAIL            BRANCH IF GETMAIN FAILED.            33935500
         LR    RBUF,R1             USE BUFFER REGISTER,                 33936000
         USING BFD,RBUF            AND SET BUFFER ADDRESSABILITY.       33936500
         MVI   BFID,C'U'           SHOW UNPROTECTED BUFFER.             33937000
         LA    R0,BFDAT            SET IN BUFFER                        33937500
         ST    R0,BFLOC            POINTER TO FIRST DATA BYTE.          33938000
         LH    R0,$SVBFSIZ         SET IN                            R4 33938500
         SL    R0,=A(BFDAT+1-BFIO) BUFFER                            R4 33938800
         ST    R0,BFLEN            LENGTH OF DATA SPACE.                33939000
         ST    RBUF,SDBUBF         SET POINTER TO UBF IN SDB.           33939500
*                                                                       33940000
*              GET INITIAL TRACK FOR DATASET.                           33940500
*                                                                       33941000
         L     R2,SDBPDDB          POINT TO DATA SET'S PDDB.            33941200
         USING PDBDSECT,R2         SET PDDB ADDRESSABILITY.             33941300
         L     R1,PDBMTTR          IF DS PREVIOUSLY OPENED &            33941400
         LTR   R1,R1               CLOSED WITHOUT DATA,                 33941500
         BNZ   HONO020             USE ORIGINAL STARTING TRACK.         33941600
         LA    R1,SDBTAB           POINT TO SDB'S TAB                R4 33941700
         CALL  $STRAK              GET A TRACK.                         33943500
         ST    R1,PDBMTTR          SET STARTING TRACK ADDRESS.          33945000
HONO020  DS    0H                                                       33945300
         NI    PDBFLAG1,255-PDB1NULL  SHOW PDDB NOT NULL.               33945500
         MVC   SDBDKEY,PDBDSKEY    SET DS KEY IN SDB FROM PDDB.         33946000
         MVC   BFKEY,SDBJKEY       SET JOB AND DS KEY IN BUFFER.        33946500
         L     RIOT,SDBPIOT        POINT TO PDDB'S IOT.                 33947000
         USING IOTDSECT,RIOT       USE IOT DSECT.                       33947500
         OI    IOTFLAG1,IOT1CKPT   SHOW IOT NEEDS A CHECKPOINT.         33948000
         LR    R0,R1               SET UP                               33948500
         LA    R1,X'100'           R0 AND R1                            33949000
         SRDL  R0,8                TO '0MTTR001'.                       33949500
         STM   R0,R1,SDBTRKF       SET DATASET FIRST TRACK.             33950000
         STM   R0,R1,SDBTRK        SET DATASET CURRENT TRACK.           33950500
         STM   R0,R1,BFRBA         SET STARTING RBA IN BUFFER.          33951000
         OI    SDBFLG1,SDB1PUT     SHOW PUT ALLOWED ON DATASET.         33951500
         NI    SDBFLG1,255-SDB1CLOS  RESET THE CLOSE FLAG.              33952000
         MVI   SDBCCW4,5           SET WRITE-DATA COMMAND.              33952500
         SR    R15,R15             SHOW GOOD COMPLETION.                33953000
HONOFAIL DS    0H                  LABEL FOR BAD COMPLETION.            33953500
         L     R13,4(,R13)         POINT TO CALLER'S SAVEAREA.          33954000
         ST    R15,16(,R13)        SET R15 FOR RESTORE.                 33954500
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS.          33955000
         LTR   R15,R15             SET COND CODE ACCORDING TO R15.      33955500
         BR    R14                 RETURN.                              33956000
         DROP  R2,RIOT,RBUF,R12    DROP PDB, IOT, BF, LOCAL BASES.      33956500
         TITLE 'OPEN PROCESSING FOR OLD OUTPUT DATASET'                 33957000
*                                                                       33957500
*              OPEN PROCESSING FOR OLD OUTPUT DATASET                   33958000
*                                                                       33958500
*        LINKAGE ---                                                    33959000
*              CALL HOOLDOUT                                            33959500
*                                                                       33960000
*        INPUT ---                                                      33960500
*              RSDB POINTS TO AN SDB                                    33961000
*                                                                       33961500
*        FIELDS USED ---                                                33962000
*              SDBUBF IS SET                                            33962500
*              SDBPDDB IS USED                                          33963000
*              SDBTRKF IS SET                                           33963500
*              SDBTRK IS SET                                            33964000
*              UBFRBA IS SET                                            33964500
*              PDBMTTR IS USED                                          33965000
*              UBFPDDBK IS SET                                          33965500
*              UBFDSKEY IS SET                                          33966000
*                                                                       33966500
*        OPERATION ---                                                  33967000
*              1. AN UNPROTECTED BUFFER IS GOTTEN AND ITS ADDRESS       33967500
*                 PLACED IN SDBUBF.                                     33968000
*                 FIELD UBFDSKEY IS SET.                                33968500
*              2. FROM THE PDDB, MTTR IS MOVED TO SDBTRKF, SDBTRK,      33969000
*                 AND UBFRBA.  PDBDSKEY IS MOVED TO UBFPDDBK AND        33969500
*                 TO SDBDKEY.                                           33970000
*                                                                       33970500
         EJECT                                                          33971000
*                                                                       33971500
*              HOOLDOUT - SUBROUTINE TO OPEN AN OLD OUTPUT DATASET      33972000
*                                                                       33972500
HOOLDOUT DS    0H                                                       33973000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      33973500
         BALR  R12,0               ESTABLISH                            33974000
         USING *,R12               ADDRESSABILITY.                      33974500
         $GETBUF TYPE=UNPROT       GET A BUFFER.                        33975000
         BNZ   HOOOFAIL            BRANCH IF GETMAIN FAILED.            33975500
         LR    RBUF,R1             USE BUFFER REGISTER AND              33976000
         USING BFD,RBUF            SET BUFFER ADDRESSABILITY.           33976500
         MVI   BFID,C'U'           SHOW UNPROTECTED BUFFER.             33977000
         LA    R0,BFDAT            SET IN BUFFER                        33977500
         ST    R0,BFLOC            POINTER TO FIRST DATA BYTE.          33978000
         LH    R0,$SVBFSIZ         SET IN                            R4 33978500
         SL    R0,=A(BFDAT+1-BFIO) BUFFER                            R4 33978800
         ST    R0,BFLEN            LENGTH OF DATA SPACE.                33979000
         ST    RBUF,SDBUBF         SET POINTER TO UBF IN SDB.           33979500
         L     R2,SDBPDDB          POINT TO PDDB.                       33980000
         USING PDBDSECT,R2         USE DSECT.                           33980500
         OI    SDBFLG1,SDB1PUT     SHOW PUT ALLOWED.                    33981000
         NI    SDBFLG1,255-SDB1CLOS  RESET THE CLOSE FLAG.              33981500
         MVC   SDBDKEY,PDBDSKEY    MOVE DATASET KEY TO SDB.             33982000
         MVC   BFKEY,SDBJKEY       SET JOB AND DS KEY IN BUFFER.        33982500
         MVI   SDBCCW4,5           SET WRITE-DATA COMMAND.              33983000
         SR    R15,R15             SHOW GOOD COMPLETION.                33983500
HOOOFAIL DS    0H                                                       33984000
         ST    R15,16(,R13)        SET R15 FOR RESTORE.                 33984500
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   33985000
         BR    R14                 RETURN.                              33985500
         DROP  R2,RBUF,R12         DROP BASES.                          33986000
         TITLE 'FAKE OPEN SERVICE FOR CONVERTER'                        33986500
*                                                                       33987000
*        ROUTINE NAME - SSVOPNC                                         33987500
*                                                                       33988000
*        PURPOSE - TO OPEN THE SUBSYSTEM DATA SETS REQUIRED FOR         33988500
*              THE CONVERTER.                                           33989000
*                                                                       33989500
*        FUNCTION -                                                     33990000
*              1.  PROCURE AN SJB AS A BASE FOR THE DATA SETS TO        33990500
*                  BE OPENED.                                           33991000
*              2.  FOR EACH DATA SET TO BE OPENED, CALL HFCLSUB         33991500
*                  AND EITHER HOOLDINP OR HONEWOUT, EXCEPT -            33992000
*              3.  IF CONVERTING FOR EXECUTION BATCH MONITOR,           33992500
*                  MOVE FAKE JCL TO BUFFER INSTEAD OF CALLING           33993000
*                  HOOLDINP.                                            33993500
*              4.  INITIALIZE JES2 JOB LOG DATA SET WITH TITLE.         33994000
*              5.  RETURN TO CALLER.                                    33994500
*                                                                       33995000
*        OPERATION -                                                    33995500
*              1.  SAVE REGISTERS AND SET PROTECT KEY TO ZERO.          33996000
*                  SET R11 TO POINT TO SSVT.  PRESERVE SAVE AREA        33996500
*                  POINTER IN R5.                                       33997000
*              2.  IF NO SJB HAS BEEN GOT FOR CONVERTER                 33997500
*                  (JPCESJBP=0), CALL $SJBINIT TO CREATE ONE.           33998000
*                  IF FAILURE, TAKE ERROR EXIT.                         33998500
*                  SET FLAG SJB2CONV TO INDICATE CONVERTER SJB.         33999000
*                  STORE PCE POINTER IN SJBSSIB.                        33999500
*                  STORE SJB POINTER IN JPCESJBP.                       34000000
*              3.  MOVE JOB KEY, JOB ID, JOB NAME, ESTIMATED            34000500
*                  PRINT LINES, AND ESTIMATED PUNCH CARDS TO THE        34001000
*                  SJB FROM THE JCT.                                    34001500
*              4.  DOUBLE-CHAIN THE SJB SAVE AREA AND THE               34002000
*                  CALLER'S SAVE AREA.  POINT THE SAVE AREA             34002500
*                  REGISTER, R13, TO THE SJB.                           34003000
*              5.  FOR THE JCL DATA SET, CALL HFOPSUB TO CON-           34003500
*                  STRUCT AN SDB AND SET POINTERS IN THE ACB AND        34004000
*                  DEB.  THIS DATA SET'S ACB IS AT SYMBOL               34004500
*                  JPCEJCL.                                             34005000
*              6.  THE JCL DATA SET IS CONSTRUCTED HERE IF THIS         34005500
*                  ROUTINE IS OPENING DATA SETS FOR BATCH MONITOR       34006000
*                  CONVERSION (JPCEXBNM IS THE BATCH MONITOR            34006500
*                  PROCEDURE NAME).  GET AND FORMAT AN UNPROTEC-        34007000
*                  TED BUFFER, SAVING ITS ADDRESS IN SDBUBF.            34007500
*                  SET FLAG SDB2EOD TO PREVENT HAM ROUTINE HAMGET       34008000
*                  FROM INVOKING SVCGET FOR I/O.  SET FLAG              34008500
*                  SDB1GET TO SHOW INPUT DATA SET.  MOVE FAKE           34009000
*                  JOB, EXEC, AND DD CARDS TO THE BUFFER AND SET        34009500
*                  THE CONTENTS OF JPCEXBNM AS JOB NAME AND             34010000
*                  PROCEDURE NAME.                                      34010500
*              7.  THE JCL DATA SET IS OPENED AND PRIMED IF             34011000
*                  JPCEXBNM IS ZERO.  POINT SDBPDDB TO THE JCL          34011500
*                  DATA SET'S PDDB AND CALL HOOLDINP.  TO PRIME,        34012000
*                  CALL HCNVFDAD TO CONVERT JES2 TRACK ADDRESS TO       34012500
*                  OS TRACK ADDRESS, ISSUE EXCP, AND WAIT.              34013000
*              8.  FOR THE JCL IMAGES DATA SET, CALL HFOPSUB.           34013500
*                  THE ACB IS AT JPCEJCLI.                              34014000
*              9.  POINT SDBPDDB TO THE JCL IMAGES PDDB AND CALL        34014500
*                  HONEWOUT TO OPEN THE DATA SET.  SET FLAG             34015000
*                  SDB1OUT TO SHOW DATA SET IS PRINTABLE.               34015500
*              10. FOR THE JES2 JOB LOG DATA SET, CALL HFOPSUB.         34016000
*                  THE ACB IS AT SJBLACB.  THIS DATA SET IS NOT         34016500
*                  REQUIRED BY THE CONVERTER INTERFACE.                 34017000
*              11. POINT SDBPDDB TO THIS DATA SET'S PDDB AND CALL       34017500
*                  HONEWOUT.  SET FLAG SDB1OUT TO SHOW DATA SET         34018000
*                  IS PRINTABLE.  MOVE TITLE TEXT TO DATA SET'S         34018500
*                  UNPROTECTED BUFFER AND ADJUST BUFFER POSITION        34019000
*                  AND REMAINING LENGTH.                                34019500
*              12. FOR THE INTERNAL TEXT DATA SET, CALL HFOPSUB.        34020000
*                  THE ACB IS AT JPCETXT.                               34020500
*              13. POINT SDBPDDB TO THIS DATA SET'S PDDB AND CALL       34021000
*                  HONEWOUT.                                            34021500
*              14. SET PROTECT KEY BACK TO 'HASP', RESTORE              34022000
*                  REGISTERS, AND RETURN TO CALLER WITH CONDITION       34022500
*                  CODE ZERO.                                           34023000
*              15. ERROR EXIT - FOR EACH SDB CHAINED FROM CHAIN         34023500
*                  WORD SJBSDB, CALL $SDBFREE.  THEN RETURN TO          34024000
*                  CALLER WITH CONDITION CODE NONZERO.                  34024500
*                                                                       34025000
*        ENTRY -                                                        34025500
*              WORD $SVCOPN IN THE SUBSYSTEM VECTOR TABLE POINTS        34026000
*                  TO SSVOPNC.                                          34026500
*                                                                       34027000
*        REGISTERS AT ENTRY -                                           34027500
*              R5  = SUBSYSTEM VECTOR TABLE                             34028000
*              R8  = CONVERTER PROCESSOR CONTROL ELEMENT                34028500
*              R13 = USER-SUPPLIED STANDARD SAVE AREA                   34029000
*              R14 = RETURN ADDRESS                                     34029500
*              R15 = ENTRY ADDRESS                                      34030000
*                                                                       34030500
*        REGISTERS USED IN ADDITION TO ABOVE -                          34031000
*              R0  = WORK, ARGUMENT TO $SJBINIT                         34031500
*              R1  = WORK, ARGUMENT TO HGFMAIN                          34032000
*              R2  = WORK FOR HGFMAIN                                   34032500
*              R3  = CURRENT ACB                                        34033000
*              R4  = LINKAGE TO HGFMAIN                                 34033500
*              R5  = CURRENT IOT, FROM JPCEIOT                          34034000
*              R7  = WORK FOR HGFMAIN                                   34034500
*              R10 = CURRENT SUBSYSTEM DATASET BLOCK                    34035000
*              R11 = SUBSYSTEM VECTOR TABLE                             34035500
*              R12 = LOCAL BASE                                         34036000
*              R13 = SUBSYSTEM JOB BLOCK, FROM JPCESJBP                 34036500
*              R14 = LINK REGISTER FOR CALLS                            34037000
*              R15 = ENTRY REGISTER FOR CALLS                           34037500
*                                                                       34038000
*        REGISTERS CHANGED AT EXIT -                                    34038500
*              R15 CONTAINS RETURN CODE -                               34039000
*                  0 - SUCCESSFUL COMPLETION                            34039500
*                  4 - UNABLE TO OPEN ALL DATA SETS                     34040000
*                  8 - UNABLE TO INITIALIZE SJB                         34040500
*                                                                       34041000
*        CONDITION CODE AT EXIT -                                       34041500
*              0 - REGISTER 15 IS ZERO                                  34042000
*              2 - REGISTER 15 IS FOUR OR EIGHT                         34042500
*                                                                       34043000
SSVOPNC  DS    0H                                                       34043500
         USING *,R15               ESTABLISH ADDRESSABILITY.            34044000
         STM   R14,R12,12(R13)     SAVE USER'S REGISTERS.               34044500
         MODESET EXTKEY=ZERO       SET KEY ZERO FOR FAKE OPEN.          34045000
         USING PCEDSECT,R8         USE PCE DSECT.                       34045500
         LR    RSVT,R5             HOSCNVT PASSES SSVT IN R5.           34046000
         LR    R5,R13              SAVE USER SAVE AREA POINTER.         34046500
         ICM   RSJB,15,JPCESJBP    POINT TO CONVERTER SJB.              34047000
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              34047500
         BNZ   SOC10               BRANCH IF IT EXISTS.                 34048000
         LA    R0,24(,R13)         MAKE SAVE AREA A FAKE SSCVT.         34048500
         CALL  $SJBINIT            ELSE GO BUILD ONE.                   34049000
         BALR  R14,0               SET BASE REGISTER                    34049300
         USING *,R14               PROVIDE TEMPORARY ADDRESSABILITY     34049500
         BNZ   SOC820              BRANCH IF SJB NOT BUILT.             34050000
         OI    SJBFLG2,SJB2CONV    SHOW CONVERTER SJB.                  34050500
         ST    RSJB,JPCESJBP       STORE SJB POINTER IN PCE.            34051000
         ST    R8,SJBSSIB          POINT SJB TO CONVERTER PCE.          34051500
SOC10    BALR  R12,0               ESTABLISH                            34052000
         USING *,R12               ADDRESSABILITY.                      34052500
         L     R7,PCEJCT           GET JCT ADDRESS FROM PCE.            34053000
         ST    R7,SJBJCT           SET JCT POINTER INTO SJB    @OZ26284 34053300
         USING JCTDSECT,R7         SET JCT ADDRESSABILITY.              34053500
         MVC   SJBJKEY,JCTJBKEY    SET JOB KEY FROM JCT.                34054000
         MVC   SJBJOBID,JCTJOBID   SET CONVERTER JOB ID.                34054500
         MVC   SJBJOBNM,JCTJNAME   SET CONVERTER JOB NAME.              34055000
         MVC   SJBESTLN,JCTESTLN   SET PRINT AND PUNCH                  34055500
         MVC   SJBESTPU,JCTESTPU   EXCESSION LIMITS.                    34056000
         ST    RSJB,8(,R5)         CHAIN                                34056500
         ST    R5,SJBSAVE+4        SAVEAREAS.                           34057000
         USING IOTDSECT,RIOT       USE THE IOT DSECT.                   34057500
*                                                                       34058000
*              OPEN THE JCL DATASET                                     34058500
*                                                                       34059000
         LA    R3,JPCEJCL          POINT TO ACB.                        34059500
         L     RIOT,JPCEIOT        POINT TO THE 1ST IOT.                34060000
         ST    RIOT,SJBIOT         SAVE ADDRESS IN SJB.                 34060500
         CALL  HFOPSUB             SET SDB, ACB, DEB.                   34061000
         BNZ   SSVOFAIL            BRANCH IF HFOPSUB FAILED.            34061500
*                                                                       34062000
*              CREATE BATCH MONITOR JCL IF REQUIRED                     34062500
*                                                                       34063000
         LM    R0,R1,JPCEXBNM      GET BATCH MONITOR JOBNAME.           34063500
         ALR   R0,R1               IF ZERO,                             34064000
         BZ    SOC20               OPEN JCL DATA SET.                   34064500
         $GETBUF TYPE=UNPROT       GET AN UNPROTECTED BUFFER.           34065000
         BNZ   SSVOFAIL            ERROR IF NONE AVAILABLE.             34065500
         L     R7,PCEJCT           RESTORE JCT ADDRESS IN R7.           34066000
         ST    R1,SDBUBF           SAVE UBF ADDRESS IN SDB.             34066500
         LR    RBUF,R1             SET UBF REGISTER.                    34067000
         USING BFD,RBUF            SET UBF ADDRESSABILITY.              34067500
         MVI   BFID,C'U'           SET UBF IDENTIFIER.                  34068000
         OI    SDBFLG2,SDB2EOD     SHOW NO MORE DATA.                   34068500
         OI    SDBFLG1,SDB1GET     SHOW INPUT DATA SET.                 34069000
         MVC   BFDAT(L'SOCJCL),SOCJCL  MOVE FAKE JCL TO BUFFER.         34069500
         LA    R2,BFDAT            SET ADDRESS OF START                 34070000
         ST    R2,BFLOC            OF DATA IN BUFFER.                   34070500
         LM    R0,R1,JPCEXBNM      GET BATCH MONITOR JOB NAME.          34071000
         STM   R0,R1,SOCJNM(R2)    SET IT AS JOB NAME.                  34071500
         STM   R0,R1,SOCPNM(R2)    SET IT AS PROCEDURE NAME.            34072000
         B     SOC30               CONTINUE BY OPENING JCLI.            34072500
         DROP  RBUF                DROP BUFFER ADDRESSABILITY.          34073000
*                                                                       34073500
*              IF NOT BATCH MONITOR, OPEN JCL DATA SET                  34074000
*                                                                       34074500
SOC20    DS    0H                                                       34075000
         L     R15,$SVPDDB1          POINT TO                        R4 34075500
         LA    R0,IOTPDBOJ(RIOT,R15)  JCL PDDB                       R4 34075800
         ST    R0,SDBPDDB          SET POINTER IN SDB.                  34076000
         CALL  HOOLDINP            OPEN OLD INPUT DATASET.              34076500
         BNZ   SSVOFAIL            BRANCH IF HOOLDINP FAILED.           34077000
         CALL  HCNVFDAD            CONVERT SDBMTTR TO FDAD              34077500
         OI    SDBFLG2,SDB2IOA     SHOW I/O ACTIVE.                     34078000
         EXCP  SDBIOB              AND DO INITIAL READ.                 34078500
         WAIT  1,ECB=SDBECB        WAIT FOR I/O TO END.                 34079000
SOC30    DS    0H                                                       34079500
*                                                                       34080000
*              OPEN THE JCLI DATASET                                    34080500
*                                                                       34081000
         LA    R3,JPCEJCLI         POINT TO ACB.                        34081500
         L     R15,$SVPDDB1          POINT TO                        R4 34081600
         LA    R0,IOTPDBOI(RIOT,R15)  JCL IMAGES PDDB                R4 34081700
         CALL  HFOPSUB             SET SDB, ACB, DEB.                   34082000
         BNZ   SSVOFAIL            BRANCH IF HFOPSUB FAILED.            34082500
         CALL  HONEWOUT            OPEN NEW OUTPUT DATASET.             34084000
         BNZ   SSVOFAIL            BRANCH IF HONEWOUT FAILED.           34084500
         OI    SDBFLG1,SDB1OUT     SHOW DATA SET SYSOUT.                34085000
*                                                                       34085500
*              OPEN THE SYSTEM MESSAGES DATASET                         34086000
*                                                                       34086500
         LA    R3,JPCEMSG          POINT TO ACB.                        34087000
         L     R15,$SVPDDB1          POINT TO                        R4 34087100
         LA    R0,IOTPDBOM(RIOT,R15)  SYSTEM MESSAGES PDDB           R4 34087200
         CALL  HFOPSUB             SET SDB, ACB, DEB.                   34087500
         BNZ   SSVOFAIL            BRANCH IF HFOPSUB FAILED.            34088000
         CALL  HONEWOUT            OPEN NEW OUTPUT DATASET.             34089500
         BNZ   SSVOFAIL            BRANCH IF HONEWOUT FAILED.           34090000
         OI    SDBFLG1,SDB1OUT     SHOW DATA SET SYSOUT.                34090500
*                                                                       34091000
*              OPEN THE HASP JOB LOG DATASET                            34091500
*                                                                       34092000
         LA    R3,SJBLACB          POINT TO ACB.                        34092500
         L     R15,$SVPDDB1          POINT TO                        R4 34092600
         LA    R0,IOTPDBOL(RIOT,R15)  HASP JOB LOG PDDB              R4 34092700
         CALL  HFOPSUB             SET SDB, ACB, DEB.                   34093000
         BNZ   SSVOFAIL            BRANCH IF HFOPSUB FAILED.            34093500
         CALL  HONEWOUT            OPEN NEW OUTPUT DATASET.             34095000
         BNZ   SSVOFAIL            BRANCH IF HONEWOUT FAILED.           34095500
         OI    SDBFLG1,SDB1OUT     SHOW DATA SET SYSOUT.                34096000
         L     R3,SDBUBF           POINT TO UNPROTECTED BUFFER.         34096500
         USING BFD,R3              SET BUFFER ADDRESSABILITY.           34097000
         L     R1,BFLOC            GET PLACE TO PUT JOB LOG HEADER.  R4 34097500
         MVC   0(HJLHDL,R1),HJLHDR MOVE 'H A S P   J O B   L O G'.      34098000
         LA    R1,HJLHDL(,R1)      UPDATE BUFFER POSITION               34100300
         ST    R1,BFLOC            AND SET NEW POSITION.             R4 34100400
         LH    R1,$SVBFSIZ              UPDATE LENGTH                R4 34100500
         SL    R1,=A(BFDAT-BFIO-HJLHDL)  REMAINING                   R4 34100600
         ST    R1,BFLEN                   IN UBF.                    R4 34100700
         L     R1,BFRCT            GET BUFFER COUNT            @OZ17756 34100710
         LA    R1,1(,R1)           UPDATE                      @OZ17756 34100720
         ST    R1,BFRCT             COUNT                      @OZ17756 34100730
         DROP  R3                  DROP BUFFER ADDRESSABILITY.          34100800
*                                                                       34101000
*              OPEN THE INTERNAL TEXT DATASET                           34101500
*                                                                       34102000
         LA    R3,JPCETXT          POINT TO ACB.                        34102500
         L     R15,$SVPDDB1          POINT TO                        R4 34102600
         LA    R0,IOTPDBOT(RIOT,R15)  INTERNAL TEXT PDDB             R4 34102700
         CALL  HFOPSUB             SET SDB, ACB, DEB.                   34103000
         BNZ   SSVOFAIL            BRANCH IF HFOPSUB FAILED.            34103500
         CALL  HONEWOUT            OPEN NEW OUTPUT DATASET.             34105000
         BNZ   SSVOFAIL            BRANCH IF HONEWOUT FAILED.           34105500
*                                                                       34106000
*              RETURN TO CALLER                                         34106500
*                                                                       34107000
         MODESET EXTKEY=HASP       SET HASP KEY BEFORE RETURN.          34107500
         L     R13,SJBSAVE+4       POINT TO USER SAVEAREA.              34108000
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   34108500
         SR    R15,R15             SHOW CALLER GOOD COMPLETION.         34109000
         BR    R14                 RETURN.                              34109500
         SPACE 3                                                        34110000
HJLHDR   DS    0H                  JES2 JOB LOG HEADER                  34110500
         DC    AL1(0)              ZERO TEXT LENGTH                     34111000
         DC    AL1(LRC1CCTL+LRC1TMCH)  MACHINE CARRIAGE CONTROL         34111500
         DC    AL1(0)              ZERO LRECL                           34112000
         DC    X'8B'               IMMED SKIP TO CHANNEL 1              34112500
HJLT     EQU   *                   TITLE START                          34113000
         DC    AL1(HJLTL-(LRCSOUT-LRCDSECT))  TEXT LENGTH               34113500
         DC    AL1(LRC1CCTL+LRC1TMCH)  MACHINE CARRIAGE CONTROL         34114000
         DC    AL1(HJLTL-(LRCSOUT-LRCDSECT))  LRECL                     34114500
         DC    X'19'               PRINT AND SPACE 3                    34115000
         DC    CL48' '             CENTER ON 120 WIDTH                  34115500
         DC    C'J E S 2   J O B   L O G'                               34116000
HJLTL    EQU   *-HJLT              TITLE LENGTH                         34116500
HJLHDL   EQU   *-HJLHDR            HEADER LENGTH                        34117000
         SPACE 3                                                        34118500
*                                                                       34118600
*              RETURN IF CONVERTER OPENS FAILED                         34118700
*                                                                       34119000
SOC800   DS    0H                  ERROR CODE 4                         34119500
SSVOFAIL EQU   SOC800              EQUATE TO OLD LABEL.                 34120000
         L     RSDB,SJBSDB         POINT TO AN SDB.                     34120500
         LTR   RSDB,RSDB           IF NO MORE,                          34121000
         BZ    SOC810              RETURN.                              34121500
         CALL  $SDBFREE            DECHAIN & FREE BUFS & SDB.           34122000
         B     SOC800              TRY FOR ANOTHER SDB.                 34122500
SOC810   L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA.         34123000
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS.          34123500
         LA    R15,4               SET ERROR CODE 4.                    34124000
         LTR   R15,R15             SET CONDITION CODE 2.                34124500
         BR    R14                 RETURN TO CALLER.                    34125000
         SPACE 3                                                        34125500
SOC820   DS    0H                  ERROR CODE 8                         34126000
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS.          34126500
         LA    R15,8               SET ERROR CODE 8.                    34127000
         LTR   R15,R15             SET CONDITION CODE 2.                34127500
         BR    R14                 RETURN TO CALLER.                    34128000
         SPACE 3                                                        34128500
         DROP  RIOT,R7,R8,R12,R14,R15  DROP BASES.                      34129000
         SPACE 3                                                        34129500
*                                                                       34130000
*              JCL TO USE WITH BATCH MONITOR                            34130500
*                                                                       34131000
*//JPCEXBNM JOB 1,SYS,MSGLEVEL=1                                        34131500
*//FAKE EXEC JPCEXBNM                                                   34132000
*//GO.SYSIN DD *                                                        34132500
*                                                                       34133000
* JCL STARTS ---                                                        34133500
SOCXBJCL EQU   *                                                        34134000
* JOB CARD ---                                                          34134500
SOCJ1    DC    AL1(L'SOCJ1A,0,80)                                       34135000
SOCJ1A   DC    C'//******** JOB 1,SYS,MSGLEVEL=1'                       34135500
* EXECUTE CARD ---                                                      34136000
SOCJ2    DC    AL1(L'SOCJ2A,0,80)                                       34136500
SOCJ2A   DC    C'//FAKE EXEC ********'                                  34137000
* SYSIN DD CARD ---                                                     34137500
SOCJ3    DC    AL1(L'SOCJ3A,0,80)                                       34138000
SOCJ3A   DC    C'//GO.SYSIN DD *'                                       34138500
* END-OF-BUFFER MARKER ---                                              34139000
SOCJ4    DC    AL1(LRCBFEND)                                            34139500
* EQUATES FOR USE IN EXECUTABLE CODE ---                                34140000
SOCJCL   EQU   SOCXBJCL,*-SOCXBJCL JCL TO MOVE TO BUFFER                34140500
SOCJNM   EQU   SOCJ1A+2-SOCJCL,8   JOB NAME                             34141000
SOCPNM   EQU   SOCJ2A+12-SOCJCL,8  PROCEDURE NAME                       34141500
         TITLE 'FAKE OPEN SUBROUTINE'                                   34142000
*********************************************************************** 34142100
*                                                                     * 34142200
*        HFOPSUB -- ACB 'FAKE OPEN' SUBROUTINE -- OBTAIN SDB          * 34142300
*                                                                     * 34142400
* INPUT  R0    - PDDB ADDRESS                                         * 34142500
*        R3    - ACB ADDRESS                                          * 34142600
*        RIOT  - IOT ADDRESS                                          * 34142700
*        RSJB  - SJB ADDRESS                                          * 34142800
*        R14   - RETURN ADDRESS                                       * 34142900
*        R15   - ENTRY POINT ADDRESS                                  * 34143000
*                                                                     * 34143100
* OUTPUT R1    - PDDB ADDRESS                                         * 34143200
*        R3    - DEB ADDRESS                                          * 34143300
*        RSDB  - SDB ADDRESS                                          * 34143400
*                                                                     * 34143500
*        CC    -     ZERO = NORMAL COMPLETION                         * 34143600
*              - NON-ZERO = ABNORMAL COMPLETION                       * 34143700
*                           GETMAIN FAILED FOR SDB                    * 34143800
*                                                                     * 34143900
*********************************************************************** 34144000
         SPACE 1                                                     R4 34144100
         USING HFOPSUB,R15         PROVIDE LOCAL ADDRESSABILITY      R4 34144200
         USING IFGACB,R3           PROVIDE ACB ADDRESSABILITY        R4 34144300
         SPACE 1                                                     R4 34144400
         CNOP  0,8                                                   R4 34144500
HFOPSUB  DS    0H                                                    R4 34144600
         LR    R1,R14              SAVE RETURN ADDRESS.                 34145000
         CALL  $SDBINIT            CREATE AN SDB.                       34145500
         BNZR  R1                  RETURN IF SDB NOT BUILT.             34146000
         LR    R14,R1              RESTORE RETURN ADDRESS.              34146500
         SPACE 1                                                     R4 34146600
         BALR  R15,0               RE-ESTABLISH LOCAL                R4 34146700
         USING *,R15                ADDRESSABILITY                   R4 34146800
         SPACE 1                                                     R4 34146900
         OI    ACBOFLGS,ACBOPEN    SHOW THAT ACB IS OPEN.               34148500
         MVC   ACBINRTN,=A(HASPAM) POINT ACB TO HASP ACCESS METHOD.     34149000
         L     R3,ACBDEB-1         POINT TO DATA SET'S DEB.             34149500
         ST    R3,SDBDEB           SET DEB POINTER IN SDB.              34150000
         USING DEBBASIC,R3         USE THE DEB DSECT.                   34150500
         ST    RSDB,DEBIRBAD       POINT THE DEB TO THE SDB.            34151000
         MVC   DEBAPPAD,=A(HASPAM) POINT THE DEB TO HASP ACCESS METHOD. 34151500
         ST    RIOT,SDBAIOT        POINT SDB TO ALLOCATION IOT          34152000
         ST    RIOT,SDBPIOT        AND TO IOT CONTAINING PDDB.          34152500
         OI    SDBFLG1,SDB1FOPN    SHOW DATA SET FAKE-OPENED.           34153000
         SPACE 1                                                     R4 34153100
         LTR   R1,R0               PICK-UP PDDB ADDRESS              R4 34153200
         BZ    HFOPEXIT             AND RETURN IF ZERO               R4 34153300
         ST    R1,SDBPDDB          SAVE PDDB ADDRESS IN SDB          R4 34153400
         TM    PDBFLAG2-PDBDSECT(R1),PDB2TCEL    SET MAJOR TAB FLAG  R4 34153500
         BZ    HFOPEXIT                           IN SDB IF PDDB     R4 34153600
         OI    SDBTAB+(TABFLAG-TABDSECT),TABMAJOR  IS TRACK-CELLED   R4 34153700
         SPACE 1                                                     R4 34153800
HFOPEXIT DS    0H                                                    R4 34153900
         SR    R15,R15             SHOW GOOD COMPLETION                 34155000
         BR    R14                 RETURN TO CALLER.                    34155500
         SPACE 1                                                     R4 34155600
         DROP  ,                   SUSPEND ALL ADDRESSABILITY        R4 34155700
         SPACE 2                                                     R4 34155800
         LTORG ,                                                     R4 34155900
         TITLE 'HOCSETUP - OPEN && CLOSE SETUP SUBROUTINE'              34156500
*                                                                       34157000
*              HOCSETUP - OPEN & CLOSE SETUP SUBROUTINE                 34157500
*                                                                       34158000
*        REGISTERS ON ENTRY - AS SET BY $PROLOG                         34158500
*                                                                       34159000
*        REGISTERS ON EXIT -                                            34159500
*              R6  - DEB POINTER                                        34160000
*              R7  - JFCB POINTER                                       34160500
*              R8  - SSDA POINTER                                       34161000
*              R10 - SDB/DCT POINTER                                    34161500
*              R0-R5,R15 - UNPREDICTABLE                            R41 34162000
*              R11-R14 - UNCHANGED                                  R41 34162500
*                                                                       34163000
*        EXIT OFFSETS -                                                 34163500
*              +0  - VALID INTERNAL READER                              34164000
*              +4  - VALID SYSIN DATA SET                               34164500
*              +8  - VALID SYSOUT DATA SET                              34165000
*              +12 - VALID PROCESS-SYSOUT DATA SET                      34165500
*              +16 - VALID UNKNOWN-TYPE DATA SET                        34166000
*              +20 - ERROR IN VALIDATION                                34166500
*                                                                       34167000
HOCSETUP DS    0H                                                       34167500
         USING *,R5                ESTABLISH                        R41 34168000
         LR    R5,R15                LOCAL ADDRESSABILITY           R41 34168100
         LR    RSIB,RSOX           POINT R8 TO SSDA.                    34168500
         USING SSDABGN,RSIB        SET SSDA ADDRESSABILITY.             34169000
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             34169500
         L     RJFC,SSDAJFCB       POINT TO JFCB FROM SSDA.             34170000
         USING INFMJFCB,RJFC       SET JFCB ADDRESSABILITY.             34170500
         L     RDEB,SSDADEBP       POINT TO DEB FROM SSDA.              34171000
         USING DEBBASIC,RDEB       SET DEB ADDRESSABILITY.              34171500
         L     RSDB,SSDASSCM       POINT TO SDB/DCT FROM SSDA.          34172000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              34172500
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              34173000
*                                                                       34175500
*              VERIFY SJB PRESENT IF REQUIRED                           34176000
*                                                                       34176500
         LTR   RSDB,RSDB           IF NO SDB/DCT PRESENT,               34177000
         BZ    HOCS60              PROCESS SPECIAL INTRDR.              34177500
         LTR   R12,R12             OTHERWISE IF SJB NOT PRESENT,        34178000
         BNM   20(,R14)            RETURN +20 - ERROR.                  34178500
*                                                                       34179000
*              TEST FOR SUBSYSTEM DATASET BLOCK                         34179500
*                                                                       34180000
         CLC   SDBID,=CL4'SDB'     IF SDB ID NOT PRESENT,               34180500
         BNE   HOCS40              GO TEST FOR INTRDR ID.               34181000
*                                                                       34181100
*              SDB - IF CLOSE, RESTORE I/O                              34181200
*                                                                       34181300
         CLI   SJBXQFN1+1,SSOBCLOS SKIP IF                              34181400
         BNE   HOCS10              FUNCTION ISN'T CLOSE.                34181500
         TM    SDBFLG2,SDB2IOA     IF FLAG SHOWS THAT                   34181600
         BZ    HOCS10              I/O IS ACTIVE                        34181700
         CLI   SDBICMP,X'48'       YET IOB COMPLETION CODE              34181800
         BNE   HOCS10              SHOWS PURGED,                        34181900
         MVI   SDBECB,0            CLEAR ECB                            34182000
         LR    R4,R14              SAVE RETURN REG ACROSS EXCP      R41 34182100
         EXCP  SDBIOB              AND RE-EXCP.                         34182200
         LR    R14,R4              RESTORE RETURN REGISTER          R41 34182300
HOCS10   DS    0H                                                       34182400
*                                                                       34182500
*                  TEST FOR SYSOUT                                      34182600
*                                                                       34182700
         CLI   DSNDSTYP,C'S'       BRANCH IF NEITHER                    34183000
         BNE   HOCS20              SYSIN NOR SYSOUT.                    34183500
         CLI   DSNDSTYP+1,C'O'     IF DSTYP IS 'SO',                    34184000
         BE    8(,R14)             RETURN +8 - SYSOUT.                  34184500
*                                                                       34185000
*                  TEST FOR SYSIN                                       34185500
*                                                                       34186000
         CLI   DSNDSTYP+1,C'I'     IF DSTYP IS 'SI',                    34186500
         BE    4(,R14)             RETURN +4 - SYSIN.                   34187000
*                                                                       34187500
*                  TEST FOR PROCESS-SYSOUT                              34188000
*                                                                       34188500
HOCS20   DS    0H                                                       34189000
         CLC   DSNDSTYP,=C'PS'     IF DSTYP IS 'PS',                    34189500
         BE    12(,R14)            RETURN +12 - PSO.                    34190000
         B     16(,R14)            ELSE RETURN +16 - UNKNOWN.           34190500
*                                                                       34191000
*              TEST FOR NORMAL INTERNAL READER                          34191500
*                                                                       34192000
HOCS40   DS    0H                                                       34192500
         USING DCTDSECT,RSDB       SET DCT ADDRESSABILITY.              34193000
         CLC   =C'INTRDR',DCTDEVN  IF ID IS 'INTRDR',                   34193500
         BER   R14                 RETURN +0 - INTRDR.                  34194000
         B     20(,R14)            ELSE RETURN +20 - ERROR.             34194500
*                                                                       34195000
*              TEST FOR SPECIAL INTERNAL READER                         34195500
*                                                                       34196000
HOCS60   DS    0H                                                       34196500
         CLC   =C'.MSTR    .MS0000.',DSNSSNM+4  IF NOT SPECIAL,         34197000
         BNE   20(,R14)            RETURN +20 - ERROR.                  34197500
         L     RSDB,$SVIRDRS       POINT TO STCINRDR.                   34198000
         CLC   DSNDDNM,DCTDEVN     IF IT MATCHES DDNAME,                34198500
         BER   R14                 RETURN +0 - INTRDR.                  34199000
         L     RSDB,DCTCHAIN       POINT TO TSOINRDR.                   34199500
         CLC   DSNDDNM,DCTDEVN     IF IT MATCHES DDNAME,                34200000
         BER   R14                 RETURN +0 - INTRDR.                  34200500
         B     20(,R14)            ELSE RETURN +20 - ERROR.             34201000
         SPACE 3                                                        34201500
         DROP  ,                   DROP ALL ADDRESSABILITY.             34202000
         TITLE 'HASP SUBSYSTEM SUPPORT ROUTINE -- CLOSE'                34202500
*                                                                       34203000
*                                                                       34203500
*              HASP SUBSYSTEM SUPPORT ROUTINE -- CLOSE                  34204000
*                                                                       34204500
*                                                                       34205000
HOSCLOS  $PROLOG SSOBCLOS,SSDASIZE,LOCK=SDB  CLOSE                      34205500
         SPACE 1                                                        34206000
HOSCLOSB DS    0H                  CLOSE BASE ADDRESS.                  34206500
*                                                                       34207000
*              USE SUBROUTINE TO SET UP REGISTERS                       34207500
*              AND TO DETERMINE TYPE OF CLOSE                           34208000
*                                                                       34208500
         CALL  HOCSETUP            CALL SUBROUTINE                      34209000
         USING DEBBASIC,RDEB       SET DEB ADDRESSABILITY.              34209500
         USING INFMJFCB,RJFC       SET JFCB ADDRESSABILITY.             34210000
         USING SSDABGN,RSIB        SET SSDA ADDRESSABILITY.             34210500
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.             34211000
         B     HC000               INTERNAL READER                      34211500
         B     HC100               SUBSYSTEM DATA SET - SI              34212000
         B     HC200               SUBSYSTEM DATA SET - SO              34212500
         B     HC300               SUBSYSTEM DATA SET - PS              34213000
         B     HC400               SUBSYSTEM DATA SET - INVALID         34213500
         B     HCERR               ERROR DETECTING TYPE                 34214000
         EJECT                                                          34214500
*                                                                       34215000
*              C L O S E   I N T E R N A L   R E A D E R                34215500
*                                                                       34216000
HC000    DS    0H                                                       34216500
         USING DCTDSECT,RSDB       SET DCT ADDRESSABILITY.              34217000
         LM    R2,R3,HCIEOF        GET POINTERS TO /*EOF RECORD.        34217500
         L     R1,PSATOLD-PSA      POINT TO CURRENT TCB.                34218000
         USING TCB,R1              SET TCB ADDRESSABILITY.              34218500
         TM    TCBFBYT1,TCBRTM2    SET CC=3 IF TASK ABENDING.           34219000
         DROP  R1                  DROP TCB ADDRESSABILITY.             34219500
         BZ    *+8                 IF TASK IS ABENDING,                 34220000
         LM    R2,R3,HCIDEL        GET POINTERS TO /*DEL RECORD.        34220500
         L     RACB,DEBDCBAD       POINT TO THE ACB.                    34221000
         LA    RACB,0(,RACB)       BE SURE HIGH BIT IS OFF.             34221500
         AL    R12,=A(HAMBASE-HOSCLOSB)  ADJUST R12 FOR BAL.            34222000
         USING HAMBASE,R12         TELL ASSEMBLER ABOUT IT.             34222500
         BAL   R14,HINTRDR         CALL INTRDR SUBROUTINE.              34223000
         BALR  R15,0               TO RESTORE BASE, ESTABLISH           34223500
         USING *,R15               TEMPORARY ADDRESSABILITY.            34224000
         SL    R12,=A(HAMBASE-HOSCLOSB)  RE-ADJUST R12.                 34224500
         DROP  R15                 DROP TEMPORARY BASE.                 34225000
         USING HOSCLOSB,R12        TELL ASSEMBLER ABOUT IT.             34225500
         CLI   RIDJOBID,C'J'       IF USER INTRDR              @OZ29612 34225600
         BE    HCRET               MERELY RETURN               @OZ29612 34225700
         SLR   R1,R1               ZERO THE ASCB POINTER       @OZ29612 34225800
         ST    R1,RIDASCBP         FOR STC AND TSU             @OZ29612 34225900
         B     HCRET               RETURN FROM CLOSE.                   34226000
         DROP  RDEB                DROP DEB ADDRESSABILITY.             34226500
         DS    0F                                                       34227000
HCIEOF   DC    AL1(RIDCLS),AL3(HCIEOFC),A(5)  /*EOF POINTERS            34227500
HCIDEL   DC    AL1(RIDCLS),AL3(HCIDELC),A(5)  /*DEL POINTERS            34228000
HCIEOFC  DC    C'/*EOF'            /*EOF TEXT                           34228500
HCIDELC  DC    C'/*DEL'            /*DEL TEXT                           34229000
         EJECT                                                          34229500
*                                                                       34230000
*              C L O S E   S Y S I N   D A T A   S E T                  34230500
*                                                                       34231000
HC100    DS    0H                                                       34231500
*                                                                       34232000
*              C L O S E   P R O C E S S - S Y S O U T                  34232500
*                                                                       34233000
HC300    DS    0H                                                       34233500
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              34234000
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              34234500
         TM    SJBFLG1,SJB1XBM+SJB1XBWT  IF EXEC BATCH MONITOR,         34235000
         BM    HCRET               NEVER FREE BUFFERS.                  34235500
         L     R1,SDBECB           LOAD ECB                         R41 34235700
HC305    LR    R2,R1               RELOAD ECB                       R41 34236000
         LR    R2,R1               RELOAD ECB                       R41 34236100
         N     R2,=XL4'7F000000'   RESET WAIT BIT                   R41 34236200
         CS    R1,R2,SDBECB        REPLACE ECB                      R41 34236300
         BNE   HC305               TRY AGAIN IF UNSUCCESSFUL        R41 34236400
         WAIT  1,ECB=SDBECB        BE SURE I/O IS COMPLETE.             34236500
         L     RBUF,SDBPBF         FREE ALL                             34237000
         BAL   R5,HCFREBP          PROTECTED BUFFERS.                   34237500
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         34238000
         MVC   SDBTRK+5(3),BFRBA+5-BFD(RBUF)  SAVE REC NUMBER.          34238500
         BAL   R5,HCFREBU          FREE THE BUFFER.                     34239000
         L     RBUF,SDBHBF         FREE ALL                             34239500
         BAL   R5,HCFREBU          UPDATE-HOLD BUFFERS.                 34240000
         SLR   R0,R0               ZERO POINTERS TO                     34240500
         ST    R0,SDBPBF           PROTECTED,                           34241000
         ST    R0,SDBUBF           UNPROTECTED, AND                     34241500
         ST    R0,SDBHBF           HOLD BUFFERS.                        34242000
         B     HC900               GO CONCLUDE CLOSE.                   34242500
         EJECT                                                          34243000
*                                                                       34243500
*              C L O S E   S Y S O U T   D A T A   S E T                34244000
*                                                                       34244500
HC200    DS    0H                                                       34245000
*                                                                       34245500
*              1. TRUNCATE AND WRITE BUFFER FOR CLOSE                   34246000
*                                                                       34246500
         TM    SJBFLG1,SJB1XBM+SJB1XBWT  IF XBM HAS NO JOB,             34246600
         BO    HC210               JUST FREE BUFFERS.                   34246700
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         34247000
         USING BFD,RBUF            USE BUFFER DSECT.                    34247500
         L     R1,BFLOC            GET SPOT FOR NEXT RECORD.            34248000
         CLI   SDBCCW3+7,1         DON'T TEST FOR A NULL DS             34248100
         BH    HC205               IF TWO OR MORE OPENS.                34248200
         LA    R0,BFDAT            IF SOME DATA IN BUFFER,              34248500
         CLR   R0,R1               NOT AN EMPTY DATA SET -              34248600
         BNE   HC205               PROCEED NORMALLY.                    34248700
         CLC   SDBTRK,SDBTRKF      IF NOT ORIGINAL TRACK,               34248800
         BNE   HC205               PROCEED NORMALLY.                    34248900
         L     R2,SDBPDDB          NULL DATA SET ---                    34249000
         OI    PDBFLAG1-PDBDSECT(R2),PDB1NULL  SHOW DS NULL.            34249100
         L     R1,SDBPIOT          REWRITE                              34249200
         L     R0,IOTTRACK-IOTDSECT(,R1)  THE                           34249300
         NI    IOTFLAG1-IOTDSECT(R1),255-IOT1CKPT  DATASET'S            34249400
         CALL  HCBWR               IOT.                                 34249500
         MVI   SDBCCW3+7,0         ZERO THE OPEN COUNT.                 34249600
         B     HC210               THEN JUST FREE BUFFERS.              34249700
         USING LRCDSECT,R1         NOT NULL.  SET LRC BASE.             34249800
HC205    LA    R5,BFIO             GET ADDR OF                 @OZ29839 34249900
         AH    R5,$SVBFSIZ           END OF BUFFER.            @OZ29839 34249920
         CR    R5,R1               COMPARE BFLOC TO END.       @OZ29839 34249930
         BNH   HCERR               ERROR IF BFLOC TOO BIG.     @OZ29839 34249940
         CR    RBUF,R1             COMPARE BFLOC TO START.     @OZ29839 34249950
         BNL   HCERR               ERROR IF BFLOC TOO SMALL.   @OZ29839 34249960
         MVI   LRCTLENG,LRCBFEND   SET END OF BUFFER.          @OZ29839 34249970
         L     R2,SSDADEBP         POINT TO THE DEB.                    34250000
         USING DEBBASIC,R2         AND USE ITS DSECT.                   34250100
         LA    R0,BFDAT            GET START OF DATA ADDRESS   @OZ30041 34250200
         CR    R0,R1               IF NULL BUFFER,             @OZ30041 34250300
         BE    HC206                 SKIP FIRST WRITE          @OZ30041 34250400
         L     R1,DEBDCBAD         POINT TO THE ACB.                    34250500
         LA    R1,0(,R1)           ZERO HIGH-ORDER BYTE.                34251000
         LNR   R1,R1               SHOW SVC ARG IS ACB.                 34251500
         LA    R0,HSVCEOBP         SET PUT-END-OF-BLOCK CODE            34252000
         SVC   HAMSVC              AND CALL HAMSVC.                     34252500
         L     R1,BFLOC            GET SPOT FOR NEXT RECORD.            34253000
         CR    R5,R1               COMPARE BFLOC TO END.       @OZ29839 34253100
         BNH   HCERR               ERROR IF BUFLOC TOO LARGE.  @OZ29839 34253200
         CR    RBUF,R1             COMPARE BFLOC TO START.     @OZ29839 34253300
         BNL   HCERR               ERROR IF BFLOC TOO SMALL.   @OZ29839 34253400
         MVI   LRCTLENG,LRCBFEND   TRUNCATE THE BUFFER.                 34253500
HC206    DS    0H                                              @OZ30041 34253600
         OI    SDBFLG1,SDB1CLOS    SHOW HAMSVC WE'RE CLOSING.           34254000
         L     R1,DEBDCBAD         POINT TO THE ACB.                    34254500
         LA    R1,0(,R1)           ZERO HIGH-ORDER BYTE.                34255000
         LNR   R1,R1               SHOW SVC ARG IS ACB.                 34255500
         LA    R0,HSVCEOBP         SET PUT-END-OF-BLOCK CODE            34256000
         SVC   HAMSVC              AND CALL HAMSVC.                     34256500
         NI    SDBFLG1,255-SDB1CLOS  RESET THE CLOSE FLAG.              34257000
         DROP  R1,R2               DROP LRC, DEB BASES.                 34257500
*                                                                       34258000
*              2. WAIT TILL ALL BUFFERS ARE WRITTEN                     34258500
*                                                                       34259000
HC208    DS    0H                                                    R4 34259100
         L     R1,SDBECB           LOAD ECB                         R41 34259300
HC218    LR    R2,R1               RELOAD ECB                       R41 34259500
         LR    R2,R1               RELOAD ECB                       R41 34259600
         N     R2,=XL4'7F000000'   RESET WAIT BIT                   R41 34259700
         CS    R1,R2,SDBECB        REPLACE ECB                      R41 34259800
         BNE   HC218               TRY AGAIN IF UNSUCCESSFUL        R41 34259900
         WAIT  1,ECB=SDBECB        WAIT FOR I/O TO COMPLETE.            34260000
         TM    SDBFLG1,SDB1BFXS    CHN PGM ABORTED VIA SWAP-OUT...   R4 34260100
         BZ    HC209               BR IF NO                          R4 34260200
         ICM   R1,15,SDBPBF        ANY PBFS TO BE WRITTEN...         R4 34260300
         BZ    HC209               BR IF NO                          R4 34260400
         NI    SDBFLG1,255-SDB1BFXS  RESET EXCESSION ALLOWED         R4 34260500
         OI    SDBFLG2,SDB2IOA     SHOW I/O ACTIVE                   R4 34260600
         EXCP  SDBIOB              ISSUE EXCP                        R4 34260700
         B     HC208               WAIT FOR I/O TO COMPLETE          R4 34260800
*                                                                    R4 34260900
*              LOWER OPEN COUNT.  IF STILL OPEN FOR OTHERS, RETURN      34261000
*                                                                       34261500
HC209    DS    0H                                                    R4 34261600
         L     R1,SDBCCW3+4        GET OPEN COUNT.                      34262000
         BCTR  R1,0                DECREMENT IT.                        34262500
         ST    R1,SDBCCW3+4        STORE OPEN COUNT.                    34263000
         LTR   R1,R1               IF STILL OPEN FOR OTHERS,            34263500
         BNZ   HCRET               MERELY RETURN.                       34264000
*                                                                       34264500
*              3. FREE ALL BUFFERS                                      34265000
*                                                                       34265500
HC210    DS    0H                                                       34272000
         L     RBUF,SDBPBF         FREE ALL                             34272500
         BAL   R5,HCFREBP          PROTECTED BUFFERS.                   34273000
         L     RBUF,SDBUBF         FREE ALL                             34273500
         BAL   R5,HCFREBU          UNPROTECTED BUFFERS.                 34274000
         L     RBUF,SDBHBF         FREE ALL                             34274500
         BAL   R5,HCFREBU          UPDATE-HOLD BUFFERS.                 34275000
         L     RBUF,SDBFBF         FREE ALL                             34275500
         BAL   R5,HCFREBP          CH END FREE BUFFERS.                 34276000
         SLR   R0,R0               ZERO POINTERS TO                     34276500
         ST    R0,SDBPBF           PROTECTED,                           34277000
         ST    R0,SDBUBF           UNPROTECTED,                         34277500
         ST    R0,SDBHBF           HOLD, AND                            34278000
         ST    R0,SDBFBF           FREE BUFFERS.                        34278500
         STH   R0,SDBPBFCT         SHOW NO PROTECTED BUFFERS.           34279000
*                                                                       34279500
*              4. RETURN TO CALLER                                      34280000
*                                                                       34280500
         L     R1,SDBAIOT          POINT TO ALLOCATION IOT.             34281000
         TM    IOTFLAG1-IOTDSECT(R1),IOT1CKPT  CKPT REQUIRED...         34281500
         BZ    HC900               IF NOT, CONCLUDE CLOSE.              34282000
         NI    IOTFLAG1-IOTDSECT(R1),255-IOT1CKPT  RESET FLAG.          34282500
         L     R0,IOTTRACK-IOTDSECT(,R1)  R0=TRACK ADDRESS.             34283000
         CALL  HCBWR               WRITE THE IOT.                       34283500
         B     HC900               GO CONCLUDE CLOSE.                   34284000
         EJECT                                                          34284500
         SPACE 5                                                        34285000
*                                                                       34285500
*              ADD OTHER DATA SET TYPES HERE                            34286000
*                                                                       34286500
HC400    DS    0H                                                       34287000
         $MID  353                                                      34287500
         WTO   '&MID.CLOSE FAILED BECAUSE NOT SYSIN, SYSOUT, NOR PROCESC34288000
               S-SYSOUT',ROUTCDE=10,DESC=6                              34288500
         B     HCERR                                                    34289000
         DROP  RBUF,RJFC,RSIB      DROP BASES.                          34289500
         EJECT                                                          34290000
*                                                                       34290500
*              CONCLUDE CLOSE FOR ALL BUT INTRDR.                       34291000
*                                                                       34291500
HC900    DS    0H                                                       34292000
         SLR   R0,R0               ZERO OUT THE DEB                     34292500
         ST    R0,SDBDEB           POINTER IN THE SDB.                  34293000
         SPACE 3                                                        34293500
*                                                                       34294000
*              RETURN NORMALLY TO CALLER                                34294500
*                                                                       34295000
HCRET    DS    0H                                                       34295500
         SLR   R15,R15             SET RETURN CODE TO ZERO.             34296000
         B     HCEXIT              GO RETURN.                           34296500
         SPACE 3                                                        34297000
*                                                                       34297500
*              RETURN ABNORMALLY TO CALLER                              34298000
*                                                                       34298500
HCERR    DS    0H                                                       34299000
         LA    R15,4               NOTE- RETURN CODES ARE NOT DEFINED.  34299500
         SPACE 3                                                        34300000
HCEXIT   DS    0H                                                       34300500
         LR    R1,R13              POINT R1 TO SJB/USER SAVE.           34301000
         LTR   R12,R12             IF R1 POINTS TO USER SAVE,           34301500
         BNM   *+8                 SKIP POINTING FROM SJB.              34302000
         L     R1,4(,R1)           POINT TO USER SAVEAREA.              34302500
         L     R1,24(,R1)          POINT TO SSOB.                       34303000
         USING SSOBEGIN,R1         SET BASE.                            34303500
         L     R1,SSOBINDV         POINT THENCE TO SSDA.                34304000
         USING SSDABGN,R1          SET BASE.                            34304500
         L     R1,SSDADEBP         POINT THENCE TO DEB.                 34305000
         USING DEBBASIC,R1         SET BASE.                            34305500
         L     R1,DEBDCBAD         POINT THENCE TO ACB.                 34306000
         USING IFGACB,R1           SET BASE.                            34306500
         SLR   R0,R0               ZERO OUT                             34307000
         ST    R0,ACBINRTN         ACCESS METHOD ADDRESS.               34307500
         SPACE 1                                                        34308000
        $EPILOG KEY=0              RETURN TO CALLER                  R4 34308100
         TITLE 'FAKE CLOSE FOR CONVERTER DATASETS'                      34309000
*                                                                       34309500
*                                                                       34310000
*              FAKE CLOSE FOR CONVERTER DATASETS                        34310500
*                                                                       34311000
*                                                                       34311500
SSVCLSC  DS    0H                                                       34312000
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      34312500
         BALR  R12,0               ESTABLISH                            34313000
         USING *,R12               ADDRESSABILITY.                      34313500
         MODESET EXTKEY=ZERO       SET KEY ZERO FOR FAKE CLOSE.         34314000
         USING PCEDSECT,R8         USE PCE DSECT.                       34314500
         LR    R2,R13              SAVE USER SAVEAREA POINTER.          34315000
         LR    RSVT,R5             HOSCNVT PASSES SSVT IN R5.           34315500
         L     RSJB,JPCESJBP       POINT TO CONVERTER SJB.              34316000
         ST    RSJB,8(,R2)         POINT USER SAVEAREA TO NEXT.         34316500
         ST    R2,SJBSAVE+4        POINT SJB SAVEAREA TO USER'S.        34317000
         L     R0,=A(HAMNULL)      GET NULL ADDRESS                  R4 34317100
         ST    R0,SJBLACB+ACBINRTN-IFGACB  NULLIFY JOB LOG           R4 34317200
*                                                                       34317500
*              FOR EACH SDB, INVOKE FAKE CLOSE                          34318000
*                                                                       34318500
         L     R7,PCEJCT           POINT R7 TO THE JCT.                 34319000
*              THIS LINE DELETED BY APAR NUMBER                @OZ26284 34319500
SSVCC10  DS    0H                                                       34320000
         L     RSDB,SJBSDB         POINT TO AN SDB.                     34320500
         LTR   RSDB,RSDB           ARE WE THROUGH...                    34321000
         BZ    SSVCC20             IF SO, GO CHECK FOR HOLDING.         34321500
         CALL  HFCLSUB             NO.  GO TO FAKE CLOSE.               34322000
         CALL  $SDBFREE            FREE THE SDB.                        34322500
         B     SSVCC10             THEN DO NEXT SDB.                    34323000
*                                                                       34323500
*              IF CONVERTER ERROR, PROCESS FOR HOLD                     34324000
*                                                                       34324500
SSVCC20  DS    0H                                                       34325000
         TM    JCTJOBFL-JCTDSECT(R7),JCTTSCAN  TYPRUN = SCAN...      R4 34325100
         BO    SSVCC30             BR IF YES                         R4 34325200
         L     R1,4(,R13)          POINT TO CALLER'S SAVE AREA.         34325500
         L     R1,20(,R1)          INSPECT CALLER'S REGISTER 0.         34326000
         LTR   R1,R1               IF IT WAS ZERO,                      34326500
         BZ    SSVCC90             CONVERSION WAS SUCCESSFUL.           34327000
SSVCC30  DS    0H                                                    R4 34327100
         CALL  HJEAHOLD            ELSE PROCESS FOR HOLD.               34327500
*                                                                       34328000
*              RETURN TO CALLER                                         34328500
*                                                                       34329000
SSVCC90  DS    0H                                                       34329500
         MODESET EXTKEY=HASP       SET HASP KEY BEFORE RETURN.          34330000
         L     R13,4(,R13)         POINT TO USER SAVEAREA.              34330500
         LM    R14,R12,12(R13)     RESTORE REGISTERS.                   34331000
         BR    R14                 RETURN.                              34331500
         DROP  R8                  DROP PCE BASE.                       34332000
         TITLE 'FAKE CLOSE SUBROUTINE'                                  34332500
*                                                                       34333000
*                                                                       34333500
*              FAKE CLOSE SUBROUTINE - INPUT AND OUTPUT DATASETS        34334000
*                                                                       34334500
*                                                                       34335000
HFCLSUB  DS    0H                  L    RSDB,THE SDB TO CLOSE           34335500
*                                  L    R7,THE JCT FOR JOB              34336000
*                                  CALL HFCLSUB                         34336500
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      34337000
         BALR  R12,0               ESTABLISH                            34337500
HFCLBASE DS    0H                  LOCAL                                34338000
         USING *,R12               ADDRESSABILITY.                      34338500
HFCL00   DS    0H                                                       34339000
         TM    SDBFLG1,SDB1GET     IF INPUT DATA SET,                   34339500
         BO    HFCL30              SKIP OUTPUT LOGIC.                   34340000
         L     RBUF,SDBUBF         ELSE POINT TO UBF.                   34340500
         LTR   RBUF,RBUF           IF NO UBF (ABNORMAL),                34341000
         BZ    HFCL30              SKIP OUTPUT ROUTINES.                34341500
         USING BFD,RBUF            USE BUFFER DSECT.                    34342000
         USING JCTDSECT,R7         USE JCT DSECT.                       34342500
         L     R3,SDBPDDB          GET PDDB ADDRESS FROM SDB.           34343000
         USING PDBDSECT,R3         SET PDDB ADDRESSABILITY.             34343500
         LA    R8,BFDAT                 IF                              34344000
         CL    R8,BFLOC                  DATASET                        34344500
         BNE   HFCL05                     OPENED                        34345000
         CLC   SDBTRK,SDBTRKF              BUT NOT                      34345500
         BNE   HFCL05                       WRITTEN TO,                 34346000
         OI    PDBFLAG1,PDB1NULL             INDICATE EMPTY             34346500
*                                                                       34348000
*              OUTPUT - TEST FOR CONTINUATION TYPE                      34348500
*                                                                       34349000
HFCL05   DS    0H                                                       34349500
         LA    R8,JCTJLOGC         ASSUME HASP JOB LOG               R4 34350000
         CLI   SDBDKEY+1,PDBOUHJL  IF SO,                               34350500
         BE    HFCL10              GO DO FIRST TRUNCATION.              34351000
         LA    R8,JCTMSGSC         ASSUME SYSTEM MESSAGES            R4 34351500
         CLI   SDBDKEY+1,PDBOUMSG  IF SO,                               34352000
         BE    HFCL10              GO DO FIRST TRUNCATION.              34352500
         B     HFCL20              ELSE CLOSE IMMEDIATELY.              34353000
         EJECT                                                       R4 34353200
*                                                                       34353500
*              IF HASP JOB LOG OR SYS MSGS, TRUNCATE HERE.              34354000
*                                                                       34354500
HFCL10   DS    0H                                                       34355000
         TM    PDBFLAG1,PDB1NULL   IF DATASET EMPTY,                    34355500
         BO    *+8                  DON'T TRUNCATE TWICE.               34356000
         BAL   R14,HFCLTRNC        TRUNCATE BUFFER.                     34356500
         MVC   0(4,R8),SDBTRK+1    SAVE CONTINUE MTTR IN JCT        R41 34357000
         CLI   SDBDKEY+1,PDBOUHJL  IF NOT JES2 JOB LOG,              R4 34357200
         BNE   HFCL20                BRANCH AROUND                   R4 34357300
         TM    SJBFLG2,SJB2CONV    IF NOT FAKE-CLOSE FOR             R4 34357400
         BZ    HFCL20                CONVERTER, BRANCH AROUND        R4 34357500
         CLI   JCTJOBID,C'J'       IF NOT PLAIN VANILLA BATCH       R41 34357600
         BNE   HFCL20                JOB, BRANCH AROUND             R41 34357700
         TM    JCTJOBFL,JCTTSCAN   IF 'TYPRUN=SCAN',                R41 34357800
         BO    HFCL20                BRANCH AROUND                  R41 34357900
         L     R3,4(,R13)          CHECK CONVERTER'S                 R4 34358000
         L     R3,20(,R3)            RETURN CODE --                  R4 34358100
         LTR   R3,R3                 IF CONVERSION ERROR,            R4 34358200
         BNZ   HFCL20                BRANCH AROUND                   R4 34358300
         L     R3,BFLOC            PLACE 'JOB DELETED' BLURB IN JOB  R4 34358400
         MVC   0(HFCMSGL,R3),HFCMSG  LOG TERMINATOR BUFFER, TO BE    R4 34358500
         LA    R3,HFCMSGL(,R3)       OVER-WRITTEN IF JOB GOES        R4 34358600
         ST    R3,BFLOC              INTO EXECUTION                  R4 34358700
*                                                                       34358800
*              TRUNCATE & CLOSE ALL OUTPUT DATA SETS                    34358900
*                                                                       34359000
HFCL20   DS    0H                                                       34359100
         OI    SDBFLG1,SDB1CLOS    CAUSE DATA SET CLOSE.                34359500
         BAL   R14,HFCLTRNC        TRUNCATE BUFFER.                     34360000
         NI    SDBFLG1,255-SDB1CLOS  RESET CLOSE FLAG.                  34360500
*                                                                       34361000
*              BE SURE I/O IS COMPLETE                                  34361500
*                                                                       34362000
HFCL30   DS    0H                                                       34362500
         WAIT  1,ECB=SDBECB        ELSE WAIT TILL I/O INACTIVE.         34363000
         TM    SDBFLG1,SDB1GET     TEST FOR INPUT DATA SET           R4 34363100
         BO    HFCL50              BR IF YES                        R41 34363200
         TM    SDBFLG1,SDB1BFXS    CHN PGM ABORTED VIA SWAP-OUT...   R4 34363300
         BZ    HFCL40              BR IF NO                          R4 34363400
         ICM   R1,15,SDBPBF        ANY PBFS TO BE WRITTEN...         R4 34363500
         BZ    HFCL40              BR IF NO                          R4 34363600
         NI    SDBFLG1,255-SDB1BFXS  RESET EXCESSION ALLOWED         R4 34363700
         OI    SDBFLG2,SDB2IOA     SHOW I/O ACTIVE                   R4 34363800
         EXCP  SDBIOB              ISSUE EXCP                        R4 34363900
         B     HFCL30              WAIT FOR I/O TO COMPLETE          R4 34364000
         EJECT                                                      R41 34364100
HFCL40   L     R3,SDBPDDB          MOVE RECORD COUNT                R41 34364200
         MVC   PDBRECCT,SDBRECCT    TO PDDB                         R41 34364300
         L     R8,SDBPIOT                     FLAG IOT FOR          R41 34364400
         OI    IOTFLAG1-IOTDSECT(R8),IOT1CKPT  CHECKPOINT           R41 34364500
         SPACE 1                                                    R41 34364600
HFCL50   LM    R14,R12,12(R13)     RESTORE REGISTERS                R41 34364700
         BR    R14                 RETURN TO CALLER.                    34364800
         SPACE 1                                                    R41 34364900
         DROP  R3,R7,R12           DROP BASES.                          34365000
         SPACE 3                                                    R41 34365100
*                                                                       34365500
*              TRUNCATION SUBROUTINE                                    34366000
*                                                                       34366500
         USING HFCLBASE,R12                                             34367000
HFCLTRNC DS    0H                                                       34367500
         L     R3,BFLOC            POINT TO CURRENT UBF OFFSET.         34368000
         USING LRCDSECT,R3         USE LOGICAL RECORD DSECT.            34368500
         MVI   LRCTLENG,LRCBFEND   TRUNCATE THE BUFFER.                 34369000
         L     R1,SDBDEB           POINT TO DATA SET'S DEB.             34369500
         USING DEBBASIC,R1         USE DEB DSECT.                       34370000
         L     R1,DEBDCBAD         POINT THENCE TO ACB.                 34370500
         LA    R1,0(,R1)           ZERO HIGH-ORDER BYTE.                34371000
         LNR   R1,R1               SHOW HAMSVC ARG IS ACB.              34371500
         LA    R0,HSVCEOBP         SET HAMSVC FUNCTION CODE.            34372000
         SVC   HAMSVC              USE HAMSVC TO WRITE.                 34372500
         BR    R14                 RETURN TO CALLER.                    34373000
         DROP  R1,R3               DROP DEB, LRC BASES.                 34373500
*                                                                    R4 34373600
*        'JOB DELETED' BLURB FOR JOB LOG TERMINATOR BUFFER           R4 34373700
*                                                                    R4 34373800
HFCMSG   DC    AL1(HFCMSGL-4,LRC1CCTL+LRC1TASA,HFCMSGL-4,C'-')       R4 34373900
         DC    C'******** JOB DELETED BY JES2 OR CANCELLED '         R4 34374000
         DC    C'BY OPERATOR BEFORE EXECUTION ******** '             R4 34374100
HFCMSGL  EQU   *-HFCMSG            LENGTH FOR MOVE                   R4 34374200
         EJECT                                                          34374300
         SPACE 3                                                        34374500
*                                                                       34375000
*              SUBROUTINES TO FREE BUFFERS                              34375500
*                                                                       34376000
HCFREBP  DS    0H                                                       34376500
         USING HOSCLOSB,R12        USE MAINLINE CLOSE BASE.             34377000
         LTR   R1,RBUF             IF NO BUFFER TO FREE,                34377500
         BZR   R5                  RETURN.                              34378000
         L     RBUF,BFBF           ELSE POINT TO NEXT BUFFER            34378500
         $FREEBUF TYPE=PROT,A=(R1)  AND FREE CURRENT.                   34379000
         B     HCFREBP             THEN REPEAT.                         34379500
         SPACE 1                                                        34380000
HCFREBU  DS    0H                                                       34380500
         LTR   R1,RBUF             IF NO BUFFER TO FREE,                34381000
         BZR   R5                  RETURN.                              34381500
         L     RBUF,BFBF           ELSE POINT TO NEXT BUFFER            34382000
         $FREEBUF TYPE=UNPROT,A=(R1)  AND FREE CURRENT.                 34382500
         B     HCFREBU             THEN REPEAT.                         34383000
         DROP  ,                   DROP ALL BASES.                      34383500
         TITLE 'HOSCKPT -- SUBSYSTEM DATASET CHECKPOINT FUNCTION'       34384000
HOSCKPT  $PROLOG SSOBCKPT,SSDASIZE,LOCK=REQ                             34384500
*                                                                       34385000
*                                                                       34385500
*              CHECKPOINT A SUBSYSTEM DATA SET                          34386000
*                                                                       34386500
*                                                                       34387000
*                                                                       34387500
*              CHECKPOINT AREA IS USED AS FOLLOWS ---                   34388000
*        BYTE 0-3    JOB KEY, FROM SDBJKEY                              34388500
*        BYTE 4-5    DATA SET KEY, FROM SDBDKEY                         34389000
*        BYTE 6      FLAGS AS FOLLOW -                                  34389500
*              BIT 0 INTRDR - NO REPOSITIONING                          34390000
*              BIT 1 SPIN - NO REPOSITIONING                            34390500
*              BIT 2 EOD - SHOW EOD AT RESTART                          34391000
*              BIT 3 I/O ERROR - SHOW I/O ERROR AT RESTART              34391500
*              BIT 4 1=OPEN FOR INPUT AT RESTART                        34392000
*              BIT 5 RESERVED                                           34392500
*              BIT 6 RESERVED                                           34393000
*              BIT 7 RESERVED                                           34393500
*        BYTE 7      RESERVED                                           34394000
*        BYTE 8-15   STARTING RBA, FROM SDBTRKF                         34394500
*        BYTE 16-23  CURRENT RBA, FROM BFRBA FROM SDBUBF                34395000
*        BYTE 24-27  NUMBER OF RECORD NEXT TO READ                      34395500
*                                                                       34396000
*                                                                       34396500
*              LOAD REGISTERS FROM SSOB EXTENSION                       34397000
*                                                                       34397500
         USING SSDABGN,RSOX        USE SSOB EXTENSION DSECT.            34398000
         L     R7,SSDASSCM         POINT TO DCT/SDB.                    34398500
         L     R4,SSDABUFR         POINT TO CHECKPOINT BUFFER.          34399000
         XC    0(24,R4),0(R4)      CLEAR PART OF BUFFER.                34399500
*                                                                       34400000
*              IF INTERNAL READER, SET FLAG AND EXIT                    34400500
*                                                                       34401000
         USING DCTDSECT,R7         USE DCT DSECT.                       34401500
         CLC   =C'INTRDR',DCTDEVN  IS THIS AN INTERNAL READER...        34402000
         BNE   HCK100              BRANCH IF NOT.                       34402500
         OI    6(R4),X'80'         YES.  SET FLAG                       34403000
         B     HCK900              AND RETURN.                          34403500
*                                                                       34404000
*              VERIFY SDB AND THAT IT'S OPEN                            34404500
*                                                                       34405000
HCK100   DS    0H                                                       34405500
         USING SDBDSECT,R7         USE R7 AS SDB BASE.                  34406000
         CLC   SDBID,=CL4'SDB'     IS THIS REALLY AN SDB...             34406500
         BNE   HCK800              ERROR IF NOT.                        34407000
         L     RIOT,SDBPIOT        YES.  POINT TO PDDB'S IOT            34407500
         L     RBUF,SDBUBF         AND TO UNPROTECTED BUFFER.           34408000
         L     RSVT,SDBSVT         AND POINT TO SSVT.          @OZ29839 34408100
         LTR   RBUF,RBUF           IF NO UNPROTECTED BUFFER,            34408500
         BZ    HCK800              ERROR.                               34409000
         LTR   RIOT,RIOT           IF NO PDDB'S IOT,                    34409500
         BZ    HCK800              ERROR.                               34410000
         CLC   SSDADEBP,SDBDEB     IF DEB ADDRESS NOT THE ONE           34410500
         BNE   HCK800              SAVED IN THE SDB, ERROR.             34411000
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              34411500
         USING BFD,RBUF            SET BUF ADDRESSABILITY.              34412000
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY     @OZ29839 34412100
*                                                                       34412500
*              SAVE JOB AND DATA SET KEY                                34413000
*                                                                       34413500
         MVC   0(6,R4),SDBJKEY     SAVE JOB AND DATA SET KEYS.          34414000
*                                                                       34418000
*              IF OUTPUT DATA SET, TRUNCATE & WRITE.                    34418500
*                                                                       34419000
HCK150   DS    0H                                                       34419500
         TM    SDBFLG1,SDB1PUT     IF NOT OUTPUT,                       34420000
         BZ    HCK200              BRANCH.                              34420500
         L     R1,BFLOC            POINT TO CURRENT BUFFER LOC.         34421000
         LA    R5,BFIO             GET ADDRESS OF              @OZ29839 34421100
         AH    R5,$SVBFSIZ           BUFFER END                @OZ29839 34421150
         CR    R5,R1               COMPARE BFLOC TO END.       @OZ29839 34421200
         BNH   HCK800              ERROR IF BFLOC TOO LARGE.   @OZ29839 34421250
         CR    RBUF,R1             COMPARE BFLOC TO START.     @OZ29839 34421300
         BNL   HCK800              ERROR IF BFLOC TOO SMALL.   @OZ29839 34421350
         MVI   0(R1),LRCBFEND      TRUNCATE THE BUFFER.                 34421500
         L     R1,SSDADEBP         FROM THE                             34422000
         USING DEBBASIC,R1         DEB, GET                             34422500
         L     R1,DEBDCBAD         ACB POINTER                          34423000
         DROP  R1                  FOR HAMSVC.                          34423500
         LA    R1,0(,R1)           ZERO HIGH BYTE.                      34424000
         LNR   R1,R1               SHOW HAMSVC ARG IS ACB.              34424500
         LR    R2,R1               SAVE NEGATIVE OF ACB.                34425000
         LA    R0,HSVCEOBP         SET FUNCTION REGISTER.               34425500
         SVC   HAMSVC              TRUNCATE THE BUFFER.                 34426000
         LA    R1,BFDAT            PT TO BUF DATA START.                34426500
         MVI   0(R1),LRCBFEND      TRUNCATE EMPTY BUFFER.               34427000
         L     RIOT,SDBAIOT        FLAG ALLOCATION IOT                  34427500
         OI    IOTFLAG1,IOT1CKPT   FOR CHECKPOINT BY HCEPUT.            34428000
         LR    R1,R2               SET NEGATIVE ACB ADDRESS.            34428500
         LA    R0,HSVCEOBP         SET FUNCTION REGISTER.               34429000
         SVC   HAMSVC              WRITE TRUNCATED BUFFER.              34429500
         B     HCK250              CONTINUE.                            34430000
*                                                                       34430500
*              INPUT DATA SET - SET OPEN-FOR-INPUT FLAG                 34431000
*                                                                       34431500
HCK200   DS    0H                                                       34432000
         OI    6(R4),X'08'         INPUT - SET FLAG FOR INPUT.          34432500
         L     R1,BFRBA+4          GET NR OF NEXT RECORD                34433000
         LA    R1,0(,R1)           HAMGET WILL READ.                    34433500
         AL    R1,SDBRECCT         ADD CT FROM PREV BUFFERS.            34434000
         ST    R1,24(,R4)          SAVE CURRENT REC NR.                 34434500
*                                                                       34435000
*              IF INPUT IS AT EOD, SET EOD FLAG                         34435500
*                                                                       34436000
         TM    SDBFLG2,SDB2EOD     IF NOT AT END-OF-DATA-SET,           34436500
         BZ    HCK250              BRANCH.                              34437000
         TM    BFFL1,BF1EOB        TEST END-OF-BUFFER TOO.           R4 34437500
         BZ    HCK250              BRANCH IF NOT EOD.                   34438000
         OI    6(R4),X'20'         ELSE SET EOD FLAG.                   34438500
*                                                                       34439000
*              INPUT AND OUTPUT - TEST I/O ERROR                        34439500
*                                                                       34440000
HCK250   DS    0H                                                       34440500
         TM    SDBFLG2,SDB2IOE     IF DATA SET NOT AT I/O ERROR,        34441000
         BZ    HCK300              BRANCH.                              34441500
         OI    6(R4),X'10'         ELSE SET I/O ERROR FLAG              34442000
         B     HCK900              AND RETURN.                          34442500
*                                                                       34443000
*              SAVE CURRENT RBA VALUES                                  34443500
*                                                                       34444000
HCK300   DS    0H                                                       34444500
         MVC   8(8,R4),SDBTRKF     SAVE STARTING RBA.                   34445000
         MVC   16(8,R4),BFRBA      SAVE CURRENT RBA.                    34445500
         B     HCK900              RETURN TO CALLER.                    34446000
*                                                                       34446500
*              ERROR - SET ERROR CODE AND EXIT                          34447000
*                                                                       34447500
HCK800   LA    R15,4               SHOW RETURN CODE 4                   34448000
         B     HCK950              AND RETURN TO USER.                  34448500
*                                                                       34449000
*              RETURN TO USER VIA $EPILOG                               34449500
*                                                                       34450000
HCK900   DS    0H                                                       34450500
         SLR   R15,R15             SHOW NORMAL RETURN.                  34451000
HCK950   DS    0H                                                       34451500
         $EPILOG ,                 RETURN WITH CODE IN R15.             34452000
         DROP  ,                   DROP ALL BASES.                      34452500
         TITLE 'HOSREST -- SUBSYSTEM DATA SET RESTART FUNCTION'         34453000
HOSREST  $PROLOG SSOBREST,SSDASIZE,LOCK=SDB                             34453500
HOSRESTB DS    0H                  RESTART BASE LABEL                   34454000
*                                                                       34454500
*              UNLESS INTERNAL READER, SET SDBTRK, SDBTRKF.             34455000
*                                                                       34455500
         USING SSDABGN,RSOX        USE SSOB EXTENSION DSECT.            34456000
         L     R4,SSDABUFR         POINT TO RESTART INFO BUFFER.        34456500
         TM    6(R4),X'80'         IF INTERNAL READER,                  34457000
         BO    HRS100              SKIP SDB LOGIC.                      34457500
         L     R5,SSDASSCM         POINT TO THE SDB.                    34458000
         USING SDBDSECT,R5         USE ITS DSECT.                       34458500
         CLC   SDBID,=CL4'SDB'     IF POINTER IS NOT TO                 34459000
         BNE   HRS800              AN SDB, ERROR.                       34459500
         MVC   SDBTRKF(16),8(R4)   ELSE REFRESH 1ST, CURRENT RBA.       34460000
*                                                                       34460500
*              UNLESS EOD OR I/O ERROR USE HOSOPEN                      34461000
*                                                                       34461500
HRS100   DS    0H                                                       34462000
         TM    6(R4),X'30'         IF EOD OR IOE,                       34462500
         BNZ   HRS200              DON'T USE HOSOPEN.                   34463000
         SL    R12,=A(HOSRESTB-HOSOPENB)  ELSE SET OPEN                 34463500
         BR    R12                 ADDRESSABILITY AND ENTER IT.         34464000
*                                                                       34464500
*              I/O ERROR OR EOD - FAKE RE-OPEN HERE                     34465000
*                                                                       34465500
HRS200   DS    0H                                                       34466000
         $GETBUF TYPE=UNPROT       GET UNPROTECTED BUFFER.              34466500
         BNZ   HRS800              ERROR IF NONE.                       34467000
         LR    RBUF,R1             SET BUFFER ADDRESSABILITY.           34467500
         USING BFD,RBUF            USE BUFFER DSECT.                    34468000
         MVI   BFID,C'U'           SHOW BUF IS UNPROTECTED.             34468500
         ST    RBUF,SDBUBF         SAVE ITS ADDRESS IN SDB.             34469000
         OI    BFFL1,BF1EOB        SHOW BUF AT END-OF-BUFFER.        R4 34469500
         MVC   SDBDEB,SSDADEBP     SET DEB PTR IN SDB                   34469800
         OI    SDBFLG2,SDB2EOD     ASSUME SDB AT EOD.                   34470000
         L     R4,SSDABUFR         RE-POINT TO RESTART BUFFER.          34470500
         TM    6(R4),X'20'         IF EOD, SKIP.                        34471000
         BO    *+8                 ELSE RESET EOD                       34471500
         XI    SDBFLG2,SDB2EOD+SDB2IOE  AND SET I/O ERROR.              34472000
*                                                                       34472500
*              SET SDB1PUT OR SDB1GET.  IF SDB1GET GET A PBF.           34473000
*                                                                       34473500
         OI    SDBFLG1,SDB1PUT     ASSUME OUTPUT DATA SET.              34474000
         TM    6(R4),X'08'         IF CORRECT,                          34474500
         BZ    HRS900              RETURN.                              34475000
         XI    SDBFLG1,SDB1PUT+SDB1GET  ELSE SET INPUT DATA SET.        34475500
         $GETBUF TYPE=PROT         INPUT NEEDS A PROTECTED BUFFER.      34476000
         BNZ   HRS800              ERROR IF CAN'T GET.                  34476500
         LR    RBUF,R1             SET BUFFER ADDRESSABILITY.           34477000
         MVI   BFID,C'P'           SHOW BUFFER IS PROTECTED.            34477500
         ST    RBUF,SDBPBF         SAVE ITS ADDRESS IN SDB.             34478000
         B     HRS900              RETURN TO CALLER.                    34478500
*                                                                       34479000
*              ERROR DURING DATA SET RESTART                            34479500
*                                                                       34480000
HRS800   DS    0H                                                       34480500
         LA    R15,4               SET R15=4 FOR ERROR                  34481000
         B     HRS950              AND RETURN TO CALLER.                34481500
*                                                                       34482000
*              RESTART COMPLETE.  HERE ONLY IF EOD OR IOE.              34482500
*                                                                       34483000
HRS900   DS    0H                                                       34483500
         SLR   R15,R15             SET R15=0 FOR NORMAL.                34484000
HRS950   DS    0H                                                       34484500
         $EPILOG  ,                RETURN TO CALLER.                    34485000
         SPACE 1                                                        34485500
         DROP  ,                   DROP ALL ADDRESSABILITY.             34486000
         TITLE 'LITERAL POOL FOR OPEN/CLOSE'                            34486500
         LTORG                                                          34487000
         TITLE 'HASP ACCESS METHOD SVC CODES'                           34487500
HAMSVC   EQU   111                                                      34488000
*                                                                       34488500
         SPACE 3                                                        34489000
*                                                                       34489500
*                                  HAMSVC OPERATION CODES               34490000
*                                                                       34490500
         SPACE 3                                                        34491000
HSVCEOBG EQU   0                        END-OF-BLOCK ON A GET OPERATION 34491500
*                                  - IF DATA AWAITS IN A PROTECTED      34492000
*                                  BUFFER, HAMSVC WILL MOVE IT TO THE   34492500
*                                  UNPROTECTED BUFFER, LINITIALIZING    34493000
*                                  FIELDS.  IF NOT, HAMSVC WILL SET     34493500
*                                  ONE OF THE FLAGS DDT1IOA, DDT1IOE,   34494000
*                                  OR DDT1EOD AND RETURN.  IF BY THE    34494500
*                                  NEXT GET THE CE APDG HASN'T RESET    34495000
*                                  DDT1IOA, THE GET ROUTINE WILL WAIT   34495500
*                                  UPON DDTECB.                         34496000
         SPACE 1                                                        34496500
HSVCEOBP EQU   4                        END-OF-BLOCK ON A PUT OPERA-    34497000
*                                  TION.  HAMSVC GETS A PROTECTED       34497500
*                                  BUFFER, MOVES TO IT THE UNPROTECTED  34498000
*                                  BUFFER, CALLS $TRACK TO FIND ADDRESS 34498500
*                                  OF NEXT BUFFER, CHAINS THIS BUFFER   34499000
*                                  ON CHAIN OF BUFFERS TO BE WRITTTEN,  34499500
*                                  AND ISSUES EXCP IF NECESSARY.  IT    34500000
*                                  RE-INITIALIZES THE UNPROTECTED       34500500
*                                  BUFFER, RESETS UBFRBA, AND RETURNS   34501000
*                                  TO CALLER.                           34501500
         SPACE 1                                                        34502000
HSVCIRD  EQU   8                        INTERNAL READER PUT OPERATION.  34502500
*                                  HAMSVC MOVES DATA TO INTERNAL READER 34503000
*                                  CONTROL AREA, $POSTS ASSOCIATED      34503500
*                                  INTERNAL READER CONTROL AREA'S PCE,  34504000
*                                  XMPOSTS HASP, AND WAITS.  WHEN HASP  34504500
*                                  XMPOSTS, HAMSVC RETURNS TO ISSUER.   34505000
         SPACE 1                                                        34505500
HSVCPNT  EQU   12                       POINT OPERATION WAS ISSUED.     34506000
*                                  HAMSVC STARTS WITH THE BLOCK ADDRES- 34506500
*                                  SED BY THE MTTR PORTION OF THE RPLRB 34507000
*                                  AR AND SCANS, READING MORE BLOCKS    34507500
*                                  IF NECESSARY, UNTIL THE RECORD-      34508000
*                                  NUMBER PORTION OF THE RBA HAS BEEN   34508500
*                                  SATISFIED.  UPON RETURN THE DDT AND  34509000
*                                  UNPROTECTED BUFFER ARE SET SO THAT A 34509500
*                                  GET WILL RETRIEVE THE POINTED-TO     34510000
*                                  RECORD.                              34510500
         SPACE 1                                                        34511000
HSVCENDR EQU   20                       ENDREQ OPERATION WAS ISSUED.    34511500
*                                  HAMSVC TRUNCATES AND MOVES TO A      34512000
*                                  PROTECTED BUFFER TO BE WRITTEN THE   34512500
*                                  CURRENT UNPROTECTED BUFFER.          34513000
         SPACE 1                                                        34513500
HSVCOUTL EQU   24                       OUTPUT LIMIT IS EXCEEDED.       34514000
         SPACE 1                                                        34514500
HSVCGUPD EQU   32                       GET-UPDATE OPERATION.           34515000
         SPACE 1                                                        34515500
HSVCPUPD EQU   36                       PUT-UPDATE OPERATION.           34516000
         SPACE 1                                                        34516500
HSVCXBM  EQU   40                       EXECUTION BATCH MONITOR -       34517000
*                                  TERMINATE CURRENT USER JOB           34517500
*                                  UNDER EXECUTION BATCH MONITOR        34518000
*                                  AND CALL HASPXEQ TO GET              34518500
*                                  ANOTHER USER JOB OR TO TERMINA-      34519000
*                                  TE THE BATCH MONITOR                 34519500
         TITLE 'HASPAM - INTERFACE ROUTINE FOR HASP ACCESS METHODS'     34520000
RBUF     EQU   R6                                                       34520500
RRPL     EQU   R7                                                       34521000
RPBF     EQU   R7                                                       34521500
RACB     EQU   R8                                                       34522000
RSDB     EQU   R10                                                      34522500
RIOT     EQU   R5                                                       34523000
*                                  THIS LOCATION IS POINTED TO BY       34523500
*                                  ACBINRTN, IN THE ACB.                34524000
*                                  LINKAGE IS ---                       34524500
*                                  L     R15,ACBINRTN                   34525000
*                                  LA    R1,RPL                         34525500
*                                  BALR  R14,R15                        34526000
         SPACE 3                                                        34526500
HAMNULL  DS    0H                  CLOSED HASP JOB LOG ACB RTN.         34527000
         SR    R15,R15             ZERO THE RETURN CODE              R4 34527500
         BR    R14                 AND RETURN.                          34528000
         SPACE 3                                                        34528500
HASPAM   DS    0F                                                       34529000
         USING *,R15                                                    34529500
         B     *+8                 BRANCH AROUND ADCON.                 34530000
         DC    A(SVCHAM)           ADCON FOR SVC 111.                   34530500
         STM   R14,R12,12(R13)     SAVE REGISTERS.                      34531000
         LR    R12,R15             SET HAM LOCAL BASE REGISTER.         34531500
HAMBASE  EQU   HASPAM              DEFINE HAM BASE LOCATION.            34532000
         USING HAMBASE,R12         SET HAM ADDRESSABILITY.              34532500
         DROP  R15                 DROP TEMPORARY BASE.                 34533000
         USING RPLDSECT,R1         USE RPL DSECT.                       34533500
*                                  VALIDITY CHECKING -                  34534000
*                                  RPLREQ MUST BE .LE. 5, ELSE RETURN   34534500
*                                  ERROR CODE RPLINVP - INVALID PROCES- 34535000
*                                  SING OPTIONS.                        34535500
*                                                                       34536000
         CL    R0,=A(RPLERASE)     IS OPTION VALID...                   34536500
         BH    HERINVP             IF NOT, RETURN.                      34537000
*                                                                       34537500
*                                  PUT OTHER VALIDITY CHECING HERE      34538000
*                                                                       34538500
         EJECT                                                          34539000
*              SET UP REGISTERS FOR HASP ACCESS METHODS.                34539500
*              REGISTER CONVENTIONS ARE ---                             34540000
*              R0, R1, R15 - WORK REGISTERS AND USED AS ARGUMENTS TO    34540500
*                            HAMSVC.                                    34541000
*              R2 - R5 - WORK REGISTERS AND USED WITH MVCL AS FOLLOWS-- 34541500
*                R2 - HAM BUFFER ADDRESS                                34542000
*                R3 - HAM DATA LENGTH                                   34542500
*                R4 - USER BUFFER ADDRESS                               34543000
*                R5 - USER BUFFER LENGTH                                34543500
*        RBUF  R6 - ADDRESS OF CURRENT HASP BUFFER                      34544000
*        RRPL  R7 - ADDRESS OF RPL                                      34544500
*        RPBF  R7 - ADDRESS OF PBF                                      34545000
*        RACB  R8 - ADDRESS OF ACB                                      34545500
*              R9 - RESERVED FOR USER MODIFICATIONS                     34546000
*        RDDT  RA - ADDRESS OF DDT                                      34546500
*              RB - SUBROUTINE BASE                                     34547000
*              RC - MAIN ROUTINE BASE                                   34547500
*              RD - ADDRESS OF USER SAVE AREA                           34548000
*              RE - LINKAGE REGISTER                                    34548500
         SPACE 3                                                        34549000
         LR    RRPL,R1             SET RPL BASE.                        34549500
         USING RPLDSECT,RRPL       USE RPL DSECT.                       34550000
         STC   R0,RPLREQ           SAVE REQUEST TYPE IN RPL.            34550500
         DROP  R1                  DROP OLD RPL BASE.                   34551000
         L     RACB,RPLDACB        POINT TO ACB FROM RPL.               34551500
         USING ACBDSECT,RACB       USE ACB DSECT.                       34552000
         CLI   ACBID,ACBIDVAL      IF ACB DOESN'T LOOK RIGHT,           34552500
         BNE   HERBLKER            SHOW CONTROL BLOCK ERROR.            34553000
* TEST FOR ACBOPEN FLAG IS UNNECESSARY                                  34553500
         L     RSDB,ACBDEB-1       POINT TO DEB FROM ACB.               34554000
         USING DEBBASIC,RSDB       USE DEB DSECT.                       34554500
         L     RSDB,DEBIRBAD       POINT TO SDB FROM DEB.               34555000
         TM    ACBINRTN,ACBINR     IS DATA SET AN INTERNAL RDR...       34555500
         BZ    HAM010              IF NOT, PROCESS SDB.                 34556000
*                                                                       34556500
*              INTERNAL READER INITIALIZATION                           34557000
*                                                                       34557500
         USING DCTDSECT,RSDB       SET INTRDR ADDRESSABILITY.           34558000
         L     RSVT,RIDSSVT        POINT TO SUBSYS VECTOR TABLE.        34558500
         CLI   RPLREQ,RPLPUT       IS THIS A PUT REQUEST...             34559500
         BE    HPIRDR              BRANCH IF SO.                        34560000
         CLI   RPLREQ,RPLENDRE     IS THIS AN END REQUEST...            34560500
         BE    HENDI               BRANCH IF SO.                        34561000
         B     HERINVP             OTHERWISE INVALID REQUEST.           34561500
         EJECT                                                          34562000
*                                                                       34562500
*              NORMAL SUBSYSTEM DATA SET INITIALIZATION                 34563000
*                                                                       34563500
HAM010   DS    0H                                                       34564000
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              34564500
         L     RSVT,SDBSVT         POINT TO SUBSYS VECTOR TABLE.        34565000
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         34565500
         USING BFD,RBUF            SET BUFFER ADDRESSABILITY.           34566000
         USING $SVDSECT,RSVT       SET SSVT ADDRESSABILITY.          R4 34566300
         USING LRCDSECT,R1         SET LOGICAL RECORD ADDR'TY.          34566500
*                                                                       34567000
*              SELECT FUNCTION FROM RPL.                                34567500
*                                                                       34568000
*        FUNCTIONS ARE ---                                              34568500
*        0     GET                                                      34569000
*        1     PUT                                                      34569500
*        2     CHECK                                                    34570000
*        3     POINT                                                    34570500
*        4     ENDREQ                                                   34571000
*        5     ERASE                                                    34571500
*                                                                       34572000
         SPACE 3                                                        34572500
         LR    R15,R0              GET REQUEST NUMBER.                  34573000
         AR    R15,R15             MULTIPLY                             34573500
         AR    R15,R15             BY 4.                                34574000
         B     *+4(R15)            BRANCH ACCORDING TO R15 ---          34574500
         B     HAMGET                GET                                34575000
         B     HAMPUT                PUT                                34575500
         B     HAMCHECK              CHECK                              34576000
         B     HAMPOINT              POINT                              34576500
         B     HAMENDRE              ENDREQ                             34577000
         B     HAMERASE              ERASE                              34577500
         EJECT                                                          34578000
*                                                                       34578500
*                                  THE FOLLOWING FUNCTIONS RESULT IN AN 34579000
*                                  IMMEDIATE NORMAL RETURN TO THE USER. 34579500
*                                                                       34580000
*              HAMCHECK            SINCE RPLECB HAS ALREADY BEEN POSTED 34580500
*                                  COMPLETE IN GET AND PUT.             34581000
*              HAMERASE            FUNCTION IS NOT SUPPORTED FOR        34581500
*                                  JES DATA SETS.                       34582000
         SPACE 3                                                        34582500
HAMCHECK DS    0H                                                       34583000
         L     R15,RPLFDBK-1       FOR CHECK, RETURN                    34583500
         LA    R0,0(,R15)          TO USER THE CONTENTS                 34584000
         B     HRPLEXIT            OF RPLFDBK.                          34584500
HAMERASE DS    0H                                                       34585000
         SR    R0,R0               SET ZERO RETURN CODE.                34585500
         B     HRPLEXIT            RETURN TO CALLER.                    34586000
         TITLE '''GET'' ACCESS METHOD ROUTINE'                          34586500
*                                                                       34587000
*                                                                       34587500
*              HASP 'GET' ACCESS METHOD ROUTINE                         34588000
*                                                                       34588500
*                                                                       34589000
HAMGET   DS    0H                                                       34589500
*                                                                       34590000
*              PROCESS SEQUENTIAL NON-UPDATE GET                        34590500
*                                                                       34591000
         TM    RPLOPT2,RPLUPD      IS THIS AN UPDATE REQUEST...         34591500
         BO    HG100               BRANCH IF SO.                        34592000
         SPACE 1                                                        34592500
         TM    SDBFLG1,SDB1GET     DOES DATA SET ALLOW GET...           34593000
         BZ    HERINVP             ERROR IF NOT.                        34593500
         TM    BFFL1,BF1EOB        EOB ON PREVIOUS GET...            R4 34593600
         LA    R14,HG010           SET RETURN                        R4 34593700
         BO    HGSPEC              BR IF YES (EOB)                   R4 34593800
         SPACE 1                                                        34594000
HG010    DS    0H                                                       34594500
         L     R1,BFLOC            POINT TO CURR LOGICAL RECORD.        34595000
         BAL   R14,HGMOVE          MOVE IT TO USER BUFFER.              34595500
         LA    R14,HG010           IF NEXT BUFFER NEEDED,               34596000
         BC    1,HGSPEC            BRANCH FOR SPECIAL PROCESSING.       34596500
         LM    R0,R1,BFRBA         ELSE GET CURRENT RBA.                34597000
         STM   R0,R1,RPLRBAR       RETURN IT TO USER IN RPL.            34597500
         AL    R1,=F'1'            INCREMENT IT BY ONE                  34598000
         ST    R1,BFRBA+4          AND SAVE FOR NEXT TIME.              34598500
         B     HERNORML            RETURN NORMALLY.                     34599000
         EJECT                                                          34599500
*                                                                       34600000
*              PROCESS UPDATE-FORM GET                                  34600500
*                                                                       34601000
HG100    DS    0H                                                       34601500
         L     R2,RPLARG           POINT TO RBA TO LOCATE AND           34602000
         LM    R2,R3,0(R2)         LOAD IT INTO R2 AND R3.              34602500
         CLM   R3,7,=F'0'          IF LLL IS ZERO,                      34603000
         BZ    HERINRBA            BAD RBA.                             34603500
         CALL  HFINDRBA            TRY TO FIND RBA IN UBF.              34604000
         BNZ   HG110               BRANCH IF NOT FOUND.                 34604500
* R1 IS SET BY HFINDRBA                                                 34605000
         BAL   R14,HGMOVE          MOVE RECORD TO USER.                 34605500
         BC    1,HERRDERD          SHOW PHYS READ ERR IF CC+3.          34606000
         SLR   R0,R0               SHOW NORMAL COMPLETION               34606500
         B     HRPLEXIT            AND RETURN TO CALLER.                34607000
*                                                                       34607500
*              RECORD IS SPANNED OR NOT IN BUFFER                       34608000
*                                                                       34608500
HG110    LA    R1,BFDAT            IF UNPROTECTED BUFFER                34609000
         CL    R1,BFLOC            HAS NOTHING IN IT,                   34609500
         BE    HG115               CONTINUE.                            34610000
         L     R1,BFLOC            ELSE TRUNCATE                        34610500
         MVI   LRCTLENG,LRCBFEND   AND WRITE                            34611000
         LA    R0,HSVCEOBP         THE                                  34611500
         LR    R1,RRPL             UNPROTECTED BUFFER.                  34612000
         SVC   HAMSVC              BUFFER.                              34612500
         MVI   BFDAT,LRCBFEND      SHOW NO DATA IN IT.                  34613000
HG115    LA    R0,HSVCGUPD         SET HAMSVC FUNCTION REGISTER.        34613500
         LR    R1,RRPL             SET HAMSVC ARGUMENT REGISTER.        34614000
         SVC   HAMSVC              ISSUE HAMSVC FOR GET-UPDATE.         34614500
         LTR   R0,R15              IF HAMSVC FOUND AN ERROR,            34615000
         BNZR  R15                 RETURN TO USER.                      34615500
*                                                                       34616000
*              RECORD TO UPDATE NOW RESIDES IN ONE OR MORE HBFS         34616500
*                                                                       34617000
         L     RBUF,SDBHBF         POINT TO FIRST HBF.                  34617500
HG120    DS    0H                                                       34618000
         LTR   RBUF,RBUF           IF BUFFER POINTER ZERO,              34618500
         BZ    HERRDERD            SHOW PHYS READ ERROR.                34619000
         L     R1,BFLOC            POINT TO CORRECT RECORD.             34619500
         BAL   R14,HGMOVE          GO MOVE IT TO CALLER.                34620000
         LA    R0,0                SET R0 FOR NORMAL COMPLETION.        34620500
         L     RBUF,BFBF           GET POINTER TO NEXT HBF.             34621000
         BC    1,HG120             IF HGMOVE CC=3,CONTINUE.             34621500
         CLR   R0,RBUF             ELSE NEXT BUF PTR MUST BE 0.         34622000
         BNE   HERRDERD            SHOW PHYS READ ERROR IF NOT.         34622500
         B     HRPLEXIT            ELSE RETURN NORMALLY.                34623000
         EJECT                                                          34623500
*                                                                       34624000
*              SPECIAL PROCESSING FOR HAMGET                            34624500
*                                                                       34625000
HGSPEC   DS    0H                                                       34625500
*                                                                       34626000
*              IF I/O IS ACTIVE, WAIT FOR IT TO COMPLETE                34626500
*                                                                       34627000
         TM    SDBFLG2,SDB2IOA     IS I/O ACTIVE...                     34627500
         BZ    HGS020              BRANCH IF NOT               @OZ30886 34628000
         TM    SDBFLG2,SDB2IOE     IO ERR DETECTED BY HENDRD.  @OZ30886 34628100
         BO    HGS030              YES, GO PROCESS IO ERROR    @OZ30886 34628200
         TM    BFECB,X'40'         ELSE CHECK ECB.                      34628500
         BO    HGS010              IF ALREADY POSTED, SKIP WAIT.        34629000
         TM    BFFL2,BF2IOC        HAS CEA LOOP DRIED UP...    @OZ30886 34629160
         BO    HGS020              BRANCH IF YES               @OZ30886 34629320
         WAIT  1,ECB=BFECB         WAIT FOR I/O COMPLETION.             34629500
HGS010   SLR   R0,R0               ZERO OUT                             34630000
         ST    R0,BFECB            THE ECB.                             34630500
         TM    BFFL1,BF1EOB        IF UBF NOT YET FILLED,            R4 34630600
         BO    HGSPEC              GO WAIT AGAIN               @OZ30886 34630700
         TM    SDBFLG2,SDB2EOD     END OF DATA DETECTED...     @OZ30886 34630750
         BZR   R14                 NO, RETURN                  @OZ30886 34630800
         OI    BFFL2,BF2IOC        SET IOC FOR NEXT TIME       @OZ30886 34630850
         BR    R14                 RETURN TO CALLER.                    34631000
*                                                                       34631500
*              IF END-OF-BUFFER & I/O INACTIVE, ISSUE SVC               34632000
*                                                                       34632500
HGS020   DS    0H                                                       34633000
         NI    BFFL2,255-BF2IOC    RESET IO STOPPED IND.       @OZ30886 34633125
         TM    BFFL1,BF1EOB        HAS CEA PRIMED BUFFER...    @OZ30886 34633250
         BZ    HGS010              RETURN TO USER IF YES       @OZ30886 34633375
         TM    SDBFLG2,SDB2IOE+SDB2EOD  IF EXCEPTIONAL                  34633500
         BNZ   HGS030              CONDITION, BRANCH.                   34634000
*              THIS LINE DELETED BY APAR NUMBER                @OZ30886 34634160
*              THIS LINE DELETED BY APAR NUMBER                @OZ30886 34634320
         LA    R0,HSVCEOBG         SET HAMSVC FUNCTION REGISTER.        34634500
         LR    R1,RRPL             SET HAMSVC ARGUMENT REGISTER.        34635000
         SVC   HAMSVC              ISSUE HAMSVC.                        34635500
         LTR   R0,R15              IF HAMSVC FOUND NO ERROR,            34636000
         BNZ   HERRDERD            INDICATE ERROR              @OZ30886 34636500
         TM    SDBFLG2,SDB2EOD     DID EOD OCCUR...            @OZ30886 34637000
         BZR   R14                 NO, RETURN                  @OZ30886 34637100
         OI    BFFL2,BF2IOC        SET IOC FOR NEXT TIME       @OZ30886 34637200
         BR    R14                 RETURN                      @OZ30886 34637300
*                                                                       34637500
*              TREAT EXCEPTIONAL CONDITIONS HERE                        34638000
*                                                                       34638500
HGS030   DS    0H                                                       34639000
         TM    SDBFLG2,SDB2EOD     IF NOT END-OF-DATA-SET,              34639500
         BZ    HERRDERD            SHOW USER A READ ERROR.              34640000
         TM    SDBFLG2,SDB2XBIN    IF NOT XBM BATCH INPUT,              34640500
         BZ    HERNOEOD            SHOW USER END-OF-DATA.               34641000
*                                                                       34641500
*              END EXEC BATCH MON USER JOB HERE                         34642000
*                                                                       34642500
         LR    R1,RRPL             POINT R1 TO THE RPL                  34643000
         LA    R0,HSVCXBM          AND SET FUNC CODE IN R0.             34643500
         SVC   HAMSVC              CALL HAMSVC TO END JOB.              34644000
         B     *+4(R15)            BRANCH ACC TO R15.                   34644500
         B     HG010               +0 - CONTINUE WITH NEW INPUT.        34645000
         SLR   R15,R15             +4 - END BATCH MONITOR -             34645500
         SVC   3                   GIVE CONTROL TO DISPATCHER  @OZ26748 34646000
         TITLE 'HGMOVE - HAM GET SUBROUTINE'                            34646500
*                                                                       34647000
*              HAM SUBROUTINE TO MOVE RECORD TO USER                    34647500
*                                                                       34648000
HGMOVE   DS    0H                                                       34648500
         LR    R4,R1               SET R4 FOR IF END-OF-BUFFER.         34649000
         TM    BFFL1,BF1GSG        IF RE-ENTRY FOR SEGMENT,             34649500
         BO    HGM100              BRANCH TO RE-ENTRY POINT.            34650000
*                                                                       34650500
*              INITIALIZE TO MOVE ANY RECORD                            34651000
*                                                                       34651500
         TM    BFFL1,BF1EOB        IF END-OF-BUFFER OR ERROR,        R4 34652000
         BOR   R14                 RETURN CC=3 TO HANDLE.               34652500
         TM    LRCTLENG,LRCBFEND   IF NOT END-OF-BUFFER,                34653000
         BNO   HGM005              CONTINUE.                            34653500
         OI    BFFL1,BF1EOB        OTHERWISE SET EOB FLAG,           R4 34654000
         TM    *+1,X'FF'           SET CONDITION CODE 3,                34654500
         BR    R14                 AND RETURN.                          34655000
HGM005   DS    0H                                                       34655500
         L     R2,RPLAREA          POINT TO USER BUFFER.                34656000
*                                                                       34656500
*              MOVE SIMPLE RECORD TO USER                               34657000
*                                                                       34657500
         SLR   R5,R5               ZERO SOURCE LENGTH REG.              34658000
         SLR   R3,R3               ZERO SINK LENGTH REG.                34658500
         TM    SDBFLG1,SDB1PSO     IF DATA SET IS FOR PSO,              34659000
         BO    HGM040              GO PROCESS CARRIAGE CTRL.            34659500
         TM    LRCFLAG1,LRC1CCTL+LRC1SPAN+LRC1INUL  BRANCH IF           34660000
         BNZ   HGM040              NOT A SIMPLE RECORD.                 34660500
         LA    R4,LRCTEXT          POINT TO SIMPLE TEXT START           34661000
HGM010   DS    0H            ENTRY FROM CARRIAGE-CONTROL.               34661500
         IC    R5,LRCTLENG         GET LENGTH TO MOVE.                  34662000
         ICM   R5,8,=C' '          SET BLANK PAD.                       34662500
         IC    R3,LRCLRECL         GET LENGTH OF RECORD.                34663000
HGM020   DS    0H            ENTRY FROM SINGLE-SEGMENT SPANNED.         34663500
         ST    R3,RPLRLEN          RETURN REC LENG TO USER.             34664000
         LR    R1,R3               SAVE RECORD LENGTH.                  34664500
         L     R3,RPLBUFL          GET BUFFER LENGTH.                   34665000
HGM030   DS    0H            ENTRY FROM PSO CARRIAGE CONTROL            34665500
         SLR   R1,R3               COMPUTE (REC LENG)-(BUF LENG).       34666000
         MVCL  R2,R4               MOVE RECORD TO BUFFER.               34666500
         LTR   R1,R1               IF REC LENG .GT. BUF LENG,           34667000
         BP    HERINBUF            ERROR - INVALID BUF SIZE.            34667500
         TM    SDBFLG2,SDB2XBIN    IF NOT XBM BATCH INPUT,              34668000
         BZ    HGMEND              GO TO EXIT CODE.                     34668500
         L     R2,RPLAREA          POINT TO DATA JUST MOVED.            34669000
         CLC   =CL2'$$',0(R2)      IF NOT '$$',                         34669500
         BNE   HGMEND              GO TO EXIT CODE.                     34670000
         LA    R14,HERNOEOD        ELSE FORCE EXIT TO                   34670500
         B     HGMEND              RETURN TO END-OF-FILE.               34671000
         SPACE 3                                                        34671500
*                                                                       34672000
*              MOVE CARRIAGE-CONTROL RECORD TO USER                     34672500
*                                                                       34673000
HGM040   DS    0H                                                       34673500
         TM    LRCFLAG1,LRC1SPAN   BUT IF SPANNED, GO TO                34674000
         BO    HGM050              THE SPANNED-RECORD ROUTINE.          34674500
         TM    LRCFLAG1,LRC1INUL   AND IF NULL ON INPUT,                34675000
         BO    HGM070              SKIP OVER IT.                        34675500
         TM    SDBFLG1,SDB1PSO     IF DATA SET IS NOT PSO,              34676000
         LA    R4,LRCSOUT          SKIP CARR CTRL CHARACTER             34676500
         BZ    HGM010              AND GO GIVE USER RECORD.             34677000
* PSO CARRIAGE CONTROL PROCESSING                                       34677500
         TM    LRCFLAG1,LRC1CCTL   IF CARR CTRL CHAR PRESENT,           34678000
         IC    R5,LRCCCTL          GET IT INTO REGISTER 5               34678500
         BO    HGM045              AND GO STORE IT IF REQ'D.            34679000
         LA    R4,LRCTEXT          OTHERWISE RESET TEXT PTR.            34679500
         LA    R5,X'40'            SET ASA SPACE-1-&-PRINT.             34680000
         TM    ACBCCTYP,ACBCCMCH   IF NOT MACHINE,                      34680500
         BZ    HGM045              MUST BE ASA OR NONE.                 34681000
         LA    R5,X'09'            SET MCH PRINT-&-SPACE-1.             34681500
HGM045   DS    0H                                                       34682000
         TM    ACBCCTYP,ACBCCMCH+ACBCCASA  IF USER WANTS NOT,           34682500
         BZ    HGM010              BRANCH.                              34683000
         STC   R5,0(,R2)           ELSE SET CARR CTRL FOR USER.         34683500
         LA    R2,1(,R2)           POINT TO NEXT USER AREA BYTE.        34684000
         IC    R3,LRCLRECL         GET LOGICAL RECORD LENGTH            34684500
         LA    R0,1(,R3)           & ADD 1 FOR CARR CTRL.               34685000
         ST    R0,RPLRLEN          RETURN LENGTH TO USER.               34685500
         IC    R5,LRCTLENG         GET TRUNCATED LENGTH.                34686000
         ICM   R5,8,=C' '          SET BLANK PADDING.                   34686500
         LR    R1,R3               SET R1=RPLRLEN-1 FOR HGM030.         34687000
         L     R3,RPLBUFL          GET USER AREA LENGTH                 34687500
         S     R3,=F'1'            (MINUS 1 FOR CARR CTRL)              34688000
         BP    HGM030              AND GO MOVE THE RECORD.              34688500
         B     HERINBUF            ERROR - USER AREA TOO SMALL.         34689000
         SPACE 3                                                        34689500
*                                                                       34690000
*              MOVE SINGLE-SEGMENT SPANNED RECORD TO USER               34690500
*                                                                       34691000
HGM050   DS    0H                                                       34691500
         TM    LRCFLAG1,LRC1SBGN   IF NOT FIRST SEGMENT,                34692000
         BZ    HERRDERD            SHOW PHYSICAL READ ERROR.            34692500
         LA    R4,LRCSFTXT         ELSE POINT TO THE TEXT               34693000
         LH    R5,LRCSEGL          AND GET SEGMENT LENGTH.              34693500
         LR    R3,R5               SET SINK LENGTH REGISTER.            34694000
         TM    LRCFLAG1,LRC1SEND   IF SINGLE-SEGMENT,                   34694500
         BO    HGM020              GO MOVE IT.                          34695000
*                                                                       34695500
*              MULTI-SEGMENT - MOVE FIRST SEGMENT TO USER               34696000
*                                                                       34696500
         LH    R0,LRCSRECL         GET TOTAL RECORD LENGTH.             34697000
         ST    R0,RPLRLEN          RETURN IT TO THE USER.               34697500
         CL    R0,RPLBUFL          IF BUFFER NOT LARGE ENOUGH,          34698000
         BH    HERINBUF            RETURN ERROR CODE.                   34698500
         OI    BFFL1,BF1GSG        ELSE SET RE-ENTRY FLAG.              34699000
HGM060   DS    0H            ENTRY FROM RE-ENTRY CODE                   34699500
         LR    R3,R5               SET SINK LENGTH TO SOURCE.           34700000
         MVCL  R2,R4               MOVE THIS SEGMENT TO USER.           34700500
         B     HGMEND              GO CHECK FOR EOB.                    34701000
         SPACE 3                                                        34701500
*                                                                       34702000
*              SKIP OVER NULL-ON-INPUT RECORD                           34702500
*                                                                       34703000
HGM070   DS    0H                                                       34703500
         IC    R5,LRCTLENG         GET TEXT LENGTH, POINT TO            34704000
         LA    R0,LRCSOUT(R5)      NEXT RECORD ASSUMING CCTL.           34704500
         TM    LRCFLAG1,LRC1CCTL   DOES RECORD CONTAIN CCTL...          34705000
         BO    *+8                 SKIP IF SO.                          34705500
         LA    R0,LRCTEXT(R5)      POINT TO NEXT NON-CCTL RECORD.       34706000
         LR    R1,R0               SET REGISTER ONE                     34706500
         B     HGMOVE              AND RE-ENTER HGMOVE.                 34707000
         SPACE 3                                                        34707500
*                                                                       34708000
*              MOVE NOT-FIRST SEGMENT TO USER                           34708500
*                                                                       34709000
HGM100   DS    0H                                                       34709500
         CLI   LRCTLENG,0          IF INVALID SPANNED FORMAT,           34710000
         BNE   HERRDERD            SHOW PHYS READ ERROR.                34710500
         TM    LRCFLAG1,LRC1SPAN   IF SPAN FLAG IS NOT ON,              34711000
         BZ    HERRDERD            SHOW PHYS READ ERROR.                34711500
         LA    R4,LRCSTEXT         POINT TO SEGMENT'S TEXT              34712000
         LH    R5,LRCSEGL          AND GET SEGMENT LENGTH.              34712500
         TM    LRCFLAG1,LRC1SEND   IF THIS SEGMENT IS NOT LAST,         34713000
         BZ    HGM060              GO MOVE & CHECK END-BUFFER.          34713500
         NI    BFFL1,255-BF1GSG    ELSE RESET RE-ENTRY SWITCH           34714000
         LR    R3,R5               SET SINK LENGTH REGISTER.            34714500
         MVCL  R2,R4               MOVE LAST SEGMENT.                   34715000
HGMEND   DS    0H                                                       34715500
         TM    RPLOPT2,RPLUPD      IF GET-UPDATE,                       34716000
         BO    HGMEND1             JUST RETURN.                         34716500
         ST    R4,BFLOC            SAVE NEXT RECORD ADDRESS.            34717000
         CLI   0(R4),LRCBFEND      IF IT'S NOT END OF BUF,              34717500
         BNE   HGMEND1             JUST RETURN.                         34718000
         OI    BFFL1,BF1EOB        SET END-OF-BUFFER FLAG.           R4 34718500
HGMEND1  DS    0H                                                       34719000
         TM    BFFL1,BF1GSG        SET CC=3 IF MORE SEGMENTS.           34719500
         BR    R14                 RETURN.                              34720000
         TITLE '''PUT'' ACCESS METHOD ROUTINE'                          34720500
*                                                                       34721000
*                                                                       34721500
*              HASP 'PUT' ACCESS METHOD                                 34722000
*                                                                       34722500
*                                                                       34723000
HAMPUT   DS    0H                                                       34723500
         NI    BFFL1,255-BF1PSG-BF1PMV  RESET ENTRY FLAGS               34723800
*                                                                       34724000
*              PROCESS SEQUENTIAL NON-UPDATE PUT                        34724500
*                                                                       34725000
         TM    RPLOPT2,RPLUPD      IS THIS AN UPDATE REQUEST...         34725500
         BO    HP100               BRANCH IF SO.                        34726000
         SPACE 1                                                        34726500
         TM    SDBFLG1,SDB1PUT     IS PUT VALID ON DATA SET...          34727000
         BZ    HERINVP             ERROR IF NOT.                        34727500
         SPACE 1                                                        34728000
         L     R6,SDBUBF           POINT TO UNPROTECTED BUFFER.         34728500
         BAL   R14,HPMOVE          LET HPMOVE DO THE WORK.              34729000
         ST    R1,BFLOC            SAVE ADR OF NEXT AVL BYTE.           34729500
         BC    8,HP010             RETURN TO USER.                      34730000
*                                                                       34730500
*              HPMOVE REQUIRES ANOTHER BUFFER TO COMPLETE RECORD        34731000
*                                                                       34731500
         TM    SDBFLG2,SDB2IOE     IF I/O ERROR,                        34732000
         BO    HERWTERD            RETURN ERROR TO USER.                34732500
         MVI   LRCTLENG,LRCBFEND   TRUNCATE CURRENT BUFFER.             34733000
         LA    R0,HSVCEOBP         SET HAMSVC FUNCTION REGISTER.        34733500
         LR    R1,RRPL             SET HAMSVC ARGUMENT REGISTER.        34734000
         SVC   HAMSVC              ISSUE HAMSVC.                        34734500
         LTR   R15,R15             UNLESS SVC HAD AN ERROR,             34735000
         BZ    HPMOVE              TRY AGAIN TO MOVE DATA.              34735500
         BR    R15                 ERROR - TELL IT TO THE USER.         34736000
*                                                                       34736500
*              CLEAN UP AFTER NON-UPDATE PUT                            34737000
*                                                                       34737500
HP010    DS    0H                                                       34738000
         LA    R1,1                INCREMENT                            34738500
         AL    R1,BFRCT            RECORD COUNTER IN BUFFER             34739000
         ST    R1,BFRCT            BY ONE.                              34739500
         AL    R1,SDBRECCT         COMPUTE TOTAL RECORDS.               34740000
         CL    R1,SDBOUTLM         DOES IT EXCEED OUTLIM=...            34740500
         BNH   HP020               BRANCH IF NOT.                       34741000
         LA    R0,HSVCOUTL         SET HAMSVC FUNCTION REGISTER.        34741500
         LR    R1,RRPL             SET HAMSVC ARGUMENT REGISTER.        34742000
         SVC   HAMSVC              ISSUE HAMSVC.                        34742500
*                                                                       34743000
*              RETURN RBA TO USER                                       34743500
*                                                                       34744000
HP020    DS    0H                                                       34744500
         L     R3,BFRBA+4          GET RIGHT HALF OF RBA.               34745000
         AL    R3,=F'1'            INCREMENT IT BY 1                    34745500
         ST    R3,BFRBA+4          AND SAVE NEW RBA IN UBF.             34746000
*                                                                       34746500
*              COMPUTE SPACE LEFT IN UBF                                34747000
*                                                                       34747500
         L     R2,BFLOC            GET PTR TO NEXT AVAIL BYTE.          34748000
         LA    R3,BFIO-1           COMPUTE                           R4 34748500
         AH    R3,$SVBFSIZ         SPACE AVAILABLE                   R4 34749000
         SLR   R3,R2               IN UBF.                           R4 34749500
         ST    R3,BFLEN            SAVE SPACE AVAIL IN UBF.             34750000
*                                                                       34750500
*              RETURN TO USER                                           34751000
*                                                                       34751500
         B     HERNORML            RETURN TO USER.                      34752000
         EJECT                                                          34752500
*                                                                       34753000
*              PROCESS PUT-UPDATE REQUEST                               34753500
*                                                                       34754000
HP100    DS    0H                                                       34754500
         L     R2,RPLARG           POINT TO RBA TO LOCATE AND           34755000
         LM    R2,R3,0(R2)         LOAD IT INTO R2 AND R3.              34755500
         CALL  HFINDRBA            SEE IF CURRENT UBF HAS THE RBA.      34756000
         BNZ   HP110               IF NOT, TRY HBFS.                    34756500
*                                                                       34757000
*              MOVE RECORD INTO CURRENT UBF                             34757500
*                                                                       34758000
         BAL   R14,HP190           CHECK LENGTH.                        34758500
         L     R15,BFLOC           SAVE CURRENT BUF OFFSET IN R15.      34759000
         ST    R1,BFLOC            SET UPDATE LOCN IN BFLOC             34759500
         BAL   R14,HPMOVE          AND USE HPMOVE TO MOVE RECORD.       34760000
         ST    R15,BFLOC           RESTORE CURRENT BUFFER OFFSET.       34760500
         LA    R0,0                SHOW NORMAL COMPLETION.              34761000
         BC    8,HRPLEXIT          RETURN TO USER.                      34761500
*                                                                       34762000
*              MOVE RECORD INTO HOLD BUFFERS                            34762500
*                                                                       34763000
HP110    DS    0H                                                       34763500
         L     RBUF,SDBHBF         POINT TO FIRST HOLD BUFFER.          34764000
         LTR   RBUF,RBUF           IF NO HOLD BUFFERS, ERROR -          34764500
         BZ    HERINUPD            PUT-UPDATE BEFORE GET-UPDATE.        34765000
         L     R1,BFLOC            POINT TO UPDATING RECORD.            34765500
         BAL   R14,HP190           VERIFY LENGTH IS CORRECT.            34766000
HP120    BAL   R14,HPMOVE          MOVE DATA FROM USER         @OZ16677 34766500
         L     RBUF,BFBF           POINT TO NEXT HBF.                   34767000
         L     R1,BFLOC            POINT TO NEXT SEGMENT.               34767500
         BC    2,HP120             REPEAT IF REQUIRED          @OZ16677 34768000
         LA    R0,HSVCPUPD         SET HAMSVC FUNCTION REGISTER.        34768500
         LR    R1,RRPL             SET HAMSVC ARGUMENT REGISTER.        34769000
         SVC   HAMSVC              ISSUE HAMSVC.                        34769500
         LTR   R0,R15              TRANSFER RETURN CODE TO R0           34770000
         B     HRPLEXIT            AND RETURN TO USER.                  34770500
         SPACE 3                                                        34771000
*                                                                       34771500
*              SUBROUTINE TO VERIFY UPDATE LENGTH                       34772000
*                                                                       34772500
HP190    DS    0H                                                       34773000
         SLR   R0,R0               ZERO R0 FOR RECORD ELNGTH.           34773500
         IC    R0,LRCTLENG         ASSUME NON-SPAN, GET LENGTH.         34774000
         TM    LRCFLAG1,LRC1SPAN   IS RECORD SPANNED...                 34774500
         BZ    *+8                 IF NOT-, LENGTH OKAY.                34775000
         LH    R0,LRCSRECL         GET SPANNED-RECORD LENGTH.           34775500
         CL    R0,RPLRLEN          IS USER LENGTH CORRECT...            34776000
         BER   R14                 RETURN IF SO.                        34776500
         B     HERDLCER            OTHERWISE DATA LENGTH ERROR.         34777000
         TITLE 'PUT/ENDREQ FOR INTERNAL READER'                         34777500
*                                                                       34778000
*              ENTRY FOR PUT FOR INTRDR                                 34778500
*                                                                       34779000
HPIRDR   DS    0H                                                       34779500
         USING DCTDSECT,RSDB       ESTABLISH DCT ADDRESSABILITY.        34780000
*                                                                       34780500
*              SET REQUEST TYPE FLAGS                                   34781000
*                                                                       34781500
*              THIS LINE DELETED BY APAR NUMBER                @OZ24894 34782500
         L     R2,RPLAREA          GET POINTER TO USER RECORD           34783000
         LA    R2,0(,R2)           CLEAR HI-ORDER BYTE               R4 34783100
         L     R3,RPLRLEN          AND GET ITS LENGTH.                  34783500
         CL    R3,=F'5'            IF LENGTH LESS THAN 5,               34784000
         BL    HPI030              CAN'T BE /*EOF OR /*DEL.             34784500
         SLR   R0,R0               ZERO REGISTER TO HOLD FLAGS.         34785000
         CLC   =C'/*EOF',0(R2)     IS IT /*EOF...                       34785500
         BNE   HPI010              SKIP IF NOT.                         34786000
         LA    R0,RIDEOF           YES.  SET FLAG IN R0.                34786500
HPI010   CLC   =C'/*DEL',0(R2)     IS IT /*DEL...                       34787000
         BE    HPI015              BR IF YES                        R41 34787200
         CLC   =C'/*PURGE',0(R2)   IS IT /*PURGE...                 R41 34787300
         BNE   HPI020              SKIP IF NOT.                         34787500
HPI015   LA    R0,RIDDEL           SET DEL/PURGE FLAG IN R0         R41 34788000
HPI020   SLL   R0,24               SHIFT FLAG TO HIGH BYTE              34788500
         OR    R2,R0               AND ADD IT TO REG 2.                 34789000
HPI030   BAL   R14,HINTRDR         CALL GENERALIZED INTRDR              34789500
         B     HRPLEXIT            SUBROUTINE AND RETURN.               34790000
         SPACE 3                                                        34790500
*                                                                       34791000
*              ENTRY FOR ENDREQ FOR INTRDR                              34791500
*                                                                       34792000
HENDI    DS    0H                                                       34792500
         MVC   RPLRBAR,RIDJOBID    RETURN JOB ID TO USER IN RPL      R4 34792800
         LM    R2,R3,HENDIAD       GET DATA START, LENG, FLAGS          34794000
         BAL   R14,HINTRDR         AND CALL INTRDR SUBROUTINE.          34794500
         MVC   RPLRBAR,RIDJOBID    RETURN JOB ID TO USER IN RPL.        34795000
         B     HRPLEXIT            RETURN TO CALLER.                    34795500
         SPACE 2                                                        34796000
HENDIAD  DS    0F                                                       34796500
         DC    AL1(RIDERQ)         FLAGS - ENDREQ                       34797000
         DC    AL3(*+7)            DATA ADDRESS                         34797500
         DC    A(5)                DATA LENGTH                          34798000
         DC    C'/*EOF'            DATA                                 34798500
         TITLE 'INTRDR ACCESS METHOD ROUTINE'                           34799000
*                                                                       34799500
*              GENERALIZED INTRDR SUBROUTINE                            34800000
*                                                                       34800500
HINTRDR  DS    0H                                                       34801000
RIDEOF   EQU   X'08'               PUT REQUEST FOR /*EOF                34801500
RIDDEL   EQU   X'04'               PUT REQUEST FOR /*DEL OR /*PURGE R41 34802000
RIDERQ   EQU   X'02'               ENDREQ REQUEST                       34802500
RIDCLS   EQU   X'01'               CLOSE REQUEST                        34803000
*                                                                       34803500
*              IF NO INTRDR BUFFERS, GET THEM                           34804000
*                                                                       34804500
         L     RBUF,RIDUBF         POINT TO BUFFER.                     34805000
         LTR   RBUF,RBUF           DOES IT EXIST...                     34805500
         BNZ   HIR010              IF SO, CONTINUE.                     34806000
         L     R0,HIRCLS           NO BUFFER.  IS THIS                  34806500
         NR    R0,R2               A CALL FROM CLOSE...                 34807000
         BNZ   HIREND              IF SO, RETURN.                       34807500
         BAL   R4,HIRSVC           CALL HAMSVC TO GET BUFFERS.          34808000
         L     RBUF,RIDUBF         POINT TO UNPROTECTED BUFFER.         34808500
*                                                                       34809000
*              IF RECORD WON'T FIT, ISSUE HAMSVC                        34809500
*                                                                       34810000
HIR010   DS    0H                                                       34810500
         STCM  R2,8,BFFL1          SAVE ENTRY FLAGS IN BFFL1.           34811000
         CL    R3,=F'254'          IS RECORD TOO LONG...                34811500
         BH    HIRERR1             IF SO, ERROR.                        34812000
         LTR   R3,R3               IF NOT ZERO-LENGTH,                  34812500
         BNZ   *+16                SKIP.                                34813000
         LA    R2,=C' '            ELSE SET ONE BLANK,                  34813500
         ICM   R2,8,BFFL1          INTRDR FLAGS,                        34814000
         LA    R3,1                AND LENGTH OF ONE.                   34814500
         LA    R5,LRCTEXT-LRCDSECT(,R3)  COMPUTE REAL REC LENGTH        34815000
         CL    R5,BFLEN            AND SEE IF IT WILL FIT.              34815500
         BNH   HIR020              IF IT WILL, GO MOVE IT.              34816000
         MVI   BFFL1,0             ZERO FLAGS BEFORE USING SVC.         34816500
         BAL   R4,HIRSVC           IF IT WON'T, ISSUE SVC.              34817000
         STCM  R2,8,BFFL1          RESTORE FLAGS AFTER SVC.             34817500
*                                                                       34818000
*              MOVE RECORD TO BUFFER                                    34818500
*                                                                       34819000
HIR020   DS    0H                                                       34819500
         L     R1,BFLOC            GET LOCATION IN BUFFER.              34820000
         LA    R4,BFDAT            GET ADDR OF END             @OZ29839 34820100
         AL    R4,=A(RIDBUFSZ-(BFDAT-BFD))  OF BUFFER.         @OZ29839 34820150
         CR    R4,R1               COMPARE BFLOC TO END.       @OZ29839 34820200
         BNH   HERBLKER            ABEND1FA,BUFLOC TOO LARGE.  @OZ29839 34820250
         CR    RBUF,R1             COMPARE BFLOC TO START.     @OZ29839 34820300
         BNL   HERBLKER            ABEND1FA,BFLOC TOO SMALL.   @OZ29839 34820350
         STC   R3,LRCTLENG         SET TEXT LENGTH.                     34820500
         STC   R3,LRCLRECL         SET ORIGINAL RECORD LENGTH.          34821000
         MVI   LRCFLAG1,0          SET FLAGS TO ZERO.                   34821500
         LA    R4,LRCTEXT          POINT R4 TO LRCTEXT FOR MVCL.        34822000
         LCR   R5,R5               COMPLEMENT REAL LENGTH.              34822500
         AL    R5,BFLEN            COMPUTE NEW REMAINING LENGTH         34823000
         ST    R5,BFLEN            AND SAVE FOR NEXT TIME.              34823500
         LR    R5,R3               SET SINK LENGTH TO SOURCE.           34824000
         MVCL  R4,R2               MOVE RECORD TO BUFFER.               34824500
         ST    R4,BFLOC            SAVE NEW BUF LOC FOR NEXT TIME.      34825000
         EJECT                                                      R41 34825200
*                                                                       34825500
*              IF /*EOF /*DEL /*PURGE ENDREQ OR CLOSE, ISSUE HAMSVC R41 34826000
*                                                                       34826500
         TM    BFFL1,RIDEOF+RIDDEL+RIDERQ+RIDCLS  IF ALL OFF,           34827000
         BZ    HIREND              RETURN TO CALLER.                    34827500
         BAL   R4,HIRSVC           ELSE CALL SVC.                       34828000
*                                                                       34828500
*              NORMAL EXIT                                              34829000
*                                                                       34829500
HIREND   DS    0H                                                       34830000
         SLR   R0,R0               SHOW NORMAL COMPLETION.              34830500
         BR    R14                 RETURN TO CALLER.                    34831000
*                                                                       34831500
*              ERROR EXIT - RECORD TOO LONG                             34832000
*                                                                       34832500
HIRERR1  L     R0,=A(RPLINLEN+65536*RPLLOGER)  SET CODE                 34833000
         BR    R14                 AND RETURN TO CALLER.                34833500
*                                                                       34834000
*              SUBROUTINE TO ISSUE HAMSVC FOR INTRDR                    34834500
*                                                                       34835000
HIRSVC   DS    0H                                                       34835500
         LA    R0,HSVCIRD          SET HAMSVC FUNCTION REGISTER         34836000
         LCR   R1,RACB             AND HAMSVC ARGUMENT REGISTER.        34836500
         SVC   HAMSVC              ISSUE HAMSVC.                        34837000
         LTR   R0,R15              IF NORMAL RETURN FROM SVC,           34837500
         BZR   R4                  RETURN TO USER.                      34838000
         BR    R14                 ELSE RETURN CODE TO CALLER.          34838500
*                                                                       34839000
*              CONSTANTS                                                34839500
*                                                                       34840000
HIRCLS   DC    0A(0),AL1(RIDCLS),AL3(0)  CONSTANT TO TEST CLOSE         34840500
         USING SDBDSECT,RSDB       RE-ESTABLISH SDB BASE.               34841000
         TITLE 'HPMOVE - HAM PUT SUBROUTINE'                            34841500
*                                                                       34842000
*              HAM SUBROUTINE TO MOVE RECORD FROM USER                  34842500
*                                                                       34843000
         CNOP  4,8                                                      34843500
HPMOVE   DS    0H                                                       34844000
         TM    BFFL1,BF1PSG+BF1PMV TEST FOR RE-ENTRY.                   34844500
         BO    HPM200              BRANCH IF RE-ENTRY FOR SEGMENT.      34845000
         BM    HPM020              BRANCH IF RE-ENTRY FOR RECORD.       34845500
         L     R2,RPLAREA          POINT R2 TO USER DATA AREA AND       34846000
         LA    R2,0(,R2)           CLEAR HI-ORDER BYTE               R4 34846100
         LH    R3,RPLRLEN+2        SET R3 TO USER DATA LENGTH.          34846500
         LTR   R3,R3               TEST USER DATA LENGTH.               34847000
         BM    HERRECLN            ERROR IF NEGATIVE.                   34847500
         BP    *+12                OKAY IF POSITIVE.                    34848000
         LA    R2,=C' '            IF ZERO LENGTH, MAKE                 34848500
         LA    R3,1                THE TEXT ONE BLANK.                  34849000
*                                                                       34849500
*              SHOW INITIAL ENTRY.  CHECK SPAN REQUIREMENTS.            34850000
*                                                                       34850500
         OI    BFFL1,BF1PMV        SHOW INITIAL ENTRY.                  34851000
         CL    R3,=F'254'          DOES RECORD REQUIRE SPANNING...      34851500
         BH    HPM100              BRANCH IF SO.                        34852000
*                                                                       34852500
*              TRUNCATE TRAILING BLANKS IF REQUIRED.                    34853000
*                                                                       34853500
         TM    SDBFLG1,SDB1OUT     IF DATA SET NOT MARKED SYSOUT,       34854000
         BZ    HPM010              NO TRUNCATION REQUIRED.              34854500
         LA    R1,0(R2,R3)         R1 = END OF DATA PLUS 1.             34855000
         BCTR  R1,0                BACK UP 1 CHARACTER.                 34855500
         CLI   0(R1),C' '          TEST LAST CHARACTER FOR BLANK.       34856000
         BNE   HPM010              BR IF NO.                            34856500
         LA    R4,7                SET R4 TO VALUE 7.                   34857000
         CLR   R3,R4               TEST ORIGINAL COUNT.                 34857500
         BNH   HPM004              BR IF LESS THAN 8 CHARACTERS.        34858000
         NR    R4,R1               R4 = BYTES BEYOND LAST DBL-WORD      34858500
         SLR   R1,R4               R1 = LAST DBL-WORD WITHIN DATA.      34859000
         EX    R4,HPMBLTST         TEST FOR BLANKS AT END OF LINE.      34859500
         BNE   HPM010              BR IF NO.                            34860000
         L     R4,=F'-8'           'INCREMENT' FOR FOLLOWING LOOP.      34860500
         LR    R5,R2               R5 = ADDRESS OF FIRST DATA BYTE      34861000
         SPACE 1                                                        34861500
         BXLE  R1,R4,HPM006        BACK UP 1 DOUBLE-WORD.               34862000
         CLC   0(8,R1),HPMBLNKS    TEST FOR DOUBLE-WORD OF BLANKS.      34862500
         BE    *-10                BR IF SO.                            34863000
         B     HPM008              ELSE BR TO GET LINE LENGTH.          34863500
*                                                                       34864000
*        CONSTANTS USED BY BLANK TRUNCATION ROUTINE.                    34864500
*                                                                       34865000
HPMBLTST CLC   0(*-*,R1),HPMBLNKS  *** EXECUTE ONLY ***                 34865500
HPMBLNKS DC    0D'0',CL8' '        DOUBLE-WORD OF BLANKS                34866000
*                                                                       34866500
*        TRUNCATE BLANKS FROM 'SHORT' LINE.                             34867000
*                                                                       34867500
HPM002   BCTR  R1,0                BACK UP 1 CHARACTER.                 34868000
         CLI   0(R1),C' '          TEST FOR BLANK.                      34868500
         BNE   HPM010              BR IF NO.                            34869000
HPM004   BCT   R3,HPM002           REDUCE COUNT BY 1.                   34869500
*                                                                       34870000
*        SET COUNT FOR ALL-BLANK LINE.                                  34870500
*                                                                       34871000
HPM005   LA    R3,1                SET COUNT FOR ALL-BLANK LINE.        34871500
         B     HPM010              BR TO MOVE LINE.                     34872000
*                                                                       34872500
*        TEST FOR ALL-BLANK LINE.                                       34873000
*                                                                       34873500
         CNOP  0,8                                                      34874000
HPM006   CLC   0(8,R5),HPMBLNKS    TEST FOR ALL-BLANK LINE.             34874500
         BE    HPM005              BR IF SO.                            34875000
*                                                                       34875500
*        COMPUTE LENGTH OF NON-BLANK LINE.                              34876000
*                                                                       34876500
HPM008   LA    R3,8(,R1)           LAST KNOWN BLANK CHARACTER.          34877000
         SLR   R3,R5               REMAINING CHARACTERS IN RECORD.      34877500
*                                                                       34878000
*              COMPUTE TOTAL LRC LENGTH REQUIRED                        34878500
*                                                                       34879000
HPM010   LA    R4,LRCSOUT-LRCDSECT(,R3)  ASSUME CONTROL CHAR.           34879500
         L     R5,RPLCCHAR         IF RPLCCHAR DOES NOT                 34880000
         LTR   R5,R5               POINT TO ZERO,                       34880500
         BNZ   HPM020              TEXT STARTS AT LRCSOUT.              34881000
         LA    R4,LRCTEXT-LRCDSECT(,R3)  TEXT STARTS AT LRCTEXT.        34881500
*                                                                       34882000
*              SEE IF RECORD WILL FIT (RE-ENTER HERE)                   34882500
*                                                                       34883000
HPM020   L     R1,BFLOC            POINT TO FIRST AVAILABLE BYTE.       34883500
         TM    RPLOPT2,RPLUPD      IF PUT-UPDATE,                       34884000
         BO    HPM025              DO NOT CHECK LENGTH.                 34884500
         C     R4,BFLEN            IS SPACE LARGE ENOUGH...             34885000
         BHR   R14                 IF NOT, RETURN CC=2.                 34885500
*                                                                       34886000
*              COMPUTE FLAG BYTE AND SET LRCCCTL                        34886500
*                                                                       34887000
HPM025   DS    0H                                                       34887500
         LTR   R5,R5               IF NO CARRIAGE CONTROL,              34888000
         BZ    HPM040              FLAG BYTE IS ZERO.                   34888500
         MVC   LRCCCTL,0(R5)       ELSE SET LRCCCTL FROM USER DATA      34889000
         LA    R5,LRC1CCTL         AND FLAG BYTE AS LRC1CCTL.           34889500
         TM    ACBCCTYP,ACBCCMCH   IF ACB SPECIFIES                     34890000
         BZ    HPM030              MACHINE CONTROL CHARACTERS,          34890500
         LA    R5,LRC1TMCH(,R5)    SPECIFY ALSO IN FLAG BYTE.           34891000
         TM    LRCCCTL,2           TEST FOR 'IMMEDIATE' COMMAND.        34891500
         BZ    HPM040              BR IF NO.                            34892000
         SLR   R3,R3               ELSE SET DATA LENGTH TO ZERO         34892500
         LA    R4,LRCSOUT-LRCDSECT AND RESET TOTAL LRC LENGTH.          34893000
         B     HPM040              THEN BR TO MOVE DATA.                34893500
*                                                                       34894000
*        TEST FOR ASA CONTROL CHARACTERS.                               34894500
*                                                                       34895000
HPM030   TM    ACBCCTYP,ACBCCASA   IF ACB SPECIFIES                     34895500
         BZ    *+8                 ASA CONTROL CHARACTERS,              34896000
         LA    R5,LRC1TASA(,R5)    SPECIFY ALSO IN FLAG BYTE.           34896500
*                                                                       34897000
*              SET LENGTH AND FLAGS, AND MOVE RECORD                    34897500
*                                                                       34898000
HPM040   STC   R3,LRCTLENG         SET TEXT LENGTH IN LRC.              34898500
         IC    R0,RPLRLEN+3        GET ORIGINAL RECORD LENGTH           34899000
         STC   R0,LRCLRECL         AND SAVE IT IN RECORD.               34899500
         STC   R5,LRCFLAG1         SET FLAGS IN LRC.                    34900000
         SLR   R4,R3               COMPUTE LRC HEADER LENGTH.           34900500
         ALR   R4,R1               COMPUTE TEXT ADDRESS.                34901000
         LR    R5,R3               SET LENGTHS EQUAL,                   34901500
         NI    BFFL1,255-BF1PSG-BF1PMV  RESET ENTRY FLAGS, AND          34902000
         MVCL  R4,R2               MOVE USER TEXT INTO LRC.             34902500
         TM    RPLOPT2,RPLUPD      UNLESS THIS IS                       34903000
         BO    *+10                PUT-UPDATE,                          34903500
         MVC   RPLRBAR,BFRBA       RETURN RBA TO CALLER.                34904000
         LR    R1,R4               RETURN NEXT AVAILABLE BYTE AND       34904500
         SR    R0,R0               CONDITION CODE ZERO                  34905000
         BR    R14                 TO CALLER.                           34905500
         SPACE 3                                                        34906000
*                                                                       34906500
*              FIRST-SEGMENT SPANNED-RECORD PROCESSING                  34907000
*                                                                       34907500
HPM100   DS    0H                                                       34908000
         OI    BFFL1,BF1PSG        SHOW FIRST SEGMENT PROCESSED.        34908500
         TM    RPLOPT2,RPLUPD      IF PUT-UPDATE,                       34909000
         BO    HPM110              DO NOT CHECK LENGTH.                 34909500
         LA    R0,255+LRCSFTXT-LRCDSECT  REQUIRE REASONABLE MINIMUM  R4 34910000
         CL    R0,BFLEN            FOR FIRST SEGMENT.                   34910500
         BL    HPM110              BRANCH IF MIN AVAILABLE.             34911000
         NI    BFFL1,255-BF1PSG-BF1PMV  ELSE RESET FLAGS,               34911500
         L     R1,BFLOC            SET BFLOC IN R1 FOR CALLER,          34912000
         SLR   R0,R0               SET CC = 2,                          34912500
         BR    R14                 AND RETURN TO CALLER.                34913000
*                                                                       34913500
*              CREATE FIRST SEGMENT                                     34914000
*                                                                       34914500
HPM110   DS    0H                                                       34915000
         L     R1,BFLOC            POINT TO FIRST AVAIL LRC BYTE.       34915500
         MVI   LRCTLENG,0          SET ZERO NON-SPAN LENGTH.            34916000
         L     R5,BFLEN            GET LENGTH AVAILABLE.                34916500
         SL    R5,=A(LRCSFTXT-LRCDSECT)  DECR BY 1ST-SEG HDR LENG.      34917000
         MVI   LRCFLAG1,LRC1SPAN+LRC1SBGN  SET FLAGS.                   34917500
         STH   R3,LRCSRECL         SET TOTAL RECORD LENGTH IN LRC.      34918000
         LA    R4,LRCSFTXT         POINT TO FIRST-SEG TEXT START.       34918500
         TM    RPLOPT2,RPLUPD      IS THIS PUT OR PUT UPDATE   @OZ16677 34918550
         BNO   HPM113              BRANCH IF PUT               @OZ16677 34918600
         LH    R5,LRCSEGL          LOAD SEGMENT LENGTH         @OZ16677 34918650
         CLR   R3,R5               IS THIS THE ONLY SEGMENT    @OZ16677 34918700
         BE    HPM120              BRANCH IF YES               @OZ16677 34918750
         B     HPM117              MOVE FIRST SEGMENT          @OZ16677 34918800
HPM113   DS    0H                                              @OZ16677 34918850
         CLR   R3,R5               WILL WHOLE REC FIT IN SPACE...       34919000
         BNH   HPM120              BRANCH IF SO.                        34919500
         STH   R5,LRCSEGL          NO.  SET FIRST SEGMENT LENGTH.       34920000
HPM117   DS    0H                                              @OZ16677 34920300
         MVCL  R4,R2               MOVE FIRST SEGMENT TO LRC.           34920500
         TM    RPLOPT2,RPLUPD      UNLESS THIS IS                       34921000
         BO    *+10                PUT-UPDATE,                          34921500
         MVC   RPLRBAR,BFRBA       RETURN RBA TO CALLER.                34922000
         LR    R1,R4               RETURN NEXT BYTE ADR IN R1.          34922500
         SLR   R0,R0               SET CC = 2                           34923000
         BR    R14                 AND RETURN TO CALLER.                34923500
*                                                                       34924000
*              CREATE FIRST AND ONLY SEGMENT                            34924500
*                                                                       34925000
HPM120   DS    0H                                                       34925500
         MVI   LRCFLAG1,LRC1SPAN+LRC1SBGN+LRC1SMID+LRC1SEND  FLAG       34926000
         NI    BFFL1,255-BF1PSG-BF1PMV  RESET ENTRY FLAGS.              34926500
         STH   R3,LRCSEGL          SET SEGMENT LENGTH.                  34927000
         LR    R5,R3               SET SINK LENGTH TO SOURCE LENG.      34927500
         MVCL  R4,R2               MOVE ENTIRE RECORD TO LRC.           34928000
         TM    RPLOPT2,RPLUPD      TEST FOR PUT UPDATE               R4 34928100
         BO    SKIP410             BR IF YES                         R4 34928200
         MVC   RPLRBAR,BFRBA       RETURN RBA TO CALLER              R4 34928300
SKIP410  LR    R1,R4               RETURN NEXT BYTE ADDRESS IN R1    R4 34928500
         SR    R0,R0               SET CC = 0                        R4 34928700
         BR    R14                 RETURN TO CALLER                  R4 34929000
         SPACE 3                                                        34929500
*                                                                       34930000
*              CREATE SUBSEQUENT SEGMENT (RE-ENTER HERE)                34930500
*                                                                       34931000
HPM200   DS    0H                                                       34931500
         L     R1,BFLOC            POINT TO FIRST BYTE AVAILABLE.       34932000
         MVI   LRCTLENG,0          SET ZERO NON-SPAN LENGTH.            34932500
         LH    R5,LRCSEGL          LOAD R5 FOR PUT-UPDATE      @OZ16677 34932600
         TM    RPLOPT2,RPLUPD      IS THIS PUT, OR PUTUPDATE   @OZ16677 34932700
         BO    HPM205              BRANCH IF UPDATING          @OZ16677 34932800
         L     R5,BFLEN            GET AVAIL LENG AND DECREMENT         34933000
         SL    R5,=A(LRCSTEXT-LRCDSECT)  BY NOT-1ST-SEG HDR LENG.       34933500
HPM205   DS    0H                                              @OZ16677 34933800
         LA    R4,LRCSTEXT         POINT TO NOT-1ST-SEG TEXT.           34934000
         MVI   LRCFLAG1,LRC1SPAN+LRC1SMID  SET MIDDLE SEG FLAGS.        34934500
         CLR   R3,R5               WILL REST OF RECORD FIT...           34935000
         BNH   HPM210              IF SO, BRANCH TO LAST SEG.           34935500
         STH   R5,LRCSEGL          SET MIDDLE SEGMENT LENGTH.           34936000
         MVCL  R4,R2               MOVE TEXT TO MIDDLE SEGMENT.         34936500
         LR    R1,R4               RETURN NEXT BYTE ADR IN R1.          34937000
         SLR   R0,R0               SET CC = 2                           34937500
         BR    R14                 AND RETURN TO CALLER.                34938000
*                                                                       34938500
*              CREATE LAST SEGMENT                                      34939000
*                                                                       34939500
HPM210   DS    0H                                                       34940000
         STH   R3,LRCSEGL          SHOW REMAINING LENG THIS SEG.        34940500
         LR    R5,R3               SET SINK LENGTH TO SOURCE LENG.      34941000
         XI    LRCFLAG1,LRC1SMID+LRC1SEND  SHOW END SEGMENT.            34941500
         NI    BFFL1,255-BF1PSG-BF1PMV  RESET ENTRY FLAGS.              34942000
         MVCL  R4,R2               MOVE TEXT TO LAST SEGMENT.           34942500
         LR    R1,R4               RETURN TO CALLER WITH R1 = NEXT      34943000
         BR    R14                 BYTE AND CC=0 (FROM MVCL).           34943500
         TITLE 'HAM ''POINT'' ACCESS METHOD'                            34944000
*                                                                       34944500
*                                                                       34945000
*              HASP 'POINT' ACCESS METHOD                               34945500
*                                                                       34946000
*                                                                       34946500
HAMPOINT DS    0H                                                       34947000
*                                                                       34947500
*              SEE IF UNPROTECTED BUFFER ALREADY CONTAINS RECORD        34948000
*                                                                       34948500
HT00     DS    0H                                                       34949000
         L     R1,RPLARG           POINT TO RBA TO POINT TO.            34949500
         MVC   BFRBA,0(R1)         MOVE ARG RBA TO BFRBA.               34950000
         LA    R0,1                GET CONSTANT 1.                      34950500
         CLM   R0,7,BFRBA+5        IF LOGICAL RECORD NUMBER             34951000
         BNH   *+8                 IS ZERO,                             34951500
         STCM  R0,7,BFRBA+5        MAKE IT ONE.                         34952000
         CLC   BFRBA+1(4),=XL4'0'  IF MTTR PORTION NOT ZERO,            34952500
         BNE   HT10                CONTINUE.                            34953000
         MVC   BFRBA+1(4),SDBTRKF+1  ELSE SET TO START OF DS.           34953500
HT10     DS    0H                                                       34954000
*                                                                       34954500
*              USE HAMSVC TO READ IN THE CORRECT BLOCK                  34955000
*                                                                       34955500
         LA    R0,HSVCPNT          SET HAMSVC FUNCTION REGISTER.        34956000
         LR    R1,RRPL             SET HAMSVC ARGUMENT REGISTER.        34956500
         SVC   HAMSVC              ISSUE HAMSVC.                        34957000
         LTR   R0,R15              TRANSFER RETURN CODE TO R0           34957500
         BNZR  R15                 ERROR EXIT IF POINT FAILED.          34958000
         B     HRPLEXIT            AND EXIT.                            34958500
         TITLE 'HAM ''ENDREQ'' ACCESS METHOD'                           34959000
*                                                                       34959500
*                                                                       34960000
*              HASP 'ENDREQ' ACCESS METHOD                              34960500
*                                                                       34961000
*                                                                       34961500
HAMENDRE DS    0H                                                       34962000
         LR    R1,RRPL             SET RPL REGISTER.                    34962500
         LA    R0,HSVCENDR         SET FUNCTION REGISTER.               34963000
         SVC   HAMSVC              ISSUE SVC FOR ENDREQ.                34963500
         LTR   R0,R15              IF R15 CONTAINS A POINTER,           34964000
         BNZR  R15                 ERROR - TAKE EXIT.                   34964500
         B     HRPLEXIT            OTHERWISE NORMAL COMPLETION.         34965000
         TITLE 'HAM -- RPL RETURN PROCESSING'                           34965500
*                                                                       34966000
*                                                                       34966500
*              RPL ERROR RETURNS -- LOGICAL                             34967000
*                                                                       34967500
*                                                                       34968000
         SPACE 1                                                        34968500
HERNOEOD LA    R0,RPLEODER         END-OF-DATA OCCURRED.                34969000
         B     HERLOGER                                                 34969500
HERSPACE LA    R0,RPLNOEXT         NO SPOOL SPACE IS LEFT.              34970000
         B     HERLOGER                                                 34970500
HERINRBA LA    R0,RPLINRBA         BAD RBA - POINT, GET-UPD.            34971000
         B     HERLOGER                                                 34971500
HERSTOR  LA    R0,RPLNOVRT         GETMAIN FAILED.                      34972000
         B     HERLOGER                                                 34972500
HERINBUF LA    R0,RPLINBUF         NO ROOM IN USER BUF - GET.           34973000
         B     HERLOGER                                                 34973500
HERINVP  LA    R0,RPLINACC         E.G., GET ON OUTPUT DATA SET.        34974000
         B     HERLOGER                                                 34974500
HERINUPD LA    R0,RPLINUPD         PUT-UPD BEFORE GET-UPD.              34975000
         B     HERLOGER                                                 34975500
HERDLCER LA    R0,RPLDLCER         PUT-UPD WOULD CHANGE LENGTH.         34976000
         B     HERLOGER                                                 34976500
HERRECLN LA    R0,RPLINLEN         E.G., SYSOUT LENGTH GREATER THAN 254 34977000
         B     HERLOGER                                                 34977500
         SPACE 1                                                        34978000
HERLOGER AL    R0,=A(RPLLOGER*65536)  SET LOGICAL ERROR.                34978500
         B     HRPLEXIT            START RETURNING TO USER.             34979000
         SPACE 3                                                        34979500
*                                                                       34980000
*                                                                       34980500
*              RPL ERROR RETURNS -- PHYSICAL                            34981000
*                                                                       34981500
*                                                                       34982000
         SPACE 1                                                        34982500
HERRDERD LA    R0,RPLRDERD         PHYS RD ERR OR KEY MISMATCH.         34983000
         B     HERPHYER                                                 34983500
HERWTERD LA    R0,RPLWTERD         PHYSICAL WRITE ERROR.                34984000
         SPACE 1                                                        34984500
HERPHYER AL    R0,=A(RPLPHYER*65536)  SET PHYSICAL ERROR.               34985000
         B     HRPLEXIT            START RETURNING TO USER.             34985500
         SPACE 3                                                        34986000
*                                                                       34986500
*                                                                       34987000
*              RPL ERROR RETURNS -- CONTROL BLOCK                       34987500
*                                                                       34988000
*                                                                       34988500
HERBLKER ABEND X'1FA',DUMP,,SYSTEM  CONTROL BLOCK ERROR.                34989000
         SPACE 3                                                        34989500
*                                                                       34990000
*              RPL NORMAL RETURN - NO ERROR                             34990500
*                                                                       34991000
HERNORML SLR   R0,R0               SHOW NO ERROR AT ALL.                34991500
         EJECT                                                          34992000
*                                                                       34992500
*              HRPLEXIT - RETURN CODE (IN R0) TO CALLER                 34993000
*                                                                       34993500
HRPLEXIT DS    0H                                                       34994000
         STCM  R0,7,RPLFDBK        SET COMPLETION CODE IN RPL.          34994500
         MVI   RPLCMPON,2          SET COMPONENT ID.                    34995000
         SRL   R0,16               RIGHT-JUSTIFY RPLRTNCD &             34995500
         ST    R0,16(,R13)         SET IT IN R15 SLOT.                  34996000
* POST CALLER'S ECB                                                     34996500
         LA    R1,RPLECB           ASSUME INTERNAL ECB.                 34997000
         TM    RPLOPT1,RPLECBSW    IF INTERNAL ECB,                     34997500
         BZ    *+8                 SKIP.                                34998000
         L     R1,RPLECB           POINT TO EXTERNAL ECB.               34998500
         MVI   0(R1),X'40'         POST THE ECB.                        34999000
         LTR   R0,R0               IF NO ERROR INDICATED,               34999500
         BZ    HEX200              GO RETURN TO CALLER.                 35000000
*                                                                       35000500
*              ERROR INDICATED - SEE IF USER EXIT APPLIES               35001000
*                                                                       35001500
         L     R4,ACBEXLST         POINT TO ACB'S EXIT LIST.            35002000
         CL    R4,=F'1'            IF POINTER IS 0 OR 1,                35002500
         BNH   HEX200              THERE'S NO EXIT LIST.                35003000
         USING IFGEXLST,R4         SET EXLST ADDRESSABILITY.            35003500
         CLI   EXLID,EXLIDD        IS IDENTIFIER OKAY...                35004000
         BNE   HEX200              IF NOT, IGNORE EXIT LIST.            35004500
* ASSUME END-OF-FILE EXIT                                               35005000
         LA    R2,EXLEODF          POINT TO EOD ENTRY.                  35005500
         LA    R3,EXLEODL          GET MIN LENGTH FOR IT.               35006000
         CLI   RPLRTNCD,RPLLOGER   IF NOT LOGICAL ERROR,                35006500
         BNE   HEX020              IT MUST BE PHYSICAL ERROR.           35007000
         CLI   RPLERRCD,RPLEODER   LOGICAL.  IF EOD,                    35007500
         BE    HEX100              GO TAKE USER EXIT.                   35008000
* ASSUME OTHER LOGICAL ERROR THAN END-OF-FILE                           35008500
         LA    R2,EXLLERF          POINT TO LOGICAL ERROR ENTRY.        35009000
         LA    R3,EXLLERL          GET MIN LENGTH FOR IT.               35009500
         B     HEX100              GO TAKE USER EXIT.                   35010000
* ASSUME PHYSICAL ERROR                                                 35010500
HEX020   DS    0H                                                       35011000
         LA    R2,EXLSYNF          POINT TO PHYSICAL ERROR ENTRY.       35011500
         LA    R3,EXLSYNL          GET MIN LENGTH FOR IT.               35012000
*                                                                       35012500
*              IF THE APPROPRIATE EXIT ROUTINE EXISTS, ENTER IT         35013000
*                                                                       35013500
HEX100   DS    0H                                                       35014000
         CH    R3,EXLLEN           IS EXIT LIST LONG ENOUGH...          35014500
         BH    HEX200              IF NOT, NO USER EXIT.                35015000
         USING IFGEXLEF,R2         SET ENTRY ADDRESSABILITY.            35015500
         TM    EXLFLAG,EXLPRES+EXLACTV  IF ENTRY NOT PRESENT &          35016000
         BNO   HEX200              ACTIVE, NO USER EXIT.                35016500
         $ALGN L,R0,EXLEXITP       GET ENTRY'S ADDRESS.                 35017000
         TM    EXLFLAG,EXLLINK     IF IT POINTS TO EXIT CODE,           35017500
         BZ    HEX150              GO TAKE USER EXIT.                   35018000
         LOAD  EPLOC=(0)           ELSE LOAD USER EXIT ROUTINE.         35018500
         $ALGN ST,R0,EXLEXITP      SAVE ADDRESS IN EXLST ENTRY.         35019000
         NI    EXLFLAG,255-EXLLINK SHOW ENTRY POINTS TO CODE.           35019500
HEX150   DS    0H                                                       35020000
         LM    R1,R12,24(R13)      RESTORE R1 THROUGH R12.              35020500
         LR    R15,R0              SET R15 = USER EXIT ENTRY PT.        35021000
         BALR  R14,R15             TAKE USER EXIT.                      35021500
HEX200   DS    0H                  IF USER EXIT RETURNS,                35022000
         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS                35022500
         BR    R14                 AND RETURN TO CALLER.                35023000
         SPACE 3                                                        35023500
         DROP  ,                   DROP ALL ADDRESSABILITY.             35024000
         TITLE 'HAM SUBROUTINE TO FIND RBA IN UBF'                      35024500
*                                                                       35025000
*                                                                       35025500
*              HAM SUBROUTINE TO FIND RBA IN UBF                        35026000
*                                                                       35026500
*                                                                       35027000
HFINDRBA DS    0H                                                       35027500
         USING SDBDSECT,RSDB                                            35028000
         USING BFD,RBUF                                                 35028500
         USING LRCDSECT,R1                                              35029000
         USING *,R15               SET LOCAL ADDRESSABILITY.            35029500
         SR    R0,R0               ZERO OUT LRC LENGTH REGISTER.        35030000
         SLDL  R2,8                R2 = MTTR                            35030500
         SRL   R3,8                R3 = LOGICAL RECORD NR.              35031000
         $ALGN S,R2,BFRBA+1        IS THE MTTR CORRECT...               35031500
         BNZR  R14                 IF NOT, RETURN NONZERO CC & R2.      35032000
         LA    R1,BFDAT            POINT TO FIRST LOGICAL RECORD.       35032500
HFR010   DS    0H                                                       35033000
         ALR   R1,R0               POINT TO NEXT LOGICAL RECORD.        35033500
         TM    LRCTLENG,LRCBFEND   IF IT'S END-OF-BUFFER,               35034000
         BOR   R14                 RETURN NONZERO CC.                   35034500
         SPACE 1                                                        35035000
         SR    R5,R5               ZERO R5 FOR IC.                      35035500
         IC    R5,LRCTLENG         GET TEXT LENGTH IN R5.               35036000
         TM    LRCFLAG1,LRC1CCTL+LRC1SPAN  IS IT NOT SYSOUT NOR SPAN... 35036500
         LA    R4,LRCTEXT          SET NORMAL TEXT START                35037000
         LA    R0,LRCTEXT-LRCDSECT(,R5)  AND OFFSET TO NEXT LR.         35037500
         BZ    HFR020              BRANCH IF NORMAL RECORD.             35038000
         TM    LRCFLAG1,LRC1CCTL   IS IT SYSOUT...                      35038500
         LA    R4,LRCSOUT          SET SYSOUT TEXT START                35039000
         LA    R0,LRCSOUT-LRCDSECT(,R5)  AND OFFSET TO NEXT LR.         35039500
         BO    HFR020              BRANCH IF SYSOUT RECORD.             35040000
         LA    R4,LRCSFTXT         GET SPANNED-RECORD START             35040500
         LH    R5,LRCSEGL          AND LENGTH                           35041000
         LA    R0,LRCSFTXT-LRCDSECT(,R5)  AND OFFSET TO NEXT LR.        35041500
         TM    LRCFLAG1,LRC1SBGN   IF FIRST SEGMENT,                    35042000
         BO    HFR020              COUNT RECORD & CONTINUE.             35042500
         LA    R0,LRCSTEXT-LRCDSECT(,R5)  IF NOT FIRST SEGMENT,         35043000
         B     HFR010              DO NOT COUNT RECORD.                 35043500
HFR020   BCT   R3,HFR010           COUNT A RECORD.                      35044000
         SR    R0,R0               REQUESTED RECORD IS FOUND.           35044500
         BR    R14                 RETURN ZERO CC.                      35045000
         DROP ,                    DROP ALL BASES.                      35045500
         TITLE 'HAM LITERAL POOL'                                       35046000
         LTORG                                                          35046500
         TITLE 'HAMSVC --- ENTERED FROM SVC 111'                        35047000
*                                                                       35047500
*                                                                       35048000
*              HASP ACCESS METHOD SUPERVISOR CALL                       35048500
*                                                                       35049000
*                                                                       35049500
SVCHAM   DS    0H                                                       35050000
         BALR  R12,0               ESTABLISH                            35050500
SVCHBASE DS    0H                  LOCAL ADDRESSABILITY.                35051000
         USING *,R12                                                    35051500
         USING DEBBASIC,R2         USE THE DEB DSECT.                   35052000
         LR    RRPL,R1             SET RPL BASE REGISTER.               35052500
         USING IFGRPL,RRPL         USE RPL ADDRESSABILITY.              35053000
         L     RSDB,DEBIRBAD       POINT TO THE SDB.                    35053500
         LTR   R3,R1               IF R1 IS ACB COMPLEMENT,             35054000
         BM    *+8                 SKIP ACB POINTER LOAD.               35054500
         L     R3,RPLDACB          POINT TO ACB FROM RPL.               35055000
         LPR   R3,R3               MAKE ACB POINTER POSITIVE.           35055500
         USING IFGACB,R3           SET ACB ADDRESSABILITY.              35056000
         TM    ACBINRTN,ACBINR     IS ACB FOR INTERNAL READER...        35056500
         BZ    SVCH10              IF NOT, PROCESS SDB.                 35057000
         DROP  R3                  DROP ACB ADDRESSABILITY.             35057500
*                                                                       35058000
*              INTERNAL READER INITIALIZATION                           35058500
*                                                                       35059000
         USING DCTDSECT,RSDB       SET INTRDR ADDRESSABILITY.           35059500
         L     RSVT,RIDSSVT        POINT TO SUBSYS VECTOR TABLE.        35060000
         B     SVCIRD              GO PROCESS INTRDR REQUEST.           35060500
*                                                                       35061000
*              NORMAL SUBSYSTEM DATA SET INITIALIZATION                 35061500
*                                                                       35062000
SVCH10   DS    0H                                                       35062500
         USING SDBDSECT,RSDB       SET SDB ADDRESSABILITY.              35063000
         L     RSVT,SDBSVT         POINT TO SUBSYS VECTOR TABLE.        35063500
         USING $SVDSECT,RSVT       USE THE SSVT DSECT.                  35064000
         L     RSJB,SDBSJB         POINT TO THE SJB AND                 35064100
         USING SJBDSECT,RSJB       SET ADDRESSABILITY.                  35064200
         TM    SJBFLG1,SJB1XBWT    IF NOT XBM-WITHOUT-JOB,              35064300
         BZ    SVCH20              CONTINUE.                            35064400
         L     RBUF,SDBUBF         FOR XBM WITHOUT JOB,                 35064500
         LTR   RBUF,RBUF           FIRST VERIFY THAT                    35064600
         BZ    SVCNORML            UNPROTECTED BUFFER EXISTS.           35064700
         USING BFD,RBUF            THEN                                 35064800
         LA    R0,BFDAT            RE-INITIALIZE                        35064900
         ST    R0,BFLOC            BFDAT                                35065000
         LH    R0,$SVBFSIZ         AND                               R4 35065100
         SL    R0,=A(BFDAT+1-BFIO) ALSO                              R4 35065200
         ST    R0,BFLEN            BFLEN                                35065300
         B     SVCNORML            AND RETURN NORMALLY.                 35065400
         DROP  RSJB,RBUF           DROP SJB,BUF BASES.                  35065500
SVCH20   CL    R0,=A(SVCHEND-SVCH30)  TEST R0                        R4 35065600
         BNL   SVCERRET            BR IF ILLEGAL TO ERROR RETURN     R4 35065700
         LR    R15,R0              RELOAD R0                         R4 35065800
         N     R0,=A(X'FF000003')  IF R0 POSITIVE MULTIPLE OF 4,     R4 35065900
         BZ    SVCH30(R15)          BR TO PROCESS REQUEST            R4 35066000
         B     SVCERRET              ELSE BR TO ERROR RETURN         R4 35066100
SVCH30   DS    0H                  START OF BRANCH TABLE             R4 35066200
         B     SVCGET              EOB FOR GET                          35066300
         B     SVCPUT              EOB FOR PUT                          35066400
         B     SVCIRD              INTERNAL READER PROCESSING           35066500
         B     SVCPNT              POINT PROCESSING                     35067000
         NOP   0                   HSVCENDI (16) OBSOLETE               35067500
         B     SVCENDR             ENDREQ PROCESSING                    35068000
         B     SVCUSO              OUTPUT LIMIT PROCESSING              35068500
         NOP   0                   HSVCCLSI (28) OBSOLETE               35069000
         B     SVCGUP              GET-UPDATE PROCESSING                35069500
         B     SVCPUP              PUT-UPDATE PROCESSING                35070000
         B     SVCXBM              EXECUTION BATCH MONITOR              35070500
SVCHEND  DS    0H                  END OF BRANCH TABLE               R4 35070600
         DROP  R2                                                       35071000
         EJECT                                                          35071500
*                                                                       35072000
*                                                                       35072500
*              HAMSVC - END-OF-BLOCK PROCESSING FOR GET                 35073000
*                                                                       35073500
*                                                                       35074000
SVCGET   DS    0H                                                       35074500
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         35075000
         USING BFD,RBUF            USE BUFFER DSECT.                    35075500
         TM    SDBFLG1,SDB1BFXS    IF PBF IS NOT REFILLED            R4 35075600
         BZ    SVCGET10             BECAUSE OF A PURGE-QUIESCE       R4 35075700
         NI    SDBFLG1,255-SDB1BFXS  DETECTED AT HCRETURN,           R4 35075800
         OI    SDBFLG2,SDB2IOA        SHOW I/O ACTIVE AND            R4 35075900
         EXCP  SDBIOB                  ISSUE EXCP TO REFILL PBF      R4 35076000
         WAIT  1,ECB=SDBECB        WAIT FOR I/O TO COMPLETE          R4 35076100
         B     SVCNORML            RETURN WITH UBF REFILLED          R4 35076200
SVCGET10 CALL  HENDREAD            YES.  INSPECT COMPLETION.            35076300
         TM    SDBFLG2,SDB2IOE     DID I/O ERROR OCCUR...               35076500
         BO    SVCNORML            IF SO, RETURN.                       35077000
         CALL  HMOVEPU             ELSE MOVE PROT TO UNPROT BUF ETC.    35077500
         TM    SDBFLG2,SDB2EOD     IS THIS THE LAST OF INPUT...         35078000
         BO    SVCNORML            IF SO, RETURN.                       35078500
         CALL  HCNVFDAD            ELSE SET NEW FDAD IN IOB,            35079000
         TM    SDBFLG2,SDB2IOA     IF I/O NOT ACTIVE           @OZ30886 35079080
         BZ    SVCGET20            CONTINUE                    @OZ30886 35079160
         WAIT  1,ECB=SDBECB        ELSE, WAIT                  @OZ30886 35079240
SVCGET20 SLR   R0,R0               ZERO R0                     @OZ30886 35079320
         ST    R0,SDBECB           STORE ZERO IN ECB           @OZ30886 35079400
         OI    SDBFLG2,SDB2IOA     SHOW I/O ACTIVE,                     35079500
         LA    R0,1                INCREMENT                            35080000
         A     R0,SDBXCPCT         EXCP                                 35080500
         ST    R0,SDBXCPCT         COUNTER,                             35081000
         EXCP  SDBIOB              AND START UP I/O.                    35081500
         B     SVCNORML            THEN RETURN NORMALLY.                35082000
         EJECT                                                          35082500
*                                                                       35083000
*                                                                       35083500
*              HAMSVC - UPDATE PROCESSING FOR GET                       35084000
*                                                                       35084500
*                                                                       35085000
SVCGUP   DS    0H                                                       35085500
*                                                                       35086000
*              QUIESCE I/O                                              35086500
*                                                                       35087000
         LR    R8,RRPL             SAVE RPL ADDRESS.                    35087500
         WAIT  1,ECB=SDBECB        WAIT FOR I/O TO COMPLETE.            35088000
*                                                                       35088500
*              FREE BUFFERS ON THE I/O COMPLETE CHAIN                   35089000
*                                                                       35089500
         BAL   R5,HSPFBFRE         GO FREE ALL BUT ONE FBF.             35090000
         LTR   R1,R1               IS THERE A BUFFER LEFT...            35090500
         BNZ   SGU020              BRANCH IF SO.                        35091000
*                                                                       35091500
*              GET FIRST PROTECTED BUFFER FOR GET-UPDATE                35092000
*                                                                       35092500
         $GETBUF TYPE=PROT         GET A PROTECTED BUFFER.              35093000
         BNZ   SGUSTOR             BRANCH IF NO STORAGE.                35093500
         LA    R0,1                ELSE INCREMENT                       35094000
         AH    R0,SDBPBFCT         PROTECTED-BUFFER                     35094500
         STH   R0,SDBPBFCT         COUNT.                               35095000
*                                                                       35095500
*              INITIALIZE THE PROTECTED BUFFER                          35096000
*                                                                       35096500
SGU020   LR    RBUF,R1             SET BUFFER BASE REGISTER.            35097000
         MVI   BFID,C'G'           SET ID TO 'GBF'.                     35097500
         SLR   R0,R0               ZERO                                 35098000
         ST    R0,BFBF             NEXT-BUFFER POINTER.                 35098500
         ST    RBUF,SDBGBF         POINT TO BUFFER FROM SDBGBF.         35099000
*                                                                       35099500
*              FREE ALL HOLD BUFFERS BUT ONE                            35100000
*                                                                       35100500
         L     RBUF,SDBHBF         POINT TO FIRST HBF.                  35101000
SGU030   LTR   R1,RBUF             DOES IT EXIST...                     35101500
         BZ    SGU040              BRANCH IF NOT.                       35102000
         L     RBUF,BFBF           GET POINTER TO NEXT HBF.             35102500
         LTR   RBUF,RBUF           IF R1 POINTS TO LAST HBF,            35103000
         BZ    SGU050              BRANCH.                              35103500
         $FREMAIN BU,A=(R1),LV=4096,SP=229,KEY=1  ELSE FREE THIS HBF R4 35104000
         B     SGU030              AND EXAMINE NEXT HBF.                35104500
*                                                                       35105000
*              GET A HOLD BUFFER IF REQUIRED                            35105500
*                                                                       35106000
SGU040   $GETMAIN BC,LV=4096,SP=229,KEY=1  GET KEY-1 BUFFER.         R4 35106500
         BNZ   SGUSTOR             BRANCH IF NO STORAGE.                35107000
SGU050   LR    RBUF,R1             SET BUFFER ADDRESSABILITY.           35107500
         MVI   BFID,C'H'           SET ID TO 'HBF'.                     35108000
         SLR   R0,R0               ZERO                                 35108500
         ST    R0,BFBF             NEXT-BUFFER POINTER.                 35109000
         ST    RBUF,SDBHBF         SAVE HOLD BUFFER ADDRESS.            35109500
*                                                                       35110000
*              CONVERT ARGUMENT ADDRESS TO ABSOLUTE                     35110500
*                                                                       35111000
         LR    RRPL,R8             RESTORE RPL ADDRESS.                 35111500
         L     R1,RPLARG           POINT TO UPDATE ARGUMENT RBA.        35112000
         MVC   SDBUPRBA,0(R1)      SAVE IT IN SDB FOR HCEGUP.           35112500
         L     R5,SDBMTTR          SAVE SDBMTTR IN R5.                  35113000
         MVC   SDBMTTR,1(R1)       SET SDBMTTR FROM RBA.                35113500
         CALL  HCNVFDAD            CONVERT TO FDAD FORMAT.              35114000
*                                                                       35114500
*              SET UP FOR EXCP, ISSUE IT, AND WAIT                      35115000
*                                                                       35115500
         L     R4,SDBCCW4          SAVE SDBCCW4.                        35116000
         IC    R3,SDBCHEND         SAVE VALUE OF SDBCHEND.              35116500
         L     RBUF,SDBGBF         POINT TO UPDATE PROTECTED BUF.       35117000
         MVC   BFRBA,SDBUPRBA      SET CURRENT RBA IN BUFFER.           35117500
         MVC   BFECB,SDBHBF        POINT IT TO UPDATE UNPROT BUF.       35118000
         MVC   BFTRK,SDBMTTR       SET UPDATE MTTR IN IT.               35118500
         LA    R1,BFIO             POINT TO I/O AREA IN BUF             35119000
         ST    R1,SDBCCW4          AND SET READ-DATA CCW.               35119500
         MVI   SDBCCW4,6           SET READ-DATA COMMAND.               35120000
         MVI   SDBCHEND,SDBCEGUP   ASK FOR HCEGUP.                      35120500
         SLR   R0,R0               ZERO OUT                             35121000
         ST    R0,SDBSAVE          CHANNEL-END ERROR WORD.              35121500
         EXCP  SDBIOB              START THE READ.                      35122000
         WAIT  1,ECB=SDBECB        WAIT TILL HCEGUP IS DONE.            35122500
*                                                                       35123000
*              RESTORE SDB TO STATUS QUO ANTE BELLUM                    35123500
*                                                                       35124000
         STC   R3,SDBCHEND         RESTORE SDBCHEND VALUE.              35124500
         ST    R4,SDBCCW4          RESTORE SDBCCW4.                     35125000
         ST    R5,SDBMTTR          RESTORE SDBMTTR.                     35125500
*                                                                       35126000
*              RETURN FROM HAMSVC                                       35126500
         L     R15,SDBSAVE         GET CHAN-END ERROR WORD.             35127000
         B     SVCEXIT             RETURN IT TO HG100.                  35127500
* STORAGE UNAVAILABLE FOR BUFFERS                                       35128000
SGUSTOR  B     SVCSTOR             RETURN ADR OF HERSTOR.               35128500
         EJECT                                                          35129000
*                                                                       35129500
*                                                                       35130000
*              HAMSVC - EXECUTION BATCH MONITOR END-OF-JOB              35130500
*                                                                       35131000
*                                                                       35131500
SVCXBM   DS    0H                                                       35132000
*                                                                       35132500
*                                                                       35133000
*              VALIDIFY XBM END-JOB REQUEST                             35133500
*                                                                       35134000
*                                                                       35134500
         L     RSJB,SDBSJB         POINT TO SJB FOR THIS JOB.           35135000
         USING SJBDSECT,RSJB       SET SJB ADDRESSABILITY.              35135500
         CLM   RSDB,7,SJBXBSDB+1   IS THIS THE BATCH-INPUT UNIT...      35136000
         BNE   SX800               ERROR IF NOT.                        35136500
*                                                                       35137000
*                                                                       35137500
*              LOCK THE SJB.  ERROR IF ALREADY LOCKED.                  35138000
*                                                                       35138500
*                                                                       35139000
         SLR   R0,R0               ZERO R0 AND R1 TO COMPARE WITH       35139500
         LR    R1,R0               CURRENT CONTENTS OF SJBLOCKH.        35140000
         L     R2,PSATOLD-PSA      POINT R2 TO CURRENT TCB.             35140500
         LNR   R3,R2               SET R3 TO ARBITRARY NEG VALUE.       35141000
         CDS   R0,R2,SJBLOCKH      IF SJB IS UNLOCKED, TAKE LOCK.       35141500
         BNE   SX800               IF SJB IS LOCKED, ERROR.             35142000
         OI    SJBFLG1,SJB1XBMC    SHOW XBM CONTINUATION            R41 35142100
         O     R12,=X'80000000'    SHOW SJB LOCK OBTAINED.              35142500
*                                                                       35143000
*                                                                       35143500
*              TERMINATE THE CURRENT JOB                                35144000
*                                                                       35144500
*                                                                       35145000
         SL    R12,=A(SVCHBASE-HJEBASE)  SET JOB TERM ADDRESSAB.        35146000
         USING HJEBASE,R12         TELL THE ASSEMBLER.                  35146500
         B     HJEXBM              USE JOB TERMINATE.                   35147000
         USING SVCHBASE,R12        RESTORE SVC ADDRESSABILITY.          35147500
*                                                                       35148000
*                                                                       35148500
*              RETURN TO HERE FROM JOB TERMINATE/SELECT                 35149000
*                                                                       35149500
*                                                                       35150000
SX100    DS    0H                                                       35150500
*                                                                       35151000
*                                                                       35151500
*              UNLOCK THE SJB.  ERROR IF ANY WAITERS.                   35152000
*                                                                       35152500
*                                                                       35153000
         SLR   R0,R0               ZERO R0 AND R1 TO SET INTO           35153500
         LR    R1,R0               SJBLOCKH.                            35154000
         L     R2,PSATOLD-PSA      POINT R2 AND R3 TO WHAT SHOULD       35154500
         LNR   R3,R2               BE IN SJBLOCKH.                      35155000
         CDS   R2,R0,SJBLOCKH      IF OKAY, UNLOCK THE SJB.             35155500
         BNE   SX800               IF SJB IS NOT OKAY, ERROR.           35156000
*                                                                       35156500
*                                                                       35157000
*              SET REGISTER 15 ACCORDING TO FLAG SJB1XBWT               35157500
*              AND RETURN TO HAMGET.                                    35158000
*                                                                       35158500
*                                                                       35159000
         NI    SJBFLG1,255-SJB1XBMC  SHOW NEW JOB SELECTED.             35159500
         SLR   R15,R15             ASSUME JOB SELECTED.                 35160000
         TM    SJBFLG1,SJB1XBWT    IF JOB SELECTED,                     35160500
         BZ    SVCNORML            RETURN FROM SVC.                     35161000
         L     R4,SJBCSCB          ESTABLISH ADDRESSABILITY    @OZ26748 35161050
         USING CSCDSECT,R4          TO COMMAND SCHED CB        @OZ26748 35161100
         MODESET EXTKEY=ZERO,SAVEKEY=(2)  GET KEY ZERO         @OZ26748 35161150
         OI    CHACT,CHCLD         TELL OS TO CANCEL JOB       @OZ26748 35161200
         LA    R1,CHCECB           POINT TO CANCEL ECB         @OZ26748 35161250
         POST  (1),X'222'          CANCEL WITHOUT DUMP         @OZ26748 35161300
         MODESET KEYADDR=(2)       RETURN TO CALLERS KEY       @OZ26748 35161350
         DROP  R4                                              @OZ26748 35161400
         B     SVCERRET            ELSE CAUSE HAMGET TO EXIT.           35161500
*                                                                       35162000
*                                                                       35162500
*              ABEND IF PROCESSING ERROR                                35163000
*                                                                       35163500
*                                                                       35164000
SX800    DS    0H                                                       35164500
         ABEND X'56F',DUMP,STEP,SYSTEM  KILL THE BATCH MONITOR.         35165000
         EJECT                                                          35165500
*                                                                       35166000
*              HAMSVC - END-OF-BLOCK PROCESSING FOR PUT                 35166500
*                                                                       35167000
*                                                                       35167500
SVCPUT   DS    0H                                                       35168000
         L     R1,SDBDKEY          ACCESS WORD WITH SDBFLG3    @OZ29679 35168010
SVCP000  LR    R8,R1               TRANSFER TO SWAP REG        @OZ29679 35168020
         N     R1,=X'FFFFFF7F'     ASSUME SVCPUT NOT RESERVED  @OZ29679 35168030
         O     R8,=X'00000080'     WE'LL TRY TO RESERVE IT     @OZ29679 35168040
         CS    R1,R8,SDBDKEY       IF IT'S OFF, TURN IT ON     @OZ29679 35168050
         BE    SVCP001             SUCCESS- SVCPUT IS OURS     @OZ29679 35168060
         TM    SDBFLG3,SDB3BUSY    ELSE SEE WHAT WENT WRONG    @OZ29679 35168070
         BO    SVCDUP              EXIT - THIS CODE IS BUSY    @OZ29679 35168080
         B     SVCP000             CODE IS FREE, TRY CS AGAIN  @OZ29679 35168090
SVCP001  DS    0H                                              @OZ29679 35168095
*                                                                   R41 35168100
*              SAVE COUNT OF SYSOUT RECORDS IN PDDB BEFORE EXCP     R41 35168200
*                                                                   R41 35168300
         TM    SDBFLG1,SDB1OUT     IF NOT SYSOUT                    R41 35168400
         BNO   SVCP01               DONT COUNT RECORDS              R41 35168500
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER      R41 35168600
         L     R14,SDBPDDB         POINT TO PDDB                    R41 35168700
         L     R1,SDBRECCT         CALCULATE                        R41 35168800
         AL    R1,BFRCT             NUMBER OF RECORDS               R41 35168900
         ST    R1,PDBRECCT-PDBDSECT(,R14) SAVE RECORD COUNT IN PDDB R41 35169000
SVCP01   DS    0H                                                   R41 35169100
*                                                                       35169200
*              GET A TRACK FOR NEXT BUFFER IF NECESSARY                 35169300
*                                                                       35169500
         SLR   R1,R1               ZERO R1 FOR CASE OF CLOSE.           35170000
         TM    SDBFLG1,SDB1CLOS    IS DATA SET BEING CLOSED...          35170500
         BO    SVCP10              BRANCH IF SO.                        35171000
         LA    R13,SDBSAVE         PROVIDE SAVE AREA FOR $TRACK.        35171500
         LA    R1,SDBTAB           A(MAJOR/MINOR TAB)                R4 35174100
         CALL  $STRAK              GET A CHAINING TRACK.                35175000
SVCP10   LR    R8,R1               SAVE TRACK ADDRESS OR 0 IN R8.       35179500
*                                                                       35180000
*              IF ANY PBFS EXIST FOR WHICH I/O IS COMPLETE,             35180500
*              FREE ALL BUT ONE OF THEM.                                35181000
*                                                                       35181500
SVCP20   BAL   R5,HSPFBFRE         GO FREE ALL BUT ONE BUF.             35182000
         LTR   R1,R1               DO WE HAVE A PBF TO USE...           35182500
         BNZ   SVCP60              BRANCH IF SO.                        35183000
*                                                                       35183500
*              GET A NEW PROTECTED BUFFER                               35184000
*                                                                       35184500
         LH    R5,SDBPBFCT         GET CURRENT PBF COUNT.               35185000
         TM    SDBFLG1,SDB1BFXS    IF EXCESSION ALLOWED,                35185100
         BO    SVCP25              DON'T TEST MAXIMUM.                  35185200
         CH    R5,SDBPBFLM         IS IT AT MAXIMUM...                  35185500
         BNL   SVCP30              IF SO, GO WAIT.                      35186000
SVCP25   $GETBUF TYPE=PROT         GET A NEW BUFFER.                    35186500
         BE    SVCP50              BRANCH IF SUCCESSFUL.                35187000
*                                                                       35187500
*              IF STORAGE UNAVAILABLE OR BUFFER COUNT IS                35188000
*              AT MAXIMUM, WAIT                                         35188500
*                                                                       35189000
SVCP30   DS    0H                                                       35189500
         MVI   SDBSAVE,0           ZERO EARLY-POST ECB.                 35190000
         OI    SDBFLG2,SDB2POST    SET EARLY-POST FLAG.                 35190500
         TM    SDBFLG2,SDB2IOA     IF I/O IS ACTIVE,                    35191000
         BO    SVCP40              WAIT FOR EARLY POST.                 35191500
         NI    SDBFLG2,255-SDB2POST  ELSE RESET EARLY-POST FLAG         35192000
         L     RBUF,SDBFBF         AND SEE IF BUFFER                    35192500
         LTR   RBUF,RBUF           WAS FREED BY HCEPUT.                 35193000
         BNZ   SVCP20              YES.  GO GET IT.                     35193500
         NI    SDBFLG3,255-SDB3BUSY NO, FREE SDB BEFORE EXIT.  @OZ29679 35193600
         B     SVCSTOR             NO.  STORAGE UNAVAILABLE.            35194000
SVCP40   DS    0H                                                       35194500
         WAIT  1,ECB=SDBSAVE       WAIT FOR EARLY POST.                 35195000
         B     SVCP20              THEN TRY AGAIN.                      35195500
*                                                                       35196000
*              INCREMENT PROTECTED BUFFER COUNTER                       35196500
*                                                                       35197000
SVCP50   LA    R5,1(,R5)           IF GETMAIN USED, ADD ONE             35197500
         STH   R5,SDBPBFCT         TO PROTECTED-BUFFER COUNTER.         35198000
*                                                                       35198500
*              INITIALIZE BUFFER                                        35199000
*                                                                       35199500
SVCP60   LR    RBUF,R1             SET UP BUFFER BASE REGISTER.         35200000
         MVI   BFID,C'P'           SHOW PROTECTED BUFFER.               35200500
         MVC   BFTRK,SDBTRK+1      SET TRACK TO WRITE BUFFER ON.        35201000
         MVC   BFKEY,SDBKEY        SET JOB AND DS KEY.                  35201500
         ST    R8,BFNXT            SET CHAINING TRACK.                  35202000
         MVI   BFFL1,0             SHOW BUFFER NOT YET WRITTEN.         35202500
         NI    SDBFLG1,255-SDB1BFXS  RESET EXCESSION-ALLOWED.           35202800
*                                                                       35203000
*              MOVE DATA FROM UNPROTECTED TO PROTECTED BUFFER           35203500
*                                                                       35204000
         L     R2,SDBUBF           POINT TO USER RECORDS                35204500
         LA    R2,BFDAT-BFD(,R2)   IN UNPROTECTED BUFFER.               35205000
         LH    R3,$SVBFSIZ         SET MAXIMUM                       R4 35205500
         SL    R3,=A(BFDAT-BFIO)   SOURCE LENGTH.                    R4 35205800
         LA    R4,BFDAT            POINT TO SINK AREA.                  35206000
         LR    R5,R3               SET SINK LENGTH.                     35206500
         MVCL  R4,R2               MOVE UNPROTECTED DATA TO PBF.        35207000
*                                                                       35207500
*              ADD PROTECTED BUFFER TO SDBPBFX CHAIN                    35208000
*                                                                       35208500
         L     R1,SDBPBFX          QUEUE THIS NEW PBF,                  35209000
         ST    R1,BFBF             LAST-IN-FIRST-OUT,                   35209500
         CS    R1,RBUF,SDBPBFX     ON CHAIN SDBPBFX.                    35210000
         BNE   *-8                 HCEPUT WILL DO THE REST.             35210500
         USING PSA,R0              PROVIDE PSA ADDRESSABILITY        R4 35210600
         SETLOCK TEST,TYPE=LOCAL,BRANCH=(NOTHELD,SVCP65)             R4 35210700
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                      R4C35210800
               REGS=USE,RELATED=SVCP65                               R4 35210900
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=SVCP65          R4 35211000
         DROP  R0                  KILL PSA ADDRESSABILITY           R4 35211100
*                                                                       35211200
*              IF I/O IS INACTIVE, ISSUE EXCP                           35211500
*                                                                       35212000
SVCP65   DS    0H                                                    R4 35212100
         TM    SDBFLG2,SDB2IOA     IF I/O IS ACTIVE,                    35212500
         BO    SVCP70              HCEPUT WILL START I/O.               35213000
         TM    BFFL1,BF1IOC        IS I/O ALREADY COMPLETE...           35213500
         BO    SVCP70              IF SO, SKIP EXCP.                    35214000
SVCP67   L     R0,BFBF             IF RBUF POINTS TO                 R4 35214100
         LTR   R0,R0                THE LEAST RECENT BUFFER ON       R4 35214200
         BZ    SVCP68                SDBPBFX CHAIN, CONTINUE         R4 35214300
         LR    RBUF,R0                ELSE POINT RBUF TO THE LESS    R4 35214400
         B     SVCP67                  RECENT BUFFER AND TRY AGAIN   R4 35214500
SVCP68   DS    0H                                                    R4 35214600
         L     R1,SDBPBF           IF CHAN END APPENDAGE                35214700
         LTR   R1,R1               BECAME A VICTIM OF                   35214800
         BZ    *+6                 PURGE-QUIESCE, RESTART WHERE         35214900
         LR    RBUF,R1             IT WOULD HAVE RESTARTED.             35215000
         MVC   SDBMTTR,BFTRK       SET TRACK TO WRITE AND               35215100
         CALL  HCNVFDAD            CONVERT IT TO ABSOLUTE.              35215200
         LA    R0,1                INCREMENT                            35215500
         AL    R0,SDBXCPCT         THE EXCP                             35216000
         ST    R0,SDBXCPCT         COUNT.                               35216500
         OI    SDBFLG2,SDB2IOA     SHOW I/O ACTIVE.                     35217000
         LA    R0,BFIO             SET PTR TO DATA TO WRITE             35217500
         STCM  R0,7,SDBCCW4+1      INTO WRITE-DATA CCW.                 35218000
         MVI   SDBCHEND,SDBCEPUT   SET UP FOR CHANNEL END.              35218500
         EXCP  SDBIOB              ISSUE EXCP.                          35219000
*                                                                       35219500
*              END OF PROTECTED BUFFER WORK                             35220000
*                                                                       35220500
SVCP70   DS    0H                                                       35221000
*                                                                       35221500
*              RE-INITIALIZE UNPROTECTED BUFFER                         35222000
*                                                                       35222500
         L     RBUF,SDBUBF         POINT TO UNPROTECTED BUFFER.         35223000
         LTR   R0,R8               IF DATA SET IS CLOSING,              35223500
         BZ    SVCP80              DON'T CHANGE SDBTTR.                 35224000
         LA    R1,X'100'           GET 0010 IN R1.                      35224500
         SRDL  R0,8                SHIFT FOR 0MTTR001.                  35225000
         STM   R0,R1,BFRBA         SET NEW RBA IN UBF                   35225500
         STM   R0,R1,SDBTRK        AND IN SDBTRK                        35226000
         STM   R0,R1,SDBTRKL       AND IN SDBTRKL.                      35226500
         ST    R8,BFTRK            SET TRACK TO WRITE NEXT.             35227000
SVCP80   DS    0H                                                       35227500
         LA    R0,BFDAT            SET POINTER IN UBF                   35228000
         ST    R0,BFLOC            FOR FIRST LOGICAL RECORD.            35228500
         LH    R0,$SVBFSIZ         SET LENGTH                        R4 35229000
         SL    R0,=A(BFDAT+1-BFIO) IN UBF                            R4 35229300
         ST    R0,BFLEN            OF LOGICAL RECORD AREA IN UBF.       35229500
         EJECT                                                          35230000
         PUSH  USING               SAVE REGISTER STATUS.                35230500
         DROP  RSJB                DROP SJB BASE.                       35231000
*                                                                       35231500
*                                                                       35232000
*              INCREMENT RECORD COUNT, TEST FOR EXCESSION               35232500
*                                                                       35233000
*                                                                       35233500
         TM    SDBFLG1,SDB1OUT     IF INTERNAL DATA SET,                35234000
         BZ    SVCP140             DON'T COUNT ANYTHING.                35234500
*              THIS LINE DELETED BY APAR NUMBER                @OZ17756 35234600
*              THIS LINE DELETED BY APAR NUMBER                @OZ17756 35234700
         SPACE 1                                                        35235000
         L     R0,SDBRECCT         UP CURRENT DATA SET'S                35235500
         AL    R0,BFRCT            RECORD COUNT BY NUMBER               35236000
         ST    R0,SDBRECCT         OF RECORDS IN THIS BUFFER.           35236500
         SPACE 1                                                        35237000
         L     R8,SDBSJB           GET A POINTER TO THE SJB.            35237500
         USING SJBDSECT,R8         SET SJB ADDRESSABILITY.              35238000
         L     R7,SJBJCT           POINT TO THE JCT FROM SJB.           35238500
         USING JCTDSECT,R7         SET JCT ADDRESSABILITY.              35239000
         SPACE 1                                                        35239500
         L     R0,JCTXOUT          UP OVERALL JOB'S                     35240000
         LR    R1,R0               OUTPUT COUNT                         35240500
         AL    R1,BFRCT            (INCLUDES PRINT AND PUNCH)           35241000
         CS    R0,R1,JCTXOUT       BY NUMBER OF RECORDS                 35241500
         BNE   *-10                IN THIS BUFFER.                      35242000
         SPACE 1                                                        35242500
         LA    R2,JCTLINES         ASSUME PRINTED OUTPUT                35243000
         LA    R3,JCTESTLN         AND GET POINTERS TO                  35243500
         LA    R4,SJBESTLN         CURRENT COUNT, USER ESTIMATE,        35244000
         LA    R5,=C'LINE'         CURRENT ESTIMATE, AND CAPTION.       35244500
         L     R15,SDBPDDB         POINT TO THE PDDB                    35245000
         USING PDBDSECT,R15        AND GET ADDRESSABILITY.              35245500
         SLR   R1,R1               ZERO R1 FOR IC.                      35246000
         IC    R1,PDBCLASS         GET CLASS AND INDEX                  35246500
         LA    R1,$SVSCAT(R1)      SYSOUT CLASS ATTRIBUTES.             35247000
         USING SCADSECT,R1         SET SCAT ADDRESSABILITY.             35247500
         TM    SCATFLAG,SCATPNCH   IF NOT PUNCH TYPE,                   35248000
         BZ    SVCP100             IT MUST BE PRINT.                    35248500
         LA    R2,JCTPUNCH         IT'S A PUNCH DATA SET.               35249000
         LA    R3,JCTESTPU         GET POINTERS TO                      35249500
         LA    R4,SJBESTPU         CURRENT COUNT, USER ESTIMATE,        35250000
         LA    R5,=C'CARD'         CURRENT ESTIMATE, AND CAPTION.       35250500
         SPACE 1                                                        35251000
SVCP100  DS    0H                                                       35251500
         L     R0,0(,R2)           UPDATE CURRENT COUNT                 35252000
         LR    R1,R0               (JCTLINES OR JCTCARDS)               35252500
         AL    R1,BFRCT            BY NUMBER                            35253000
         CS    R0,R1,0(R2)         OF RECORDS                           35253500
         BNE   *-10                IN THIS BUFFER.                      35254000
         SPACE 1                                                        35254500
         CL    R1,0(,R4)           IF CURRENT COUNT IS LESS             35255000
         BNH   SVCP140             THAN CURRENT ESTIMATE, BRANCH.       35255500
         TM    SDBFLG1,SDB1FOPN    IS IT JOB LOG,MSGS OR JCLI  @OZ17756 35255600
         BO    SVCP140             BR IF YES, DON'T WARN       @OZ17756 35255700
         SPACE 1                                                        35256000
         MVC   SPWMSG,SPWTO        SET WTO MESSAGE AND                  35256500
         MVC   SPWMV,0(R5)         CAPTION INTO UBF FOR WTO.            35257000
         SPACE 1                                                        35257500
         L     R5,$SVOUTXS         GET INTO REGISTER 5                  35258000
         LA    R5,0(,R5)           THE OUTPUT EXCESSION INCREMENT.      35258500
         L     R0,0(,R4)           UPDATE CURRENT ESTIMATE              35259000
         LR    R1,R0               (SJBESTLN OR SJBESTPU)               35259500
         ALR   R1,R5               BY THE OUTPUT EXCESSION              35260000
         CS    R0,R1,0(R4)         INCREMENT                         R4 35260100
         BNE   SVCP140             IF INTERFERENCE, SOMEONE ELSE        35261000
*                                  WROTE THE MESSAGE.                   35261500
         S     R0,0(,R3)           TAKE USER ESTIMATE FROM OLD          35262000
*                                  CURRENT ESTIMATE.                    35262500
         MVC   SPWME,SPWEDIT       SET EDIT MASK.                       35263000
         CVD   R0,SDBUPRBA         CONVERT EXCESSION AMOUNT             35263500
         MVO   SDBUPRBA(4),SDBUPRBA+4(4)  TO DECIMAL                    35264000
         ED    SPWME,SDBUPRBA      AND EDIT SIX DIGITS.                 35264500
         CLC   =F'1',0(R3)         SEE IF ESTIMATE IS '1',          R41 35264600
         BNE   SVCP110               BRANCH IF NOT                  R41 35264700
         MVC   SPWPLURL,SPWPLURL+1 CHANGE PLURAL TO SINGULAR        R41 35264800
         MVI   SPWBLNK,C' '        APPEND TRAILING BLANK            R41 35264900
         SPACE 1                                                    R41 35265000
SVCP110  DS    0H                                                   R41 35265100
         LTR   R0,R0               IF OLD CUR EST .GT. USER EST,        35265200
         BP    SVCP120             WRITE LONG MESSAGE.                  35265500
         MVI   SPWMSGL,SPWML1      SET SHORT MESSAGE LENGTH.            35266000
         MVC   SPWD1,SPWD2         SHIFT DESC & ROUTCDE.                35266500
         SPACE 1                                                        35267000
SVCP120  DS    0H                                                       35267500
         WTO   MF=(E,SPWMSG)       WRITE SHORT OR LONG MESSAGE.         35268000
         L     R1,PSATOLD-PSA      POINT TO CURRENT TCB.                35268500
         USING TCB,R1              SET TCB ADDRESSABILITY.              35269000
         TM    TCBFBYT1,TCBRTM2    IF RTM2 IS IN CONTROL,               35269500
         BO    SVCP140             DO NOT INSPECT &OUTPOPT.             35270000
         TM    TCBTCTGF,TCBSMFGF   IF INITIATOR IN CONTROL,          R4 35270100
         BNO   SVCP140              DO NOT ABEND                     R4 35270200
         TM    SJBFLG2,SJB2CONV    IF CONVERTER IS RUNNING,             35271500
         BO    SVCP140             DO NOT ABEND.                        35272000
         CLI   $SVOUTOP,1          TEST VALUE OF &OUTPOPT.              35272500
         BL    SVCP140             0 - DO NOT TERMINATE.                35273000
         SLR   R0,R0               ZERO OUT UNPROTECTED-       @OZ32378 35273025
         ST    R0,BFRCT            BUFFER RECORD COUNT         @OZ32378 35273050
         NI    BFFL1,BF1EOB        SHOW NOT END-OF-BUFFER      @OZ32378 35273075
         L     R3,PSATOLD-PSA      GET CURRENT TASK            @OZ24437 35273100
         L     R3,TCBJSTCB-TCB(,R3) GET JOB STEP TASK          @OZ24437 35273200
         L     R2,PSAAOLD-PSA      GET CURRENT ASCB            @OZ24437 35273300
         LH    R2,ASCBASID-ASCB(,R2) GET ASID NUMBER           @OZ24437 35273350
         LA    R13,SDBSAVE         POINT TO SAVE AREA FOR RTM  @OZ24437 35273400
         CLI   $SVOUTOP,1          RE-ESTABLISH COND CODE      @OZ24437 35273450
         BE    SVCP160             1 - TERMINATE WITHOUT DUMP.          35273500
         B     SVCP180             2 - TERMINATE WITH DUMP.             35274000
         SPACE 1                                                        35274500
SVCP140  DS    0H                                                       35275000
         SLR   R0,R0               ZERO OUT UNPROTECTED-                35275500
         ST    R0,BFRCT            BUFFER RECORD COUNT.                 35276000
*              THIS LINE DELETED BY APAR NUMBER                @OZ17756 35276250
         NI    BFFL1,255-BF1EOB    SHOW NOT END-OF-BUFFER.           R4 35276500
SVCPEXIT NI    SDBFLG3,255-SDB3BUSY FREE SDB RESERVE.          @OZ29679 35276600
         B     SVCNORML            EXIT NORMALLY.                       35277000
         SPACE 3                                                        35277500
*                                                                       35278000
*              EXCESSION MESSAGE                                        35278500
*                                                                       35279000
         $MID  375                 SET HASP MESSAGE ID.                 35279500
SPWTO    WTO   '&MID.ESTIMATED ****S EXCEEDED BY NNNNNN',              C35280000
               ROUTCDE=2,DESC=6,MF=L                                    35280500
         SPACE 1                                                        35281000
SPWTOL   EQU   *-SPWTO             LENGTH OF WTO MACRO.                 35281500
SPWEDIT  DC    X'40202020202120'   EDIT MASK.                           35282000
*                                                                       35282500
*              MESSAGE SINK DESCRIPTION                                 35283000
*                                                                       35283500
SPWMSG   EQU   BFDAT,SPWTOL        MESSAGE SINK AREA.                   35284000
SPWMSGL  EQU   SPWMSG+1,1          MESSAGE LENGTH AREA.                 35284500
SPWML1   EQU   SPWTOL-4-10         SHORT MESSAGE LENGTH.                35285000
SPWMV    EQU   SPWMSG+4+9+10,4     CAPTION PORTION                   R4 35285500
SPWPLURL EQU   SPWMV+4,19          END OF '****S'                   R41 35285600
SPWBLNK  EQU   SPWPLURL+L'SPWPLURL,1 SPACE FOR BLANK                R41 35285700
SPWME    EQU   SPWMSG+SPWTOL-4-7,7 EDIT PORTION.                        35286000
SPWD1    EQU   SPWMSG+SPWTOL-4-10,4  SHORT ROUTCDE & DESC.              35286500
SPWD2    EQU   SPWMSG+SPWTOL-4,4   LONG ROUTCDE & DESC.                 35287000
*                                                                       35287500
*              &OUTPOPT=1 - TERMINATE JOB WITHOUT DUMP                  35288000
*                                                                       35288500
SVCP160  CALLRTM TYPE=ABTERM,COMPCOD=X'722',ASID=(2),TCB=(3),  @OZ24437C35289000
               DUMP=NO                                         @OZ24437 35289100
         B     SVCPEXIT            EXIT NORMALLY.              @OZ29679 35289200
*                                                                       35289500
*              &OUTPOPT=2 - TERMINATE JOB WITH DUMP                     35290000
*                                                                       35290500
SVCP180  CALLRTM TYPE=ABTERM,COMPCOD=X'722',ASID=(2),TCB=(3)   @OZ24437 35291000
         B     SVCPEXIT            EXIT NORMALLY.              @OZ29679 35291250
         POP   USING               RESTORE REGISTER STATUS.             35291500
         SPACE 1                                                    R41 35291600
         DROP  RSJB                DROP SJB ADDRESSABILITY          R41 35291700
         EJECT                                                          35292000
*                                                                       35292500
*              HAMSVC - USER SYSOUT LIMIT PROCESSOR                     35293000
*                                                                       35293500
SVCUSO   DS    0H                                                       35294000
         L     R15,$SVSMFSO        POINT TO IEFUSO.                     35294500
         CLC   =X'1FFF07FE',0(R15) IF IT'S THE DEFAULT,                 35295000
         BE    SVCUSOAB            DO AN ABEND 722.                     35295500
         L     R4,PSATOLD-PSA      POINT TO CURRENT TCB.                35296000
         USING TCB,R4              SET TCB ADDRESSABILITY.              35296500
         L     R5,TCBTCT           POINT TO THE TCT.                    35297000
         LTR   R5,R5               IF NO TCT,                           35297500
         BZ    SVCUSOAB            DO AN ABEND 722.                     35298000
         USING SMFTCT,R5           SET TCT ADDRESSABILITY.              35298500
         L     R6,TCTJMR           POINT TO THE JMR.                    35299000
         LTR   R6,R6               IF NO JMR,                           35299500
         BZ    SVCUSOAB            DO AN ABEND 722.                     35300000
         L     R1,SDBSJB           POINT TO THE SJB FROM SDB.           35300500
         USING SJBDSECT,R1         GET ADDRESSABILITY.                  35301000
         L     R1,SJBJCT           POINT TO THE JCT FROM SJB.           35301500
         USING JCTDSECT,R1         GET ADDRESSABILITY.                  35302000
         TM    JCTSMFLG,JCTNOUSO   IF IEFUSO EXIT NOT TO BE             35302500
         BO    SVCUSOAB            TAKEN, DO ABEND 722.                 35303000
         DROP  R1                  DROP JCT ADDRESSABILITY.             35303500
*                                                                       35304000
*              SET UP FOR AND CALL IEFUSO                               35304500
*                                                                       35305000
         MODESET EXTKEY=HASP       SET KEY 1 FOR EXIT.                  35305500
         GETMAIN R,LV=80,SP=230    GET WORK AREA.                       35306000
         L     R15,$SVSMFSO        POINT AGAIN TO IEFUSO.               35306500
         LR    R13,R1              POINT R13 TO SAVE AREA.              35307000
         ST    R6,72(,R13)         SET JMR ADDRESS AS ARGUMENT.         35307500
         MVI   72(R13),X'80'       SHOW IT'S THE LAST ARGUMENT.         35308000
         SLR   R0,R0               SET DCB ADDRESS TO                   35308500
         ST    R0,76(,R13)         ZERO JUST IN CASE.                   35309000
         LA    R1,72(,R13)         POINT R1 TO ARGUMENTS.               35309500
         BALR  R14,R15             CALL IEFUSO.                         35310000
         LR    R2,R15              SAVE RETURNED REGISTER 15.           35310500
         LR    R3,R1               SAVE RETURNED REGISTER 1.            35311000
         FREEMAIN R,LV=80,SP=230,A=(R13)  FREE WORK AREA.               35311500
         MODESET EXTKEY=ZERO       SET KEY ZERO.                        35312000
         LTR   R2,R2               IF R15 WAS ZERO,                     35312500
         BZ    SVCUSOAB            DO AN ABEND 722.                     35313000
         CL    R2,=F'4'            IF R15 WAS NOT FOUR,                 35313500
         BNE   SVCUSOAB            DO AN ABEND 722.                     35314000
         AL    R3,SDBOUTLM         ELSE INCREASE OUTPUT                 35314500
         ST    R3,SDBOUTLM         LIMIT BY CONTENTS OF R1.             35315000
         B     SVCNORML            THEN RETURN NORMALLY.                35315500
*                                                                       35316000
*              ABEND THE CALLER - OUTPUT LIMIT EXCEEDED                 35316500
*                                                                       35317000
SVCUSOAB L     R3,PSATOLD-PSA      GET CURRENT TASK            @OZ24437 35317500
         L     R3,TCBJSTCB-TCB(,R3) GET JOB STEP TASK          @OZ24437 35317550
         L     R2,PSAAOLD-PSA      GET CURRENT ASCB            @OZ24437 35317600
         LH    R2,ASCBASID-ASCB(,R2) GET ASID NUMBER           @OZ24437 35317650
         LA    R13,SDBSAVE         POINT TO SAVE AREA FOR RTM  @OZ24437 35317700
         CALLRTM TYPE=ABTERM,COMPCOD=X'722',ASID=(2),TCB=(3)   @OZ24437 35317750
         B     SVCNORML            ALLOW JOB TO TERMINATE      @OZ24437 35317800
         EJECT                                                          35318000
*                                                                       35318500
*                                                                       35319000
*              SUBROUTINE TO FREE SDBFBF BUFFERS                        35319500
*                                                                       35320000
*                                                                       35320500
HSPFBFRE DS    0H                                                       35321000
         L     RBUF,SDBFBF         DEQUEUE ENTIRE                       35321500
         SLR   R0,R0               CHAIN OF                             35322000
         CS    RBUF,R0,SDBFBF      TO-BE-FREED BUFFERS                  35322500
         BNE   *-4                 FROM HEADER SDBFBF.                  35323000
         LTR   R1,RBUF             IF NO BUFFERS TO FREE,               35323500
         BZR   R5                  RETURN WITH R1=0.                    35324000
         L     RBUF,BFBF           IF ONLY ONE BUFFER                   35324500
         LTR   RBUF,RBUF           ON TO-BE-FREED CHAIN,                35325000
         BZR   R5                  RETURN WITH R1=BUFFER.               35325500
         ST    R1,0(,RSDB)         SAVE MOST-RECENT BUFFER ADR.         35326000
HSPF010  DS    0H                                                       35326500
         LTR   R1,RBUF             IS THERE A BUFFER TO FREE...         35327000
         L     RBUF,BFBF           (GET PTR TO NEXT BUFFER.)            35327500
         BNZ   HSPF020             IF SO, GO FREE IT.                   35328000
         L     R1,0(,RSDB)         ELSE RESTORE BUFFER ADDRESS          35328500
         BR    R5                  AND RETURN TO CALLER.                35329000
HSPF020  DS    0H                                                       35329500
         $FREEBUF TYPE=PROT,A=(R1) FREE THE BUFFER.                     35330000
         LH    R0,SDBPBFCT         DECREMENT                            35330500
         BCTR  R0,0                PROTECTED-BUFFER                     35331000
         STH   R0,SDBPBFCT         COUNTER.                             35331500
         B     HSPF010             GO CHECK FOR MORE BUFFERS.           35332000
         EJECT                                                          35332500
*                                                                       35333000
*                                                                       35333500
*              HAMSVC - UPDATE PROCESSING FOR PUT                       35334000
*                                                                       35334500
*                                                                       35335000
SVCPUP   DS    0H                                                       35335500
*                                                                       35336000
*              MOVE EACH HBF TO ITS GBF AND FREE IT                     35336500
*                                                                       35337000
         L     RBUF,SDBGBF         POINT TO FIRST PROTECTED BUFFER      35337500
SPU010   LTR   RBUF,RBUF           IF WE'RE AT THE END,                 35338000
         BZ    SPU020              BRANCH.                              35338500
         LA    R2,BFDAT            POINT TO PROT BUF DATA AREA.         35339000
         LH    R3,$SVBFSIZ         GET DATA                          R4 35339500
         SL    R3,=A(BFDAT-BFIO)   LENGTH.                           R4 35339800
         L     R1,BFECB            POINT TO CORRESP UNPROT BUF.         35340000
         LA    R4,BFDAT-BFD(,R1)   POINT TO UNPROT BUF DATA AREA.       35340500
         LR    R5,R3               SET SOURCE LENGTH.                   35341000
         MVCL  R2,R4               MOVE UNPROT DATA TO PROT.            35341500
         $FREMAIN BU,A=(R1),LV=4096,SP=229,KEY=1                     R4 35342000
         L     RBUF,BFBF           POINT TO NEXT PROTECTED BUFFER.      35342500
         B     SPU010              LOOP TO TRANSFER IT TO PROT BUF      35343000
*                                                                       35343500
*              WRITE OUT THE UPDATE-PROTECTED BUFFERS                   35344000
*                                                                       35344500
SPU020   DS    0H                                                       35345000
         SLR   R0,R0               ZERO POINTER TO                      35345500
         ST    R0,SDBHBF           UPDATE-UNPROTECTED BUFFERS.          35346000
         L     RBUF,SDBGBF         POINT TO FIRST UPDATE-PROT BUF.      35346500
         MVC   SDBGBF,SDBPBF       SAVE NON-UPD PROT BUF POINTER.       35347000
         ST    RBUF,SDBPBF         POINT SDBPBF TO UPD-PROT CHAIN.      35347500
         L     R5,SDBMTTR          SAVE CURRENT SDBMTTR.                35348000
         MVC   SDBMTTR,BFTRK       SET SDBMTTR FROM 1ST                 35348500
         CALL  HCNVFDAD            UPD-PROT BUF AND CONVERT IT.         35349000
         IC    R3,SDBCHEND         SAVE VALUE OF SDBCHEND.              35349500
         L     R4,SDBCCW4          SAVE SDBCCW4.                        35350000
         LA    R0,BFIO             POINT TO I/O AREA IN BUFFER.         35350500
         ST    R0,SDBCCW4          SET ADDRESS IN WRITE-DATA CCW.       35351000
         MVI   SDBCCW4,5           SET WRITE-DATA COMMAND.              35351500
         MVI   SDBCHEND,SDBCEPUT   ASK FOR HCEPUT.                      35352000
         EXCP  SDBIOB              START THE WRITE.                     35352500
         WAIT  1,ECB=SDBECB        WAIT FOR COMPLETION.                 35353000
         STC   R3,SDBCHEND         RESTORE SDBCHEND VALUE.              35353500
         ST    R4,SDBCCW4          RESTORE SDBCCW4.                     35354000
         ST    R5,SDBMTTR          RESTORE SDBMTTR.                     35354500
         MVC   SDBPBF,SDBGBF       RESTORE SDBPBF.                      35355000
         SLR   R0,R0               ZERO                                 35355500
         ST    R0,SDBGBF           THE UPDATE-PROT BUF PTR.             35356000
         B     SVCNORML            RETURN NORMALLY.                     35356500
         EJECT                                                          35357000
*                                                                       35357500
*                                                                       35358000
*              HAMSVC - POINT PROCESSING                                35358500
*                                                                       35359000
*                                                                       35359500
SVCPNT   DS    0H                                                       35360000
         L     RBUF,SDBUBF         SET POINT RBA                        35360500
         MVC   SDBUPRBA,BFRBA      FROM UBF'S BFRBA.                    35361000
* QUIESCE INPUT/OUTPUT OPERATIONS                                       35361500
         WAIT  1,ECB=SDBECB        WAIT FOR I/O COMPLETION.             35362000
         SPACE 2                                                        35362500
* IF OUTPUT - GET & INITIALIZE A PBF, SET SDBCCW4 TO READ,              35363000
* AND SET SDBCHEND TO SDBCEGET.                                         35363500
         TM    SDBFLG1,SDB1PUT     IF NOT OUTPUT DATA SET,              35364000
         BZ    SVT060              BRANCH.                              35364500
         $GETBUF TYPE=PROT         GET A PROTECTED BUFFER.              35365000
         BNZ   SVCSTOR             ERROR - STORAGE UNAVAILABLE.         35365500
         LR    RBUF,R1             SET BUFFER REGISTER.                 35366000
         MVI   BFID,C'P'           SET BUFFER ID.                       35366500
         ST    RBUF,SDBPBF         SAVE BUFFER ADDRESS.                 35367000
         LA    R0,BFIO             SET BUFFER I/O ADDRESS               35367500
         ST    R0,SDBCCW4          IN READ-DATA CCW.                    35368000
         MVI   SDBCCW4,X'06'       SET COMMAND TO READ.                 35368500
         SPACE 2                                                        35369000
SVT060   DS    0H                                                       35369500
* INITIATE A READ FOR THE CORRECT RECORD                                35370000
         MVC   SDBMTTR,SDBUPRBA+1  SET MTTR AND                         35370500
         CALL  HCNVFDAD            CONVERT DISK ADDRESS.                35371000
         NI    SDBFLG2,255-SDB2EOD-SDB2IOE  RESET ERROR FLAGS.          35371500
         MVI   SDBCHEND,SDBCEPNT   SET POINT CH END APDG.               35372000
SVT065   DS    0H                                              @OZ18207 35372250
         EXCP  SDBIOB              START I/O FOR POINT.                 35372500
         L     R1,SDBECB           LOAD ECB                    @OZ18207 35372550
SVT067   LR    R2,R1               RELOAD ECB                  @OZ18207 35372600
         N     R2,=XL4'7F000000'   RESET WAIT BIT              @OZ18207 35372650
         CS    R2,R1,SDBECB        REPLACE ECB                 @OZ18207 35372700
         BNE   SVT067              TRY AGAIN IF UNSUCCESSFUL   @OZ18207 35372750
         WAIT  1,ECB=SDBECB        WAIT TILL DONE.                      35373000
         TM    SDBFLG1,SDB1BFXS    WERE WE QUIESCED            @OZ18207 35373100
         BZ    SVT070              CONTINUE IF NOT             @OZ18207 35373200
         NI    SDBFLG1,255-SDB1BFXS  RESET QUIESCE INDICATOR   @OZ18207 35373300
         B     SVT065              REDRIVE POINT OPERATION     @OZ18207 35373400
SVT070   MVI   SDBCHEND,SDBCEGET   SET GET CH END APDG         @OZ18207 35373500
         SPACE 2                                                        35374000
* IF OUTPUT - FREE THE PBF AND RESTORE SDBCCW4,SDBCHEND                 35374500
         TM    SDBFLG1,SDB1PUT     IF NOT OUTPUT DATA SET,              35375000
         BZ    SVT080              BRANCH.                              35375500
         $FREEBUF TYPE=PROT,A=SDBPBF  ELSE FREE THE PBF                 35376000
         SLR   R0,R0               ZERO OUT                             35376500
         ST    R0,SDBPBF           PROTECTED BUFFER POINTER.            35377000
         MVI   SDBCCW4,X'05'       SET WRITE COMMAND.                   35377500
         MVI   SDBCHEND,SDBCEPUT   SET CHANNEL END APDG TO PUT.         35378000
         SPACE 2                                                        35378500
SVT080   DS    0H                                                       35379000
         L     R15,SDBSAVE         PASS HCEPNT RETURN CODE              35379500
         B     SVCEXIT             BACK TO HAMPOINT.                    35380000
         EJECT                                                          35380500
*                                                                       35381000
*                                                                       35381500
*              HAMSVC - EXITS AND CONSTANTS                             35382000
*                                                                       35382500
*                                                                       35383000
         SPACE 3                                                        35383500
SVCNORML DS    0H                                                       35384000
         SR    R15,R15             NORMAL EXIT -                        35384500
         B     SVCEXIT             RETURN ON CVTEXPRO.                  35385000
         SPACE 3                                                        35385500
         $MID  382                 HASP MESSAGE ID             @OZ29679 35385600
SVCDUP   WTO   '&MID.UNSYNCHRONIZED USE OF SYSOUT DS BY MULTIPLE TASKS'*35385700
               ,ROUTCDE=11,DESC=6                              @OZ29679 35385800
         SLR   R15,R15             INDICATE NO ERROR.          @OZ29679 35385850
         B     SVCEXIT             RETURN NORMALLY.            @OZ29679 35385900
         SPACE 2                                               @OZ29679 35385950
SVCERRET DS    0H                  LOGICAL ERROR EXIT -                 35386000
         LA    R15,4               RETURN CODE OF 4.                    35386500
         B     SVCEXIT             RETURN.                              35387000
         SPACE 2                                                        35387500
SVCSTOR  DS    0H                  NO MAIN STORAGE AVAILABLE            35388000
         L     R15,=A(HERSTOR)                                          35388500
         B     SVCEXIT                                                  35389000
         SPACE 2                                                        35389500
SVCEOD   DS    0H                                                       35390000
         L     R15,=A(HERNOEOD)    POINT FOUND END-OF-FILE              35390500
         B     SVCEXIT                                                  35391000
         SPACE 3                                                        35391500
SVCEXIT  DS    0H                                                       35392000
         L     R14,CVTPTR          POINT TO THE CVT.                    35392500
         USING CVT,R14             SET CVT ADDRESSABILITY.              35393000
         L     R14,CVTEXPRO        POINT TO EXIT PROLOGUE.              35393500
         DROP  R14                 DROP CVT ADDRESSABILITY.             35394000
         BR    R14                 BRANCH TO EXIT PROLOGUE.             35394500
         SPACE 3                                                        35395000
         LTORG                                                          35395500
         EJECT                                                          35396000
*                                                                       35396500
*                                                                       35397000
*              HAMSVC - ENDREQ PROCESSING                               35397500
*                                                                       35398000
*                                                                       35398500
SVCENDR  DS    0H                                                       35399000
* IF DATA SET NOT OUTPUT, MERELY RETURN                                 35399500
         TM    SDBFLG1,SDB1PUT     IF NOT OUTPUT DATA SET,              35400000
         BZ    SVCNORML            RETURN NORMALLY.                     35400500
* TRUNCATE UNPROTECTED BUFFER                                           35401000
         L     RBUF,SDBUBF         POINT TO UBF FROM SDB.               35401500
         L     R1,BFLOC            POINT TO CURRENT LOCATION.           35402000
         LA    R5,BFIO             GET ADDRESS OF              @OZ29839 35402050
         AH    R5,$SVBFSIZ            BUFFER END.              @OZ29839 35402100
         CR    R5,R1               COMPARE BFLOC TO END.       @OZ29839 35402150
         BNH   SVCENDRA            ERROR IF BFLOC TOO LARGE.   @OZ29839 35402200
         CR    RBUF,R1             COMPARE BFLOC TO START.     @OZ29839 35402250
         BL    SVCENDR0            NO ERROR IF BFLOC IN RANGE  @OZ29839 35402300
SVCENDRA L     R15,=A(HERBLKER)    SET UP FOR 1FA ABEND.       @OZ29839 35402350
         B     SVCEXIT             RETURN TO HAMENDR.          @OZ29839 35402400
SVCENDR0 DS    0H                  BUFLOC WITHIN RANGE.        @OZ29839 35402450
         MVI   0(R1),LRCBFEND      TRUNCATE THE BUFFER.                 35402500
* SAVE BFLOC AND BFLEN FOR AFTER SVCPUT RESETS THEM                     35403000
         LM    R2,R3,BFLOC         SAVE BFLOC, BFLEN                    35403500
* SET CLOSE FLAG SO DATA SET WILL APPEAR AT END-OF-FILE                 35404000
         OI    SDBFLG1,SDB1CLOS    CAUSE CLOSE PROCESSING.              35404500
* FLAG ALLOCATION IOT SO HCEPUT WILL WRITE IT                           35405000
         L     RIOT,SDBAIOT        FLAG ALLOCATION IOT FOR              35405500
         OI    IOTFLAG1-IOTDSECT(RIOT),IOT1CKPT  CHECKPOINT.            35406000
* CALL SVCPUT TO WRITE OUT UNPROTECTED BUFFER CONTENTS                  35406500
         LR    R1,RRPL             SET RPL REGISTER.                    35407000
         LA    R0,HSVCEOBP         SET FUNCTION REGISTER.               35407500
         SVC   HAMSVC              START CLOSING.                       35408000
* RESET THE CLOSE FLAG SO DATA SET CAN CONTINUE WRITING                 35408500
         NI    SDBFLG1,255-SDB1CLOS  RESET CLOSE FLAG.                  35409000
* RESTORE BFLOC AND BFLEN TO RE-ESTABLISH UBF POSITION                  35409500
         STM   R2,R3,BFLOC         RESTORE BFLOC, BFLEN.                35410000
* IF ERROR, RETURN ERROR ADDRESS TO HAMENDR                             35410500
         LTR   R15,R15             IF ERROR,                            35411000
         BNZ   SVCEXIT             RETURN CODE TO HAMENDR.              35411500
* TEST FOR PURGED I/O AND RESTART EXCP LOOP IF NECESSARY.      @OZ28485 35411600
         TM    SDBFLG2,SDB2IOA     IF I/O NOT ACTIVE,          @OZ28485 35411620
         BZ    SVCENDR1            NO NEED TO TEST FOR PURGE.  @OZ28485 35411640
         CLI   SDBICMP,X'48'       IF ACTIVE AND NOT PURGED,   @OZ28485 35411660
         BNE   SVCENDR1            GO WAIT FOR COMPLETION.     @OZ28485 35411680
         L     R2,SDBECB           SAVE CURRENT ECB.           @OZ28485 35411700
         MVI   SDBECB,0            ZERO THE ECB.               @OZ28485 35411720
         EXCP  SDBIOB              START CHANNEL PROGRAM.      @OZ28485 35411740
         WAIT  1,ECB=SDBECB        WAIT FOR COMPLETION.        @OZ28485 35411760
         LTR   R2,R2               IF SAVED ECB'S WAIT BIT     @OZ28485 35411780
         BNM   SVCNORML              IS OFF, BRANCH.           @OZ28485 35411800
         ST    R2,SDBECB           ELSE RESTORE IT.            @OZ28485 35411820
         IC    R0,SDBICMP          GET POST CODE.              @OZ28485 35411840
         SLL   R0,24               LEFT JUSTIFY.               @OZ28485 35411860
         POST  SDBECB,(0)          POST THE SAVED ECB.         @OZ28485 35411880
         B     SVCNORML            AND DONE.                   @OZ28485 35411900
SVCENDR1 DS    0H                                              @OZ28485 35411920
* WAIT FOR I/O TO COMPLETE.  THEN RETURN.                               35412000
         WAIT  1,ECB=SDBECB        WAIT FOR I/O COMPLETION.             35412500
         B     SVCNORML            RETURN NORMALLY.                     35413000
         EJECT                                                          35417500
*                                                                       35418000
*                                                                       35418500
*              HAMSVC --- INTERNAL READER PROCESSING                    35419000
*                                                                       35419500
*                                                                       35420000
SVCIRD   DS    0H                                                       35420500
*                                                                       35421000
*              IF NO UNPROTECTED BUFFER -                               35421500
*              GET ONE, $$POST UNIT, AND RETURN                         35422000
*                                                                       35422500
         USING DCTDSECT,RSDB       ESTABLISH DCT ADDRESSABILITY.        35423000
         SLR   R7,R7               SET ZERO RETURN CODE.                35423500
         L     RBUF,RIDUBF         GET UNPROT BUF ADDRESS.              35424000
         LTR   RBUF,RBUF           IS THERE ONE...                      35424500
         BNZ   SVI100              CONTINUE IF SO.                      35425000
         $GETMAIN BC,SP=229,KEY=15,LV=RIDBUFSZ  ELSE GET ONE.           35425500
         BNZ   SVI010              BR IF STORAGE UNAVAILABLE            35426000
         LR    RBUF,R1             ELSE SET BUF ADDRESSABILITY.         35426500
         ST    RBUF,RIDUBF         SET POINTER IN DCT.                  35427000
         LA    R0,BFDAT            SET STARTING                         35427500
         ST    R0,BFLOC            DATA ADDRESS.                        35428000
         MVC   BFLEN,=A(RIDBUFSZ-(BFDAT+1-BFD))  SET LENGTH.            35428500
         NI    DCTSTAT,255-DCTHOLD-DCTDRAIN  RESET DCTHOLD,             35429000
         NI    RIDFLAGS,255-RIDEND DCTDRAIN, AND RIDEND.                35429500
         MVC   RIDASCBP,PSAAOLD-PSA  SAVE ASCB ADDRESS.                 35430000
         $$POST TYPE=UNIT          $POST HASP FOR UNIT.                 35430500
         B     SVCNORML            RETURN NORMALLY.                     35431000
*                                                                       35431500
*              IF FAILURE TO GET UNPROTECTED BUFFER -                   35432000
*              WRITE ERROR MESSAGE AND RETURN                           35432500
*                                                                       35433000
SVI010   DS    0H                                                       35433500
         BAL   R14,SVIWTO          WRITE ERROR MESSAGE                  35434000
         B     SVCERRET            *** TEMP RETURN R15=4.               35434500
         SPACE 3                                                        35435000
*                                                                       35435500
*              IF UNPROTECTED BUFFER EXISTS,                            35436000
*              WAIT TILL HASPRDR IS READY                               35436500
*                                                                       35437000
SVI100   DS    0H                                                       35437500
         L     R1,RIDECB           GET POST ECB                      R4 35438800
SKIP420  LR    R2,R1               RELOAD ECB                        R4 35438900
         N     R2,=X'7F000000'     RESET WAIT BIT                    R4 35439000
         CS    R1,R2,RIDECB        RESET ECB, PRESERVING POST        R4 35439100
         BNE   SKIP420             TRY AGAIN, IF UNSUCCESSFUL        R4 35439200
         WAIT  1,ECB=RIDECB        ELSE WAIT FOR HASPRDR.               35439300
         SLR   R0,R0               THEN                                 35439500
         ST    R0,RIDECB           ZERO OUT THE ECB                     35440000
*                                                                       35441000
*              IF PROTECTED BUFFER EXISTS,                              35441500
*              MOVE DATA TO IT, $$POST IO, AND RETURN                   35442000
*                                                                       35442500
SVI110   DS    0H                  TEST PROTECTED BUFFER                35443000
         L     R2,RIDPBF           GET PROTECTED BUF ADDRESS.           35443500
         LTR   R2,R2               DOES IT EXIST...                     35444000
         BNZ   SVI120              BRANCH IF SO.                        35444500
         BAL   R5,SVIFREE          ELSE FREE UNPROT BUFFER,             35445000
         BAL   R5,SVIPOST          POST HASP FOR FLAGS,             R41 35445100
         BAL   R14,SVIWTO          WRITE MESSAGE,                       35445500
         B     SVCERRET            AND RETURN ERROR.                    35446000
SVI120   DS    0H                  MOVE UNPROT BUF TO PROT BUF.         35446500
         LA    R2,BFDAT-BFD(,R2)   ELSE GET ITS DATA ADDRESS            35447000
         ST    R2,RIDPBFO          AND INITIALIZE RIDPBFO.              35447500
         L     R3,=A(RIDBUFSZ-(BFDAT-BFD))  GET LENGTH OF MOVE.         35448000
         LA    R4,BFDAT            GET UNPROT DATA ADDRESS.             35448500
         L     R1,BFLOC            POINT TO NEXT LRC SPACE.             35449000
         LR    R5,R4               GET ADDRESS OF              @OZ29839 35449100
         ALR   R5,R3                 BUFFER END.               @OZ29839 35449150
         CR    R5,R1               COMPARE BFLOC TO END.       @OZ29839 35449200
         BNH   SVIABND             ABEND1FA, BFLOC TOO LARGE.  @OZ29839 35449250
         CR    RBUF,R1             COMPARE BFLOC TO START.     @OZ29839 35449300
         BNL   SVIABND             ABEND1FA, BFLOC TOO SMALL.  @OZ29839 35449350
         USING LRCDSECT,R1         USE LRC DSECT.                       35449500
         MVI   LRCTLENG,LRCBFEND   TRUNCATE THE BUFFER.                 35450000
         DROP  R1                  DROP LRC DSECT.                      35450500
         ST    R4,BFLOC            RE-INITIALIZE UNPROT DATA START      35451000
         MVC   BFLEN,=A(RIDBUFSZ-(BFDAT+1-BFD))  AND LENGTH.            35451500
         LR    R5,R3               SET SOURCE LENGTH.                   35452000
         MVCL  R2,R4               MOVE UNPROT TO PROT BUF              35452500
         BAL   R5,SVIPOST          AFTER MOVE, POST HASP.               35453000
         TM    BFFL1,RIDERQ+RIDCLS IF NOT ENDREQ NOR                    35453500
         BZ    SVCNORML            CLOSE, JUST RETURN.                  35454000
         WAIT  1,ECB=RIDECB        WAIT FOR JOB ID FROM HASP.           35454500
         BAL   R5,SVIFREE          ELSE FREE UNPROT BUF,                35455000
         BAL   R5,SVIPOST          POST HASP FOR FLAGS,                 35455500
         B     SVCNORML            AND THEN RETURN.                     35456000
         SPACE 3                                                        35456500
*                                                                       35457000
*              SUBROUTINE TO FREE UNPROTECTED BUFFER                    35457500
*                                                                       35458000
SVIFREE  DS    0H                  BAL R5,SVIFREE                       35458500
         $FREMAIN BC,SP=229,KEY=15,LV=RIDBUFSZ,A=(RBUF)  FREE UBF.      35459000
         SLR   R0,R0               ZERO POINTER                         35459500
         ST    R0,RIDUBF           TO UNPROTECTED BUFFER.               35460000
         OI    RIDFLAGS,RIDEND     SHOW INTERNAL READER END             35460500
         OI    DCTSTAT,DCTHOLD     AND DEVICE HELD.                     35461000
         BR    R5                  RETURN TO SUBROUTINE CALLER.         35461500
         SPACE 3                                                        35462000
*                                                                       35462500
*              SUBROUTINE TO POST HASP INTERNAL READER                  35463000
*                                                                       35463500
SVIPOST  DS    0H                  BAL R5,SVIPOST                       35464000
         SLR   R0,R0               ZERO OUT ECB                         35464500
         ST    R0,RIDECB           BEFORE POSTING HASP.                 35465000
         NI    RIDFLAGS,255-RIDBUSY  SHOW SSSM GIVES UP CONTROL.        35465500
         OI    RIDFLAGS,RIDPOST    SHOW HASPDISP WHICH TO POST.         35466000
         $$POST ELMT=$SVIRDR       POST HASPDISP FOR INTRDR.            35466500
         BR    R5                  RETURN TO SUBROUTINE CALLER.         35467000
         SPACE 3                                                        35467500
*                                                              @OZ29839 35467600
*        IF BUFFER ERROR, FORCE ABEND 1FA                      @OZ29839 35467650
*                                                              @OZ29839 35467700
SVIABND  ABEND X'1FA',DUMP,,SYSTEM BUFFER ERROR.               @OZ29839 35467750
         SPACE 1                                               @OZ29839 35467800
*                                                                       35468000
*              IF ERROR, WRITE ERROR MESSAGE                            35468500
*                                                                       35469000
SVIWTO   DS    0H                                                       35469500
         L     R7,=A(RPLWTERD+65536*RPLPHYER)  SET ERROR CODE.          35470000
         GETMAIN RC,LV=SVIML       GET MESSAGE BUFFER.                  35470500
         LTR   R15,R15             IF GETMAIN FAILED,                   35471000
         BNZR  R14                 RETURN TO CALLER.                    35471500
         LR    R2,R1               ELSE SAVE BUFFER ADDRESS.            35472000
         MVC   0(SVIML,R1),SVIM    MOVE MSG TO BUFFER.                  35472500
         MVC   SVIML1(,R1),DCTDEVN MOVE INTRDR NAME TO MESSAGE.         35473000
         WTO   MF=(E,(1))          WRITE THE MESSAGE.                   35473500
         FREEMAIN RC,LV=SVIML,A=(R2)  FREE THE BUFFER.                  35474000
         BR    R14                 RETURN TO CALLER.                    35474500
         $MID  354                 HASP354 IS MESSAGE ID.               35475000
SVIM     WTO   '$&MID.******** - STORAGE NOT AVAILABLE FOR BUFFERS',MF=C35475500
               L,ROUTCDE=11,DESC=6                                      35476000
SVIML    EQU   *-SVIM              LENGTH OF MESSAGE BUFFER             35476500
SVIML1   EQU   4+1+9,8             LOC, LENGTH OF INTRDR NAME        R4 35477000
         USING SDBDSECT,RSDB       RESTORE SDB ADDRESSABILITY.          35477500
         LTORG                                                 @OZ32729 35477700
         TITLE 'HAM CHANNEL END APPENDAGE'                              35478000
*                                                                       35478500
*                                                                       35479000
*              HASP ACCESS METHOD CHANNEL END APPENDAGE                 35479500
*                                                                       35480000
*                                                                       35480500
HAMCEA   DS    0H                                                       35481000
         USING *,R15               ESTABLISH ADDRESSABILITY             35481500
         LR    R10,R2              SWITCH IOB ADDRESS TO R10.           35482000
         S     R10,=A(SDBIOB-SDBDSECT)  POINT TO SDB.                   35482500
         CLC   SDBID-SDBDSECT(6,R10),HCSDBID  DOES SDB LOOK OKAY...     35483000
         BNER  R14                 NO --- PROBABLY SJB I/O.             35483500
         SPACE 3                                                        35484000
* SAVE AND SET UP REGISTERS.                                            35484500
         USING SDBDSECT,RSDB       USE THE SDB DSECT.                   35485000
         L     RSVT,SDBSVT         SET THE SVT BASE REGISTER.           35485500
         STM   R0,R15,0(R13)       SAVE REGISTERS.                      35486000
         BALR  R12,0               ESTABLISH                            35486500
         USING *,R12               ADDRESSABILITY.                      35487000
HCEBASE  DS    0H                                                       35487500
         SPACE 2                                                        35488000
         SR    R15,R15             ZERO A REGISTER.                     35488500
         IC    R15,SDBCHEND        GET DISPLACEMENT FOR CHAN END CODE.  35489000
         B     *+4(R15)            BRANCH ACCORDINGLY.                  35489500
         B     HCEGET              GET                                  35490000
         B     HCEPUT              PUT                                  35490500
         B     HCEPNT              POINT                                35491000
         B     HCEGUP              GET-UPDATE                           35491500
HAMAVT   DC    A(*+20,*+16,*+12,HAMCEA,HAMCEX),X'07FE'                  35492000
         SPACE 3                                                        35492500
*                                                                       35493000
*              ABNORMAL CHANNEL END APPENDAGE                           35493500
*                                                                       35494000
HAMCEX   DS    0H                                                       35494500
         USING *,R15               SET LOCAL ADDRESSABILITY.            35495000
         TM    4(R2),X'20'         IF NOT FINAL ENTRY,                  35495500
         BNZR  R14                 RETURN IMMEDIATELY.                  35496000
         STM   R0,R15,0(R13)       SAVE REGISTERS.                      35496500
         L     R12,=A(HCEBASE)     SET PERMANENT BASE.                  35497000
         DROP  R15                 DROP TEMPORARY BASE.                 35497500
         LR    R10,R2              COMPUTE AND SET                      35498000
         SL    R10,=A(SDBIOB-SDBDSECT)  SDB POINTER.                    35498500
         CLC   SDBID,HCSDBID       IF NOT AN SDB,                       35499000
         BNER  R14                 RETURN IMMEDIATELY.                  35499500
         L     RSVT,SDBSVT         SET POINTER TO SSVT.                 35500000
         OI    SDBFLG2,SDB2IOE     IF SDB, FLAG I/O ERROR               35500500
         BR    R12                 AND CONTINUE.                        35501000
         EJECT                                                          35501500
*                                                                       35502000
*              CHANNEL END GET SERVICES - PERFORMED ONLY IF END-OF-UBUF 35502500
*                                                                       35503000
*                                                                       35503500
HCEGET   DS    0H                                                       35504000
         L     RBUF,SDBUBF         POINT TO THE UNPROTECTED BUFFER.     35504500
         USING BFD,RBUF            SET BUFFER ADDRESSABILITY.           35505000
         L     R1,BFLENG           PREPARE REGISTERS FOR       @OZ30886 35505150
HCEOBTST LR    R2,R1                COMPARE AND SWAP           @OZ30886 35505300
         N     R1,=XL4'FFFF7FFF'   RESET BF1EOB IN REG1        @OZ30886 35505500
         O     R2,=XL4'00000080'   TURN ON BF2IOC IN R2        @OZ30886 35505750
         CS    R1,R2,BFLENG        IF BF1EOB OFF, SET BF2IOC   @OZ30886 35506000
         BE    HCEGEND              ON AND BRANCH              @OZ30886 35506125
         TM    BFFL1,BF1EOB        DID A DIFFERENT BIT CHANGE  @OZ30886 35506250
         BZ    HCEOBTST            TRY AGAIN IF SO             @OZ30886 35506375
         CALL  HENDREAD            CHECK COMPLETION ETC.                35506500
         TM    SDBFLG2,SDB2IOE     WAS THERE AN I/O ERROR...            35507000
         BO    HCRSPEC             BRANCH IF NOT.                       35507500
         CALL  HMOVEPU             MOVE PROTECTED TO UNPROT ETC.        35508000
         TM    SDBFLG2,SDB2EOD     IS THIS LAST OF INPUT...             35508500
         BO    HCRSPEC             IF SO, JUST POST ECB.                35509000
         CALL  HCNVFDAD            SET NEW FDAD IN IOB.                 35509500
         LA    R11,BFECB           POINT TO ECB TO POST                 35510000
         CALL  HPOSTECB            AND GO POST IT.                      35510500
         LA    R15,8               SET RETURN TO RE-EXCP,               35511000
         LA    R0,1                INCREMENT                            35511500
         A     R0,SDBXCPCT         EXCP                                 35512000
         ST    R0,SDBXCPCT         COUNTER,                             35512500
         B     HCRETURN            AND RETURN TO IOS.                   35513000
         SPACE 3                                                        35513500
*                                                                       35514000
*              END OF READ - I/O ERROR OR END-OF-DATA                   35514500
*                                                                       35515000
HCRSPEC  DS    0H                                                       35515500
         LA    R11,BFECB           POINT TO UNPROT BUF ECB.             35516000
         CALL  HPOSTECB            GO POST IT.                          35516500
HCEGEND  DS    0H                                                       35517000
         SLR   R15,R15             SET POST RETURN CODE                 35517500
         B     HCRETURN            AND RETURN TO IOS.                   35518000
         EJECT                                                          35518500
*                                                                       35519000
*                                                                       35519500
*              CHANNEL END SERVICES FOR GET-UPDATE                      35520000
*                                                                       35520500
*                                                                       35521000
HCEGUP   DS    0H                                                       35521500
         USING LRCDSECT,R1         USE LOGICAL RECORD DSECT.            35522000
*                                                                       35522500
*              FIND AND VALIDITY-CHECK PROTECTED BUFFER                 35523000
*                                                                       35523500
         L     RBUF,SDBGBF         POINT TO FIRST PROT BUFFER.          35524000
HCGUV1   L     R1,BFBF             POINT TO NEXT.                       35524500
         LTR   R1,R1               IF NEXT IS ZERO, WE HAVE             35525000
         BZ    HCGUV2              THE BUFFER WE WANT.                  35525500
         LR    RBUF,R1             ELSE MAKE NEXT CURRENT               35526000
         B     HCGUV1              AND LOOP.                            35526500
HCGUV2   CLC   BFKEY,SDBKEY        IS BUFFER KEY CORRECT...             35527000
         BNE   HCGU80              IF NOT, SHOW ERROR.                  35527500
*                                                                       35528000
*              MOVE PROTECTED BUFFER TO LAST HOLD BUFFER                35528500
*                                                                       35529000
         LA    R4,BFIO             POINT TO BUFFER I/O PORTION.         35529500
         LH    R5,$SVBFSIZ         GET ITS LENGTH.                   R4 35530000
         L     R1,BFECB            POINT TO CORRESP UNPROT BUF.         35530500
         LA    R2,BFIO-BFD(,R1)    POINT TO ITS I/O PORTION.            35531000
         LR    R3,R5               SET SINK LENGTH.                     35531500
         MVCL  R2,R4               MOVE UPD-PROT TO UPD-UNPROT.         35532000
*                                                                       35532500
*              IF THIS IS FIRST HOLD BUFFER FIND RECORD START           35533000
*                                                                       35533500
         CL    RBUF,SDBGBF         IS THIS FIRST UPDATE BUFFER...       35534000
         BNE   HCGU10              BRANCH IF NOT.                       35534500
         LM    R2,R3,SDBUPRBA      LOAD REQUIRED RBA INTO R2,R3         35535000
         CALL  HFINDRBA            FIND REQUESTED LOGICAL RECORD.       35535500
         BC    7,HCGU80            SHOW ERROR IF NOT FOUND.             35536000
         LR    R2,R1               TRANSFER REC ADR TO R2.              35536500
         SLR   R2,RBUF             COMPUTE RECORD OFFSET.               35537000
         L     R3,BFECB            POINT R3 TO UNPROT BUFFER.           35537500
         ALR   R2,R3               COMPUTE ADR OF IMAGE IN HBF.         35538000
         ST    R2,BFLOC-BFD(,R3)   STORE THAT ADDRESS IN HBF.           35538500
         SLR   R15,R15             ASSUME RECORD NOT SPANNED.           35539000
         TM    LRCFLAG1,LRC1SPAN   IS THIS A SPANNED RECORD...          35539500
         BZ    HCRETURN            IF NOT, RETURN TO POST.              35540000
         TM    LRCFLAG1,LRC1SEND   YES.  IS THIS LAST SEGMENT...        35540500
         BO    HCRETURN            IF SO, RETURN TO POST.               35541000
         B     HCGU20              ELSE READ ANOTHER RECORD.            35541500
*                                                                       35542000
*              NOT FIRST HOLD BUFFER - IF END, RETURN                   35542500
*                                                                       35543000
HCGU10   L     R3,BFECB            POINT TO HBF (UPDATE-UNPROT).        35543500
         LA    R1,BFDAT-BFD(,R3)   SET DATA IMAGE ADDRESS               35544000
         ST    R1,BFLOC-BFD(,R3)   IN IT.                               35544500
         TM    LRCFLAG1,LRC1SPAN   IS THIS A SPANNED RECORD...          35545000
         BZ    HCGU80              SHOW ERROR IF NOT.                   35545500
         SLR   R15,R15             ASSUME LAST SEGMENT.                 35546000
         TM    LRCFLAG1,LRC1SEND   IS THIS THE LAST SEGMENT...          35546500
         BO    HCRETURN            IF SO, RETURN TO POST.               35547000
*                                                                       35547500
*              GET MORE BUFFERS AND READ NEXT RECORD                    35548000
*                                                                       35548500
HCGU20   DS    0H                                                       35549000
         $GETBUF TYPE=PROT         GET A NEXT PROTECTED BUFFER.         35549500
         BNZ   HCGU85              BRANCH IF NO STORAGE.                35550000
         ST    R1,BFBF             POINT CURRENT TO NEXT.               35550500
         MVI   BFID-BFD(R1),C'G'   SHOW UPDATE-PROTECTED.               35551000
         SLR   R0,R0               ZERO NEXT PROTECTED BUFFER'S         35551500
         ST    R0,BFBF-BFD(,R1)    CHAIN ADDRESS.                       35552000
         MVC   BFTRK-BFD(,R1),BFNXT  SET NEXT BUF TRACK ADDRESS.        35552500
         $GETBUF TYPE=UNPROT       GET A NEXT UNPROTECTED BUFFER.       35553000
         BNZ   HCGU85              BRANCH IF NO STORAGE.                35553500
         LR    R5,RBUF             POINT R5 TO CURRENT PROT BUF.        35554000
         L     RBUF,BFECB          POINT RBUF TO CURR UNPROT BUF.       35554500
         ST    R1,BFBF             POINT CURR TO NEXT UNPROT.           35555000
         MVI   BFID-BFD(R1),C'H'   SHOW UPDATE-UNPROTECTED.             35555500
         SLR   R0,R0               ZERO NEXT UNPROTECTED BUFFER'S       35556000
         ST    R0,BFBF-BFD(,R1)    CHAIN ADDRESS.                       35556500
         L     RBUF,BFBF-BFD(,R5)  POINT RBUF TO NEXT PROT.             35557000
         ST    R1,BFECB            POINT NEXT PROT TO NEXT UNPROT.      35557500
         MVC   SDBMTTR,BFTRK       MOVE MTTR FROM NEXT PROT             35558000
         CALL HCNVFDAD             FOR CONVERSION, AND CONVERT.         35558500
         LA    R15,8               RETURN FROM CE APPENDAGE             35559000
         B     HCRETURN            TO CAUSE RE-EXCP.                    35559500
         SPACE 1                                                        35560000
HCGU80   OI    SDBFLG2,SDB2IOE     SHOW I/O ERROR                    R4 35560100
         MVC   SDBSAVE,=A(HERRDERD)  SET ERROR ADDRESS.                 35561500
         SLR   R15,R15             DON'T RESTART.                       35562000
         B     HCRETURN            RETURN.                              35562500
HCGU85   DS    0H                                                       35563000
         OI    SDBFLG2,SDB2IOE     SHOW I/O ERROR.                      35563500
         MVC   SDBSAVE,=A(HERSTOR) SET ERROR ADDRESS.                   35564000
         SLR   R15,R15             DON'T RESTART.                       35564500
         B     HCRETURN            RETURN.                              35565000
         EJECT                                                          35565500
*                                                                       35566000
*                                                                       35566500
*              CHANNEL END PUT SERVICES                                 35567000
*                                                                       35567500
*                                                                       35568000
HCEPUT   DS    0H                                                       35568500
*                                                                       35569000
*              ADD BUFFERS FROM SDBPBFX TO CHAIN SDBPBF                 35569500
*                                                                       35570000
         L     R1,SDBPBFX          DECHAIN                              35570500
         SLR   R0,R0               EVERYTHING                           35571000
         CS    R1,R0,SDBPBFX       ON CHAIN                             35571500
         BNE   *-4                 SDBPBFX.                             35572000
         LTR   R1,R1               WAS CHAIN EMPTY...                   35572500
         BZ    HCEP40              BRANCH IF SO.                        35573000
         SPACE 1                                                        35573500
         LA    RBUF,SDBPBF-(BFBF-BFD)  CHAIN THROUGH                    35574000
HCEP10   LR    R3,RBUF             THE SDBPBF                           35574500
         L     RBUF,BFBF           CHAIN TO FIND                        35575000
         LTR   RBUF,RBUF           THE LAST BUFFER                      35575500
         BNZ   HCEP10              ON IT.  (R3 PTS TO LAST BUF.)        35576000
         SPACE 1                                                        35576500
HCEP20   LR    RBUF,R1             SCAN SDBPBFX CHAIN,                  35577000
         SLR   R5,R5               SAVING 2D-TO-LAST & LAST PTRS.       35577500
HCEP30   LR    R4,R5               SAVE 2D-TO-LAST POINTER.             35578000
         LR    R5,RBUF             SAVE LAST POINTER.                   35578500
         L     RBUF,BFBF           IF RBUF IS ZERO,                     35579000
         LTR   RBUF,RBUF           R4=2D-TO-LAST AND R5=LAST.           35579500
         BNZ   HCEP30              IF NOT, LOOP TILL SO.                35580000
* R5 POINTS TO LAST BUFFER ON SDBPBFX CHAIN                             35580500
         ST    R5,BFBF-BFD(,R3)    ADD THE BUF TO SDBPBF CHAIN.         35581000
         LR    R3,R5               SET R3 TO LAST BUF ON SDBPBF.        35581500
* R4 IS EITHER ZERO (END) OR PTR TO 2D-TO-LAST BUFFER.                  35582000
         LTR   R4,R4               IF R4 IS ZERO,                       35582500
         BZ    HCEP40              SDBPBFX CHAIN IS DONE.               35583000
         ST    R0,BFBF-BFD(,R4)    ELSE SHOW 2D-LAST BUF IS LAST        35583500
         B     HCEP20              AND GO DECHAIN NEW LAST.             35584000
*                                                                       35584500
*              DECHAIN 1ST SDBPBF AND PUT ON SDBFBF                     35585000
*                                                                       35585500
HCEP40   DS    0H                                                       35586000
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              35586500
         L     RIOT,SDBAIOT        POINT TO ALLOCATION IOT.             35587000
         LA    R0,IOTSTART         POINT TO ITS I/O PORTION.            35587500
         CLM   R0,7,SDBCCW4+1      IF WE JUST WROTE IT,                 35588000
         BE    HCEP50              DON'T FOR GOD SAKES FREE IT.         35588500
         DROP  RIOT                DROP IOT BASE.                       35589000
         L     RBUF,SDBPBF         POINT TO FIRST BUF ON SDBPBF.        35589500
         MVC   SDBPBF,BFBF         DECHAIN IT FROM SDBPBF.              35590000
         OI    BFFL1,BF1IOC        SHOW I/O COMPLETE.                   35590500
         L     R1,SDBFBF           GET PTR TO OLD LAST SDBFBF.          35591000
         ST    R1,BFBF             STORE PTR IN THIS BUF'S CHAIN.       35591500
         CS    R1,RBUF,SDBFBF      SET NEW LAST SDBFBF.                 35592000
         BNE   *-8                 IF INTERFERENCE, STORE AGAIN.        35592500
*                                                                       35593000
*              SHOW I/O COMPLETE AND HONOR EARLY POST REQUEST           35593500
*                                                                       35594000
         TM    SDBFLG2,SDB2POST    DOES SVCPUT ASK EARLY POST...        35594500
         BZ    HCEP50              BRANCH IF NOT.                       35595000
         LA    R11,SDBSAVE         YES.  POINT TO EARLY-POST ECB        35595500
         CALL  HPOSTECB            AND POST IT.                         35596000
         NI    SDBFLG2,255-SDB2POST  RESET EARLY POST REQUEST.          35596500
*                                                                       35597000
*              START I/O FOR NEXT PROTECTED BUFFER                      35597500
*                                                                       35598000
HCEP50   DS    0H                                                       35598500
         L     RIOT,SDBAIOT        POINT TO ALLOCATION IOT.             35599000
         LTR   RIOT,RIOT           IF IT DOESN'T EXIST,                 35599500
         BZ    HCEP55              CONTINUE NORMALLY.                   35600000
         USING IOTDSECT,RIOT       SET IOT ADDRESSABILITY.              35600500
         TM    IOTFLAG1,IOT1CKPT   DOES IT NEED WRITING...              35601000
         BZ    HCEP55              IF NOT, CONTINUE NORMALLY.           35601500
         NI    IOTFLAG1,255-IOT1CKPT  RESET CHECKPOINT FLAG.            35602000
         LA    R0,IOTSTART         SET IOT ADDRESS                      35602500
         STCM  R0,7,SDBCCW4+1      IN SDBCCW4.                          35603000
         MVC   SDBMTTR,IOTTRACK    CONVERT                              35603500
         CALL  HCNVFDAD            TRACK ADDRESS.                       35604000
         LA    R15,8               SET RETURN TO +8.                    35604500
         B     HCRETURN            RETURN TO EXCP.                      35605000
         DROP  RIOT                DROP IOT BASE.                       35605500
HCEP55   DS    0H                                                       35606000
         L     RBUF,SDBPBF         POINT TO NEXT PBF FOR I/O.           35606500
         LTR   RBUF,RBUF           CAN WE START AN I/O...               35607000
         BZ    HCEP60              BRANCH IF NOT.                       35607500
         MVC   SDBMTTR,BFTRK       MOVE RELATIVE TRACK AND              35608000
         CALL  HCNVFDAD            CONVERT IT TO ABSOLUTE.              35608500
         LA    R0,1                INCREMENT                            35609000
         AL    R0,SDBXCPCT         EXCP                                 35609500
         ST    R0,SDBXCPCT         COUNTER.                             35610000
         LA    R0,BFIO             SET BUFFER I/O ADDRESS               35610500
         STCM  R0,7,SDBCCW4+1      INTO WRITE-DATA CCW.                 35611000
         LA    R15,8               CAUSE RETURN TO RE-EXCP.             35611500
         B     HCRETURN            RETURN TO IOS.                       35612000
*                                                                       35612500
*              NO BUFFERS LEFT.  ALLOW SVCPUT TO ISSUE EXCP.            35613000
*                                                                       35613500
HCEP60   DS    0H                                                       35614000
         SLR   R15,R15             CAUSE RETURN TO POST.                35614500
         B     HCRETURN            RETURN TO IOS.                       35615000
         EJECT                                                          35615500
*                                                                       35616000
*              CHANNEL END POINT SERVICES                               35616500
*                                                                       35617000
HCEPNT   DS    0H                                                       35617500
         CALL  HENDREAD            CHECK I/O COMPLETION.                35618000
         TM    SDBFLG2,SDB2IOE     IF I/O ERROR,                        35618500
         BO    HCT800              BRANCH.                              35619000
* SET SDBTRK, BFRBA (PBF) FROM SDBUPRBA.  FIND RBA IN PBF.              35619500
         L     RBUF,SDBPBF         POINT TO PROTECTED BUFFER.           35620000
         USING BFD,RBUF            SET BUFFER ADDRESSABILITY.           35620500
         LM    R2,R3,SDBUPRBA      GET POINT TARGET RBA.                35621000
         STM   R2,R3,SDBTRK        SET SDBTRK FROM IT.                  35621500
         STM   R2,R3,BFRBA         ALSO PROTECTED BFRBA.                35622000
         CALL  HFINDRBA            SEARCH FOR LOGICAL RECORD.           35622500
         LA    LINK,HCRETURN       SET EOB & RF EXIT ADDRESS         R4 35622600
         BZ    HCT100              BRANCH IF FOUND.                     35623000
         LA    LINK,HCT820         SET EOB & NRF EXIT ADDRESS        R4 35623100
         SPACE 2                                                        35623500
* LOGICAL RECORD NOT FOUND IN THIS BUFFER ---                           35624000
* UPDATE SDBRECCT, THE LOGICAL RECORD COUNTER                           35624500
         LCR   R2,R3               GET NEG OF DECREMENTED COUNT.        35625000
         L     R15,BFRBA+4         UPDATE                            R4 35625500
         LA    R15,0(R2,R15)        THE LOGICAL                      R4 35626000
         AL    R15,SDBRECCT          RECORD                          R4 35626500
         ST    R15,SDBRECCT           COUNTER                        R4 35627000
* UPDATE VALUE OF SDBUPRBA FOR NEXT PHYSICAL RECORD                     35627500
         L     R0,BFNXT            GET NEXT TRACK ADDRESS.              35628000
         LTR   R0,R0               IF IT'S ZERO, WE'RE AT EOF.          35628500
         BZ    HCT100              GO MOVE PBF TO UBF                R4 35629000
         STCM  R0,15,SDBUPRBA+1    ELSE SET NEXT TRACK AND              35629500
         STCM  R3,7,SDBUPRBA+5     DECR'D COUNT IN SDBUPRBA.            35630000
* EXIT TO READ NEXT PHYSICAL RECORD                                     35630500
         ST    R0,SDBMTTR          SET TRK ADR TO CONVERT.              35631000
         CALL  HCNVFDAD            CONVERT TO MBBCCHHR.                 35631500
         LA    R15,8               SET +8 IOS RETURN.                   35632000
         B     HCRETURN            RETURN TO RESTART CHAN PROG.         35632500
         SPACE 3                                                        35633000
* R1 POINTS TO THE TARGET LOGICAL RECORD                                35633500
HCT100   DS    0H                                                       35634000
* MOVE PROTECTED BUFFER TO UNPROTECTED BUFFER                           35634500
         L     R7,SDBUBF           R7 POINTS TO UNPROT BUFFER.          35635000
         LA    R4,BFIO-BFD(,R7)    R4 IS UBF START-OF-MOVE.             35635500
         LA    R2,BFIO-BFD(,RBUF)  R2 IS PBF START-OF-MOVE.             35636000
         LH    R3,$SVBFSIZ         R3 IS LENGTH OF MOVE.             R4 35636500
         LR    R5,R3               SO IS R5.                            35637000
         MVCL  R4,R2               MOVE PBF TO UBF.                     35637500
* SET NEXT TRACK ADDRESS FOR CONVERSION.                                35638000
         MVC   SDBMTTR,BFNXT       SET NEXT TRACK FROM PBF.             35638500
* SET UP POINTERS AND FLAGS IN UNPROTECTED BUFFER.                      35639000
         SLR   R1,R6               SUBTR PBF ADR FROM POSITION.         35639500
         ALR   R1,R7               ADD UBF ADR TO POSITION.             35640000
         LR    RBUF,R7             SET UBF ADDRESSABILITY.              35640500
         ST    R1,BFLOC            SAVE POSITION IN UBF.                35641000
         NI    BFFL1,255-BF1EOB    SHOW UBF NOT EMPTY.               R4 35641500
         SLR   R7,R1               COMPUTE (UBF START)-(POSN).          35642000
         AH    R7,$SVBFSIZ         ADD USABLE                        R4 35642500
         AL    R7,=A(BFIO-1-BFD)   BUF LENG.                         R4 35642800
         ST    R7,BFLEN            SAVE REMAINING UBF LENGTH.           35643000
         MVC   BFRBA,SDBTRK        SET CURRENT RBA IN UBF.              35643500
* IF DATA SET WAS OPENED FOR INPUT, READ AGAIN.                         35644000
* OTHERWISE JUST RETURN FOR IOS TO POST.                                35644500
         SLR   R15,R15             SET IOS RETURN +0.                   35645000
         ST    R15,SDBSAVE         SET COMPLETION CODE ZERO.            35645500
         TM    SDBFLG2,SDB2EOD     IF INPUT DATA SET AT EOF,            35647000
         BOR   LINK                 GO SET UP HAM EXIT               R4 35647100
         TM    SDBFLG1,SDB1GET     IF DATA SET NOT INPUT,            R4 35647600
         BZ    HCRETURN             RETURN TO POST                   R4 35647700
         MVI   SDBCHEND,SDBCEGET   SET HCEGET APPENDAGE.                35648000
         CALL  HCNVFDAD            CONVERT NEXT TRACK ADDRESS.          35648500
         LA    R15,8               SET IOS RETURN TO +8.                35649000
         B     HCRETURN            RETURN TO RESTART CHAN PROG.         35649500
         SPACE 3                                                        35650000
* I/O ERROR OR BAD DATA SET KEY FOUND BY HENDREAD                       35650500
HCT800   DS    0H                                                       35651000
         L     R0,=A(HERRDERD)     SET ADDRESS OF HAM EXIT.             35651500
         B     HCT890              RETURN.                              35652000
         SPACE 2                                                        35652500
* END-OF-DATASET FOUND BEFORE END-OF-POINT                              35653000
HCT820   DS    0H                                                       35653500
         L     R0,=A(HERNOEOD)     SET ADDRESS OF HAM EXIT.             35657500
         SPACE 2                                                        35658000
* COMMON CODE FOR EXCEPTIONAL EXIT                                      35658500
HCT890   DS    0H                                                       35659000
         ST    R0,SDBSAVE          SAVE HAM EXIT ADDRESS.               35659500
         SLR   R15,R15             DO NOT RE-EXCP.                      35660000
         B     HCRETURN            RETURN FOR POSTING.                  35660500
         EJECT                                                          35661000
*                                                                       35661500
*              EXIT FROM CHANNEL END                                    35662000
*                                                                       35662500
HCRETURN DS    0H                                                       35663000
         LTR   R15,R15             IF NO RESTART,                       35663500
         BZ    HCRET20             GO RESET I/O-ACTIVE FLAG.            35663600
         L     R1,4(,R13)          RESTART.  POINT TO RQE,              35663700
         L     R1,28(,R1)          THENCE TO SRB/IOSB,                  35663800
         L     R1,28(,R1)          GET IOSB ADDRESS                  R4 35663900
         L     R1,IOSIPIB-IOSB(,R1)  GET IPIB ADDRESS                R4 35664000
         LTR   R1,R1               IF IPIB NOT PRESENT,                 35664100
         BZ    HCRET40             RESTART IS OKAY.                     35664200
         OI    SDBFLG1,SDB1BFXS    SHOW BUFFER EXCESSION OKAY.          35664300
         SLR   R15,R15             DON'T REDRIVE I/O.                   35664400
HCRET20  DS    0H                                                       35664500
         NI    SDBFLG2,255-SDB2IOA SHOW I/O INACTIVE.                   35664600
         TM    SDBFLG2,SDB2POST    DOES SVC ASK EARLY POST...        R4 35664700
         BZ    HCRET40             BR IF NO                          R4 35664800
         LA    R11,SDBSAVE          ELSE POINT TO EARLY-POST ECB     R4 35664900
         CALL  HPOSTECB              AND POST IT                     R4 35665000
         NI    SDBFLG2,255-SDB2POST  RESET EARLY POST REQUEST        R4 35665100
HCRET40  DS    0H                                                    R4 35665200
         LTR   R15,R15             TEST AGAIN FOR RE-EXCP.              35665300
         LM    R0,R14,0(R13)       RESTORE REGISTERS BUT R15.           35665500
         BZR   R14                 RETURN TO POST COMPLETE.             35666000
         USING DEBBASIC,R3         ELSE SET DEB BASE.                   35666500
         SLR   R10,R10             ZERO R10 FOR IC.                     35667000
         IC    R10,32(,R2)         GET EXTENT NUMBER FROM IOB.          35667500
         SLL   R10,4               MULTIPLY EXTENT BY 16.               35668000
         LA    R10,DEBSUCBA+2(R10) DEVELOP DEB EXTENT ADDRESS           35668100
         SLR   R7,R7               CLEAR REGISTER                       35668200
         ICM   R7,3,0(R10)         INSERT UCB ADDRESS                   35668500
         STH   R7,2(,R1)           SET RQEUCB.                          35669000
         L     R10,28(,R1)         POINT TO SRB/IOSB.                   35669500
         L     R10,28(,R10)        GET IOSB ADDRESS                  R4 35670000
         ST    R7,IOSUCB-IOSB(,R10)  SET IOSUCB                      R4 35670100
         B     0(R14,R15)          RETURN TO OFFSET IN R15.             35670500
         DROP  R3                  DROP DEB BASE.                       35671000
         SPACE 3                                                        35671500
*                                                                       35672000
*        CONSTANTS                                                      35672500
*                                                                       35673000
HCSDBID  DC    CL4'SDB',AL2(SDBLNG)                                     35673500
         DROP  RBUF                DROP BUFFER ADDRESSABILITY.          35674000
         EJECT                                                          35674500
         LTORG                                                          35675000
         TITLE 'SUBROUTINES FOR HAMSVC AND CE APDG'                     35675500
*                                                                       35676000
*                                                                       35676500
*              HENDREAD - VERIFY COMPLETION OF A READ                   35677000
*                                                                       35677500
*                                                                       35678000
HENDREAD DS    0H                                                       35678500
         USING *,R15               ESTABLISH ADDRESSABILITY.            35679000
         CLI   SDBICMP,X'7F'       WAS COMPLETION NORMAL...             35679500
         BNE   HERIOERR            IF NOT, SHOW I/O ERROR.              35680000
         L     RPBF,SDBPBF         YES.  POINT TO PROTECTED BUFFER.     35680500
         USING BFD,RPBF            USE BUFFER DSECT.                    35681000
         CLC   SDBKEY,BFKEY        DOES KEY MATCH...                    35681500
         BNE   HERIOERR            IF NOT, SHOW I/O ERROR.              35682000
         L     R1,BFNXT            YES.  NOW CHECK FOR                  35682500
         LTR   R1,R1               END-OF-DATA-SET.                     35683000
         BZ    HEREOD              IF ZERO, SHOW END-OF-DATA.           35683500
         CLI   BFNXT+3,0           IF RECORD NUMBER NON-ZERO,           35684000
         BNER  R14                 RETURN TO CALLER.                    35684500
*                                  OTHERWISE, I/O ERROR.                35685000
         SPACE 3                                                        35685500
HERIOERR DS    0H                                                       35686000
         OI    SDBFLG2,SDB2IOE     SHOW I/O ERROR                       35686500
         BR    R14                 AND RETURN.                          35687000
         SPACE 3                                                        35687500
HEREOD   DS    0H                                                       35688000
         OI    SDBFLG2,SDB2EOD     SHOW END-OF-DATA                     35688500
         BR    R14                 AND RETURN.                          35689000
         SPACE 3                                                        35689500
         DROP  R15,RPBF                                                 35690000
         EJECT                                                          35690500
*                                                                       35691000
*                                                                       35691500
*              HPOSTECB - POST AN ECB ACCORDING TO MVM STANDARDS        35692000
*                                                                       35692500
*                                                                       35693000
HPOSTECB DS    0H                                                       35693500
         USING *,R15                                                    35694000
*                                                                       35694500
*        POST ECB IN SAME MEMORY                                        35695000
*                                                                       35695500
         LR    R2,R14              SAVE RETURN ADDRESS.                 35696000
         LR    R0,R10              SAVE ADDRESS OF DDT.                 35696500
         LR    R3,R13              SAVE R13 IN R3.                      35697000
         L     R10,=X'40000000'    LOAD POST CODE.                      35697500
         L     R1,0(,R11)          GET ECB.                             35698000
         LTR   R1,R1               IS ECB WAITING...                    35698500
         BM    HPE010              BRANCH IF SO, TO POST.               35699000
         CS    R1,R10,0(R11)       POST ECB IF STILL UNWAITING.         35699500
         BE    HPE020              BRANCH IF OK, TO AVOID POST.         35700000
HPE010   L     R15,CVTPTR          POINT TO CVT.                        35700500
         USING CVTMAP,R15          USE THE CVT DSECT.                   35701000
         L     R15,CVT0PT01        POINT TO IEA0PT01.                   35701500
         BALR  R14,R15             POST BY BRANCH ENTRY.                35702000
HPE020   LR    R10,R0              RESTORE ADDRESS OF DDT.              35702500
         L     RSVT,SDBSVT         RELOAD THE SVT BASE REGISTER.        35703000
         LR    R13,R3              RESTORE R13 FROM R3.                 35703500
         SLR   R15,R15             SET R15 TO ZERO                   R4 35703700
         BR    R2                  RETURN TO CALLER.                    35704000
         DROP  R15                 DROP CVT ADDRESSABILITY.             35704500
         EJECT                                                          35705000
*                                                                       35705500
*                                                                       35706000
*              HMOVEPU - MOVE PROTECTED BUFFER TO UNPROTECTED BUFFER    35706500
*                                                                       35707000
*                                                                       35707500
HMOVEPU  DS    0H                                                       35708000
         USING *,R15                                                    35708500
         USING BFD,RBUF            USE THE BUFFER DSECT.                35709000
         MVC   SDBTRK+1(4),SDBMTTR SET CURRENT RBA IN DDT.              35709500
         LA    R0,1                SET RBA'S RECORD NUMBER              35710000
         STCM  R0,7,SDBTRK+5       TO 000001.                           35710500
         L     R1,BFRBA+4          GET MAX+1 RECORD NR.                 35711000
         LA    R1,0(,R1)           CLEAN IT UP.                         35711500
         BCTR  R1,0                COMPUTE MAX REC NR.                  35712000
         LTR   R1,R1               DON'T USE IT                         35712500
         BNP   HMOVPU20            UNLESS POSITIVE (IT, NOT YOU).       35713000
         AL    R1,SDBRECCT         ADD NR OF RECS READ FROM             35713500
         ST    R1,SDBRECCT         PREV BUFFER TO SDBRECCT.             35714000
HMOVPU20 DS    0H                                                       35714500
         MVC   BFRBA,SDBTRK        SET BFRBA FOR NEXT BUFFER.           35715000
         LA    R2,BFDAT            POINT TO UBF DATA AREA AND           35715500
         ST    R2,BFLOC            SET ADDRESS IN UBF.                  35716000
         LA    R2,BFIO             POINT TO START OF MOVE.              35716500
         LH    R3,$SVBFSIZ         GET LENGTH OF SINK AREA.          R4 35717000
         L     R4,SDBPBF           POINT TO PROTECTED BUFFER AND        35717500
         MVC   SDBMTTR,BFNXT-BFD(R4)  MOVE NEXT TRACK AND               35718000
         LA    R4,BFIO-BFD(,R4)    THENCE TO SOURCE DATA.               35718500
         LR    R5,R3               GET SOURCE LENGTH (SAME AS SINK).    35719000
         MVCL  R2,R4               MOVE SOURCE TO SINK.                 35719500
         NI    BFFL1,255-BF1EOB    SHOW NOT END-OF-BUFFER.           R4 35720000
         BR    R14                 RETURN TO CALLER.                    35720500
         DROP  R15                 DROP LOCAL ADDRESSABILITY.           35721000
         EJECT                                                          35721500
*                                                                       35722000
*                                                                       35722500
*              HCNVFDAD - CONVERT MTTR TO MBBCCHHR                      35723000
*                                                                       35723500
*                                  MTTR IS GOT FROM DDTMTTR             35724000
*                                  MBBCCHHR IS PUT IN DDTIFDAD          35724500
*                                                                       35725000
*                                                                       35725500
HCNVFDAD DS    0H                                                       35726000
         USING *,R15               ESTABLISH ADDRESSABILITY.            35726500
         MVI   SDBIFDAD+1,X'FF'    SET FALSE FDAD TO CAUSE              35727000
         CLC   SDBMTTR(1),$SVNUMDA  POST OF X'42' IF                 R4 35727500
         BNLR  R14                   INVALID EXTENT.                 R4 35728000
         L     R3,SDBMTTR          PREPARE TO SET MBBCCHHR IN IOB.      35728500
         LA    R0,0(,R3)           GET MTTR, ISOLATE TTR IN R0.         35729000
         XR    R3,R0               ISOLATE M IN R3.                     35729500
         ST    R3,SDBIFDAD         SET 'M000' IN THE IOB.               35730000
         STC   R0,SDBIFDAD+8       SET RECORD NR TOO FAR RIGHT.         35730500
         SRL   R3,24               SHIFT EXTENT NR FOR MULTIPLY.        35731000
         MH    R3,=AL2(TEDSIZ)     COMPUTE ADR OF EXTENT DATA           35731500
         AL    R3,$SVTED           APPLICABLE TO THIS EXTENT.        R4 35732000
         USING TEDDSECT,R3         USE DSECT TO ADDRESS IT.             35732500
         SRDL  R0,40               SHIFT 'TT' FOR DIVIDE.               35733500
         D     R0,TNTC             COMPUTE CYLINDER AND HEAD NUMBERS.   35734000
         STH   R1,SDBIFDAD+4       SET CYLINDER NUMBER TOO FAR RIGHT.   35734500
         STH   R0,SDBIFDAD+6       SET HEAD NUMBER TOO FAR RIGHT.       35735000
         MVC   SDBIFDAD+3(5),SDBIFDAD+4  SHIFT CCHHR LEFT ONE BYTE.     35735500
* ADD ONE TO INPUT/OUTPUT SERVICE MEASURE                               35736000
         L     R4,PSAAOLD-PSA      POINT TO CURRENT ASCB.               35736500
         USING ASCB,R4             SET ASCB ADDRESSABILITY.             35737000
         L     R0,ASCBIOSM         GET CURRENT IOSM - BYTES 0,1.        35737500
HCNVIOSM DS    0H                                                       35738000
         LR    R2,R0               MOVE IT TO UPDATE REGISTER.          35738500
         AL    R2,=FS16'1'         ADD 1 TO SERVICE MEASURE.            35739000
         CS    R0,R2,ASCBIOSM      STORE NEW MEASURE.                   35739500
         BNE   HCNVIOSM            REPEAT IF INTERFERENCE.              35740000
         DROP  R4                  DROP ASCB ADDRESSABILITY.            35740500
* SET UP SET-SECTOR COMMAND FOR ROTATIONAL POSITION SENSING             35741000
         MVI   SDBCCW1,3           ASSUME NOT RPS.                      35741500
         L     R1,TRPS             POINT TO EXTENT'S RPS TABLE.         35742000
         LTR   R1,R1               IS POINTER ZERO...                   35742500
         BZR   R14                 IF SO, RETURN.                       35743000
         SR    R3,R3               THIS IS AN RPS DEVICE.               35743500
         IC    R3,SDBMTTR+3        GET RECORD NUMBER AND                35744000
         IC    R3,0(R1,R3)         THEN SECTOR NUMBER.                  35744500
         STC   R3,SDBCCW1+5        PUT SECTOR NUMBER IN 1ST CCW         35745000
         MVI   SDBCCW1,X'23'       AND MAKE CCW A SET-SECTOR.           35745500
         BR    R14                 THEN RETURN.                         35746000
         SPACE 1                                                     R4 35746500
         LTORG                                                          35747000
         DROP  ,                                                        35747500
         TITLE 'GETMAIN/FREEMAIN SUBROUTINE'                            35748000
*                                                                       35748500
*                                                                       35749000
*              BRANCH-TYPE GETMAIN/FREEMAIN SUBROUTINE                  35749500
*                                                                       35750000
*                                                                       35750500
HGFMAIN  DS    0H                                                       35751000
         USING *,R15                                                    35751500
*                                                                       35752000
*              SET PROTECTION KEY TO ZERO                               35752500
*                                                                       35753000
         MODESET EXTKEY=ZERO,SAVEKEY=(2)  SAVE KEY, SET KEY ZERO.       35753500
         LA    R4,0(,R4)           SAVE FORMER KEY                      35754000
         SLL   R2,24               IN REGISTER 4,                       35754500
         OR    R4,R2               BITS 0-3.                            35755000
*                                                                       35755500
*              SAVE REGISTERS PREPARATORY TO SETLOCK                    35756000
*                                                                       35756500
         LR    R3,R11              SAVE REGISTER 11 IN REGISTER 3.      35757000
         LR    R7,R12              SAVE REGISTER 12 IN REGISTER 7.      35757500
         LR    R2,R13              SAVE REGISTER 13 IN REGISTER 2.      35758000
*                                                                       35758500
*              ACQUIRE LOCAL LOCK AND SAVE RETURN CODE                  35759000
*                                                                       35759500
HGF010   SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=HGF020           35760000
         SLL   R13,24              SAVE SETLOCK RETURN CODE             35760500
         OR    R4,R13              IN REGISTER 4 BITS 4-7.              35761000
*                                                                       35761500
*              RESTORE REGISTERS AFTER SETLOCK                          35762000
*                                                                       35762500
         LR    R11,R3              RESTORE REGISTER 11 FROM REG 3.      35763000
         LR    R12,R7              RESTORE REGISTER 12 FROM REGISTER 7. 35763500
         LR    R13,R2              RESTORE REGISTER 13 FROM REGISTER 2. 35764000
*                                                                       35764500
*              LOAD CRBRANCH, TCB, AND ASCB ADDRESSES                   35765000
*                                                                       35765500
         LR    R2,R4               SAVE CONTENTS OF R4 IN R2.           35766000
         TM    0(R2),X'50'         IS THIS BUFFER FREEMAIN...           35766500
         BNO   HGFB10              BRANCH IF NOT.                       35767000
* BUFFER FREEMAIN - TCB, ASCB ARE USED FROM BUFFER                      35767500
         USING BFD,R1              USE THE BUFFER DSECT.                35768000
         L     R4,BFTCB            R4 = TCB ADDRESS.                    35768500
         B     HGFB20              CONTINUE.                            35769500
* OTHER OPERATION - TCB, ASCB ARE USED FROM IEATCBP                     35770000
         USING PSA,R0              USE PREFIX SAVE AREA DSECT.          35770500
HGFB10   L     R4,PSATOLD          R4 = TCB ADDRESS.                    35771000
         USING TCB,R4              SET TCB ADDRESSABILITY.              35771500
         L     R4,TCBJSCB          POINT TO TCB'S JSCB.                 35772000
         USING IEZJSCB,R4          SET JSCB ADDRESSABILITY.             35772500
         L     R4,JSCBACT          POINT TO ACTIVE JSCB.                35773000
         L     R4,JSCBTCBP         POINT THENCE TO TCB.                 35773500
         LTR   R4,R4               IF NONZERO POINTER,                  35774000
         BNZ   *+8                 USE IT.                              35774500
         L     R4,PSATOLD          OTHERWISE USE CURRENT TCB.           35775000
         TM    0(R2),X'18'         IS TCB SUPPLIED FOR FREEMAIN...      35775500
         BNO   *+8                 SKIP IF NOT.                         35776000
         L     R4,0(,R1)           USE USER-SUPPLIED TCB.               35776500
         DROP  R4                  DROP JSCB BASE.                      35777000
HGFB20   L     R7,PSAAOLD          R7 = ASCB ADDRESS.                   35777500
* SINCE R15 IS OUR BASE, POINT TO CRBRANCH WITH R14.                    35778000
         L     R3,CVTPTR           POINT TO CVT                         35778500
         USING CVT,R3              AND USE DSECT.                       35779000
         L     R14,CVTCRMN         LOAD ADDRESS OF CRBRANCH.            35779500
*                                                                       35780000
*              SET UP ARGUMENTS - R0, R1, AND R3                        35780500
*                                                                       35781000
         DROP  R0,R1,R3            DROP ADDRESSABILITIES.               35781500
         L     R3,0(,R2)           R3 = KEY, SUBPOOL, TYPE.             35782000
         LTR   R3,R3               SET CC=1 IF R0 ALREADY SET.          35782500
         LA    R3,0(,R3)           ZERO OUR FLAG BYTE IN R3.            35783000
         BM    *+8                 SKIP IF R0 IS ALREADY SET.           35783500
         L     R0,4(,R2)           R0 = LENGTH.                         35784000
* R1 IS ALWAYS SET IN MACRO-EXPANSION.                                  35784500
         CLI   1(R2),X'F0'         ARE WE TO USE TCBPKF AS KEY...       35785000
         BNE   *+12                SKIP IF NOT.                         35785500
         L     R15,PSATOLD-PSA     ELSE POINT TO CURRENT TCB,           35786000
         USING TCB,R15             USE TCB DSECT,                       35786500
         ICM   R3,4,TCBPKF         AND PICK UP CURRENT KEY.             35787000
         DROP  R15                 DROP TCB ADDRESSABILITY.             35787500
*                                                                       35788000
*              CALL CRBRANCH                                            35788500
*                                                                       35789000
         LR    R15,R14             R15 POINTS TO CRBRANCH.              35789500
         BALR  R14,R15             CALL VIRT STORAGE SUPERVISOR.        35790000
         USING *,R3                USE R3 AS LOCAL BASE.                35790500
         LR    R3,R14              SET R3 FROM R14 FOR BASE.            35791000
*                                                                       35791500
*              IF BUFFER GETMAIN, INITIALIZE THE                        35792000
*              FOLLOWING FIELDS ---                                     35792500
*                  BFID   TO C'XBF '                                    35793000
*                  BFLENG TO CONTENTS OF R0                             35793500
*                  BFTCB  TO CONTENTS OF R4                             35794000
*                  BFASCB TO CONTENTS OF R7                             35794500
*                  ALL OTHER FIELDS TO X'00'                            35795000
*                                                                       35795500
         LTR   R15,R15             WAS CRBRANCH SUCCESSFUL...           35796000
         BNZ   HGFB30              BRANCH IF NOT.                       35796500
         TM    0(R2),X'20'         WAS THIS A GETMAIN...                35797000
         BZ    HGFB30              BRANCH IF NOT.                       35797500
         ST    R4,0(,R1)           RETURN TCB ADDRESS TO CALLER.        35798000
         STH   R0,4(,R1)           RETURN AREA LENGTH TO CALLER.     R4 35798300
         TM    0(R2),X'40'         WAS GETMAIN FOR BUFFER...            35798500
         BZ    HGFB30              BRANCH IF NOT.                       35799000
         USING BFD,R1              USE THE BUFFER DSECT.                35799500
         XC    0(BFIO-BFD,R1),0(R1)  CLEAR BUFFER UP TO BFIO.           35800000
         MVC   BFID,=CL4'XBF'      SET BUFFER IDENTIFIER.               35800500
         STH   R0,BFLENG           SET BUFFER LENGTH.                   35801000
         ST    R4,BFTCB            SET TCB ADDRESS IN BUFFER.           35801500
HGFB30   DS    0H                  CONTINUE.                            35802500
*                                                                       35803000
*              TEST LOCAL LOCK CONDITION UPON ENTRY                     35803500
*                                                                       35804000
         L     R0,=X'0F000000'     DID SETLOCK AT HGF010                35804500
         NR    R0,R2               RETURN NONZERO CODE...               35805000
         BNZ   HGF030              IF SO, DON'T RELEASE LOCAL LOCK.     35805500
*                                                                       35806000
*              SAVE REGISTERS PREPARATORY TO SETLOCK                    35806500
*                                                                       35807000
         LR    R0,R11              SAVE REGISTER 11 IN REGISTER 0.      35807500
         LR    R4,R12              SAVE REGISTER 12 IN REGISTER 4.      35808000
         LR    R7,R13              SAVE REGISTER 13 IN REGISTER 7.      35808500
         LR    R3,R15              SAVE REGISTER 15 IN REGISTER 3.      35809000
*                                                                       35809500
*              RELEASE LOCAL LOCK                                       35810000
*                                                                       35810500
HGF020   SETLOCK RELEASE,TYPE=LOCAL,RELATED=HGF010                      35811000
*                                                                       35811500
*              RESTORE REGISTERS AFTER SETLOCK                          35812000
*                                                                       35812500
         LR    R11,R0              RESTORE REGISTER 11 FROM REGISTER 0. 35813000
         LR    R12,R4              RESTORE REGISTER 12 FROM REGISTER 4. 35813500
         LR    R13,R7              RESTORE REGISTER 13 FROM REGISTER 7. 35814000
         LR    R15,R3              RESTORE REGISTER 15 FROM REG 3.      35814500
*                                                                       35815000
*              RESTORE ORIGINAL PROTECT KEY                             35815500
*                                                                       35816000
HGF030   DS    0H                                                       35816500
         BALR  R3,0                RE-ESTABLISH                      R4 35816600
         USING *,R3                 LOCAL BASE                       R4 35816700
         LR    R4,R2               RESTORE CALLER'S LINK REGISTER.      35817000
         SRL   R2,24               SET KEY IN R2 BITS 24-27.            35817500
         MODESET KEYADDR=(2)       RESTORE ORIGINAL PROTECT KEY.        35818000
*                                                                       35818500
*              RETURN TO CALLER WITH CODE IN REGISTER 15                35819000
*                                                                       35819500
         TM    0(R4),X'80'         SET CC=3 IF LENGTH IN R0.            35820000
         LA    R4,4(,R4)           BUMP RETURN PAST R3 PARAMETER.       35820500
         BO    *+8                 SKIP IF NO ASSEMBLED LENGTH.         35821000
         LA    R4,4(,R4)           BUMP RETURN PAST R0 PARAMETER.       35821500
         LTR   R15,R15             SET CONDITION CODE                   35822000
         BR    R4                  AND RETURN TO CALLER.                35822500
         DROP  R1,R3               DROP DSECT, BASE.                    35823000
         SPACE 3                                                        35823500
         LTORG                                                          35824000
         TITLE 'HASP DIRECT ACCESS SPACE ALLOCATION ROUTINE'            35824500
         SPACE 2                                                        35825000
*********************************************************************** 35825500
*                                                                     * 35825600
*                                                                     * 35825700
* $STRAK - SSSM VERSION OF SPOOL SPACE ALLOCATION                     * 35825800
*                                                                     * 35825900
*                                                                     * 35826000
* FUNCTION ---                                                        * 35826100
*                                                                     * 35826200
*                                                                     * 35826300
*  (1)  IF CALL IS FOR INITIAL ALLOCATION, A TRACK GROUP (TG)         * 35826400
*       IS OBTAINED FROM THE TRACK GROUP BLOCK (TGB) MAINTAINED       * 35826500
*       BY THE JES-II CHECKPOINT PROCESSOR.                           * 35826600
*                                                                     * 35826700
*  (2)  IF CALL IS NOT FOR INITIAL ALLOCATION, AN ATTEMPT             * 35826800
*       IS MADE TO SUPPLY AN MTTR BASED ON THE TRACK CELL (TAB)       * 35826900
*       REFERENCED BY R1.  IF SUCCESSFUL, THE MTTR IS RETURNED        * 35827000
*       IN R1.  IF NOT, WE TRY TO OBTAIN A NEW TRACK CELL FROM        * 35827100
*       THE CURRENT TRACK GROUP.  IF THIS IS SUCCESSFUL, AN           * 35827200
*       MTTR IS RETURNED IN R1.  IF NOT, A SEARCH FOR A NEW TG        * 35827300
*       IS PERFORMED USING THE TGB.                                   * 35827400
*                                                                     * 35827600
*  (3)  IF THE TGB IS EMPTY, THE CALLER IS HELD IN ABEYANCE BY        * 35827700
*       ENQ/WAIT LOGIC. THE JES-II CHECKPOINT PROCESSOR IS            * 35827800
*       $$POSTED TO CAUSE A REFILLING OF THE TGB.                     * 35827900
*                                                                     * 35828000
*                                                                     * 35828100
* INPUT ---                                                           * 35828200
*                                                                     * 35828300
*  (1)  R1 CONTAINS THE ADDRESS OF A TRACK ALLOCATION BLOCK (TAB)     * 35828400
*                                                                     * 35828500
*  (2)  THE THIRD WORD OF THE TAB IS USED TO GET THE ADDRESS OF       * 35828600
*       THE ALLOCATION IOT, WHICH IN TURN ALLOWS US TO GET THE        * 35828700
*       ADDRESS OF THE TRACK GROUP MAP.  THE                          * 35828800
*       FIRST WORD CONTAINS AN MTTR OF THE LAST ALLOCATED             * 35828900
*       BUFFER FROM THE TRACK CELL ASSIGNED TO THE TAB.  THE          * 35829000
*       SECOND WORD CONTAINS A FLAG BYTE TO TELL WHAT KIND OF         * 35829100
*       TAB THIS IS,  THE SUB-PERMUTATION NUMBER ASSOCIATED WITH      * 35829200
*       THE CURRENT TRACK CELL, THE MAXIMUM NBR OF RECORDS THAT       * 35829300
*       WILL FIT ON A TRACK IN THE CURRENT TRACK CELL, AND THE        * 35829400
*       NBR OF BUFFERS LEFT IN THE TRACK CELL.  IF THE BUFFER         * 35829500
*       COUNT IS 0, AND THE LAST ALLOCATED BUFFER IS 0, THE CALL      * 35829600
*       IS FOR THE INITIAL ALLOCATION OF A BUFFER.                    * 35829700
*                                                                     * 35829800
*                                                                     * 35829900
* OUTPUT ---                                                          * 35830000
*                                                                     * 35830100
*  (1)  R1 CONTAINS AN UPDATED MTTR. THIS IS THE SAME VALUE AS        * 35830200
*        IS SET IN THE FIRST WORD OF THE INPUT TAB.                   * 35830300
*                                                                     * 35830400
*                                                                     * 35830500
*********************************************************************** 35830600
         EJECT                                                          35843000
*                                                                       35843500
*********************************************************************** 35844000
*                                                                     * 35844500
*        $STRAK --- GET A NEW MTTR FOR CALLER.                        * 35845000
*                                                                     * 35845500
*********************************************************************** 35846000
*                                                                     * 35846500
         USING TGMDSECT,R4         TGM ADDRESSABILITY                R4 35846600
         USING TABDSECT,R10        TAB ADDRESSABILITY                R4 35846700
         USING SSVT,R11            PROVIDE SSVT ADDRESSABILITY       R4 35846800
         USING $STRAKWA,R13        SAVE AREA ADDRESSABILITY          R4 35846900
         SPACE 1                                                     R4 35847000
$STRAK   DS    0H                                                       35847100
         SAVE  (14,12)             SAVE REGISTERS.                      35847500
         BALR  R12,0               ESTABLISH                            35848000
         USING *,R12               ADDRESSABILITY.                      35848500
         LR    R10,R1              SETUP TABDSECT                    R4 35848600
         SLR   R14,R14             SETUP FOR MINOR TAB USE           R4 35848700
         TM    TABFLAG,TABMAJOR    TEST FOR MAJOR TAB                R4 35848800
         BZ    T1MINOR             BR IF MINOR -- GO USE MASTER      R4 35848900
         TM    TABFLAG,TABMASTR    IS THIS A MASTER TAB              R4 35849000
         BO    T1MASTR             YES - GET ADDR OF TGM             R4 35849100
         L     R4,TABAIOT          A(ALLOCATION IOT) FROM MAJOR TAB  R4 35849200
         LA    R4,IOTTGMAP-IOTDSECT(,R4)     A(TGM) FOR TGMDSECT     R4 35849300
         B     T1RETRY             GET READY FOR PROCESSING          R4 35849400
T1MINOR  NULL                                                        R4 35849500
         LR    R14,R10             SAVE A(MINOR TAB) FOR UPDATTING   R4 35849600
         L     R10,TABAIOT         A(ALLOCATION IOT)                 R4 35849700
         LA    R10,IOTMSTAB-IOTDSECT(,R10)   A(MASTER TAB)           R4 35849800
T1MASTR  NULL                                                        R4 35849900
         LR    R4,R10              A(MASTER TAB)                     R4 35850000
         LA    R4,IOTTGMAP-IOTMSTAB(,R4)     A(TGM) FOR TGMDSECT     R4 35850100
         EJECT                                                       R4 35850200
T1RETRY  DS    0H                                                       35850300
         LM    R0,R1,TABMTTR       GET OLD VALUES                    R4 35850400
T1AGAIN  DS    0H                                                       35853000
         LR    R2,R0               GET TABMTTR THAT WE WILL WORK ON  R4 35853100
         LR    R3,R1               GET TABSPN ETC. ETC.              R4 35853200
         ST    R3,$SKFLD15         SETUP WORK AREA WITH TABFLAG+     R4 35853300
*                                  TABSPN+TABMAXR+TABUFCNT           R4 35853400
         ICM   R6,1,$SBUFCNT       GET TABUFCNT AND SET CC           R4 35853500
         BZ    T1CELL              NO BUFFERS - NEED A NEW TRAKCELL  R4 35853600
         BCTR  R6,0                SUBTRACT 1 FOR BUFFER WE'LL USE   R4 35853700
         STC   R6,$SBUFCNT         MOVE BACK NEW TABUFCNT            R4 35853800
*                                                                       35855000
*              RECORDS ON A TRACK ARE ASSIGNED IN                       35855500
*              A PERMUTED ORDER ---                                     35856000
*                  1,                                                   35856500
*                  1+&RECINCR,                                          35857000
*                  1+&RECINCR*2,                                        35857500
*                  ....,                                                35858000
*                  2,                                                   35858500
*                  2+&RECINCR,                                          35859000
*                  2+&RECINCR*2,                                        35859500
*                  ....,                                                35860000
*                  AND SO ON.                                           35860500
*              ATTEMPT TO ASSIGN THE NEXT RECORD OF A                   35861000
*              SUB-PERMUTATION BY ADDING &RECINCR TO THE                35861500
*              CURRENT RECORD NUMBER.                                   35862000
*                                                                       35862500
         SLR   R15,R15             CLEAR WORK REG                    R4 35862600
         IC    R15,$SVRINCR        PICK UP &RECINCR                  R4 35862700
         ALR   R2,R15              ADD TO R OF TABMTTR               R4 35862800
         CLM   R2,1,$SBMAXR        COMPARE R OF TABMTTR TO TABMAXR   R4 35862900
         BNH   T1SKIP              NEW MTTR IS OK                    R4 35863000
*                                  WE'VE RUN OFF THE END OF THE TRACKR4 35863100
         IC    R2,$SBSPN           PICK UP TABSPN                    R4 35863200
         AL    R2,=F'1'            ADD 1 TO IT                       R4 35863300
         STC   R2,$SBSPN           MOVE BACK NEW TABSPN              R4 35863400
T1SKIP   NULL                                                        R4 35863500
         L     R3,$SKFLD15         GET UPDATTED TABUFCNT+TABSPN      R4 35863600
         CDS   R0,R2,TABMTTR       SEE IF TAB CHANGED UNDER US       R4 35863700
         BNE   T1AGAIN             YES - TRY AGAIN                   R4 35863800
         LTR   R14,R14             DID WE HAVE A MINOR TAB           R4 35863900
         BZ    T1EXIT              NO - RETURN                       R4 35864000
         ST    R2,0(,R14)          NEW VALUE OF TABMTTR              R4 35864100
         STCM  R3,7,5(R14)         NEW VALUE OF TABUFCNT, ETC.       R4 35864200
T1EXIT   NULL                                                        R4 35864300
         ST    R2,$SKFLD1          PUT TABMTTR IN R1 IN SAVE AREA    R4 35864400
         LM    R14,R12,12(R13)     RESTORE REGS                      R4 35864500
         SR    R15,R15             SET R15 = 0, CC = 0               R4 35864600
         BR    R14                 RETURN TO CALLER                  R4 35864700
         EJECT                                                       R4 35864800
T1CELL   NULL                                                        R4 35864900
         LM    R6,R7,TGMCYMXM      GET OLD VALUES                    R4 35865000
         LR    R8,R6               GET TGMCYMXM TO WORK ON           R4 35865100
         LTR   R9,R7               GET TGMCELL TO WORK ON            R4 35865200
         BZ    TBLOB               NO TRAKCELL - 1ST TIME THRU       R4 35865300
         ST    R8,$SKFLD15         PUT TGMCYMXM IN WORK AREA         R4 35865400
         CLM   R9,1,$SMMAXR        R OF TGMCELL GT MAX R OF TG       R4 35865500
         BH    T1TRACK             YES - NO MORE TRAKCELLS ON TRACK  R4 35865600
         SLR   R5,R5               SETUP R5 AS CTR FOR TABUFCNT      R4 35865700
         SLR   R15,R15             USE TO HOLD &RECINCR              R4 35865800
         IC    R15,$SVRINCR        GET &RECINCR                      R4 35865900
T1LOOP   NULL                                                        R4 35866000
         ALR   R9,R15              ADD &RECINCR TO TGMCELL TO GET    R4 35866100
*                                  MTTR OF NEXT BUFFER               R4 35866200
         LA    R5,1(,R5)           INCREASE BUFFER COUNT             R4 35866300
T1CHECK  NULL                                                        R4 35866400
         CLM   R9,1,$SMMAXR        R GONE PAST MAX R FOR THE TG      R4 35866500
         BNH   T1LOOPND            NO - SEE IF WE HAVE &TCELSIZ      R4 35866600
         CLM   R8,8,$SVRINCR       IS TGMSPN STILL VALID             R4 35866700
         BNL   T1CSTUNT            NO - IS TRAKCELL TOO SMALL        R4 35866800
         A     R8,=FS24'1'         ADD 1 TO TGMSPN                   R4 35866900
         ST    R8,$SKFLD15         PUT IN WORK AREA                  R4 35867000
         IC    R9,$SMSPN           REPLACE R IN TGMCELL BY TGMSPN    R4 35867100
         B     T1CHECK             MAKE SURE R STILL VALID           R4 35867200
T1LOOPND NULL                                                        R4 35867300
         CLM   R5,1,$SVTKCEL       DO WE HAVE A FULL TRAKCELL        R4 35867400
         BL    T1LOOP              NO - COUNT ANOTHER BUFFER         R4 35867500
T1CEND   NULL                                                        R4 35867600
         ST    R14,$SKFLD15        SAVE R14 BECAUSE OF NEXT BAL      R4 35867700
         ST    R8,$SKFLD1          SAVE R8 BECAUSE OF NEXT BAL       R4 35867800
         BAL   R8,TGETLCL          GET LOCAL LOCK                    R4 35867900
         CL    R2,TABMTTR          HAS TAB CHANGED                   R4 35868000
         BNE   T1CABORT            YES - TRY AGAIN                   R4 35868100
         CL    R6,TGMCYMXM         HAS TGM CHANGED                   R4 35868200
         BNE   T1CABORT            YES - TRY AGAIN                   R4 35868300
         CL    R7,TGMCELL          HAS TGM CHANGED                   R4 35868400
         BE    T1CFINSH            NO - FINISH UP ALLOCATION         R4 35868500
T1CABORT NULL                                                        R4 35868600
         BAL   R8,TFREELCL         FREE LOCAL LOCK                   R4 35868700
         L     R14,$SKFLD15        RESTORE R14                       R4 35868800
         B     T1RETRY             TRY IT AGAIN                      R4 35868900
T1CFINSH NULL                                                        R4 35869000
         MVC   TABMTTR,TGMCELL     MTTR OF 1ST BUFFER IN NEW TRKCEL  R4 35869100
         BCTR  R5,0                1ST BUF ALREADY ALLOCATED         R4 35869200
         STC   R5,TABUFCNT         MOVE BUFCNT INTO TABUFCNT         R4 35869300
         MVC   TABSPN,TGMCYMXM     MOVE IN NEW SUB-PERM NBR          R4 35869400
         MVC   TABMAXR,TGMCYMXM+3  MOVE IN MAX R                     R4 35869500
         MVC   TGMCYMXM(1),$SKFLD1  MOVE IN NEW SUB-PERM NBR         R4 35869600
         ST    R9,TGMCELL          MOVE IN NEW TRAKCELL ADDR         R4 35869700
         ICM   R14,15,$SKFLD15     IS THERE A MINOR TAB              R4 35869800
         BZ    SKIP430             NO - SKIP COPY                    R4 35869900
         MVC   0(4,R14),TABMTTR    COPY OVER DATA                    R4 35870000
         MVC   5(3,R14),TABSPN     COPY OVER DATA                    R4 35870100
SKIP430  L     R2,TABMTTR          GET MTTR OF ALLOCATED BUFFER      R4 35870200
         BAL   R8,TFREELCL         FREE LOCAL LOCK                   R4 35870300
         B     T1EXIT              PREPARE TO RETURN                 R4 35870400
T1CSTUNT NULL                                                        R4 35870500
         TM    TABFLAG,TABMASTR    IS THIS A MASTER TAB              R4 35870600
         BO    T1CEND              YES - STUNTED TRAKCELL OK         R4 35870700
*                                  NOTE THAT TAKING THIS BRANCH MAKESR4 35870800
*                                  R IN TGMCELL INVALID              R4 35870900
         LR    R15,R9              R15 = MTTR OF TGMCELL             R4 35871000
         SRL   R15,24              R15 = 000M                        R4 35871100
         MH    R15,=AL2(TEDSIZ)    R15 = M * TED SIZE                R4 35871200
         AL    R15,$SVTFRST        R15 = ADDR OF TED ELEMENT         R4 35871300
         CLM   R5,1,TTCM+1-TEDDSECT(R15) COMP BUFCNT & MIN CELL SIZE R4 35871400
         BNL   T1CEND              STUNTED TRAKCELL BIG ENOUGH       R4 35871500
*                                  NOTE THAT TAKING THE BRANCH MAKES R4 35871600
*                                  R IN TGMCELL INVALID              R4 35871700
         CDS   R6,R8,TGMCYMXM      SEE IF TGM CHANGED UNDER US       R4 35871800
         BNE   T1RETRY             YES - TRY AGAIN                   R4 35871900
*                                  NOTE THAT NOW THE STUNTED         R4 35872000
*                                  TRAKCELL CANNOT BE ALLOCATED      R4 35872100
         LR    R6,R8               RESET WITH                        R4 35872200
         LR    R7,R9                NEW VALUES                       R4 35872300
T1TRACK  NULL                                                        R4 35872400
         CLM   R9,6,$SMTT          TT OF TGMCELL WITH TT OF TGMC        35872500
         BNL   TBLOB               NO MORE TRACKS IN TRACK GROUP     R4 35872600
         AL    R9,=FS8'1'          ADD 1 TO TT OF TGMCELL            R4 35872700
         IC    R9,=X'01'           MAKE R OF TGMCELL 1               R4 35872800
         ICM   R8,8,=X'01'         SET SUP-PERM BACK TO 1            R4 35872900
         CDS   R6,R8,TGMCYMXM      TGM CHANGED UNDER US              R4 35873000
         BNE   T1RETRY             YES - TRY AGAIN                   R4 35873100
         B     T1CELL              NO - ALLOCATE A NEW TRAKCELL      R4 35873200
         EJECT                                                       R4 35873300
*********************************************************************** 35885500
*                                                                     * 35886500
*              GET LOCAL LOCK TO PREVENT SIMULT ALLOC                 * 35887500
*                                                                     * 35888500
*********************************************************************** 35889500
         SPACE 1                                                        35890500
TBLOB    NULL                                                        R4 35890600
         LR    R2,R0               SAVE ORIGINAL TABMTTR             R4 35890700
         ST    R14,$SKFLD1         SAVE BECAUSE OF NEXT BAL          R4 35890800
         BAL   R8,TGETLCL          GET LOCAL LOCK                    R4 35890900
         CL    R2,TABMTTR          HAS TAB CHANGED                   R4 35891000
         BNE   TBLOBOUT            YES - TRY AGAIN                   R4 35891100
         CL    R6,TGMCYMXM         HAS TGM CHANGED                   R4 35891200
         BNE   TBLOBOUT            YES - TRY AGAIN                   R4 35891300
         CL    R7,TGMCELL          HAS TGM CHANGED                   R4 35891400
         BE    TBLOBA              NO - GET A NEW TG                 R4 35891500
TBLOBOUT NULL                                                        R4 35891600
         BAL   R8,TFREELCL         FREE LOCAL LOCK                   R4 35891700
         L     R14,$SKFLD1         RESTORE R14                       R4 35891800
         B     T1RETRY             TRY IT AGAIN                      R4 35891900
         SPACE 1                                                        35897500
*********************************************************************** 35898500
*                                                                     * 35899500
*              ALLOCATE MTTR FROM TGB                                 * 35900500
*                                                                     * 35901500
*********************************************************************** 35902500
         SPACE 1                                                        35903500
TBLOBA   SLR   R2,R2               R2 = 0 (FOR CDS)                     35905500
         SLR   R3,R3               R3 = 0 (FOR CDS)                     35906500
         SL    R4,=A(IOTTGMAP-IOTDSECT)       FLAG                   R4 35906800
         OI    IOTFLAG1-IOTDSECT(R4),IOT1CKPT  IOT                   R4 35907000
         LA    R4,IOTTGMAP-IOTDSECT(,R4)        FOR CKPT             R4 35907300
TBLOBB   LM    R5,R7,$SVTTGBA      R5=1ST, R4=SIZE,R6=LAST TGB          35907500
         USING TGBDSECT,R5         TGB ADDRESSABILITY                   35908500
TBLOBC   LM    R0,R1,TGBENTRY      FETCH TGB ENTRY                      35909500
         LTR   R1,R1               TEST FOR AVAILABLE TGB ENTRY         35910500
         BZ    TBLOBD              BRANCH IF NOT AVAILABLE              35911500
         CDS   R0,R2,TGBENTRY      TRY TO ALLOCATE ENTRY                35912500
         BNE   TBLOBB              BRANCH IF TGB REPLENISHED            35913500
         DROP  R5                  FORGET TGB                           35914500
         SPACE 1                                                        35915500
*********************************************************************** 35916500
*                                                                     * 35917500
*              TGB ALLOCATED. ESTABLISH TED ADDR                      * 35918500
*                                                                     * 35919500
*********************************************************************** 35920500
         SPACE 1                                                        35921500
         LR    R2,R1               R2 = MTTR                            35922500
         SRL   R2,24               R2 = 000M                            35923500
         MH    R2,=AL2(TEDSIZ)     R2 = M * TED SIZE                    35924500
         AL    R2,$SVTFRST         R2 = ADDRESS OF TED                  35925500
         USING TEDDSECT,R2         TED ADDRESSABILITY                   35926500
         EJECT                                                          35927500
*********************************************************************** 35928500
*                                                                     * 35929500
*              SHOW TRACK GROUP ALLOCATION IN USERS MAP               * 35930500
*                                                                     * 35931500
*********************************************************************** 35932500
         SPACE 1                                                        35933500
         LR    R3,R0               R3 = OFFSET & BIT MASK               35934500
         SRL   R3,16               R3 = OFFSET TO ALLOCATION BYTE       35935500
         IC    R8,TGMAP(R3)        R8 = MAP BYTE                        35936500
         OR    R8,R0               SHOW ALLOCATION                      35937500
         STC   R8,TGMAP(R3)         FOR THIS TRACK GROUP                35938500
         SPACE 1                                                        35939500
*********************************************************************** 35940500
*                                                                     * 35941500
*              DEVELOP NEW PTTR FROM MTTR & TED                       * 35942500
*                                                                     * 35943500
*********************************************************************** 35944500
         SPACE 1                                                        35945500
         LR    R0,R1               R0 = NEW MTTR                        35946500
         SRL   R0,8                R0 = 0MTT                            35947500
         AH    R0,TNTG             R0 = MAX TT + 1                      35948500
         BCTR  R0,0                R0 = MAX TT                          35949500
         SLL   R0,8                R0 = MAX TT0                         35950500
         AH    R0,TNRT             R0 = MAX TTR                         35951500
         ICM   R0,8,=X'01'         R0 = PTTR                            35952500
         DROP  R2                  FORGET THE TED                       35953500
         SPACE 1                                                        35954500
*********************************************************************** 35955500
*                                                                     * 35956500
*              STORE NEW PTTR (MAX) & MTTR IN TGM                     * 35957500
*                                                                     * 35958500
*********************************************************************** 35959500
         SPACE 1                                                        35960500
         LM    R6,R7,TGMCYMXM      GET CURRENT VALUES                R4 35960600
         CDS   R6,R0,TGMCYMXM      MOVE IN NEW VALUES                R4 35960700
         LM    R0,R1,TABMTTR       GET CURRENT VALUES                R4 35960800
         LM    R2,R3,TABMTTR       GET CURRENT VALUES                R4 35960900
         BAL   R8,TFREELCL         FREE LOCAL LOCK                   R4 35961000
         L     R14,$SKFLD1         RESTORE R14                       R4 35961100
         B     T1CELL              ALLOCATE A NEW TRAKCELL           R4 35961200
         SPACE 1                                                        35966500
*********************************************************************** 35967500
*                                                                     * 35968500
*              PLOW THRU TGB. IF NO ENTRY, WAIT FOR JES-2             * 35969500
*                                                                     * 35970500
*********************************************************************** 35971500
         SPACE 1                                                        35972500
TBLOBD   BXLE  R5,R6,TBLOBC        SEARCH TGB                           35973500
         BAL   R8,TFREELCL         RELEASE LOCAL LOCK                   35974500
         L     R3,$SKFLD1          LOAD SAVED R14 INTO R3           R41 35974600
         MVC   $SKFLD15(12),TENQLIST    SET LIST FORM ENQ            R4 35974700
         ENQ   ($SVQNAM),MF=(E,$SKFLD15)                             R4 35974800
         $$POST TYPE=CKPW          TELL JES-2                           35977500
         NI    $SVTGECB,X'7F'      RESET WAIT BIT                       35978500
         MVC   $SVTGASC+1(3),PSAAOLD+1-PSA SET ASCB                     35979500
         WAIT  1,ECB=$SVTGECB      WAIT FOR CKPT PROCESS                35980500
         MVI   $SVTGECB,0          CLEAR ECB                            35981500
         MVC   $SKFLD15(12),TDEQLIST    SET LIST FORM DEQ            R4 35981600
         DEQ   ($SVQNAM),MF=(E,$SKFLD15)                             R4 35981700
         BAL   R8,TGETLCL          GET LOCAL LOCK                       35984500
         LR    R14,R3              RESTORE R14                      R41 35984600
         ST    R14,$SKFLD1         SAVE AGAIN IN $SKFLD1            R41 35984700
         B     TBLOBA              GO ALLOCATE FROM TGB                 35985500
         SPACE 1                                                        35986500
TENQLIST ENQ   (,T2MINOR,E,L'T2MINOR,SYSTEM),RET=HAVE,MF=L              35987500
TDEQLIST DEQ   (,T2MINOR,L'T2MINOR,SYSTEM),MF=L                         35988500
T2MINOR  DC    C'AWAITING SPOOL SPACE'                                  35989500
         SPACE 2                                                     R4 35989600
         DROP  R4,R10,R13          DROP TGMDSECT, TABDSECT, $STRAKWA R4 35989700
         SPACE 1                                                     R4 35989800
$STRAKWA DSECT                     USE OS SAVE AREA AS A WORK AREA   R4 35989900
         DS    CL16                FIRST 4 WORDS                     R4 35990000
$SKFLD15 DS    CL4                 R15 SAVE AREA                     R4 35990100
         ORG   $SKFLD15            REDEFINE                          R4 35990200
$SBFLAG  DS    CL1                 TABFLAG                           R4 35990300
$SBSPN   DS    CL1                 TABSPN                            R4 35990400
$SBMAXR  DS    CL1                 TABMAXR                           R4 35990500
$SBUFCNT DS    CL1                 TABUFCNT                          R4 35990600
         ORG   $SKFLD15            REDEFINE                          R4 35990700
$SMSPN   DS    CL1                 TGMCYMXM                          R4 35990800
$SMTT    DS    CL2                   .  .                            R4 35990900
$SMMAXR  DS    CL1                   .  .                            R4 35991000
$SKFLD0  DS    CL4                 R0 SAVE AREA                      R4 35991100
$SKFLD1  DS    CL4                 R1 SAVE AREA                      R4 35991200
HASPSSSM CSECT                                                       R4 35991300
         TITLE 'SETLOCK SUBROUTINES'                                    36176000
*                                                                       36176500
*              SUBROUTINE TO GET LOCAL LOCK                             36177000
*                                                                       36177500
TGETLCL  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,               C36178000
               RELATED=($SVTGMAP,HASPSSSM(TFREELCL))                    36178500
         BR    R8                  RETURN.                              36179000
*                                                                       36179500
*              SUBROUTINE TO GET CMS LOCK                               36180000
*                                                                       36180500
TGETCMS  SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,REGS=USE,                 C36181000
               RELATED=($SVTGMAP,HASPSSSM(TFREECMS))                    36181500
         BR    R8                  RETURN.                              36182000
*                                                                       36182500
*              SUBROUTINE TO FREE CMS LOCK                              36183000
*                                                                       36183500
TFREECMS SETLOCK RELEASE,TYPE=CMS,REGS=USE,                            C36184000
               RELATED=($SVTGMAP,HASPSSSM(TGETCMS))                     36184500
         BR    R8                  RETURN.                              36185000
*                                                                       36185500
*              SUBROUTINE TO FREE LOCAL LOCK                            36186000
*                                                                       36186500
TFREELCL SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          C36187000
               RELATED=($SVTGMAP,HASPSSSM(TGETLCL))                     36187500
         BR    R8                  RETURN.                              36188000
         DROP  ,                   DROP ALL ADDRESSABILITY.             36188500
         LTORG                     LITERAL POOL                         36189000
         DS    0D                  DOUBLEWORD BOUNDARY FOR PATCH.       36189500
SSMPATCH DC    CL256'PATCH SPACE',CL256' '  PATCH AREA.                 36190000
$DLENGTH $DLENGTH                  COMPUTE CONTROL SECTION LENGTH       36190500
APARNUM  DC    CL5'33128'          APAR NUMBER                          36190998
         END                                                            36191000
