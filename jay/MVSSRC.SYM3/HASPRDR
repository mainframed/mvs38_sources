RDR      TITLE 'HASP INPUT SERVICE PROLOG'                     @OZ18212 90002000
*********************************************************************** 90004000
*                                                                     * 90006000
* MODULE NAME = HASJES20 ( HASPRDR CSECT )                            * 90008000
*                                                                     * 90010000
* DESCRIPTIVE NAME = HASPRDR CSECT OF JES2 MAIN MODULE                * 90012000
*                                                                     * 90014000
* COPYRIGHT = NONE                                                    * 90016100
*                                                                     * 90018000
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       * 90020000
*                                                                     * 90022000
* FUNCTION = THE HASPRDR CSECT PROVIDES INPUT SERVICE TO THE JES2     * 90024000
*            SUBSYSTEM.  THE FUNCTIONS OF THIS MODULE ARE AS          * 90026000
*            FOLLOWS --                                               * 90028000
*                                                                     * 90030000
*              1.  TO READ CARD IMAGES FROM AN INPUT DEVICE.          * 90032000
*                                                                     * 90034000
*              2.  TO DETECT AND SCAN JOB CARDS, EXTRACTING PARAM-    * 90036000
*                  ETERS FOR JOB ACCOUNTING, JOB CONTROL, AND PRINT   * 90038000
*                  AND PUNCH IDENTIFICATION.                          * 90040000
*                                                                     * 90042000
*              3.  TO DETECT AND PROCESS OTHER CONTROL CARDS, SUCH AS * 90044000
*                  THE COMMAND, PRIORITY, ROUTE, SETUP, MESSAGE,      * 90046000
*                  JOBPARM, OUTPUT, DD *, AND DD DATA CARDS.          * 90048000
*                                                                     * 90050000
*              4.  TO ASSIGN A UNIQUE JOB IDENTIFIER (JOBID) TO EACH  * 90052000
*                  JOB.                                               * 90054000
*                                                                     * 90056000
*              5.  TO LOG JOBS INTO THE JES2 SYSTEM.                  * 90058000
*                                                                     * 90060000
*              6.  TO ASSIGN JOB PRIORITY BASED UPON PRIORITY CARD,   * 90062000
*                  JOB CARD, OR JOBPARM CARD PARAMETERS.              * 90064000
*                                                                     * 90066000
*              7.  TO GENERATE, FROM CARDS READ, A JCL FILE AND INPUT * 90068000
*                  DATA FILES, AND TO RECORD THESE FILES ON DIRECT-   * 90070000
*                  ACCESS STORAGE DEVICE(S) FOR LATER USE BY THE JOB  * 90072000
*                  EXECUTION STAGES (SPOOLING FUNCTION).              * 90074000
*                                                                     * 90076000
*              8.  TO GENERATE JES2 JOB CONTROL TABLES, INPUT/OUTPUT  * 90078000
*                  TABLES, JOB QUEUE ENTRIES, AND OTHER JES2 CONTROL  * 90080000
*                  BLOCKS REQUIRED FOR LATER JOB PROCESSING.          * 90082000
*                                                                     * 90084000
*              9.  TO QUEUE JOBS FOR PROCESSING BY THE JCL CONVERSION * 90086000
*                  PROCESSOR.                                         * 90088000
*                                                                     * 90090000
*                                                                     * 90092000
* NOTES = SEE BELOW                                                   * 90094000
*                                                                     * 90096000
*    DEPENDENCIES = NONE                                              * 90098000
*                                                                     * 90100000
*    RESTRICTIONS = NONE                                              * 90102000
*                                                                     * 90104000
*                                                                     * 90106000
*                                                                     * 90108000
*                                                                     * 90110000
*                                                                     * 90112000
*    REGISTER CONVENTIONS = R0          = WORK REGISTER               * 90114000
*                           R1          = WORK REGISTER               * 90116000
*                           R2  = RW    = WORK REGISTER               * 90118000
*                           R3  = RBI   = ADDRESS OF INPUT BUFFER     * 90120000
*                           R4  = RPI   = ADDR OF NEXT INPUT CARD     * 90122000
*                           R5  = RL1   = INTERNAL LINK REGISTER      * 90124000
*                           R6  = RL2   = INTERNAL LINK REGISTER      * 90126000
*                           R7  = RBASE2= PROCESSOR SECONDARY BASE    * 90128000
*                           R8  = BASE3 = SECONDARY BASE REGISTER     * 90130000
*                           R9          = UNUSED                      * 90132000
*                           R10 = JCT   = ADDRESS OF JES2 JCT         * 90134000
*                           R11 = BASE1 = ADDRESS OF HCT              * 90136000
*                           R12 = BASE2 = PROCESSOR ADDRESSABILITY    * 90138000
*                           R13 = SAVE  = ADDRESS OF INPUT PCE        * 90140000
*                           R14 = LINK  = LINK REGISTER               * 90142000
*                           R15         = WORK REGISTER               * 90144000
*                                                                     * 90146000
*    PATCH LABEL = NONE                                               * 90148000
*                                                                     * 90150000
* MODULE TYPE = PROCESSOR, TABLE ( CSECT TYPE )                       * 90152000
*                                                                     * 90154000
*    PROCESSOR = ASSEMBLER F                                          * 90156000
*                                                                     * 90158000
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY * 90160000
*                                                                     * 90166000
*    ATTRIBUTES = READ ONLY (AFTER PROCESSOR INITIALIZATION) AND      * 90168000
*                 HASP REENTRANT                                      * 90170000
*                                                                     * 90172000
* ENTRY POINTS = $READ    -- PRIMARY PROCESSOR ENTRY POINT            * 90174000
*                HASPRJCS -- JOB CONTROL INFORMATION INITIALIZATION   * 90176000
*                HASPRSCN -- JOB CARD ACCOUNTING FIELD SCAN           * 90178000
*                                                                     * 90180000
*    PURPOSE = SEE FUNCTION                                           * 90182000
*                                                                     * 90184000
*    LINKAGE = STANDARD JES2 PROCESSOR LINKAGE CONVENTIONS            * 90186000
*                                                                     * 90188000
* INPUT = R0-R10 = ZERO                                               * 90190000
*         R11    = ADDRESS OF HCT                                     * 90192000
*         R12    = PROCESSOR ADDRESSABILITY                           * 90194000
*         R13    = ADDRESS OF INPUT PCE                               * 90196000
*         R14    = ZERO                                               * 90198000
*         R15    = ADDRESS OF ENTRY POINT                             * 90200000
*                                                                     * 90202000
* OUTPUT = SEE REGISTER CONVENTIONS                                   * 90204000
*                                                                     * 90206000
* EXIT-NORMAL = TO JES2 DISPATCHER ($WAIT)                            * 90208000
*                                                                     * 90210000
* EXIT-ERROR = NONE                                                   * 90212000
*                                                                     * 90214000
*                                                                     * 90216000
*                                                                     * 90218000
*                                                                     * 90220000
*                                                                     * 90222000
* EXTERNAL REFERENCES = SEE BELOW                                     * 90224000
*                                                                     * 90226000
*    ROUTINES = TIME ROUTINE (SVC 11)                                 * 90228000
*               POST ROUTINE (SVC 2)                                  * 90230000
*               MISCELLANEOUS JES2 SERVICE ROUTINES IN HASPNUC        * 90232000
*                                                                     * 90234000
*    DATA AREAS -- COMMUNICATIONS VECTOR TABLE (CVT)                  * 90236000
*                  SYSTEM MANAGEMENT CONTROL AREA (SMCA)              * 90238000
*                                                                     * 90240000
*    CONTROL BLOCKS = MISCELLANEOUS JES2 CONTROL BLOCKS (SEE MACROS)  * 90242000
*                                                                     * 90244000
* TABLES = RSCANTBL -- CONTROL CARD SCAN TABLE                        * 90246000
*                                                                     * 90248000
* MACROS = SEE $HASPCB MACRO FOR CONTROL BLOCK MACROS USED            * 90250000
*                                                                     * 90251000
* CHANGE ACTIVITY                                                     * 90251100
*                                                                     * 90251200
*     RELEASE 4.0 = OZ03304,OZ04322,OZ04973,OZ04981,OZ06724,OZ06748,  * 90251400
*                   OZ08209,OZ09031,OZ09041                           * 90251500
*                                                                     * 90251600
*     RELEASE 4.1 = OZ10325,OZ10356,OZ11741,OZ11742,OZ14246,OZ15289,  * 90251700
*                   OZ15825                                           * 90251800
*                                                                     * 90256000
*********************************************************************** 90258000
         TITLE 'HASP CONTROL BLOCK GENERATION MACRO'                    90260000
         SPACE 5                                                        90262000
*                                                                       90264000
***** $HASPCB  *****          GENERATE HASP CONTROL BLOCKS              90266000
*                                                                       90268000
*                                                                       90270000
         MACRO                                                          90272000
         $HASPCB &DOC=NO,&LIST=NO                                       90274000
         GBLC  &PRINT,&GEN,&DATA                                        90276000
         PUSH  PRINT                                                    90278000
         PRINT &PRINT                                                   90280000
         $CVT  LIST=&LIST          GENERATE OS CVT DSECT                90282000
         $DCB  LIST=&LIST          GENERATE OS DCB DSECT                90284000
         $DEB  LIST=&LIST          GENERATE OS DEB DSECT                90286000
         $UCB  LIST=&LIST          GENERATE OS UCB DSECT                90288000
         $TGM  DOC=&DOC            GENERATE HASP TGM DSECT              90292000
         $TAB  DOC=&DOC            GENERATE HASP TAB DSECT           R4 90292100
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT             90294000
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT              90296000
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT              90298000
         $LRC  DOC=&DOC            GENERATE HASP LRC DSECT              90300000
         $SCR  DOC=&DOC            GENERATE HASP SCR DSECT           R4 90301000
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT           90302000
         $CMB  DOC=&DOC            GENERATE HASP CMB DSECT              90304000
         $JQE  DOC=&DOC            GENERATE HASP JQE DSECT              90306000
         $QSE  DOC=&DOC            GENERATE HASP QSE DSECT              90307000
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT              90308000
         $PDDB DOC=&DOC            GENERATE HASP PDDB DSECT             90310000
         $IOT  DOC=&DOC            GENERATE HASP IOT DSECT              90312000
         $CAT  DOC=&DOC            GENERATE HASP CAT DSECT              90314000
         $OCR  DOC=&DOC            GENERATE HASP OCR DSECT              90316000
         $OCT  DOC=&DOC            GENERATE HASP OCT DSECT              90318000
         $SCAT DOC=&DOC            GENERATE HASP SCAT DSECT             90320000
         $RAT  DOC=&DOC            GENERATE HASP RAT DSECT              90322000
         $DCT  DOC=&DOC            GENERATE HASP DCT DSECT              90324000
         $RDRWORK DOC=&DOC         GENERATE INPUT PCE WORK AREA DSECT   90326000
         SPACE 3                                                        90328000
         POP   PRINT                                                    90330000
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS           90332000
         MEND                                                           90334000
         TITLE 'HASP INPUT SERVICE PROCESSOR'                           90340000
         SPACE 5                                                        90342000
HASPRDR  START 0                   HASP INPUT PROCESSOR                 90344000
         SPACE 5                                                        90346000
*                                                                       90348000
*                             EXTERNAL REFERENCES                       90350000
*                                                                       90352000
         SPACE 3                                                        90354000
         ENTRY $RDREND             END OF HASPRDR CSECT                 90356000
         ENTRY $RDROEND            END OF HASPRDRO CSECT                90358000
         SPACE 5                                                        90378000
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS              90380000
         TITLE 'HASP CONTROL BLOCKS'                                    90382000
HASPRDR  $ENTRY CSECT=YES,BASE=(BASE2,RBASE2)  DEFINE ENTRY POINT    R4 90384000
         SPACE 5                                                        90386000
*                                                                       90388000
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY   90390000
*                                                                       90392000
         SPACE 3                                                        90394000
        $SYSPARM (OFF,GEN,NODATA,NO,NO)                                 90396000
         SPACE 5                                                        90398000
*                                                                       90400000
*                             GENERATE HASP CONTROL BLOCKS              90402000
*                                                                       90404000
         SPACE 3                                                        90406000
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS       90408000
         TITLE 'HASP INPUT SERVICE -- CONTROL CARD SCAN TABLE DSECT'    90410000
         SPACE 5                                                        90412000
RSCANTBL DSECT                     CONTROL CARD SCAN TABLE DSECT        90414000
RSCANAME DS    CL7                 KEYWORD NAME (7 CHARACTERS MAX)      90416000
RSCANABR DS    C                   KEYWORD ABREVIATION (1 CHARACTER)    90418000
RSCANFLG DS    X                   KEYWORD VALUE FLAGS                  90420000
RSCFLCOM EQU   B'10000000'              MASK IS COMPLEMENTED            90422000
RSCFLNUM EQU   B'10000000'              VALUE MUST BE NUMERIC           90424000
RSCFLBIN EQU   B'01000000'              CONVERT VALUE TO BINARY         90426000
RSCFLEFT EQU   B'00100000'              LEFT ADJUST VALUE               90428000
RSCFLBLK EQU   B'00010000'              BLANK-FILL VALUE                90430000
RSCFLPCT EQU   B'00001111'              MAXIMUM NUMBER OF VALUES        90432000
RSCANMSK DS    0X                  KEYWORD MASK                         90434000
RSCANLEN DS    AL1                 KEYWORD VALUE LENGTH                 90436000
RSCANDSP DS    AL2                 KEYWORD VALUE DISPLACEMENT           90438000
RSCANEXT DS    0F                  ADDRESS OF NEXT TABLE ENTRY          90440000
HASPRDR  CSECT                     END OF CONTROL CARD SCAN DSECT       90442000
         TITLE 'HASP INPUT SERVICE PROCESSOR'                           90444000
*                                                                       90446000
*                             READER REGISTER DEFINITIONS               90448000
*                                                                       90450000
         SPACE 3                                                        90452000
RW       EQU   WA                  WORK REGISTER                        90454000
RBI      EQU   WB                  INPUT BUFFER                         90456000
RPI      EQU   WC                  INPUT POINTER                     R4 90458000
RL1      EQU   WD                  INTERNAL LINK REGISTER 1          R4 90460000
RL2      EQU   WE                  INTERNAL LINK REGISTER 2          R4 90462000
RBASE2   EQU   WF                  INPUT SERVICE BASE REGISTER       R4 90464000
         SPACE 4                                                        90466000
*                                                                       90468000
*                             READER BUFFER DEFINITIONS                 90470000
*                                                                       90472000
         SPACE 3                                                        90474000
RBUFTRK  EQU   HDBNXTRK-BUFDSECT   BUFFER CHAIN TRACK DISPLACEMENT      90476000
*                                  INPUT BUFFER START DISPLACEMENT      90478000
ROBUFST  EQU   HDBSTART-BUFDSECT   OUTPUT BUFFER START DISPLACEMENT     90482000
         SPACE 4                                                        90486000
*                                                                       90488000
*                             MISCELLANEOUS DEFINITIONS                 90490000
*                                                                       90492000
         SPACE 3                                                        90494000
*                               RDRSW                                R4 90495000
RJFLUSH  EQU   X'01'               JOB FLUSH SWITCH                     90496000
RNOSCAN  EQU   X'02'               NO CARD SCAN SWITCH                  90498000
RDREOFSW EQU   X'04'               END-OF-FILE SWITCH                   90500000
RJCLSW   EQU   X'08'               JOB CONTROL LANGUAGE SWITCH          90502000
RSYSINSW EQU   X'10'               GENERATED DD * PROCESSING SWITCH     90504000
RXBJOBSW EQU   X'20'               XEQ BATCH CLASS JOB SWITCH           90506000
RJNABORT EQU   X'40'               READER PURGE SWITCH              R41 90507000
RJKILL   EQU   X'80'               JOB KILLED VIA RJOBKILL     @OZ19495 90507500
RUNIEXCP EQU   X'01'               UNIT EXCEPTION BIT                   90508000
*                               RDRSW2                               R4 90509000
RJCLH    EQU   X'01'               TYPRUN=JCLHOLD                    R4 90509100
*                                                                    R4 90509900
RSIOCSWS EQU   X'10'               SIO CSW STORED BIT                   90510000
RSIOCC   EQU   X'30'               SIO COMPLETION CODE BITS             90512000
RDLMSKIP EQU   LRC1RSV7            DLM TEST BYPASS SWITCH            R4 90513000
         TITLE 'HASP INPUT SERVICE -- PROCESSOR INITIALIZATION'         90514000
         SPACE 5                                                     R4 90515000
         LA    RBASE2,2048(,BASE2)  SET UP                           R4 90515500
         LA    RBASE2,2048(,RBASE2)  SECOND BASE REGISTER            R4 90516000
         L     R1,=A(RCOMCHAR)     INITIALIZE COMMAND CHARACTER      R4 90517000
         MVC   0(1,R1),$RCOMCHR     IN CONTROL CARD ROUTING TABLE    R4 90518000
         SPACE 5                                                     R4 90519000
         USING BUFDSECT,RBI        ESTABLISH IOB ADDRESSABILITY         90520000
$READ   $LINK  HASPRDRI            LINK TO INITIALIZATION MODULE     R4 90522000
         EJECT                                                          90524000
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT              90526000
HASPRDRI $ENTRY                    DEFINE INITIALIZATION SEGMENT        90528000
         L     RL1,PCEDCT          GET ADDRESS OF INPUT DCT    @OZ32566 90529000
         USING DCTDSECT,RL1        ESTABLISH DCT ADDRESSABILITY      R4 90530000
         SPACE 3                                                        90532000
RGETUNIT NULL                      *                                 R4 90534000
        $GETUNIT (RL1)             ATTEMPT TO ACQUIRE INPUT DCT      R4 90536100
         BNZ   RGOTUNIT            BRANCH IF DEVICE IS AVAILABLE     R4 90538000
         SPACE 2                                                     R4 90539000
         TM    PCEID,PCERJEID      TEST DEVICE TYPE                  R4 90542000
         BO    RJEWAIT             BRANCH IF REMOTE DEVICE           R4 90544000
        $WAIT  UNIT,INHIBIT=NO     NO, WAIT FOR UNIT RECORD DEVICE   R4 90546000
         B     RGETUNIT            GO TRY AGAIN                      R4 90548000
         SPACE 3                                                     R4 90549000
RJEWAIT $WAIT  WORK                $WAIT FOR RJE DEVICE              R4 90552000
         B     RGETUNIT            GO TRY AGAIN                      R4 90554000
         EJECT                                                       R4 90556000
RGOTUNIT NI    DCTFLAGS,DCTHOLDJ   RESET OPERATOR COMMANDS           R4 90576000
        $ACTIVE                    INDICATE PROCESSOR ACTIVE            90584000
         TM    PCEID,PCEINRID      IS THIS INTERNAL READER              90588000
         BZ    RNOTINR1            BRANCH IF NOT INTERNAL READER     R4 90590000
         ICM   RBI,15,RIDPBF       GET ADDRESS OF PROTECTED BUFFER      90592000
         BNZ   RINRSTRT            BRANCH IF BUFFER IS RESIDUAL         90594000
         GETMAIN RC,SP=231,LV=RIDBUFSZ+256  GET STORAGE FOR BUFFERS     90596000
         LTR   R15,R15             TEST SUCCESS OF GETMAIN              90598000
         BNZ   RRETURN             BRANCH IF GETMAIN WAS NOT SUCCESSFUL 90600000
         LR    RBI,R1              RBI = ADDRESS OF PROTECTED BUFFER    90602000
         ST    RBI,RIDPBF          SAVE ADDRESS                         90604000
RINRSTRT LA    RPI,RIDBUFSZ(,RBI)  GET ADDRESS OF WORK AREA             90606000
         B     RRETURN             CONTINUE PROCESSING                  90608000
         SPACE 1                                                     R4 90610000
RNOTINR1 NULL                      *                                 R4 90612000
         TM    PCEID,PCERJEID      IS THIS A REMOTE TERMINAL         R4 90614800
         BZ    RINBGET             BRANCH IF NOT                     R4 90615200
         SPACE 1                                                     R4 90620200
ROPEN    OI    DCTSTAT,DCTHOLD     SET DEVICE UNAVAILABLE            R4 90620300
        $EXTP  OPEN,(RL1)          OPEN REMOTE TERMINAL FOR INPUT       90620400
         LA    RPI,RTPCARD         INITIALIZE ADDRESS OF CARD IMAGE  R4 90622000
         B     RRETURN             CONTINUE PROCESSING               R4 90624000
         SPACE 1                                                     R4 90626000
RINBGET $GETBUF WAIT=YES           GET INPUT BUFFER                  R4 90628000
         EJECT                                                       R4 90635000
         LR    RBI,R1              RBI = ADDRESS OF INPUT BUFFER     R4 90636000
         LA    RW,BUFSTART         RW = START OF CCW CHAIN              90638000
         ST    RW,IOBSTART         SET IOBSTART IN INPUT BUFFER         90640000
         ST    RBI,DCTBUFAD        SET INPUT BUFFER                     90642000
         SLR   R0,R0               OBTAIN                            R4 90643200
         LH    R1,$BUFSIZE          COUNT                            R4 90643600
         D     R0,RF88               OF CCW'S                        R4 90644000
         LR    RL2,R1                 PER BUFFER                     R4 90644400
         BCTR  RL2,0                   (MINUS 1)                     R4 90644800
         SLL   R1,3                      SET UP                      R4 90645200
         LA    R0,BUFSTART-BUFDSECT(,R1)  READER                     R4 90645600
         ST    R0,RIBUFST                  CCW                       R4 90646000
         AL    R0,RDRCCW                    IN R0                    R4 90646400
         L     R1,RDRCCW+4                   AND R1                  R4 90646800
         L     R15,DCTDCB          R15 = DCB ADDRESS                    90648000
         L     R15,DCBDEBAD-DCBDSECT(,R15)   R15 = DEB ADDRESS          90650000
         L     R15,DEBSUCBA-DEBDSECT(,R15)   R15 = UCB ADDRESS          90652000
         CLI   UCBTBYT4-UCBDSECT(R15),UCB2540R  TEST DEVICE TYPE     R4 90654000
         BE    SKIP10              SET STACKER 2 IF 2540 READER      R4 90656000
         ICM   R0,8,RDRCCW1        SET STACKER 1 IF NOT 2540 READER  R4 90658000
SKIP10   ALR   R0,RBI              SET BUFFER ADDRESS IN CCW            90660000
         DROP  RL1                 DROP DCT ADDRESSABILITY              90662000
         SPACE 1                                                     R4 90663000
RCCWBLD  STM   R0,R1,0(RW)         STORE CCW                            90664000
         LA    RW,8(,RW)           UPDATE CCW LIST ADDRESS              90666000
         AL    R0,=F'80'           UPDATE CCW DATA ADDRESS              90668000
         BCT   RL2,RCCWBLD         GENERATE CCW CHAIN                   90670000
         LA    R1,0(,R1)           CLEAR COMMAND CHAIN BIT              90672000
         STM   R0,R1,0(RW)         STORE LAST CCW                       90674000
         ST    JCT,RBIEND          INITIALIZE BUFFER END                90676000
         SPACE 2                                                     R4 90678000
RRETURN  ST    JCT,PCEIOEWF        INITIALIZE DIRECT-ACCESS DCT         90680000
         MVI   RDRSW,RJFLUSH       SET FOR JOB FLUSH                    90682000
         MVC   RPRIORTY,=CL2' '    SET STANDARD PRIORITY             R4 90684000
         MVC   RDRDLM,=CL2'/*'     SET INPUT DATA SET DELIMITER         90686000
RDRIRET $RETURN                    RETURN TO MAIN PROCESSOR          R4 90691900
         SPACE 3                                                     R4 90698000
*                                                                       90700000
*                             INITIALIZATION CONSTANTS                  90702000
*                                                                       90704000
         SPACE 2                                                     R4 90706000
RF88     DC    F'88'               CONSTANT                          R4 90708000
RDRCCW   DC    0F'0',X'42',AL3(*-*),X'40',AL3(80)  2540 READ CCW     R4 90709000
RDRCCW1  DC    X'02'               NON-2540 READ CCW OPERATION       R4 90710000
         SPACE 2                                                     R4 90712000
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY          90714000
         TITLE 'HASP INPUT SERVICE -- MAIN PROCESSOR'                   90716000
HASPRDR  CSECT                     DEFINE MAIN PROCESSOR RESIDENT       90718000
RCRDOUT  BAL   RL1,RPUT            PUT CARD IN OUTPUT BUFFER            90720000
RNXTCRD  BAL   RL1,RGET            GET NEXT CARD                        90722000
         B     RDREND              BRANCH IF EOF                        90724000
         TM    RDRSW,RJCLSW+RXBJOBSW    TEST CURRENT MODE               90726000
         BZ    *+10                BRANCH IF DATA CARD                  90728000
         MVC   RDRDLM,=CL2'/*'     SET INPUT DATA SET DELIMITER         90730000
         CLC   0(2,RPI),RDRDLM     TEST FOR DELIMITER CARD              90732000
         BNE   RSCANCHK            BRANCH IF NOT DELIMITER CARD         90734000
         NI    RDRSW,255-RNOSCAN   TURN ON CARD SCAN                    90736000
         CLC   0(2,RPI),=CL2'/*'   TEST FOR HASP CONTROL CARD           90738000
         BNE   RNOTCCRD            BR IF NOT HASP CONTROL CARD          90740000
         CLI   2(RPI),C' '         TEST FOR HASP CONTROL CARD           90742000
         BE    RNOTCCRD            BRANCH IF NOT HASP CONTROL CARD      90744000
        $LINK  HASPRCCS            SCAN HASP CONTROL CARD               90746000
         BR    RL2                 UPON RETURN RL2 SPECIFIES EXIT       90748000
         SPACE 3                                                     R4 90750000
RNOTCCRD TM    RDRSW,RXBJOBSW      TEST STATUS                          90752000
         BO    RCRDOUT             BRANCH IF EXECUTION BATCHING         90754000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  NO, IND SUPERFLUOUS CARD  R4 90756000
         BAL   RL1,RPUT            ADD CARD TO OUTPUT FILE              90758000
         TM    RDRSW,RJCLSW        TEST JCL SWITCH                      90760000
         BO    RNXTCRD             BYPASS FURTHER PROCESSING IF SET     90762000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       90764000
         B     RFLTEST             TERMINATE DATA SET                   90766000
         SPACE 3                                                     R4 90768000
RPRIREAD BAL   RL1,RGET            GET NEXT CARD                        90770000
         B     RDREND              BRANCH IF END OF FILE                90772000
         SPACE 3                                                     R4 90774000
RSCANCHK TM    RDRSW,RNOSCAN       TEST FOR CARD SCAN                   90776000
         BO    RFLTEST             BRANCH IF NO SCAN                    90778000
         CLC   0(2,RPI),=CL3'//'   TEST COLUMNS 1 AND 2                 90780000
         BE    RJCLCARD            BRANCH IF '//' CARD                  90782000
         TM    RDRSW,RJCLSW+RXBJOBSW    TEST CURRENT MODE               90784000
         BNM   RFLTEST             PROCESS CARD IF DATA OR BATCH        90786000
         OI    RDRSW,RSYSINSW      INDICATE GENERATED DD *              90788000
         ST    RPI,RSAVE1          SAVE ADDRESS OF CURRENT CARD         90790000
         LA    RPI,RSYSINCD        GET ADDRESS OF HASP SUPPLIED DD *    90792000
         EJECT                                                       R4 90794000
RJCLCARD TM    RDRSW,RJCLSW        TEST JCL SWITCH                      90796000
         BO    RJCLSCAN            START SCAN IF SET                    90798000
         ST    RPI,RSAVE1          SAVE INPUT POINTER                   90800000
         LA    RPI,RDRDLM          ADD DELIMITER CARD                   90802000
         BAL   RL1,RPUT             TO OUTPUT FILE                      90804000
         L     RPI,RSAVE1          RESTORE INPUT POINTER                90806000
         MVC   RDRDLM,=CL2'/*'     SET INPUT DATA SET DELIMITER         90808000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       90810000
         SPACE 1                                                     R4 90812000
RJCLSCAN CLI   2(RPI),C'*'         TEST COLUMN 3                        90814000
         BE    RFLTEST             BRANCH IF JCL COMMENT                90816000
         LA    RW,0(,RPI)          SET 'RW' FOR CARD SCAN               90818000
         LA    R14,1               SET INCREMENT FOR SCAN               90820000
         LA    R15,65(,RPI)         AND LIMIT FOR END OF CARD           90822000
         SPACE 1                                                        90824000
RJBTEST  CLI   2(RW),C' '          SEARCH FOR END OF NAME FIELD         90826000
         BE    RJBLANK             BRANCH IF BLANK                      90828000
         BXLE  RW,R14,RJBTEST      ADVANCE TO NEXT COLUMN               90830000
         B     RFLTEST             END IF CARD -- IGNORE                90832000
         SPACE 1                                                     R4 90834000
RJBLANK  CLI   3(RW),C' '          SEARCH FOR START OF OPERATION        90836000
         BNE   RDDTEST             BRANCH IF FOUND                      90838000
         BXLE  RW,R14,RJBLANK      ADVANCE TO NEXT COLUMN               90840000
         SPACE 1                                                        90842000
RDDTEST  CLC   3(3,RW),=CL3'DD'    TEST FOR DD CARD                     90844000
         BNE   RJJTEST             BRANCH IF NOT A DD CARD              90846000
         TM    RDRSW,RXBJOBSW      TEST XEQ BATCH JOB SWITCH            90850000
         BO    RFLTEST             PROCESS DD AS DATA CARD IF SET       90852000
         LA    R15,66(,RPI)        SET NEW LIMIT FOR END OF CARD        90858000
         SPACE 1                                                     R4 90859000
RDDBLANK BXH   RW,R14,RFLTEST      ADVANCE TO NEXT COLUMN               90860000
         CLI   4(RW),C' '          SEARCH DATA FIELD START              90862000
         BE    RDDBLANK            BRANCH IF NOT FOUND                  90864000
         CLI   4(RW),C'*'          TEST FOR DD *                        90866000
         BE    RDDSTAR             BRANCH IF DD *                       90868000
         CLC   4(4,RW),=CL4'DATA'  TEST FOR DD DATA                     90870000
         BNE   RFLTEST             BRANCH IF NOT DD DATA                90872000
         OI    RDRSW,RNOSCAN       TURN OFF CARD SCAN                R4 90874000
         LA    RW,3(,RW)           ADVANCE INPUT COLUMN              R4 90876000
         SPACE 1                                                     R4 90878000
RDDSTAR $LINK  HASPRDDS            SCAN DD */DATA                    R4 90880000
         BR    RL2                 UPON RETURN RL2 SPECIFIES EXIT    R4 90882000
         SPACE 1                                                     R4 90884000
RJJTEST  CLC   3(4,RW),=CL4'JOB'   TEST FOR JOB CARD                    91140000
         BNE   RFLTEST             BRANCH IF NOT A JOB CARD             91142000
        $LINK  HASPRJCS            INITIALIZE JOB CONTROL INFORMATION   91144000
         EJECT                                                       R4 91144700
RFLTEST  TM    RDRSW,RJFLUSH       TEST FLUSH SWITCH                    91152000
         BZ    RCRDOUT             BRANCH IF NOT START OF FLUSH         91154000
         CLC   2(7,RPI),=CL7'SIGNON'  TEST FOR /*SIGNON CARD            91156000
         BE    RCRDOUT             BRANCH IF /*SIGNON CARD              91158000
         L     R1,PCEDCT           R1 = READER DCT ADDRESS     @OZ32566 91160000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         91162000
         MVC   RMESSAGE(L'RFLMSG),RFLMSG  SET UP READER SKIPPING        91170000
         MVC   RMESSAGE+2(8),DCTDEVN       FOR JOB CARD MESSAGE         91172000
         DROP  R1                  DROP DCT ADDRESSABILITY              91174000
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE                  91178000
         BZ    RNOTRJE1            BRANCH IF NOT REMOTE TERMINAL        91180000
         L     R1,DCTDCB-DCTDSECT(,R1)  GET ADDRESS OF LINE DCT         91182000
         L     R1,MDCTRAT-DCTDSECT(,R1)  GET ADDRESS OF RAT             91184000
         SLR   LINK,LINK                     CLEAR AND INSERT           91186000
         ICM   LINK,2,RATCONRT+1-RATDSECT(R1) REMOTE CONSOLE ROUTE CODE 91188000
         LA    R0,L'RFLMSG(,LINK)  GENERATE LENGTH OF MESSAGE           91190000
        $WTO   RMESSAGE,(R0),JOB=NO,         ISSUE SKIPPING MESSAGE  R4C91192000
               RMT=YES,CLASS=$NORMAL,PRI=$ST  TO REMOTE TERMINAL     R4 91194000
         SPACE 2                                                     R4 91196000
RNOTRJE1 $WTO  RMESSAGE,L'RFLMSG,JOB=NO,  ISSUE SKIPPING MESSAGE     R4C91200000
               ROUTE=$LOG+$UR,CLASS=$NORMAL,PRI=$ST                     91202000
         MVC   RPRIORTY,=CL2' '    RESET PRIORITY                    R4 91204000
         NI    RDRSW,255-RJFLUSH   TURN OFF FLUSH SWITCH                91206000
         B     RNXTCRD             GET NEXT CARD                        91208000
         SPACE 5                                                        91210000
RDREND  $LINK  HASPRDRT            LINK TO TERMINATION MODULE           91212000
         B     $READ               RETURN TO INITIALIZATION             91214000
         TITLE 'HASP INPUT SERVICE -- PROCESSOR TERMINATION'            91216000
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT              91218000
HASPRDRT $ENTRY                    DEFINE TERMINATION SEGMENT           91220000
         BAL   RL1,RJOBEND         TERMINATE LAST JOB                R4 91220200
         L     RW,PCEDCT           GET ADDR OF INTRNAL RDR DCT @OZ32566 91225100
         USING DCTDSECT,RW         ESTABLISH DCT ADDRESSABILITY         91226000
         TM    PCEID,PCEINRID      IS THIS INTERNAL READER              91228000
         BZ    RNOTINR2            BRANCH IF NOT INTERNAL READER     R4 91230000
         ST    JCT,RIDPBF          CLEAR BUFFER ADDRESS                 91232000
         ST    JCT,RIDPBFO          AND BUFFER OFFSET                   91234000
         LTR   RBI,RBI             TEST FOR PROTECTED BUFFER            91236000
         BZ    RUNFREE             BRANCH IF NONE                       91238000
         FREEMAIN R,SP=231,LV=RIDBUFSZ+256,A=(RBI)  FREE BUFFER STORAGE 91240000
         SR    RBI,RBI             INDICATE NO BUFFER                   91242000
         B     RUNFREE             FREE INTERNAL READER                 91244000
         SPACE 1                                                     R4 91246000
RNOTINR2 TM    PCEID,PCERJEID      TEST FOR REMOTE TERMINAL          R4 91248800
         BZ    RNOTRJE2            BRANCH IF NOT                     R4 91249200
        $EXTP  CLOSE,(RW)          CLOSE REMOTE TERMINAL                91254000
         B     RUNFREE             FREE REMOTE READER DCT               91256000
         SPACE 1                                                     R4 91258000
RNOTRJE2 $FREEBUF (RBI)            RETURN INPUT BUFFER               R4 91260000
         OI    DCTSTAT,DCTHOLD     SET READER UNAVAILABLE               91262000
         SPACE 1                                                     R4 91263000
RUNFREE $FREUNIT (RW)              FREE INPUT DEVICE                    91264000
         DROP  RW                  DROP DCT ADDRESSABILITY              91266000
        $DORMANT                   INDICATE PROCESSOR INACTIVE          91268000
        $RETURN                    RETURN TO MAIN PROCESSOR             91270000
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY          91272000
         TITLE 'HASP INPUT SERVICE -- CONTROL CARD SCAN ROUTINES'       91274000
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT              91276000
HASPRCCS $ENTRY                    DEFINE CONTROL CARD SCAN SEGMENT     91278000
         SPACE 5                                                        91280000
*                                                                       91282000
*                             DETERMINE TYPE OF CONTROL CARD            91284000
*                                                                       91286000
         SPACE 3                                                        91288000
         LA    RW,RCCTAB           GET ADDR OF CONTROL CARD CODE TABLE  91290000
         LA    R14,RCCTBNXT-RCCTAB GET LENGTH OF EACH ENTRY             91292000
         LA    R15,RCCTBEND-1      GET END OF CODE TABLE                91294000
         SPACE 1                                                     R4 91296000
RCCSERCH IC    R1,0(,RW)           GET LENGTH OF CODE WORD              91298000
         EX    R1,RCCTBCLC         COMPARE CODE WORD                    91300000
         BE    RCNTLCRD            BRANCH IF TABLE ENTRY FOUND          91302000
         BXLE  RW,R14,RCCSERCH     TRY AGAIN                            91304000
         SPACE 2                                                     R4 91306000
RCNTLCRD L     RL1,0(,RW)          GET ADDRESS FROM CODE TABLE          91308000
         BR    RL1                 GO TO APPROPRIATE PROCESSING ROUTINE 91310000
         SPACE 5                                                        91312000
RCCTBCLC CLC   4(*-*,RW),2(RPI)    TABLE COMPARE INSTRUCTION            91314000
         SPACE 3                                                        91316000
RCCTAB   DS    0F                  CONTROL CARD ROUTING TABLE           91318000
RCOMCHAR EQU   *+4,1               HASP COMMAND CHARACTER               91320000
         DC    AL1(0),AL3(RCOMCARD),CL8'$'        HASP COMMAND CARD     91322000
RCCTBNXT DS    0F                                                       91324000
         DC    AL1(7),AL3(RJBPCARD),CL8'JOBPARM'  HASP JOBPARM CARD     91326000
         DC    AL1(7),AL3(RMSGCARD),CL8'MESSAGE'  HASP MESSAGE CARD     91328000
         DC    AL1(6),AL3(ROTPCARD),CL8'OUTPUT'   HASP OUTPUT CARD      91330000
         DC    AL1(7),AL3(RPRICARD),CL8'PRIORITY' HASP PRIORITY CARD    91332000
         DC    AL1(5),AL3(ROUTCARD),CL8'ROUTE'    HASP ROUTE CARD       91334000
         DC    AL1(5),AL3(RSETCARD),CL8'SETUP'    HASP SETUP CARD       91336000
RCCTBEND DC    A(RILLCCRD)         END OF CONTROL CARD CODE TABLE       91338000
         EJECT                                                          91340000
*                                                                       91342000
*                             HASP COMMAND CARD PROCESSING ROUTINE      91344000
*                                                                       91346000
         SPACE 3                                                        91348000
RCOMCARD NULL                                                           91350000
         LTR   JCT,JCT             TEST FOR JOB                      R4 91352000
         BNZ   RILLCCRD            IGNORE COMMAND IF IN A JOB           91354000
         SPACE 2                                                     R4 91355000
RGETQUE $GETCMB COUNT=1            TRY TO GET CONSOLE MESSAGE BUFFER    91356000
         BNZ   RCOMBUF             BRANCH IF SUCCESSFUL                 91358000
        $WAIT  CMB                 WAIT FOR CONSOLE MESSAGE BUFFER      91360000
         B     RGETQUE             TRY AGAIN                            91362000
         SPACE 1                                                     R4 91363000
RCOMBUF  LR    RL1,R1              RL1 = ADDRESS OF CMB                 91364000
         USING CMBDSECT,RL1        ESTABLISH CMB ADDRESSABILITY         91366000
         L     RW,PCEDCT           RW = ADDRESS OF INPUT DCT   @OZ32566 91368000
         CLI   71(RPI),C'N'        TEST COLUMN 72                       91370000
         BE    RCOMQUE             BYPASS WTO IF COLUMN 72 IS 'N'       91372000
         MVC   0(2,RL1),RCOMMSG              SET UP                     91374000
         MVC   2(8,RL1),DCTDEVN-DCTDSECT(RW)  MESSAGE NUMBER            91376000
         MVI   10(RL1),C' '                    DEVICE NAME              91378000
         MVC   11(69,RL1),2(RPI)                AND COMMAND             91380000
        $WTO   (RL1),80,JOB=NO,    LOG COMMAND                         C91382000
               ROUTE=$LOG+$UR+$TP,CLASS=$NORMAL,PRI=$HI                 91384000
         SPACE 1                                                     R4 91385000
RCOMQUE  MVC   CMBFLAG(14),RCOMASK SET HEADER                        R4 91386000
         MVN   CMBFLAG,DCTRAUTH-DCTDSECT(RW)  SET RESTRICTION FLAGS  R4 91388000
         MVC   CMBFM,$SYSID        SET RESPONSE SYSTEM               R4 91390000
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE                  91392000
         BZ    RCONRMT             BRANCH IF NOT REMOTE TERMINAL        91394000
         L     R1,DCTDCB-DCTDSECT(,RW)  GET ADDRESS OF LINE DCT         91396000
         L     R1,MDCTRAT-DCTDSECT(,R1)  GET ADDRESS OF RAT             91398000
         MVC   CMBRMT,RATCONRT+1-RATDSECT(R1)  SET RESPONSE REMOTE   R4 91400000
         MVI   CMBFLAG,CMBFLAGC+CMBFLAGW+CMBFLAGR  SET REMOTE FLAGS  R4 91402000
         EJECT                                                       R4 91403000
RCONRMT  MVC   CMBMSG(69),2(RPI)   SET UP COMMAND                    R4 91404000
         MVI   CMBMSG+69,C' '      BLANK OUT REST OF BUFFER             91406000
         MVC   CMBMSG+70(L'CMBMSG-70),CMBMSG+69                         91408000
         L     RW,$SSVT            RW = ADDRESS OF SSVT                 91410000
         USING SSVT,RW             ESTABLISH SSVT ADDRESSABILITY        91412000
         L     R0,$SVCOMMQ         GET COMMAND QUEUE HEAD               91414000
         SPACE 1                                                     R4 91415000
RCOMRQUE ST    R0,CMBCMB           PREPARE TO QUEUE COMMAND          R4 91416000
         CS    R0,RL1,$SVCOMMQ     QUEUE TO COMMAND PROCESSOR           91418000
         BNE   RCOMRQUE            TRY AGAIN IF NOT QUEUED              91420000
         L     R1,$COMMPCE         $POST COMMAND SERVICE             R4 91422000
        $POST  (R1),WORK            PROCESSOR                           91424000
         LA    RL2,RNXTCRD         LOAD ADDRESS OF EXIT                 91426000
        $RETURN                     AND RETURN                          91428000
         DROP  RW,RL1              DROP SSVT AND CMB ADDRESSABILITY     91430000
         EJECT                                                          91432000
*                                                                       91434000
*                             HASP PRIORITY CARD PROCESSING ROUTINE     91436000
*                                                                       91438000
         SPACE 3                                                        91440000
RPRICARD NULL                                                           91442000
         BAL   RL1,RJOBEND         TERMINATE PREVIOUS JOB               91444000
         LA    R1,RILLPRIC         SET IGNORE/EXIT BRANCH ADDRESS    R4 91446000
         TM    $RUNOPTS,$PRIOOPT   IGNORE /*PRIORITY CARD IF         R4 91447000
         BZR   R1                    INIT OPTION NOT SELECTED        R4 91448000
         CLI   10(RPI),C' '        VERIFY BLANK                     R41 91448100
         BNER  R1                   AFTER 'PRIORITY'                R41 91448200
         LA    RW,10(,RPI)         SET                              R41 91448300
         LA    R14,1                REGISTERS FOR                   R41 91448400
         LA    R15,70(,RPI)          CARD SCAN                      R41 91448500
         SPACE 1                                                    R41 91448600
RPRIBLUP BXH   RW,R14,RILLPRIC     SCAN                             R41 91448700
         CLI   0(RW),C' '           FOR FIRST                       R41 91448800
         BE    RPRIBLUP              NON-BLANK                      R41 91448900
         CLI   0(RW),C'0'          IGNORE IF                        R41 91449000
         BLR   R1                    FIRST DIGIT                     R4 91450000
         CLI   0(RW),C'9'            NOT ZERO                       R41 91451000
         BHR   R1                    THRU NINE                       R4 91452000
         CLI   1(RW),C' '          BRANCH IF NEXT                   R41 91453000
         BNE   RPRI2                 CHARACTER NOT BLANK             R4 91454000
         MVC   RPRIORTY+1(1),0(RW)   SAVE 1-DIGIT PRIORITY          R41 91455000
         BR    R1                  BRANCH TO END                     R4 91456000
         SPACE 1                                                     R4 91457000
RPRI2    CLI   2(RW),C' '          IGNORE IF MORE                   R41 91458000
         BNER  R1                    THAN 2 CHARACTERS               R4 91459000
         CLI   1(RW),C'0'          IGNORE IF                        R41 91460000
         BLR   R1                    SECOND DIGIT                    R4 91461000
         CLI   1(RW),C'9'            NOT ZERO                       R41 91462000
         BHR   R1                    THRU NINE                       R4 91463000
         CLC   =C'15',0(RW)        IGNORE IF OVER                   R41 91464000
         BLR   R1                    FIFTEEN                         R4 91465000
         MVC   RPRIORTY(2),0(RW)   SAVE 2-DIGIT PRIORITY            R41 91466000
         SPACE 1                                                     R4 91473000
RILLPRIC OI    RDRSW,RJFLUSH+RJCLSW  SET FLUSH AND JCL SWITCHES         91474000
         LA    RL2,RPRIREAD        LOAD ADDRESS OF EXIT                 91476000
        $RETURN                     AND RETURN                          91478000
         EJECT                                                          91480000
*                                                                       91482000
*                             HASP ROUTE CARD PROCESSING ROUTINE        91484000
*                                                                       91486000
         SPACE 1                                                     R4 91488000
ROUTCARD LTR   JCT,JCT             TEST FOR JOB                      R4 91492000
         BZ    RILLCCRD            IGNORE ROUTE CARD IF NOT IN JOB      91494000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  INDICATE SUPERFLUOUS CARD R4 91496000
         BAL   RL1,RPUT            ADD ROUTE CARD TO OUTPUT FILE        91498000
         TM    RDRSW,RJCLSW        TEST STATUS                          91500000
         BO    *+12                BRANCH IF JCL FILE                   91502000
         BAL   RL1,RPUT            TERMINATE DATA SET                   91504000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       91506000
         LA    R1,7(,RPI)          SET                              R41 91508000
         LA    R14,1                REGISTERS FOR                   R41 91508100
         LA    R15,70(,RPI)          CARD SCAN                 @OZ32101 91508200
         SPACE 1                                                    R41 91508300
ROUTROUT BXH   R1,R14,RILLROUT     SCAN FOR                         R41 91508400
         CLI   0(R1),C' '           FIRST                           R41 91508500
         BE    ROUTROUT              NON-BLANK                      R41 91508600
*              THIS LINE DELETED BY APAR NUMBER                @OZ32101 91508700
*              THIS LINE DELETED BY APAR NUMBER                @OZ32101 91508800
         LA    RW,JCTPROUT         ASSUME PRINT ROUTING                 91510000
         CLC   RPRINT,0(R1)        'PRINT'...                       R41 91512000
         BE    ROUTDES             BR IF PRINT ROUTING              R41 91514000
         CLC   RPUNCH,0(R1)        'PUNCH'...                       R41 91516000
         BNE   RILLROUT            ILLEGAL IF NOT PUNCH ROUTING         91518000
         LA    RW,JCTPUOUT         SET FOR PUNCH ROUTING                91520000
         SPACE 1                                                    R41 91520500
ROUTDES  BXH   R1,R14,RILLROUT     SCAN                             R41 91520600
         CLI   0(R1),C' '           PAST                            R41 91520700
         BNE   ROUTDES               ROUTING                        R41 91520800
         SPACE 1                                                    R41 91520900
ROUTDEST BXH   R1,R14,RILLROUT     SCAN                             R41 91521000
         CLI   0(R1),C' '           FOR                             R41 91521100
         BE    ROUTDEST              DESTINATION                    R41 91521200
         SR    RL1,RL1             CLEAR R5                    @OZ32101 91521260
         SPACE 1                                               @OZ32101 91521270
ROUTNME  LA    RL1,1(RL1)          INCREMENT COUNTER           @OZ32101 91521280
         BXH   R1,R14,RILLROUT     SCAN FOR                    @OZ32101 91521290
         CLI   0(R1),C' '           INVALID                    @OZ32101 91521300
         BNE   ROUTNME               DESTINATION NAME          @OZ32101 91521310
         CH    RL1,=H'8'           IS DEST NAME TOO LONG...    @OZ32101 91521320
         BH    RILLROUT            BRANCH IF YES               @OZ32101 91521330
         SR    R1,RL1              RESET DEST NAME ADDRESS     @OZ32101 91521340
         SPACE 1                                               @OZ32101 91521350
RPROUTE  BAL   RL1,RDESTSCN        CONVERT DESTINATION TO ROUTE CODE R4 91521400
         B     RILLROUT            BRANCH IF INVALID DESTINATION        91526000
         B     ROPSHIFT            BRANCH IF VALID   DESTINATION    R41 91526100
         EJECT                                                      R41 91534000
RILLROUT OI    RCARDLRC,LRC1ONUL+RDLMSKIP SET INTERNALLY GEN   @OZ30530 91536000
         BAL   RL1,RPUT            ADD MESSAGE TO OUTPUT FILE  @OZ30530 91536800
         OI    RCARDLRC,LRC1CCTL+LRC1TASA SET ASA CAR CONTROL  @OZ30530 91537500
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 91538000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 91540000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 91542000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 91543000
         MVC   (79-22)/2(22,RPI),RRILEGAL+4  MOVE IN ERROR MESSAGE   R4 91544000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     91546000
        $WTO   RRILEGAL,L'RRILEGAL,JOB=YES,               ISSUE ERROR  C91548000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST         MESSAGE     91550000
         BAL   RL1,RJOBKILL        KILL JOB                             91552000
         LA    RL2,RFLTEST         LOAD ADDRESS OF EXIT                 91554000
        $RETURN                     AND RETURN                          91556000
         EJECT                                                          91558000
*                                                                       91560000
*                             HASP SETUP CARD PROCESSING ROUTINE        91562000
*                                                                       91564000
         SPACE 3                                                        91566000
RSETCARD NULL                                                           91568000
         LTR   JCT,JCT             TEST FOR JOB                      R4 91570000
         BZ    RILLCCRD            IGNORE SETUP CARD IF NOT IN A JOB    91572000
         TM    JCTJBOPT,JCTSETUP   TEST FOR PREVIOUS SETUP CARD         91574000
         BO    RMSGCARD            TREAT AS MESSAGE CARD IF NOT FIRST   91576000
        $WTO   RSETHMSG,L'RSETHMSG,JOB=YES,                ISSUE SETUP C91578000
               ROUTE=$LOG+$TAPE+$MAIN,CLASS=$ACTION,PRI=$ST MESSAGE     91580000
         OI    JCTJBOPT,JCTSETUP   INDICATE SETUP CARD(S) PRESENT       91590000
         EJECT                                                          91592000
*                                                                       91594000
*                             HASP MESSAGE CARD PROCESSING ROUTINE      91596000
*                                                                       91598000
         SPACE 3                                                        91600000
RMSGCARD NULL                                                           91602000
         LTR   JCT,JCT             TEST FOR JOB                      R4 91604000
         BZ    RMSGSCAN            BRANCH IF NO JOB                     91606000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  INDICATE SUPERFLUOUS CARD R4 91608000
         BAL   RL1,RPUT            ADD CARD TO OUTPUT FILE              91610000
         TM    RDRSW,RJCLSW        TEST STATUS                          91612000
         BO    *+12                BRANCH IF JCL FILE                   91614000
         BAL   RL1,RPUT            TERMINATE DATA SET                   91616000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       91618000
         SPACE 1                                                     R4 91621000
RMSGSCAN LA    R14,1               SET UP REGISTERS                 R41 91622000
         LA    R15,70(,RPI)         FOR CARD SCAN                   R41 91623000
         LA    RW,7(,RPI)          STARTING COL. FOR SETUP INFO     R41 91624000
         CLI   2(RPI),C'S'         /*SETUP CARD...                  R41 91625000
         BE    RMSGSMSG            BR IF YES                        R41 91626000
         LA    RW,9(,RPI)           ELSE, STARTING COL. FOR MESSAGE R41 91627000
         SPACE 1                                                    R41 91628000
RMSGSMSG BXH   RW,R14,RMSGRETN     SUPPRESS                         R41 91629000
         CLI   0(RW),C' '           LEADING                         R41 91630000
         BE    RMSGSMSG              BLANKS                         R41 91631000
         SPACE 1                                                    R41 91632000
         USING CMBDSECT,R1         PROVIDE CMB ADDRESSABILITY       R41 91633000
         SPACE 1                                                    R41 91634000
RMSGCMB $GETCMB ,                  GET A CMB FOR CONSOLE MSG        R41 91635000
         BNZ   RMSGBLD             BR IF GOT CMB                    R41 91636000
        $WAIT  CMB                  ELSE WAIT FOR A CMB             R41 91637000
         B     RMSGCMB             TRY AGAIN                        R41 91638000
         SPACE 1                                                    R41 91639000
RMSGBLD  LA    R14,71-1(,RPI)      COMPUTE LENGTH -1                R41 91640000
         SLR   R14,RW               OF MESSAGE                      R41 91641000
         EX    R14,RMSGMOVE        MOVE MESSAGE TO CMB              R41 91642000
         SPACE 1                                                    R41 91643000
         LA    RW,CMBTEXT          MESSAGE AREA        (JOB-TYPE)   R41 91644000
         LA    R0,2+1(,R14)        MESSAGE LENGTH      (JOB-TYPE)   R41 91645000
         LA    R15,RMSGJOB         LIST-FORM $WTO      (JOB-TYPE)   R41 91646000
         EJECT                                                      R41 91647000
         LTR   JCT,JCT             WAS CARD FOUND WITHIN A JOB...   R41 91648000
         BNZ   RMSGMID             BR IF YES                        R41 91649000
         SPACE 1                                                    R41 91650000
         LA    RW,CMBJOBN          MESSAGE AREA        (NOJOB-TYPE) R41 91651000
         LA    R0,2+9+1(,R14)      MESSAGE LENGTH      (NOJOB-TYPE) R41 91652000
         L     R15,PCEDCT                    INSERT            @OZ32566 91653000
         MVC   2(8,RW),DCTDEVN-DCTDSECT(R15)  DEVICE                R41 91654000
         MVI   2+8(RW),C' '                    NAME                 R41 91655000
         LA    R15,RMSGNJOB        LIST-FORM $WTO      (NOJOB-TYPE) R41 91656000
         SPACE 1                                                    R41 91657000
RMSGMID  MVC   0(2,RW),RMSGMSG     USE 'MESSAGE' MSG ID             R41 91658000
         CLI   2(RPI),C'M'         /*MESSAGE CARD...                R41 91659000
         BE    RMSGWTO             BR IF YES                        R41 91660000
         MVC   0(2,RW),RSETMSG      ELSE USE 'SETUP' MSG ID         R41 91661000
         SPACE 1                                                    R41 91662000
RMSGWTO $WTO   (R1),(R0),CMB=YES,MF=(E,0(,R15))  ISSUE CONSOLE MSG  R41 91663000
         SPACE 1                                                    R41 91664000
RMSGRETN LTR   JCT,JCT             PROCESSING JOB...                R41 91665000
         BNZ   ROPSHIFT            CONVERT TO //* IF YES            R41 91666000
         LA    RL2,RNXTCRD          ELSE LOAD EXIT                  R41 91667000
        $RETURN                      ROUTINE ADDRESS                R41 91668000
         SPACE 1                                                    R41 91669000
RMSGMOVE MVC   CMBTEXT+2(*-*),0(RW)  *** EXECUTE ONLY ***           R41 91670000
         SPACE 1                                                    R41 91671000
         DROP  R1                  DROP CMB ADDRESSABILITY          R41 91672000
         SPACE 3                                                    R41 91673000
RMSGJOB  $WTO  JOB=YES,            LIST-FORM $WTO FOR JOB-TYPE      R41C91674000
               MF=L,               ---------------------------      R41C91675000
               CLASS=$ACTION,PRI=$ST,                               R41C91676000
               ROUTE=$LOG+$TAPE+$MAIN                               R41 91677000
         SPACE 3                                                    R41 91678000
RMSGNJOB $WTO  JOB=NO,             LIST-FORM $WTO FOR NOJOB-TYPE    R41C91679000
               MF=L,               -----------------------------    R41C91680000
               CLASS=$ACTION,PRI=$ST,                               R41C91681000
               ROUTE=$LOG+$TAPE+$MAIN                               R41 91682000
         EJECT                                                          91690000
*                                                                       91692000
*                             HASP JOBPARM CARD PROCESSING ROUTINE      91694000
*                                                                       91696000
         SPACE 3                                                        91698000
RJBPCARD NULL                                                           91700000
         LTR   JCT,JCT             TEST FOR JOB                      R4 91702000
         BZ    RILLCCRD            IGNORE JOBPARM CARD IF NOT IN JOB    91704000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  INDICATE SUPERFLUOUS CARD R4 91706000
         BAL   RL1,RPUT            ADD JOBPARM CARD TO OUTPUT FILE      91708000
         TM    RDRSW,RJCLSW        TEST STATUS                          91710000
         BO    *+12                BRANCH IF JCL FILE                   91712000
         BAL   RL1,RPUT            TERMINATE DATA SET                   91714000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       91716000
         XC    JCTWORK(1+4*7+3),JCTWORK  CLEAR WORK AREA            R41 91717000
         LA    R1,RJPTABLE         GET ADDRESS OF JOBPARM SCAN TABLE    91718000
         LA    RW,8(,RPI)          SET UP                               91720000
         LA    R14,1                REGISTERS                           91722000
         LA    R15,70(,RPI)          FOR SCAN SUBROUTINE                91724000
         BAL   RL1,RKEYSCAN        SCAN PARAMETERS                   R4 91726000
         B     RILLJOBP            ILLEGAL JOBPARM CARD              R4 91726100
         CLI   JCTWORK,0           TEST FOR RESTART OPTION           R4 91727200
         BE    RJBURST             BR IF NO                         R41 91727300
         CLI   JCTWORK,C'Y'        TEST FOR RESTART=Y                R4 91727400
         BNE   RJBNRST             BR IF NO                          R4 91727500
         OI    JCTJOBFL,JCTRSTRT    ELSE ALLOW JOB RESTART           R4 91727600
         B     RJBURST               AND BR TO CONTINUE             R41 91727700
         SPACE 1                                                     R4 91727800
RJBNRST  CLI   JCTWORK,C'N'        TEST FOR RESTART=N                R4 91727900
         BNE   RILLJOBP            ILLEGAL IF NO                     R4 91728000
         NI    JCTJOBFL,255-JCTRSTRT  ELSE DISALLOW JOB RESTART      R4 91728100
         SPACE 1                                                    R41 91728200
RJBURST  CLI   JCTWORK+31,0        TEST FOR BURST OPTION            R41 91728300
         BE    RJBSYSAF            BR IF NO                         R41 91728400
         CLI   JCTWORK+31,C'Y'     TEST FOR BURST=Y                 R41 91728500
         BNE   RJBNBURS            BR IF NO                         R41 91728600
         OI    JCTFLAG1,JCTBURST    ELSE SET BURST SYSOUT FLAG      R41 91728700
         B     RJBSYSAF              AND BR TO CONTINUE             R41 91728800
         SPACE 1                                                    R41 91728900
RJBNBURS CLI   JCTWORK+31,C'N'     TEST FOR BURST=N                 R41 91729000
         BNE   RILLJOBP            ILLEGAL IF NO                    R41 91729100
         NI    JCTFLAG1,255-JCTBURST  ELSE RESET BURST FLAG         R41 91729200
         EJECT                                                      R41 91729300
RJBSYSAF CLI   JCTWORK+1,0         TEST FOR SYSAFF PARAMETERS        R4 91729400
         BE    ROPSHIFT            BRANCH IF NONE                       91729500
         MVI   RDRSIAFF,0          CLEAR SYSTEM AFFINITY                91729600
         LA    R1,JCTWORK+1        GET ADDRESS OF 1ST PARAMETER      R4 91729700
         SPACE 1                                                     R4 91729800
RJBPSAF1 CLC   RANY,0(R1)          TEST PARAMETER                       91729900
         BE    RJBPSAF3            BRANCH IF 'ANY'                      91730000
         CLC   RIND,0(R1)          TEST PARAMETER AGAIN                 91730100
         BE    RJBPSAF4            BRANCH IF 'IND'                      91730200
         CLC   RSTAR,0(R1)         TEST PARAMETER AGAIN                 91730300
         BE    RJBPSAF5            BRANCH IF '*'                        91730400
         L     R15,$QSE1           GET ADDRESS OF FIRST QSE          R4 91730500
         USING QSEDSECT,R15        ESTABLISH QSE ADDRESSABILITY         91730600
         SPACE 1                                                     R4 91730700
RJBPSAF2 CLC   QSESID,0(R1)        COMPARE SID WITH PARAMETER           91730800
         BE    RJBPSAF6            BRANCH IF QSE FOUND                  91730900
         TM    QSEFLAGS,QSELAST    TEST FOR LAST QSE                    91731000
         BO    RILLJOBP            ERROR IF QSE NOT FOUND               91731100
         AH    R15,$QSEL           GET ADDRESS OF NEXT QSE           R4 91731200
         B     RJBPSAF2            CONTINUE SEARCH                      91731300
         SPACE 1                                                     R4 91731400
RJBPSAF3 OI    RDRSIAFF,QUESYSAF   SET GLOBAL AFFINITY                  91731500
         B     RJBPSAF7            GET NEXT PARAMETER                   91731600
         SPACE 3                                                     R4 91731700
RJBPSAF4 OI    RDRSIAFF,QUEINDAF   SET INDEPENDENT AFFINITY             91731800
         B     RJBPSAF7            GET NEXT PARAMETER                   91731900
         SPACE 3                                                     R4 91732000
RJBPSAF5 LA    R15,$SIDAFF-(QSESIAFF-QSEDSECT)  SET INPUT AFFINITY      91732100
         SPACE 1                                                     R4 91732200
RJBPSAF6 OC    RDRSIAFF,QSESIAFF   ADD SYSTEM'S AFFINITY BIT            91732300
         SPACE 1                                                     R4 91732400
RJBPSAF7 LA    R1,4(,R1)           STEP TO NEXT PARAMETER               91732500
         CLI   0(R1),0             TEST                                 91732600
         BNE   RJBPSAF1            SCAN NEXT PARAMETER IF NOT DONE      91732700
         TM    RDRSIAFF,QUESYSAF   TEST FINAL AFFINITY                  91732800
         BNZ   ROPSHIFT            BRANCH IF LEGITIMATE AFFINITY        91732900
         DROP  R15                 DROP QSE ADDRESSABILITY              91733000
         EJECT                                                       R4 91733100
RILLJOBP OI    RCARDLRC,LRC1ONUL+RDLMSKIP SET INTERNAL GEN     @OZ30530 91734000
         BAL   RL1,RPUT            ADD MESSAGE TO OUTPUT FILE  @OZ30530 91734800
         OI    RCARDLRC,LRC1CCTL+LRC1TASA SET ASA CAR CONTROL  @OZ30530 91735500
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 91736000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 91738000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 91740000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 91741000
         MVC   (79-24)/2(24,RPI),RJINVLID+4  MOVE IN ERROR MESSAGE   R4 91742000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     91744000
        $WTO   RJINVLID,L'RJINVLID,JOB=YES,               ISSUE ERROR  C91746000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST         MESSAGE     91748000
         BAL   RL1,RJOBKILL        KILL JOB                             91750000
         LA    RL2,RFLTEST         LOAD ADDRESS OF EXIT                 91752000
        $RETURN                     AND RETURN                          91754000
         EJECT                                                          91756000
*                                                                       91758000
*                             HASP JOBPARM SCAN TABLE                   91760000
*                                                                       91762000
         SPACE 3                                                        91764000
RJPTABLE DS    0F                                                       91766000
         DC    CL7'  BURST',C'B'   JOB OUTPUT BURST OPTION          R41 91767000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,1)                           R41 91767200
         DC    AL2(JCTWORK+31-JCTDSECT)                             R41 91767300
         DS    0F                                                   R41 91767400
         DC    CL7'  CARDS',C'C'   ESTIMATED CARD COUNT                 91768000
         DC    AL1(RSCFLBIN+1,4),AL2(JCTESTPU-JCTDSECT)                 91770000
         DS    0F                                                       91772000
         DC    CL7' COPIES',C'N'   JOB COPY COUNT                       91774000
         DC    AL1(RSCFLBIN+1,1),AL2(JCTCPYCT-JCTDSECT)                 91776000
         DS    0F                                                       91778000
         DC    CL7'  FORMS',C'F'   JOB OUTPUT FORMS                     91780000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4),AL2(JCTFORMS-JCTDSECT)        91782000
         DS    0F                                                       91784000
         DC    CL7' LINECT',C'K'   LINES PER PAGE SPECIFICATION         91786000
         DC    AL1(RSCFLBIN+1,1),AL2(JCTLINCT-JCTDSECT)                 91788000
         DS    0F                                                       91790000
         DC    CL7'  LINES',C'L'   ESTIMATED LINE COUNT (THOUSANDS)     91792000
         DC    AL1(RSCFLBIN+1,4),AL2(JCTESTLN-JCTDSECT)                 91794000
         DS    0F                                                       91796000
         DC    CL7'  NOLOG',C'J'   NO HASP JOB LOG OPTION               91798000
         DC    AL1(0,JCTNOLOG),AL2(JCTJBOPT-JCTDSECT)                   91800000
         DS    0F                                                       91802000
         DC    CL7'PROCLIB',C'P'   PROCEDURE LIBRARY SPECIFICATION      91804000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,8),AL2(JCTPROCN-JCTDSECT)        91806000
         DS    0F                                                       91808000
         DC    CL7'   ROOM',C'R'   ROOM NUMBER                          91810000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4),AL2(JCTROOMN-JCTDSECT)        91812000
         DS    0F                                                       91812500
         DC    CL7' SYSAFF',C'S'   SYSTEM AFFINITY                      91813000
         DC    AL1(RSCFLEFT+RSCFLBLK+7,4),AL2(JCTWORK+1-JCTDSECT)    R4 91813500
         DS    0F                                                       91814000
         DC    CL7'   TIME',C'T'   ESTIMATED TIME (MINUTES)             91816000
         DC    AL1(RSCFLBIN+1,4),AL2(JCTETIME-JCTDSECT)                 91818000
         DS    0F                                                       91820000
         DC    CL7'RESTART',C'E'   JOB RESTART OPTION                R4 91820500
         DC    AL1(RSCFLEFT+RSCFLBLK+1,1),AL2(JCTWORK-JCTDSECT)      R4 91821000
         DS    0F                                                    R4 91821500
         DC    X'FF'               END OF JOBPARM SCAN TABLE            91822000
         EJECT                                                          91824000
*                                                                       91826000
*                             HASP OUTPUT CARD PROCESSING ROUTINE       91828000
*                                                                       91830000
*                              (FORMS CODE '*' FOR CONTINUATION)     R4 91831000
*                                                                    R4 91831100
ROTPCARD NULL                                                           91834000
         LTR   JCT,JCT             TEST FOR JOB                      R4 91836000
         BZ    RILLCCRD            IGNORE OUTPUT CARD IF NOT IN JOB     91838000
         OI    RCARDLRC,LRC1INUL+RDLMSKIP  INDICATE SUPERFLUOUS CARD R4 91840000
         BAL   RL1,RPUT            ADD OUTPUT CARD TO OUTPUT FILE       91842000
         TM    RDRSW,RJCLSW        TEST STATUS                          91844000
         BO    *+12                BRANCH IF JCL FILE                   91846000
         BAL   RL1,RPUT            TERMINATE DATA SET                   91848000
         OI    RDRSW,RJCLSW        SET JCL SWITCH                       91850000
         LA    RW,7(,RPI)          SET UP                               91852000
         LA    R14,1                REGISTERS                           91854000
         LA    R15,70(,RPI)          FOR CARD SCAN                      91856000
         BXH   RW,R14,RILLOUPT     SEARCH FOR                           91858000
         CLI   1(RW),C' '           START OF                            91860000
         BE    *-8                   FORMS CODE                         91862000
         MVC   JCTWORK(5),1(RW)    SET UP FORMS CODE                    91864000
         MVI   JCTWORK+5,X'BF'     ADD TERMINATOR                       91866000
         LA    R1,JCTWORK          SEARCH                               91868000
ROPSCAN  BXH   RW,R14,RILLOUPT      FOR                                 91870000
         LA    R1,1(,R1)             FIRST                              91872000
         TM    0(R1),X'BF'            BLANK                             91874000
         BM    ROPSCAN             BRANCH IF NOT BLANK                  91876000
         BO    RILLOUPT            BRANCH IF MORE THAN FOUR CHARACTERS  91878000
         MVC   1(2,R1),0(R1)       BLANK FILL                           91880000
         SLR   RL1,RL1             SET DEFAULT LEFT INDEX            R4 91882000
         SPACE 1                                                     R4 91882100
         CLC   RSTAR,JCTWORK       TEST FOR CONTINUATION ('* ')      R4 91882200
         BNE   ROPCLEAR            BR IF NOT                         R4 91882300
         L     R1,RDROCT           GET OCR ADDRESS                   R4 91882400
         LTR   R1,R1               CONTINUATION ILLEGAL IF           R4 91882500
         BZ    RILLOUPT             FIRST /*OUTPUT CARD              R4 91882600
         SPACE 1                                                     R4 91882700
         L     RL2,OCTOCROF-OCTDSECT(,R1)  BACK-UP                   R4 91882900
         LA    R0,OCRLENG                   OCR OFFSET               R4 91883000
         SLR   RL2,R0                        FOR LATER UPDATE        R4 91883100
         ST    RL2,OCTOCROF-OCTDSECT(,R1)     AT ROPTADD             R4 91883200
         ALR   RL2,R1                      REFRESH                   R4 91883300
         MVC   JCTWORK(OCRLENG),0(RL2)      OCR AREA                 R4 91883400
         SPACE 1                                                     R4 91883500
         USING OCRDSECT,RL2        PROVIDE OCR ADDRESSABILITY        R4 91883600
         LA    RL2,JCTWORK         ADDRESS OCR AREA                  R4 91883700
         SPACE 1                                                     R4 91883800
         TM    OCRINDEX,X'40'      REFRESH                           R4 91883900
         BZ    ROPKSCAN             LEFT-                           R41 91884000
         IC    RL1,OCRINDEX          INDEX                           R4 91884100
         MVI   OCRINDEX,0             VALUE                          R4 91884200
         B     ROPKSCAN            BYPASS CLEAR                     R41 91884300
         EJECT                                                      R41 91884400
ROPCLEAR LA    RL2,JCTWORK         ADDRESS OCR AREA                 R41 91884500
         XC    OCRCODE+4(OCRLENG-4),OCRCODE+4  CLEAR OCR AREA       R41 91884600
         MVI   OCRCPTN,X'FF'       SET DEFAULT COMPACTION NUMBER    R41 91884700
         SPACE 1                                                    R41 91884800
ROPKSCAN XC    ROWAREA,ROWAREA     CLEAR SCANNER WORK AREA          R41 91884900
         STC   RL1,ROWLINDX        SET INITIAL LEFT INDEX VALUE      R4 91885000
         LA    R1,ROPTABLE         GET ADDRESS OF OUTPUT SCAN TABLE     91886000
         BAL   RL1,RKEYSCAN        SCAN PARAMETERS                      91888000
         B     RILLOUPT            ILLEGAL OUTPUT CARD       (+0)   R41 91888400
         SPACE 1                                                    R41 91888800
         LA    RL2,JCTWORK         SET OCR ADDRESS REGISTER  (+4)   R41 91889000
         CLI   OCRCPTN,X'FF'       DEFAULT COMPACTION NUMBER...     R41 91889400
         BE    ROPBURST            BR IF YES                        R41 91889800
         CLI   OCRCPTN,99          VALID COMPACTION NUMBER          R41 91890000
         BH    RILLOUPT             RANGE IS 0-99                   R41 91890200
         SPACE 1                                                    R41 91890400
ROPBURST CLI   ROWBURST,0          TEST FOR BURST OPTION            R41 91890600
         BE    ROPDEX              BR IF NOT                        R41 91890800
         NI    OCRFLAGS,255-OCRBRSTY-OCRBRSTN  RESET BURST FLAGS    R41 91891000
         CLI   ROWBURST,C'Y'       TEST FOR BURST=Y                 R41 91891200
         BNE   ROPNBURS            BR IF NOT                        R41 91891400
         OI    OCRFLAGS,OCRBRSTY    ELSE SET BURST=Y FLAG           R41 91891600
         B     ROPDEX                AND CONTINUE                   R41 91891800
         SPACE 1                                                    R41 91892000
ROPNBURS CLI   ROWBURST,C'N'       TEST FOR BURST=N                 R41 91892200
         BNE   RILLOUPT            ILLEGAL IF NOT                   R41 91892400
         OI    OCRFLAGS,OCRBRSTN    ELSE SET BURST=N FLAG           R41 91892600
         SPACE 1                                                    R41 91892800
ROPDEX   NI    OCRINDEX,X'3F'      RESET                            R41 91893000
         NI    ROWLINDX,X'3F'       HI-ORDER BITS                    R4 91896000
         CLI   ROWLINDX,0          TEST FOR LEFT INDEX               R4 91898000
         BE    ROPINDEX            BRANCH IF NO LEFT INDEX              91900000
         CLI   OCRINDEX,0          TEST FOR RIGHT INDEX              R4 91902000
         BNE   RILLOUPT            ILLEGAL IF BOTH ARE SPECIFIED        91904000
         MVC   OCRINDEX,ROWLINDX   RESET INDEX                       R4 91906000
         OI    OCRINDEX,X'C0'      INDICATE LEFT INDEX               R4 91908000
         EJECT                                                       R4 91910000
ROPINDEX TM    OCRINDEX,X'20'      TEST INDEXING BYTE                R4 91912000
         BO    RILLOUPT            BRANCH IF ILLEGAL INDEX              91914000
         TM    OCRINDEX,X'1F'      TEST INDEXING BYTE                R4 91916000
         BZ    *+8                 BRANCH IF NO INDEX SPECIFIED         91918000
         XI    OCRINDEX,X'80'      INVERT HI-ORDER BIT               R4 91920000
         SPACE 1                                                     R4 91922000
         CLI   ROWDESTS,0          BYPASS DEST CONVERSIONS           R4 91922100
         BE    ROCTEST              IF NONE SPECIFIED                R4 91922200
         LA    R0,4                CONVERT DESTINATIONS TO ROUTE CODES  91924000
         LA    R1,ROWDESTS         GET ADDRESS OF DESTINATION VALUES R4 91926000
         LA    RW,OCRDEST1-OCRDSECT+JCTWORK  AND ROUTE CODES         R4 91928000
         XC    0(4*2,RW),0(RW)     CLEAR ROUTE CODES                 R4 91928100
         SPACE 1                                                     R4 91929000
         DROP  RL2                 KILL OCR ADDRESSABILITY           R4 91929500
         SPACE 1                                                     R4 91930000
ROPDEST1 CLI   0(R1),0             TEST NEXT FIELD                      91932000
         BE    ROCTEST             BR IF NO DESTINATION              R4 91934000
         BAL   RL1,RDESTSCN        CONVERT DESTINATION TO ROUTE CODE    91936000
         B     RILLOUPT            BRANCH IF INVALID DESTINATION        91938000
         LA    R1,8(,R1)           GET ADDRESS OF NEXT DESTINATION      91940000
         LA    RW,2(,RW)           GET ADDRESS OF NEXT ROUTE CODE       91942000
         BCT   R0,ROPDEST1         PROCESS NEXT DESTINATION             91944000
         SPACE 2                                                        91946000
ROPDEST2 L     R1,RDROCT           GET ADDR OF OUTPUT CONTROL TABLE  R4 91950000
ROCTEST  L     R1,RDROCT           GET OCT ADDRESS                   R4 91951000
         USING OCTDSECT,R1         ESTABLISH OCT ADDRESSABILITY         91952000
         LTR   R1,R1               TEST                                 91954000
         BNZ   ROPTADD             BRANCH IF OCT IS ALREADY ESTABLISHED 91956000
         SPACE 2                                                        91958000
ROPCHAIN BAL   RL2,RTRACK          GET TRACK ADDRESS FOR NEXT OCT       91964000
         LR    RW,R1               SAVE TRACK ADDRESS                   91966000
         L     R1,RDROCT           RESTORE OCT ADDRESS                  91968000
         LTR   R1,R1               TEST                                 91970000
         BNZ   ROPWRITE            BRANCH IF NOT FIRST OCT              91972000
         ST    RW,JCTOCTTR         SET TRACK ADDRESS OF FIRST OCT       91974000
         B     ROPGETB             GET BUFFER FOR FIRST OCT             91976000
         SPACE 1                                                     R4 91978000
ROPWRITE ST    RW,OCTOCTTR         SET TRACK ADDRESS OF NEXT OCT        91980000
         ST    R1,PCEBUFAD         SET OCT ADDRESS IN DCT               91982000
         MVC   PCESEEK,OCTTRACK    SET TRACK ADDRESS IN DCT             91984000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     91986000
        $EXCP  (R1)                INITIATE WRITE OF PREVIOUS OCT       91988000
         SPACE 1                                                     R4 91990000
ROPGETB $GETBUF WAIT=YES           GET BUFFER FOR NEXT OCT           R4 91992000
         EJECT                                                       R4 92000000
         ST    R1,RDROCT           SAVE ADDRESS OF OCT               R4 92002000
         XC    OCTSTART(OCTOCR-OCTSTART),OCTSTART  CLEAR OCT HEADER     92004000
         MVC   OCTID,ROCTID        SET OCT NAME                         92006000
         LH    R0,$BUFLENG         SET BLOCK                         R4 92008000
         STH   R0,OCTLENG           LENGTH                              92010000
         MVC   OCTJBKEY,JCTJBKEY   SET JOB KEY                          92012000
         ST    RW,OCTTRACK         SET TRACK ADDRESS                    92014000
         LA    RW,OCTOCR-OCTDSECT  SET INITIAL                          92016000
         ST    RW,OCTOCROF          OCR OFFSET                          92018000
         SPACE 2                                                        92020000
ROPTADD  L     RW,OCTOCROF         GET CURRENT OCR OFFSET               92022000
         LA    R0,OCRLENG(,RW)     INCREMENT                         R4 92024000
         CH    R0,OCTLENG          COMPARE WITH MAXIMUM LENGTH          92026000
         BH    ROPCHAIN            BRANCH IF OCR EXCEEDS SPACE IN OCT   92028000
         ALR   RW,R1               GET ADDRESS OF NEXT OCR ENTRY        92030000
         MVC   0(OCRLENG,RW),JCTWORK  MOVE OCR TO OCT                R4 92032000
         ST    R0,OCTOCROF         UPDATE OCR OFFSET                    92034000
         DROP  R1                  DROP OCT ADDRESSABILITY              92036000
         SPACE 1                                                    R41 92037000
*        ROPSHIFT - ENTRY POINT TO CONVERT CONTROL CARDS TO COMMENTS    92038000
         SPACE 1                                                    R41 92039000
ROPSHIFT MVC   JCTWORK(79),0(RPI)  CONVERT /* CARD                      92040000
         MVC   1(79,RPI),JCTWORK    TO //* CARD                     R41 92042000
         OI    RCARDLRC,LRC1ONUL   INDICATE INTERNALLY GENERATED     R4 92044000
         LA    RL2,RJCLCARD        LOAD ADDRESS OF EXIT                 92046000
        $RETURN                     AND RETURN                          92048000
         SPACE 5                                                        92050000
RILLOUPT OI    RCARDLRC,LRC1ONUL+RDLMSKIP SET INTERNAL GEN     @OZ30530 92052000
         BAL   RL1,RPUT            ADD MESSAGE TO OUTPUT FILE  @OZ30530 92052800
         OI    RCARDLRC,LRC1CCTL+LRC1TASA SET ASA CAR CONTROL  @OZ30530 92053000
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 92054000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 92056000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 92058000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 92059000
         MVC   (79-23)/2(23,RPI),ROINVLID+4  MOVE IN ERROR MESSAGE   R4 92060000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     92062000
        $WTO   ROINVLID,L'ROINVLID,JOB=YES,               ISSUE ERROR  C92064000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST         MESSAGE     92066000
         BAL   RL1,RJOBKILL        KILL JOB                             92068000
         LA    RL2,RFLTEST         LOAD ADDRESS OF EXIT                 92070000
        $RETURN                     AND RETURN                          92072000
         EJECT                                                          92074000
*                                                                       92076000
*                             HASP OUTPUT SCAN TABLE                    92078000
*                                                                       92080000
         SPACE 3                                                        92082000
ROPTABLE DS    0F                                                       92084000
         DC    CL7'  BURST',C'B'   DATA SET BURST SPECIFICATION      R4 92084100
         DC    AL1(RSCFLEFT+1,1)                                     R4 92084200
         DC    AL2(ROWBURST-JCTDSECT)                                R4 92084300
         DS    0F                                                    R4 92084400
         DC    CL7'  CHARS',C'X'   DATA SET CHARS SPECIFICATION      R4 92084500
         DC    AL1(RSCFLEFT+RSCFLBLK+4,4)                            R4 92084600
         DC    AL2(OCRCHAR1-OCRDSECT+JCTWORK-JCTDSECT)               R4 92084700
         DS    0F                                                    R4 92084800
         DC    CL7' COPIES',C'N'   DATA SET COPY COUNT                  92086000
         DC    AL1(RSCFLBIN+1,1)                                        92088000
         DC    AL2(OCRCOPY-OCRDSECT+JCTWORK-JCTDSECT)                   92090000
         DS    0F                                                       92092000
         DC    CL7'  COPYG',C'G'   DATA SET CPY GROUPS SPECIFICATION R4 92092100
         DC    AL1(RSCFLBIN+8,1)                                     R4 92092200
         DC    AL2(OCRCOPYG-OCRDSECT+JCTWORK-JCTDSECT)               R4 92092300
         DS    0F                                                    R4 92092400
         DC    CL7'   DEST',C'D'   DATA SET DESTINATION(S)              92094000
         DC    AL1(RSCFLEFT+RSCFLBLK+4,8)                               92096000
         DC    AL2(ROWDESTS-JCTDSECT)                                R4 92098000
         DS    0F                                                       92100000
         DC    CL7'    FCB',C'C'   DATA SET FCB SPECIFICATION           92102000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                               92104000
         DC    AL2(OCRFCB-OCRDSECT+JCTWORK-JCTDSECT)                    92106000
         DS    0F                                                       92108000
         DC    CL7'  FLASH',C'O'   FLASH (FORMS OVERLAY) SPECIF.     R4 92108100
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                            R4 92108200
         DC    AL2(OCRFLASH-OCRDSECT+JCTWORK-JCTDSECT)               R4 92108300
         DS    0F                                                    R4 92108400
         DC    CL7' FLASHC',C'Q'   FLASH COUNT (QUANTITY) SPECIF.    R4 92108500
         DC    AL1(RSCFLBIN+1,1)                                     R4 92108600
         DC    AL2(OCRFLSHC-OCRDSECT+JCTWORK-JCTDSECT)               R4 92108700
         DS    0F                                                    R4 92108800
         DC    CL7'  FORMS',C'F'   DATA SET FORMS SPECIFICATION         92110000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                               92112000
         DC    AL2(OCRFORMS-OCRDSECT+JCTWORK-JCTDSECT)                  92114000
         DS    0F                                                       92116000
         DC    CL7'  INDEX',C'I'   DATA SET INDEX SPECIFICATION         92118000
         DC    AL1(RSCFLBIN+1,1)                                        92120000
         DC    AL2(OCRINDEX-OCRDSECT+JCTWORK-JCTDSECT)                  92122000
         DS    0F                                                       92124000
         DC    CL7' LINDEX',C'L'   DATA SET LEFT INDEX SPECIFICATION    92126000
         DC    AL1(RSCFLBIN+1,1)                                        92128000
         DC    AL2(ROWLINDX-JCTDSECT)                                R4 92130000
         SPACE 2                                                     R4 92130100
*                                           (CONTINUED)              R4 92130200
         EJECT                                                       R4 92131000
         DS    0F                                                       92132000
         DC    CL7' MODIFY',C'Y'   DATA SET MODIFY SPECIFICATION     R4 92132100
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                            R4 92132200
         DC    AL2(OCRMODF-OCRDSECT+JCTWORK-JCTDSECT)                R4 92132300
         DS    0F                                                    R4 92132400
         DC    CL7' MODTRC',C'M'   MODIFY TRC SPECIFICATION          R4 92132500
         DC    AL1(RSCFLBIN+1,1)                                     R4 92132600
         DC    AL2(OCRMODFT-OCRDSECT+JCTWORK-JCTDSECT)               R4 92132700
         DS    0F                                                    R4 92132800
         DC    CL7'  RECNT',C'R'   DATA SET ESTIMATED RECORD COUNT      92134000
         DC    AL1(RSCFLBIN+1,4)                                        92136000
         DC    AL2(OCRRECNT-OCRDSECT+JCTWORK-JCTDSECT)                  92138000
         DS    0F                                                       92140000
         DC    CL7'    UCS',C'T'   DATA SET UCS SPECIFICATION           92142000
         DC    AL1(RSCFLEFT+RSCFLBLK+1,4)                               92144000
         DC    AL2(OCRUCS-OCRDSECT+JCTWORK-JCTDSECT)                    92146000
         DS    0F                                                       92148000
         DC    CL7'COMPACT',C'Z'   DATASET COMPACTION TABLE NUMBER  R41 92148500
         DC    AL1(RSCFLBIN+1,1)                                    R41 92148600
         DC    AL2(OCRCPTN-OCRDSECT+JCTWORK-JCTDSECT)               R41 92148700
         DS    0F                                                   R41 92148800
         DC    X'FF'               END OF OUTPUT SCAN TABLE             92150000
         SPACE 4                                                     R4 92150100
*                             OUTPUT SCAN WORK AREA DEFINITIONS      R4 92150200
         SPACE 3                                                     R4 92150300
JCTDSECT DSECT                                                       R4 92150400
         ORG   JCTWORK+OCRLENG     DEFINE SCAN WORK AREA             R4 92150500
ROWDESTS DS    0CL32                   DESTINATION VALUES            R4 92150600
ROWDEST1 DS    CL8                 1ST DESTINATION VALUE             R4 92150700
ROWDEST2 DS    CL8                 2ND DESTINATION VALUE             R4 92150800
ROWDEST3 DS    CL8                 3RD DESTINATION VALUE             R4 92150900
ROWDEST4 DS    CL8                 4TH DESTINATION VALUE             R4 92151000
ROWBURST DS    CL1                 BURST VALUE                       R4 92151100
ROWLINDX DS    XL1                 LEFT INDEX VALUE                  R4 92151200
ROWAREA  EQU   ROWDESTS,*-ROWDESTS WORK AREA EQUATE AND LENGTH       R4 92151300
         SPACE 1                                                     R4 92151400
HASPRDRO CSECT                                                       R4 92151500
         EJECT                                                          92152000
*********************************************************************** 92152100
*                                                                     * 92152200
*              RDESTSCN  -  DESTINATION CONVERSION SUBROUTINE         * 92152300
*                                                                     * 92152400
*                  OUTPUT  --  RW = ADDRESS OF BINARY DESTINATION     * 92152500
*                                                                     * 92152600
*                  INPUTS  --  R1 = ADDRESS OF DESTINATION            * 92152700
*                                                                     * 92152800
*                  FUNCTION  --  CONVERT DESTINATION TO ITS BINARY    * 92153000
*                                EQUIVALENT                           * 92153100
*                                                                     * 92153200
*                  RETURNS  --  RL1+0 = ERROR RETURN                  * 92153300
*                               RL1+4 = NORMAL RETURN                 * 92153400
*                                                                     * 92153500
*                  EXTERNAL ROUTINE  --  $SVDEST                      * 92153600
*                                                                     * 92153700
*********************************************************************** 92153800
         SPACE 3                                                     R4 92153900
RDESTSCN NULL                                                        R4 92154000
         TM    0(R1),X'BF'         TEST FIRST BYTE OF DESTINATION    R4 92154100
         BZR   RL1                 ERROR IF ZERO OR BLANK            R4 92154200
         MVC   RDEST,0(R1)         MOVE DESTINATION TO WORK AREA     R4 92154300
         MVI   RDEST+8,C' '        SET SCAN TERMINATOR               R4 92154600
         LA    R15,RDEST           SCAN                              R4 92154700
SKIP80   LA    R15,1(,R15)          FOR                              R4 92154800
         CLI   0(R15),C' '           FIRST                           R4 92154900
         BNE   SKIP80                 BLANK                          R4 92155000
         MVC   1(6,R15),0(R15)     BLANK OUT REST OF DESTINATION     R4 92155100
         STM   R0,R11,PCER0        SAVE REGISTERS                    R4 92155200
         L     R1,PCEDCT           GET ADDRESS OF DCT          @OZ32566 92155300
         SLR   R2,R2                   SET UP                        R4 92155400
         IC    R2,DCTSYS-DCTDSECT(,R1)  SYSTEM ID                    R4 92155600
         LA    R1,RDEST            GET ADDRESS OF DESTINATION        R4 92156000
         L     R11,$SSVT           GET ADDRESS OF SSVT               R4 92156100
         L     R15,$SVDEST-SSVT(,R11)  GET ADDRESS OF ROUTINE        R4 92156200
         BALR  R14,R15             CONVERT NAME TO ROUTE CODE        R4 92156300
         B     RDESTERR            ERROR RETURN                      R4 92156400
         LR    R15,R2              NORMAL RETURN, MOVE CODE TO R15   R4 92156500
         LM    R0,R11,PCER0        RESTORE REGISTERS                 R4 92156600
         STH   R15,0(,RW)          SET ROUTE CODE                    R4 92156700
         B     4(,RL1)              AND RETURN                       R4 92156800
         SPACE 3                                                     R4 92156900
RDESTERR LM    R0,R11,PCER0        RESTORE REGISTERS                 R4 92157000
         BR    RL1                 ERROR RETURN                      R4 92157100
         EJECT                                                       R4 92157200
RILLCCRD LA    RL2,RNOTCCRD        LOAD ADDRESS OF EXIT                 92290000
        $RETURN                     AND RETURN                          92292000
         SPACE 10                                                       92292100
*                                                                       92292200
*                             CONTROL CARD SCAN CONSTANTS               92292300
*                                                                       92292400
         SPACE 3                                                        92292500
RH10     DC    H'10'               CONSTANT                             92292800
ROCTID   DC    CL4'OCT'            OCT IDENTIFIER                       92293000
RANY     DC    CL4'ANY'            SYSTEM AFFINITY CONSTANTS            92293100
RIND     DC    CL4'IND'            *                                    92293200
RSTAR    DC    CL2'*'              *                                    92293300
RPRINT   DC    CL6'PRINT'          ROUTE CONSTANTS                      92293400
RPUNCH   DC    CL6'PUNCH'          *                                    92293500
RRMT     DC    CL3'RMT'            *                                 R4 92294000
         SPACE 3                                                     R4 92294200
RCOMASK  $WTO  ,69,MF=LX,TYPE=SVC34,JOB=NO,ROUTE=B'1100000000000000' R4 92294300
         EJECT                                                       R4 92295000
*                                                                       92296000
*                             OPERATOR AND ERROR MESSAGES               92298000
*                                                                       92300000
         SPACE 3                                                        92302000
RCOMMSG  $MSG  120                 COMMAND MESSAGE NUMBER               92304000
RRILEGAL $MSG  111,'-- INVALID /*ROUTE CARD '                           92306000
ROUTCODE EQU   *-13,7              /*ROUTE EBCDIC CONSTANT              92308000
RSETHMSG $MSG  102,'HELD FOR THE FOLLOWING VOLUME(S) --'                92310000
RSETMSG  $MSG  103                 SETUP MESSAGE NUMBER                 92312000
RMSGMSG  $MSG  104                 MESSAGE MESSAGE NUMBER            R4 92312100
RJINVLID $MSG  112,'-- INVALID /*JOBPARM CARD '                      R4 92312200
ROINVLID $MSG  113,'-- INVALID /*OUTPUT CARD '                       R4 92312300
         SPACE 5                                                     R4 92312800
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY       R4 92312900
         TITLE 'HASP INPUT SERVICE -- DD * AND DD DATA SCAN ROUTINE' R4 92313000
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT           R4 92313100
HASPRDDS $ENTRY                    DEFINE DD*/DATA SCAN OVERLAY      R4 92313200
         CLI   5(RW),C' '          TEST NEXT COLUMN                  R4 92313300
         BE    RDDSCN14            BRANCH IF NO KEYWORD PARAMETERS   R4 92313400
         CLI   5(RW),C','          TEST AGAIN                        R4 92313500
         BNE   RDDSCER             BRANCH IF NOT BLANK OR COMMA      R4 92313600
         LA    R14,1               RESTORE SCAN INCREMENT            R4 92313700
         BCTR  RW,0                PREPARE TO SCAN REST OF DD CARD   R4 92313800
         SPACE 2                                                     R4 92313900
RDDSCAN1 LA    R15,64(,RPI)        SET LIMIT FOR DD CARD SCAN        R4 92314000
         SPACE 1                                                     R4 92314100
RDDSCAN2 CLI   6(RW),C' '          SEARCH FOR END OF CARD            R4 92314200
         BE    RDDSCN12            BRANCH IF BLANK ENCOUNTERED       R4 92314300
         BXH   RW,R14,RDDSCN12     ADVANCE TO NEXT COLUMN            R4 92314400
         CLC   RDDSCDLM,1(RW)      TEST FOR DLM KEYWORD              R4 92314500
         BNE   RDDSCAN2            BRANCH IF NOT DLM KEYWORD         R4 92314600
         CLI   5(RW),C','          TEST FIRST CHARACTER              R4 92314700
         BE    RDDSCAN2            IGNORE DLM IF COMMA               R4 92314800
         LA    RW,1(,RW)           ADVANCE TO NEXT COLUMN            R4 92314900
         CLI   4(RW),C''''         TEST FOR APOSTROPHE               R4 92315000
         BNE   RDDSCAN9            BRANCH IF NOT APOSTROPHE          R4 92315100
         BXH   RW,R14,RDDSCN15     ADVANCE TO NEXT COLUMN            R4 92315200
         LH    R0,4(,RW)           GET TENATIVE DELIMITER            R4 92315300
         CLI   4(RW),C'&&'         TEST FIRST CHARACTER              R4 92315400
         BNE   RDDSCAN3            BRANCH IF NOT AMPERSAND           R4 92315500
         CLI   5(RW),C'&&'         TEST NEXT CHARACTER               R4 92315600
         BNE   RDDSCAN6            BRANCH IF NOT DOUBLE AMPERSAND    R4 92315700
         CLI   6(RW),C''''         TEST NEXT CHARACTER               R4 92315800
         BNE   RDDSCAN4            BRANCH IF NOT APOSTROPHE          R4 92315900
         CLI   7(RW),C''''         TEST NEXT CHARACTER               R4 92316000
         BE    RDDSCAN4            BRANCH IF DOUBLE APOSTROPHE       R4 92316100
         SPACE 1                                                     R4 92316200
RDDSCAN3 CLI   4(RW),C''''         TEST FIRST CHARACTER              R4 92316300
         BNE   RDDSCAN5            BRANCH IF NOT APOSTROPHE          R4 92316400
         CLI   5(RW),C''''         TEST NEXT CHARACTER               R4 92316500
         BNE   RDDSCN15            ILLEGAL IF NOT APOSTROPHE         R4 92316600
         SPACE 1                                                     R4 92316700
RDDSCAN4 BXH   RW,R14,RDDSCN15     SKIP OVER REDUNDANT CHARACTER     R4 92316800
         IC    R0,5(,RW)           REPLACE 2ND CHARACTER OF DLM      R4 92316900
RDDSCAN5 CLI   5(RW),C'&&'         TEST SECOND CHARACTER             R4 92317000
         BNE   RDDSCAN6            BRANCH IF NOT AMPERSAND           R4 92317100
         CLI   6(RW),C'&&'         TEST NEXT CHARACTER               R4 92317200
         BE    RDDSCAN7            BRANCH IF SECOND AMPERSAND        R4 92317300
         SPACE 1                                                     R4 92317400
RDDSCAN6 CLI   5(RW),C''''         TEST SECOND CHARACTER             R4 92317500
         BNE   RDDSCAN8            BRANCH IF NOT APOSTROPHE          R4 92317600
         CLI   6(RW),C''''         TEST NEXT CHARACTER               R4 92317700
         BNE   RDDSCN15            ILLEGAL IF NOT APOSTROPHE         R4 92317800
         SPACE 1                                                     R4 92317900
RDDSCAN7 BXH   RW,R14,RDDSCN15     SKIP OVER REDUNDANT CHARACTER     R4 92318000
         SPACE 1                                                     R4 92318100
RDDSCAN8 CLI   6(RW),C''''         TEST FOR TERMINATING APOSTROPHE   R4 92318200
         BNE   RDDSCN15            IGNORE IF INVALID SYNTAX          R4 92318300
         LA    RW,1(,RW)           ADVANCE TO NEXT COLUMN            R4 92318400
         B     RDDSCN10            TEST NEXT CHARACTER               R4 92318500
         SPACE 3                                                     R4 92318600
RDDSCAN9 CLI   5(RW),C' '          TEST SECOND CHARACTER             R4 92318700
         BE    RDDSCN15            ILLEGAL IF BLANK                  R4 92318800
         CLI   5(RW),C','           OR                               R4 92318900
         BE    RDDSCN15              COMMA                           R4 92319000
         LH    R0,4(,RW)           GET DELIMITER                     R4 92319100
RDDSCN10 CLI   6(RW),C' '          TEST NEXT CHARACTER               R4 92319200
         BE    RDDSCN11            ILLEGAL IF NOT BLANK              R4 92319300
         CLI   6(RW),C','           OR                               R4 92319400
         BNE   RDDSCN15              COMMA                           R4 92319500
         SPACE 1                                                     R4 92319600
RDDSCN11 STH   R0,RDRDLM           SET DELIMITER SPECIFIED           R4 92319700
         OI    RCARDLRC,RDLMSKIP   BYPASS DLM TEST                   R4 92319800
         B     RDDSCAN2            CONTINUE SCAN                     R4 92319900
         SPACE 3                                                     R4 92320000
RDDSCN12 CLI   5(RW),C','          TEST LAST CHARACTER               R4 92320100
         BNE   RDDSCN14            BRANCH IF NOT A COMMA             R4 92320200
         BAL   RL1,RCONTNUE        GET CONTINUATION CARD             R4 92320300
         B     RDDSCN15            BRANCH IF ILLEGAL CONTINUATION    R4 92320400
         B     RDDSCAN1            SCAN NEXT CARD                    R4 92320500
         SPACE 3                                                     R4 92320600
RDDSCN13 BAL   RL1,RCONTNUE        GET CONTINUATION CARD             R4 92320700
         B     RDDSCN15            BRANCH IF ILLEGAL CONTINUATION    R4 92320800
         SPACE 2                                                     R4 92320900
RDDSCN14 CLI   71(RPI),C' '        TEST COLUMN 72                    R4 92321000
         BNE   RDDSCN13            BRANCH IF CONTINUATION INDICATED  R4 92321100
         B     RDDSCEND            PROCESS DD CARD                   R4 92321200
         SPACE 3                                                     R4 92321300
RDDSCN15 NI    RDRSW,255-RNOSCAN   RESET EFFECT OF DD DATA           R4 92321400
         SPACE 2                                                     R4 92321500
RDDSCEND LTR   JCT,JCT             TEST FOR JOB                      R4 92321600
         BZ    RDDRESET            BRANCH IF FLUSHING                R4 92321700
         TM    RDRSW,RSYSINSW      TEST FOR GENERATED DD *           R4 92321800
         BZ    SKIP130             BRANCH IF NOT                     R4 92321900
         OI    RCARDLRC,LRC1ONUL   INDICATE INTERNALLY GENERATED     R4 92322000
SKIP130  BAL   RL1,RPUT            ADD CARD TO OUTPUT FILE           R4 92322100
         NI    RDRSW,255-RJCLSW    RESET JCL SWITCH                  R4 92322200
         SPACE 2                                                     R4 92322300
         USING SCRTEXT,RPI         SET ADDRESSABILITY TO SCR         R4 92322400
         ST    RPI,RSAVE2          SAVE ADDRESS OF CURRENT CARD      R4 92322500
         LA    RPI,RMESSAGE        GET ADDRESS OF CONTROL RECORD     R4 92322600
         MVI   SCRIRCFM,DCBRECF    SET UP CONTROL RECORD             R4 92322700
         MVC   SCRILRCL,RCARDLRL   SET RECORD LENGTH                 R4 92322800
         TM    RINFLAG1,LRC1CCTL   TEST RECORD CHARACTERISTICS       R4 92322900
         BZ    RCRNOCTL            BRANCH IF NO CARRIAGE CONTROL     R4 92323000
         OI    SCRIRCFM,DCBRECCA   ASSUME ASA CARRIAGE CONTROL       R4 92323100
         TM    RINFLAG1,LRC1TASA   TEST CARRIAGE CONTROL TYPE        R4 92323200
         BO    SKIP140             BRANCH IF ASA                     R4 92323300
         XI    SCRIRCFM,DCBRECCA+DCBRECCM  NO, MUST BE MACHINE       R4 92323400
SKIP140  SLR   R1,R1               ZERO FOR NEXT INSTRUCTION         R4 92323500
         IC    R1,SCRILRCL         INCREMENT                         R4 92323600
         LA    R1,1(,R1)            LOGICAL RECORD LENGTH            R4 92323700
         STC   R1,SCRILRCL           TO INCLUDE CARRIAGE CONTROL     R4 92323800
         SPACE 1                                                     R4 92323900
RCRNOCTL LH    R1,JCTPDDBK         GET DATA SET NUMBER               R4 92324000
         LA    R1,1(,R1)           INCREMENT                         R4 92324100
         STH   R1,JCTPDDBK         UPDATE DATA SET NUMBER            R4 92324200
         STCM  R1,3,SCRIDSKY       SET IN CONTROL RECORD             R4 92324300
         BAL   RL2,RTRACK          GET TRACK ADDR FOR 1ST DATA BLOCK R4 92324400
         STCM  R1,15,SCRIMTTR      SAVE TRACK ADDR IN CONTROL RECORD R4 92324500
         MVI   SCRITERM,X'FF'      TERMINATE                         R4 92324600
         MVC   SCRIBLNK,RKBLANKS     CONTROL RECORD                  R4 92324700
         OI    RCARDLRC,LRC1INUL+LRC1ONUL+RDLMSKIP  INDICATE CONTROL R4 92324800
         MVC   SCRISAVE,RCARDLRL   SAVE RECORD LENGTH                R4 92324900
         MVI   RCARDLRL,9          SET CONTROL RECORD LENGTH         R4 92325000
         BAL   RL1,RPUT            ADD CONTROL RECORD TO OUTPUT FILE R4 92325100
         MVC   RCARDLRL,SCRISAVE   RESTORE RECORD LENGTH             R4 92325200
         SPACE 1                                                     R4 92325300
         OI    RCARDLRC,RDLMSKIP   FORCE SYSIN COUNT BYPASS          R4 92325400
         MVC   RBOEND,RBONEXT      FORCE END-OR-BUFFER               R4 92325500
         DROP  RPI                                                   R4 92325600
         L     RPI,RSAVE2          RESTORE ADDR OF CURRENT CARD      R4 92325700
         BAL   RL1,RPUT            TERMINATE BUFFER                  R4 92325800
         L     R1,RDROBUF          RESET                             R4 92325900
         LA    RW,ROBUFST(,R1)      OUTPUT                           R4 92326000
         ST    RW,RBONEXT            POINTER                         R4 92326100
         MVC   RJCLTRAK,RBUFTRK(R1)  SAVE NEXT JCL TRACK ADDRESS     R4 92326200
         USING SCRTEXT,RL1         SET ADDRESSIBILITY FOR SCR        R4 92326300
         LA    RL1,RMESSAGE        GET ADDRESS OF SCR RECORD         R4 92326400
         MVC   RBUFTRK(,R1),SCRIMTTR   SET DATA BLOCK TRACK ADDRESS  R4 92326500
         SPACE 1                                                     R4 92326600
         L     RW,RDRIOT           GET ADDRESS OF FIRST IOT          R4 92326700
         USING IOTDSECT,RW         ESTABLISH IOT ADDRESSABILITY      R4 92326800
SKIP160  ICM   R1,15,IOTIOT        FIND                              R4 92326900
         BZ    SKIP150              END OF                           R4 92327000
         LR    RW,R1                 IOT                             R4 92327100
         B     SKIP160                CHAIN                          R4 92327200
SKIP150  L     R1,IOTPDDBP         GET PDDB DISPLACEMENT             R4 92327300
         LA    RL2,PDBLENG(,R1)    COMPARE NEW DISPLACEMENT          R4 92327400
         CH    RL2,IOTLENG          WITH MAXIMUM                     R4 92327500
         BNH   RPDDBBLD            BRANCH IF ROOM FOR PDDB IN IOT    R4 92327600
         SPACE 1                                                     R4 92327700
         BAL   RL2,RTRACK          GET TRACK ADDRESS FOR NEW IOT     R4 92327800
         ST    R1,IOTIOTTR         SET IOT CHAIN TRACK ADDRESS       R4 92327900
        $GETBUF WAIT=YES           GET BUFFER FOR NEW IOT            R4 92328000
         ST    R1,IOTIOT           SET IOT CHAIN ADDRESS             R4 92328500
         LA    R0,IOTSTART-IOTDSECT(,R1)  GET ADDRESS                R4 92328600
         LH    R1,$BUFSIZE                 AND LENGTH OF IOT FIELDS  R4 92328700
         SLR   R15,R15             SET TO ZERO FOR CLEARING          R4 92328800
         MVCL  R0,R14               AND CLEAR THE IOT                R4 92328900
         LR    R1,RW               SAVE ADDRESS OF PREVIOUS IOT      R4 92329000
         L     RW,IOTIOT           GET ADDRESS OF NEW IOT            R4 92329100
         MVC   IOTID(IOTTRACK-IOTID),IOTID-IOTDSECT(R1)  INITIALIZE  R4 92329200
         MVI   IOTFLAG1,0                                 NEW IOT    R4 92329300
         MVC   IOTTRACK,IOTIOTTR-IOTDSECT(R1)              FROM OLD  R4 92329400
         L     R1,$IOTPDDB         SET DISPLACEMENT                  R4 92329500
         ST    R1,IOTPDDBP           OF FIRST AVAILABLE PDDB         R4 92329600
         SPACE 1                                                     R4 92329700
RPDDBBLD ALR   RW,R1               GET ADDRESS OF PDDB               R4 92329800
         USING PDBDSECT,RW         ESTABLISH PDDB ADDRESSABILITY     R4 92329900
         MVC   0(PDBLENG,RW),RPDBMODL  CONSTRUCT                     R4 92330000
         MVI   PDBFLAG1,PDB1NSOT        PDDB                         R4 92330100
         MVC   PDBRECFM,SCRIRCFM         FOR EACH                    R4 92330200
         MVC   PDBLRECL+1(1),SCRILRCL     INPUT                      R4 92330300
         MVC   PDBMTTR,SCRIMTTR            DATA SET                  R4 92330400
         DROP  RL1                                                   R4 92330500
         LH    R1,JCTPDDBK         GET DATA SET NUMBER               R4 92330600
         STH   R1,PDBDSKEY         SET DATA SET NUMBER IN PDDB       R4 92330700
         MVC   PDBCLASS,JCTMCLAS   SET CLASS TO MSGCLASS             R4 92330800
         MVC   PDBRECCT,JCTJOBIN   INITIALIZE CARD COUNT             R4 92330900
         MVC   PDBFORMS,JCTFORMS   INITIALIZE FORMS TO JOB FORMS     R4 92331000
         DROP  RW                  DROP PDDB ADDRESSABILITY          R4 92331100
         STH   R1,RDRDSKEY         SET DATA SET KEY                  R4 92331200
         L     RW,RDROBUF          GET ADDRESS OF OUTPUT BUFFER      R4 92331300
         STH   R1,HDBPDDBK-BUFDSECT(,RW)  CORRECT FIRST DATA BUFFER  R4 92331400
         LA    RL2,RNXTCRD         SET UP EXIT                       R4 92331500
         B     RDDRETN              TO GET NEXT CARD                 R4 92331600
         SPACE 2                                                     R4 92331700
RDDSCER  NI    RDRSW,255-RNOSCAN   TURN ON CARD SCAN                 R4 92331800
         B     RDDFLTST             AND IGNORE STATEMENT             R4 92331900
         SPACE 2                                                     R4 92332000
RDDRESET NI    RDRSW,255-RJCLSW    RESET JCL SWITCH                  R4 92332100
RDDFLTST LA    RL2,RFLTEST         SET UP FLUSH EXIT                 R4 92332200
         SPACE 2                                                     R4 92332300
RDDRETN $RETURN                    RETURN TO MAIN PROCESSOR          R4 92332400
         EJECT                                                       R4 92332500
*                                                                    R4 92332600
*                             DD * AND DD DATA SCAN CONSTANTS        R4 92332700
*                                                                    R4 92332800
         SPACE 3                                                     R4 92332900
RDDSCDLM DC    CL4'DLM='           DLM KEYWORD                       R4 92333000
         SPACE 5                                                     R4 92333100
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY       R4 92333200
         TITLE 'HASP INPUT SERVICE -- JOB CARD SCAN ROUTINE'         R4 92333300
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT           R4 92333400
HASPRJCS $ENTRY                    DEFINE JOB CARD SCAN OVERLAY      R4 92333500
         ST    RW,RSAVE1           SAVE POINTER FOR JOB CARD SCAN    R4 92333600
         BAL   RL1,RJOBEND         TERMINATE PREVIOUS JOB            R4 92333700
         MVI   RDRSW2,0            ZERO JOB CARD SCAN SWITCHES       R4 92333800
         BAL   RL2,RGETBUF         GET A BUFFER FOR THE JCT             92334000
         L     JCT,RDROBUF         SET UP JCT ADDRESSABILITY         R4 92336000
         LA    R14,JCTSTART        GET ADDR OF START OF JCT FIELDS      92338000
         LH    R15,$BUFSIZE         AND LENGTH OF JCT FIELDS         R4 92340000
         SLR   R1,R1               SET TO ZERO FOR CLEARING             92342000
         MVCL  R14,R0               AND CLEAR THE JCT                   92344000
         BAL   RL2,RGETBUF         GET A BUFFER FOR THE IOT             92351200
         L     RL1,RDROBUF         RL1 = ADDRESS OF IOT              R4 92351300
         ST    RL1,RDRIOT          SAVE ADDRESS OF IOT               R4 92351400
         USING IOTDSECT,RL1        ESTABLISH IOT ADDRESSABILITY         92352000
         LA    R14,IOTSTART        GET ADDR OF START OF IOT FIELDS      92354000
         LH    R15,$BUFSIZE         AND LENGTH OF IOT FIELDS         R4 92356000
         SLR   R1,R1               SET TO ZERO FOR CLEARING             92358000
         MVCL  R14,R0               AND CLEAR THE IOT                   92360000
         OI    IOTMSTAB+(TABFLAG-TABDSECT),TABMASTR SHOW MASTER TAB  R4 92360100
        $TIME                      GET CURRENT TIME                     92362000
         STM   R0,R1,JCTRDRON      SET JOB ENTRY TIME AND DATE          92364000
         SPACE 2                                                        92366000
         MVC   JCTJNAME,2(RPI)     MOVE JOB NAME TO JCT                 92368000
         MVI   JCTJNAME+8,C' '     ADD BLANK TO TERMINATE SCAN          92370000
         LA    RW,JCTJNAME-1       SET UP FOR SCAN                      92372000
RJSETJN  LA    RW,1(,RW)           SCAN JOB NAME                        92374000
         CLI   0(RW),C' '           FOR FIRST BLANK                     92376000
         BNE   RJSETJN             BRANCH IF NOT BLANK                  92378000
         MVC   1(7,RW),0(RW)       BLANK OUT REST OF JOB NAME           92380000
         XC    JCTJNAME+8(8),JCTJNAME+8 CLEAR SUPERFLUOUS BLANKS        92382000
         SPACE 2                                                        92384000
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA    92385000
         L     R1,PCEDCT           GET ADDRESS OF READER DCT   @OZ32566 92386000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         92388000
         CLI   DCTJCLAS,CATSTCCL   TEST DEFAULT JOB CLASS               92390000
         BNE   RNOTSTC             BRANCH IF NOT STARTED TASK           92392000
         LH    RW,$STCNO           GET CURRENT STC NUMBER               92394000
         EJECT                                                       R4 92396000
RINCSTCN LA    RW,1(,RW)           INCREMENT                            92398000
         CL    RW,R20000           COMPARE WITH MAXIMUM NUMBER          92400000
         BL    *+8                 BRANCH IF MAXIMUM NOT REACHED        92402000
         L     RW,R10001           OVERFLOW, RESET TO 10001             92404000
        $QLOC  (RW)                TEST FOR DUPLICATE NUMBER            92406000
         BNZ   RINCSTCN            BRANCH IF DUPLICATE                  92408000
         STH   RW,$STCNO           UPDATE MASTER STC NUMBER             92410000
         MVC   RJOBVAR,RSTC        PRESET JOBID HEADER                  92412000
         B     RCRJOBID            CREATE JOBID                         92414000
         SPACE 1                                                        92416000
RNOTSTC  CLI   DCTJCLAS,CATTSUCL   TEST DEFAULT JOB CLASS               92418000
         BNE   RNOTTSU             BRANCH IF NOT LOGON               R4 92418100
         LH    RW,$TSUNO           GET CURRENT LOGON NUMBER             92422000
         SPACE 1                                                        92424000
RINCTSUN LA    RW,1(,RW)           INCREMENT                            92426000
         CL    RW,R30000           COMPARE WITH MAXIMUM NUMBER          92428000
         BL    *+8                 BRANCH IF MAXIMUM NOT REACHED        92430000
         L     RW,R20001           OVERFLOW, RESET TO 20001             92432000
        $QLOC  (RW)                TEST FOR DUPLICATE NUMBER            92434000
         BNZ   RINCTSUN            BRANCH IF DUPLICATE                  92436000
         STH   RW,$TSUNO           UPDATE MASTER LOGON NUMBER           92438000
         MVC   RJOBVAR,RTSU        PRESET JOBID HEADER                  92440000
         B     RCRJOBID            CREATE JOBID                         92442000
         SPACE 1                                                        92444000
RNOTTSU  LH    RW,$JOBNO           GET CURRENT USER JOB NUMBER       R4 92444200
         SPACE 1                                                        92448000
RINCJOBN LA    RW,1(,RW)           INCREMENT                            92450000
         CL    RW,R10000           COMPARE WITH MAXIMUM NUMBER          92452000
         BL    *+8                 BRANCH IF MAXIMUM NOT REACHED        92454000
         LA    RW,1                OVERFLOW, RESET TO 1                 92456000
        $QLOC  (RW)                TEST FOR DUPLICATE NUMBER            92458000
         BNZ   RINCJOBN            BRANCH IF DUPLICATE                  92460000
         STH   RW,$JOBNO           UPDATE MASTER JOB NUMBER             92462000
         MVC   RJOBVAR,=CL4'JOB'   PRESET JOBID HEADER               R4 92462200
         DROP  R1                  DROP DCT ADDRESSABILITY              92465000
         SPACE 1                                                        92466000
RCRJOBID CVD   RW,RTEMP            CONVERT JOB NUMBER TO DECIMAL     R4 92466200
         NI    RTEMP+5,X'0F'       FORCE JOB NUMBER MODULO 10000        92470000
         MVC   JCTJOBID,RMASK      SET EDIT MASK                        92472000
         ED    JCTJOBID,RTEMP+4    CONVERT JOB NUMBER TO EBCDIC         92474000
         MVC   JCTJOBID(4),RJOBVAR SET JOBID HEADER                     92476000
         EJECT                                                       R4 92484000
         XC    JCTWORK(JQELNGTH),JCTWORK  CLEAR JOB QUEUE ENTRY         92484100
         MVI   QUEPRIO+JCTWORK,X'FF'   SET FLUSH PRIORITY               92484200
         STH   RW,QUEJOBNO+JCTWORK     SET JOB NUMBER                   92484300
         MVC   QUEFLAGS+JCTWORK,$SIDBUSY  SET BUSY INDICATION           92485000
         L     RW,PCEDCT           RW = ADDRESS OF INPUT DCT   @OZ32566 92485500
         MVC   RDRSIAFF,DCTSIAFF-DCTDSECT(RW)  INITIALIZE AFFINITY   R4 92486000
         CLI   JCTJOBID,C'J'       TEST JOBID                        R4 92486500
         BE    RNOIND              BRANCH IF NOT STC OR TSU          R4 92487000
         TM    $STATUS,$INDMODE    TEST SYSTEM STATUS                R4 92487500
         BZ    RNOIND              BRANCH IF NOT INDEPENDENT MODE    R4 92488000
         OI    RDRSIAFF,QUEINDAF   SET INDEPENDENT AFFINITY          R4 92488500
         SPACE 1                                                     R4 92489000
RNOIND   MVC   QUEFLAG2+JCTWORK,RDRSIAFF  INITIALIZE AFFINITY        R4 92489500
        $TRACK IOTMSTAB            GET TRACK ADDRESS FOR JCT         R4 92489900
         ST    R1,QUETRAK+JCTWORK  SET JCT TRACK ADDRESS                92492000
         MVC   QUEDEVID+JCTWORK,DCTDEVID-DCTDSECT(RW)  SET DEVICE ID    92494000
         MVC   QUEJNAME+JCTWORK,JCTJNAME  MOVE JOB NAME TO JQE          92496000
         MVC   QUEPUNRT+JCTWORK,DCTNO-DCTDSECT(RW) SET INPUT RT     R41 92496100
         SPACE 2                                                        92498000
RJOBQUE $QADD  JCTWORK,$INPUT      ADD JOB QUEUE ENTRY                  92500000
         BNZ   RJCTINIT            BRANCH IF QUEUE IS NOT FULL          92502000
        $WAIT  JOB                 WAIT FOR A JOB QUEUE ELEMENT         92504000
         B     RJOBQUE             TRY AGAIN                            92506000
         SPACE 2                                                        92508000
RJCTINIT ST    R1,PCEJQE           SAVE JQE ADDRESS            @OZ32566 92510000
         SPACE 1                                                     R4 92511000
RJCTINT1 MVC   JCTID,RJCTID        SET JCT NAME                      R4 92512000
         LH    R1,$BUFLENG         SET BLOCK                         R4 92514000
         STH   R1,JCTLENG           LENGTH                              92516000
         SPACE 2                                                        92518000
         L     R1,$DATAKEY         GET MASTER PERIPHERAL DATA SET KEY   92520000
         AL    R1,RONE             INCREMENT                            92522000
         STCK  RTEMP               STORE CLOCK                          92524000
         BC    7,RSETKEY           BRANCH IF CLOCK IS NOT VALID         92526000
         CL    R1,RTEMP            COMPARE CLOCK WITH KEY               92528000
         BNL   RSETKEY             BRANCH IF CLOCK IS NOT GREATER       92530000
         L     R1,RTEMP            USE CLOCK AS DATA SET KEY            92532000
RSETKEY  ST    R1,$DATAKEY         UPDATE MASTER DATA SET KEY           92534000
         ST    R1,JCTJBKEY         STORE AS JOB KEY IN JCT              92536000
         MVI   JCTCNVRC+3,JCTCABND PRESET CONVERTER RETURN CODE         92538000
         EJECT                                                       R4 92540000
        $TRACK IOTMSTAB            GET TRACK ADDRESS FOR IOT         R4 92540100
         ST    R1,JCTIOT           SET TRACK ADDRESS OF 1ST IOT         92544000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 92546000
         SL    R1,$JOBQPTR         GENERATE RELATIVE ADDRESS            92548000
         ST    R1,JCTJQE           SET OFFSET OF JOB QUEUE ENTRY        92550000
         LA    R1,100              INITIALIZE                           92552000
         STH   R1,JCTPDDBK          PDDB KEY                            92554000
         CLI   RPRIORTY+1,C' '     TEST FOR PRIORITY CARD            R4 92558000
         BE    *+8                 BRANCH IF NOT                        92560000
         OI    JCTJBOPT,JCTPRICD   INDICATE PRIORITY CARD               92562000
         MVC   JCTPRTY,RPRIORTY    MOVE PRIORITY OR BLANKS TO JCT    R4 92563000
         L     R1,PCEDCT           R1 = ADDRESS OF INPUT DCT   @OZ32566 92564000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         92566000
         MVI   JCTPNAME,C' '                     SET PGMR NAME       R4 92567000
         MVC   JCTPNAME+1(L'JCTPNAME-1),JCTPNAME  FLD TO BLANKS      R4 92567200
         MVC   JCTMCLAS,DCTMCLAS   SET DEFAULT MESSAGE CLASS            92568000
         MVC   JCTJCLAS,DCTJCLAS   SET DEFAULT JOB CLASS                92570000
         MVC   JCTCLASS,JCTJCLAS   SET DEFAULT CLASS IN JMR             92571000
         MVI   JCTIPRIO,C'*'       SET PRIORITY CHARACTER            R4 92572000
         MVC   JCTROUTE,DCTNO      SET INPUT ROUTE CODE                 92574000
         MVC   JCTINDEV,DCTDEVN    SET INPUT DEVICE NAME                92576000
         LH    RW,$ESTIME          SET                               R4 92580000
         ST    RW,JCTETIME          DEFAULT                          R4 92581000
         LH    RW,$ESTLNCT           ESTIMATED                       R4 92582000
         ST    RW,JCTESTLN            EXECUTION TIME,                R4 92583000
         L     RW,$ESTPUN              LINE AND                      R4 92584000
         ST    RW,JCTESTPU              PUNCH OUTPUTS                R4 92585000
         CLI   JCTJOBID,C'J'       TEST JOB TYPE                     R4 92586000
         BE    SKIP200             BRANCH IF NOT STC OR TSU LOGON    R4 92587000
         MVC   JCTETIME(12),RSTUETIM  SET STC/TSU ESTIMATES          R4 92588000
SKIP200  MVC   JCTFORMS,$STDFORM   SET STANDARD FORMS                R4 92589000
         MVI   JCTCPYCT,1          SET DEFAULT COPY COUNT            R4 92590000
         MVC   JCTLINCT,$LINECT    SET DEFAULT PAGE LINE COUNT       R4 92591000
         MVC   JCTPROUT,DCTPRINT   SET PRINT AND                        92596000
         MVC   JCTPUOUT,DCTPUNCH    PUNCH ROUTE CODES                   92598000
         MVC   JCTPROCN,RSTDPROC   SET DEFAULT PROCEDURE NAME           92602000
         MVC   JCTJMRJN,JCTJNAME   SET JMR JOB NAME                     92606000
         MVC   JCTRDSID,$SID       SAVE SYSTEM ID FOR SMF TYPE 26       92608000
         MVC   JCTCPUID,$SID       SET JMR CPU ID FOR SMF EXITS         92610000
         MVC   JCTUSEID,RKBLANKS   BLANK OUT JMR USER IDENTIFICATION    92614000
         MVC   JCTINDC,DCTINDC     SET JMR SMF OPTIONS FROM DCT         92616000
         TM    PCEID,PCEINRID      TEST PROCESSOR TYPE                  92618000
         BO    RSETINDC            BRANCH IF INTERNAL READER            92620000
         CLI   PCEID+1,PCEXEQID    TEST PROCESSOR TYPE                  92622000
         BE    RSETINDC            BRANCH IF EXECUTION PROCESSOR        92624000
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE               R4 92624800
         BZ    RSETDVTP            BRANCH IF NOT REMOTE TERMINAL     R4 92625200
         TM    MDCTTYPE,DCTPSNA    CHECK FOR SNA REMOTE              R4 92629100
         BO    RSETINDC            BRANCH IF SNA REMOTE              R4 92629400
         L     R1,DCTDCB-DCTDSECT(,R1)  GET ADDRESS OF LINE DCT         92630000
RSETDVTP L     R15,DCTDCB          GET ADDRESS OF DCB                R4 92632000
         L     R15,DCBDEBAD-DCBDSECT(,R15)   GET ADDRESS OF DEB         92634000
         L     R15,DEBSUCBA-DEBDSECT(,R15)   GET ADDRESS OF UCB         92636000
         MVC   JCTRDR,UCBTYP+2-UCBDSECT(R15) SET READER DEVICE TYPE     92638000
         EJECT                                                       R4 92639000
RSETINDC MVC   JCTJMOPT,JCTINDC    SET SMF OPTIONS IN JMR               92640000
         MVC   IOTID,RIOTID        SET IOT NAME                         92642000
         LH    RW,$BUFLENG         GET LENGTH OF IOT                 R4 92644000
         STH   RW,IOTLENG           AND STORE IN IOT                    92646000
         MVI   IOTFLAG1,IOT1ALOC   SET UP IOT FLAGS                     92648000
         MVC   IOTJBKEY,JCTJBKEY   MOVE JOB KEY FROM JCT TO IOT         92650000
         MVC   IOTTRACK,JCTIOT     MOVE IOT TRACK ADDRESS TO IOT        92652000
         L     R1,$IOTPDDB         GET OFFSET OF 1ST PDDB            R4 92653000
         LA    RW,IOTPDBOD(,R1)    SET DISPLACEMENT                  R4 92654000
         ST    RW,IOTPDDBP          OF FIRST AVAILABLE PDDB          R4 92656000
         ALR   R1,RL1              POINT TO 1ST PDDB IN IOT          R4 92657000
         MVC   0*PDBLENG(1*PDBLENG,R1),RPDBMODL  INITIALIZE          R4 92658000
         MVC   1*PDBLENG(2*PDBLENG,R1),0(R1)      FIRST              R4 92658100
         MVC   3*PDBLENG(2*PDBLENG,R1),0(R1)       SIX               R4 92658200
         MVC   5*PDBLENG(1*PDBLENG,R1),0(R1)        PDDB'S           R4 92658300
         MVI   PDBFLAG1+0-PDBDSECT+IOTPDBOJ(R1),PDB1LOG  SET         R4 92664000
         MVI   PDBRECFM+0-PDBDSECT+IOTPDBOJ(R1),DCBRECF   UP         R4 92666000
         MVI   PDBLRECL+1-PDBDSECT+IOTPDBOJ(R1),80         JCL       R4 92668000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOJ(R1),PDBINJCL    PDDB     R4 92670000
         OI    PDBFLAG1+0-PDBDSECT+IOTPDBOL(R1),PDB1LOG        SET   R4 92672000
         MVI   PDBRECFM+0-PDBDSECT+IOTPDBOL(R1),DCBRECU+DCBRECCM UP  R4 92674000
         MVI   PDBLRECL+1-PDBDSECT+IOTPDBOL(R1),133         JOB LOG  R4 92676000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOL(R1),PDBOUHJL        PDDB R4 92678000
         MVI   PDBRECFM+0-PDBDSECT+IOTPDBOI(R1),DCBRECF  SET UP      R4 92680000
         MVI   PDBLRECL+1-PDBDSECT+IOTPDBOI(R1),90        JCL IMAGES R4 92682000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOI(R1),PDBOUJCI   PDDB      R4 92684000
         MVI   PDBRECFM+0-PDBDSECT+IOTPDBOM(R1),DCBRECV+DCBRECCA SET R4 92686000
         MVI   PDBLRECL+1-PDBDSECT+IOTPDBOM(R1),164        UP SYSTEM R4 92688000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOM(R1),PDBOUMSG   MSGS PDDB R4 92690000
         OI    PDBFLAG1+0-PDBDSECT+IOTPDBOT(R1),PDB1NSOT  SET UP INT R4 92692000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBOT(R1),PDBINTXT   TEXT PDDB R4 92694000
         OI    PDBFLAG1+0-PDBDSECT+IOTPDBON(R1),PDB1NSOT  SET UP JOB R4 92696000
         MVI   PDBDSKEY+1-PDBDSECT+IOTPDBON(R1),PDBINJNL   JNL PDDB  R4 92698000
         CLI   PCEID+1,PCEXEQID    TEST PROCESSOR TYPE                  92700000
         BE    RJOBRET             BRANCH IF EXECUTION PROCESSOR        92702000
         MVC   RDRDSKEY,RONE+2     SET JCL DATA KEY                     92704000
        $TRACK IOTMSTAB            GET TRACK ADDR FOR 1ST JCL BLOCK  R4 92704100
         LR    RW,R1               RW = FIRST TRACK ADDRESS             92708000
         BAL   RL2,RGETBUF         GET FIRST OUTPUT BUFFER              92710000
         L     R1,$IOTPDDB         GET OFFSET OF 1ST PDDB            R4 92711000
         ST    RW,PDBMTTR-PDBDSECT+IOTPDBOJ(R1,RL1)  SET JCL TRACK   R4 92712000
         SPACE 2                                                        92712800
         ST    JCT,PCEBUFAD        SET JCT BUFFER ADDRESS               92713000
         MVC   PCESEEK,QUETRAK+JCTWORK  SET JCT TRACK ADDRESS           92713200
         ST    SAVE,PCEIOEWF       PREVENT BUFFER RELEASE               92713400
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     92713600
        $EXCP  (R1)                INITIATE WRITE OF JCT                92713800
         ST    RL1,PCEBUFAD        SET IOT BUFFER ADDRESS               92714000
         MVC   PCESEEK,IOTTRACK    SET IOT TRACK ADDRESS                92714200
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     92714400
        $EXCP  (R1)                INITIATE WRITE OF IOT                92714600
         SLR   R1,R1               RESET DIRECT-ACCESS                  92714800
         ST    R1,PCEIOEWF          EVENT WAIT FIELD                    92715000
         DROP  RL1                 DROP IOT ADDRESSABILITY              92715200
         SPACE 2                                                        92716000
         MVC   72(8,RPI),JCTJOBID  SET HASP JOB ID IN COLS 73-80        92718000
         TM    PCEID,PCEINRID      IS THIS AN INTERNAL READER           92720000
         BZ    RJOBSCAN            BRANCH IF NOT                        92722000
         OI    JCTJBOPT,JCTINRDR   INDICATE INTERNAL READER             92724000
         L     R1,PCEDCT           R1 = ADDRESS OF INPUT DCT   @OZ32566 92726000
         MVC   RIDJOBID(3),72(RPI)      SET JOB NUMBER IN DCT           92728000
         PACK  RTEMP(3),75(5,RPI)        CHANGING                       92730000
         UNPK  RIDJOBID+3(5),RTEMP(3)     BLANKS TO ZEROS               92732000
         DROP  R1                  DROP DCT ADDRESSABILITY              92734000
         SPACE 2                                                        92736000
RJOBSCAN L     RW,RSAVE1           RESTORE POINTER FOR JOB CARD SCAN    92738000
         LA    R14,1               SET INCREMENT                        92740000
         LA    R15,65(,RPI)         AND LIMIT FOR SCAN                  92742000
         LA    R1,JCTWORK-1        ASSUME                               92744000
         ST    R1,RSAVE1            NO ACCOUNTING FIELD                 92746000
         BXH   RW,R14,RJOBCEND     FIND                                 92748000
         CLI   6(RW),C' '           START OF                            92750000
         BE    *-8                   ACCOUNTING FIELD                   92752000
         SPACE 2                                                        92754000
         LA    R0,L'JCTWORK        GET LENGTH OF ACCOUNTING FIELD AREA  92756000
         LA    R1,JCTWORK          GET ADDRESS OF ACCOUNTING FIELD AREA 92758000
         BAL   RL1,RJSCAN          SCAN ACCOUNTING FIELD                92760000
         BCT   R1,RJOBACCT         LEGITIMATE ACCOUNTING FIELD          92762000
         BCT   RW,RJOBSRCH         SCAN KEYWORDS                        92764000
         SPACE 2                                                        92766000
RJOBACCT ST    R1,RSAVE1           SAVE END ADDRESS FOR LATER SCAN      92768000
         LA    R0,L'JCTPNAME       GET LENGTH OF PROGRAMMER NAME AREA   92770000
         LA    R1,JCTPNAME         GET ADDRESS OF PROGRAMMER NAME AREA  92772000
         LA    RL1,RJSCAN          SCAN PROGRAMMER NAME                 92774000
         BALR  RL1,RL1              INDICATING APOSTROPHE COMPRESSION   92776000
         B     RJOBKYWD            BR IF VALID PROGRAMMER NAME FIELD R4 92778000
         MVI   JCTPNAME,C' '                     RESET PGMR NAME     R4 92780000
         MVC   JCTPNAME+1(L'JCTPNAME-1),JCTPNAME  FLD TO BLANKS      R4 92780200
         SPACE 1                                                     R4 92781000
RJOBKYWD BCTR  RW,0                BACK UP ONE CHARACTER             R4 92782000
         SPACE 2                                                        92784000
RJOBSRCH BCTR  RW,0                BACK UP                              92786000
         BCTR  RW,0                 TWO CHARACTERS                      92788000
         LA    R15,62(,RPI)        SET NEW END-OF-CARD LIMIT         R4 92788100
         SPACE 1                                                     R4 92791000
RJOBKEY  CLI   8(RW),C' '          TEST CURRENT CHARACTER               92792000
         BE    RJOBLANK            BRANCH IF BLANK                      92794000
         CLI   8(RW),C'='          TEST CURRENT CHARACTER               92796000
         BNE   RJOBINCR            BRANCH IF NOT EQUAL                  92798000
         SPACE 2                                                        92804000
         CLC   3(5,RW),RCLASS      TEST KEYWORD                         92806000
         BNE   RJOBTYPR            BRANCH IF NOT 'CLASS'                92808000
         CLI   9(RW),C'A'          TEST NEXT CHARACTER               R4 92808500
         BL    RJOBINCR            IGNORE IF NOT LEGAL CLASS         R4 92809000
         CLC   0(3,RW),RMSG        TEST KEYWORD                         92810000
         BE    RJOBMSGC            BRANCH IF 'MSGCLASS'                 92812000
         MVC   JCTJCLAS,9(RW)      SET JOB CLASS IN JCT                 92814000
         MVC   JCTCLASS,JCTJCLAS   SET CLASS IN JMR                     92815000
         B     RJOBINCR            FIND NEXT KEYWORD                    92816000
         SPACE 2                                                        92818000
RJOBMSGC MVC   JCTMCLAS,9(RW)      SET MSGCLASS IN JCT                  92820000
         SPACE 1                                                     R4 92822000
RJOBTYPR CLC   2(6,RW),RTYPRUN     TEST KEYWORD                         92824000
         BNE   RJOBNOTI            BRANCH IF NOT 'TYPRUN'               92826000
         CLC   9(4,RW),RHOLD       TEST VALUE                           92828000
         BNE   RJOBTRJH            BRANCH IF NOT 'TYPRUN=HOLD'       R4 92830000
         OI    JCTJBOPT,JCTTHOLD   INDICATE 'TYPRUN=HOLD' IN JCT        92832000
         B     RJOBINCR            ADVANCE TO NEXT PARAMETER   @OZ24801 92832050
         SPACE 1                                                     R4 92832100
RJOBTRJH CLC   9(7,RW),RJCLHOLD    TEST VALUE                        R4 92832200
         BNE   RJOBTRSC            BRANCH IF NOT 'TYPRUN=JCLHOLD'    R4 92832300
         OI    RDRSW2,RJCLH        INDICATE 'TYPRUN=JCLHOLD'         R4 92832400
         B     RJOBINCR            ADVANCE TO NEXT PARAMETER   @OZ24801 92833000
         SPACE 1                                                     R4 92834000
RJOBTRSC CLC   9(4,RW),RSCAN       TEST VALUE                           92836000
         BNE   RJOBTRCP            BRANCH IF NOT 'TYPRUN=SCAN'          92838000
         OI    JCTJOBFL,JCTTSCAN   INDICATE 'TYPRUN=SCAN' IN JCT        92840000
         B     RJOBINCR            ADVANCE TO NEXT PARAMETER   @OZ24801 92840100
         SPACE 1                                                     R4 92840200
RJOBTRCP CLC   9(4,RW),RCOPY       TEST VALUE                           92840300
         BNE   RILLJOBC            TYPRUN='XXXX' MISPELLED     @OZ24801 92840400
         MVI   JCTCNVRC+3,JCTCOK   CLEAR CONVERTER RTN CODE    @OZ25420 92840500
         OI    JCTJOBFL,JCTTCOPY   INDICATE 'TYPRUN=COPY' IN JCT        92840600
         B     RJOBINCR            ADVANCE TO NEXT PARAMETER   @OZ33013 92840650
         SPACE 1                                                     R4 92840700
RJOBNOTI CLC   2(6,RW),RNOTIFY     TEST KEYWORD                         92840800
         BNE   RJOBPRTY            BRANCH IF NOT 'NOTIFY'            R4 92840900
         CLI   9(RW),C'$'          CHECK FOR $                       R4 92841000
         BE    RJBNOTFY            VALID USERID, CONTINUE            R4 92841100
         CLI   9(RW),C'@'          CHECK FOR @                       R4 92841200
         BE    RJBNOTFY            VALID USERID, CONTINUE            R4 92841300
         CLI   9(RW),C'#'          CHECK FOR #                       R4 92841400
         BE    RJBNOTFY            VALID USERID, CONTINUE            R4 92841500
         CLI   9(RW),C'A'          CHECK FOR ALPHAMERIC              R4 92841600
         BL    RJOBINCR            IGNORE IF NO                      R4 92841700
         CLI   9(RW),C'Z'          TEST NEXT CHARACTER                  92841800
         BH    RJOBINCR            BRANCH IF ILLEGAL USERID             92841900
         SPACE 1                                                     R4 92842000
RJBNOTFY MVC   RUSERID(8),9(RW)    MOVE USERID TO WORK AREA          R4 92842100
         MVI   RUSERID+8,X'BF'     ADD TERMINATOR CHARACTER             92842200
         LA    R1,RUSERID+1        PREPARE TO SCAN USERID               92842300
         SPACE 1                                                     R4 92842400
RJOBNOTS CLI   0(R1),C','          TEST NEXT CHARACTER                  92842500
         BE    RJOBNOTC            BRANCH IF COMMA                      92842600
         TM    0(R1),X'BF'         TEST AGAIN                           92842700
         BO    RJOBINCR            ILLEGAL IF TERMINATOR CHARACTER      92842800
         LA    R1,1(,R1)           STEP TO NEXT CHARACTER               92842900
         BNZ   RJOBNOTS            SCAN NEXT CHARACTER                  92843000
         SPACE 1                                                     R4 92843100
RJOBNOTC MVI   0(R1),C' '          BLANK OUT                            92843200
         MVC   1(5,R1),0(R1)        REST OF USERID                      92843300
         MVC   JCTTSUID,RUSERID    MOVE USERID TO JCT                   92843400
         MVC   JCTTSUAF,$SIDAFF    MOVE INPUT AFFINITY TO JCT           92843500
         SPACE 1                                                     R4 92843600
RJOBPRTY CLC   4(4,RW),RPRTY       TEST KEYWORD                      R4 92843700
         BNE   RJOBPASS            BRANCH IF NOT 'PRTY'              R4 92843800
         LA    R1,RJOBINCR         SET IGNORE/EXIT ADDRESS           R4 92843900
         TM    $RUNOPTS,$PRTYOPT   IGNORE PRTY FIELD IF              R4 92844000
         BZR   R1                    INIT OPTION NOT SELECTED        R4 92844100
         TM    JCTJBOPT,JCTPRICD   IGNORE JOB CARD PRTY IF           R4 92844200
         BNZR  R1                    /*PRIORITY CARD PRESENT         R4 92844300
         CLI   9(RW),C'0'          IGNORE IF                         R4 92844400
         BLR   R1                    FIRST DIGIT                     R4 92844500
         CLI   9(RW),C'9'            NOT ZERO                        R4 92844600
         BHR   R1                    THRU NINE                       R4 92844700
         CLI   10(RW),C' '         HANDLE 2-DIGIT                    R4 92844800
         BE    SKIP210               FIELD IF NEXT                   R4 92844900
         CLI   10(RW),C','           CHAR IS NOT                     R4 92845000
         BNE   RJOBPRT2              BLANK OR COMMA                  R4 92845100
SKIP210  MVC   RPRIORTY+1(1),9(RW) SAVE 1-DIGIT PRIORITY             R4 92845200
         B     RSETP               MOVE DATA TO JCT                  R4 92845300
         SPACE 1                                                     R4 92845400
RJOBPRT2 CLI   11(RW),C' '         2-DIGIT PRTY                      R4 92845500
         BE    SKIP220               MUST BE                         R4 92845600
         CLI   11(RW),C','           FOLLOWED BY                     R4 92845700
         BNER  R1                    BLANK OR COMMA                  R4 92845800
SKIP220  CLI   10(RW),C'0'         IGNORE IF                         R4 92845900
         BLR   R1                    SECOND DIGIT                    R4 92846000
         CLI   10(RW),C'9'           NOT ZERO                        R4 92846100
         BHR   R1                    THRU NINE                       R4 92846200
         CLC   =C'15',9(RW)        IGNORE IF PRTY                    R4 92846300
         BL    RILLJOBC            IF OVER 15, KILL JOB        @OZ27970 92846400
         MVC   RPRIORTY(2),9(RW)   SAVE 2-DIGIT PRIORITY             R4 92846500
         SPACE 1                                                     R4 92846600
RSETP    MVC   JCTPRTY,RPRIORTY    MOVE EBCDIC PRTY TO JCT,          R4 92846700
         OI    JCTJBOPT,JCTPRICD     SET 'FORCE PRTY' FLAG           R4 92846800
         BR    R1                  CONTINUE SCAN                     R4 92846900
         EJECT                                                       R4 92847000
*********************************************************************** 92847100
*                                                                     * 92847200
*        PASSWORD PROCESSING                                          * 92847300
*              JCT FIELDS TO BE ZERO IF NO PASSWORD                   * 92847400
*              PASSWORDS X'ED OUT IN OUTPUT                           * 92847500
*                                                                     * 92847600
*********************************************************************** 92847700
         SPACE   2                                                   R4 92847800
RJOBPASS CLC   0(8,RW),=CL8'PASSWORD'   IF PARAMETER PASSWORD        R4 92847900
         BNE   RJOBINCR            BRANCH IF NOT PASSWORD            R4 92848000
         SPACE 1                                                     R4 92848100
RPASSWRD LA    RL1,9(,RW)          SAVE RW POINTER                   R4 92848200
         MVI   RLSAVE1,RPASINTM    ZERO PASSWORD FLAG BYTE           R4 92848300
         LA    R1,JCTPASS          GET ADDRESS OF PASSWORD FIELD     R4 92848400
         LA    RL2,L'JCTPASS       GET THE LENGTH FOR PASSWORD       R4 92848500
         SPACE 1                                                     R4 92848600
         LR    R0,RL2              SAVE SIZE                         R4 92848700
         SPACE 1                                                     R4 92848800
RPASBYTE CLI   0(RL1),C'('         IF BYTE IS LEFT PAREN             R4 92848900
         BE    RPLPAREN            BRANCH IF LEFT PAREN              R4 92849000
         CLI   0(RL1),C','         IF BYTE IS A COMMA                R4 92849100
         BE    RPCOMMA             BRANCH IF BYTE A COMMA            R4 92849200
         CLI   0(RL1),C' '         IF BYTE A BLANK                   R4 92849300
         BE    RPBLANK             BRANCH IF BYTE IS A BLANK         R4 92849400
         CLI   0(RL1),C')'         IF BYTE A RIGHT PAREN             R4 92849500
         BE    RPRPAREN            BRANCH IF RIGHT PAREN             R4 92849600
         CLI   0(RL1),C''''        IF BYTE AN APOSTROPHE             R4 92849700
         BE    RPASSERR            BRANCH TO ERROR CONDITION         R4 92849800
         MVC   0(1,R1),0(RL1)      MOVE BYTE TO JCT                  R4 92849900
         MVI   0(RL1),C'X'         SET OUTPUT TO X'S                 R4 92850000
         ST    RBI,RTEMP           SAVE REG                    @OZ30155 92850020
         LA    RBI,70(RPI)         POINT TO LAST OPERAND COL   @OZ30155 92850040
         SR    RBI,RL1             SWAP REGS                   @OZ30155 92850060
         EX    RBI,RXOUTMVC       SHIFT OUT THE X              @OZ30155 92850080
         L     RBI,RTEMP           RESTORE THE REG             @OZ30155 92850100
         MVI   70(RPI),X'40'       MOVE A BLANK TO THE END     @OZ30155 92850120
         LA    R1,1(R1)            INCREMENT JCT FIELD PTR           R4 92850200
         BCT   RL2,RPASBYTE        BRANCH TO NEXT BYTE               R4 92850300
         B     RPASSCH1            BR TO ERROR PROCESSING            R4 92850400
RXOUTMVC MVC   0(*-*,RL1),1(RL1)  **EXECUTE ONLY**             @OZ30155 92850450
         SPACE 1                                                     R4 92850500
RPLPAREN TM    RLSAVE1,RPASLPRM    IF LEFT PAREN FLAG ON             R4 92850600
         BO    RPASSCHK            BRANCH TO ERROR PROCESSING        R4 92850700
         CR    RL2,R0              IF LPAREN THE FIRST BYTE          R4 92850800
         BNE   RPASSCHK            ERROR IF NOT FIRST FIELD          R4 92850900
         LA    RL2,1(RL2)          INCREMENT FOR PAREN               R4 92851000
         OI    RLSAVE1,RPASLPRM    TURN ON LEFT PAREN FLAG           R4 92851100
         LA    RL1,1(RL1)          INCREMENT PAST LEFT PAREN         R4 92851200
         B     RPASBYTE            BRANCH TO GET NEXT BYTE           R4 92851300
         SPACE 1                                                     R4 92851400
RPCOMMA  TM    RLSAVE1,RPASLPRM+RPASCOMM   IF LEFT PAREN AND COMMA   R4 92851500
         BZ    RPASSEND            BRANCH TO END PASSWORD PROC       R4 92851600
         BNM   RPASSCHK            BR IF LPAREN ON AND COMMA ON      R4 92851700
         OI    RLSAVE1,RPASCOMM    TURN ON COMMA FLAG                R4 92851900
         LA    RL1,1(RL1)          POINT TO NEXT BYTE                R4 92852000
         LA    R0,71(RPI)          POINT TO CONTINUATION COLUMN      R4 92852100
         CR    RL1,R0              IF NEXT COLUMN CONTINUATION       R4 92852200
         BNE   RPASNPAS            BR NOT CONTINUATION COLUMN        R4 92852300
RPASCONT ST    R1,RLSAVE2          SAVE JCT PRT                      R4 92852400
         BAL   RL1,RCONTNUE        BR TO GET CONTINUATION CARD       R4 92852500
         B     RILLJOBC            +0, ERROR RETURN TO TERMINATE     R4 92852600
*                                  +4, NO ERROR RETURN               R4 92852700
         NI    RLSAVE1,X'FF'-RPASCOMM  TURN OFF CONTINUE FLAG        R4 92852800
         L     R1,RLSAVE2          GET JCT PRT                       R4 92852900
         LA    R15,65(,RPI)        SET END OF CARD PRT               R4 92853000
         LA    RL1,6(,RW)          SET SCAN ADDRESS                  R4 92853100
RPASNPAS LA    R1,JCTNUPAS         GET ADDRESS OF NEW PASS FIELD     R4 92853200
         LA    RL2,L'JCTNUPAS      GET LENGTH OF NEW PASS FIELDS     R4 92853300
         B     RPASBYTE            RETURN TO SEARCH LOOP             R4 92853400
         SPACE 1                                                     R4 92853500
RPBLANK  TM    RLSAVE1,RPASLPRM+RPASCOMM   IF LEFT PAREN OR COMMA    R4 92853600
         BNO   RPASSEND            BRANCH TO END PASSWORD PRCESSING  R4 92853700
         BO    RPASCONT            BR TO GET CONTINUE                R4 92853800
         BM    RPASSCHK            BRANCH TO DETERMINE END OF CARD   R4 92853900
         SPACE 1                                                     R4 92854000
RPASSERR OI    RLSAVE1,RPASERRM    SET ERROR FLAG ON                 R4 92854100
         SPACE 1                                                     R4 92854200
RPASSCHK LA    RL1,1(RL1)          STEP TO NEXT CHARACTER            R4 92854300
         NI    RLSAVE1,X'FF'-(RPASLPRM+RPASCOMM) TURN OFF PAREN,COMMAR4 92854400
RPASSCH1 CR    RL1,R15             IF END OF CARD                    R4 92854500
         BNL   RPASSEND            BRANCH TO END PROCESSING          R4 92854600
         LA    R1,JCTWORK          GET DUMMY FOR PASSWORD OVERFLOW   R4 92854700
         LA    RL2,8               GET NEW SCAN COUNT                R4 92854800
         B     RPASBYTE            BR TO CONTINUE PASSWORD CHECK     R4 92854900
         SPACE 1                                                     R4 92855000
RPRPAREN TM    RLSAVE1,RPASLPRM    IF LEFT PAREN FLAG ON             R4 92855100
         BNO   RPASSCHK            BRANCH TO ASSURE END OF PASSWORD  R4 92855200
         SPACE 1                                                     R4 92855300
RPASSEND TM    RLSAVE1,RPASERRM    IF ERROR FOUND IN PROCESS         R4 92855400
         BO    RILLJOBC            CANCEL FOR BAD JOB CARD           R4 92855500
         CLI   JCTPASS,X'00'       IF CURRENT PASSWORD NOT PRESENT   R4 92855600
         BE    RPASCNEW            BR ON NO CURRENT PASSWORD         R4 92855700
         OC    JCTPASS,=8X'40'     SET ALL ZEROES EQUAL TO BLANKS    R4 92855800
RPASCNEW CLI   JCTNUPAS,X'00'      IF FIELD NOT SPECIFIED            R4 92855900
         BE    RJOBINCR            LEAVE UNSPECIFIED FIELD ZERO      R4 92856000
         OC    JCTNUPAS,=8X'40'    SET ZEROES TO BLANKS              R4 92856100
RPASLPRM EQU   X'80'               LEFT PAREN MASK                   R4 92856200
RPASCOMM EQU   X'40'               COMMA MASK                        R4 92856300
RPASINTM EQU   X'00'               INITIALIZATION MASK               R4 92856400
RPASERRM EQU   X'01'               PASSWORD ERROR MASK               R4 92856500
         SPACE 2                                                     R4 92856600
RJOBINCR BXLE  RW,R14,RJOBKEY      ADVANCE TO NEXT COLUMN               92856700
         SPACE 1                                                     R4 92856800
RJOBLANK CLI   7(RW),C','          TEST LAST COLUMN                     92856900
         BNE   RJOBCEND            DONE IF NO CONTINUATION INDICATED    92857000
         BAL   RL1,RCONTNUE        GET CONTINUATION CARD                92857100
         B     RILLJOBC            BRANCH IF ILLEGAL CONTINUATION       92857200
         B     RJOBSRCH            NORMAL RETURN, CONTINUE SCAN         92857300
         EJECT                                                       R4 92857400
RJOBCEND L     RW,PCEDCT           RW = ADDRESS OF INPUT DCT   @OZ32566 92858000
         USING DCTDSECT,RW         ESTABLISH DCT ADDRESSABILITY         92860000
         MVC   RMESSAGE(L'RONMSG),RONMSG     SET UP SIGN-ON MESSAGE     92862000
         MVC   RMESSAGE+5(8),DCTDEVN         ADD DEVICE NAME            92864000
         MVC   RMESSAGE+17(20),JCTPNAME      ADD PROGRAMMER NAME        92866000
         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE                  92870000
         BZ    RNOTRJE3            BRANCH IF NOT REMOTE TERMINAL        92872000
         L     R1,DCTDCB           GET ADDRESS OF LINE DCT              92874000
         L     R1,MDCTRAT-DCTDSECT(,R1)  GET ADDRESS OF RAT             92876000
         SLR   LINK,LINK                     CLEAR AND INSERT           92878000
         ICM   LINK,2,RATCONRT+1-RATDSECT(R1) REMOTE CONSOLE ROUTE CODE 92880000
         LA    R0,L'RONMSG+20(,LINK)  ADD MESSAGE LENGTH                92882000
        $WTO   RMESSAGE,(R0),JOB=YES,               ISSUE MESSAGE TO   C92884000
               RMT=YES,CLASS=$ACTION,PRI=$ST         REMOTE TERMINAL R4 92886000
         SPACE 1                                                     R4 92888000
RNOTRJE3 NULL                      *                                 R4 92890000
        $WTO   RMESSAGE,L'RONMSG+20,JOB=YES,                ISSUE      C92892000
               ROUTE=$LOG+$UR,CLASS=$ACTION,PRI=$ST          MESSAGE    92894000
         SPACE 2                                                        92896000
         IC    R1,JCTJCLAS         GET JOB CLASS                        92898000
         N     R1,RJCIMASK         CONVERT TO JOB CLASS INDEX           92900000
         SLL   R1,5                MULTIPLY BY 32                       92902000
         AL    R1,$CATABLE         GET ADDRESS OF CAT ELEMENT           92904000
         USING CATDSECT,R1         ESTABLISH CAT ADDRESSABILITY         92906000
         MVC   JCTSMFLG,CATSMFLG   SET HASP SMF FLAGS                   92908000
         OC    JCTJOBFL(2),CATJOBFL  SET JOB FLAGS AND OPTIONS          92910000
         NI    JCTJBOPT,255-JCTQHELD  RESET QUEUE HELD INDICATOR        92912000
         MVC   JCTPROCN+4(2),CATPROCN  SET DEFAULT PROCEDURE NUMBER     92914000
         DROP  R1                  DROP CAT ADDRESSABILITY              92916000
         SPACE 2                                                        92918000
         TM    JCTJOBFL,JCTTCOPY   TEST JOB FLAGS                       92918500
         BZ    *+8                 BRANCH IF NOT 'TYPRUN=COPY'          92919000
         OI    RDRSW,RXBJOBSW      PROCESS AS EXECUTION BATCH JOB       92919500
         TM    DCTFLAGS,DCTHOLDJ   TEST DEVICE COMMANDS              R4 92920000
         BZ    RNOTHELD            BRANCH IF DEVICE IS NOT 'HELD'    R4 92922000
         OI    JCTJBOPT,JCTTHOLD   SIMULATE 'TYPRUN=HOLD'            R4 92924000
         DROP  RW                  DROP DCT ADDRESSABILITY           R4 92926000
         EJECT                                                       R4 92928000
RNOTHELD TM    $RUNOPTS,$XBATCH    IF NO EXECUTION BATCHING,         R4 92946000
         BZ    RXBCTEST             DON'T TEST JOB NAME              R4 92948000
         CLC   $XBATCHN,JCTJNAME   TEST JOB NAME                     R4 92950000
         BNE   RXBCTEST            BRANCH IF NOT RESERVED NAME          92952000
         CLI   JCTJOBID,C'J'       ALLOW RESERVED NAME               R4 92952100
         BNE   RXBCTEST             IF STARTED TASK OR TSU LOGON     R4 92952200
         BAL   RL1,RPUT            ADD JOB CARD TO OUTPUT FILE          92958000
         OI    RCARDLRC,LRC1CCTL+LRC1TASA  SET ASA CARRIAGE CONTROL  R4 92960000
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 92962000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 92964000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 92966000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 92967000
         MVC   (79-L'RXBERMSG)/2(L'RXBERMSG,RPI),RXBERMSG  SET MSG   R4 92968000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     92970000
         BAL   RL1,RJOBKILL        KILL JOB                             92972000
        $RETURN                    RETURN TO MAIN PROCESSOR             92974000
         SPACE 1                                                     R4 92974100
RXBCTEST TM    JCTJBOPT,JCTXBACH   TEST JOB OPTIONS                     92978000
         BZ    RNOTXBC             BRANCH IF NOT XBATCH JOB          R4 92980000
         OI    RDRSW,RXBJOBSW      SET EXECUTION BATCHING SWITCH        92982000
         MVI   JCTCNVRC+3,JCTCOK   CLEAR CONVERTER RTN CODE    @OZ25420 92984000
         TM    JCTJBOPT,JCTTHOLD   CHECK FOR 'TYPRUN=HOLD',          R4 92988000
         BZ    RNOTXBC               BRANCH IF NOT                   R4 92988100
         XI    JCTJBOPT,JCTTHOLD   FORCE 'TYPRUN=HOLD' TO BE         R4 92988200
         OI    RDRSW2,RJCLH          'TYPRUN=JCLHOLD' FOR XBATCH     R4 92988300
         SPACE 1                                                     R4 92988400
RNOTXBC  NI    RDRSW,255-RJFLUSH   TURN OFF FLUSH SWITCH             R4 92988500
         CLI   $RJOBOPT,4          TEST JOB CARD SCAN OPTION         R4 92990000
         BNL   RJOBRET             BR IF 4 OR GREATER                R4 92991000
         CLI   JCTJOBID,C'J'       DO NOT SCAN ACCOUNTING PARAMETERS    92992000
         BNE   RJOBRET              IF STARTED TASK OR TSU LOGON        92994000
         LA    R0,JCTWORK-1        COMPUTE LENGTH                       92996000
         SL    R0,RSAVE1            OF ACCOUNTING FIELD                 92998000
         LA    R1,JCTWORK          GET ADDRESS OF ACCOUNTING FIELD      93000000
         LA    RW,JCTJMR           GET ADDRESS OF JMR                   93002000
        $XCTL  HASPRSCN            SCAN ACCOUNTING FIELD PARAMETERS     93004000
         EJECT                                                          93014000
RILLJOBC NULL                      ILLEGAL JOB CARD                     93016000
         LTR   JCT,JCT             TEST ADDRESS OF JCT                  93018000
         BZ    RJOBRET             BRANCH IF JOB HAS BEEN DELETED       93020000
         TM    $RJOBOPT,1          TEST JOB CARD SCAN OPTION         R4 93022000
         BO    RJOBCEND            BRANCH IF ODD (1, 3, OR 5)        R4 93024000
         BAL   RL1,RPUT            ADD JOB CARD TO OUTPUT FILE          93026000
         OI    RCARDLRC,LRC1CCTL+LRC1TASA  SET ASA CARRIAGE CONTROL  R4 93028000
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 93030000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 93032000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 93034000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 93035000
         MVC   (79-18)/2(18,RPI),RJERRMSG+4  MOVE IN ERROR MESSAGE   R4 93036000
         BAL   RL1,RPUT            ADD ERROR MESSAGE TO OUTPUT FILE     93038000
         SPACE 2                                                        93040000
        $WTO   RJERRMSG,L'RJERRMSG,JOB=YES,              NOTIFY        C93042000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST       OPERATOR      93044000
         SPACE 1                                                     R4 93045500
RJOBRETK BAL   RL1,RJOBKILL        KILL JOB                          R4 93046000
         SPACE 2                                                     R4 93048000
RJOBRET $RETURN                    RETURN TO MAIN PROCESSOR             93060000
         EJECT                                                          93062000
*********************************************************************** 93064000
*                                                                     * 93066000
*        RJSCAN -- SUBROUTINE TO EXTRACT FIELDS FROM JOB STATEMENT    * 93068000
*                                                                     * 93070000
*              FUNCTION -- EXTRACT NEXT FIELD FROM JOB STATEMENT      * 93072000
*                                                                     * 93074000
*              INPUTS -- R0  = LENGTH OF OUTPUT AREA                  * 93076000
*                        R1  = ADDRESS OF OUTPUT AREA                 * 93078000
*                        RL1 = POSITIVE FOR APOSTROPHE COMPRESSION    * 93080000
*                                                                     * 93082000
*              OUTPUT -- EXTRACTED FIELD IN OUTPUT AREA               * 93084000
*                                                                     * 93086000
*              LINK REGISTER -- RL1                                   * 93088000
*                                                                     * 93090000
*              RETURNS -- RL1+0 - NORMAL RETURN                       * 93092000
*                         RL1+4 - KEYWORD PARAMETER ENCOUNTERED       * 93094000
*                                                                     * 93096000
*              EXTERNAL ROUTINE -- RCONTNUE                           * 93098000
*                                                                     * 93100000
*********************************************************************** 93102000
         SPACE 5                                                        93104000
RJSCAN   MVC   RJOBPRSW(8),RJOBSWS INITIALIZE RJSCAN SWITCHES        R4 93106000
         SPACE 1                                                     R4 93110000
RJOBNEXT BXH   RW,R14,RJOBCON1     ADVANCE TO NEXT CHARACTER            93112000
         CLI   5(RW),C''''         TEST CURRENT CHARACTER               93114000
         BNE   RJOBPR              BRANCH IF NOT APOSTROPHE          R4 93116000
         XI    RJOBPRSW+1,X'F0'    INVERT APOSTROPHE SWITCH             93118000
         LTR   RL1,RL1             TEST COMPRESSION OPTION              93120000
         BM    RJOBMOVE            BRANCH IF NO COMPRESSION             93122000
         CLI   4(RW),C''''         TEST LAST CHARACTER                  93124000
         BNE   RJOBNEXT            BRANCH IF NOT APOSTROPHE             93126000
         EX    0,RJOBPRSW          MOVE ODD APOSTROPHES ONLY            93128000
         B     RJOBNEXT            IGNORE EVEN APOSTROPHES              93130000
         SPACE 3                                                     R4 93132000
RJOBPR   EX    R0,RJOBPRSW         BRANCH IF IN LITERAL FIELD        R4 93134000
         CLI   5(RW),C' '          TEST CURRENT CHARACTER               93136000
         BE    RJOBCON2            BRANCH IF BLANK                      93138000
         CLI   5(RW),C')'          TEST CURRENT CHARACTER               93140000
         EX    R0,RJOBPASW         BR IF NOT MATCHING RIGHT PAREN    R4 93142000
         NI    RJOBPASW+1,X'0F'    RESET PARENTHESIS SWITCH             93144000
         CLI   5(RW),C','          TEST CURRENT CHARACTER               93146000
         BER   RL1                 RETURN IF COMMA                      93148000
         CLI   5(RW),C'='          TEST CURRENT CHARACTER               93150000
         BE    4(,RL1)             INDICATE KEYWORD PARAMETER IF '='    93152000
         CLI   5(RW),C'('          TEST CURRENT CHARACTER               93154000
         BNE   RJOBMOVE            BRANCH IF NOT LEFT PARENTHESIS       93156000
         OI    RJOBPASW+1,16*NE    SET PARENTHESIS SWITCH               93158000
         EJECT                                                       R4 93160000
RJOBMOVE LTR   R0,R0               TEST REMAINING OUTPUT AREA LENGTH    93162000
         BZ    RILLJOBC            BRANCH IF FIELD IS TOO LONG          93164000
         MVC   0(1,R1),5(RW)       MOVE CHARACTER TO OUTPUT AREA        93166000
         BCTR  R0,0                REDUCE OUTPUT AREA LENGTH            93168000
         LA    R1,1(,R1)           ADVANCE OUTPUT AREA ADDRESS          93170000
         B     RJOBNEXT            GET NEXT CHARACTER                   93172000
         SPACE 3                                                     R4 93174000
RJOBCON1 TM    RJOBPRSW+1,X'F0'    TEST APOSTROPHE SWITCH               93176000
         BNZ   RILLJOBC            ILLEGAL IF LITERAL FIELD             93178000
         SPACE 2                                                     R4 93179000
RJOBCON2 BCTR  RW,0                BACK UP ONE CHARACTER                93180000
         CLI   5(RW),C','          TEST LAST CHARACTER                  93182000
         BE    RJOBCON3            GET CONTINUATION IF COMMA            93184000
         TM    RJOBPASW+1,X'F0'    TEST PARENTHESIS SWITCH              93186000
         BNZ   RILLJOBC            ILLEGAL IF PARENTHESIS FIELD         93188000
         BR    RL1                 RETURN IF NOT PARENTHESIS FIELD      93190000
         SPACE 3                                                     R4 93192000
RJOBCON3 STM   R0,R1,RLSAVE1       SAVE                                 93194000
         ST    RL1,RLSAVE3          REGISTERS                           93196000
         MVC   RLSAVE2(1),RJOBPASW+1 AND PARENTHESIS SWITCH             93198000
         BAL   RL1,RCONTNUE        GET NEXT CARD                        93200000
         B     RILLJOBC            BRANCH IF ILLEGAL CONTINUATION       93202000
         LM    R0,R1,RLSAVE1       RESTORE                              93204000
         L     RL1,RLSAVE3          REGISTERS                           93206000
         LA    R15,65(,RPI)        SET LIMIT FOR END OF CARD            93208000
         MVC   RJOBPRSW(8),RJOBSWS RESET                             R4 93210000
         MVC   RJOBPASW+1(1),RLSAVE2 SWITCHES                           93212000
         B     RJOBNEXT            GET NEXT CHARACTER                   93214000
         SPACE 5                                                     R4 93214400
RJOBSWS  NOP   RJOBMOVE            *** MODEL EXECUTE STATEMENT ***   R4 93214600
         NOP   RJOBMOVE            *** MODEL EXECUTE STATEMENT ***   R4 93214800
         SPACE 2                                                     R4 93215000
RJOBPRSW EQU   $POSTSAV,4          RJSCAN APOSTROPHE SWITCH          R4 93215200
RJOBPASW EQU   $POSTSAV+4,4        RJSCAN PARENTHESIS SWITCH         R4 93215400
         EJECT                                                          93216000
*                                                                       93218000
*                             JOB CARD SCAN CONSTANTS AND VARIABLES     93220000
*                                                                       93222000
         SPACE 3                                                        93222600
RONE     DC    F'1'                CONSTANT                             93222700
R10000   DC    F'10000'            *                                    93222800
R10001   DC    F'10001'            *                                    93223000
R20000   DC    F'20000'            *                                    93223100
R20001   DC    F'20001'            *                                    93223200
R30000   DC    F'30000'            *                                    93223300
RSTC     DC    CL4'STC'            *                                    93223400
RTSU     DC    CL4'TSU'            *                                    93223500
RJCIMASK DC    A(X'3F')            CLASS INDEX MASK                     93223900
RJCTID   DC    CL4'JCT'            JCT NAME                             93224000
RIOTID   DC    CL4'IOT'            IOT NAME                             93224100
RSTUETIM DC    AL4(1440,999999,999999)  STC/TSU ESTIMATES               93224200
RSTDPROC DC    CL8'PROC00'         DEFAULT PROCEDURE NAME               93224400
RMASK    DC    XL8'4020202020202120'  EDIT MASK                         93224500
RCLASS   DC    CL5'CLASS'          JOB CARD KEYWORD CONSTANTS           93225100
RMSG     DC    CL3'MSG'            *                                    93225200
RTYPRUN  DC    CL6'TYPRUN'         *                                    93225300
RHOLD    DC    CL4'HOLD'           *                                    93225400
RJCLHOLD DC    CL7'JCLHOLD'        *                                 R4 93225500
RSCAN    DC    CL4'SCAN'           *                                    93225600
RCOPY    DC    CL4'COPY'           *                                    93225700
RNOTIFY  DC    CL6'NOTIFY'         *                                    93225800
RPRTY    DC    CL4'PRTY'           *                                 R4 93225900
         SPACE 3                                                        93226000
RJOBVAR  EQU   $POSTSAV,4          VARIABLE JOBID HEADER             R4 93226100
RONMSG   $MSG  100,'ON DEV NAME    '  JOB SIGN-ON MESSAGE               93228000
RXBERMSG DC    C' RESERVED JOB NAME - CHANGE 1 OF 1ST 5 CHARACTERS '    93234000
         SPACE 5                                                        93238000
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY          93240000
         TITLE 'HASP INPUT SERVICE -- ACCOUNTING FIELD SCAN ROUTINE'    93244000
HASPRSCN $ENTRY CSECT=YES          DEFINE ACCOUNTING FIELD SCAN SEGMENT 93246000
         SPACE 2                                                        93248000
*********************************************************************** 93250000
*                                                                     * 93252000
*        HASPRSCN -- SUBROUTINE TO PROCESS JOB CARD ACCOUNTING FIELD  * 93254000
*                                                                     * 93256000
*              INPUT -- JCTWORK CONTAINS ENTIRE ACCOUNTING FIELD      * 93258000
*                       RSAVE1 CONTAINS ADDRESS OF LAST CHARACTER     * 93260000
*                       (OR DELIMITER) OF ACCOUNTING FIELD, OR THE    * 93262000
*                       ADDRESS OF JCTWORK-1 IF NO ACCOUNTING FIELD   * 93264000
*                       WAS PROVIDED.                                 * 93266000
*                                                                     * 93268000
*              REGISTERS AVAILABLE FOR USE -- R0-R2,RL1,RL2,R14,R15   * 93270000
*                                                                     * 93272000
*              REGISTER USAGE --                                      * 93274000
*                                                                     * 93276000
*                   R0  -- USED TO RETURN EXTRACTED SUB-FIELD         * 93278000
*                   R1  -- CURRENT LOCATION WITHIN ACCOUNTING FIELD   * 93280000
*                   R2  -- WORK REGISTER                              * 93282000
*                   RL1 -- LINK REGISTER                              * 93284000
*                   RL2 -- WORK REGISTER                              * 93286000
*                   R14 -- WORK REGISTER                              * 93288000
*                   R15 -- POINTER TO END OF ACCOUNTING FIELD         * 93290000
*                                                                     * 93292000
*              EXTERNAL ROUTINES -- 1) RPUT                           * 93294000
*                                   2) RNOCMB                         * 93296000
*                                   3) RJOBKILL                       * 93298000
*                                                                     * 93300000
*********************************************************************** 93302000
         EJECT                                                          93328000
         SR    R2,R2               INITIALIZE WORK REG TO ZERO          93330000
         LA    R1,JCTWORK+1        ASSUME ACCT FIELD STARTS WITH '('    93332000
         L     R15,RSAVE1          LOAD ADDR OF LAST CHAR OF ACCT FLD   93334000
         CR    R15,R1              TEST ACCOUNTING FIELD                93336000
         BL    *+12                BR IF NULL OR ONE CHAR UNBOUNDED     93338000
         CLI   JCTWORK,C'('        TEST FIRST CHAR OF ACCT FIELD        93340000
         BE    *+10                BR IF ACCT FLD ENCLOSED IN PARENDS   93342000
         BCTR  R1,0                 ELSE ADJUST START OF SCAN           93344000
         LA    R15,1(,R15)          AND END OF SCAN                     93346000
         MVI   0(R15),255          SET SCAN DELIMITER                   93348000
         CLI   $RJOBOPT,1          TEST JOB CARD SCAN OPTION         R4 93350000
         BH    SKIP230             BR IF 2 OR GREATER                R4 93351000
         MVI   RSAVE1,X'80'        INDICATE NO ACCT OR RM NUMBER        93352000
SKIP230  BAL   RL1,RSCNFLD1        EXTRACT PGM'RS ACCT'G NUMBER         93356000
         B     *+8                 BR IF PROVIDED                       93358000
         B     RSCNTGT1            BR IF FIELD NOT PROVIDED          R4 93360000
         ST    R0,JCTACCTN          ELSE STORE                          93362000
         BAL   RL1,RSCNFLD3        EXTRACT PGM'RS ROOM NUMBER           93364000
         B     *+8                 BR IF PROVIDED                       93366000
         B     RSCNTGT1            BR IF FIELD NOT PROVIDED          R4 93368000
         ST    R0,JCTROOMN          ELSE STORE                          93370000
         CLI   $RJOBOPT,1          TEST JOB CARD SCAN OPTION         R4 93372000
         BH    SKIP240             BR IF 2 OR GREATER                R4 93373000
         MVI   RSAVE1,0            INDICATE ACCT AND RM NUMBER          93374000
SKIP240  BAL   RL1,RSCNFLD2        EXTRACT ESTIMATED EXECUTION TIME     93378000
         ST    R0,JCTETIME          STORE IF PROVIDED                   93380000
         BAL   RL1,RSCNFLD3        EXTRACT ESTIMATED LINE COUNT         93382000
         ST    R0,JCTESTLN          STORE IF PROVIDED                   93384000
         BAL   RL1,RSCNFLD3        EXTRACT ESTIMATED PUNCHED CARD COUNT 93386000
         ST    R0,JCTESTPU          STORE IF PROVIDED                   93388000
         BAL   RL1,RSCNFLD1        EXTRACT SPECIAL FORMS NUMBER         93390000
         ST    R0,JCTFORMS          STORE IF PROVIDED                   93392000
SKIP250  BAL   RL1,RSCNFLD2        EXTRACT JOB OUTPUT COPY COUNT        93394000
         B     RSCNCPY             BR IF FIELD PRESENT                  93396000
         BAL   RL1,RSCNFLD1         OPTION (IF ANY)                     93398000
         B     RSCNLOG             BR IF FIELD PRESENT                  93400000
         BAL   RL1,RSCNFLD2        EXTRACT OUTPUT LIMIT                 93402000
         B     RSCNLIM             BR IF FIELD PRESENT                  93404000
         B     RSCNRET              AND TERMINATE ACCT FIELD SCAN       93406000
         SPACE 3                                                     R4 93406400
RSCNTGT1 CLI   $RJOBOPT,2          TEST JOB CARD SCAN OPTION         R4 93406800
         BL    RBADACCT            BR IF LESS THAN 2                 R4 93407200
         B     12(,RL1)             ELSE CONTINUE                    R4 93407600
         EJECT                                                       R4 93408000
RSCNLIM  LA    RL2,JCTLINCT        INITIALIZE STORE ADDRESS             93410000
         B     RSCNCKDG             AND GO TO CHECK FIELD LENGTH        93412000
         SPACE 1                                                     R4 93413000
RSCNCPY  LA    RL2,JCTCPYCT        INITIALIZE STORE ADDRESS             93414000
RSCNCKDG LR    RW,R0               SAVE VALUE PROVIDED                  93416000
         SRA   RW,8                TEST VALUE                           93418000
         BNZ   RSCNTGT3            BR IF VALUE GREATER THAN 255      R4 93420000
         STC   R0,0(,RL2)          STORE VALUE PROVIDED                 93422000
         B     4(,RL1)              AND RESUME ACCT FIELD SCAN          93424000
         SPACE 1                                                     R4 93426000
RSCNLOG  LTR   R2,R2               TEST FIELD LENGTH                    93428000
         BNZ   RSCNTGT3            BR IF MORE THAN ONE CHARACTER     R4 93430000
         CLI   RTEMP,C'N'          TEST FOR NOLOG OPTION                93432000
         BNE   4(,RL1)             RESUME ACCT FIELD SCAN IF NO         93434000
         OI    JCTJBOPT,JCTNOLOG   INDICATE NOLOG OPTION SPECIFIED      93436000
         B     4(,RL1)              AND RESUME ACCT FIELD SCAN          93438000
         SPACE 1                                                     R4 93440000
RSCNFLD1 LA    RL2,4               SET BR SW FOR CHARACTER FIELDS       93442000
         B     RSCNFLD3             AND BEGIN SCAN                      93444000
         SPACE 1                                                     R4 93445000
RSCNFLD2 SLR   RL2,RL2             SET BR SW FOR NUMERIC FIELDS         93446000
RSCNFLD3 CLI   0(R1),255           TEST FOR END OF ACCOUNTING FIELD     93448000
         BE    RSCNRET             IF SO, TERMINATE SCAN                93450000
         CLI   0(R1),C''''         TEST FIRST CHAR OF FIELD             93452000
         BE    RSCNSPEC            BR IF FIELD ENCLOSED IN QUOTES       93454000
         LR    R14,R1              SAVE POINTER TO START OF FIELD       93456000
         TRT   0(144,R1),RALFATBL  SCAN TO FIRST NON-ALPHAMERIC CHAR    93458000
         LR    R0,R1               SAVE ADDRESS OF DELIMETER            93460000
         B     *(R2)               USE FUNCTION BYTE AS INDEX VALUE     93462000
         B     RSCNTGT2            BR IF INVALID CHARACTER IN FIELD  R4 93464000
         B     RSCNSIZE            DON'T INCREMENT IF AT END OF ACCT    93466000
         SPACE 1                                                        93468000
RSCNNEXT LA    R1,1(,R1)           STEP PAST FIELD DELIMITER            93470000
RSCNSIZE SR    R0,R14              DETERMINE SIZE OF FIELD              93472000
         BZ    4(,RL1)             RETURN IF NULL FIELD                 93474000
         BCTR  R0,0                DECREMENT FOR MACHINE LENGTH         93476000
         C     R0,RFOUR            TEST FIELD SIZE                      93478000
         BL    *+8(RL2)            BR TO PROCESS IF VALID FLD SIZE      93480000
         B     RSCNTGT3             ELSE BR TO IGNORE FIELD          R4 93482000
         B     RSCNDIG             BR IF FIELD SHOULD BE NUMERIC        93484000
         MVC   RTEMP+1(3),RKBLANKS INSURE FIELD PADDED TO RIGHT         93486000
         LR    R2,R0               USE R2 FOR EXECUTE                   93488000
         EX    R2,RMVCHAR          MOVE CHARACTERS FROM SUB-FIELD       93490000
         L     R0,RTEMP            GET FIELD TO R0                      93492000
         BR    RL1                  AND RETURN                          93494000
         SPACE 1                                                        93496000
RSCNDIG  MVC   RTEMP(4),RZEROES    MOVE ZEROES TO WORK AREA             93498000
         MVZ   RTEMP(4),0(R14)     MOVE ZONES FROM SUB-FIELD            93500000
         LR    R2,R0               USE R2 FOR EXECUTES                  93502000
         EX    R2,RTSTZNS          TEST FOR VALID DIGITS                93504000
         BNE   RSCNTGT3            BR IF NON-DIGIT CHARACTER IN FLD  R4 93506000
         EX    R2,RPACKNUM         CONVERT FIELD TO PACKED DECIMAL      93508000
         CVB   R0,RTEMP             AND THEN TO BINARY                  93510000
         BR    RL1                 THEN RETURN TO CALLER                93512000
         EJECT                                                       R4 93514000
RSCNSPEC LA    R14,1(,R1)          SAVE ADDR OF FIRST CHAR AFTER QUOTE  93516000
         LA    R1,1(,R1)           POINT TO FIRST CHAR AFTER QUOTE      93518000
         TRT   0(144,R1),RSPECTBL  SCAN TO NEXT QUOTE OR DELIMITER      93520000
         B     *(R2)               USE FUNCTION BYTE AS INDEX VALUE     93522000
         B     RSCNTGT2            BR IF ILLEGAL CHARACTER           R4 93524000
         CLI   1(R1),C''''         TEST FOR DOUBLE QUOTES               93526000
         BNE   RSPECFLD            BR IF NO TO EXTRACT DATA             93528000
         BCTR  R15,0               SHIFT                                93530000
         LR    R2,R15               REMAINING                           93532000
         SLR   R2,R1                 CHARACTERS                         93534000
         EX    R2,RSCNSHFT            LEFT                              93536000
         B     RSCNSPEC+4          RESUME SCAN                          93538000
         SPACE 1                                                        93540000
RSPECFLD LR    R0,R1               SAVE END-OF-FIELD ADDRESS            93542000
         LA    R1,1(,R1)           STEP PAST CLOSING QUOTE              93544000
         CLI   0(R1),C','          TEST DELIMITER                       93546000
         BE    RSCNNEXT            BR IF COMMA                          93548000
         CLI   0(R1),255           TEST DELIMITER                       93550000
         BE    RSCNSIZE            BR IF END OF ACCOUNTING FIELD        93552000
         SPACE 1                                                     R4 93553000
RSCNTGT2 CLI   $RJOBOPT,2          TEST JOB CARD SCAN OPTION         R4 93554000
         BNH   RBADACCT            BR IF 2 OR LESS TO ISSUE MSG      R4 93555000
         B     RSCNRET              ELSE JUST RETURN                 R4 93556000
         SPACE 1                                                     R4 93557000
RSCNTGT3 CLI   $RJOBOPT,2          TEST JOB CARD SCAN OPTION         R4 93558000
         BNL   4(,RL1)             BR IF 2 OR GREATER                R4 93559000
         SPACE 1                                                     R4 93559500
RBADACCT CLI   JCTJOBID,C'J'       TEST JOBID                           93560000
         BNE   RSCNRET             IGNORE ERROR IF STC OR TSU           93562000
         BAL   RL1,RPUT            ADD JOB CARD TO OUTPUT FILE          93566000
         OI    RCARDLRC,LRC1CCTL+LRC1TASA  SET ASA CARRIAGE CONTROL  R4 93568000
         MVI   RDRCCTL,C'0'        FORCE DOUBLE SPACE                R4 93570000
         MVI   0(RPI),C'*'         FILL OUT CARD IMAGE               R4 93572000
         MVC   1(78,RPI),0(RPI)     WITH ASTERISKS                   R4 93574000
         MVI   79(RPI),C' '        ADD TRAILING BLANK                R4 93575000
         MVC   (79-18)/2(18,RPI),RJERRMSG+4  MOVE IN ERROR MESSAGE   R4 93576000
         BAL   RL1,RPUT            ADD ERROR MSG TO OUTPUT FILE         93578000
        $WTO   RJERRMSG,L'RJERRMSG,JOB=YES,              NOTIFY        C93580000
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST       OPERATOR      93582000
         BAL   RL1,RJOBKILL        KILL JOB                             93584000
         SPACE 1                                                     R4 93586000
RSCNRET  CLI   $RJOBOPT,1          TEST JOB CARD SCAN OPTION         R4 93590000
         BH    *+16                BR IF 2 OR MORE TO RETURN         R4 93592000
         CLI   RSAVE1,X'80'        TEST FOR ACCT AND RM NUMBERS         93594000
         MVI   RSAVE1,0            RESET IN ANY CASE                    93596000
         BE    RBADACCT            BR IF EITHER FIELD MISSING           93598000
        $RETURN                    RETURN TO MAIN PROCESSOR             93602000
         EJECT                                                       R4 93604000
RALFATBL DC    91AL1(4),AL1(0,4,4,4,4,0),10AL1(4),AL1(12)               93606000
         DC    15AL1(4),AL1(0,0),68AL1(4),9AL1(0),7AL1(4),9AL1(0)       93608000
         DC    8AL1(4),8AL1(0),6AL1(4),10AL1(0),5AL1(4),AL1(8)          93610000
         SPACE 1                                                        93612000
RSPECTBL DC    64AL1(4),AL1(0),10AL1(4),AL1(0,4,0,0,4,0),10AL1(4)       93614000
         DC    AL1(0,0,0,4,4,0,0),9AL1(4),AL1(0),15AL1(4)               93616000
         DC    AL1(0,0,8,0),66AL1(4),9AL1(0),7AL1(4),9AL1(0)            93618000
         DC    8AL1(4),8AL1(0),6AL1(4),10AL1(0),6AL1(4)                 93620000
         SPACE 1                                                        93622000
         SPACE 1                                                        93624000
RMVCHAR  MVC   RTEMP(*-*),0(R14)       *** EXECUTE ONLY ***             93626000
RTSTZNS  CLC   RTEMP(*-*),RZEROES      *** EXECUTE ONLY ***             93628000
RSCNSHFT MVC   0(*-*,R1),1(R1)         *** EXECUTE ONLY ***             93630000
RPACKNUM PACK  RTEMP,0(*-*,R14)        *** EXECUTE ONLY ***             93632000
         SPACE 2                                                        93632500
RFOUR    DC    F'4'                CONSTANT                             93633000
RZEROES  DC    CL4'0000'           *                                    93633500
         SPACE 5                                                        93634000
         DROP  BASE3               DROP SEGMENT ADDRESSABILITY          93636000
HASPRDR  CSECT                     DEFINE SUBROUTINES RESIDENT          93640000
         TITLE 'HASP INPUT SERVICE -- FIRST LEVEL SUBROUTINES'          93642000
*********************************************************************** 93644000
*                                                                     * 93646000
*        RCONTNUE -- SUBROUTINE TO READ CONTINUATION CARDS            * 93648000
*                                                                     * 93650000
*              FUNCTIONS -- 1) ADD PREVIOUS CARD TO JCL FILE          * 93652000
*                           2) GET NEXT CARD                          * 93654000
*                           3) VALIDATE COLUMNS 1-3 OF NEXT CARD      * 93656000
*                           4) LOCATE START OF VARIABLE FIELD         * 93658000
*                                                                     * 93660000
*              OUTPUT -- RW = POINTER TO VARIABLE FIELD               * 93662000
*                                                                     * 93664000
*              LINK REGISTER -- RL1                                   * 93666000
*                                                                     * 93668000
*              RETURNS -- RL1+0 - ERROR RETURN                        * 93670000
*                         RL1+4 - NORMAL REUTRN                       * 93672000
*                                                                     * 93674000
*              EXTERNAL ROUTINES -- 1) RPUT                           * 93676000
*                                   2) RGET                           * 93678000
*                                                                     * 93680000
*********************************************************************** 93682000
         SPACE 5                                                        93684000
RCONTNUE ST    RL1,RMESSAGE+36     SAVE LINK REGISTER                   93686000
         BAL   RL1,RPUT            ADD PREVIOUS CARD TO JCL FILE        93688000
         BAL   RL1,RGET            GET NEXT CARD                        93690000
         MVI   2(RPI),0            FORCE ILLEGAL IF END OF FILE         93692000
         L     RL1,RMESSAGE+36     RESTORE LINK REGISTER                93694000
         OI    RCARDLRC,RDLMSKIP   BYPASS DLM TEST                   R4 93695000
         LTR   JCT,JCT             TEST ADDRESS OF JCT                  93696000
         BZR   RL1                 BRANCH IF JOB HAS BEEN DELETED       93698000
         SPACE 2                                                        93700000
         CLC   0(3,RPI),=CL3'//*'  CHECK COLUMNS 1-3                    93701000
         BE    RCONTNUE            IGNORE JCL COMMENT                   93701500
         CLC   0(3,RPI),=CL3'//'   CHECK COLUMNS 1-3                    93702000
         BNER  RL1                 ILLEGAL IF NOT '//'                  93704000
         SPACE 2                                                        93706000
         LA    R1,12               GET LENGTH OF VARIABLE START         93708000
         LA    RW,9(,RPI)          SET UP POINTER                       93710000
         SR    RW,R1                TO COLUMN 4                         93712000
         LA    R14,1               SET INCREMENT FOR SCAN               93714000
         SPACE 2                                                        93716000
RCONTNU1 CLI   6(RW),C' '          SCAN COLUMNS 4-15                    93718000
         BNE   4(,RL1)              TO DETERMINE                        93720000
         LA    RW,1(,RW)             START OF                           93722000
         BCT   R1,RCONTNU1            VARIABLE FIELD                    93724000
         B     4(,RL1)             NOT FOUND, ASSUME COLUMN 16          93726000
         EJECT                                                          93728000
*********************************************************************** 93730000
*                                                                     * 93732000
*        RJOBEND -- SUBROUTINE TO COMPLETE JOB INPUT PROCESSING       * 93734000
*                                                                     * 93736000
*              FUNCTIONS -- 1) TEST FOR ACTIVE JOB                    * 93738000
*                           2) TERMINATE JOB                          * 93740000
*                           3) PLACE JOB IN EXECUTION QUEUE           * 93742000
*                                                                     * 93744000
*              LINK REGISTER -- RL1                                   * 93746000
*                                                                     * 93748000
*              EXTERNAL ROUTINES -- 1) RJCTTERM                       * 93750000
*                                   2) RJOBTERM                       * 93752000
*                                                                     * 93754000
*********************************************************************** 93756000
         SPACE 5                                                        93758000
RJOBEND  LTR   JCT,JCT             TEST FOR ACTIVE JOB                  93760000
         BZR   RL1                 RETURN IF NO JCT                     93762000
         SPACE 1                                                     R4 93763500
RJOBENDT BAL   RL2,RJCTTERM        PERFORM FINAL UPDATE OF JCT       R4 93764000
         IC    RW,JCTIPRIO         SET INITIAL PRIORITY        @OZ29304 93764010
         CLI   JCTIPRIO,C'*'       DEFAULT PRIORITY CHANGED..  @OZ29304 93764020
         BNE   RPRISET             DO NOT UPDATE               @OZ29304 93764030
         SPACE 2                                                        93766000
         TM    JCTJBOPT,JCTPRICD   BRANCH IF NEITHER /*PRIO CARD     R4 93768000
         BZ    RPRISCH0              NOR JOB CARD PRTY FIELD         R4 93769000
         PACK  RTEMP,RPRIORTY      CONVERT EBCDIC PRIROITY           R4 93770000
         CVB   RW,RTEMP              TO BINARY                       R4 93771000
         B     RPRISET             PROCESS INCR AND LIMIT            R4 93772000
         SPACE 2                                                        93774000
RPRISCH0 L     R1,$RTIMTAB         PREPARE TO SEARCH                 R4 93776000
         B     SKIP260              TIME PRIORITY TABLE              R4 93777000
RPRISCH1 LA    R1,4(,R1)           ADVANCE TO NEXT ENTRY                93778000
SKIP260  CLC   JCTETIME+1(3),1(R1) COMPARE ESTIMATED EXECUTION TIME     93780000
         BH    RPRISCH1            BRANCH IF GREATER THAN TABLE ENTRY   93782000
         SR    R0,R0               NO                                   93784000
         IC    R0,0(,R1)           USE ASSOCIATED PRIORITY              93786000
         SPACE 2                                                        93788000
         L     R1,$SSVT               PREPARE TO SEARCH              R4 93790000
         LA    R1,$SVXPRI-SSVT-4(,R1)  OUTPUT PRIORITY TABLE         R4 93791000
RPRISCH2 LA    R1,4(,R1)           ADVANCE TO NEXT ENTRY                93792000
         CLC   JCTESOUT+1(3),1(R1) COMPARE ESTIMATED OUTPUT             93794000
         BH    RPRISCH2            BRANCH IF GREATER THAN TABLE ENTRY   93796000
         SR    RW,RW               NO                                   93798000
         IC    RW,0(,R1)           USE ASSOCIATED PRIORITY              93800000
         SRL   RW,4                 IN 'PURE' FORM                   R4 93801000
         ALR   RW,R0               COMPUTE AVERAGE OF                   93802000
         SRL   RW,1                 THE TWO PRIORITIES                  93804000
         EJECT                                                          93806000
RPRISET  N     RW,=F'15'           CLEAR EXTRANEOUS BITS                93808000
         L     R1,PCEDCT           R1 = ADDRESS OF INPUT DCT   @OZ32566 93810000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         93812000
         IC    R0,DCTPRINC         R0 = INPUT DEVICE PRIORITY INCREMENT 93814000
         ALR   RW,R0               INCREMENT PRIORITY                   93816000
         CLM   RW,1,DCTPRLIM       COMPARE PRIORITY WITH LIMIT          93818000
         BNH   *+8                 BR IF PRIORITY NOT GREATER           93820000
         IC    RW,DCTPRLIM         SET PRIORITY TO LIMIT                93822000
         DROP  R1                  DROP DCT ADDRESSABILITY              93824000
         SPACE 2                                                        93826000
         SLL   RW,4                USE FOUR LOW-ORDER BITS              93828000
         STC   RW,JCTIPRIO         SAVE INITIAL EXECUTION PRIORITY      93830000
         STC   RW,RMESSAGE         SAVE FOR LATER USE                   93832000
         SPACE 2                                                        93834000
         MVI   RMESSAGE+1,$XEQ     PRESET CONVERTER CLASS               93836000
         TM    RDRSW,RXBJOBSW      TEST JOB TYPE                        93840000
         BZ    RNOXBACH            BRANCH IF NOT EXECUTION BATCHING     93842000
         OC    RMESSAGE+1(1),JCTJCLAS  SET JOB QUEUE TYPE               93844000
         NI    RMESSAGE+1,QUECLASS RESET HIGH-ORDER BYTE                93846000
         SPACE 2                                                        93848000
RNOXBACH NULL                      *                                 R4 93848200
SKIP270  TM    JCTJOBFL,JCTTCOPY   TEST JOB FLAGS                    R4 93851000
         BZ    *+12                BRANCH IF NOT 'TYPRUN=COPY'          93851500
         NI    RDRSW,255-RXBJOBSW  YES, RESET EXECUTION BATCH SWITCH    93852000
         MVI   RMESSAGE+1,$OUTPUT  RESET QUEUE TYPE TO OUTPUT           93852500
         BAL   RL2,RJOBTERM        TERMINATE JOB                        93853000
         SPACE 2                                                     R4 93854000
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA    93856000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 93864000
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         93866000
         MVC   JQEPRIO,RMESSAGE    SET NEW PRIORITY                     93868000
         MVC   JQEFLAG2,RDRSIAFF   RESET SYSTEM AFFINITY                93869000
         SR    R0,R0               GET NEXT                             93870000
         IC    R0,RMESSAGE+1        JOB QUEUE TYPE                      93872000
        $QMOD  (R1),(R0)           QUEUE JOB FOR EXECUTION SERVICES     93874000
         DROP  R1                  DROP JQE ADDRESSABILITY              93876000
         SR    R0,R0               CLEAR ADDRESS                        93878000
         ST    R0,PCEJQE            OF JOB QUEUE ELEMENT       @OZ32566 93880000
         BR    RL1                   AND RETURN                         93882000
         EJECT                                                          93905600
*********************************************************************** 93905700
*                                                                     * 93905800
*        RGET -- SUBROUTINE TO GET NEXT CARD FROM INPUT BUFFER        * 93905900
*                                                                     * 93906000
*              FUNCTION -- SET INPUT POINTER TO NEXT CARD             * 93906100
*                                                                     * 93906200
*              OUTPUT -- RPI = ADDRESS OF NEXT CARD IMAGE             * 93906300
*                                                                     * 93906400
*              LINK REGISTER -- RL1                                   * 93906500
*                                                                     * 93906600
*              RETURNS -- RL1+0 - END OF FILE RETURN                  * 93906700
*                         RL1+4 - NORMAL RETURN                       * 93908000
*                                                                     * 93910000
*              EXTERNAL ROUTINE -- RJOBKILL                           * 93912000
*                                                                     * 93916000
*********************************************************************** 93918000
         SPACE 5                                                        93920000
RGET     TM    RDRSW,RSYSINSW      TEST FOR GENERATED DD *              93922000
         BZ    RGET1               BRANCH IF NOT                        93924000
         L     RPI,RSAVE1          YES, RESTORE ORIGINAL POINTER        93926000
         NI    RDRSW,255-RSYSINSW  RESET INDICATION                     93928000
         B     4(,RL1)              AND RETURN                          93930000
         SPACE 3                                                     R4 93931000
RGET1    LTR   JCT,JCT             TEST FOR ACTIVE JOB                  93932000
         BZ    RGETNOCT            DO NOT COUNT IF NO JCT               93934000
         L     RW,JCTCARDS         INCREMENT                            93936000
         LA    RW,1(,RW)            CARD                                93938000
         ST    RW,JCTCARDS           COUNT                              93940000
         SPACE 1                                                     R4 93941000
RGETNOCT MVI   RCARDLRL,80         PRESET CARD LENGTH TO 80          R4 93942000
         TM    PCEID,PCERJEID      TEST DEVICE TYPE                  R4 93942400
         BO    RJEGET              BRANCH IF REMOTE READER           R4 93942600
         TM    PCEID,PCEINRID      NO, TEST AGAIN                    R4 93945000
         BZ    RDRGET              BRANCH IF NOT INTERNAL READER     R4 93946000
         EJECT                                                       R4 93947000
*                                                                    R4 93948000
*                             INTERNAL READER PROCESSING             R4 93950000
*                                                                    R4 93952000
         L     RW,PCEDCT           RW = ADDRESS OF INTRDR DCT  @OZ32566 93954000
         USING DCTDSECT,RW         ESTABLISH DCT ADDRESSABILITY      R4 93956000
         SPACE 1                                                     R4 93956500
RINRLOOP DS    0H                                                       93957000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 93957500
         LTR   R1,R1               TEST                                 93958000
         BZ    RINRTEST            BRANCH IF NO ACTIVE JOB              93958500
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         93959000
         TM    JQEFLAGS,QUEOPCAN   TEST JOB QUEUE FLAGS                 93959500
         BO    RINRDEL             BRANCH IF JOB CANCEL                 93960000
         DROP  R1                  DROP JQE ADDRESSABILITY              93960500
         SPACE 2                                                     R4 93960800
RINRTEST TM    DCTFLAGS,DCTDELET+DCTRSTRT TEST FOR OPERATOR COMMANDS    93961000
         BNZ   RINRDEL             BRANCH IF OPERATOR CANCEL            93962000
         TM    RDRSW,RDREOFSW      TEST END-OF-FILE SWITCH              93964000
         BOR   RL1                 RETURN IF ON                         93966000
         L     RL2,RIDPBFO         GET NEXT RECORD POINTER              93968000
         LTR   RL2,RL2             TEST                                 93970000
         BZ    RINRWAIT            BRANCH IF ZERO                       93972000
         USING LRCDSECT,RL2        ESTABLISH LOGICAL RECORD ADDR.       93974000
         CLI   LRCTLENG,LRCBFEND   TEST RECORD LENGTH                   93976000
         BE    RINRWAIT            BRANCH IF END-OF-BLOCK               93978000
         MVC   RINFLAG1,LRCFLAG1   SAVE RECORD CHARACTERISTICS       R4 93979000
         NI    RINFLAG1,LRC1CCTL+LRC1CTYP  ISOLATE CARRIAGE CONTROL  R4 93979500
         MVC   RCARDLRL,LRCLRECL   SAVE LOGICAL RECORD LENGTH           93980000
         LR    R0,RPI              R0 = ADDRESS OF INTRDR WORK AREA     93982000
         LA    R1,254              R1 = LENGTH OF INTRDR WORK AREA      93984000
         LA    R14,LRCTEXT         R14 = ADDRESS OF BLOCKED RECORD      93986000
         TM    LRCFLAG1,LRC1CCTL   TEST RECORD CONTROL BYTE             93988000
         BZ    RINRNOCC            BRANCH IF NO CARRIAGE CONTROL     R4 93990000
         MVC   RDRCCTL,0(R14)      SAVE CARRIAGE CONTROL CHARACTER   R4 93991000
         LA    R14,1(,R14)         SPACE OVER CARRIAGE CONTROL CHAR.    93992000
RINRNOCC CLR   R14,RPI             TEST ADDRESS                      R4 93994000
         BNL   RINRWAIT            BRANCH IF INVALID                    93996000
         L     R15,=XL4'40000000'  R15 = BLANK PAD CHARACTER            93998000
         IC    R15,LRCTLENG        ADD LOGICAL RECORD LENGTH            94000000
         MVCL  R0,R14              MOVE RECORD TO INTRDR WORK AREA      94002000
         ST    R14,RIDPBFO         UPDATE RECORD POINTER                94004000
         DROP  RL2                 DROP LOGICAL RECORD ADDRESSABILITY   94006000
         CLC   0(6,RPI),=CL6'/*EOF'  TEST FOR INTERNAL READER EOF       94008000
         BE    RINREOF             BRANCH IF YES                        94010000
         CLC   0(7,RPI),=CL7'/*SCAN'  TEST FOR INTERNAL READER SCAN     94012000
         BE    RINRSCAN            BRANCH IF NOT                        94014000
         CLC   0(6,RPI),=CL6'/*DEL'  TEST FOR INTERNAL READER DELETE    94016000
         BE    RINRDELP            BRANCH IF YES                    R41 94017000
         CLC   0(8,RPI),=CL8'/*PURGE' TEST FOR INTERNAL RDR PURGE   R41 94017100
         BNE   4(,RL1)             TAKE NORMAL RETURN IF NOT            94018000
         OI    RDRSW,RJNABORT      SET PURGE FLAG                   R41 94019000
         SPACE 1                                                    R41 94019100
RINRDELP NI    RDRSW,255-RNOSCAN   TURN ON CARD SCAN                R41 94020000
         EJECT                                                       R4 94021000
*                                                                       94022000
*                             DELETE JOB ON INTERNAL READER             94024000
*                                                                       94026000
RINRDEL  DS    0H                                                       94028000
         ST    RL1,RLSAVE1         SAVE RETURN REGISTER                 94030000
         BAL   RL1,RJOBKILL        DELETE JOB                           94032000
         L     RL1,RLSAVE1         RESTORE RETURN REGISTER              94033000
         L     RW,PCEDCT           RESTORE ADDRESS OF DCT      @OZ32566 94034000
         NI    DCTFLAGS,255-DCTDELET-DCTRSTRT  RESET OPERATOR FLAGS     94035000
         B     RINRTEST            GET NEXT RECORD                      94036000
*                                                                       94037000
*                             SCAN JOB ON INTERNAL READER               94038000
*                                                                       94040000
RINRSCAN DS    0H                                                       94042000
         LTR   JCT,JCT             TEST FOR ACTIVE JOB                  94044000
         BZ    RINRTEST            BRANCH IF NO JCT                     94046000
         OI    JCTJOBFL,JCTTSCAN   FORCE 'TYPRUN=SCAN'                  94048000
         B     RINRLOOP            GET NEXT RECORD                      94060000
*                                                                       94062000
*                             WAIT FOR DIRECTION FROM SSSM              94064000
*                                                                       94066000
RINRWAIT DS    0H                                                       94068000
         OI    RIDFLAGS,RIDBUSY    PERMIT SSSM TO OPERATE               94070000
         $XMPOST RIDECBP           POST SSSM                            94072000
RINRW1   $WAIT IO                  $WAIT FOR INPUT FROM SSSM            94074000
         TM    RIDFLAGS,RIDEND     DID SSSM TERMINATE INTRDR            94076000
         BO    RINREOF             BRANCH IF YES                        94078000
         TM    RIDFLAGS,RIDBUSY    HAS SSSM COMPLETED ITS WORK          94080000
         BZ    RINRLOOP            GET NEXT RECORD IF SO                94082000
         B     RINRW1              OTHERWISE WAIT AGAIN                 94084000
*                                                                       94086000
*                             END-OF-FILE ON INTERNAL READER            94088000
*                                                                       94090000
RINREOF  OI    RDRSW,RDREOFSW      SET END-OF-FILE SWITCH               94092000
         B     RINRTEST            GO CHECK FOR CANCEL         @OZ29612 94094000
         DROP  RW                  DROP DCT ADDRESSABILITY           R4 94096000
         EJECT                                                       R4 94098000
RJEGET   TM    RDRSW,RDREOFSW      TEST END-OF-FILE SWITCH           R4 94100000
         BNZR  RL1                 RETURN IF ON                      R4 94102000
        $EXTP  GET,PCEDCT,RTPCARD  GET CARD IMAGE FROM RTAM    @OZ32566 94104000
         BP    RDCKCOM             BRANCH IF SUCCESSFUL              R4 94106000
         OI    RDRSW,RDREOFSW      SET END-OF-FILE SWITCH            R4 94106100
         B     RDCKCOM             CHECK FOR OPERATOR COMMANDS       R4 94106200
         SPACE 1                                                     R4 94111400
RDRGET   LA    RPI,80(,RPI)        ADVANCE INPUT PTR TO NEXT CARD    R4 94114000
         SPACE 1                                                     R4 94116000
RGETEST  CL    RPI,RBIEND          TEST FOR END OF BUFFER               94118000
         BNH   4(,RL1)             BRANCH IF NOT END OF BUFFER          94120000
         TM    RDRSW,RDREOFSW      TEST FOR READER EOF                  94122000
         BNZR  RL1                 RETURN IF READER EOF                 94124000
         CLI   BUFECBCC,X'7F'      TEST FOR CARD READER ERROR           94126000
         BE    READ                BRANCH IF NO ERROR                   94128000
         ST    RL1,RLSAVE1         SAVE LINK REGISTER                   94130000
         BAL   RL1,RJOBKILL        KILL JOB IN ERROR                    94132000
         L     RL1,RLSAVE1         RESTORE LINK REGISTER                94134000
         L     R1,PCEDCT           GET ADDRESS OF INPUT DCT    @OZ32566 94136000
         L     R1,DCTDCB-DCTDSECT(,R1)  GET ADDRESS OF DCB              94138000
         L     R1,DCBDEBAD-DCBDSECT(,R1)  GET ADDRESS OF DEB            94140000
         L     R1,DEBSUCBA-DEBDSECT(,R1)  GET ADDRESS OF UCB            94142000
         TM    UCBFLB-UCBDSECT(R1),UCBIORST  TEST UCB STATUS            94144000
         BZ    READ                BR IF DEVICE STILL ACCESSIBLE     R4 94144100
         CLC   $RELEASE,=C'02'     TEST OS/VS2 RELEASE NUMBER        R4 94144200
         BE    RDABORT             BR IF RELEASE 2                   R4 94144300
         L     R15,CVTPTR          GET ADDRESS OF CVT                R4 94144400
         CLC   CVTCRCA-CVT(,R15),=XL4'0'  TEST RECOVERY MODE         R4 94144500
         BE    RDABORT             BR IF DEVICE NOT ACCESSIBLE       R4 94144600
         SPACE 1                                                     R4 94147000
READ    $EXCP  PCEDCT              INITIATE CARD READ PROGRAM  @OZ32566 94148000
         SPACE 1                                                     R4 94149000
RWAIT   $WAIT  IO                  WAIT FOR COMPLETION OF READ          94150000
         SPACE 1                                                     R4 94150100
RDCKCOM  L     R1,PCEDCT           R1 = READER DCT ADDRESS     @OZ32566 94154000
         USING DCTDSECT,R1         ESTABLISH DCT ADDRESSABILITY         94156000
         TM    DCTFLAGS,DCTSTOP    TEST FOR STOP COMMAND                94158000
         BO    RWAIT               BRANCH IF STOP COMMAND               94160000
         TM    DCTFLAGS,DCTDELET+DCTRSTRT    TEST FOR DELETE            94162000
         BNZ   RDELETE             BRANCH IF DELETE OR RESTART          94163000
         L     R15,PCEJQE          GET JQE ADDRESS             @OZ32566 94163500
         LTR   R15,R15             TEST                                 94164000
         BZ    RDNOCOM             BRANCH IF NO ACTIVE JOB              94164500
         USING JQEDSECT,R15        ESTABLISH JQE ADDRESSABILITY         94165000
         TM    JQEFLAGS,QUEOPCAN   TEST JOB QUEUE FLAGS                 94165500
         BZ    RDNOCOM             BRANCH IF NO JOB CANCEL              94166000
         DROP  R15                 DROP JQE ADDRESSABILITY              94166500
         SPACE 2                                                     R4 94166600
RDELETE  DS    0H                                                    R4 94166700
SKIP310  NI    DCTFLAGS,255-DCTDELET-DCTRSTRT    TURN OFF FLAGS      R4 94167300
*                                  THIS LINE DELETED BY APAR   @OZ29180 94168000
         ST    RL1,RLSAVE1         SAVE LINK REGISTER                   94170000
         BAL   RL1,RJOBKILL        DELETE JOB                           94172000
         L     RL1,RLSAVE1         RESTORE LINK REGISTER                94174000
         SPACE 1                                                     R4 94176000
RDNOCOM  TM    PCEID,PCERJEID      IS THIS A REMOTE TERMINAL         R4 94180800
         BZ    RNOTRJE4            BRANCH IF NOT                     R4 94181200
         MVC   RCARDLRL,MDCTRECL   SET RECORD LENGTH           @OZ29180 94181210
         TM    RDRSW,RDREOFSW      TEST END-OF-FILE SWITCH           R4 94186000
         BZ    4(,RL1)             NORMAL RETURN IF NO END-OF-FILE   R4 94188000
         BR    RL1                 OTHERWISE, TAKE END OF FILE RETURN   94192000
         SPACE 1                                               @OZ29180 94192010
         DROP  R1                  KILL DCT BASE               @OZ29180 94192020
         SPACE 3                                                     R4 94194000
RNOTRJE4 TM    BUFECBCC,X'7F'      TEST FOR READ COMPLETE            R4 94198000
         BZ    RWAIT               BRANCH IF READ NOT COMPLETE          94200000
         XI    IOBSIOCC,RSIOCSWS   TEST FOR                             94202000
         TM    IOBSIOCC,RSIOCC     SUCCESSFUL SIO                       94204000
         BNZ   RDTEST              BRANCH IF NO CSW STORED              94206000
         XC    IOBCSW(3),IOBCSW    INSURE COMMAND ADDRESS IS ZERO       94208000
         MVI   BUFECBCC,X'41'      INSURE UNSUCCESSFUL READ COMPLETION  94210000
         SPACE 1                                                     R4 94211000
RDTEST   CLI   BUFECBCC,X'7F'      TEST COMPLETION CODE                 94212000
         BE    RCOMP               BRANCH IF SUCCESSFUL READ COMPLETION 94214000
         TM    IOBCSW+3,RUNIEXCP   TEST CSW IN IOB FOR UNIT EXCEPTION   94216000
         BZ    RDERR               BR IF READ ERROR                 R41 94218000
         SPACE 1                                                     R4 94219000
RDABORT  OI    RDRSW,RDREOFSW      SET READER END-OF-FILE SWITCH        94220000
         B     RCOMP               CONTINUE PROCESSING              R41 94221000
         SPACE 1                                                     R4 94222000
RDERR   $IOERROR (R3)              LOG I/O ERROR                    R41 94223000
RCOMP    L     RW,IOBCSW-1         GET CSW CMD ADDR FROM IOB CSW        94224000
         LA    RW,0(,RW)           CLEAR HIGH-ORDER BYTE                94226000
         LTR   RW,RW               TEST COMMAND ADDRESS                 94228000
         BZ    RCOMPZ              BRANCH IF ZERO                       94230000
         AL    RW,=F'-8'           ADJUST TO POINT TO LAST COMMAND      94232000
         L     R1,0(,RW)           GET COMMAND DATA ADDRESS             94234000
         AH    R1,6(RW)            ADD COMMAND BYTE COUNT               94236000
         SH    R1,IOBCSW+5         SUBTRACT BYTE COUNT RESIDUE          94238000
         SL    R1,=F'80'           COMPUTE ADDRESS OF LAST CARD         94240000
         LA    RW,0(,R1)           CLEAR HIGH-ORDER BYTE                94242000
         SPACE 1                                                     R4 94243000
RCOMPZ   ST    RW,RBIEND           SAVE FOR COMPARE                     94244000
         L     RPI,RIBUFST         SET INPUT POINTER                 R4 94246000
         ALR   RPI,RBI              TO FIRST CARD                    R4 94247000
         B     RGETEST             GO BACK AND TEST                     94248000
         EJECT                                                          94250000
*********************************************************************** 94252000
*                                                                     * 94254000
*        RPUT -- SUBROUTINE TO ADD CARD TO OUTPUT BUFFER              * 94256000
*                                                                     * 94258000
*              FUNCTIONS -- 1) IF OUTPUT BUFFER IS FULL, TERMINATE    * 94260000
*                              WRITE, AND START NEXT OUTPUT BUFFER    * 94262000
*                           2) ADD CARD TO OUTPUT BUFFER              * 94264000
*                                                                     * 94266000
*              LINK REGISTER -- RL1                                   * 94268000
*                                                                     * 94270000
*              EXTERNAL ROUTINE -- RGETBUF                            * 94272000
*                                                                     * 94274000
*********************************************************************** 94276000
         SPACE 3                                                    R41 94278000
RPUT     LTR   JCT,JCT             TEST FOR JOB                      R4 94280000
         BZ    RESETYPE            BRANCH IF FLUSHING                   94282000
         L     R1,RBONEXT          GET OUTPUT POINTER                   94284000
         TM    RCARDLRC,RDLMSKIP   TEST DELIMITER BYPASS SWITCH      R4 94286000
         BO    RPUTNOCT            IGNORE DELIMITER IF SET           R4 94288000
         CLC   0(2,RPI),RDRDLM     TEST FOR DELIMITER CARD           R4 94290000
         BNE   RPUTEST             BRANCH IF NOT                     R4 94292000
         TM    RDRSW,RXBJOBSW      TEST FOR EXECUTION BATCHING          94294000
         BZ    RPUTERM             BRANCH IF NOT                        94296000
         SPACE 2                                                        94298000
RPUTEST  TM    RDRSW,RJCLSW        TEST CURRENT MODE                    94300000
         BNO   RPUTINCR            BR IF NOT JCL FILE               R41 94302000
         L     RW,RDRIOT           ADDR OF 1ST IOT                  R41 94302100
         AL    RW,$IOTPDDB         ADDR OF 1ST PDDB                 R41 94302200
         L     R15,PDBRECCT-PDBDSECT+IOTPDBOJ(,RW)  INCREMENT       R41 94302300
         LA    R15,1(,R15)                           JCL FILE       R41 94302400
         ST    R15,PDBRECCT-PDBDSECT+IOTPDBOJ(,RW)    RECORD COUNT  R41 94302500
         B     RPUTNOCT            BR TO CONTINUE                   R41 94302600
         SPACE 1                                                    R41 94302700
RPUTINCR L     RW,JCTJOBIN         INCREMENT                        R41 94304000
         LA    RW,1(,RW)            SYSIN                               94306000
         ST    RW,JCTJOBIN           COUNT                              94308000
         SPACE 2                                                        94310000
RPUTNOCT NI    RCARDLRC,255-RDLMSKIP  RESET DLM BYPASS SWITCH        R4 94311000
         LA    R15,0(,RPI)         ELIMINATE TRAILING BLANKS         R4 94312000
         BCTR  R15,0               SET SCAN LIMIT                       94314000
         L     R14,=F'-8'          SET SCAN DECREMENT TO -8             94316000
         LA    RW,80               ASSUME JCL FILE                      94318000
         TM    RDRSW,RJCLSW        TEST CURRENT MODE                    94320000
         BO    RPUTJCL             FORCE JCL LRECL TO 80                94322000
         IC    RW,RCARDLRL         GET LOGICAL RECORD LENGTH            94324000
         LA    RW,7(,RW)            AND                                 94326000
         NR    RW,R14                ROUND TO DOUBLE WORD               94328000
         TM    RCARDLRC,LRC1INUL+LRC1ONUL  TEST RECORD CONTROL BYTE  R4 94328300
         BO    RPUTJCL             BRANCH IF CONTROL RECORD          R4 94328500
         OC    RCARDLRC,RINFLAG1   ADD INPUT FLAGS TO LRC            R4 94328800
         EJECT                                                       R4 94329000
RPUTJCL  LA    RW,0(RW,RPI)        SET SCAN POINTER TO END OF RECORD    94330000
         BXLE  RW,R14,RPUTBLNK     DECREMENT POINTER BY EIGHT           94332000
         CLC   0(8,RW),RKBLANKS    CHECK FOR DOUBLE WORD OF BLANKS      94334000
         BE    *-10                IF EIGHT BLANKS, KEEP GOING          94336000
         SLR   RW,R14              NO, INCREMENT POINTER BY EIGHT       94338000
         L     R14,=F'-1'          RESET SCAN DECREMENT TO -1           94340000
         BXLE  RW,R14,RPUTBLNK     DECREMENT POINTER BY ONE             94342000
         CLI   0(RW),C' '          CHECK FOR BLANK                      94344000
         BE    *-8                 IF BLANK, KEEP GOING                 94346000
         SR    RW,R15              GENERATE TRUNCATED LENGTH            94348000
         BP    *+8                 BYPASS SPECIAL PROCESSING            94350000
RPUTBLNK LA    RW,1                FORCE ALL-BLANK CARD TO ONE BLANK    94352000
         STC   RW,RCARDLEN         SET CARD LENGTH                      94354000
         TM    RCARDLRC,LRC1CCTL   TEST RECORD CONTROL BYTE          R4 94354500
         BZ    SKIP320             BRANCH IF NO CARRIAGE CONTROL     R4 94355000
         LA    RW,1(,RW)           BUMP LENGTH FOR CARRIAGE CONTROL  R4 94355500
SKIP320  ALR   RW,R1               ADD CURRENT POINTER                  94356000
         CL    RW,RBOEND           TEST FOR END OF OUTPUT BUFFER        94358000
         BL    RPUTCOPY            BRANCH IF NOT END OF BUFFER          94360000
         MVI   0(R1),X'FF'         SET LAST RCB                         94362000
         BAL   RL2,RTRACK          GET NEXT TRACK ADDRESS               94363000
         L     RW,RDROBUF          GET ADDRESS OF BUFFER             R4 94364000
         ST    RW,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP      R4 94366000
         MVC   PCESEEK,RBUFTRK(RW)  SET TRACK ADDRESS FOR $EXCP      R4 94368000
         ST    R1,RBUFTRK(,RW)     SET CHAIN TRACK                   R4 94374000
         LR    RW,R1               SAVE NEXT TRACK                      94376000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     94378000
        $EXCP  (R1)                INITIATE WRITE                       94380000
         BAL   RL2,RGETBUF         GET NEXT BUFFER                      94382000
         SPACE 2                                                     R4 94384000
RPUTCOPY MVC   0(3,R1),RCARDLEN    SET RECORD LENGTH, LRC, AND LRECL R4 94386000
         TM    RDRSW,RJCLSW        TEST CURRENT MODE                 R4 94388000
         BZ    RPUTNJCL            BRANCH IF NOT JCL FILE            R4 94390000
         MVI   LRCLRECL-LRCDSECT(R1),80  FORCE JCL LRECL TO 80       R4 94392000
         TM    RCARDLRC,LRC1CCTL   TEST RECORD CONTROL BYTE          R4 94393000
         BZ    RPUTNOCC            BRANCH IF NO CARRIAGE CONTROL     R4 94394000
         MVI   LRCLRECL-LRCDSECT(R1),80  FORCE LRECL TO 80.    @OZ26206 94395000
         SPACE 1                                                     R4 94396000
RPUTNJCL TM    RCARDLRC,LRC1CCTL   TEST RECORD CONTROL BYTE          R4 94397000
         BZ    RPUTNOCC            BRANCH IF NO CARRIAGE CONTROL     R4 94398000
         MVC   LRCCCTL-LRCDSECT(,R1),RDRCCTL  SET CARRIAGE CONTROL   R4 94399000
         LA    R1,1(,R1)           INCREMENT TEXT ADDRESS            R4 94400000
         SPACE 1                                                     R4 94401000
RPUTNOCC SLR   R15,R15             CLEAR REGISTER                    R4 94402000
         IC    R15,RCARDLEN        GET CARD LENGTH                   R4 94404000
         EX    R15,RPUTMOVE        MOVE TEXT                         R4 94406000
         LA    R1,3(R1,R15)        ADVANCE                           R4 94408000
         ST    R1,RBONEXT           OUTPUT POINTER                   R4 94410000
         SPACE 1                                                     R4 94411000
RESETYPE MVI   RCARDLRC,0          RESET CARD TYPE                      94412000
         BR    RL1                 RETURN                               94414000
         EJECT                                                          94420000
RPUTERM  MVI   0(R1),X'FF'         SET LAST RCB                         94422000
         L     R1,RDROBUF          GET BUFFER ADDRESS                R4 94423000
         ST    R1,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP      R4 94424000
         MVC   PCESEEK,RBUFTRK(R1)  SET TRACK ADDRESS FOR $EXCP      R4 94426000
         SR    RW,RW               TERMINATE                            94428000
         ST    RW,RBUFTRK(,R1)      TRACK CHAIN                      R4 94430000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     94432000
        $EXCP  (R1)                INITIATE WRITE                       94434000
         L     R1,RDRIOT           GET ADDRESS OF FIRST IOT             94436000
         ICM   RW,15,IOTIOT-IOTDSECT(R1)  FIND                          94438000
         BZ    *+10                        END OF                       94440000
         LR    R1,RW                        IOT                         94442000
         B     *-10                          CHAIN                      94444000
         L     RW,IOTPDDBP-IOTDSECT(,R1)  RW = ADDRESS OF               94446000
         ALR   RW,R1                       CURRENT PDDB                 94448000
         L     R0,JCTJOBIN         GET CURRENT CARD COUNT               94450000
         S     R0,PDBRECCT-PDBDSECT(,RW)  COMPUTE DATA SET CARD COUNT   94452000
         ST    R0,PDBRECCT-PDBDSECT(,RW)   AND STORE IN PDDB            94454000
         LA    RW,PDBLENG(,RW)     ADVANCE TO NEXT PDDB                 94456000
         SLR   RW,R1               GET DISPLACEMENT                     94458000
         ST    RW,IOTPDDBP-IOTDSECT(,R1)  SAVE PDDB DISPLACEMENT        94460000
         MVC   RDRDSKEY,=H'1'      SET JCL DATA KEY                     94462000
         L     RW,RJCLTRAK         RW = NEXT JCL TRACK                  94464000
         BAL   RL2,RGETBUF         GET NEXT JCL BUFFER                  94466000
         BR    RL1                 RETURN                               94468000
         SPACE 3                                                     R4 94468500
*        EXECUTE  ONLY                                               R4 94469000
RPUTMOVE MVC   3(*-*,R1),0(RPI)    INSTRUCTION TO MOVE TEXT          R4 94469100
         EJECT                                                          94470000
*********************************************************************** 94472000
*                                                                     * 94474000
*        RKEYSCAN -- SUBROUTINE TO SCAN AND PROCESS KEYWORD VALUES    * 94476000
*                                                                     * 94478000
*              FUNCTIONS -- 1) SCAN AND IDENTIFY KEYWORD FROM CALLER  * 94480000
*                              PROVIDED CONTROL CARD SCAN TABLE       * 94482000
*                           2) SCAN KEYWORD VALUE AND CONVERT         * 94484000
*                              ACCORDING TO CONTROL CARD SCAN ENTRY   * 94486000
*                           3) STORE CONVERTED VALUE IN CALLER        * 94488000
*                              PROVIDED OUTPUT TABLE                  * 94490000
*                                                                     * 94492000
*              INPUTS -- R1  = ADDRESS OF CONTROL CARD SCAN TABLE     * 94494000
*                        RW  = POINTER TO PARAMETER FIELD             * 94496000
*                        R14 = BINARY 1                               * 94498000
*                        R15 = ADDRESS OF END OF INPUT FIELD          * 94500000
*                                                                     * 94502000
*              LINK REGISTER -- RL1                                   * 94504000
*                                                                     * 94506000
*              RETURNS -- RL1+0 - ERROR RETURN                        * 94508000
*                         RL1+4 - NORMAL RETURN                       * 94510000
*                                                                     * 94512000
*********************************************************************** 94514000
         SPACE 5                                                        94516000
RKEYSCAN NULL                      TABLE DIRECTED KEYWORD SCAN ROUTINE  94518000
         ST    R1,PCER1            SAVE INPUT REGISTER                  94520000
         ST    RL1,PCEWA           SAVE LINK REGISTER                   94522000
         BXH   RW,R14,4(RL1)       SEARCH FOR                           94524000
         CLI   1(RW),C' '           START OF                            94526000
         BE    *-8                   PARAMETERS                         94528000
         MVC   RKEYMASK(20),RKEYSWS  INITIALIZE RKEYSCAN SWITCHES    R4 94529000
         SPACE 3                                                        94530000
RKEYNEXT LM    R0,R1,RKBLANKS      INITIALIZE SCAN REGISTERS            94532000
         MVI   RKSCANSW+1,X'4A'    SET FOR ALPHAMERIC SCAN              94534000
         BAL   RL1,RKSCAN          SCAN KEYWORD                         94536000
         B     RKEYEXIT            EXIT IF END OF CARD                  94538000
         STM   R0,R1,RTEMP         SAVE KEYWORD                         94540000
         CLI   RTEMP+7,C' '        TEST FOR NULL KEYWORD                94542000
         BE    RKEYNEXT            IGNORE NULL KEYWORDS                 94544000
         CLI   RTEMP,C' '          TEST FOR OVERFLOW                    94546000
         BNE   RKERROR             BRANCH IF MORE THAN 7 CHARACTERS     94548000
         L     RL2,PCER1           RL2 = ADDRESS OF SCAN TABLE          94550000
         USING RSCANTBL,RL2        ESTABLISH SCAN TABLE ADDRESSABILITY  94552000
         EJECT                                                       R4 94554000
RKSERCH1 CLI   RSCANAME,X'FF'      TEST FOR END OF SCAN TABLE           94556000
         BE    RKERROR             BRANCH IF KEYWORD NOT FOUND          94558000
         CLC   RSCANAME,RTEMP+1    COMPARE TABLE KEYWORD                94560000
         BE    RKFOUND             BRANCH IF KEYWORD MATCHES            94562000
         CLI   RTEMP+6,C' '        TEST KEYWORD LENGTH                  94564000
         BNE   RKSERCH2            BRANCH IF NOT SINGLE CHARACTER       94566000
         CLC   RSCANABR,RTEMP+7    COMPARE TABLE ABBREVIATION           94568000
         BE    RKFOUND             BRANCH IF ABBREVIATION MATCHES       94570000
         SPACE 1                                                        94572000
RKSERCH2 LA    RL2,RSCANEXT        GET ADDRESS OF NEXT ENTRY            94574000
         B     RKSERCH1             AND CONTINUE SEARCHING              94576000
         SPACE 2                                                        94578000
RKFOUND  LH    R1,RSCANDSP         GET DISPLACEMENT FROM SCAN TABLE     94580000
         ALR   R1,JCT              ADD ADDRESS OF OUTPUT TABLE          94582000
         IC    RL1,RSCANFLG        ISOLATE                              94584000
         N     RL1,=A(RSCFLPCT)     MAXIMUM NUMBER OF VALUES            94586000
         BNZ   RKVALUE             BRANCH IF VALUES EXPECTED            94588000
         MVI   RKEYMASK,X'96'      PRESET OPERATION CODE TO 'OI'        94590000
         TM    RSCANFLG,RSCFLCOM   TEST OPTION BYTE                     94592000
         BZ    *+8                 BRANCH IF NO COMPLEMENTATION         94594000
         MVI   RKEYMASK,X'94'      SET OPERATION CODE TO 'NI'           94596000
         MVC   RKEYMASK+1(1),RSCANMSK   SET MASK                        94598000
         EX    R0,RKEYMASK         SET KEYWORD INDICATION            R4 94600000
         B     RKEYNEXT            PROCESS NEXT KEYWORD                 94602000
         SPACE 2                                                        94604000
RKVALUE  CLI   0(RW),C'='          TEST CURRENT CHARACTER               94606000
         BNE   RKERROR             ILLEGAL IF NOT EQUAL SIGN            94608000
         CLI   1(RW),C' '          TEST NEXT CHARACTER         @OZ29274 94609000
         BE    RKERROR             ILLEGAL IF BLANK            @OZ29274 94609500
         CLI   1(RW),C'('          TEST NEXT CHARACTER                  94610000
         BNE   *+8                 BRANCH IF NOT LEFT PAREN             94612000
         ALR   RW,R14              ADVANCE TO NEXT COLUMN               94614000
         LCR   RL1,RL1             NEGATE FOLLOWING INSTRUCTION         94616000
         LCR   RL1,RL1             SET COUNT NEGATIVE IF NO PAREN       94618000
         SPACE 1                                                     R4 94620000
RKNXTVAL ST    R1,PCEWB            SAVE ADDRESS OF OUTPUT VALUE         94622000
         ST    RL1,PCEWC           SAVE VALUE COUNT                     94624000
         SR    R0,R0               CLEAR                                94626000
         LR    R1,R0                REGISTERS                           94628000
         TM    RSCANFLG,RSCFLBLK   TEST OPTION BYTE                     94630000
         BZ    *+8                 BRANCH IF NO BLANK FILL              94632000
         LM    R0,R1,RKBLANKS      INITIALIZE SCAN REGISTERS            94634000
         TM    RSCANFLG,RSCFLNUM+RSCFLBIN    TEST OPTION BYTE           94636000
         BZ    *+8                 BRANCH IF ALPHAMERIC SCAN            94638000
         MVI   RKSCANSW+1,C'0'     SET FOR NUMERIC SCAN                 94640000
         BAL   RL1,RKSCAN          SCAN NEXT VALUE                      94642000
         B     RKERROR             BRANCH IF END OF CARD                94644000
         TM    RSCANFLG,RSCFLBIN   TEST OPTION BYTE                     94646000
         BZ    RKEBCDIC            BRANCH IF NO BINARY CONVERSION       94648000
         STM   R0,R1,RTEMP         CONVERT                              94650000
         OI    RTEMP+7,X'F0'        EBCDIC                              94652000
         PACK  RTEMP,RTEMP           VALUE                              94654000
         SR    R0,R0                  TO                                94656000
         CVB   R1,RTEMP                BINARY                           94658000
         EJECT                                                       R4 94659000
RKEBCDIC STM   R0,R1,RTEMP         SAVE VALUE                           94660000
         SR    R0,R0               GET                                  94662000
         IC    R0,RSCANLEN          VALUE LENGTH                        94664000
         BCTR  R0,0                DECREMENT LENGTH                     94666000
         STC   R0,RKSETMVC+1       SET MOVE LENGTH                      94668000
         LA    RL1,RTEMP+6         COMPUTE ADDRESS OF                   94670000
         SLR   RL1,R0               FIRST BYTE OF VALUE - 1             94672000
         CLI   RSCANLEN,8          IF MAX LENGTH IS EIGHT,           R4 94672100
         BE    SKIP330              SKIP OVERFLOW TEST               R4 94672400
         TM    0(RL1),X'BF'        TEST FOR OVERFLOW                    94674000
         BNZ   RKERROR             BRANCH IF VALUE IS TOO LARGE         94676000
SKIP330  TM    RSCANFLG,RSCFLEFT   TEST OPTION BYTE                     94678000
         BZ    RKSETVAL            BRANCH IF NO LEFT JUSTIFICATION      94680000
         TM    RTEMP+7,X'BF'       TEST LOW-ORDER BYTE                  94682000
         BZ    RKSETVAL            BRANCH IF NULL VALUE                 94684000
         STC   R0,RKLFSHFT+1       SET SHIFT LENGTH                     94686000
         IC    R1,RTEMP            GET FILL CHARACTER                   94688000
         SPACE 1                                                        94690000
RKLFTADJ TM    1(RL1),X'BF'        TEST FIRST CHARACTER                 94692000
         BNZ   RKSETVAL            BRANCH IF NOT NULL VALUE             94694000
         EX    R0,RKLFSHFT         SHIFT LEFT ONE CHARACTER          R4 94696000
         STC   R1,RTEMP+7          ADD FILL CHARACTER                   94698000
         B     RKLFTADJ            TRY AGAIN                            94700000
         SPACE 2                                                        94702000
RKSETVAL L     R1,PCEWB            GET ADDRESS OF OUTPUT VALUE          94704000
         EX    R0,RKSETMVC         SET OUTPUT VALUE                  R4 94706000
         L     RL1,PCEWC           GET VALUE COUNT                      94708000
         LTR   RL1,RL1             TEST                                 94710000
         BNP   RKEYNEXT            BRANCH IF SINGLE VALUE               94712000
         CLI   0(RW),C')'          TEST NEXT CHARACTER                  94714000
         BE    RKEYNEXT            BRANCH IF LAST VALUE                 94716000
         ALR   R1,R0               ADVANCE                              94718000
         ALR   R1,R14               VALUE ADDRESS                       94720000
         BCT   RL1,RKNXTVAL        DECREMENT VALUE COUNT AND CONTINUE   94722000
         SPACE 3                                                        94724000
RKERROR  L     RL1,PCEWA           RESTORE LINK REGISTER                94726000
         BR    RL1                 INDICATE SCAN ERROR                  94728000
         SPACE 3                                                        94730000
RKEYEXIT L     RL1,PCEWA           RESTORE LINK REGISTER                94732000
         B     4(,RL1)             INDICATE NORMAL END OF CONTROL CARD  94734000
         DROP  RL2                 DROP SCAN TABLE ADDRESSABILITY       94736000
         EJECT                                                          94738000
RKSCAN   NULL                      CONTROL CARD FIELD SCAN SUBROUTINE   94740000
         BXH   RW,R14,0(RL1)       GET NEXT CHARACTER                   94742000
         SPACE 3                                                        94744000
RKSCAN1  CLI   0(RW),C','          TEST NEXT CHARACTER                  94746000
         BE    4(,RL1)             BRANCH IF COMMA                      94748000
         CLI   0(RW),C'='          *                                    94750000
         BE    4(,RL1)             BRANCH IF EQUAL SIGN                 94752000
         CLI   0(RW),C')'          *                                    94754000
         BE    4(,RL1)             BRANCH IF RIGHT PAREN                94756000
         CLI   0(RW),C' '          *                                    94758000
         BNE   RKSCNTST            BRANCH IF NOT BLANK               R4 94760000
         LR    R15,RW              RE-DEFINE END OF CARD                94762000
         B     4(,RL1)             INDICATE END OF FIELD                94764000
         SPACE 3                                                     R4 94765000
RKSCNTST EX    R0,RKSCANSW         COMPARE WITH LOWER LIMIT          R4 94766000
         BL    RKERROR             ILLEGAL IF LESS                      94768000
         CLI   0(RW),C'9'          COMPARE WITH UPPER LIMIT             94770000
         BH    RKERROR             ILLEGAL IF GREATER                   94772000
         ST    R0,RTEMP            TEST                                 94774000
         TM    RTEMP,X'BF'          HIGH-ORDER CHARACTER                94776000
         BNZ   RKERROR             BRANCH IF OVERFLOW                   94778000
         SLDL  R0,8                SHIFT PARAMETER                      94780000
         IC    R1,0(,RW)           ADD CURRENT CHARACTER                94782000
         BXLE  RW,R14,RKSCAN1      GET NEXT CHARACTER                   94784000
         B     4(,RL1)             END OF CONTROL CARD                  94786000
         SPACE 5                                                     R4 94786500
RKEYMASK EQU   $POSTSAV,4          *** MODEL EXECUTE STATEMENT ***   R4 94786600
RKLFSHFT EQU   $POSTSAV+4,6        *** MODEL EXECUTE STATEMENT ***   R4 94786700
RKSETMVC EQU   $POSTSAV+10,6       *** MODEL EXECUTE STATEMENT ***   R4 94786800
RKSCANSW EQU   $POSTSAV+16,4       *** MODEL EXECUTE STATEMENT ***   R4 94786900
         SPACE 2                                                     R4 94787000
RKEYSWS  OI    0(R1),*-*           SET KEYWORD INDICATION            R4 94787100
         MVC   1(*-*,RL1),2(RL1)   SHIFT LEFT ONE CHARACTER          R4 94787200
         MVC   0(*-*,R1),1(RL1)    SET OUTPUT VALUE                  R4 94787300
         CLI   0(RW),*-*           COMPARE WITH LOWER LIMIT          R4 94787400
         EJECT                                                          94788000
*********************************************************************** 94790000
*                                                                     * 94792000
*        RJOBKILL -- SUBROUTINE TO DELETE CURRENT JOB                 * 94794000
*                                                                     * 94796000
*              FUNCTIONS -- 1) TEST FOR ACTIVE JOB                    * 94798000
*                           2) NOTIFY OPERATOR OF DELETION            * 94800000
*                           3) TERMINATE JOB                          * 94802000
*                           4) PLACE JOB IN PRINT QUEUE               * 94804000
*                                                                     * 94806000
*              LINK REGISTER -- RL1                                   * 94808000
*                                                                     * 94810000
*              EXTERNAL ROUTINES -- 1) RJCTTERM                       * 94812000
*                                   2) RJOBTERM                       * 94814000
*                                                                     * 94816000
*********************************************************************** 94818000
         SPACE 3                                                        94820000
RJOBKILL LTR   JCT,JCT             KILL JOB NOW BEING READ              94822000
         BZR   RL1                 RETURN IF NO JCT                     94824000
        $WTO   RDELMSG,L'RDELMSG,JOB=YES,           NOTIFY OPERATOR    C94826000
               ROUTE=$LOG+$UR,CLASS=$ALWAYS,PRI=$ST OF JOB KILL     R41 94828000
         MVI   JCTOPRIO,X'FF'      SET OUTPUT PRIORITY IN JCT           94830000
         CLC   RDRIOT,=XL4'0'      IS IOT THERE...             @OZ24650 94831100
         BZ    RJOBNIOT            BR IF NO                    @OZ24650 94831200
         BAL   RL2,RJCTTERM        PERFORM FINAL UPDATE OF JCT          94832000
         OI    RDRSW,RJKILL        INDICATE KILLED HERE        @OZ19495 94833000
         BAL   RL2,RJOBTERM        TERMINATE JOB                        94834000
         NI    RDRSW,X'FF'-RJKILL  RESET SW                    @OZ19495 94835000
RJOBNIOT OI    RDRSW,RJFLUSH       TURN ON FLUSH SWITCH        @OZ24650 94836000
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA    94837000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 94838000
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         94840000
         NI    JQEFLAGS,255-QUEHOLD1  RESET JOB HOLD STATUS             94842000
         LA    R0,$OUTPUT          SET UP FOR QUEUE TO $OUTPUT      R41 94842200
         TM    RDRSW,RJNABORT      PURGE INSTEAD...                 R41 94842300
         BZ    RJOBKQ              BR IF NO                         R41 94842400
         LA    R0,$PURGE            ELSE SET UP FOR QUEUE TO $PURGE R41 94842500
         SPACE 1                                                    R41 94842600
RJOBKQ  $QMOD  (R1),(R0)           PLACE JOB IN OUTPUT OR PURGE Q   R41 94842700
         MVC   PCEJQE,$ZEROS       CLEAR JQE ADDRESS           @OZ32566 94846000
         DROP  R1                  DROP JQE ADDRESSABILITY              94848000
         BR    RL1                 RETURN                               94850000
         TITLE 'HASP INPUT SERVICE -- SECOND LEVEL SUBROUTINES'         94852000
*********************************************************************** 94854000
*                                                                     * 94856000
*        RJCTTERM -- SUBROUTINE TO PERFORM FINAL UPDATE OF JCT        * 94858000
*                                                                     * 94860000
*              FUNCTIONS -- 1) CONVERT TIME ESTIMATE TO SECONDS       * 94862000
*                           2) COMPUTE OUTPUT ESTIMATE FROM LINE      * 94864000
*                              AND CARD ESTIMATES                     * 94866000
*                           3) MOVE NJE-RELATED INFO FOR SMF          * 94867000
*                                                                     * 94868000
*              LINK REGISTER -- RL2                                   * 94870000
*                                                                     * 94872000
*********************************************************************** 94874000
         SPACE 5                                                        94876000
RJCTTERM L     R1,JCTETIME         CONVERT TIME ESTIMATE                94878000
         M     R0,=F'60'            FROM MINUTES                        94880000
         ST    R1,JCTETIME           TO SECONDS                         94882000
         SPACE 2                                                        94884000
         L     R1,JCTESTLN         MULTIPLY                             94886000
         M     R0,=F'1000'          ESTIMATED LINE COUNT                94888000
         ST    R1,JCTESTLN           BY 1000                            94890000
         AL    R1,JCTESTPU            AND ADD ESTIMATED CARD COUNT      94892000
         ST    R1,JCTESOUT             FOR ESTIMATED OUTPUT             94894000
         BR    RL2                 RETURN                               94896600
         EJECT                                                          94898000
*********************************************************************** 94900000
*                                                                     * 94902000
*        RJOBTERM -- SUBROUTINE TO TERMINATE JOB                      * 94904000
*                                                                     * 94906000
*              FUNCTIONS -- 1) ADD TERMINATION MESSAGE                * 94908000
*                           2) TERMINATE AND WRITE LAST OUTPUT BUFFER * 94910000
*                           3) COMPLETE JOB CONTROL TABLE             * 94912000
*                           4) WRITE JCT                              * 94914000
*                           5) WRITE IOT                              * 94916000
*                                                                     * 94918000
*              LINK REGISTER -- RL2                                   * 94920000
*                                                                     * 94922000
*              EXTERNAL ROUTINE -- RPUT                               * 94924000
*                                                                     * 94926000
*********************************************************************** 94928000
         SPACE 5                                                        94930000
RJOBTERM ST    RL1,RLSAVE2         SAVE                                 94932000
         ST    RL2,RLSAVE3          RETURN REGISTERS                    94934000
         ICM   RPI,8,RCARDLRL      SAVE CURRENT CARD LENGTH             94936000
         ST    RPI,RSAVE2           AND ADDRESS                         94938000
         TM    JCTJOBFL,JCTTCOPY   TEST JOB FLAGS                       94939000
         BO    RTRCOPY             BRANCH IF 'TYPRUN=COPY'              94939500
         LA    RPI,RDRDLM          GET ADDRESS OF DELIMITER CARD        94940000
         TM    RDRSW,RJCLSW        TEST JCL SWITCH                      94942000
         BO    *+8                 BRANCH IF PROCESSING JCL             94944000
         BAL   RL1,RPUT            ADD DELIMITER CARD TO OUTPUT FILE    94946000
         TM    RDRSW,RXBJOBSW      TEST FOR EXECUTION BATCHING       R4 94950000
         BZ    RNOBATCH            BRANCH IF NOT EXECUTION BATCHING  R4 94952000
         OI    RCARDLRC,LRC1ONUL   INDICATE INTERNALLY GENERATED     R4 94954000
         LA    RPI,=CL80'//'       GET ADDRESS OF NULL CARD          R4 94956000
         BAL   RL1,RPUT            ADD NULL CARD TO OUTPUT FILE         94958000
         OI    JCTJOBFL,JCTNOJNL   FORCE NO JOURNAL                     94960000
         SPACE 1                                                     R4 94962000
RNOBATCH LA    RPI,RJOBDOC         GET ADDRESS OF MESSAGE            R4 94964000
         OI    RCARDLRC,LRC1CCTL+LRC1TASA+LRC1INUL+RDLMSKIP SET TYPE R4 94966000
         MVI   RDRCCTL,C'-'        FORCE TRIPLE SPACE                R4 94967000
         MVI   RCARDLRL,80         SET CARD LENGTH TO 80                94968000
         MVI   RINFLAG1,0          CLEAR 'INPUT' FLAG                R4 94969000
         BAL   RL1,RPUT            ADD JOB DELETED OR CANCELLED MESSAGE 94970000
         SPACE 2                                                        94972000
RTRCOPY  L     R1,RBONEXT          SET                                  94974000
         MVI   0(R1),X'FF'          LAST RCB                            94976000
         L     RW,RDROBUF          GET BUFFER ADDRESS                R4 94977000
         ST    RW,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP      R4 94978000
         MVC   PCESEEK,RBUFTRK(RW)  SET TRACK ADDRESS FOR $EXCP      R4 94980000
         XC    RBUFTRK(,RW),RBUFTRK(RW)  ZERO CHAIN TRACK            R4 94982000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     94984000
        $EXCP  (R1)                INITIATE WRITE                       94986000
         EJECT                                                       R4 94990000
         L     R1,RDROCT           GET ADDRESS OF OCT                   94992000
         LTR   R1,R1               TEST                                 94994000
         BZ    RNOOCT              BRANCH IF NO OCT                     94996000
         ST    R1,PCEBUFAD         SET BUFFER ADDRESS                   94998000
         MVC   PCESEEK,OCTTRACK-OCTDSECT(R1)  SET TRACK ADDRESS         95000000
         LA    R1,PCEDADCT         SET ADDRESS OF DIRECT-ACCESS DCT     95002000
        $EXCP  (R1)                INITIATE WRITE OF OCT                95004000
         SR    R1,R1               INDICATE                             95006000
         ST    R1,RDROCT            NO OUTPUT CONTROL TABLE             95008000
         SPACE 1                                                    R41 95010000
RNOOCT   L     R1,RDRIOT           GET ADDRESS OF FIRST IOT             95012000
         AL    R1,$IOTPDDB         GET ADDRESS OF FIRST PDDB         R4 95014000
         SR    R15,R15             GET                                  95016000
         IC    R15,JCTMCLAS         MESSAGE CLASS                       95018000
         STC   R15,PDBCLASS-PDBDSECT+IOTPDBOJ(,R1)  SET IN JCL PDDB, R4 95020000
         STC   R15,PDBCLASS-PDBDSECT+IOTPDBOL(,R1)   JOB LOG PDDB,   R4 95022000
         STC   R15,PDBCLASS-PDBDSECT+IOTPDBOI(,R1)    JCL IMGS PDDB, R4 95024000
         STC   R15,PDBCLASS-PDBDSECT+IOTPDBOM(,R1)     AND MSGS PDDB R4 95026000
         L     R14,$SSVT           GET ADDRESS OF SSVT                  95028000
         LA    R15,$SVSCAT-SSVT(R14,R15)  GET ADDRESS OF SCAT ENTRY     95030000
         TM    RDRSW,RJKILL        JOB BEING KILLED...         @OZ19495 95030100
         BO    *+12                BR IF YES                   @OZ19495 95030200
         TM    JCTJOBFL,JCTTCOPY   TYPRUN=COPY SPECIFIED...         R41 95030500
         BZ    RNOCOPY1            BR IF NO                         R41 95031000
         TM    SCATFLAG-SCADSECT(R15),SCATHOLD  TEST MSGCLASS       R41 95031500
         BZ    RNOCOPY1            BR IF NOT HELD CLASS             R41 95032000
         OI    PDBFLAG1-PDBDSECT+IOTPDBOJ(R1),PDB1HOLD HOLD JCL     R41 95032500
         SPACE 1                                                    R41 95033000
RNOCOPY1 TM    SCATFLAG-SCADSECT(R15),SCATDUMM  TEST MSGCLASS       R41 95033500
         BO    RMCLDUMM            BRANCH IF MESSAGE CLASS IS DUMMY     95034000
         TM    SCATFLAG-SCADSECT(R15),SCATTCEL  TEST FOR TRACK-CELL  R4 95034100
         BNO   RNOOCT1             BR IF NOT                         R4 95034200
         OI    PDBFLAG2-PDBDSECT+IOTPDBOI(R1),PDB2TCEL  TRACK-CELL   R4 95034300
         OI    PDBFLAG2-PDBDSECT+IOTPDBOM(R1),PDB2TCEL   SYSTEM      R4 95034400
         OI    PDBFLAG2-PDBDSECT+IOTPDBOL(R1),PDB2TCEL    PDDB'S     R4 95034500
RNOOCT1  DS    0H                                                    R4 95034600
         TM    JCTJOBFL,JCTNOUPT   TEST JOB FLAGS                       95036000
         BO    RMCLDUMM            BRANCH IF NO OUTPUT OPTION           95038000
         TM    JCTJBOPT,JCTNOLOG   TEST JOB OPTIONS                     95040000
         BO    RNOLOG              BRANCH IF NOLOG OPTION               95042000
         B     RFORMS              SET JOB FORMS                        95044000
         EJECT                                                      R41 95045000
RMCLDUMM OI    PDBFLAG1-PDBDSECT+IOTPDBOJ(R1),PDB1NSOT PRINT NO JCL, R4 95046000
         OI    PDBFLAG1-PDBDSECT+IOTPDBOI(R1),PDB1NSOT  JCL IMAGES,  R4 95048000
         OI    PDBFLAG1-PDBDSECT+IOTPDBOM(R1),PDB1NSOT   OR SYS MSGS R4 95050000
         SPACE 1                                                     R4 95051000
RNOLOG   OI    PDBFLAG1-PDBDSECT+IOTPDBOL(R1),PDB1NSOT  NO JOB LOG   R4 95052000
         SPACE 1                                                     R4 95053000
RFORMS   L     R15,JCTFORMS        GET JOB FORMS                        95054000
         ST    R15,PDBFORMS-PDBDSECT+IOTPDBOJ(,R1)  SET IN JCL PDDB, R4 95056000
         ST    R15,PDBFORMS-PDBDSECT+IOTPDBOL(,R1)   JOB LOG PDDB,   R4 95058000
         ST    R15,PDBFORMS-PDBDSECT+IOTPDBOI(,R1)    JCL IMAGES,    R4 95060000
         ST    R15,PDBFORMS-PDBDSECT+IOTPDBOM(,R1)     AND SYS MSGS  R4 95062000
         SPACE 1                                                    R41 95062100
         OI    PDBFLAG2-PDBDSECT+IOTPDBOJ(R1),PDB2JFMS  SHOW FORMS  R41 95062200
         OI    PDBFLAG2-PDBDSECT+IOTPDBOL(R1),PDB2JFMS   SET        R41 95062300
         OI    PDBFLAG2-PDBDSECT+IOTPDBOI(R1),PDB2JFMS    FROM      R41 95062400
         OI    PDBFLAG2-PDBDSECT+IOTPDBOM(R1),PDB2JFMS     JCT      R41 95062500
         SPACE 1                                                    R41 95062600
         TM    JCTFLAG1,JCTBURST   GET DEFAULT BURST OPTION         R41 95063000
         BZ    RJQECKP             BR IF NO, ELSE SET B=Y IN        R41 95063500
         OI    PDBFLAG2-PDBDSECT+IOTPDBOJ(R1),PDB2BRST  JCL PDDB    R41 95064000
         OI    PDBFLAG2-PDBDSECT+IOTPDBOL(R1),PDB2BRST  JOB LOG     R41 95064500
         OI    PDBFLAG2-PDBDSECT+IOTPDBOI(R1),PDB2BRST  JCL IMG     R41 95065000
         OI    PDBFLAG2-PDBDSECT+IOTPDBOM(R1),PDB2BRST  AND SMB     R41 95065500
         SPACE 1                                                    R41 95066000
RJQECKP $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41 95067000
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 95068000
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         95070000
        $QCKPT (R1)                FORCE CKPT OF JQE                 R4 95070100
         TM    RDRSW,RXBJOBSW      TEST FOR XBM                @OZ33423 95070500
         BZ    RNOTXBM             BRANCH IF NOT               @OZ33423 95070600
         TM    JCTJBOPT,JCTSETUP   TEST FOR XBM WITH SETUP     @OZ33423 95070700
         BZ    RNOTXBM             BRANCH IF NOT               @OZ33423 95070800
         OI    JQEFLAGS,QUEHOLD1   ELSE SET JQE HOLD           @OZ33423 95071000
RNOTXBM  DS    0H                                              @OZ33423 95071500
         MVC   JQEPRTRT,JCTPROUT   SET PRINT AND                        95072000
         MVC   JQEPUNRT,JCTPUOUT    PUNCH ROUTE CODES                   95074000
         TM    RDRSW2,RJCLH        IF IMMEDIATE HOLD                 R4 95074500
         BZ    RNOHOLD               SPECIFIED, TURN ON JQE          R4 95074600
         OI    JQEFLAGS,QUEHOLD1     HOLD BIT & ISSUE $WTO           R4 95074700
        $WTO   RJOBHELD,L'RJOBHELD,JOB=YES, ISSUE 'JOB HELD' MSG     R4C95074800
               ROUTE=$LOG+$UR+$MAIN,CLASS=$NORMAL,PRI=$ST            R4 95074900
         DROP  R1                  KILL JQE ADDRESSABILITY          R41 95075000
         EJECT                                                      R41 95075100
RNOHOLD  TM    RDRSW,RJKILL        JOB BEING KILLED...         @OZ19495 95075200
         BO    *+12                BR IF YES                   @OZ19495 95075210
         TM    JCTJOBFL,JCTTCOPY   TYPRUN=COPY SPECIFIED...    @OZ19495 95075220
         BZ    RNOCOPY2            BR IF NO                         R41 95075300
         TM    RDRSW,RJNABORT      ARE WE PURGING...           @OZ19495 95075310
         BO    RNOCOPY2            IF YES SKIP HOLD ROUTINE    @OZ19495 95075320
         L     RL2,RDRIOT          GET ADDR OF 1ST IOT              R41 95075400
         USING IOTDSECT,RL2        PROVIDE IOT ADDRESSABILITY       R41 95075500
         LA    RW,IOTPDBOJ(,RL2)   GET IOT ADDR + PDDB DISPL        R41 95075600
         AL    RW,$IOTPDDB         GET ADDR OF JCL PDDB             R41 95075700
         USING PDBDSECT,RW         PROVIDE PDDB ADDRESSABILITY      R41 95075800
         TM    PDBFLAG1,PDB1HOLD   DATA SET TO BE HELD...           R41 95075900
         BZ    RNOCOPY2            BR IF NO                         R41 95076000
         TM    PDBFLAG1,PDB1NSOT   DATA SET PRINTABLE...            R41 95076100
         BO    RNOCOPY2            BR IF NO                         R41 95076200
         NI    PDBFLAG1,255-PDB1HOLD  RESET HOLD INDICATOR          R41 95076300
         LH    R0,IOTLENG          GET CSA                          R41 95076400
*              THIS LINE DELETED BY APAR NUMBER              * @OZ20045 95076500
         GETMAIN RC,LV=(R0),SP=231   NEW (SPIN) IOT            @OZ20045 95076600
         LTR   R15,R15             GETMAIN SUCCESSFUL...            R41 95076700
         BNZ   RNOCOPY2            BR IF NO                         R41 95076800
         LR    RL1,R1              RELOAD NEW IOT ADDRESS           R41 95076900
         LR    R0,RL1              COPY 1ST IOT                     R41 95077000
         LH    R1,IOTLENG           (UP TO TRACK                    R41 95077100
         LR    R14,RL2               GROUP MAP)                     R41 95077200
         LA    R15,IOTTGMAP-IOTDSECT  TO NEW                        R41 95077300
         MVCL  R0,R14                  (SPIN) IOT                   R41 95077400
        $BFRBLD  (RL1)             REFRESH IOB                 @OZ20045 95077450
        $TRACK IOTMSTAB            GET TRACK ADDR FOR HQT           R41 95077500
         ST    R1,JCTHQT           SET HQT TRACK ADDR IN JCT        R41 95077600
         DROP  RL2                 RE-SET IOT ADDRESSABILITY        R41 95077700
         USING IOTDSECT,RL1         FOR NEW IOT                     R41 95077800
         XI    IOTFLAG1,IOT1ALOC+IOT1SPIN  SHOW SPIN/NON-ALLOC      R41 95077900
         LR    R1,RL1                MOVE JCL                       R41 95078000
         AL    R1,$IOTPDDB            DATA SET PDDB                 R41 95078100
         MVC   0(PDBLENG,R1),PDBDSECT  TO NEW IOT                   R41 95078200
         OI    PDBFLAG1-PDBDSECT(R1),PDB1SPIN+PDB1HOLD+PDB1PSO      R41 95078300
         OI    PDBFLAG1,PDB1NSOT   NULLIFY PDDB IN OLD IOT          R41 95078400
         L     R0,JCTHQT           GET HQT TRACK ADDRESS            R41 95078500
         ST    R0,IOTHQT1          SET HQT TRK ADDR IN IOT          R41 95078600
         ST    R0,IOTHQT           INDICATE 1ST HQT                 R41 95078700
         LA    R1,PDBLENG(,R1)     SET POINTER                      R41 95078800
         SLR   R1,RL1               TO NEXT                         R41 95078900
         ST    R1,IOTPDDBP           AVAILABLE PDDB                 R41 95079000
         LA    R1,1                INITIALIZE HQR                   R41 95079100
         STH   R1,JCTHQRCT          COUNT IN JCT                    R41 95079200
         STH   R1,IOTHQRCT           AND IN IOT                     R41 95079300
         MVC   IOTJQOFF,JCTJQE     SET OFFSET OF JQE IN IOT FOR XEQ R41 95079400
         SPACE 1                                                    R41 95079500
RIOTTRK  LA    R1,IOTMSTAB-IOTDSECT(,RL2)  GET ADDR OF 1ST IOT      R41 95079600
        $TRACK (R1)                GET TRACK ADDR FOR NEW IOT       R41 95079700
         ST    R1,JCTSPIOT         SET SPIN IOT TRK ADDR IN JCT     R41 95079800
         ST    R1,IOTTRACK          AND IN OWN IOT                  R41 95079900
         ST    R1,PCESEEK          SET TRACK ADDRESS FOR $EXCP      R41 95080000
         ST    RL1,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP     R41 95080100
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS    R41 95080200
         ST    R13,PCEIOEWF        TELL CHANNEL END NOT TO FREE@OZ20045 95080240
        $EXCP  (R1),WAIT=YES       WRITE SPIN IOT                   R41 95080300
         BM    RIOTTRK             BR IF I/O ERROR TO GET NEW TRACK R41 95080400
         XC    PCEIOEWF(4),PCEIOEWF  CLEAR EWF                 @OZ20045 95080420
         L     RW,$SSVT            GET SSVT ADDRESS                 R41 95080500
         USING SSVT,RW             PROVIDE SSVT ADDRESSABILITY      R41 95080600
         L     R0,$SVSPIOT         GET SPIN/HOLD IOT QUEUE HEAD     R41 95080700
         SPACE 1                                                    R41 95080800
RQUEHOLD ST    R0,IOTIOT           QUEUE NEW                        R41 95080900
         CS    R0,RL1,$SVSPIOT      IOT TO                          R41 95081000
         BNE   RQUEHOLD              SPIN/HOLD QUEUE                R41 95081100
         SPACE 1                                                    R41 95081200
         OI    $SVJOB,X'80'        SIMULATE                         R41 95081300
         L     R1,$EXECPCE          HASPXEQ                         R41 95081400
        $POST  (R1),JOB              $$POST                         R41 95081500
         DROP  RL1,RW              KILL IOT ,SSVT ADDRESSABILITY    R41 95081600
         SPACE 1                                                    R41 95081700
RNOCOPY2 XC    JCTJOBIN,JCTJOBIN   CLEAR JCTJOBIN                   R41 95081800
        $TIME                      GET CURRENT TIME                     95090300
         STM   R0,R1,JCTRDROF      SET READER END TIME AND DATE         95090400
         SPACE 2                                                        95090500
RJCTCK   CLI   BUFECBCC-BUFDSECT(JCT),0  TEST I/O STATUS OF JCT         95090600
         BNE   RJCTWR              BRANCH IF I/O IS NOT ACTIVE          95090700
        $WAIT  IO                  WAIT FOR I/O TO COMPLETE             95090800
         B     RJCTCK              GO BACK AND TRY AGAIN                95090900
         SPACE 2                                                     R4 95091000
RJCTWR   ST    JCT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP         95091100
         L     R1,PCEJQE           GET JQE ADDRESS             @OZ32566 95091200
         USING JQEDSECT,R1         ESTABLISH JQE ADDRESSABILITY         95091300
         MVC   PCESEEK,JQETRAK     SET TRACK ADDRESS FOR $EXCP          95091400
         DROP  R1                  DROP JQE ADDRESSABILITY              95092000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     95094000
        $EXCP  (R1)                INITIATE WRITE OF JCT                95096000
         SLR   JCT,JCT             INDICATE NO JCT                      95098000
         L     R1,RDRIOT           GET ADDRESS OF IOT                R4 95100000
         SPACE 2                                                     R4 95100500
RIOTCK   CLI   BUFECBCC-BUFDSECT(R1),0  TEST I/O STATUS                 95100800
         BNE   RIOTWR              BRANCH IF I/O IS NOT ACTIVE          95101000
        $WAIT  IO                  WAIF FOR I/O TO COMPLETE             95101300
         B     RIOTCK              GO BACK AND TRY AGAIN                95101500
         SPACE 2                                                     R4 95101800
RIOTWR   ICM   R1,15,RDRIOT        GET ADDRESS OF NEXT IOT              95102000
         BZ    RSYNCH              BRANCH IF DONE                       95104000
         MVC   RDRIOT,IOTIOT-IOTDSECT(R1)  REMOVE IOT FROM CHAIN        95106000
         ST    JCT,IOTIOT-IOTDSECT(,R1)  CLEAR CHAIN FIELD              95108000
         ST    R1,PCEBUFAD         SET BUFFER ADDRESS                   95110000
         MVC   PCESEEK,IOTTRACK-IOTDSECT(R1)  SET TRACK ADDRESS         95112000
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     95114000
        $EXCP  (R1)                INITIATE WRITE OF IOT                95116000
         B     RIOTWR              WRITE NEXT IOT (IF ONE)              95118000
         SPACE 2                                                     R4 95118100
RSYNCH   CLI   PCEBUFCT,0          TEST ACTIVE BUFFER COUNT             95122000
         BE    RTERMJOB            BRANCH IF ZERO                       95124000
        $WAIT  BUF                 WAIT FOR COMPLETION OF ALL I/O       95126000
         B     RSYNCH              TRY AGAIN                            95128000
         SPACE 2                                                        95130000
RTERMJOB MVC   RPRIORTY,=CL2' '    RESET PRIORITY                    R4 95132000
         NI    RDRSW,255-RXBJOBSW  RESET XEQ BATCH JOB SWITCH           95136000
         L     RPI,RSAVE2          RESTORE INPUT POINTER                95138000
         STCM  RPI,8,RCARDLRL       AND CARD LENGTH                     95140000
         LA    RPI,0(,RPI)         CLEAR HIGH-ORDER BYTE                95142000
         L     RL1,RLSAVE2         RESTORE                              95144000
         L     RL2,RLSAVE3          RETURN REGISTERS                    95146000
         BR    RL2                   AND RETURN                         95148000
         DROP  RBI                 KILL IOB ADDRESSABILITY              95150000
         EJECT                                                          95153200
*********************************************************************** 95153300
*                                                                     * 95153400
*        RTRACK -- SUBROUTINE TO ACQUIRE TRACK ADDRESS                * 95153500
*                                                                     * 95153600
*              FUNCTION -- TO ACQUIRE TRACK ADDRESS AND CHECKPOINT    * 95153700
*                          ALLOCATION IOT WHEN NECESSARY              * 95153800
*                                                                     * 95153900
*              OUTPUT -- R1 = TRACK ADDRESS                           * 95154000
*                                                                     * 95154100
*              LINK REGISTER -- RL2                                   * 95154200
*                                                                     * 95154300
*********************************************************************** 95154400
         SPACE 5                                                        95154500
RTRACK   L     R1,RDRIOT           GET ADDRESS OF ALLOCATION IOT        95154600
         LA    R1,IOTMSTAB-IOTDSECT(,R1) GET ADDR OF MASTER TAB      R4 95154700
        $TRACK (R1)                GET NEXT TRACK ADDRESS               95154800
         BNZR  RL2                 RETURN IF NOT NEW TRACK GROUP        95154900
         SPACE 2                                                        95155000
         L     R1,RDRIOT           GET ADDRESS OF ALLOCATION IOT        95155100
RTRACKCK CLI   BUFECBCC-BUFDSECT(R1),0  TEST I/O STATUS                 95155200
         BNE   RTRACKWR            BRANCH IF I/O IS NOT ACTIVE          95155300
        $WAIT  IO                  WAIT FOR I/O TO COMPLETE             95155400
         B     RTRACKCK            GO BACK AND TRY AGAIN                95155500
         SPACE 3                                                     R4 95155600
RTRACKWR ST    R1,PCEBUFAD         SET IOT BUFFER ADDRESS               95155700
         MVC   PCESEEK,IOTTRACK-IOTDSECT(R1)  SET TRACK ADDRESS         95155800
         ST    SAVE,PCEIOEWF       PREVENT BUFFER RELEASE               95155900
         LA    R1,PCEDADCT         GET ADDRESS OF DIRECT-ACCESS DCT     95156000
        $EXCP  (R1)                INITIATE WRITE OF IOT                95156100
         SLR   R1,R1               RESET DIRECT-ACCESS                  95156200
         ST    R1,PCEIOEWF          EVENT WAIT FIELD                    95156300
         L     R1,RDRIOT           RESTORE TRACK ADDRESS TO OUTPUT      95156400
         L     R1,TABMTTR-TABDSECT+IOTMSTAB-IOTDSECT(,R1)  REGISTER  R4 95156500
         BR    RL2                 RETURN                               95156600
         EJECT                                                          95156700
*********************************************************************** 95156800
*                                                                     * 95156900
*        RGETBUF -- SUBROUTINE TO INITIALIZE OUTPUT BUFFERS           * 95158000
*                                                                     * 95160000
*              FUNCTION -- ACQUIRE AND INITIALIZE OUTPUT BUFFER       * 95162000
*                                                                     * 95164000
*              INPUT -- RW = TRACK ADDRESS                            * 95166000
*                                                                     * 95168000
*              OUTPUT -- RBO = ADDRESS OF OUTPUT BUFFER               * 95170000
*                                                                     * 95172000
*              LINK REGISTER -- RL2                                   * 95174000
*                                                                     * 95176000
*********************************************************************** 95178000
         SPACE 5                                                        95180000
RGETBUF $GETBUF WAIT=YES           GET OUTPUT BUFFER                 R4 95182000
         ST    R1,RDROBUF          SAVE BUFFER ADDRESS               R4 95184000
         ST    RW,RBUFTRK(,R1)     SET TRACK ADDRESS IN BUFFER       R4 95186000
         LTR   JCT,JCT             TEST FOR JCT                         95188000
         BZ    *+10                BRANCH IF NO JCT                     95190000
         MVC   HDBJBKEY-BUFDSECT(,R1),JCTJBKEY  SET JOB KEY          R4 95192000
         MVC   HDBPDDBK-BUFDSECT(,R1),RDRDSKEY   AND DATA SET KEY    R4 95194000
         LA    R15,BUFSTART-BUFDSECT-3(,R1)  COMPUTE END             R4 95196000
         AH    R15,$BUFSIZE                   OF BUFFER              R4 95197000
         ST    R15,RBOEND          SAVE FOR TEST                     R4 95198000
         LA    R1,ROBUFST(,R1)     SET UP                            R4 95200000
         ST    R1,RBONEXT           OUTPUT POINTER                      95202000
         BR    RL2                 RETURN                               95204000
         TITLE 'HASP INPUT SERVICE -- CONSTANTS AND OPERATOR MESSAGES'  95262000
*                                                                       95264000
*                             READER CONSTANTS AND OPERATOR MESSAGES    95266000
*                                                                       95268000
         SPACE 3                                                        95270000
RUSERID  EQU   $POSTSAV,9          TSU USERID WORK AREA              R4 95272000
RDEST    EQU   $POSTSAV,8          DESTINATION WORK AREA             R4 95274000
         DS    0D                                                    R4 95276000
RKBLANKS DC    CL8' '              BLANK CONSTANT                    R4 95278000
RSYSINCD DC    CL80'//SYSIN     DD *               GENERATED STATEMENT' 95280000
RJOBHELD $MSG  101,'HELD'          JOB HELD MSG                      R4 95281000
RFLMSG   $MSG  125,'DEV NAME SKIPPING FOR JOB CARD'                     95282000
RJERRMSG $MSG  110,'-- ILLEGAL JOB CARD '                               95284000
RDELMSG  $MSG  119,'DELETED'                                            95286000
RJOBDOC  DC    C'******** JOB DELETED BY JES2 OR CANCELLED'          R4 95288000
         DC    C' BY OPERATOR BEFORE EXECUTION ******** '            R4 95290000
         SPACE 2                                                     R4 95290500
*                                                                       95294000
*                             MODEL FOR PDDB                            95296000
*                                                                       95298000
         SPACE 3                                                        95300000
RPDBMODL DS    0D                                                       95302000
         DC    AL1(PDB1NULL)       FLAG BYTE                            95304000
         DC    AL1(0)              RECORD FORMAT                        95306000
         DC    H'0'                MAXIMUM LOGICAL RECORD LENGTH        95308000
         DC    F'0'                STARTING TRACK ADDRESS               95310000
         DC    H'0'                DATA SET KEY                         95312000
         DC    C'A'                DEFAULT SYSOUT CLASS              R4 95314000
         DC    AL1(1)              DEFAULT COPY COUNT                   95316000
         DC    AL1(0,0)            DESTINATION                       R4 95318000
         DC    AL1(0,0,0)          CPU ID, SECURITY, 3211 INDEX         95320000
         DC    AL1(DCBFNCBI)       3525 FUNCTION BYTE                   95322000
         DC    AL1(0)              FLAG BYTE 2                       R4 95322100
         DC    X'00'               DEFAULT COMPACTION TABLE NUMBER  R41 95322200
         DC    F'0'                RECORD COUNT                         95326000
         DC    XL4'00'             FORMS NUMBER                         95328000
         DC    C'****'             FCB ID                               95330000
         DC    C'****'             UCS ID                               95332000
         DC    CL8' '              USER WRITER NAME                     95334000
         DC    XL8'00'             CHECKPOINT RBA                       95336000
         DC    6CL4'****'          N/I PRINT CHAR1-4, FLASH, MODF    R4 95336100
         DC    AL1(0,0)            N/I PRINT FLASHC, MODFT           R4 95336200
         DC    8AL1(0)             N/I PRINT COPY GROUPS             R4 95336300
         EJECT                                                          95338000
         DS    0D                  INPUT PROCESSOR LITERAL POOL         95340000
         LTORG                                                          95342000
         SPACE 3                                                        95348100
$RDREND  DS    0D                  DEFINE END OF CSECT                  95348200
$DLENGTH $DLENGTH                  COMPUTE CONTROL SECTION LENGTH       95348300
HASPRDRO CSECT                     DEFINE SUBROUTINE CSECT              95350000
$RDROEND DS    0D                  DEFINE END OF CSECT                  95352000
$OLENGTH $DLENGTH HEADER=O         COMPUTE CONTROL SECTION LENGTH       95354000
HASPRSCN CSECT                     DEFINE ACCOUNTING FIELD SCAN CSECT   95356000
$SLENGTH $DLENGTH HEADER=S         COMPUTE CONTROL SECTION LENGTH       95358000
APARNUM  DC    CL5'33423'          APAR NUMBER                          95359998
         END                                                            95360000
